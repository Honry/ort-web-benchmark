{"version":3,"file":"ort.es6.min.js","mappings":"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","sources":["webpack://ort/webpack/universalModuleDefinition","webpack://ort/./lib/backend-onnxjs.ts","webpack://ort/./lib/backend-wasm.ts","webpack://ort/./lib/index.ts","webpack://ort/./lib/onnxjs/attribute-with-cache-key.ts","webpack://ort/./lib/onnxjs/attribute.ts","webpack://ort/./lib/onnxjs/backend.ts","webpack://ort/./lib/onnxjs/backends/backend-webgl.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-coordinate-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-definitions.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-encoding-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-fragcolor-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-function-inliner.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-preprocessor.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-registered-libs.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-shape-utils-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-source.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-vec-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/inference-handler.ts","webpack://ort/./lib/onnxjs/backends/webgl/op-resolve-rules.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/batch-normalization.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/binary-op.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/cast.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/concat-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/concat.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-grouped.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-transpose.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/depth-to-space.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/dot-product.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/flatten.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/fuse-utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/gather.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/gemm.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/im2col-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/im2col.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/image-scaler.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/instance-normalization.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/lrn.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/matmul-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/matmul.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/packing-utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pad.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pool.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reduce.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reshape-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reshape.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/resize-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/shape.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/slice.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/softmax.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/split.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/squeeze.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/sum.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/tile.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/transpose.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/uint8-encode.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unary-op.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unpack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unsqueeze.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/upsample.ts","webpack://ort/./lib/onnxjs/backends/webgl/program-manager.ts","webpack://ort/./lib/onnxjs/backends/webgl/session-handler.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-data-encoder.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-layout-strategy.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-layout.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-manager.ts","webpack://ort/./lib/onnxjs/backends/webgl/types.ts","webpack://ort/./lib/onnxjs/backends/webgl/utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/webgl-context-factory.ts","webpack://ort/./lib/onnxjs/backends/webgl/webgl-context.ts","webpack://ort/./lib/onnxjs/execution-plan.ts","webpack://ort/./lib/onnxjs/graph.ts","webpack://ort/./lib/onnxjs/instrument.ts","webpack://ort/./lib/onnxjs/model.ts","webpack://ort/./lib/onnxjs/operators.ts","webpack://ort/./lib/onnxjs/opset.ts","webpack://ort/./lib/onnxjs/ort-schema/flatbuffers/ort-generated.ts","webpack://ort/./lib/onnxjs/session-handler.ts","webpack://ort/./lib/onnxjs/session.ts","webpack://ort/./lib/onnxjs/tensor.ts","webpack://ort/./lib/onnxjs/util.ts","webpack://ort/./lib/version.ts","webpack://ort/./lib/wasm/proxy-wrapper.ts","webpack://ort/./lib/wasm/run-options.ts","webpack://ort/./lib/wasm/session-handler.ts","webpack://ort/./lib/wasm/session-options.ts","webpack://ort/./lib/wasm/wasm-common.ts","webpack://ort/./lib/wasm/wasm-core-impl.ts","webpack://ort/./lib/wasm/wasm-factory.ts","webpack://ort/./lib/wasm/wasm-utils.ts","webpack://ort/./lib/wasm/proxy-worker/main.ts","webpack://ort/../node_modules/worker-loader/dist/runtime/inline.js","webpack://ort/./lib/onnxjs/ort-schema/protobuf/onnx.js","webpack://ort/./lib/wasm/binding/ort-wasm-threaded.min.js","webpack://ort/./lib/wasm/binding/ort-wasm.js","webpack://ort/./node_modules/@protobufjs/aspromise/index.js","webpack://ort/./node_modules/@protobufjs/base64/index.js","webpack://ort/./node_modules/@protobufjs/eventemitter/index.js","webpack://ort/./node_modules/@protobufjs/float/index.js","webpack://ort/./node_modules/@protobufjs/inquire/index.js","webpack://ort/./node_modules/@protobufjs/pool/index.js","webpack://ort/./node_modules/@protobufjs/utf8/index.js","webpack://ort/./node_modules/guid-typescript/dist/guid.js","webpack://ort/./node_modules/protobufjs/minimal.js","webpack://ort/./node_modules/protobufjs/src/index-minimal.js","webpack://ort/./node_modules/protobufjs/src/reader.js","webpack://ort/./node_modules/protobufjs/src/reader_buffer.js","webpack://ort/./node_modules/protobufjs/src/roots.js","webpack://ort/./node_modules/protobufjs/src/rpc.js","webpack://ort/./node_modules/protobufjs/src/rpc/service.js","webpack://ort/./node_modules/protobufjs/src/util/longbits.js","webpack://ort/./node_modules/protobufjs/src/util/minimal.js","webpack://ort/./node_modules/protobufjs/src/writer.js","webpack://ort/./node_modules/protobufjs/src/writer_buffer.js","webpack://ort/../common/dist/cjs/backend-impl.js","webpack://ort/../common/dist/cjs/backend.js","webpack://ort/../common/dist/cjs/env-impl.js","webpack://ort/../common/dist/cjs/env.js","webpack://ort/../common/dist/cjs/index.js","webpack://ort/../common/dist/cjs/inference-session-impl.js","webpack://ort/../common/dist/cjs/inference-session.js","webpack://ort/../common/dist/cjs/onnx-value.js","webpack://ort/../common/dist/cjs/tensor-conversion-impl.js","webpack://ort/../common/dist/cjs/tensor-factory-impl.js","webpack://ort/../common/dist/cjs/tensor-impl.js","webpack://ort/../common/dist/cjs/tensor-utils-impl.js","webpack://ort/../common/dist/cjs/tensor.js","webpack://ort/../common/dist/cjs/version.js","webpack://ort/./node_modules/long/umd/index.js","webpack://ort/./node_modules/flatbuffers/js/flatbuffers.mjs","webpack://ort/webpack/bootstrap","webpack://ort/webpack/runtime/compat get default export","webpack://ort/webpack/runtime/define property getters","webpack://ort/webpack/runtime/hasOwnProperty shorthand","webpack://ort/webpack/runtime/make namespace object","webpack://ort/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ort\"] = factory();\n\telse\n\t\troot[\"ort\"] = factory();\n})(self, () => {\nreturn ","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable import/no-internal-modules */\nimport {Backend, InferenceSession, SessionHandler} from 'onnxruntime-common';\n\nimport {Session} from './onnxjs/session';\nimport {OnnxjsSessionHandler} from './onnxjs/session-handler';\n\nclass OnnxjsBackend implements Backend {\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  async init(): Promise<void> {}\n\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    // NOTE: Session.Config(from onnx.js) is not compatible with InferenceSession.SessionOptions(from\n    // onnxruntime-common).\n    //       In future we should remove Session.Config and use InferenceSession.SessionOptions.\n    //       Currently we allow this to happen to make test runner work.\n    const session = new Session(options as unknown as Session.Config);\n\n    // typescript cannot merge method override correctly (so far in 4.2.3). need if-else to call the method.\n    if (typeof pathOrBuffer === 'string') {\n      await session.loadModel(pathOrBuffer);\n    } else {\n      await session.loadModel(pathOrBuffer);\n    }\n\n    return new OnnxjsSessionHandler(session);\n  }\n}\n\nexport const onnxjsBackend = new OnnxjsBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Backend, env, InferenceSession, SessionHandler} from 'onnxruntime-common';\nimport {cpus} from 'os';\n\nimport {initializeWebAssemblyInstance} from './wasm/proxy-wrapper';\nimport {OnnxruntimeWebAssemblySessionHandler} from './wasm/session-handler';\n\n/**\n * This function initializes all flags for WebAssembly.\n *\n * Those flags are accessible from `ort.env.wasm`. Users are allow to set those flags before the first inference session\n * being created, to override default value.\n */\nexport const initializeFlags = (): void => {\n  if (typeof env.wasm.initTimeout !== 'number' || env.wasm.initTimeout < 0) {\n    env.wasm.initTimeout = 0;\n  }\n\n  if (typeof env.wasm.simd !== 'boolean') {\n    env.wasm.simd = true;\n  }\n\n  if (typeof env.wasm.proxy !== 'boolean') {\n    env.wasm.proxy = false;\n  }\n\n  if (typeof env.wasm.numThreads !== 'number' || !Number.isInteger(env.wasm.numThreads) || env.wasm.numThreads <= 0) {\n    const numCpuLogicalCores = typeof navigator === 'undefined' ? cpus().length : navigator.hardwareConcurrency;\n    env.wasm.numThreads = Math.min(4, Math.ceil((numCpuLogicalCores || 1) / 2));\n  }\n};\n\nclass OnnxruntimeWebAssemblyBackend implements Backend {\n  async init(): Promise<void> {\n    // populate wasm flags\n    initializeFlags();\n\n    // init wasm\n    await initializeWebAssemblyInstance();\n  }\n  createSessionHandler(path: string, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\n  createSessionHandler(buffer: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    const handler = new OnnxruntimeWebAssemblySessionHandler();\n    await handler.loadModel(pathOrBuffer, options);\n    return Promise.resolve(handler);\n  }\n}\n\nexport const wasmBackend = new OnnxruntimeWebAssemblyBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports */\n// We use \"require\" instead of \"import\" here because import statement must be put in top level. Our current code does\n// not allow terser to tree-shaking code as expected because some codes are treated as having side effects.\n// So we import code inside the if-clause to allow terser remove the code safely.\n\nexport * from 'onnxruntime-common';\nimport {registerBackend, env} from 'onnxruntime-common';\nimport {version} from './version';\n\nif (!BUILD_DEFS.DISABLE_WEBGL) {\n  const onnxjsBackend = require('./backend-onnxjs').onnxjsBackend;\n  registerBackend('webgl', onnxjsBackend, -10);\n}\n\nif (!BUILD_DEFS.DISABLE_WASM) {\n  const wasmBackend = require('./backend-wasm').wasmBackend;\n  if (!BUILD_DEFS.DISABLE_WEBGPU && typeof navigator !== 'undefined' && navigator.gpu) {\n    registerBackend('webgpu', wasmBackend, 5);\n  }\n  registerBackend('cpu', wasmBackend, 10);\n  registerBackend('wasm', wasmBackend, 10);\n  registerBackend('xnnpack', wasmBackend, 9);\n  registerBackend('webnn', wasmBackend, 9);\n}\n\nenv.versions.web = version;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nclass AttributeWithCacheKeyImpl {\n  constructor(attribute: Record<string, unknown>) {\n    Object.assign(this, attribute);\n  }\n\n  private _cacheKey: string;\n  public get cacheKey(): string {\n    if (!this._cacheKey) {\n      this._cacheKey =\n          Object.getOwnPropertyNames(this).sort().map(name => `${(this as Record<string, unknown>)[name]}`).join(';');\n    }\n    return this._cacheKey;\n  }\n}\n\nexport interface AttributeWithCacheKey {\n  readonly cacheKey: string;\n}\n\nexport const createAttributeWithCacheKey = <T extends Record<string, unknown>>(attribute: T): T&AttributeWithCacheKey =>\n    new AttributeWithCacheKeyImpl(attribute) as unknown as T & AttributeWithCacheKey;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport Long from 'long';\n\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\nimport {onnx} from './ort-schema/protobuf/onnx';\nimport {Tensor} from './tensor';\nimport {decodeUtf8String, LongUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Attribute {\n  export interface DataTypeMap {\n    float: number;\n    int: number;\n    string: string;\n    tensor: Tensor;\n    floats: number[];\n    ints: number[];\n    strings: string[];\n    tensors: Tensor[];\n  }\n\n  export type DataType = keyof DataTypeMap;\n}\n\ntype ValueTypes = Attribute.DataTypeMap[Attribute.DataType];\n\ntype Value = [ValueTypes, Attribute.DataType];\n\nexport class Attribute {\n  constructor(attributes: onnx.IAttributeProto[]|ortFbs.Attribute[]|null|undefined) {\n    this._attributes = new Map();\n    if (attributes !== null && attributes !== undefined) {\n      for (const attr of attributes) {\n        if (attr instanceof onnx.AttributeProto) {\n          this._attributes.set(attr.name, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        } else if (attr instanceof ortFbs.Attribute) {\n          this._attributes.set(attr.name()!, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        }\n      }\n      if (this._attributes.size < attributes.length) {\n        throw new Error('duplicated attribute names');\n      }\n    }\n  }\n\n  set(key: string, type: Attribute.DataType, value: ValueTypes): void {\n    this._attributes.set(key, [value, type]);\n  }\n  delete(key: string): void {\n    this._attributes.delete(key);\n  }\n  getFloat(key: string, defaultValue?: Attribute.DataTypeMap['float']) {\n    return this.get(key, 'float', defaultValue);\n  }\n\n  getInt(key: string, defaultValue?: Attribute.DataTypeMap['int']) {\n    return this.get(key, 'int', defaultValue);\n  }\n\n  getString(key: string, defaultValue?: Attribute.DataTypeMap['string']) {\n    return this.get(key, 'string', defaultValue);\n  }\n\n  getTensor(key: string, defaultValue?: Attribute.DataTypeMap['tensor']) {\n    return this.get(key, 'tensor', defaultValue);\n  }\n\n  getFloats(key: string, defaultValue?: Attribute.DataTypeMap['floats']) {\n    return this.get(key, 'floats', defaultValue);\n  }\n\n  getInts(key: string, defaultValue?: Attribute.DataTypeMap['ints']) {\n    return this.get(key, 'ints', defaultValue);\n  }\n\n  getStrings(key: string, defaultValue?: Attribute.DataTypeMap['strings']) {\n    return this.get(key, 'strings', defaultValue);\n  }\n\n  getTensors(key: string, defaultValue?: Attribute.DataTypeMap['tensors']) {\n    return this.get(key, 'tensors', defaultValue);\n  }\n\n  private get<V extends Attribute.DataTypeMap[Attribute.DataType]>(\n      key: string, type: Attribute.DataType, defaultValue?: V): V {\n    const valueAndType = this._attributes.get(key);\n    if (valueAndType === undefined) {\n      if (defaultValue !== undefined) {\n        return defaultValue;\n      }\n      throw new Error(`required attribute not found: ${key}`);\n    }\n    if (valueAndType[1] !== type) {\n      throw new Error(`type mismatch: expected ${type} but got ${valueAndType[1]}`);\n    }\n    return valueAndType[0] as V;\n  }\n\n  private static getType(attr: onnx.IAttributeProto|ortFbs.Attribute): Attribute.DataType {\n    const type = attr instanceof onnx.AttributeProto ? (attr).type : (attr as ortFbs.Attribute).type();\n    switch (type) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return 'float';\n      case onnx.AttributeProto.AttributeType.INT:\n        return 'int';\n      case onnx.AttributeProto.AttributeType.STRING:\n        return 'string';\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return 'tensor';\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return 'floats';\n      case onnx.AttributeProto.AttributeType.INTS:\n        return 'ints';\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return 'strings';\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return 'tensors';\n      default:\n        throw new Error(`attribute type is not supported yet: ${onnx.AttributeProto.AttributeType[type]}`);\n    }\n  }\n\n  private static getValue(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    const attrType = attr instanceof onnx.AttributeProto ? attr.type : (attr as ortFbs.Attribute).type();\n    if (attrType === onnx.AttributeProto.AttributeType.GRAPH || attrType === onnx.AttributeProto.AttributeType.GRAPHS) {\n      throw new Error('graph attribute is not supported yet');\n    }\n\n    const value = this.getValueNoCheck(attr);\n\n    // cast LONG to number\n    if (attrType === onnx.AttributeProto.AttributeType.INT && LongUtil.isLong(value)) {\n      return LongUtil.longToNumber(value as Long | flatbuffers.Long);\n    }\n\n    // cast LONG[] to number[]\n    if (attrType === onnx.AttributeProto.AttributeType.INTS) {\n      const arr = (value as Array<number|Long|flatbuffers.Long>);\n      const numberValue: number[] = new Array<number>(arr.length);\n\n      for (let i = 0; i < arr.length; i++) {\n        const maybeLong = arr[i];\n        numberValue[i] = LongUtil.longToNumber(maybeLong);\n      }\n\n      return numberValue;\n    }\n\n    // cast onnx.TensorProto to onnxjs.Tensor\n    if (attrType === onnx.AttributeProto.AttributeType.TENSOR) {\n      return attr instanceof onnx.AttributeProto ? Tensor.fromProto(value as onnx.ITensorProto) :\n                                                   Tensor.fromOrtTensor(value as ortFbs.Tensor);\n    }\n\n    // cast onnx.TensorProto[] to onnxjs.Tensor[]\n    if (attrType === onnx.AttributeProto.AttributeType.TENSORS) {\n      if (attr instanceof onnx.AttributeProto) {\n        const tensorProtos = value as onnx.ITensorProto[];\n        return tensorProtos.map(value => Tensor.fromProto(value));\n      } else if (attr instanceof ortFbs.Attribute) {\n        const tensorProtos = value as ortFbs.Tensor[];\n        return tensorProtos.map(value => Tensor.fromOrtTensor(value));\n      }\n    }\n\n    // cast Uint8Array to string\n    if (attrType === onnx.AttributeProto.AttributeType.STRING) {\n      // string in onnx attribute is of uint8array type, so we need to convert it to string below. While in ort format,\n      // string attributes are returned as string, so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8String = value as Uint8Array;\n        return decodeUtf8String(utf8String);\n      }\n    }\n\n    // cast Uint8Array[] to string[]\n    if (attrType === onnx.AttributeProto.AttributeType.STRINGS) {\n      // strings in onnx attribute is returned as uint8array[], so we need to convert it to string[] below. While in ort\n      // format strings attributes are returned as string[], so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8Strings = value as Uint8Array[];\n        return utf8Strings.map(decodeUtf8String);\n      }\n    }\n\n    return value as ValueTypes;\n  }\n\n  private static getValueNoCheck(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    return attr instanceof (onnx.AttributeProto) ? this.getValueNoCheckFromOnnxFormat(attr) :\n                                                   this.getValueNoCheckFromOrtFormat(attr as ortFbs.Attribute);\n  }\n\n  private static getValueNoCheckFromOnnxFormat(attr: onnx.IAttributeProto) {\n    switch (attr.type!) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return attr.f;\n      case onnx.AttributeProto.AttributeType.INT:\n        return attr.i;\n      case onnx.AttributeProto.AttributeType.STRING:\n        return attr.s;\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return attr.t;\n      case onnx.AttributeProto.AttributeType.GRAPH:\n        return attr.g;\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return attr.floats;\n      case onnx.AttributeProto.AttributeType.INTS:\n        return attr.ints;\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return attr.strings;\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return attr.tensors;\n      case onnx.AttributeProto.AttributeType.GRAPHS:\n        return attr.graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${onnx.AttributeProto.AttributeType[attr.type!]}`);\n    }\n  }\n\n  private static getValueNoCheckFromOrtFormat(attr: ortFbs.Attribute) {\n    switch (attr.type()) {\n      case ortFbs.AttributeType.FLOAT:\n        return attr.f();\n      case ortFbs.AttributeType.INT:\n        return attr.i();\n      case ortFbs.AttributeType.STRING:\n        return attr.s();\n      case ortFbs.AttributeType.TENSOR:\n        return attr.t();\n      case ortFbs.AttributeType.GRAPH:\n        return attr.g();\n      case ortFbs.AttributeType.FLOATS:\n        return attr.floatsArray();\n      case ortFbs.AttributeType.INTS: {\n        const ints = [];\n        for (let i = 0; i < attr.intsLength(); i++) {\n          ints.push(attr.ints(i)!);\n        }\n        return ints;\n      }\n      case ortFbs.AttributeType.STRINGS: {\n        const strings = [];\n        for (let i = 0; i < attr.stringsLength(); i++) {\n          strings.push(attr.strings(i));\n        }\n        return strings;\n      }\n      case ortFbs.AttributeType.TENSORS: {\n        const tensors = [];\n        for (let i = 0; i < attr.tensorsLength(); i++) {\n          tensors.push(attr.tensors(i)!);\n        }\n        return tensors;\n      }\n      // case ortFbs.AttributeType.GRAPHS:\n      // TODO: Subgraph not supported yet.\n      // const graphs = [];\n      // for (let i = 0; i < attr.graphsLength(); i++) {\n      //   graphs.push(attr.graphs(i)!);\n      // }\n      // return graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${ortFbs.AttributeType[attr.type()]}`);\n    }\n  }\n\n  protected _attributes: Map<string, Value>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {WebGLBackend} from './backends/backend-webgl';\nimport {Graph} from './graph';\nimport {Operator} from './operators';\nimport {OpSet} from './opset';\nimport {Session} from './session';\n\nexport interface InferenceHandler {\n  /**\n   * dispose the inference handler. it will be called as the last step in Session.run()\n   */\n  dispose(): void;\n}\n\nexport interface SessionHandler {\n  /**\n   * transform the graph at initialization time\n   * @param graphTransformer the graph transformer to manipulate the model graph\n   */\n  transformGraph?(graphTransformer: Graph.Transformer): void;\n\n  /**\n   * create an instance of InferenceHandler to use in a Session.run() call\n   */\n  createInferenceHandler(): InferenceHandler;\n\n  /**\n   * dispose the session handler. it will be called when a session is being disposed explicitly\n   */\n  dispose(): void;\n\n  /**\n   * Resolves the operator from the name and opset version; backend specific\n   * @param node the node to resolve\n   * @param opsets a list of opsets that exported from the model\n   * @param graph the completely initialized graph\n   */\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator;\n\n  /**\n   * This method let's the sessionHandler know that the graph initialization is complete\n   * @param graph the completely initialized graph\n   */\n  onGraphInitialized?(graph: Graph): void;\n\n  /**\n   * a reference to the corresponding backend\n   */\n  readonly backend: Backend;\n\n  /**\n   * a reference to the session context\n   */\n  readonly context: Session.Context;\n}\n\nexport interface Backend {\n  /**\n   * initialize the backend. will be called only once, when the first time the\n   * backend it to be used\n   */\n  initialize(): boolean|Promise<boolean>;\n\n  /**\n   * create an instance of SessionHandler to use in a Session object's lifecycle\n   */\n  createSessionHandler(context: Session.Context): SessionHandler;\n\n  /**\n   * dispose the backend. currently this will not be called\n   */\n  dispose(): void;\n}\n\n// caches all initialized backend instances\nconst backendsCache: Map<string, Backend> = new Map();\n\nexport const backend: {[name: string]: Backend} = {\n  webgl: new WebGLBackend()\n};\n\n/**\n * Resolve a reference to the backend. If a hint is specified, the corresponding\n * backend will be used.\n */\nexport async function resolveBackend(hint?: string|readonly string[]): Promise<Backend> {\n  if (!hint) {\n    return resolveBackend(['webgl']);\n  } else {\n    const hints = typeof hint === 'string' ? [hint] : hint;\n\n    for (const backendHint of hints) {\n      const cache = backendsCache.get(backendHint);\n      if (cache) {\n        return cache;\n      }\n\n      const backend = await tryLoadBackend(backendHint);\n      if (backend) {\n        return backend;\n      }\n    }\n  }\n\n  throw new Error('no available backend to use');\n}\n\nasync function tryLoadBackend(backendHint: string): Promise<Backend|undefined> {\n  const backendObj = backend;\n\n  if (typeof backendObj[backendHint] !== 'undefined' && isBackend(backendObj[backendHint])) {\n    const backend = backendObj[backendHint];\n    let init = backend.initialize();\n    if (typeof init === 'object' && 'then' in init) {\n      init = await init;\n    }\n    if (init) {\n      backendsCache.set(backendHint, backend);\n      return backend;\n    }\n  }\n\n  return undefined;\n}\n\nfunction isBackend(obj: unknown) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const o = obj as any;\n\n  // check if an object is a Backend instance\n  if (\n      'initialize' in o && typeof o.initialize === 'function' &&                      // initialize()\n      'createSessionHandler' in o && typeof o.createSessionHandler === 'function' &&  // createSessionHandler()\n      'dispose' in o && typeof o.dispose === 'function'                               // dispose()\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nexport type BackendType = Backend;\nexport type SessionHandlerType = ReturnType<BackendType['createSessionHandler']>;\nexport type InferenceHandlerType = ReturnType<SessionHandlerType['createInferenceHandler']>;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {Backend, SessionHandler} from '../backend';\nimport {Logger} from '../instrument';\nimport {Session} from '../session';\n\nimport {WebGLSessionHandler} from './webgl/session-handler';\nimport {WebGLContext} from './webgl/webgl-context';\nimport {createWebGLContext} from './webgl/webgl-context-factory';\n\n/**\n * WebGLBackend is the entry point for all WebGL opeartions\n * When it starts it created the WebGLRenderingContext\n * and other main framework components such as Program and Texture Managers\n */\nexport class WebGLBackend implements Backend {\n  glContext: WebGLContext;\n\n  get contextId(): 'webgl'|'webgl2'|undefined {\n    return env.webgl.contextId;\n  }\n  set contextId(value: 'webgl'|'webgl2'|undefined) {\n    env.webgl.contextId = value;\n  }\n\n  get matmulMaxBatchSize(): number|undefined {\n    return env.webgl.matmulMaxBatchSize;\n  }\n  set matmulMaxBatchSize(value: number|undefined) {\n    env.webgl.matmulMaxBatchSize = value;\n  }\n\n  get textureCacheMode(): 'initializerOnly'|'full'|undefined {\n    return env.webgl.textureCacheMode;\n  }\n  set textureCacheMode(value: 'initializerOnly'|'full'|undefined) {\n    env.webgl.textureCacheMode = value;\n  }\n\n  get pack(): boolean|undefined {\n    return env.webgl.pack;\n  }\n  set pack(value: boolean|undefined) {\n    env.webgl.pack = value;\n  }\n\n  get async(): boolean|undefined {\n    return env.webgl.async;\n  }\n  set async(value: boolean|undefined) {\n    env.webgl.async = value;\n  }\n\n  initialize(): boolean {\n    try {\n      this.glContext = createWebGLContext(this.contextId);\n      if (typeof this.matmulMaxBatchSize !== 'number') {\n        this.matmulMaxBatchSize = 16;\n      }\n      if (typeof this.textureCacheMode !== 'string') {\n        this.textureCacheMode = 'full';\n      }\n      if (typeof this.pack !== 'boolean') {\n        this.pack = false;\n      }\n      if (typeof this.async !== 'boolean') {\n        this.async = false;\n      }\n\n      Logger.setWithEnv(env);\n\n      Logger.verbose(\n          'WebGLBackend',\n          `Created WebGLContext: ${typeof this.glContext} with matmulMaxBatchSize: ${\n              this.matmulMaxBatchSize}; textureCacheMode: ${this.textureCacheMode}; pack: ${this.pack}; async: ${\n              this.async}.`);\n      return true;\n    } catch (e) {\n      Logger.warning('WebGLBackend', `Unable to initialize WebGLBackend. ${e}`);\n      return false;\n    }\n  }\n  createSessionHandler(context: Session.Context): SessionHandler {\n    return new WebGLSessionHandler(this, context);\n  }\n  dispose(): void {\n    this.glContext.dispose();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ArrayUtil, BroadcastUtil, ShapeUtil} from '../../util';\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\nimport {squeezeShape} from './texture-layout-strategy';\nimport {TextureLayout} from './types';\nimport {generateShaderFuncNameFromInputSamplerName, generateShaderFuncNameFromInputSamplerNameAtOutCoords, getCoordsDataType, getGlChannels, getSqueezedParams, squeezeInputShape} from './utils';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class CoordsGlslLib extends GlslLib {\n  returnType: string;\n\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.offsetToCoords(),\n      ...this.coordsToOffset(),\n      ...this.toVec(),\n      ...this.valueFrom(),\n      // TODO return these only when packing is enabled.\n      ...this.getCommonUtilFuncs(),\n      ...this.getInputsSamplingSnippets(),\n      ...this.getOutputSamplingSnippet()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected offsetToCoords(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'offsetToCoords';\n    return {\n      offsetToCoords: new GlslLibRoutine(`\n      vec2 ${funcName}(int offset, int width, int height) {\n        int t = offset / width;\n        int s = offset - t*width;\n        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);\n        return coords;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected coordsToOffset(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'coordsToOffset';\n    return {\n      coordsToOffset: new GlslLibRoutine(`\n      int ${funcName}(vec2 coords, int width, int height) {\n        float s = coords.s * float(width);\n        float t = coords.t * float(height);\n        int offset = int(t) * width + int(s);\n        return offset;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Generates code for output sampler.\n   */\n\n  protected getOutputSamplingSnippet(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    if (outputLayout.isPacked) {\n      return this.getPackedOutputSamplingSnippet(outputLayout);\n    } else {\n      return this.getUnpackedOutputSamplingSnippet(outputLayout);\n    }\n  }\n\n  /**\n   * Generates code for packed output sampler.\n   */\n  protected getPackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputPacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] = this.getOutputPacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputPacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        result[funcName] = this.getOutputPackedNDCoords(outShape, outTexShape as [number, number]);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRGBASource = `\n      void setOutput(vec4 val) {\n        ${glsl.output} = val;\n      }\n    `;\n    const floatTextureSetRGBAFuncName = 'floatTextureSetRGBA';\n    result[floatTextureSetRGBAFuncName] = new GlslLibRoutine(floatTextureSetRGBASource);\n    return result;\n  }\n\n  /**\n   * Generates code for unpacked output sampler.\n   */\n  protected getUnpackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputUnpacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] =\n            this.getOutputUnpacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputUnpacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      case 4:\n        result[funcName] = this.getOutputUnpacked4DCoords(\n            outShape as [number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 5:\n        result[funcName] = this.getOutputUnpacked5DCoords(\n            outShape as [number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 6:\n        result[funcName] = this.getOutputUnpacked6DCoords(\n            outShape as [number, number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        throw new Error(`Unsupported output dimensionality: ${outShape.length}`);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRSource = `\n        void setOutput(float val) {\n          ${glsl.output} = vec4(val, 0, 0, 0);\n        }\n    `;\n    const floatTextureSetRFuncName = 'floatTextureSetR';\n    result[floatTextureSetRFuncName] = new GlslLibRoutine(floatTextureSetRSource);\n    return result;\n  }\n\n  /**\n   * Scalar output coordinates.\n   */\n  protected getOutputScalarCoords(): GlslLibRoutine {\n    return new GlslLibRoutine(`\n      int getOutputCoords() {\n        return 0;\n      }\n    `);\n  }\n\n  /**\n   * 1D packed output coordinates.\n   */\n  protected getOutputPacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = texShape;\n    let source = '';\n    if (packedTexShape[0] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.y * ${packedTexShape[1]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    if (packedTexShape[1] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.x * ${packedTexShape[0]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                 vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          return 2 * (resTexRC.y * ${packedTexShape[0]} + resTexRC.x);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 2D packed output coordinates.\n   */\n  protected getOutputPacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    if (ArrayUtil.arraysEqual(shape, texShape)) {\n      source = `\n        ivec2 getOutputCoords() {\n          return 2 * ivec2(TexCoords.xy * vec2(${texShape[0]}, ${texShape[1]}));\n        }\n      `;\n      return new GlslLibRoutine(source);\n    }\n\n    const packedTexShape = texShape;\n    // texels needed to accommodate a logical row\n    const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n    /**\n     * getOutputCoords\n     *\n     * resTexRC: The rows and columns of the texels. If you move over one\n     * texel to the right in the packed texture, you are moving over one column\n     * (not two).\n     *\n     * index: The texel index\n     */\n    source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 3D packed output coordinates.\n   */\n  protected getOutputPacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n    const source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          int b = index / ${texelsInBatch};\n          index -= b * ${texelsInBatch};\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec3(b, r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * ND packed output coordinates.\n   */\n  protected getOutputPackedNDCoords(shape: readonly number[], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n\n    const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n    let texelsInBatchN = texelsInBatch;\n    let batches = '';\n    let coords = 'b, r, c';\n\n    for (let b = 2; b < shape.length - 1; b++) {\n      texelsInBatchN *= shape[shape.length - b - 1];\n      batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n      coords = `b${b}, ` + coords;\n    }\n    const source = `\n      ivec${shape.length} getOutputCoords() {\n        ivec2 resTexRC = ivec2(TexCoords.xy *\n                              vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n        int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n        ${batches}\n\n        int b = index / ${texelsInBatch};\n        index -= b * ${texelsInBatch};\n\n        // reverse r and c order for packed texture\n        int r = imod(index, ${texelsInLogicalRow}) * 2;\n        int c = 2 * (index / ${texelsInLogicalRow});\n\n        return ivec${shape.length}(${coords});\n      }\n    `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 1D output coordinates.\n   */\n  protected getOutputUnpacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          return resTexRC.y * ${texShape[0]} + resTexRC.x;\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 2D output coordinates.\n   */\n  protected getOutputUnpacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          int r = index / ${shape[1]};\n          int c = index - r * ${shape[1]};\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 3D output coordinates.\n   */\n  protected getOutputUnpacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec3(r, c, d);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 4D output coordinates.\n   */\n  protected getOutputUnpacked4DCoords(shape: [number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec4 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec4(r, c, d, d2);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 5D output coordinates.\n   */\n  protected getOutputUnpacked5DCoords(shape: [number, number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec5 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec5(r, c, d, d2, d3);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 6D output coordinates.\n   */\n  protected getOutputUnpacked6DCoords(shape: [number, number, number, number, number, number], texShape: [\n    number, number\n  ]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3', 'd4'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n     ivec6 getOutputCoords() {\n         ivec2 resTexRC = ivec2(TexCoords.xy *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n         int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n         ${coordsFromIndexSnippet}\n         return ivec6(r, c, d, d2, d3, d4);\n       }\n     `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Generates code for common UV coords computation utility functions.\n   */\n  protected getCommonUtilFuncs(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    let funcName = 'uvFromFlat';\n    result[funcName] = new GlslLibRoutine(`\n    vec2 uvFromFlat(int texNumR, int texNumC, int index) {\n      int texC = index / texNumR;\n      int texR = index - texC * texNumR;\n      // TODO: swap texR, texC order in following function so row is corresponding to u and column is corresponding to\n      //       v.\n      return (vec2(texR, texC) + halfCR) / vec2(texNumR, texNumC);\n    }\n    `);\n    funcName = 'packedUVfrom1D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n        int texelIndex = index / 2;\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom2D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom2D(int texNumR, int texNumC, int texelsInLogicalRow, int row, int col) {\n        int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom3D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom3D(int texNumR, int texNumC,\n          int texelsInBatch, int texelsInLogicalRow, int b,\n          int row, int col) {\n        int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = index / texNumC;\n        int texC = index - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'sampleTexture';\n    const glsl = getGlsl(this.context.glContext.version);\n    result[funcName] = new GlslLibRoutine(`\n        float sampleTexture(sampler2D textureSampler, vec2 uv) {\n            return ${glsl.texture2D}(textureSampler, uv).r;\n        }`);\n    return result;\n  }\n\n  /**\n   * Constructing snippets for inputs\n   */\n  protected getInputsSamplingSnippets(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const outputLayout = this.context.outputTextureLayout;\n    this.context.programInfo.inputNames.forEach((samplerName, i) => {\n      const inputLayout = this.context.inputTextureLayouts[i];\n      const funcName = generateShaderFuncNameFromInputSamplerName(samplerName);\n      if (inputLayout.isPacked) {\n        result[funcName] = this.getPackedSamplerFromInput(funcName, samplerName, inputLayout);\n      } else {\n        result[funcName] = this.getUnpackedSamplerFromInput(funcName, samplerName, inputLayout);\n      }\n\n      const outCoordFuncName = generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName);\n      if (inputLayout.unpackedShape.length <= outputLayout.unpackedShape.length) {\n        if (inputLayout.isPacked) {\n          result[outCoordFuncName] =\n              this.getPackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        } else {\n          result[outCoordFuncName] =\n              this.getUnpackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        }\n      }\n    });\n\n    return result;\n  }\n\n  /**\n   * Constructing snippets for output coordinates of samplers\n   */\n  protected getPackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texName = name;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(texName);\n\n    const inRank = inShape.length;\n    const outRank = outShape.length;\n\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n\n    const type = getCoordsDataType(outRank);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n\n    let output = 'return outputValue;';\n    const inSize = ShapeUtil.size(inShape);\n    const isInputScalar = inSize === 1;\n    const outSize = ShapeUtil.size(outShape);\n    const isOutputScalar = outSize === 1;\n\n    if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n      output = `\n        return vec4(outputValue.xy, outputValue.xy);\n      `;\n    } else if (isInputScalar && !isOutputScalar) {\n      if (outRank === 1) {\n        output = `\n          return vec4(outputValue.x, outputValue.x, 0., 0.);\n        `;\n      } else {\n        output = `\n          return vec4(outputValue.x);\n        `;\n      }\n    } else if (broadcastDims.length) {\n      const rows = inRank - 2;\n      const cols = inRank - 1;\n\n      if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.x);';\n      } else if (broadcastDims.indexOf(rows) > -1) {\n        output = 'return vec4(outputValue.x, outputValue.y, ' +\n            'outputValue.x, outputValue.y);';\n      } else if (broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.xx, outputValue.zz);';\n      }\n    }\n\n    const swapLastDimsSnippet = `\n        int lastDim = coords.${fields[outRank - 1]};\n        coords.${fields[outRank - 1]} = coords.${fields[outRank - 2]};\n        coords.${fields[outRank - 2]} = lastDim;\n      `;\n    const source = `\n      vec4 ${funcName}() {\n        ${type} coords = getOutputCoords();\n        ${swapLastDimsSnippet}\n        ${coordsSnippet}\n        vec4 outputValue = ${texFuncSnippet}(${unpackedCoordsSnippet});\n        ${output}\n      }\n    `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for unpacked output coordinates of samplers\n   */\n  protected getUnpackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const inTexShape = [inputLayout.width, inputLayout.height];\n    const inRank = inputLayout.unpackedShape.length;\n    const outRank = outputLayout.unpackedShape.length;\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(name);\n\n    if (inRank === outRank && ArrayUtil.arraysEqual(inTexShape, outTexShape)) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, TexCoords);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const type = getCoordsDataType(outRank);\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inputLayout.unpackedShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n    const source = `\n        float ${funcName}() {\n          ${type} coords = getOutputCoords();\n          ${coordsSnippet}\n          return ${texFuncSnippet}(${unpackedCoordsSnippet});\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for packed operations.\n   */\n  protected getPackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    switch (inputLayout.unpackedShape.length) {\n      case 0:\n        return this.getPackedSamplerScalar(funcName, name);\n      case 1:\n        return this.getPackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getPackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getPackedSampler3D(funcName, name, inputLayout);\n      default:\n        return this.getPackedSamplerND(funcName, name, inputLayout);\n    }\n  }\n\n  /**\n   * Constructing snippets for unpacked operations.\n   */\n  protected getUnpackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    switch (shape.length) {\n      case 0:\n        return this.getUnpackedSamplerScalar(funcName, name, inputLayout);\n      case 1:\n        return this.getUnpackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getUnpackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getUnpackedSampler3D(funcName, name, inputLayout);\n      case 4:\n        return this.getUnpackedSampler4D(funcName, name, inputLayout);\n      case 5:\n        return this.getUnpackedSampler5D(funcName, name, inputLayout);\n      case 6:\n        return this.getUnpackedSampler6D(funcName, name, inputLayout);\n      default:\n        // TODO support more dimensionalities\n        throw new Error(`Unsupported dimension ${shape.length}-D`);\n    }\n  }\n\n  /**\n   * Packed scalar snippet.\n   */\n  protected getPackedSamplerScalar(funcName: string, name: string): GlslLibRoutine {\n    const glsl = getGlsl(this.context.glContext.version);\n    const source = `\n          vec4 ${funcName}() {\n            return ${glsl.texture2D}(${name}, halfCR);\n          }\n        `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Packed 1D snippet.\n   */\n  protected getPackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[1], texShape[0]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedSampler = `vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n      ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom1D']);\n  }\n\n  /**\n   * Packed 2D snippet.\n   */\n  protected getPackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const packedSampler = `vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n        return ${glsl.texture2D}(${name}, uv);\n      }`;\n\n      return new GlslLibRoutine(packedSampler);\n    }\n    const packedTexShape = texShape;\n    const valuesPerRow = Math.ceil(shape[1] / 2);\n    const packedSampler = `vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${packedTexShape[1]}, ${packedTexShape[0]}, ${valuesPerRow}, row, col);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom2D']);\n  }\n\n  /**\n   * Packed 3D snippet.\n   */\n  protected getPackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[0], texShape[1]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    if (shape[0] === 1) {\n      const squeezedShape = shape.slice(1);\n      const keptDims = [1, 2];\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['b', 'row', 'col'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const samplerRoutine = this.getPackedSamplerFromInput(funcName, name, newInputLayout);\n      const packedSampler = `${samplerRoutine.routineBody}\n      vec4 ${funcName}(int b, int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      } `;\n      const source = packedSampler;\n      return new GlslLibRoutine(source, samplerRoutine.dependencies);\n    }\n    const texNumR = packedTexShape[0];\n    const texNumC = packedTexShape[1];\n\n    const valuesPerRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n\n    const packedSampler = `vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumC}, ${texNumR}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${name}, uv);}`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom3D']);\n  }\n  /*\n   * Packed ND snippet.\n   */\n  protected getPackedSamplerND(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const rank = shape.length;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texNumR = packedTexShape[1];\n    const texNumC = packedTexShape[0];\n    const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n    let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n    let params = 'int b, int row, int col';\n    let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n    for (let b = 2; b < rank - 1; b++) {\n      params = `int b${b}, ` + params;\n      texelsInBatch *= shape[rank - b - 1];\n      index = `b${b} * ${texelsInBatch} + ` + index;\n    }\n    const packedSampler = `vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked scalar snippet.\n   */\n  protected getUnpackedSamplerScalar(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const [texNumR, texNumC] = [inputLayout.width, inputLayout.height];\n    if (texNumR === 1 && texNumC === 1) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, halfCR);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const source = `\n        float ${funcName}() {\n          int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, offset_${name});\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 1D snippet.\n   */\n  protected getUnpackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const tNumR = inputLayout.width;\n    const tNumC = inputLayout.height;\n\n    if (tNumC === 1 && tNumR === 1) {\n      const source = `\n        float ${funcName}(int index) {\n          return sampleTexture(${name}, halfCR);\n        }\n      `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    if (tNumC === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2((float(index) + 0.5) / ${tNumR}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    if (tNumR === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2(0.5, (float(index) + 0.5) / ${tNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    const source = `\n        float ${funcName}(int index) {\n          vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 2D snippet.\n   */\n\n  protected getUnpackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n\n    // TODO: modify row/col order for other dimensions.\n    const texShape = [inputLayout.height, inputLayout.width];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const texNumR = texShape[1];\n      const texNumC = texShape[0];\n      const source = `\n          float ${funcName}(int row, int col) {\n            vec2 uv = (vec2(row, col) + halfCR) / vec2(${texNumR}.0, ${texNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const params = ['col', 'row'];\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const texNumR = texShape[1];\n    const texNumC = texShape[0];\n    if (texNumC === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    if (texNumR === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    const source = `\n        float ${funcName}(int row, int col) {\n          int index = col * ${shape[1]} + row;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 3D snippet.\n   */\n\n  protected getUnpackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride0 = shape[1] * shape[2];\n    const stride1 = shape[2];\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['batch', 'col', 'row'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const routine = this.getUnpackedSamplerFromInput(funcName, name, newInputLayout);\n      // TODO: revisit the logic here to make it simpler\n      const revDims = keptDims.reverse();\n      const source = `\n          ${routine.routineBody}\n          float ${funcName}(int batch, int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, revDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, routine.dependencies);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int depth, int row, int col) {\n            // Explicitly use integer operations as dot() only works on floats.\n            int index = depth * ${stride0} + col * ${stride1} + row;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 4D snippet.\n   */\n\n  protected getUnpackedSampler4D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride2 = shape[3];\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    //\n    // TODO: re-enable this shortcut once the index calculation bug is fixed.\n    //\n    // const {newShape, keptDims} = squeezeShape(shape as number[]);\n    // if (newShape.length < shape.length) {\n    //   const newInputShape = squeezeInputShape(shape, newShape);\n    //   const params = ['row', 'col', 'depth', 'depth2'];\n    //   // Deep copy of input texture layout.\n    //   const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n    //   newInputLayout.unpackedShape = newInputShape;\n    //   const source = `\n    //       ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n    //       float ${funcName}(int row, int col, int depth, int depth2) {\n    //         return ${funcName}(${getSqueezedParams(params, keptDims)});\n    //       }\n    //     `;\n    //   return new GlslLibRoutine(\n    //       source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    // }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2) {\n          int index = row * ${stride0} + col * ${stride1} +\n              depth2 * ${stride2} + depth;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 5D snippet.\n   */\n  protected getUnpackedSampler5D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride3 = shape[4];\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n          int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth3 * ${stride3} + depth2;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n  }\n\n  /**\n   * Unpacked 6D snippet.\n   */\n  protected getUnpackedSampler6D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride4 = shape[5];\n    const stride3 = shape[4] * stride4;\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n            ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n            float ${funcName}(int row, int col, int depth,\n              int depth2, int depth3, int depth4) {\n              return ${funcName}(${getSqueezedParams(params, keptDims)});\n            }\n          `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int row, int col, int depth,\n            int depth2, int depth3, int depth4) {\n            int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n            depth2 * ${stride3} + depth3 * ${stride4} + depth4;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * This is the main function to map from the given texture coordiantes (s,t)\n   * to logical indices for the output\n   * There will only be one single variation of this\n   * Also see coordsToOffset and offsetToIndices for input-specific versions\n   */\n  protected toVec(): {[name: string]: GlslLibRoutine} {\n    const output = this.context.outputTextureLayout;\n    const rank = output.shape.length;\n    const strides = output.strides;\n    const xScale = output.width;\n    const yScale = output.height;\n\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n        c[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= c[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n        c[${rank - 1}] = offset;`);\n    const body = `\n      void toVec(vec2 texCoords, out int c[${rank}]) {\n        int offset = coordsToOffset(texCoords, ${xScale}, ${yScale});\n        ${stridesBlock.join('')}\n      }\n      void toVec(int offset, out int c[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n    `;\n    return {toVec: new GlslLibRoutine(body, ['coordinates.coordsToOffset'])};\n  }\n  /**\n   * These are value getter functions generated for each input\n   * Each function is hardwired to the name and dimensions of the input\n   * An '_T' variation is also produced which accesses values as if the\n   * input was transposed\n   */\n  protected valueFrom(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const layout = this.context.inputTextureLayouts[i];\n      const shape = layout.unpackedShape.length > 0 ? layout.unpackedShape : layout.shape;\n      const rank = shape.length;\n      let funcName = `_${name}`;\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, false),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n      funcName = funcName + '_T';\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, true),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n    });\n    return result;\n  }\n  /**\n   * Produces one value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getValueFromSingle(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        float ${name}(int m[${rank}]) {\n          int offset = indicesToOffset${name}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          float value = getColorAsFloat(${glsl.texture2D}(${varName}, coords));\n          return value;\n        }\n        `;\n  }\n\n  /**\n   * Produces a packed value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getPackedValueFrom(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}_Pack`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        vec4 ${name}(int m[${rank}]) {\n          int offset = indicesToOffset_${varName}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          return ${glsl.texture2D}(${varName}, coords);\n        }\n        `;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ProgramInfo, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport enum FunctionType {\n  ValueBased,\n  Positional\n}\nexport interface GlslFunction<T extends FunctionType> {\n  body: string;\n  name: string;\n  type: T;\n}\nexport type GlslValueFunction = GlslFunction<FunctionType.ValueBased>;\nexport interface GlslPositionalFunction extends GlslFunction<FunctionType.Positional> {\n  inputShape: readonly number[];\n  outputShape: readonly number[];\n}\n\nexport class GlslContext {\n  constructor(\n      public glContext: WebGLContext, public programInfo: ProgramInfo, public inputTextureLayouts: TextureLayout[],\n      public outputTextureLayout: TextureLayout) {}\n}\nexport abstract class GlslLib {\n  constructor(public context: GlslContext) {}\n  abstract getFunctions(): {[name: string]: GlslLibRoutine};\n  abstract getCustomTypes(): {[name: string]: string};\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies\nexport class GlslLibRoutine {\n  constructor(public routineBody: string, public dependencies?: string[]) {}\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies AS GRAPH Nodes\n// this level of abstraction is used to topologically sort routines before fragment shade inclusion\nexport class GlslLibRoutineNode {\n  dependencies: GlslLibRoutineNode[];\n  routineBody: string;\n  constructor(public name: string, routineBody?: string, dependencies?: GlslLibRoutineNode[]) {\n    if (dependencies) {\n      this.dependencies = dependencies;\n    } else {\n      this.dependencies = [];\n    }\n\n    if (routineBody) {\n      this.routineBody = routineBody;\n    }\n  }\n  addDependency(node: GlslLibRoutineNode) {\n    if (node) {\n      this.dependencies.push(node);\n    }\n  }\n}\n\n// topologically sort GLSL library routines (graph nodes abstraction) before shader script inclusion\nexport class TopologicalSortGlslRoutines {\n  static returnOrderedNodes(nodes: GlslLibRoutineNode[]): GlslLibRoutineNode[] {\n    if (!nodes || nodes.length === 0) {\n      return [];\n    }\n\n    if (nodes.length === 1) {\n      return nodes;\n    }\n\n    const cycleCheck = new Set<string>();\n    const alreadyTraversed = new Set<string>();\n    const result = new Array<GlslLibRoutineNode>();\n\n    this.createOrderedNodes(nodes, cycleCheck, alreadyTraversed, result);\n    return result;\n  }\n\n  private static createOrderedNodes(\n      graphNodes: GlslLibRoutineNode[], cycleCheck: Set<string>, alreadyTraversed: Set<string>,\n      result: GlslLibRoutineNode[]) {\n    for (let i = 0; i < graphNodes.length; ++i) {\n      this.dfsTraverse(graphNodes[i], cycleCheck, alreadyTraversed, result);\n    }\n  }\n\n  private static dfsTraverse(\n      root: GlslLibRoutineNode, cycleCheck: Set<string>, alreadyTraversed: Set<string>, result: GlslLibRoutineNode[]) {\n    // if this root has already been traversed return\n    if (!root || alreadyTraversed.has(root.name)) {\n      return;\n    }\n\n    // cyclic dependency has been detected\n    if (cycleCheck.has(root.name)) {\n      throw new Error('Cyclic dependency detected. Can\\'t topologically sort routines needed for shader.');\n    }\n\n    // hold this node to detect cycles if any\n    cycleCheck.add(root.name);\n\n    // traverse children in a dfs fashion\n    const dependencies = root.dependencies;\n    if (dependencies && dependencies.length > 0) {\n      for (let i = 0; i < dependencies.length; ++i) {\n        this.dfsTraverse(dependencies[i], cycleCheck, alreadyTraversed, result);\n      }\n    }\n\n    // add to result holder\n    result.push(root);\n\n    // mark this node as traversed so that we don't traverse from this again\n    alreadyTraversed.add(root.name);\n\n    // release the hold\n    cycleCheck.delete(root.name);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * This GLSL library handles routines converting\n * float32 to/from Unsigned byte or float 16\n */\nexport class EncodingGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.encodeFloat32(), ...this.decodeFloat32()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected encodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      encode: new GlslLibRoutine(`highp vec4 encode(highp float f) {\n        return vec4(f, 0.0, 0.0, 0.0);\n      }\n        `)\n    };\n  }\n  protected decodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      decode: new GlslLibRoutine(`highp float decode(highp vec4 rgba) {\n        return rgba.r;\n      }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode encode a 32bit float to a vec4 (of unsigned bytes)\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected encodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      encode: new GlslLibRoutine(`\n      highp vec4 encode(highp float f) {\n        highp float F = abs(f);\n        highp float Sign = step(0.0,-f);\n        highp float Exponent = floor(log2(F));\n        highp float Mantissa = (exp2(- Exponent) * F);\n        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));\n        highp vec4 rgba;\n        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));\n        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);\n        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));\n        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));\n        ${endianness}\n        rgba = rgba / 255.0; // values need to be normalized to [0,1]\n        return rgba;\n    }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode a vec4 of unsigned bytes to float32\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected decodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      decode: new GlslLibRoutine(`\n        highp float decode(highp vec4 rgba) {\n          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]\n          ${endianness}\n          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;\n          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;\n          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);\n          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));\n          return Result;\n      }\n        `)\n    };\n  }\n  /**\n   * Determines if the machine is little endian or not\n   * @credit: https://gist.github.com/TooTallNate/4750953\n   */\n  static isLittleEndian(): boolean {\n    const b = new ArrayBuffer(4);\n    const a = new Uint32Array(b);\n    const c = new Uint8Array(b);\n    a[0] = 0xdeadbeef;\n    if (c[0] === 0xef) {\n      return true;\n    }\n    if (c[0] === 0xde) {\n      return false;\n    }\n    throw new Error('unknown endianness');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\n\n/**\n * This GLSL library handles routines around reading a texlet and writing to it\n * Reading and writing could be more than just dealing with one channel\n * It may require encoding/decoding to/from 4 channels into one\n */\nexport class FragColorGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.setFragColor(), ...this.getColorAsFloat()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected setFragColor(): {[name: string]: GlslLibRoutine} {\n    const glsl = getGlsl(this.context.glContext.version);\n    return {\n      setFragColor: new GlslLibRoutine(\n          `\n        void setFragColor(float value) {\n            ${glsl.output} = encode(value);\n        }\n        `,\n          ['encoding.encode'])\n    };\n  }\n  protected getColorAsFloat(): {[name: string]: GlslLibRoutine} {\n    return {\n      getColorAsFloat: new GlslLibRoutine(\n          `\n        float getColorAsFloat(vec4 color) {\n            return decode(color);\n        }\n        `,\n          ['encoding.decode'])\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nconst INLINE_FUNC_DEF_REGEX = /@inline[\\s\\n\\r]+(\\w+)[\\s\\n\\r]+([0-9a-zA-Z_]+)\\s*\\(([^)]*)\\)\\s*{(([^}]|[\\n\\r])*)}/gm;\nconst FUNC_CALL_REGEX = '(\\\\w+)?\\\\s+([_0-9a-zA-Z]+)\\\\s+=\\\\s+__FUNC__\\\\((.*)\\\\)\\\\s*;';\n/**\n * GLSL preprocessor responsible for resolving @inline directives\n */\nexport function replaceInlines(script: string): string {\n  const inlineDefs: {[name: string]: {params: Array<{type: string; name: string}|null>; body: string}} = {};\n  let match;\n  while ((match = INLINE_FUNC_DEF_REGEX.exec(script)) !== null) {\n    const params = match[3]\n                       .split(',')\n                       .map(s => {\n                         const tokens = s.trim().split(' ');\n                         if (tokens && tokens.length === 2) {\n                           return {type: tokens[0], name: tokens[1]};\n                         }\n                         return null;\n                       })\n                       .filter(v => v !== null);\n    inlineDefs[match[2]] = {params, body: match[4]};\n  }\n  for (const name in inlineDefs) {\n    const regexString = FUNC_CALL_REGEX.replace('__FUNC__', name);\n    const regex = new RegExp(regexString, 'gm');\n    while ((match = regex.exec(script)) !== null) {\n      const type = match[1];\n      const variable = match[2];\n      const params = match[3].split(',');\n      const declLine = (type) ? `${type} ${variable};` : '';\n      let newBody: string = inlineDefs[name].body;\n      let paramRedecLine = '';\n      inlineDefs[name].params.forEach((v, i) => {\n        if (v) {\n          paramRedecLine += `${v.type} ${v.name} = ${params[i]};\\n`;\n        }\n      });\n      newBody = `${paramRedecLine}\\n ${newBody}`;\n      newBody = newBody.replace('return', `${variable} = `);\n      const replacement = `\n      ${declLine}\n      {\n        ${newBody}\n      }\n      `;\n      script = script.replace(match[0], replacement);\n    }\n  }\n  script = script.replace(INLINE_FUNC_DEF_REGEX, '');\n  return script;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutineNode, TopologicalSortGlslRoutines} from './glsl-definitions';\nimport {replaceInlines} from './glsl-function-inliner';\nimport {glslRegistry} from './glsl-registered-libs';\nimport {getDefaultFragShaderMain, getFragShaderPreamble} from './glsl-source';\nimport {ProgramInfo, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * Preprocessor for the additions to the GLSL language\n * It deals with:\n *  @include directives\n *  @inline\n *  Loop unrolling (not implemented)\n *  Macro resolution (not implemented)\n */\nexport class GlslPreprocessor {\n  readonly context: GlslContext;\n  readonly libs: {[name: string]: GlslLib} = {};\n  readonly glslLibRoutineDependencyGraph: {[routineName: string]: GlslLibRoutineNode} = {};\n\n  constructor(\n      glContext: WebGLContext, programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[],\n      outputTextureLayout: TextureLayout) {\n    this.context = new GlslContext(glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n\n    // construct GlslLibs\n    Object.keys(glslRegistry).forEach((name: string) => {\n      const lib = new glslRegistry[name](this.context);\n      this.libs[name] = lib;\n    });\n\n    // construct GlslRoutineDependencyGraph\n    const map = this.glslLibRoutineDependencyGraph;\n    for (const libName in this.libs) {\n      const lib = this.libs[libName];\n      const routinesInLib = lib.getFunctions();\n      for (const routine in routinesInLib) {\n        const key = libName + '.' + routine;\n        let currentNode: GlslLibRoutineNode;\n        if (map[key]) {\n          currentNode = map[key];\n          currentNode.routineBody = routinesInLib[routine].routineBody;\n        } else {\n          currentNode = new GlslLibRoutineNode(key, routinesInLib[routine].routineBody);\n          map[key] = currentNode;\n        }\n        const dependencies = routinesInLib[routine].dependencies;\n        if (dependencies) {\n          for (let i = 0; i < dependencies.length; ++i) {\n            if (!map[dependencies[i]]) {\n              const node = new GlslLibRoutineNode(dependencies[i]);\n              map[dependencies[i]] = node;\n              currentNode.addDependency(node);\n            } else {\n              currentNode.addDependency(map[dependencies[i]]);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  preprocess(): string {\n    const programInfo = this.context.programInfo;\n    let source = programInfo.shaderSource;\n\n    // append main() function\n    if (!this.context.programInfo.hasMain) {\n      source = `${source}\n      ${getDefaultFragShaderMain(this.context.glContext.version, this.context.outputTextureLayout.shape.length)}`;\n    }\n    // replace inlines\n    source = replaceInlines(source);\n\n    // concat final source string\n    return `${getFragShaderPreamble(this.context.glContext.version)}\n    ${this.getUniforms(programInfo.inputNames, programInfo.variables)}\n    ${this.getImports(source)}\n    ${source}`;\n  }\n\n  protected getImports(script: string): string {\n    const routinesIncluded = this.selectGlslLibRoutinesToBeIncluded(script);\n\n    if (routinesIncluded.length === 0) {\n      return '';\n    }\n\n    let routines = '';\n    for (let i = 0; i < routinesIncluded.length; ++i) {\n      if (routinesIncluded[i].routineBody) {\n        routines += routinesIncluded[i].routineBody + '\\n';\n      } else {\n        throw new Error(`Missing body for the Glsl Library routine: ${routinesIncluded[i].name}`);\n      }\n    }\n\n    return routines;\n  }\n  private selectGlslLibRoutinesToBeIncluded(script: string): GlslLibRoutineNode[] {\n    const nodes: GlslLibRoutineNode[] = [];\n\n    Object.keys(this.glslLibRoutineDependencyGraph).forEach(classAndRoutine => {\n      const routine = classAndRoutine.split('.')[1];\n      if (script.indexOf(routine) !== -1) {\n        nodes.push(this.glslLibRoutineDependencyGraph[classAndRoutine]);\n      }\n    });\n\n    return TopologicalSortGlslRoutines.returnOrderedNodes(nodes);\n  }\n\n  protected getUniforms(samplers?: string[], variables?: VariableInfo[]): string {\n    const uniformLines: string[] = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLines.push(`uniform sampler2D ${sampler};`);\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLines.push(\n            `uniform ${variable.type} ${variable.name}${variable.arrayLength ? `[${variable.arrayLength}]` : ''};`);\n      }\n    }\n    return uniformLines.join('\\n');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {CoordsGlslLib} from './glsl-coordinate-lib';\nimport {GlslContext, GlslLib} from './glsl-definitions';\nimport {EncodingGlslLib} from './glsl-encoding-lib';\nimport {FragColorGlslLib} from './glsl-fragcolor-lib';\nimport {ShapeUtilsGlslLib} from './glsl-shape-utils-lib';\nimport {VecGlslLib} from './glsl-vec-lib';\n\nexport const glslRegistry: {[name: string]: new (context: GlslContext) => GlslLib} = {\n  'encoding': EncodingGlslLib,\n  'fragcolor': FragColorGlslLib,\n  'vec': VecGlslLib,\n  'shapeUtils': ShapeUtilsGlslLib,\n  'coordinates': CoordsGlslLib,\n  //  'arrays': ArrayGlslSLib\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class ShapeUtilsGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.bcastIndex(),\n      ...this.bcastMatmulIndex(),\n      ...this.offsetToIndices(),\n      ...this.indicesToOffset(),\n      ...this.incrementIndices()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  protected bcastIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].unpackedShape;\n      if (shape.length <= outputRank) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName} (int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected bcastMatmulIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      if (!(shape.length < 2 || shape.length > outputRank)) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastMatmulIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank - 2; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName}(int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n          realIndices[${rank - 1}] = bcastedIndices[${outputRank - 1}];\n          realIndices[${rank - 2}] = bcastedIndices[${outputRank - 2}];\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected indicesToOffset(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `indicesToOffset_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides));\n      funcName = `indicesToOffset_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static indexToOffsetSingle(name: string, rank: number, strides: readonly number[]): string {\n    let block = '';\n    for (let i = rank - 1; i >= 0; --i) {\n      block += `\n        offset += indices[${i}] * ${strides[i]};\n        `;\n    }\n    return `\n      int ${name}(int indices[${rank}]) {\n        int offset = 0;\n        ${block}\n        return offset;\n      }\n      `;\n  }\n  protected offsetToIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `offsetToIndices_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides));\n      funcName = `offsetToIndices_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static offsetToIndicesSingle(name: string, rank: number, strides: readonly number[]): string {\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n      indices[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= indices[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n      indices[${rank - 1}] = offset;`);\n    return `\n      void ${name}(int offset, out int indices[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n      `;\n  }\n  protected incrementIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const rank = shape.length;\n      const funcName = `incrementIndices_${name}`;\n      let shapeInit = '';\n      for (let i = 0; i < rank; ++i) {\n        shapeInit += `\n        shape[${i}] = ${shape[i]};`;\n      }\n      const body = `\n        void ${funcName}(int axis, out int indices[${rank}]) {\n          int shape[${rank}];\n          ${shapeInit};\n          for(int i = ${rank} -1 ; i >= 0; --i) {\n            if(i > axis) continue;\n            indices[i] += 1;\n            if(indices[i] < shape[i]) {\n              break;\n            }\n            indices[i] = 0;\n          }\n        }\n        `;\n      result[funcName] = new GlslLibRoutine(body);\n    });\n    return result;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/**\n * represent a version irrelevant abstraction of for GLSL source code\n */\nexport interface Glsl {\n  readonly version: string;\n  readonly attribute: string;\n  readonly varyingVertex: string;\n  readonly varyingFrag: string;\n  readonly texture2D: string;\n  readonly output: string;\n  readonly outputDeclaration: string;\n}\n\nconst GLSL_ES_2_0: Glsl = {\n  version: '',\n  attribute: 'attribute',\n  varyingVertex: 'varying',\n  varyingFrag: 'varying',\n  texture2D: 'texture2D',\n  output: 'gl_FragColor',\n  outputDeclaration: '',\n};\nconst GLSL_ES_3_0: Glsl = {\n  version: '#version 300 es',\n  attribute: 'in',\n  varyingVertex: 'out',\n  varyingFrag: 'in',\n  texture2D: 'texture',\n  output: 'outputColor',\n  outputDeclaration: 'out vec4 outputColor;',\n};\n\nexport function getGlsl(version: 1|2) {\n  return version === 1 ? GLSL_ES_2_0 : GLSL_ES_3_0;\n}\n\nexport function getVertexShaderSource(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n      precision highp float;\n      ${glsl.attribute} vec3 position;\n      ${glsl.attribute} vec2 textureCoord;\n\n      ${glsl.varyingVertex} vec2 TexCoords;\n\n      void main()\n      {\n          gl_Position = vec4(position, 1.0);\n          TexCoords = textureCoord;\n      }`;\n}\n\nexport function getFragShaderPreamble(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFrag} vec2 TexCoords;\n    ${glsl.outputDeclaration}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    // Custom vector types to handle higher dimenalities.\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    `;\n}\n\nexport function getDefaultFragShaderMain(version: 1|2, outputShapeLength: number): string {\n  const glsl = getGlsl(version);\n  return `\n  void main() {\n    int indices[${outputShapeLength}];\n    toVec(TexCoords, indices);\n    vec4 result = vec4(process(indices));\n    ${glsl.output} = result;\n  }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for vec routines\n * Vec is an varible length int array. The length is fixed at the time of\n * generating the library functions from the dimensions of the output.\n */\nexport class VecGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.binaryVecFunctions(), ...this.copyVec(), ...this.setVecItem(), ...this.getVecItem()};\n  }\n  protected binaryVecFunctions(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    const nameOp: {[name: string]: string} = {add: '+=', sub: '-=', mul: '*=', div: '/='};\n    const result: {[name: string]: GlslLibRoutine} = {};\n    for (const name in nameOp) {\n      const fname = `${name}Vec`;\n      let assignmentBlock = '';\n      for (let i = 0; i < rank; ++i) {\n        assignmentBlock += `\n          dest[${i}] ${nameOp[name]} src[${i}];\n          `;\n      }\n      const body = `\n        void ${fname}(int src[${rank}], out int dest[${rank}]) {\n          ${assignmentBlock}\n        }\n        `;\n      result[fname] = new GlslLibRoutine(body);\n    }\n\n    return result;\n  }\n  protected copyVec(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let assignmentBlock = '';\n    for (let i = 0; i < rank; ++i) {\n      assignmentBlock += `\n        dest[${i}] = src[${i}];\n        `;\n    }\n    const body = `\n      void copyVec(int src[${rank}], out int dest[${rank}]) {\n        ${assignmentBlock}\n      }\n      `;\n    return {copyVec: new GlslLibRoutine(body)};\n  }\n\n  protected setVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index =${rank} + index;\n        if (index == 0)\n            m[0] = value;\n        `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            m[${i}] = value;\n            `;\n    }\n    block += `\n        else\n            m[${rank - 1}] = value;\n        `;\n    const body = `\n      void setVecItem(out int m[${rank}], int index, int value) {\n        ${block}\n      }\n        `;\n    return {setVecItem: new GlslLibRoutine(body)};\n  }\n  protected getVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index = ${rank} + index;\n        if (index == 0)\n            return m[0];\n      `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            return m[${i}];\n      `;\n    }\n    block += `\n        else\n            return m[${rank - 1}];\n        `;\n    const body = `\n      int getVecItem(int m[${rank}], int index) {\n        ${block}\n      }\n    `;\n    return {getVecItem: new GlslLibRoutine(body)};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from '../../backend';\nimport {Logger} from '../../instrument';\nimport {Tensor} from '../../tensor';\nimport {ShapeUtil} from '../../util';\n\nimport {createPackProgramInfoLoader} from './ops/pack';\nimport {createPackedReshape3DProgramInfoLoader, isReshapeCheap, processDims3D} from './ops/reshape-packed';\nimport {encodeAsUint8} from './ops/uint8-encode';\nimport {createUnpackProgramInfoLoader} from './ops/unpack';\nimport {WebGLSessionHandler} from './session-handler';\nimport {Encoder} from './texture-data-encoder';\nimport {calculateTextureWidthAndHeight, createTextureLayoutFromShape, createTextureLayoutFromTextureType} from './texture-layout';\nimport {Artifact, ProgramInfo, ProgramInfoLoader, TextureData, TextureLayout, TextureType} from './types';\n\nconst getProgramInfoUniqueKey =\n    (programInfo: ProgramInfo|ProgramInfoLoader, inputTextureDatas: TextureData[]): string => {\n      const inputs =\n          inputTextureDatas.map(texture => `${texture.unpackedShape.join(',')};${texture.width}x${texture.height}`)\n              .join('_');\n      let key = programInfo.name;\n      if (programInfo.cacheHint) {\n        key += '[' + programInfo.cacheHint + ']';\n      }\n      key += ':' + inputs;\n      return key;\n    };\n\nexport class WebGLInferenceHandler implements InferenceHandler {\n  private packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  private unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  constructor(public session: WebGLSessionHandler) {\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  /**\n   * @returns [width, height]\n   */\n  calculateTextureWidthAndHeight(shape: readonly number[], textureType: TextureType): [number, number] {\n    return calculateTextureWidthAndHeight(this.session.layoutStrategy, shape, textureType);\n  }\n\n  executeProgram(program: ProgramInfo|ProgramInfoLoader, inputs: readonly Tensor[]): TextureData {\n    if (inputs.length < program.inputNames.length) {\n      throw new Error(`Input size mustn't be less than ${program.inputNames.length}.`);\n    }\n    if (program.inputNames.length !== program.inputTypes.length) {\n      throw new Error('input names size does not match input types');\n    }\n\n    // create texture info for input\n    const inputTextureDatas: TextureData[] = [];\n    for (let i = 0; i < program.inputNames.length; ++i) {\n      inputTextureDatas[i] = this.getOrCreateTextureData(inputs[i], program.inputTypes[i]);\n    }\n\n    const key = getProgramInfoUniqueKey(program, inputTextureDatas);\n    let artifact = this.session.programManager.getArtifact(key);\n    const programInfo = artifact ?\n        artifact.programInfo :\n        (typeof (program as ProgramInfoLoader).get === 'function' ? (program as ProgramInfoLoader).get() :\n                                                                    (program as ProgramInfo));\n\n    // create texture info for output\n    const outputTextureLayout = createTextureLayoutFromTextureType(\n        this.session.layoutStrategy, programInfo.output.dims, programInfo.output.textureType);\n    const outputTextureData = this.createTextureData(outputTextureLayout, programInfo.output.type);\n\n    if (!artifact) {\n      artifact = this.session.programManager.build(programInfo, inputTextureDatas, outputTextureData);\n      this.session.programManager.setArtifact(key, artifact);\n    }\n\n    this.runProgram(artifact, inputTextureDatas, outputTextureData);\n    return outputTextureData;\n  }\n\n  run(program: ProgramInfoLoader, inputs: readonly Tensor[]): Tensor {\n    const outputTextureData = this.executeProgram(program, inputs);\n    return outputTextureData.tensor;\n  }\n\n  private runProgram(artifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    // input should match\n    for (let i = 0; i < inputs.length; ++i) {\n      if (!!inputs[i].isPacked !== (artifact.programInfo.inputTypes[i] === TextureType.packed)) {\n        throw new Error(`input[${i}] property packed inconsistent`);\n      }\n    }\n\n    // output should match\n    if (!!output.isPacked !== (artifact.programInfo.output.textureType === TextureType.packed)) {\n      throw new Error('output property packed inconsistent');\n    }\n\n    this.session.programManager.run(artifact, inputs, output);\n  }\n\n  /**\n   * Create a TextureData object from a tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * If a related texture data is found in cache, returns it;\n   * Otherwise:\n   *   Creates a new texture layout if not provided;\n   *   Creates WebGLTexture with the layout;\n   *   Upload tensor data to the texture;\n   *   Creates a texture data object associated with the given tensor.\n   * @param tensor the tensor with data to upload\n   */\n  private getOrCreateTextureData(tensor: Tensor, textureType: TextureType) {\n    let td = this.getTextureData(tensor.dataId, textureType === TextureType.packed);\n\n    if (!td) {\n      // check if we have texture data in different type\n      td = this.getTextureData(tensor.dataId, textureType !== TextureType.packed);\n      if (td) {\n        if (textureType === TextureType.packed) {\n          return this.pack(td);\n        } else {\n          return this.unpack(td);\n        }\n      }\n    }\n\n    if (!td) {\n      const layout = createTextureLayoutFromTextureType(this.session.layoutStrategy, tensor.dims, textureType);\n\n      if (textureType === TextureType.packedLastDimension) {\n        const group = 1;\n        const channels = 4;\n        const shape = tensor.dims;\n        if (shape.length === 4) {\n          // pre-processing for kernel data of Conv.\n          //\n          // TODO: currently this is a hacking to overwrite Conv's weight. The correct way to do this should be:\n          // 1. implement texture based const-folding\n          // 2. create a WebGL program \"preprocessConvWeight\" to do the same work as below\n          // 3. run the program before dotProduct.\n          //\n          const adjustedKernelShape = [shape[0], Math.ceil((shape[1] * shape[2] * shape[3]) / channels)];\n          const adjustedLayout =\n              createTextureLayoutFromTextureType(this.session.layoutStrategy, adjustedKernelShape, textureType);\n          let buffer = tensor.numberData;\n          if (shape[1] * shape[2] * shape[3] % channels !== 0) {\n            const numFeatureMaps = shape[0];\n            const oldRowSize = shape[1] * shape[2] * shape[3];\n            const newRowSize = Math.ceil(oldRowSize * group / channels) * channels;\n            const newSize = numFeatureMaps * newRowSize;\n            buffer = new Float32Array(newSize);\n            for (let f = 0; f < numFeatureMaps; ++f) {\n              const oldOffset = f * oldRowSize;\n              const newOffset = f * newRowSize + f % group * oldRowSize;\n              buffer.set(tensor.numberData.subarray(oldOffset, oldOffset + oldRowSize), newOffset);\n            }\n          }\n          return this.createTextureData(adjustedLayout, tensor.type, buffer, tensor, Encoder.Usage.UploadOnly);\n        }\n      }\n\n      if (textureType === TextureType.packed) {\n        const unpackedTextureLayout =\n            createTextureLayoutFromShape(this.session.layoutStrategy, tensor.dims, 1, [], {reverseWH: true});\n        const unpackedTextureData = this.createTextureData(\n            unpackedTextureLayout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n        td = this.pack(unpackedTextureData);\n      } else {\n        td = this.createTextureData(layout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n      }\n    }\n    return td;\n  }\n\n  /**\n   * Create a TextureData object using the given data and bind to the given tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * NOTE: this function is a hack for Conv implementation. should remove this function, after rewriting Conv\n   * implementation by Graph.Transformer\n   * @param dataType the tensor data type\n   * @param data the actual data to upload\n   * @param tensor the tensor to bind. tensor's data is ignored.\n   */\n  createTextureDataFromLayoutBindTensor(\n      layout: TextureLayout, dataType: Tensor.DataType, data: Tensor.NumberType, tensor: Tensor): TextureData {\n    return this.createTextureData(layout, dataType, data, tensor, Encoder.Usage.UploadOnly);\n  }\n\n  private createTextureData(\n      layout: TextureLayout, dataType: Tensor.DataType, data?: Tensor.NumberType, tensor?: Tensor,\n      usage?: Encoder.Usage): TextureData {\n    Logger.verbose('InferenceHandler', `Creating TextureData: layout:[${JSON.stringify(layout)}]`);\n    const texture = this.session.textureManager.createTextureFromLayout(dataType, layout, data, usage);\n    return this.createTextureDataFromTexture(layout, dataType, texture, tensor);\n  }\n\n  reshapeUnpacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureLayout: TextureLayout = {\n      channels: inputTD.channels,\n      height: inputTD.height,\n      width: inputTD.width,\n      // handle reshaping into scalar Tensors\n      shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n      strides: ShapeUtil.computeStrides(reshapedDims),\n      unpackedShape: reshapedDims,\n    };\n    const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  reshapePacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.packed);\n\n    // check if the reshape is 'cheap'\n    if (isReshapeCheap(input.dims, reshapedDims)) {\n      const newTextureLayout: TextureLayout = {\n        channels: inputTD.channels,\n        height: inputTD.height,\n        width: inputTD.width,\n        // handle reshaping into scalar Tensors\n        shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n        strides: ShapeUtil.computeStrides(reshapedDims),\n        unpackedShape: reshapedDims,\n        isPacked: true\n      };\n      const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n      return newTextureData.tensor;\n    }\n\n    const squeezedInputShape = processDims3D(input.dims);\n    const squeezedOutputShape = processDims3D(reshapedDims);\n\n    const squeezedInputTensor = this.reshapePacked(input, squeezedInputShape);\n    const squeezedOutputTensor = this.run(\n        createPackedReshape3DProgramInfoLoader(this, squeezedInputTensor, squeezedOutputShape), [squeezedInputTensor]);\n    const outputTensor = this.reshapePacked(squeezedOutputTensor, reshapedDims);\n    return outputTensor;\n  }\n\n  cast(input: Tensor, type: Tensor.DataType): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureData = this.createTextureDataFromTexture(inputTD as TextureLayout, type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  private createTextureDataFromTexture(\n      layout: TextureLayout, dataType: Tensor.DataType, texture: WebGLTexture, tensor?: Tensor, tensorId?: Tensor.Id) {\n    const textureData: TextureData = {\n      ...layout,\n      tensor: tensor ||\n          new Tensor(\n                  layout.unpackedShape, dataType, (_id: Tensor.Id) => this.readTexture(textureData),\n                  async (_id: Tensor.Id) => this.readTextureAsync(textureData), undefined, tensorId),\n      texture\n    };\n    this.setTextureData(textureData.tensor.dataId, textureData, layout.isPacked);\n    return textureData;\n  }\n\n  private getTextureData(tensorId: Tensor.Id, isPacked = false): TextureData|undefined {\n    return this.session.isInitializer(tensorId) ? this.session.getTextureData(tensorId, isPacked) :\n        isPacked                                ? this.packedTextureDataCache.get(tensorId) :\n                                                  this.unpackedTextureDataCache.get(tensorId);\n  }\n  setTextureData(tensorId: Tensor.Id, td: TextureData, isPacked = false): void {\n    if (this.session.isInitializer(tensorId)) {\n      this.session.setTextureData(tensorId, td, isPacked);\n    } else {\n      (isPacked ? this.packedTextureDataCache : this.unpackedTextureDataCache).set(tensorId, td);\n    }\n  }\n  isTextureLayoutCached(tensor: Tensor, isPacked = false): boolean {\n    return !!this.getTextureData(tensor.dataId, isPacked);\n  }\n\n  dispose(): void {\n    this.session.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  readTexture(textureData: TextureData): Tensor.NumberType {\n    if (textureData.isPacked) {\n      return this.readTexture(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTexture(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  async readTextureAsync(textureData: TextureData): Promise<Tensor.NumberType> {\n    if (textureData.isPacked) {\n      return this.readTextureAsync(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTextureAsync(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  pack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createPackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n\n  unpack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createUnpackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {OpSet} from '../../opset';\n\nimport {batchNormalization, parseBatchNormalizationAttributes} from './ops/batch-normalization';\nimport * as binaryOps from './ops/binary-op';\nimport {cast, parseCastAttributes} from './ops/cast';\nimport {concat, parseConcatAttributes} from './ops/concat';\nimport {conv, parseConvAttributes} from './ops/conv';\nimport {convTranspose, parseConvTransposeAttributes} from './ops/conv-transpose';\nimport {depthToSpace, parseDepthToSpaceAttributes} from './ops/depth-to-space';\nimport {flatten, parseFlattenAttributes} from './ops/flatten';\nimport {gather, parseGatherAttributes} from './ops/gather';\nimport {gemm, parseGemmAttributesV11, parseGemmAttributesV7} from './ops/gemm';\nimport {imageScaler, parseImageScalerAttributes} from './ops/image-scaler';\nimport {instanceNormalization, parseInstanceNormalizationAttributes} from './ops/instance-normalization';\nimport {lrn, parseLrnAttributes} from './ops/lrn';\nimport {matMul, parseMatMulAttributes} from './ops/matmul';\nimport {padV11, padV2, parsePadAttributesV11, parsePadAttributesV2} from './ops/pad';\nimport {averagePool, globalAveragePool, globalMaxPool, maxPool, parseAveragePoolAttributes, parseGlobalAveragePoolAttributes, parseMaxPoolAttributes} from './ops/pool';\nimport {parseReduceAttributes, reduceLogSum, reduceLogSumSquare, reduceMax, reduceMean, reduceMin, reduceProd, reduceSum} from './ops/reduce';\nimport {reshape} from './ops/reshape';\nimport {parseResizeAttributesV10, parseResizeAttributesV11, resize} from './ops/resize-packed';\nimport {shape} from './ops/shape';\nimport {parseSliceAttributes, slice, sliceV10} from './ops/slice';\nimport {parseSoftmaxAttributes, parseSoftmaxAttributesV13, softmax, softmaxV13} from './ops/softmax';\nimport {parseSplitAttributes, split} from './ops/split';\nimport {parseSqueezeAttributes, squeeze, squeezeV13} from './ops/squeeze';\nimport {sum} from './ops/sum';\nimport {tile} from './ops/tile';\nimport {parseTransposeAttributes, transpose} from './ops/transpose';\nimport * as unaryOps from './ops/unary-op';\nimport {parseUnsqueezeAttributes, unsqueeze, unsqueezeV13} from './ops/unsqueeze';\nimport {parseUpsampleAttributesV7, parseUpsampleAttributesV9, upsample} from './ops/upsample';\n\nexport const WEBGL_OP_RESOLVE_RULES: readonly OpSet.ResolveRule[] = [\n  ['Abs', '', '6+', unaryOps.abs],\n  ['Acos', '', '7+', unaryOps.acos],\n  ['Add', '', '7+', binaryOps.add],\n  ['And', '', '7+', binaryOps.and],\n  ['Asin', '', '7+', unaryOps.asin],\n  ['Atan', '', '7+', unaryOps.atan],\n  // TODO: support new attributes for AveragePool-10\n  ['AveragePool', '', '7+', averagePool, parseAveragePoolAttributes],\n  ['BatchNormalization', '', '7+', batchNormalization, parseBatchNormalizationAttributes],\n  ['Cast', '', '6+', cast, parseCastAttributes],\n  ['Ceil', '', '6+', unaryOps.ceil],\n  ['Clip', '', '6-10', unaryOps.clip, unaryOps.parseClipAttributes],\n  ['Clip', '', '11+', unaryOps.clipV11],\n  ['Concat', '', '4+', concat, parseConcatAttributes],\n  ['Conv', '', '1+', conv, parseConvAttributes],\n  ['ConvTranspose', '', '1+', convTranspose, parseConvTransposeAttributes],\n  ['Cos', '', '7+', unaryOps.cos],\n  ['Div', '', '7+', binaryOps.div],\n  ['Dropout', '', '7+', unaryOps.identity],\n  ['DepthToSpace', '', '1+', depthToSpace, parseDepthToSpaceAttributes],\n  ['Equal', '', '7+', binaryOps.equal],\n  ['Elu', '', '6+', unaryOps.elu, unaryOps.parseEluAttributes],\n  ['Exp', '', '6+', unaryOps.exp],\n  ['Flatten', '', '1+', flatten, parseFlattenAttributes],\n  ['Floor', '', '6+', unaryOps.floor],\n  ['FusedConv', 'com.microsoft', '1+', conv, parseConvAttributes],\n  ['Gather', '', '1+', gather, parseGatherAttributes],\n  ['Gemm', '', '7-10', gemm, parseGemmAttributesV7],\n  ['Gemm', '', '11+', gemm, parseGemmAttributesV11],\n  ['GlobalAveragePool', '', '1+', globalAveragePool, parseGlobalAveragePoolAttributes],\n  ['GlobalMaxPool', '', '1+', globalMaxPool],\n  ['Greater', '', '7+', binaryOps.greater],\n  ['Identity', '', '1+', unaryOps.identity],\n  ['ImageScaler', '', '1+', imageScaler, parseImageScalerAttributes],\n  ['InstanceNormalization', '', '6+', instanceNormalization, parseInstanceNormalizationAttributes],\n  ['LeakyRelu', '', '6+', unaryOps.leakyRelu, unaryOps.parseLeakyReluAttributes],\n  ['Less', '', '7+', binaryOps.less],\n  ['LRN', '', '1+', lrn, parseLrnAttributes],\n  ['Log', '', '6+', unaryOps.log],\n  ['MatMul', '', '1+', matMul, parseMatMulAttributes],\n  // TODO: support new attributes for MaxPool-8 and MaxPool-10\n  ['MaxPool', '', '1+', maxPool, parseMaxPoolAttributes],\n  ['Mul', '', '7+', binaryOps.mul],\n  ['Neg', '', '6+', unaryOps.neg],\n  ['Not', '', '1+', unaryOps.not],\n  ['Or', '', '7+', binaryOps.or],\n  ['Pad', '', '2-10', padV2, parsePadAttributesV2],\n  ['Pad', '', '11+', padV11, parsePadAttributesV11],\n  ['Pow', '', '7+', binaryOps.pow],\n  ['PRelu', '', '7+', binaryOps.pRelu],\n  ['ReduceLogSum', '', '1+', reduceLogSum, parseReduceAttributes],\n  ['ReduceMax', '', '1+', reduceMax, parseReduceAttributes],\n  ['ReduceMean', '', '1+', reduceMean, parseReduceAttributes],\n  ['ReduceMin', '', '1+', reduceMin, parseReduceAttributes],\n  ['ReduceProd', '', '1+', reduceProd, parseReduceAttributes],\n  ['ReduceSum', '', '1-12', reduceSum, parseReduceAttributes],\n  ['ReduceSumSquare', '', '1+', reduceLogSumSquare, parseReduceAttributes],\n  ['Relu', '', '6+', unaryOps.relu],\n  ['Reshape', '', '5+', reshape],\n  ['Resize', '', '10', resize, parseResizeAttributesV10],\n  ['Resize', '', '11+', resize, parseResizeAttributesV11],\n  ['Shape', '', '1+', shape],\n  ['Sigmoid', '', '6+', unaryOps.sigmoid],\n  ['Sin', '', '7+', unaryOps.sin],\n  ['Slice', '', '10+', sliceV10],  // TODO: support 'steps' for Slice-10\n  ['Slice', '', '1-9', slice, parseSliceAttributes],\n  // The \"semantic\" meaning of axis has changed in opset-13.\n  ['Softmax', '', '1-12', softmax, parseSoftmaxAttributes],\n  ['Softmax', '', '13+', softmaxV13, parseSoftmaxAttributesV13],\n  // 'Split' operator has an optional attribute 'split'\n  // this attribute determines how the specified axis of input data is split.\n  // When the attribute is missing, we need the count of number of outputs\n  // so that we can determine the 'split' attribute from the runtime input to the Operator\n  ['Split', '', '2-12', split, parseSplitAttributes],\n  ['Sqrt', '', '6+', unaryOps.sqrt],\n  ['Squeeze', '', '1-12', squeeze, parseSqueezeAttributes],\n  ['Squeeze', '', '13+', squeezeV13],\n  ['Sub', '', '7+', binaryOps.sub],\n  ['Sum', '', '6+', sum],\n  ['Tan', '', '7+', unaryOps.tan],\n  ['Tanh', '', '6+', unaryOps.tanh],\n  ['Tile', '', '6+', tile],\n  ['Transpose', '', '1+', transpose, parseTransposeAttributes],\n  ['Upsample', '', '7-8', upsample, parseUpsampleAttributesV7],\n  ['Upsample', '', '9', upsample, parseUpsampleAttributesV9],\n  ['Unsqueeze', '', '1-12', unsqueeze, parseUnsqueezeAttributes],\n  ['Unsqueeze', '', '13+', unsqueezeV13],\n  ['Xor', '', '7+', binaryOps.xor],\n];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface BatchNormalizationAttributes extends AttributeWithCacheKey {\n  epsilon: number;\n  momentum: number;\n  spatial: number;\n}\n\nconst batchNormalizationProgramMetadata = {\n  name: 'BatchNormalization',\n  inputNames: ['A', 'Scale', 'B', 'Mean', 'Variance'],\n  inputTypes:\n      [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked]\n};\n\nexport const batchNormalization: OperatorImplementation<BatchNormalizationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...batchNormalizationProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createBatchNormalizationProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseBatchNormalizationAttributes: OperatorInitialization<BatchNormalizationAttributes> =\n    (node: Graph.Node): BatchNormalizationAttributes => {\n      const epsilon = node.attributes.getFloat('epsilon', 1e-5);\n      const momentum = node.attributes.getFloat('momentum', 0.9);\n      const spatial = node.attributes.getInt('spatial', 1);\n      return createAttributeWithCacheKey({epsilon, momentum, spatial});\n    };\n\nconst createBatchNormalizationProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes):\n        ProgramInfo => {\n          const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n          const rank = inputs[0].dims.length;\n          const [scaleWidth, scaleHeight] =\n              inferenceHandler.calculateTextureWidthAndHeight(inputs[1].dims, TextureType.unpacked);\n          const shaderSource = `\n  float process(int[${rank}] indices) {\n    vec2 position = offsetToCoords(indices[1], ${scaleWidth}, ${scaleHeight});\n    float scale = getColorAsFloat(${glsl.texture2D}(Scale, position));\n    float mean = getColorAsFloat(${glsl.texture2D}(Mean, position));\n    float variance = getColorAsFloat(${glsl.texture2D}(Variance, position));\n    float b = getColorAsFloat(${glsl.texture2D}(B, position));\n\n    return scale * ( (_A(indices) - mean) / sqrt(variance + float(${attributes.epsilon})) ) + b;\n  }`;\n          return {\n            ...batchNormalizationProgramMetadata,\n            output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 5) {\n    throw new Error('BatchNormalization requires 5 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n  const mean = inputs[3];\n  const var_ = inputs[4];\n\n  // input should atleast have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1 || mean.dims.length !== 1 ||\n      var_.dims.length !== 1) {\n    throw new Error('invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1] || mean.dims[0] !== X.dims[1] ||\n      var_.dims[0] !== X.dims[1]) {\n    throw new Error('invalid input shape.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64') || (mean.type !== 'float32' && mean.type !== 'float64') ||\n      (var_.type !== 'float32' && var_.type !== 'float64')) {\n    throw new Error('invalid input tensor types.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\n\nexport function glslAdd(): GlslValueFunction {\n  const name = 'add_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a + b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 + v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslDiv(): GlslValueFunction {\n  const name = 'div_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a / b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 / v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslMul(): GlslValueFunction {\n  const name = 'mul_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a * b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 * v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSub(): GlslValueFunction {\n  const name = 'sub_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a - b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 - v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslEqual(): GlslValueFunction {\n  const name = 'equal_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a == b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(equal(v1, v2));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslGreater(): GlslValueFunction {\n  const name = 'greater_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a > b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r > v2.r ,\n      v1.g > v2.g,\n      v1.b > v2.b,\n      v1.a > v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLess(): GlslValueFunction {\n  const name = 'less_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a < b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r < v2.r ,\n                v1.g < v2.g,\n                v1.b < v2.b,\n                v1.a < v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslAnd(): GlslValueFunction {\n  const name = 'and_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) && bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r && b2.r ,\n                b1.g && b2.g,\n                b1.b && b2.b,\n                b1.a && b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslOr(): GlslValueFunction {\n  const name = 'or_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) || bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r || b2.r ,\n                b1.g || b2.g,\n                b1.b || b2.b,\n                b1.a || b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslXor(): GlslValueFunction {\n  const name = 'xor_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) ^^ bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r ^^ b2.r ,\n                b1.g ^^ b2.g,\n                b1.b ^^ b2.b,\n                b1.a ^^ b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslPow(): GlslValueFunction {\n  return glslBuiltinBinary('pow');\n}\nexport function glslPRelu(): GlslValueFunction {\n  const name = 'prelu_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a < 0.0 ? a * b: a;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(\n      v1.r < 0.0 ? v1.r * v2.r: v1.r,\n      v1.g < 0.0 ? v1.g * v2.g: v1.g,\n      v1.b < 0.0 ? v1.b * v2.b: v1.b,\n      v1.a < 0.0 ? v1.a * v2.a: v1.a\n      );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nfunction glslBuiltinBinary(fname: string): GlslValueFunction {\n  const name = `${fname}_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return ${fname}(a, b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return ${fname}(v1, v2);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nconst createBinaryProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type, cacheKey?: string): ProgramInfoLoader => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        cacheHint: cacheKey,\n        get: () => createBinaryProgramInfo(handler, inputs, glslFunc, outputTensorType)\n      };\n    };\n\nconst createBinaryProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type): ProgramInfo => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n      let outputShape = inputs[0].dims;\n\n      const usePackedTexture = handler.session.pack;\n\n      if (isBroadcast) {\n        const calculatedShape = BroadcastUtil.calcShape(inputs[0].dims, inputs[1].dims, false);\n        if (!calculatedShape) {\n          throw new Error('Can\\'t perform binary op on the given tensors');\n        }\n        outputShape = calculatedShape;\n        const outputRank = outputShape.length;\n        const aRank = inputs[0].dims.length !== 0 ? inputs[0].dims.length : 1;\n        const bRank = inputs[1].dims.length !== 0 ? inputs[1].dims.length : 1;\n        const aBcast = inputs[0].dims.length !== 0 ? 'bcastIndices_A(indices, aindices);' : 'aindices[0] = 0;';\n        const bBcast = inputs[1].dims.length !== 0 ? 'bcastIndices_B(indices, bindices);' : 'bindices[0] = 0;';\n\n        const glsl = getGlsl(handler.session.backend.glContext.version);\n        const shaderSource = usePackedTexture ? `\n      ${glslFunc.body}\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n        vec4 result = ${glslFunc.name}(a, b);\n        ${glsl.output} = result;\n      }` :\n                                                `\n      ${glslFunc.body}\n      float process(int indices[${outputRank}]) {\n        int aindices[${aRank}];\n        int bindices[${bRank}];\n        ${aBcast}\n        ${bBcast}\n        return ${glslFunc.name}(_A(aindices), _B(bindices));\n      }`;\n\n        return {\n          name: glslFunc.name,\n          inputNames: ['A', 'B'],\n          inputTypes: [textureType, textureType],\n          output: {dims: outputShape, type: outputTensorType, textureType},\n          shaderSource,\n          hasMain: usePackedTexture\n        };\n      }\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n      const shaderSource = `\n    ${glslFunc.body}\n    void main() {\n      vec4 v1 = ${glsl.texture2D}(A, TexCoords);\n      vec4 v2 = ${glsl.texture2D}(B, TexCoords);\n      vec4 result = ${glslFunc.name}(v1, v2);\n      ${glsl.output} = result;\n    }\n    `;\n\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        output: {dims: inputs[0].dims, type: outputTensorType, textureType},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const add = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAdd()), inputs)];\n\nexport const and = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAnd(), 'bool'), inputs)];\n\nexport const div = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslDiv()), inputs)];\n\nexport const equal = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslEqual(), 'bool'), inputs)];\n\nexport const greater = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslGreater(), 'bool'), inputs)];\n\nexport const less = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslLess(), 'bool'), inputs)];\n\nexport const mul = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslMul()), inputs)];\n\nexport const or = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslOr(), 'bool'), inputs)];\n\nexport const pow = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPow()), inputs)];\n\nexport const pRelu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPRelu()), inputs)];\n\nexport const sub = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslSub()), inputs)];\n\nexport const xor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslXor(), 'bool'), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ProtoUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const cast: OperatorImplementation<Tensor.DataType> =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], to: Tensor.DataType): Tensor[] => {\n      validateInputs(inputs);\n      return [handler.cast(inputs[0], to)];\n    };\n\nexport const parseCastAttributes: OperatorInitialization<Tensor.DataType> = (node: Graph.Node): Tensor.DataType =>\n    ProtoUtil.tensorDataTypeFromProto(node.attributes.getInt('to'));\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Cast requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {ConcatAttributes} from './concat';\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst createPackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat (packed)',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.packed),\n  cacheHint\n});\n\nconst createPackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n      const coords = getChannels('coords', rank);\n      const dtype = getCoordsDataType(rank);\n      const unpackChannel = unpackFromChannel();\n\n      const shapes = inputs.map(i => i.dims);\n      const channels = getGlChannels(rank);\n      const offsets: number[] = new Array(shapes.length - 1);\n\n      offsets[0] = shapes[0][axis];\n      for (let i = 1; i < offsets.length; i++) {\n        offsets[i] = offsets[i - 1] + shapes[i][axis];\n      }\n\n      const channel = channels[axis];\n      const lastChannels = channels.slice(-2);\n      const allChannels = channels.join();\n\n      let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getX0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n      for (let i = 1; i < offsets.length; i++) {\n        const shift = offsets[i - 1];\n        getValueSnippet += `\n            if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n              return getChannel(\n                getX${i}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n                vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));\n            }`;\n      }\n      const lastIndex = offsets.length;\n      const shift = offsets[offsets.length - 1];\n      getValueSnippet += `\n            return getChannel(\n              getX${lastIndex}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n              vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));`;\n\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n\n      const shaderSource = `\n          ${unpackChannel}\n          float getValue(${channels.map(x => 'int ' + x)}) {\n            ${getValueSnippet}\n          }\n\n          void main() {\n            ${dtype} coords = getOutputCoords();\n            int lastDim = coords.${channels[rank - 1]};\n            coords.${channels[rank - 1]} = coords.${channels[rank - 2]};\n            coords.${channels[rank - 2]} = lastDim;\n\n            vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n            if (${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.g = getValue(${coords});\n            }\n\n            ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]}) {\n              result.a = getValue(${coords});\n            }\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]} &&\n                ${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.b = getValue(${coords});\n            }\n            ${glsl.output} = result;\n          }\n        `;\n\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createPackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createPackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createPackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getShiftedChannelsSnippet = (channels: string[], channel: string, shift: number): string => {\n  const channelIdx = channels.indexOf(channel);\n  const res = channels.map((c, idx) => {\n    if (idx === channelIdx) {\n      return `${c} - ${shift}`;\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {createPackedConcatProgramInfoLoader} from './concat-packed';\n\nexport interface ConcatAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const concat: OperatorImplementation<ConcatAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): Tensor[] => {\n      validateInputs(inputs);\n      if (inferenceHandler.session.pack && inputs[0].dims.length > 1) {\n        const output =\n            inferenceHandler.run(createPackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      } else {\n        const output =\n            inferenceHandler.run(createUnpackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      }\n    };\n\nconst createUnpackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.unpacked),\n  cacheHint\n});\n\nconst createUnpackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n\n      const sizeInConcatAxis = new Array<number>(inputs.length);\n      let previousSum = 0;\n      for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n        previousSum += inputs[i].dims[axis];\n        sizeInConcatAxis[i] = previousSum;\n      }\n\n      let getTextureIndexWhereDataResidesMethod = '';\n      // in most cases linear search is sufficient, as in most scenarios, only 2 tensors are concatenated\n      if (inputs.length < 5) {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n      } else {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesBinarySearch(sizeInConcatAxis);\n      }\n\n      const fetchDataFromCorrectTextureMethod = getFetchDataFromCorrectTextureMethod(inputs.length, rank);\n      const getSizeInConcatAxisValueFromIndexMethod = getGetSizeInConcatAxisValueFromIndexMethod(sizeInConcatAxis);\n      const shaderSource = `\n        ${fetchDataFromCorrectTextureMethod}\n        ${getSizeInConcatAxisValueFromIndexMethod}\n        ${getTextureIndexWhereDataResidesMethod}\n        float process(int indices[${rank}]) {\n          int textureIndex = getTextureWhereDataResides (indices[${axis}]);\n\n          if(textureIndex != 0) {\n            indices[${axis}] = indices[${axis}] - int(getSizeInConcatAxisValueFromIndex(textureIndex-int(1)));\n          }\n\n          return fetchDataFromCorrectTexture(textureIndex, indices);\n        }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n      };\n    };\n\nconst createUnpackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createUnpackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createUnpackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getTextureIndexWhereDataResidesLinearSearch = (sizeInConcatAxis: number[]): string => {\n  const searchAxis = sizeInConcatAxis.map((size, i) => `if(index<${size}) {return ${i};}\n`);\n  return `int getTextureWhereDataResides(int index) {\n      ${searchAxis.join('')}\n    }`;\n};\n\n// TODO: Implement BinarySearch in GLSL\nconst getTextureIndexWhereDataResidesBinarySearch = (sizeInConcatAxis: number[]): string =>\n    getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n\nconst getFetchDataFromCorrectTextureMethod = (numberOfTensors: number, tensorRank: number) => {\n  const codeLines: string[] = [`float fetchDataFromCorrectTexture(int textureIndex, int indices[${tensorRank}]) {`];\n  for (let i = 0; i < numberOfTensors; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    } else if (i === numberOfTensors - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return _X${i}(indices); }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst getGetSizeInConcatAxisValueFromIndexMethod = (sizeInConcatAxis: number[]): string => {\n  const codeLines: string[] = ['int getSizeInConcatAxisValueFromIndex(int index) {'];\n  for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    } else if (i === sizeInConcatAxis.length - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return ${sizeInConcatAxis[i]}; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n\n  return codeLines.join('\\n');\n};\n\nexport const parseConcatAttributes: OperatorInitialization<ConcatAttributes> = (node: Graph.Node): ConcatAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis')});\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 1) {\n    throw new Error('too few inputs');\n  }\n\n  const inputType = inputs[0].type;\n  const inputDimensionality = inputs[0].dims.length;\n\n  // TODO: Support string concat\n  if (inputType === 'string') {\n    throw new Error('string tensor is not supported yet');\n  }\n\n  for (const input of inputs) {\n    // make sure types of all inputs match\n    if (input.type !== inputType) {\n      throw new Error('input tensors should be one type');\n    }\n\n    // make sure the dimensionality of all inputs are the same\n    if (input.dims.length !== inputDimensionality) {\n      throw new Error('input tensors should have the same shape');\n    }\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../../instrument';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {getActivationSnippet} from './fuse-utils';\n\nconst createUnpackedGroupedConvProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'GroupedConv',\n  inputNames: hasBias ? ['X', 'W', 'Bias'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedGroupedConvProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBias(output_channel);' : '';\n      const xShape = inputs[0].dims.slice();\n      const wShape = inputs[1].dims.slice();\n      const outputChannelsPerGroup = wShape[0] / attributes.group;\n      Logger.verbose(\n          'GroupedConv',\n          `autpPad:${attributes.autoPad}, dilations:${attributes.dilations}, group:${attributes.group}, kernelShape:${\n              attributes.kernelShape}, pads:${attributes.pads}, strides:${attributes.strides}`);\n      const outputShape =\n          calculateOutputShape(xShape, wShape, attributes.dilations, attributes.pads, attributes.strides);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n    ivec2 xRCCorner = coords.zw * strides - pads;\n    int group_id = output_channel / ${outputChannelsPerGroup};\n\n    float value = 0.0;\n    for (int wInChannel = 0; wInChannel < ${wShape[1]}; wInChannel++) {\n      int input_channel = group_id * ${wShape[1]} + wInChannel;\n      for (int wHeight = 0; wHeight < ${wShape[2]}; wHeight++) {\n        int xHeight = xRCCorner.x + wHeight * ${attributes.dilations[0]};\n\n        if (xHeight < 0 || xHeight >= ${xShape[2]}) {\n          continue;\n        }\n\n        for (int wWidth = 0; wWidth < ${wShape[3]}; wWidth++) {\n          int xWidth = xRCCorner.y + wWidth * ${attributes.dilations[1]};\n          if (xWidth < 0 || xWidth >= ${xShape[3]}) {\n            continue;\n          }\n\n          float xVal = getX(batch, input_channel, xWidth, xHeight);\n          float wVal = getW(output_channel, wInChannel, wWidth, wHeight);\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${processBias}\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createUnpackedGroupedConvProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes):\n        ProgramInfoLoader => {\n          const metadata = createUnpackedGroupedConvProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedGroupedConvProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {createPackedIm2ColProgramInfoLoader} from './im2col-pack';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const conv2DPackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapePacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapePacked(matmulOutput, outputShape);\n    };\n\nexport const conv2DPacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n\n      // run im2col\n      const im2colOutput = inferenceHandler.run(\n          createPackedIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes),\n          [inputs[0]]);\n\n      // reshape kernel\n      const kernelReshaped = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1] * kshape[2] * kshape[3]]);\n\n      // run matmul\n      const matmulInputs =\n          (inputs.length === 3) ? [kernelReshaped, im2colOutput, inputs[2]] : [kernelReshaped, im2colOutput];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n\n      // reshape output\n      const outputReshaped = inferenceHandler.reshapePacked(matmulOutput, outputShape);\n      return outputReshaped;\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\nimport {getActivationSnippet, parseInternalActivationAttributes} from './fuse-utils';\n\nconst computeTotalPad =\n    (inDim: number, stride: number, adj: number, kernel: number, dilation: number, outSize: number) =>\n        (inDim - 1) * stride + adj + (kernel - 1) * dilation + 1 - outSize;\n\nconst distributePadding = (totalPad: number, autoPad: string, pads: number[], head: number, tail: number) => {\n  const smallPad = Math.floor(totalPad / 2);\n  if (autoPad === 'SAME_UPPER') {\n    pads[head] = smallPad;\n    pads[tail] = totalPad - smallPad;\n  } else if (autoPad === 'SAME_LOWER') {\n    pads[head] = totalPad - smallPad;\n    pads[tail] = smallPad;\n  }\n};\n\nconst calculateOutputShapeAndPads =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[], autoPad: string,\n     pads: number[], strides: readonly number[], outputPadding: readonly number[], outputShape: number[]) => {\n      const spatialRank = inputShape.length - 2;\n      const updateShape = outputShape.length === 0;\n      for (let i = 0; i < spatialRank; ++i) {\n        const outSize = updateShape ? inputShape[i + 2] * strides[i] : outputShape[i];\n        const totalPad = computeTotalPad(inputShape[i + 2], strides[i], pads[i], kernelShape[i], dilations[i], outSize);\n        distributePadding(totalPad, autoPad, pads, i, i + spatialRank);\n        if (updateShape) {\n          outputShape.push(\n              strides[i] * (inputShape[i + 2] - 1) + outputPadding[i] + (kernelShape[i] - 1) * dilations[i] + 1 -\n              pads[i] - pads[i + spatialRank]);\n        }\n      }\n    };\n\nexport interface ConvTransposeAttributes extends ConvAttributes {\n  readonly outputPadding: readonly number[];\n  readonly outputShape: readonly number[];\n}\n\nexport const convTranspose: OperatorImplementation<ConvTransposeAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not convTranspose2D\n      return convTranspose2d(inferenceHandler, inputs, attributes);\n    };\n\nconst convTranspose2d: OperatorImplementation<ConvTransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvTransposeAttributes(attributes, inputs);\n      return [convTranspose2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n    };\n\nconst createConvTransposeProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'ConvTranspose',\n  inputNames: hasBias ? ['X', 'W', 'B'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedConvTransposeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvTransposeAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const valueInit = hasBias ? 'getB(output_channel)' : '0.0';\n      const xShape = inputs[0].dims;\n      const wShape = inputs[1].dims;\n      const outputChannelsPerGroup = wShape[1];\n      const inputChannelsPerGroup = wShape[0] / attributes.group;\n      const outputShape = [inputs[0].dims[0], inputs[1].dims[1] * attributes.group, ...attributes.outputShape];\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n\n    ivec2 loc = coords.zw + pads;\n\n    int group_id = output_channel / ${outputChannelsPerGroup};\n    int wOutChannel = output_channel - group_id * ${outputChannelsPerGroup};\n\n    float value = ${valueInit};\n    for (int inChannelOffset = 0; inChannelOffset < ${inputChannelsPerGroup}; inChannelOffset++) {\n      int input_channel = group_id * ${inputChannelsPerGroup} + inChannelOffset;\n      for (int wWOff = 0; wWOff < ${wShape[2]}; wWOff++) {\n        for (int wHOff = 0; wHOff < ${wShape[3]}; wHOff++) {\n          ivec2 wOff = ivec2(wWOff * ${attributes.dilations[0]}, wHOff * ${attributes.dilations[1]});\n          ivec2 wLoc = loc - wOff;\n          ivec2 wLocIn = wLoc / strides;\n          if (\n            wLocIn * strides == wLoc &&\n            wLocIn.x >= 0 && wLocIn.x < ${xShape[2]} &&\n            wLocIn.y >= 0 && wLocIn.y < ${xShape[3]}\n          ) {\n            float xVal = getX(batch, input_channel, wLocIn.y, wLocIn.x);\n            float wVal = getW(input_channel, wOutChannel, wHOff, wWOff);\n            value += xVal * wVal;\n          }\n        }\n      }\n    }\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nconst createUnpackedConvTransposeProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\n        ProgramInfoLoader => {\n          const metadata = createConvTransposeProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedConvTransposeProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n\n\nconst convTranspose2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\n        Tensor => {\n          const result = inferenceHandler.run(\n              createUnpackedConvTransposeProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n          return result;\n        };\n\nconst getAdjustedConvTransposeAttributes = <T extends ConvTransposeAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n\n  const pads = attributes.pads.slice();\n  const outputShape = attributes.outputShape.slice();\n  const inputShape = inputs[0].dims;\n  // If outputShape is not specified in the attributes of this op, infer it from the parameters\n  // Similarly, automatically infer pads if not specified\n  calculateOutputShapeAndPads(\n      inputShape, kernelShape, attributes.dilations, attributes.autoPad, pads, attributes.strides,\n      attributes.outputPadding, outputShape);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, outputShape, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvTransposeAttributes: OperatorInitialization<ConvTransposeAttributes> =\n    (node: Graph.Node): ConvTransposeAttributes => {\n      const attributes = node.attributes;\n      const activationAttributes = parseInternalActivationAttributes(attributes);\n      // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n      const autoPad = attributes.getString('auto_pad', 'NOTSET');\n      const dilations = attributes.getInts('dilations', [1, 1]);\n      const group = attributes.getInt('group', 1);\n      const kernelShape = attributes.getInts('kernel_shape', []);\n      const outputPadding = attributes.getInts('output_padding', [0, 0]);\n      const outputShape = attributes.getInts('output_shape', []);\n      const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n      const strides = attributes.getInts('strides', [1, 1]);\n\n      return createAttributeWithCacheKey(\n          {autoPad, dilations, group, kernelShape, outputPadding, outputShape, pads, strides, ...activationAttributes});\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvTransposeAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[0];\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  const featureMaps = inputs[1].dims[1] * attributes.group;\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[2].dims[0] !== featureMaps)) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // Wrong output padding dimension\n  if (attributes.outputPadding.length !== spatialRank) {\n    throw new Error(`output_padding should be ${spatialRank}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // as with kernelShape, must have same number of spatial dims as input\n  if (attributes.outputShape.length !== 0 && attributes.outputShape.length !== inputs[0].dims.length - 2) {\n    throw new Error('invalid output shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('ConvTranspose input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('ConvTranspose input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {createUnpackedGroupedConvProgramInfoLoader} from './conv-grouped';\nimport {conv2DPacked} from './conv-pack';\nimport {createDotProductProgramInfoLoader} from './dot-product';\nimport {InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createIm2ColProgramInfoLoader} from './im2col';\nimport {createMatmulProgramInfoLoader} from './matmul';\n\n\nexport const calculateOutputShape =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[],\n     adjustPads: readonly number[], strides: readonly number[]): number[] => {\n      const batchSize = inputShape[0];\n      const inputSpatialShape = inputShape.slice(2);\n      const spatialRank = inputSpatialShape.length;\n      const outChannels = kernelShape[0];\n      const kernelSpatialShape = kernelShape.slice(2);\n      const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\n      const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\n      const outputSpatialShape =\n          inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\n      const outputShape = [batchSize, outChannels].concat(...outputSpatialShape);\n      return outputShape;\n    };\n\nexport interface ConvAttributes extends InternalActivationAttributes, AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly dilations: readonly number[];\n  readonly group: number;\n  readonly kernelShape: readonly number[];\n  readonly pads: readonly number[];\n  readonly strides: readonly number[];\n}\n\nexport const conv: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not conv2D\n      return conv2d(inferenceHandler, inputs, attributes);\n    };\n\nconst conv2d: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvAttributes(attributes, inputs);\n      const packMode = inferenceHandler.session.pack;\n      const isPointwise = adjustedAttributes.kernelShape[0] === 1 && adjustedAttributes.kernelShape[1] === 1;\n      if (adjustedAttributes.group > 1) {\n        const result = inferenceHandler.run(\n            createUnpackedGroupedConvProgramInfoLoader(inferenceHandler, inputs, adjustedAttributes), inputs);\n        return [result];\n      } else if (isPointwise && packMode) {\n        return [conv2DUnpackedPointwise(inferenceHandler, inputs, adjustedAttributes)];\n      } else if (packMode && inputs[0].dims.length === 4 && inputs[0].dims[0] === 1 && !isPointwise) {\n        return [conv2DPacked(inferenceHandler, inputs, adjustedAttributes)];\n      } else {\n        return [conv2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n      }\n    };\n\nconst conv2DUnpackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapeUnpacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapeUnpacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(createMatmulProgramInfoLoader(matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapeUnpacked(matmulOutput, outputShape);\n    };\n\nconst conv2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const xIm2Col = inferenceHandler.run(\n          createIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes), [inputs[0]]);\n\n      const dotProductInputs = inputs.length === 3 ? [xIm2Col, inputs[1], inputs[2]] : [xIm2Col, inputs[1]];\n      const output = inferenceHandler.run(\n          createDotProductProgramInfoLoader(inferenceHandler, inputs, outputShape, attributes), dotProductInputs);\n      return output;\n    };\n\nconst getAdjustedConvAttributes = <T extends ConvAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPadsBasedOnAutoPad(\n      inputs[0].dims, attributes.strides, attributes.dilations, kernelShape, pads, attributes.autoPad);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvAttributes: OperatorInitialization<ConvAttributes> = (node: Graph.Node): ConvAttributes => {\n  const attributes = node.attributes;\n  const activationAttributes = parseInternalActivationAttributes(attributes);\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n  const autoPad = attributes.getString('auto_pad', 'NOTSET');\n  const dilations = attributes.getInts('dilations', [1, 1]);\n  const group = attributes.getInt('group', 1);\n  const kernelShape = attributes.getInts('kernel_shape', []);\n  const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n  const strides = attributes.getInts('strides', [1, 1]);\n\n  return createAttributeWithCacheKey({autoPad, dilations, group, kernelShape, pads, strides, ...activationAttributes});\n};\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[1] * attributes.group;\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('Conv input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('Conv input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface DepthToSpaceAttributes {\n  mode: 'DCR'|'CRD';\n  blocksize: number;\n}\n\nexport const depthToSpace: OperatorImplementation<DepthToSpaceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: DepthToSpaceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const blocksize = attributes.blocksize;\n      const blocksizeSqr = blocksize * blocksize;\n      const transposePerm = attributes.mode === 'DCR' ? [0, 3, 4, 1, 5, 2] : [0, 1, 4, 2, 5, 3];\n      const firstReshapeShape = attributes.mode === 'DCR' ?\n          [\n            inputs[0].dims[0], blocksize, blocksize, inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ] :\n          [\n            inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, blocksize, blocksize, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ];\n\n      // const transpose = new WebGLTranspose();\n      // const attributes = new Attribute(undefined);\n      // attributes.set('perm', 'ints', transposePerm);\n      // transpose.initialize(attributes);\n\n      // First reshape\n      const firstReshapedTensor = inferenceHandler.reshapeUnpacked(inputs[0], firstReshapeShape);\n\n      // transpose\n      const transposeAttributes: TransposeAttributes = {perm: transposePerm, cacheKey: `${transposePerm}`};\n      const [transposeOutput] = transpose(inferenceHandler, [firstReshapedTensor], transposeAttributes);\n\n      // Second reshape\n      const secondReshapeShape = [\n        inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2] * blocksize,\n        inputs[0].dims[3] * blocksize\n      ];\n      const result = inferenceHandler.reshapeUnpacked(transposeOutput, secondReshapeShape);\n      return [result];\n    };\n\nexport const parseDepthToSpaceAttributes: OperatorInitialization<DepthToSpaceAttributes> =\n    (node: Graph.Node): DepthToSpaceAttributes => {\n      // processing node attributes\n      const blocksize = node.attributes.getInt('blocksize');\n      if (blocksize < 1) {\n        throw new Error(`blocksize must be >= 1, but got : ${blocksize} for DepthToSpace`);\n      }\n      const mode = node.attributes.getString('mode', 'DCR');\n      if (mode !== 'DCR' && mode !== 'CRD') {\n        throw new Error(`unrecognized mode: ${mode} for DepthToSpace`);\n      }\n      return {mode, blocksize};\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (inputs.length !== 1) {\n    throw new Error(`DepthToSpace expect 1 inputs, but got ${inputs.length}`);\n  }\n\n  // Input has to be a 4-D tensor\n  // TODO: Support string depth-to-space.\n  if (inputs[0].type === 'string' || inputs[0].dims.length !== 4) {\n    throw new TypeError('DepthToSpace input should be a 4-D numeric tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {calculateIm2ColDims} from './im2col';\n\nconst createDotProductProgramMetadata = (hasBias: boolean, attributes: InternalActivationAttributes) => ({\n  name: 'ConvDotProduct',\n  inputNames: hasBias ? ['Im2Col', 'K', 'B'] : ['Im2Col', 'K'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.packedLastDimension],\n  cacheKey: attributes.activationCacheKey\n});\n\nconst createDotProductProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: readonly Tensor[],\n     outputShape: number[], attributes: InternalActivationAttributes): ProgramInfo => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const adjustedKernelShape = [kshape[0], Math.ceil((xshape[1] * kshape[2] * kshape[3]) / 4)];\n      const im2colShape = calculateIm2ColDims(xshape, kshape, outputShape);\n      const [kWidth, kHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(adjustedKernelShape, TextureType.packedLastDimension);\n\n      const im2colStrides = ShapeUtil.computeStrides(im2colShape);\n      const [im2colWidth, im2colHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(im2colShape, TextureType.packedLastDimension);\n      const rank = outputShape.length;\n\n      const initValue = (inputs.length < 3) ? '0.0' : '_B(b)';\n      const sharedDim = Math.ceil(xshape[1] * kshape[2] * kshape[3] / 4);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n${activationFunction}\nfloat process(int indices[${rank}]) {\n  int b[1];\n  b[0] = indices[1];\n  int im2col[4];\n  im2col[0] = indices[0];\n  im2col[1] = indices[2];\n  im2col[2] = indices[3];\n  int im2colOffset = im2col[0] * ${im2colStrides[0]} + im2col[1] * ${im2colStrides[1]} + im2col[2] * ${\n          im2colStrides[2]};\n  int kernelOffset = indices[1] * ${adjustedKernelShape[1]};\n  float value = ${initValue};\n  for (int i = 0; i < ${sharedDim}; ++i) {\n    vec2 im2colCoords = offsetToCoords(im2colOffset, ${im2colWidth}, ${im2colHeight});\n    vec2 kernelCoords = offsetToCoords(kernelOffset, ${kWidth}, ${kHeight});\n    value += dot(${glsl.texture2D}(Im2Col, im2colCoords), ${glsl.texture2D}(K, kernelCoords));\n    ++im2colOffset;\n    ++kernelOffset;\n  }\n  ${applyActivation}\n  return value;\n}`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nexport const createDotProductProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], outputShape: number[],\n     attributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createDotProductProgramMetadata(inputs.length > 2, attributes);\n      return {\n        ...metadata,\n        get: () => createDotProductProgramInfo(inferenceHandler, metadata, inputs, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const flatten: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number): Tensor[] => {\n      validateInputs(inputs, axis);\n\n      const outputDims = ShapeUtil.flattenShape(inputs[0].dims, axis);\n      return [inferenceHandler.reshapeUnpacked(inputs[0], outputDims)];\n    };\n\nexport const parseFlattenAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getInt('axis', 1);  // default axis is 1\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Flatten requires 1 input.');\n  }\n\n  const r = inputs[0].dims.length;\n  if (r === 0) {\n    throw new Error('scalar tensor is not supported.');\n  }\n\n  if (axis < -r || axis > r) {\n    throw new Error('Invalid axis');\n  }\n\n  // TODO: Support string type\n  if (inputs[0].type === 'string') {\n    throw new Error('string tensor is not supported.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../../../attribute';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {GlslValueFunction} from '../glsl-definitions';\n\nimport {glslClip, glslRelu, glslSigmoid} from './unary-op';\n\nexport interface InternalActivationAttributes {\n  readonly activation: string;\n  readonly clipMin?: number;\n  readonly clipMax?: number;\n  readonly activationCacheKey: string;\n}\n\nexport function getActivationSnippet(attributes: InternalActivationAttributes) {\n  let func: GlslValueFunction;\n  switch (attributes.activation) {\n    case 'Relu':\n      func = glslRelu();\n      break;\n    case 'Sigmoid':\n      func = glslSigmoid();\n      break;\n    case 'Clip':\n      func = glslClip(attributes.clipMin!, attributes.clipMax!);\n      break;\n    // TODO: adding other activations that can be fused.\n    default:\n      return {activationFunction: '', applyActivation: ''};\n  }\n\n  const activationName = func.name;\n  const activationFunction = func.body;\n  const applyActivation = `value = ${activationName}_(value);`;\n  return {activationFunction, applyActivation};\n}\n\nexport const parseInternalActivationAttributes = (attributes: Attribute): InternalActivationAttributes => {\n  const activation = attributes.getString('activation', '');\n\n  if (activation === 'Clip') {\n    const [clipMin, clipMax] = attributes.getFloats('activation_params', [MIN_CLIP, MAX_CLIP]);\n    return {activation, clipMax, clipMin, activationCacheKey: `${activation}:${clipMin},${clipMax}`};\n  }\n  return {activation, activationCacheKey: activation};\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\ninterface GatherAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const gather: OperatorImplementation<GatherAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): Tensor[] => {\n      validateInputs(inputs, attributes.axis);\n      const output = inferenceHandler.run(createGatherProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseGatherAttributes: OperatorInitialization<GatherAttributes> = (node: Graph.Node): GatherAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 0)});\n\nconst gatherProgramMetadata = {\n  name: 'Gather',\n  inputNames: ['A', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createGatherProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const indexDataShape = inputs[1].dims.slice();\n      const outputShape = new Array(inputShape.length + indexDataShape.length - 1);\n\n      axis = ShapeUtil.normalizeAxis(axis, inputShape.length);\n      const indexCopyOps: string[] = [];\n      for (let i = 0; i < outputShape.length; i++) {\n        // outputShape is divided into three parts: A, B, C\n        // |0        axis|  axis + indexDataShape.length |          end|\n        // |     A       |             B                 |      C      |\n        //\n        // inputIdx: [A, inputs[1][B], C]\n        if (i < axis) {  // A\n          outputShape[i] = inputShape[i];\n          indexCopyOps.push(`inputIdx[${i}] = outputIdx[${i}];`);\n        } else {\n          if (i < axis + indexDataShape.length) {  // B\n            outputShape[i] = indexDataShape[i - axis];\n            indexCopyOps.push(`indexDataIdx[${i - axis}] = outputIdx[${i}];`);\n          } else {                                                       // C\n            outputShape[i] = inputShape[i - indexDataShape.length + 1];  // skip 1 for axis\n            indexCopyOps.push(`inputIdx[${i - indexDataShape.length + 1}] = outputIdx[${i}];`);\n          }\n        }\n      }\n\n      const orank = outputShape.length || 1;\n      const irank = inputShape.length;\n      const iDrank = indexDataShape.length || 1;\n      const shaderSource = `\n      float process(int outputIdx[${orank}]) {\n        int inputIdx[${irank}];\n        int indexDataIdx[${iDrank}];\n        indexDataIdx[0] = 0;\n        ${indexCopyOps.join('\\n        ')}\n        int idx = int(_B(indexDataIdx));\n        inputIdx[${axis}] = idx < 0 ? idx + ${inputShape[axis]} : idx;\n        return _A(inputIdx);\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createGatherProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): ProgramInfoLoader => {\n      const metadata = {...gatherProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createGatherProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Gather requires 2 inputs.');\n  }\n  const tensorRank = inputs[0].dims.length;\n  if (tensorRank < 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (axis < -tensorRank || axis > tensorRank - 1) {\n    throw new Error('Invalid axis.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invaid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invaid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {GemmUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface GemmAttributes extends AttributeWithCacheKey {\n  transA: boolean;\n  transB: boolean;\n  alpha: number;\n  beta: number;\n  isOptionalC: boolean;  // in opset 11, C becomes optional\n}\n\nexport const gemm: OperatorImplementation<GemmAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GemmAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(createGemmProgramInfoLoader(inputs, attributes), inputs);\n      return [output];\n    };\n\nconst parseGemmAttributes = (node: Graph.Node, isOptionalC: boolean): GemmAttributes => {\n  const transA = node.attributes.getInt('transA', 0) !== 0;\n  const transB = node.attributes.getInt('transB', 0) !== 0;\n  const alpha = node.attributes.getFloat('alpha', 1.0);\n  const beta = node.attributes.getFloat('beta', 1.0);\n  return createAttributeWithCacheKey({transA, transB, alpha, beta, isOptionalC});\n};\n\nexport const parseGemmAttributesV7: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, false);\n\nexport const parseGemmAttributesV11: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, true);\n\nconst createGemmProgramInfoLoader = (inputs: Tensor[], attributes: GemmAttributes): ProgramInfoLoader => {\n  const metadata = {\n    name: 'Gemm',\n    inputNames: inputs.length === 3 ? ['A', 'B', 'C'] : ['A', 'B'],\n    inputTypes: inputs.length === 3 ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                                      [TextureType.unpacked, TextureType.unpacked],\n    key: attributes.cacheKey\n  };\n\n  return {...metadata, get: () => createGemmProgramInfo(metadata, inputs, attributes)};\n};\n\nconst createGemmProgramInfo =\n    (metadata: ProgramMetadata, inputs: Tensor[], attributes: GemmAttributes): ProgramInfo => {\n      const aShape = inputs[0].dims.slice();\n      const bShape = inputs[1].dims.slice();\n      const [M, N] = GemmUtil.getShapeOfGemmResult(\n          aShape, attributes.transA, bShape, attributes.transB, inputs.length === 3 ? inputs[2].dims : undefined);\n      const outputShape = [M, N];\n      if (!outputShape) {\n        throw new Error('Can\\'t use gemm on the given tensors');\n      }\n      let sharedDim = aShape[aShape.length - 1];\n      let line = '';\n      if (attributes.transA) {\n        sharedDim = aShape[0];\n      }\n      if (attributes.transA && attributes.transB) {\n        line = 'value += _A_T(a) * _B_T(b);';\n      } else if (attributes.transA && !attributes.transB) {\n        line = 'value += _A_T(a) * _B(b);';\n      } else if (!attributes.transA && attributes.transB) {\n        line = 'value += _A(a) * _B_T(b);';\n      } else if (!attributes.transA && !attributes.transB) {\n        line = 'value += _A(a) * _B(b);';\n      }\n      const rank = outputShape.length;\n      const declareC = inputs.length === 3 ? `int c[${inputs[2].dims.length}];` : '';\n      const broadcastC = inputs.length === 3 ? 'bcastIndices_C(indices, c);' : '';\n      const calculateC = inputs.length === 3 ? 'value += beta * _C(c);' : '';\n      const shaderSource = `\n      float process(int indices[${rank}]) {\n          int a[${rank}];\n          int b[${rank}];\n          ${declareC}\n\n          copyVec(indices, a);\n          copyVec(indices, b);\n          ${broadcastC}\n\n          float value = 0.0;\n          for (int k=0; k<${sharedDim}; ++k) {\n              a[${rank - 1}] = k;\n              b[${rank - 2}] = k;\n              ${line}\n          }\n\n          value = value * alpha;\n          ${calculateC}\n          return value;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        variables: [\n          {name: 'alpha', type: 'float', data: attributes.alpha}, {name: 'beta', type: 'float', data: attributes.beta}\n        ],\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: GemmAttributes): void => {\n  if (!inputs) {\n    throw new Error('Input is missing');\n  }\n  if (attributes.isOptionalC && (inputs.length < 2 || inputs.length > 3)) {\n    throw new Error('Invaid input shape.');\n  }\n  if (!attributes.isOptionalC && inputs.length !== 3) {\n    throw new Error('Gemm requires 3 inputs');\n  }\n\n  // 'C' can be of dimensionality 1 or 2 only\n  if (inputs.length === 3 && inputs[2].dims.length !== 1 && inputs[2].dims.length !== 2) {\n    throw new Error('Invalid input shape of C');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') ||\n      (inputs.length === 3 && inputs[2].type !== 'float32' && inputs[2].type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n\n  if ((inputs[0].type !== inputs[1].type) || (inputs.length === 3 && inputs[0].type !== inputs[2].type)) {\n    throw new Error('Input types are mismatched');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col (packed)',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed],\n  cacheHint,\n});\n\nconst createPackedIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n      const rowDim = 2;\n      const colDim = 3;\n      const rank = outputShape.length;\n      const im2colShape = [wshape[1] * wshape[2] * wshape[3], outputShape[2] * outputShape[3]];\n      const kernelSize = wshape[2] * wshape[3];\n      const unpackChannel = unpackFromChannel();\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      let unrolled = '';\n\n      for (let row = 0; row <= 1; row++) {\n        for (let col = 0; col <= 1; col++) {\n          unrolled += `\n            blockIndex = rc.x + ${col};\n            pos = rc.y + ${row};\n\n            if(blockIndex < ${im2colShape[1]} && pos < ${im2colShape[0]}) {\n              offsetY = int(blockIndex / (${outputShape[rank - 1]})) * ${attributes.strides[0]} -\n                ${attributes.pads[0]};\n              d0 = offsetY + ${attributes.dilations[0]} * (imod(pos, ${kernelSize}) / ${wshape[2]});\n\n              if(d0 < ${xshape[rowDim]} && d0 >= 0) {\n                offsetX = imod(blockIndex, ${outputShape[rank - 1]}) * ${attributes.strides[1]} -\n                  ${attributes.pads[1]};\n                d1 = offsetX + ${attributes.dilations[1]} * imod(imod(pos, ${kernelSize}), ${wshape[2]});\n\n                if(d1 < ${xshape[colDim]} && d1 >= 0) {\n\n                  ch = int(float(pos)/ ${kernelSize}.);\n                    innerDims = vec2(d0, d1);\n                    result[${row * 2 + col}] = getChannel(\n                      getA(0, ch, int(innerDims.x),\n                      int(innerDims.y)), innerDims);\n                }\n              }\n            }\n\n          `;\n        }\n      }\n\n      const shaderSource = `\n      ${unpackChannel}\n\n      void main() {\n        ivec2 rc = getOutputCoords();\n          vec4 result = vec4(0.0);\n          int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n          vec2 innerDims;\n          ${unrolled}\n          ${glsl.output} = result;\n      }\n            `;\n      return {\n        ...metadata,\n        output: {dims: im2colShape, type: x.type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createPackedIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\n\nconst createIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n  cacheHint,\n});\n\nconst createIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n\n      const rank = outputShape.length;\n      const im2colDims = calculateIm2ColDims(xshape, wshape, outputShape, 4);\n\n      const shaderSource = `\n        const int XC = ${xshape[1]};\n        const int XH = ${xshape[2]};\n        const int XW = ${xshape[3]};\n        const int KH = ${attributes.kernelShape[0]};\n        const int KW = ${attributes.kernelShape[1]};\n        const int dilationH = ${attributes.dilations[0]};\n        const int dilationW = ${attributes.dilations[1]};\n        const int strideH = ${attributes.strides[0]};\n        const int strideW = ${attributes.strides[1]};\n        const int padH = ${attributes.pads[0]};\n        const int padW = ${attributes.pads[1]};\n        const int KHKW = KH*KW;\n        const int XCKHKW = XC * KHKW;\n        const int outputChannels = 4;\n        vec4 process(int indices[${rank}]) {\n          int b  = indices[0]; // batch size\n          int oh = indices[1] * strideH - padH; //output height\n          int ow = indices[2] * strideW - padW; //output width\n          int p = indices[3] * outputChannels; //patch\n          vec4 value = vec4(0.0);\n          for(int i=0; i < outputChannels; ++i) {\n            if(p < XCKHKW) {\n              int patchC = p / KHKW;\n              int patchH = (p - patchC*KHKW) / KW;\n              int patchW = (p - patchC*KHKW) - patchH * KW;\n              int xh2 = oh + patchH * dilationH;\n              int xw2 = ow + patchW * dilationW;\n              int x[${xshape.length}];\n              x[0] = b;\n              x[1] = patchC;\n              x[2] = xh2;\n              x[3] = xw2;\n              if(xh2 >= 0 &&\n                  xh2 < XH &&\n                  xw2 >= 0 &&\n                  xw2 < XW) {\n                value[i] = _X(x);\n              }\n            }\n            ++p;\n          }\n          return value;\n        }\n        `;\n      return {\n        ...metadata,\n        output: {dims: im2colDims, type: x.type, textureType: TextureType.packedLastDimension},\n        shaderSource\n      };\n    };\n\nexport const createIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n\n\nexport const calculateIm2ColDims =\n    (inputShape: readonly number[], kernelShape: readonly number[], outputShape: readonly number[], channels = 4):\n        number[] =>\n            [outputShape[0], outputShape[2], outputShape[3],\n             Math.ceil(inputShape[1] * kernelShape[2] * kernelShape[3] / channels)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface ImageScalerAttributes extends AttributeWithCacheKey {\n  scale: number;\n  bias: number[];\n}\n\nexport const imageScaler: OperatorImplementation<ImageScalerAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output =\n          inferenceHandler.run(createImageScalerProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseImageScalerAttributes: OperatorInitialization<ImageScalerAttributes> =\n    (node: Graph.Node): ImageScalerAttributes => {\n      const scale = node.attributes.getFloat('scale');\n      const bias = node.attributes.getFloats('bias');\n      return createAttributeWithCacheKey({scale, bias});\n    };\n\nconst imageScalerProgramMetadata = {\n  name: 'ImageScaler',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createImageScalerProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], attributes: ImageScalerAttributes):\n        ProgramInfo => {\n          const outputShape = inputs[0].dims.slice();\n          const rank = outputShape.length;\n          const getBiasMethod = createGetBiasMethod(attributes.bias.length);\n          const shaderSource = `\n      ${getBiasMethod}\n      float process(int indices[${rank}]) {\n        return _X(indices) * scale + getBias(bias, indices[1]);\n      }`;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            variables: [\n              {name: 'bias', type: 'float', arrayLength: attributes.bias.length, data: attributes.bias},\n              {name: 'scale', type: 'float', data: attributes.scale}\n            ],\n            shaderSource\n          };\n        };\n\nconst createImageScalerProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): ProgramInfoLoader => {\n      const metadata = {...imageScalerProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createImageScalerProgramInfo(handler, metadata, inputs, attributes)};\n    };\n\nconst createGetBiasMethod = (numChannels: number): string => {\n  const codeLines: string[] = [`float getBias(float bias[${numChannels}], int channel) {`];\n  for (let i = 0; i < numChannels; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (channel == ${i}) { return bias[${i}]; }`);\n    } else if (i === numChannels - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return bias[${i}]; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (channel == ${i}) { return bias[${i}]; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('ImageScaler requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Invalid input shape.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport const instanceNormalization: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], epsilon: number): Tensor[] => {\n      validateInputs(inputs);\n\n      const meanAndVariance = inferenceHandler.run(createMeanAndVarianceProgramInfoLoader(inputs[0]), inputs);\n      const output = inferenceHandler.run(\n          createComputeOutputProgramInfoLoader(inferenceHandler, inputs[0], epsilon, meanAndVariance.dims),\n          [inputs[0], meanAndVariance, inputs[1], inputs[2]]);\n      return [output];\n    };\n\nexport const parseInstanceNormalizationAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getFloat('epsilon', 1e-5);\n\nconst meanAndVarianceProgramMetadata = {\n  name: 'InstanceNormalization_MeanAndVariance',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createMeanAndVarianceProgramInfo = (metadata: ProgramMetadata, input: Tensor): ProgramInfo => {\n  const xDims = input.dims.slice();\n  const channel = xDims[1];\n  const channelSize = xDims[2] * xDims[3];\n  const outputShape = [xDims[0], channel];\n\n  const shaderSource = `\n      vec4 process(int[2] indices) {\n        vec4 v = vec4(0.0);\n        int a[4];\n        a[0] = indices[0];\n        a[1] = indices[1];\n        float temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += x;\n          }\n        }\n        float mean = temp / float(${channelSize});\n        temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += (x - mean) * (x - mean);\n          }\n        }\n        v.r = mean;\n        v.g = temp / float(${channelSize});\n\n        return v;\n      }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: input.type, textureType: TextureType.packedLastDimension},\n    shaderSource\n  };\n};\n\nconst createMeanAndVarianceProgramInfoLoader = (input: Tensor): ProgramInfoLoader => ({\n  ...meanAndVarianceProgramMetadata,\n  get: () => createMeanAndVarianceProgramInfo(meanAndVarianceProgramMetadata, input)\n});\n\nconst computeOutputProgramMetadata = {\n  name: 'InstanceNormalization_ComputeOutput',\n  inputNames: ['X', 'MeanAndVariance', 'Scale', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createComputeOutputProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, epsilon: number,\n     meanAndVarianceShape: readonly number[]): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(meanAndVarianceShape, TextureType.packedLastDimension);\n      const [meanAndVarianceWidth, meanAndVarianceHeight] = [textureWidth / 4, textureHeight];\n      const shaderSource = `\n      vec4 get_MeanAndVariance(int[2] mv) {\n        int offset = indicesToOffset_MeanAndVariance(mv);\n        vec2 coords = offsetToCoords(offset, ${meanAndVarianceWidth}, ${meanAndVarianceHeight});\n        return ${glsl.texture2D}(MeanAndVariance, coords);\n      }\n\n      float process(int[4] indices) {\n        int mv[2];\n        mv[0] = indices[0];\n        mv[1] = indices[1];\n        vec4 mean_and_variance = get_MeanAndVariance(mv);\n        float mean = mean_and_variance.r;\n        float variance = mean_and_variance.g;\n\n        int sb[1];\n        sb[0] = indices[1];\n        float scale = _Scale(sb);\n        float b = _B(sb);\n\n        return scale * (_X(indices) - mean) / sqrt(variance + epsilon) + b;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        variables: [{name: 'epsilon', type: 'float', data: epsilon}],\n        shaderSource\n      };\n    };\n\nconst createComputeOutputProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, epsilon: number, meanAndVarianceShape: readonly number[]):\n        ProgramInfoLoader => {\n          const metadata = {...computeOutputProgramMetadata, cacheHint: `${epsilon}`};\n          return {\n            ...metadata,\n            get: () => createComputeOutputProgramInfo(inferenceHandler, metadata, input, epsilon, meanAndVarianceShape)\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 3) {\n    throw new Error('InstanceNormalization requires 3 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n\n  // input should at least have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1]) {\n    throw new Error('Input shapes are mismatched.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Only support 4-D input shape.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\n\nexport interface LrnAttributes extends AttributeWithCacheKey {\n  alpha: number;\n  beta: number;\n  bias: number;\n  size: number;\n}\n\nexport const lrn: OperatorImplementation<LrnAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: LrnAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      // if (inferenceHandler.session.pack) {\n      //   return [inferenceHandler.run(createPackedLrnProgramInfoLoader(inferenceHandler, inputs, attributes),\n      //   inputs)];\n      // } else {\n      return [inferenceHandler.run(createLrnProgramInfoLoader(inputs, attributes), inputs)];\n      //}\n    };\n\nexport const parseLrnAttributes: OperatorInitialization<LrnAttributes> = (node: Graph.Node): LrnAttributes => {\n  const alpha = node.attributes.getFloat('alpha', 0.0001);\n  const beta = node.attributes.getFloat('beta', 0.75);\n  const bias = node.attributes.getFloat('bias', 1.0);\n  const size = node.attributes.getInt('size');\n\n  return createAttributeWithCacheKey({alpha, beta, bias, size});\n};\n\nconst lrnProgramMetadata = {\n  name: 'LRN',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked]\n};\n\nfunction createLrnProgramInfo(inputs: Tensor[], attributes: LrnAttributes): ProgramInfo {\n  const C = inputs[0].dims[1];\n  const rank = inputs[0].dims.length;\n  const from = -Math.floor((attributes.size - 1) / 2);\n  const to = Math.ceil((attributes.size - 1) / 2);\n  const alpha = `float(${attributes.alpha}) / float(${attributes.size})`;\n  const bias = `float(${attributes.bias})`;\n  const beta = `float(${attributes.beta})`;\n\n  const shaderSource = `\n    float process(int indices[${rank}]) {\n        int c = indices[1];\n        float x = _X(indices);\n        float square_sum = 0.0;\n\n        for (int i = ${from}; i <= ${to}; i++) {\n          int idx = c + i;\n          if (c >= 0 && c < ${C}) {\n            indices[1] = idx;\n            float j = _X(indices);\n            square_sum += j * j;\n          }\n        }\n        return x / pow(${bias} + ${alpha} * square_sum, ${beta});\n    }`;\n  return {\n    ...lrnProgramMetadata,\n    cacheHint: attributes.cacheKey,\n    output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\n    shaderSource,\n  };\n}\n\nexport function createLrnProgramInfoLoader(inputs: Tensor[], attributes: LrnAttributes): ProgramInfoLoader {\n  return {...lrnProgramMetadata, cacheHint: attributes.cacheKey, get: () => createLrnProgramInfo(inputs, attributes)};\n}\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('LRN requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('currently only support LRN for input with \"NCHW\" format');\n  }\n  if (inputs[0].type !== 'float32') {\n    throw new Error('input should be float type');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {getBiasForMatmul} from './matmul';\n\nconst createPackedMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul (packed)',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.packed, TextureType.packed, TextureType.packed] :\n                        [TextureType.packed, TextureType.packed],\n  cacheHint\n});\n\nconst createPackedMatmulProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n      const aShape = inputs[0].dims;\n      const bShape = inputs[1].dims;\n      const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n\n      if (!outputShape) {\n        throw new Error('Can\\'t use matmul on the given tensors');\n      }\n      const sharedDim = aShape[aShape.length - 1];\n      const sharedDimIndex = Math.ceil(sharedDim / 2);\n      const aRank = aShape.length;\n      const bRank = bShape.length;\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const coordsDataType = getCoordsDataType(outputShape.length);\n      const outRank = outputShape.length;\n      const allGlChannels = getGlChannels();\n      const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\n\n      const getBiasForMatmulSnippet =\n          hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, true)}` : '';\n\n      const getBcastedSamplerForMatmulSnippet =\n          isBroadcast ? `${getBcastSamplerForMatmul(coordsDataType, allGlChannels, inputs, outputShape)}` : '';\n\n      const getSamplerAInLoopSnippet = isBroadcast ? 'getAAtOutCoordsMatmul(i)' : `getA(${getA(allGlChannels, aRank)})`;\n      const getSamplerBInLoopSnippet = isBroadcast ? 'getBAtOutCoordsMatmul(i)' : `getB(${getB(allGlChannels, bRank)})`;\n      const getOutputCoordsSnippet = isBroadcast ? '' : `${coordsDataType} rc =\n          getOutputCoords(); int lastDim = rc.${allGlChannels[outRank - 1]}; rc.${allGlChannels[outRank - 1]} =\n          rc.${allGlChannels[outRank - 2]}; rc.${allGlChannels[outRank - 2]} = lastDim;\n      `;\n      const shaderSource = `\n            ${getBcastedSamplerForMatmulSnippet}\n            ${getBiasForMatmulSnippet}\n            ${activationFunction}\n            void main() {\n              ${getOutputCoordsSnippet}\n\n              vec4 value = vec4(0);\n              for (int i = 0; i < ${sharedDimIndex}; i++) {\n                vec4 a = ${getSamplerAInLoopSnippet};\n                vec4 b = ${getSamplerBInLoopSnippet};\n\n                value += (a.rrbb * b.rgrg);\n                value += (a.ggaa * b.baba);\n              }\n              ${processBias}\n              ${applyActivation}\n              ${glsl.output} = value;\n            }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedMatmulProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createPackedMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedMatmulProgramInfo(inferenceHandler, metadata, inputs, activationAttributes)\n      };\n    };\n\nfunction getBcastSamplerForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inputs: Tensor[], outShape: readonly number[]): string {\n  let unpackedACoordsSnippet = [];\n  let unpackedBCoordsSnippet = [];\n\n  const inAShape = inputs[0].dims;\n  const inBShape = inputs[1].dims;\n\n  const inARank = inAShape.length;\n  const inBRank = inBShape.length;\n\n  const outRank = outShape.length;\n  const rankADiff = outRank - inARank;\n  const rankBDiff = outRank - inBRank;\n\n  unpackedACoordsSnippet = inAShape.map((s, i) => `coords.${allGlChannels[i + rankADiff]}`);\n  unpackedACoordsSnippet[inARank - 1] = 'i*2';\n  unpackedACoordsSnippet.join(', ');\n  unpackedBCoordsSnippet = inBShape.map((s, i) => `coords.${allGlChannels[i + rankBDiff]}`);\n  unpackedBCoordsSnippet[inBRank - 2] = 'i*2';\n  unpackedBCoordsSnippet.join(', ');\n\n  const broadcastADims = BroadcastUtil.getBroadcastDims(inAShape, outShape);\n  const broadcastBDims = BroadcastUtil.getBroadcastDims(inBShape, outShape);\n\n  const coordsASnippet = broadcastADims.map(d => `coords.${allGlChannels[d + rankADiff]} = 0;`).join('\\n');\n  const coordsBSnippet = broadcastBDims.map(d => `coords.${allGlChannels[d + rankBDiff]} = 0;`).join('\\n');\n  const swapDimSnippet = `int lastDim = coords.${allGlChannels[outRank - 1]};\n  coords.${allGlChannels[outRank - 1]} = coords.${allGlChannels[outRank - 2]};\n  coords.${allGlChannels[outRank - 2]} = lastDim;`;\n\n  const getBcastSamplerMatmulSource = `\nvec4 getAAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsASnippet}\n  vec4 outputValue = getA(${unpackedACoordsSnippet});\n  return outputValue;\n}\n\nvec4 getBAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsBSnippet}\n  vec4 outputValue = getB(${unpackedBCoordsSnippet});\n  return outputValue;\n}`;\n\n  return getBcastSamplerMatmulSource;\n}\n\nfunction getA(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += `rc.${allGlChannels[rank - 2]}, ` +\n      'i*2';\n  return res;\n}\n\nfunction getB(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += 'i*2, ' +\n      `rc.${allGlChannels[rank - 1]}`;\n  return res;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActivationSnippet, InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const matMul: OperatorImplementation<InternalActivationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: InternalActivationAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      if (inferenceHandler.session.pack) {\n        return [inferenceHandler.run(\n            createPackedMatmulProgramInfoLoader(inferenceHandler, inputs, attributes), inputs)];\n      } else {\n        return [inferenceHandler.run(createMatmulProgramInfoLoader(inputs, attributes), inputs)];\n      }\n    };\n\nexport const parseMatMulAttributes: OperatorInitialization<InternalActivationAttributes> =\n    (node: Graph.Node): InternalActivationAttributes => parseInternalActivationAttributes(node.attributes);\n\nconst createMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nfunction createMatmulProgramInfo(\n    metadata: ProgramMetadata, inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfo {\n  const aShape = inputs[0].dims;\n  const bShape = inputs[1].dims;\n  const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n  if (!outputShape) {\n    throw new Error('Can\\'t use matmul on the given tensors');\n  }\n  const coordsDataType = getCoordsDataType(outputShape.length);\n  const allGlChannels = getGlChannels();\n  const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\n\n  const hasBias = inputs.length > 2;\n  const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n  const getBiasForMatmulSnippet =\n      hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, false)}` : '';\n\n  const rank = outputShape.length;\n  const arank = aShape.length;\n  const brank = bShape.length;\n  const sharedDim = aShape[aShape.length - 1];\n  const shaderSource = `\n    ${activationFunction}\n    ${getBiasForMatmulSnippet}\n    float process(int indices[${rank}]) {\n        int a[${arank}];\n        int b[${brank}];\n        bcastMatmulIndices_A(indices, a);\n        bcastMatmulIndices_B(indices, b);\n\n        float value;\n        for (int k=0; k<${sharedDim}; ++k) {\n            a[${arank - 1}] = k;\n            b[${brank - 2}] = k;\n            value += _A(a) * _B(b);\n        }\n        ${processBias}\n        ${applyActivation}\n        return value;\n    }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n    shaderSource,\n  };\n}\n\nexport function createMatmulProgramInfoLoader(\n    inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfoLoader {\n  const metadata = createMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n  return {...metadata, get: () => createMatmulProgramInfo(metadata, inputs, activationAttributes)};\n}\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('MatMul requires 2 inputs.');\n  }\n\n  if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\n    throw new Error('shared dimension does not match.');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64')) {\n    throw new Error('inputs should be float type');\n  }\n\n  if (inputs[0].type !== inputs[1].type) {\n    throw new Error('inputs types should match');\n  }\n};\n\nexport function getBiasForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inShape: readonly number[], outShape: readonly number[],\n    isPacked: boolean): string {\n  let unpackedCoordsSnippet = '';\n  const inRank = inShape.length;\n  const outRank = outShape.length;\n  const rankDiff = outRank - inRank;\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inShape.map((s, i) => `coords.${allGlChannels[i + rankDiff]}`).join(', ');\n  }\n  const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n  const coordsSnippet = broadcastDims.map(d => `coords.${allGlChannels[d + rankDiff]} = 0;`).join('\\n');\n  const inSize = ShapeUtil.size(inShape);\n  const isInputScalar = inSize === 1;\n  let output = 'vec4(outputValue.xx, outputValue.yy)';\n  if (isInputScalar) {\n    output = 'vec4(outputValue.x)';\n  }\n  const getBiasForMatmulSource = isPacked ? `\nvec4 getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  vec4 outputValue = getBias(${unpackedCoordsSnippet});\n  return ${output};\n}` :\n                                            `\nfloat getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  return getBias(coords.x);\n}`;\n\n  return getBiasForMatmulSource;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels} from './packing-utils';\n\nconst packProgramMetadata = {\n  name: 'pack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpackedReversed]\n};\n\nconst createPackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const inputShape = input.dims;\n\n  const inputRank = inputShape.length;\n  // createTextureLayoutFromShape won't change output rank. Need to verify by running tests\n  const outputRank = input.dims.length;\n\n  const coordsDataType = getCoordsDataType(outputRank);\n  const channels = getChannels('rc', outputRank);\n  const setup = getSetup(outputRank, channels, inputShape[inputShape.length - 2], inputShape[inputShape.length - 1]);\n\n  let reversedInputWH;\n  if (inputRank === 0) {\n    reversedInputWH = [1, 1];\n  } else if (inputRank === 1) {\n    reversedInputWH = [inputShape[0], 1];\n  } else {\n    reversedInputWH = [inputShape[outputRank - 1], inputShape[outputRank - 2]];\n  }\n  const outOfBoundsCondition = getOutOfBoundsCondition(outputRank, reversedInputWH, channels);\n  const output = getOutput(inputShape, channels);\n\n  const shaderSource = `\n        void main() {\n          ${coordsDataType} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            ${glsl.output} = vec4(0);\n          } else {\n            ${setup}\n\n            ${glsl.output} = vec4(${output});\n          }\n        }\n      `;\n  return {\n    ...packProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.packed},\n    shaderSource\n  };\n};\n\nexport const createPackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...packProgramMetadata, get: () => createPackProgramInfo(handler, input)});\n\n/**\n * check output coordinate location and return false if it is outside input's width/height boundary\n */\nfunction getOutOfBoundsCondition(rank: number, shape: readonly number[], dims: string[]): string {\n  if (rank === 0) {\n    return 'false';\n  }\n  if (rank === 1) {\n    return `rc > ${shape[0]}`;\n  }\n\n  let cond = '';\n  for (let i = rank - 2; i < rank; i++) {\n    cond += `${dims[i]} >= ${shape[i - rank + 2]}`;\n    if (i < rank - 1) {\n      cond += '||';\n    }\n  }\n\n  return cond;\n}\n\n/**\n * code snippet to sample input texture with output coordiantes\n */\nfunction getOutput(shape: readonly number[], dims: string[]): string {\n  const rank = shape.length;\n\n  if (rank === 0) {\n    return 'getA(), 0, 0, 0';\n  }\n\n  if (rank === 1) {\n    return `getA(rc),\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\n            0, 0`;\n  }\n\n  const coord00 = 'r, c';\n  const coord01 = 'r, cp1';\n  const coord10 = 'rp1, c';\n  const coord11 = 'rp1, cp1';\n  let D = '';\n  if (rank > 2) {\n    for (let i = 0; i < rank - 2; ++i) {\n      D = D + `${dims[i]},`;\n    }\n  }\n  return `getA(${D}${coord00}),\n          rEdge ? 0. : getA(${D}${coord10}),\n          cEdge ? 0. : getA(${D}${coord01}),\n          rEdge || cEdge ? 0. : getA(${D}${coord11})`;\n}\n\n/**\n * code snippet to setup 4 coordinates and edge conditions\n */\nfunction getSetup(rank: number, dims: string[], rows: number, cols: number): string {\n  if (rank === 0 || rank === 1) {\n    return '';\n  }\n  // rank >= 2 for width+height pack.\n  else {\n    const setup = `\n    int r = ${dims[rank - 2]};\n    int c = ${dims[rank - 1]};\n    int rp1 = ${dims[rank - 2]} + 1;\n    int cp1 = ${dims[rank - 1]} + 1;\n    bool rEdge = rp1 >= ${cols};\n    bool cEdge = cp1 >= ${rows};\n    `;\n    return setup;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlChannels} from '../utils';\n\nexport function getVecChannels(name: string, rank: number): string[] {\n  return getGlChannels(rank).map(d => `${name}.${d}`);\n}\n\nexport function getChannels(name: string, rank: number): string[] {\n  if (rank === 1) {\n    return [name];\n  }\n  return getVecChannels(name, rank);\n}\n\nexport function unpackFromChannel(): string {\n  return `\n    float getChannel(vec4 frag, int dim) {\n      int modCoord = imod(dim, 2);\n      return modCoord == 0 ? frag.r : frag.g;\n    }\n\n    float getChannel(vec4 frag, vec2 innerDims) {\n      vec2 modCoord = mod(innerDims, 2.);\n      return modCoord.x == 0. ?\n        (modCoord.y == 0. ? frag.r : frag.g) :\n        (modCoord.y == 0. ? frag.b : frag.a);\n    }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl, Glsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface PadAttributes extends AttributeWithCacheKey {\n  readonly mode: string;\n  readonly pads: number[];\n  readonly value: number;\n}\n\nconst padProgramMetadata = {\n  name: 'Pad',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const padV2: OperatorImplementation<PadAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: PadAttributes): Tensor[] => {\n      validateInputsV2(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...padProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPadProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parsePadAttributesV2: OperatorInitialization<PadAttributes> = (node: Graph.Node): PadAttributes => {\n  const mode = node.attributes.getString('mode', 'constant');\n  const value = node.attributes.getFloat('value', 0.0);\n  const pads = node.attributes.getInts('pads');\n  return createAttributeWithCacheKey({mode, value, pads});\n};\n\nexport const padV11: OperatorImplementation<string> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): Tensor[] => {\n      validateInputsV11(inputs);\n      const attrubutes = generatePadAttributesFromInputs(inferenceHandler, inputs, mode);\n      return padV2(inferenceHandler, [inputs[0]], attrubutes);\n    };\n\nexport const parsePadAttributesV11: OperatorInitialization<string> = (node: Graph.Node): string =>\n    node.attributes.getString('mode', 'constant');\n\nconst generatePadAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): PadAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          (inputs.length >= 3 && !inferenceHandler.session.isInitializer(inputs[2].dataId))) {\n        throw new Error('dynamic pad attributes are not allowed');\n      }\n\n      const pads = Array.from(inputs[1].integerData);\n      const value = (inputs.length >= 3) ? inputs[2].floatData[0] : 0.0;\n\n      return createAttributeWithCacheKey({mode, pads, value});\n    };\n\nconst createPadProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): ProgramInfo => {\n      const outputShape = ShapeUtil.padShape(input.dims.slice(), attributes.pads);\n      const rank = outputShape.length;\n      const padFunction = getPadFunction(inferenceHandler, input, attributes);\n      const shaderSource = `\n      ${padFunction}\n      float process(int[${rank}] indices) {\n          return padA(indices);\n      }`;\n      return {\n        name: 'Pad',\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputsV2 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pad requires 1 input');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst validateInputsV11 = (inputs: Tensor[]): void => {\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Pad requires 2 or 3 inputs');\n  }\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 3 && inputs[2].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst getPadFunction = (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): string => {\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  const [width, height] = inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n  const strides = ShapeUtil.computeStrides(input.dims);\n\n  switch (attributes.mode) {\n    case 'constant':\n      return getPadConstant(glsl, input.dims, strides, width, height, attributes.pads, attributes.value);\n    case 'reflect':\n      return getPadReflect(glsl, input.dims, strides, width, height, attributes.pads);\n    case 'edge':\n      return getPadEdge(glsl, input.dims, strides, width, height, attributes.pads);\n    default:\n      throw new Error('Invalid mode');\n  }\n};\n\nconst getPadConstant =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[],\n     value: number): string => {\n      const rank = shape.length;\n      let block = '';\n      for (let i = rank - 1; i >= 0; --i) {\n        block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  return constant;\n        if (k >= ${shape[i]}) return constant;\n        offset += k * ${strides[i]};\n        `;\n      }\n      return `\n      float padA(int m[${rank}]) {\n        const float constant = float(${value});\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n    };\n\nconst getPadReflect =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0) { k = -k; }\n        {\n          const int _2n_1 = ${2 * (shape[i] - 1)};\n          k = int( mod( float(k), float(_2n_1) ) ) ;\n          if(k >= ${shape[i]}) { k = _2n_1 - k; }\n        }\n        offset += k * ${strides[i]};\n        `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n\nconst getPadEdge =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  k = 0;\n        if (k >= ${shape[i]}) k = ${shape[i] - 1};\n        offset += k * ${strides[i]};\n      `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface AveragePoolAttributes extends AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly ceilMode: number;\n  readonly countIncludePad: boolean;\n  readonly kernelShape: readonly number[];\n  readonly strides: readonly number[];\n  readonly pads: readonly number[];\n}\n\nexport const averagePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'AveragePool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n\n      // TODO: support attribute 'ceil_mode'\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\n      }\n\n      return createAttributeWithCacheKey({autoPad, ceilMode, countIncludePad, kernelShape, strides, pads});\n    };\n\nconst createAveragePoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: AveragePoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const kernelSize = ShapeUtil.size(adjustedAttributes.kernelShape);\n          const op1 = 'value += _X(x);';\n          let op2 = '';\n          if (adjustedAttributes.countIncludePad) {\n            op2 += `value /= float(${kernelSize});`;\n          } else {\n            op2 += `value /= float(${kernelSize} - pad);`;\n          }\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '0.0');\n          const shaderSource = `\n        ${poolingCode}\n      `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nexport const globalAveragePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata = {\n        name: 'GlobalAveragePool',\n        inputNames: ['X'],\n        inputTypes: [TextureType.unpacked],\n        cacheHint: `${attributes.countIncludePad}`\n      };\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, true, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseGlobalAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      return createAttributeWithCacheKey(\n          {autoPad: '', ceilMode: 0, countIncludePad, kernelShape: [], strides: [], pads: []});\n    };\n\nexport interface MaxPoolAttributes extends AveragePoolAttributes {\n  readonly storageOrder: number;\n  readonly dilations: number[];\n}\n\nexport const maxPool: OperatorImplementation<MaxPoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: MaxPoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'MaxPool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createMaxPoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseMaxPoolAttributes: OperatorInitialization<MaxPoolAttributes> =\n    (node: Graph.Node): MaxPoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n      const storageOrder = node.attributes.getInt('storage_order', 0);\n      const dilations = node.attributes.getInts('dilations', []);\n\n      // TODO: support attribute 'ceil_mode' and 'storage_order'\n      if (storageOrder !== 0) {\n        throw new Error('column major storage order is not yet supported for MaxPool');\n      }\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\n      }\n\n      return createAttributeWithCacheKey(\n          {autoPad, ceilMode, countIncludePad: false, kernelShape, strides, pads, storageOrder, dilations});\n    };\n\nconst createMaxPoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: MaxPoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const op1 = `\n      value = max(_X(x), value);\n    `;\n          const op2 = '';\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '-1e5');\n          const shaderSource = `\n      ${poolingCode}\n    `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst getAdjustedPoolAttributesAndOutputShape =\n    (inputs: Tensor[], attributes: AveragePoolAttributes|MaxPoolAttributes, isGlobalOperator: boolean):\n        [AveragePoolAttributes|MaxPoolAttributes, number[]] => {\n          const inputShape = inputs[0].dims.slice();\n          const hasDilations = Object.hasOwnProperty.call(attributes, 'dilations');\n          const kernelShape = attributes.kernelShape.slice();\n          const strides = attributes.strides.slice();\n          const dilations: number[] = hasDilations ? (attributes as MaxPoolAttributes).dilations.slice() : [];\n          const pads = attributes.pads.slice();\n          PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, dilations, pads);\n\n          const outputShape = PoolConvUtil.computePoolOutputShape(\n              isGlobalOperator, inputShape, strides, dilations, kernelShape, pads, attributes.autoPad);\n\n          const newAttributes = Object.assign({}, attributes);\n          if (hasDilations) {\n            Object.assign(newAttributes, {kernelShape, strides, pads, dilations, cacheKey: attributes.cacheKey});\n          } else {\n            Object.assign(newAttributes, {kernelShape, strides, pads, cacheKey: attributes.cacheKey});\n          }\n          return [newAttributes, outputShape];\n        };\n\nconst globalMaxPoolAttributes = {\n  autoPad: '',\n  ceilMode: 0,\n  countIncludePad: false,\n  kernelShape: [],\n  strides: [],\n  pads: [],\n  storageOrder: 0,\n  dilations: [],\n  cacheKey: ''\n};\n\nconst globalMaxPoolMetadata = {\n  name: 'GlobalMaxPool',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const globalMaxPool = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  const output = inferenceHandler.run(\n      {\n        ...globalMaxPoolMetadata,\n        get: () => createMaxPoolProgramInfo(inputs, globalMaxPoolMetadata, true, globalMaxPoolAttributes)\n      },\n      inputs);\n  return [output];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pool ops requires 1 input.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst generatePoolingCode =\n    (inputDims: readonly number[], attributes: AveragePoolAttributes, op1: string, op2: string, start: string):\n        string => {\n          const rank = inputDims.length;\n          if (attributes.kernelShape.length <= 2) {\n            const kw = attributes.kernelShape[attributes.kernelShape.length - 1];\n            const sw = attributes.strides[attributes.strides.length - 1];\n            const pwStart = attributes.pads[attributes.pads.length / 2 - 1];\n            const pwEnd = attributes.pads[attributes.pads.length - 1];\n            const dimW = inputDims[rank - 1];\n            let codeW = '';\n            let codeH = '';\n            let codeHEnd = '';\n            if (pwStart + pwEnd !== 0) {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            if (x[${rank} - 1] < 0 || x[${rank} - 1] >= ${dimW}) {\n              pad++;\n              continue;\n            }\n            ${op1}\n          }`;\n            } else {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            ${op1}\n          }`;\n            }\n\n            if (attributes.kernelShape.length === 2) {\n              const kh = attributes.kernelShape[attributes.kernelShape.length - 2];\n              const sh = attributes.strides[attributes.strides.length - 2];\n              const phStart = attributes.pads[attributes.pads.length / 2 - 2];\n              const phEnd = attributes.pads[attributes.pads.length - 2];\n              const dimH = inputDims[rank - 2];\n              if (phStart + phEnd !== 0) {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n              if (x[${rank} - 2] < 0 || x[${rank} - 2] >= ${dimH}) {\n                pad+= ${kw};\n                continue;\n              }\n          `;\n              } else {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n            `;\n              }\n              codeHEnd = `\n          }\n        `;\n            }\n\n            const poolingCode = `\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n\n          float value = ${start};\n          int pad = 0;\n          ${codeH}\n          ${codeW}\n          ${codeHEnd}\n          ${op2}\n          return value;\n        }\n      `;\n            return poolingCode;\n          } else {\n            const kernelSize = ShapeUtil.size(attributes.kernelShape);\n            const kernelStrides = ShapeUtil.computeStrides(attributes.kernelShape);\n            const stridesRank = kernelStrides.length;\n            const padsRank = attributes.pads.length;\n            const offsetToIndicesFunction = offsetToIndices(stridesRank);\n            const copyInputDims = copyArray(inputDims, 'inputDims');\n            const copyPads = copyArray(attributes.pads, 'pads');\n            const copyKernelStrides = copyArray(kernelStrides, 'kernelStrides');\n            const copyStrides = copyArray(attributes.strides, 'strides');\n            const hasPads = attributes.pads.reduce((sum, cur) => sum + cur);\n            let padCode = '';\n            if (hasPads) {\n              padCode = `\n            if (x[j] >= inputDims[j] || x[j] < 0) {\n              pad++;\n              isPad = true;\n              break;\n            }\n          }\n          if (!isPad) {\n            ${op1}\n          }`;\n            } else {\n              padCode = `\n          }\n          ${op1}\n        `;\n            }\n            const poolingCode = `\n        ${offsetToIndicesFunction}\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n          int offset[${stridesRank}];\n          int pads[${padsRank}];\n          int inputDims[${rank}];\n          int kernelStrides[${stridesRank}];\n          int strides[${stridesRank}];\n          ${copyPads}\n          ${copyInputDims}\n          ${copyStrides}\n          ${copyKernelStrides}\n\n          float value = ${start};\n          int pad = 0;\n          bool isPad = false;\n          for (int i = 0; i < ${kernelSize}; i++) {\n            offsetToIndices(i, kernelStrides, offset);\n            isPad = false;\n            for (int j = ${rank} - ${stridesRank}; j < ${rank}; j++) {\n              x[j] = indices[j] * strides[j - ${rank} + ${stridesRank}]\n                + offset[j - ${rank} + ${stridesRank}] - pads[j - 2];\n              ${padCode}\n          }\n          ${op2}\n\n          return value;\n        }\n      `;\n            return poolingCode;\n          }\n        };\n\nconst copyArray = (array: readonly number[], arrayName: string): string => {\n  let block = '';\n  for (let i = 0; i < array.length; i++) {\n    block += `\n      ${arrayName}[${i}] = ${array[i]};\n    `;\n  }\n  return block;\n};\n\nconst offsetToIndices = (rank: number): string => `\n  void offsetToIndices(int offset, int[${rank}] strides, out int[${rank}] indices) {\n    if (${rank} == 0) {\n      return;\n    }\n    for (int i = 0; i < ${rank} - 1; ++i) {\n      indices[i] = offset / strides[i];\n      offset -= indices[i] * strides[i];\n    }\n    indices[${rank} - 1] = offset;\n  }`;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface ReduceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly keepDims: boolean;\n}\n\n// return [init ops, reduce ops, final ops]\ntype ReduceOp = (inputs: Tensor[], axes: number[]) => string[];\n\nconst reduce =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string,\n     reduceOp: ReduceOp): Tensor[] => {\n      validateInputs(inputs);\n\n      const reduceProgramMetadata = {\n        name,\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n      };\n\n      const output = inferenceHandler.run(\n          {\n            ...reduceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () =>\n                createReduceProgramInfo(inferenceHandler, inputs, attributes, name, reduceOp, reduceProgramMetadata)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseReduceAttributes: OperatorInitialization<ReduceAttributes> = (node: Graph.Node): ReduceAttributes => {\n  const axes = node.attributes.getInts('axes', []);\n  const keepDims = node.attributes.getInt('keepdims', 1) === 1;\n  return createAttributeWithCacheKey({axes, keepDims});\n};\n\nconst createReduceProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string, reduceOp: ReduceOp,\n     reduceProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const outputShape: number[] = [];\n      const iRank = inputs[0].dims.length || 1;\n\n      const idxCopy = [];  // copy output indexes to input indexes\n\n      const axes = ShapeUtil.normalizeAxes(attributes.axes, inputs[0].dims.length);\n      const ops = reduceOp(inputs, axes);\n      let reduceOps = ops[1];\n\n      for (let k = 0; k < inputs[0].dims.length; k++) {\n        // if this axis is reduced\n        if (axes.indexOf(k) >= 0 || axes.length === 0) {\n          if (attributes.keepDims) {\n            outputShape.push(1);\n          }  // else { remove the axis from outputShape; }\n\n          // loop over the d-th axis\n          reduceOps = `\n          for(int j${k} = 0; j${k} < ${inputs[0].dims[k]}; j${k}++) {\n            inputIdx[${k}] = j${k};\n            ${reduceOps}\n          }`;\n        } else {\n          idxCopy.push(`inputIdx[${k}] = outputIdx[${outputShape.length}];`);\n\n          outputShape.push(inputs[0].dims[k]);\n        }\n      }\n\n      const oRank = outputShape.length || 1;\n\n      const shaderSource = `\n      float process(int outputIdx[${oRank}]) {\n        float value;                 // final result\n        int inputIdx[${iRank}];      // addressing input data\n        ${idxCopy.join('\\n')}\n        ${ops[0]}       // init ops for reduce max/min\n        ${reduceOps}\n        ${ops[2]}       // final computation for reduce mean\n        return value;\n      }`;\n\n      return {\n        ...reduceProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  // TODO: support Reduce* operators with 2 inputs.\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Reduce op requires 1 input.');\n  }\n\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const reduceSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceSum', reduceOp);\n    };\n\nexport const reduceMean: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        let size = 1.0;\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            size *= inputs[0].dims[k];\n          }\n        }\n\n        return ['value = 0.0;', 'value += _A(inputIdx);', `value /= ${size}.;`];  // ensure real number with `.`\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMean', reduceOp);\n    };\n\nexport const reduceMax: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = max(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMax', reduceOp);\n    };\n\nexport const reduceMin: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = min(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMin', reduceOp);\n    };\n\nexport const reduceProd: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 1.0;', 'value *= _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceProd', reduceOp);\n    };\n\nexport const reduceLogSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', 'value = log(value);'];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSum', reduceOp);\n    };\n\nexport const reduceLogSumSquare: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['float t; value = 0.0;', 't = _A(inputIdx); value += t * t;', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSumSquare', reduceOp);\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedReshape3DProgramMetadata = (outputShape3D: readonly number[]) =>\n    ({name: 'Reshape (packed)', inputTypes: [TextureType.packed], inputNames: ['A'], cacheHint: `${outputShape3D}`});\n\nconst createPackedReshape3DProgramInfo =\n    (handler: WebGLInferenceHandler, input3D: Tensor, metadata: ProgramMetadata, outputShape3D: readonly number[]):\n        ProgramInfo => {\n          const inputShape3D = input3D.dims as [number, number, number];\n          const squeezedOutputShape = outputShape3D as [number, number, number];\n\n          let mainLoop = '';\n          for (let i = 0; i < 4; i++) {\n            let outputCoords = '';\n            switch (i) {\n              case 0:\n                outputCoords = 'outputCoords = rc;';\n                break;\n              case 1:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z);';\n                break;\n              case 2:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y, rc.z+1);';\n                break;\n              case 3:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z+1);';\n                break;\n              default:\n                throw new Error();\n            }\n\n            mainLoop += `\n        ${outputCoords}\n        ${i > 0 ? 'if(outputCoords.y < rows && outputCoords.z < cols){' : ''}\n          int flattenedIndex = getFlattenedIndex(outputCoords);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flattenedIndex);\n          vec2 innerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] = getChannel(getA(inputRC.x, inputRC.y, inputRC.z), innerDims);\n\n        ${i > 0 ? '}' : ''}\n      `;\n          }\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n\n          const shaderSource = `\n      ${getReshapedInputCoords(inputShape3D)}\n      ${getFlattenedIndexFrom3D(squeezedOutputShape)}\n      ${unpackFromChannel()}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.0);\n\n        ivec3 outputCoords;\n        int rows = ${squeezedOutputShape[2]};\n        int cols = ${squeezedOutputShape[1]};\n\n        ${mainLoop}\n        ${glsl.output} = result;\n      }\n    `;\n\n          return {\n            ...metadata,\n            output: {dims: squeezedOutputShape, type: input3D.type, textureType: TextureType.packed},\n            shaderSource,\n            hasMain: true\n          };\n        };\n\nexport const createPackedReshape3DProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input3D: Tensor, outputShape3D: readonly number[]): ProgramInfoLoader => {\n      const metadata = createPackedReshape3DProgramMetadata(outputShape3D);\n      return {...metadata, get: () => createPackedReshape3DProgramInfo(handler, input3D, metadata, outputShape3D)};\n    };\n\nexport function processDims3D(shape: ArrayLike<number>): [number, number, number] {\n  if (shape.length === 0) {\n    return [1, 1, 1];\n  }\n  // TODO: squeeze other shapes to 2D case\n  let batch = 1;\n  for (let i = 0; i < shape.length - 2; ++i) {\n    batch *= shape[i];\n  }\n  return [batch, shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\n\n// For packed reshape, we need to re-arrange texel data for output shape.\n// Our pack is designed to pack a 2x2 tile in last h and w dimension, so\n// for the reshaped new tensor, we just need to re-arrange the last h and\n// w dimension. For any shape that is not in 3D, i.e. [batch, W, H], we\n// first convert it to 3D by collapsing other dimension to batch dim, then\n// process with the last two dimensions.\n// Note: we only need the shape tensor to calculate output shape, so the\n// content in shape tensor is never uploaded to GPU. It is always kept in CPU.\n// TODO: optimize the algorithm -- in some cases, if the last two dims are\n// the same between input shape and output shape, the packed reshape can be\n// treated as no-op.\nexport function isReshapeCheap(dims: readonly number[], reshapedDims: readonly number[]) {\n  let isCheapReshape = false;\n  if (dims.length === 0 || reshapedDims.length === 0) {  // scalar\n    isCheapReshape = true;\n  } else if (dims.length < 2 || reshapedDims.length < 2) {  // 1D\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1];\n  } else {  // 2D +\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1] &&\n        dims[dims.length - 2] === reshapedDims[reshapedDims.length - 2];\n  }\n\n  return isCheapReshape;\n}\n\nfunction getReshapedInputCoords(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n  const coords = ['b', 'r', 'c'];\n  const index = 'index';\n  const coordsFromIndexSnippet = strides\n                                     .map((stride, i) => {\n                                       const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n                                       const line2 = i === strides.length - 1 ?\n                                           `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n                                           `index -= ${coords[i]} * ${stride}`;\n                                       return `${line1}; ${line2};`;\n                                     })\n                                     .join('');\n\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getFlattenedIndexFrom3D(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n\n  return `\n  int getFlattenedIndex(ivec3 coords) {\n    // reverse y, z order\n    return coords.x * ${strides[0]} + coords.z * ${strides[1]} + coords.y;\n  }\n`;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const reshape = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const reshapedDims = ShapeUtil.calculateReshapedDims(inputs[0].dims, inputs[1].integerData);\n  if (handler.session.pack) {\n    return [handler.reshapePacked(inputs[0], reshapedDims)];\n  } else {\n    return [handler.reshapeUnpacked(inputs[0], reshapedDims)];\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {unpackFromChannel} from './packing-utils';\nimport {parseUpsampleAttributes, scalesValidation, UpsampleAttributes, validateInputs} from './upsample';\n\nconst resizeProgramMetadata = {\n  name: 'Resize',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const resize: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...resizeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPackedResizeProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseResizeAttributesV10: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 10);\n\nexport const parseResizeAttributesV11: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 11);\n\nconst createPackedResizeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [scales, outputShape] = prepareInputs(inputs, attributes);\n\n      const isSame =\n          scales.every((s: number) => s === 1) && attributes.coordinateTransformMode !== 'tf_crop_and_resize';\n      if (isSame) {\n        return {\n          ...resizeProgramMetadata,\n          output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n          hasMain: true,\n          shaderSource: `void main() {\n                    vec4 v = ${glsl.texture2D}(X, TexCoords);\n                    ${glsl.output} = v;\n                }`\n        };\n      }\n\n      const dim = outputShape.length;\n      if (dim < 2) {\n        throw new Error(`output dimension should be at least 2, but got ${dim}`);\n      }\n\n      const outputHeight = outputShape[dim - 2];\n      const outputWidth = outputShape[dim - 1];\n\n      const inputShape = inputs[0].dims;\n      if (dim !== inputShape.length) {\n        throw new Error(`output dimension should match input ${inputShape.length}, but got ${dim}`);\n      }\n      const inputHeight = inputShape[dim - 2];\n      const inputWidth = inputShape[dim - 1];\n\n      const scalesHeight = scales[dim - 2];\n      const scalesWidth = scales[dim - 1];\n\n      let getSourceFracIndex = '';\n\n      if (attributes.mode !== 'linear') {\n        // TODO: support other modes\n        throw new Error(`resize (packed) does not support mode: '${attributes.mode}'`);\n      }\n      switch (attributes.coordinateTransformMode) {\n        case 'asymmetric':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return vec4(coords) / scaleWHWH;\n                    }\n                `;\n          break;\n        case 'half_pixel':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return (vec4(coords) + 0.5) / scaleWHWH - 0.5;\n                    }\n                `;\n          break;\n        case 'pytorch_half_pixel':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 fcoords = vec4(coords);\n                        return vec4(\n                            ${outputWidth}.0 > 1.0 ? (fcoords.x + 0.5) / scaleWHWH.x - 0.5 : 0.0,\n                            ${outputHeight}.0 > 1.0 ? (fcoords.y + 0.5) / scaleWHWH.y - 0.5 : 0.0,\n                            ${outputWidth}.0 > 1.0 ? (fcoords.z + 0.5) / scaleWHWH.z - 0.5 : 0.0,\n                            ${outputHeight}.0 > 1.0 ? (fcoords.w + 0.5) / scaleWHWH.w - 0.5 : 0.0\n                          );\n                    }\n                `;\n          break;\n        case 'align_corners':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 resized = vec4(${outputWidth}.0 - 1.0, ${outputHeight}.0 - 1.0, ${outputWidth}.0 - 1.0,\n                            ${outputHeight}.0 - 1.0);\n                        vec4 original = vec4(${inputWidth}.0 - 1.0, ${inputHeight}.0 - 1.0, ${inputWidth}.0 - 1.0,\n                            ${inputHeight}.0 - 1.0);\n                        vec4 new_scale = original / resized;\n                        return vec4(coords) * new_scale;\n                    }\n                `;\n          break;\n        default:\n          // TODO:supporting other coordinateTransformModes\n          throw new Error(`resize (packed) does not support coordinateTransformMode: \\\n                                '${attributes.coordinateTransformMode}'`);\n      }\n\n      const coordsDataType = getCoordsDataType(dim);\n      const unpackChannel = unpackFromChannel();\n      const shaderSource = `\n            const vec2 inputWH = vec2(${inputHeight}.0, ${inputWidth}.0);\n            const vec4 scaleWHWH = vec4(float(${scalesHeight}), float(${scalesWidth}), float(${scalesHeight}), float(${\n          scalesWidth}));\n            ${unpackChannel}\n            ${getSourceFracIndex}\n            float getAValue(int x10, int r, int c, int d) {\n                return getChannel(getA(x10, r, c, d), vec2(c, d));\n            }\n            void main() {\n                ${coordsDataType} rc = getOutputCoords();\n\n                int batch = rc[0];\n                int depth = rc[1];\n\n                // retrieve the 4 coordinates that is used in the 4 packed output values.\n                ivec4 coords = ivec4(rc.wz, rc.w + 1, rc.z + 1);\n\n                // calculate the source index in fraction\n                vec4 sourceFrac = getSourceFracIndex(coords);\n\n                // get the lower and upper bound of the 4 values that will be packed into one texel.\n                ivec4 x00 = ivec4(max(sourceFrac.xy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xy)));\n                ivec4 x01 = ivec4(max(sourceFrac.xw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xw)));\n                ivec4 x10 = ivec4(max(sourceFrac.zy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zy)));\n                ivec4 x11 = ivec4(max(sourceFrac.zw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zw)));\n\n                bool hasNextRow = rc.w < ${outputHeight - 1};\n                bool hasNextCol = rc.z < ${outputWidth - 1};\n\n                // pack x00, x01, x10, x11's top-left corner into one vec4 structure\n                vec4 topLeft = vec4(\n                    getAValue(batch, depth, x00.x, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's top-right corner into one vec4 structure\n                vec4 topRight = vec4(\n                    getAValue(batch, depth, x00.x, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.w) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-left corner into one vec4 structure\n                vec4 bottomLeft = vec4(\n                    getAValue(batch, depth, x00.z, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-right corner into one vec4 structure\n                vec4 bottomRight = vec4(\n                    getAValue(batch, depth, x00.z, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.w) : 0.0);\n\n                // calculate the interpolation fraction on u and v direction\n                vec4 frac = vec4(sourceFrac) - floor(sourceFrac);\n                vec4 clampFrac = clamp(frac, vec4(0.0), vec4(1.0));\n\n                vec4 top = mix(topLeft, topRight, clampFrac.ywyw);\n                vec4 bottom = mix(bottomLeft, bottomRight, clampFrac.ywyw);\n                vec4 newValue = mix(top, bottom, clampFrac.xxzz);\n\n                ${glsl.output} = vec4(newValue);\n            }\n        `;\n      return {\n        ...resizeProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\n\nconst prepareInputs = (inputs: Tensor[], attributes: UpsampleAttributes): [readonly number[], readonly number[]] => {\n  const x = inputs[0];\n  const xDims = x.dims;\n\n  let scales = attributes.scales;\n  let outputSizes: number[]|undefined;\n  if (scales.length === 0) {\n    const scalesTensor = inputs[attributes.scalesInputIdx];\n    if (scalesTensor && scalesTensor.size !== 0) {\n      if (inputs[attributes.sizesInputIdx]) {\n        throw new Error('Only one of scales or sizes must be provided as input.');\n      }\n      scales = parseScalesData(scalesTensor, attributes.mode, attributes.isResize);\n    } else {\n      const sizesTensor = inputs[attributes.sizesInputIdx];\n      if (!sizesTensor || sizesTensor.size === 0) {\n        throw new Error('Either scales or sizes MUST be provided as input.');\n      }\n\n      outputSizes = Array.from(sizesTensor.integerData);\n      scales = parseScalesDataFromOutputSize(outputSizes, xDims, attributes.mode, attributes.isResize);\n    }\n  } else {\n    if (inputs[attributes.sizesInputIdx]) {\n      throw new Error('Only one of scales or sizes must be provided as input.');\n    }\n  }\n\n  const yDims = outputSizes || (xDims.map((dim, i) => Math.floor(dim * scales[i])));\n\n  return [scales, yDims];\n};\n\nconst parseScalesData = (scale: Tensor, mode: string, isResize: boolean): number[] => {\n  const scales = Array.from(scale.floatData);\n  scalesValidation(scales, mode, isResize);\n  return scales;\n};\n\nconst parseScalesDataFromOutputSize =\n    (yDims: readonly number[], xDims: readonly number[], mode: string, isResize: boolean): number[] => {\n      const length = xDims.length;\n      const scales = new Array<number>(length);\n\n      for (let i = 0, end = length; i < end; i++) {\n        if (xDims[i] === 0) {\n          if (yDims[i] !== 0) {\n            throw new Error('Input dim is zero but required output dim is non-zero.');\n          }\n          scales[i] = 1;\n        } else {\n          scales[i] = yDims[i] / xDims[i];\n        }\n      }\n      scalesValidation(scales, mode, isResize);\n      return scales;\n    };\n\n// roi data is not used yet. but leave here for future usage.\n// const getRoi = (inputs: Tensor[], attributes: UpsampleAttributes) : number[] => {\n//     let roi: number[] = [];\n//     if (attributes.needRoiInput) {\n//         if (attributes.roiInputIdx <= 0) {\n//             throw new Error('Invalid roi input index.');\n//         }\n//         const roiTensor = inputs[attributes.roiInputIdx];\n//         roi = roiTensor.size > 0 ? Array.from(roiTensor.floatData) : [];\n//     } else {\n//         roi = new Array(inputs[0].dims.length * 2).fill(0);\n//     }\n//     return roi;\n// };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const shape = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  return [new Tensor([inputs[0].dims.length], 'int32', undefined, undefined, new Int32Array(inputs[0].dims))];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Shape requires 1 input.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SliceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly ends: number[];\n  readonly starts: number[];\n}\n\nconst sliceProgramMetadata = {\n  name: 'Slice',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const slice: OperatorImplementation<SliceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SliceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...sliceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseSliceAttributes: OperatorInitialization<SliceAttributes> = (node: Graph.Node): SliceAttributes => {\n  const starts = node.attributes.getInts('starts');\n  const ends = node.attributes.getInts('ends');\n  const axes = node.attributes.getInts('axes', []);\n  return createAttributeWithCacheKey({starts, ends, axes});\n};\n\nconst createSliceProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SliceAttributes): ProgramInfo => {\n      const axes = (attributes.axes.length === 0) ? input.dims.slice(0).map((val, i) => i) : attributes.axes;\n      const normalizedAxes = ShapeUtil.normalizeAxes(axes, input.dims.length);\n      const starts = attributes.starts.map((start, i) => {\n        if (start > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(start, input.dims[normalizedAxes[i]]);\n      });\n      const ends = attributes.ends.map((end, i) => {\n        if (end > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(end, input.dims[normalizedAxes[i]]);\n      });\n\n      const outputShape = input.dims.slice();\n\n      const sliceOps: string[] = [];\n      for (let i = 0; i < normalizedAxes.length; i++) {\n        outputShape[normalizedAxes[i]] = ends[i] - starts[i];\n        if (starts[i] > 0) {\n          sliceOps.push(`outputIdx[${normalizedAxes[i]}] += ${starts[i]};`);\n        }  // else { sliceOps.push(`outputIdx[${normalizedAxes[i]}] += 0;`); }\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        ${sliceOps.join('\\n      ')}\n        return _A(outputIdx);\n      }`;\n      return {\n        ...sliceProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Slice requires 1 input.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const sliceV10 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV10(inputs);\n  const attributes = generateSliceAttributesFromInputs(inferenceHandler, inputs);\n  const output = inferenceHandler.run(\n      {\n        ...sliceProgramMetadata,\n        cacheHint: attributes.cacheKey,\n        get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n      },\n      [inputs[0]]);\n  return [output];\n};\n\nconst generateSliceAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): SliceAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          !inferenceHandler.session.isInitializer(inputs[2].dataId) ||\n          (inputs.length >= 4 && !inferenceHandler.session.isInitializer(inputs[3].dataId)) ||\n          (inputs.length >= 5 && !inferenceHandler.session.isInitializer(inputs[4].dataId))) {\n        throw new Error('dynamic slice attributes are not allowed');\n      }\n\n      if (inputs.length >= 5 && inputs[4].integerData.some((i: number) => i !== 1)) {\n        throw new Error('currently non-1 steps is not supported for Slice');\n      }\n\n      const starts = Array.from(inputs[1].integerData);\n      const ends = Array.from(inputs[2].integerData);\n      const axes = inputs.length >= 4 ? Array.from(inputs[3].integerData) : [];\n      const cacheKey = `${axes};${starts};${ends}`;\n      return {starts, ends, axes, cacheKey};\n    };\n\nconst validateInputsV10 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 3 || inputs.length > 5) {\n    throw new Error('Invalid input number.');\n  }\n  if (inputs[1].type !== 'int32' || inputs[1].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[2].type !== 'int32' || inputs[2].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 4 && (inputs[3].type !== 'int32' || inputs[3].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 5 && (inputs[4].type !== 'int32' || inputs[4].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface SoftmaxAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nconst softmaxComputeMaxProgramMetadata = {\n  name: 'SoftmaxComputeMax',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst softmaxComputeScaleProgramMetadata = {\n  name: 'SoftmaxComputeScale',\n  inputNames: ['A', 'Max'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst softmaxProgramMetadata = {\n  name: 'SoftMax',\n  inputNames: ['A', 'Max', 'Norm'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked],\n};\n\nexport const softmax: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const logicalRowCount = ShapeUtil.sizeToDimension(inputShape, axis);\n      const featureCount = ShapeUtil.sizeFromDimension(inputShape, axis);\n\n      const output = computeSoftmax(inferenceHandler, inputs, attributes, logicalRowCount, featureCount);\n      return output;\n    };\n\nexport const parseSoftmaxAttributes: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 1)});\n\nexport const parseSoftmaxAttributesV13: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', -1)});\n\n// The \"semantic\" meaning of axis has changed in opset-13.\n// Please compare: https://github.com/onnx/onnx/blob/main/docs/Operators.md#Softmax\n// with https://github.com/onnx/onnx/blob/main/docs/Changelog.md#Softmax-11 for detailed explanations\n// To account for the opset-13 behavior, our plan will be to transpose the \"axis\" dim to the innermost dim\n// and perform softmax and then reverse the transpose. We can skip the transposing aspect if the axis is already\n// the innermost dim\nexport const softmaxV13: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const rank = inputShape.length;\n\n      const isTransposeRequired = (axis !== rank - 1) ? true : false;\n      const transposedInputShape: number[] = [];\n      let perm: number[] = [];\n      let transposedInputs: Tensor[] = [];\n      let transposeAttribute: TransposeAttributes;\n\n      if (isTransposeRequired) {\n        perm = Array.from({length: rank}).map((_, i) => i);\n\n        // swap the innermost dim with the dim corresponding to axis\n        perm[axis] = rank - 1;\n        perm[rank - 1] = axis;\n\n        perm.map(p => transposedInputShape.push(inputShape[p]));\n\n        transposeAttribute = createAttributeWithCacheKey({perm});\n        transposedInputs = transpose(inferenceHandler, inputs, transposeAttribute);\n      }\n\n      const logicalRowCount = isTransposeRequired ? ShapeUtil.sizeToDimension(transposedInputShape, rank - 1) :\n                                                    ShapeUtil.sizeToDimension(inputShape, rank - 1);\n      const featureCount = isTransposeRequired ? ShapeUtil.sizeFromDimension(transposedInputShape, rank - 1) :\n                                                 ShapeUtil.sizeFromDimension(inputShape, rank - 1);\n\n      const output = computeSoftmax(\n          inferenceHandler, isTransposeRequired ? transposedInputs : inputs, attributes, logicalRowCount, featureCount);\n\n      if (isTransposeRequired) {\n        const reversedOutput = transpose(inferenceHandler, output, transposeAttribute!);\n        return reversedOutput;\n      } else {\n        return output;\n      }\n    };\n\nconst computeSoftmax =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes, logicalRowCount: number,\n     featureCount: number): Tensor[] => {\n      const computeMaxProgramInfo =\n          createComputeMaxProgramInfo(inferenceHandler, inputs[0], logicalRowCount, featureCount, [logicalRowCount]);\n      const max = inferenceHandler.run(\n          {...softmaxComputeMaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeMaxProgramInfo},\n          inputs);\n\n      const computeScaleProgramInfo = createComputScaleProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          [logicalRowCount]);\n      const scale = inferenceHandler.run(\n          {...softmaxComputeScaleProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeScaleProgramInfo},\n          [inputs[0], max]);\n\n      const softMaxProgramInfo = createSoftMaxProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          computeScaleProgramInfo.output.dims);\n      const output = inferenceHandler.run(\n          {...softmaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => softMaxProgramInfo},\n          [inputs[0], max, scale]);\n      return [output];\n    };\n\n/**\n * Create a texture that contains the maximum value of each of the 'N' rows\n */\nconst createComputeMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float max = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset, ${textureWidth},\n        ${textureHeight} )));\n        for(int i=1; i<${featureCount}; ++i)\n        {\n          float current = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight})));\n          if(current > max)\n          max = current;\n        }\n\n        return max;\n      }`;\n      return {\n        ...softmaxComputeMaxProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\n/**\n * Create a texture that contains the normalization factor for each of the 'N' rows\n */\nconst createComputScaleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float norm_factor = 0.0;\n        float max = _Max(indices);\n        for(int i=0; i<${featureCount}; ++i)\n        {\n          norm_factor += exp(getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight}))) - max);\n        }\n\n        return norm_factor;\n      }`;\n      return {\n        ...softmaxComputeScaleProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createSoftMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], normalizationPerLogicalRow: readonly number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = input.dims.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1 || normalizationPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount || normalizationPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n\n      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)\n      int offset = coordsToOffset(TexCoords, ${textureWidth}, ${textureHeight});\n\n      //determine the logical row for this index\n      int logical_row_index[1];\n      logical_row_index[0] = offset / ${featureCount};\n\n      float norm_factor = _Norm(logical_row_index);\n\n      // avoid possible division by 0\n      // if norm_facor is 0, all elements are zero\n      // if so, return 0\n      if(norm_factor == 0.0)\n        return 0.0;\n\n      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;\n    }`;\n      return {\n        ...softmaxProgramMetadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Softmax requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil, SplitUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SplitAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n  readonly split: number[];\n  readonly numOutputs: number;\n}\n\nconst splitProgramMetadata = {\n  name: 'Split',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const split: OperatorImplementation<SplitAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SplitAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputs[0].dims.length);\n      const count = getProgramCount(inferenceHandler, inputs, axis, attributes);\n      const output: Tensor[] = [];\n      for (let i = 0; i < count; ++i) {\n        output.push(inferenceHandler.run(\n            {\n              ...splitProgramMetadata,\n              cacheHint: `${attributes.cacheKey};${i}`,\n              get: () => createSplitProgramInfo(inferenceHandler, inputs[0], attributes, axis, i)\n            },\n            inputs));\n      }\n\n      return output;\n    };\n\nexport const parseSplitAttributes: OperatorInitialization<SplitAttributes> = (node: Graph.Node): SplitAttributes => {\n  const axis = node.attributes.getInt('axis', 0);\n  const split = node.attributes.getInts('split', []);\n  const numOutputs = node.outputs.length;\n  return createAttributeWithCacheKey({axis, split, numOutputs});\n};\n\nconst getProgramCount =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number, attributes: SplitAttributes): number => {\n      const [, offsets] = SplitUtil.splitShape(inputs[0].dims, axis, attributes.split, attributes.numOutputs);\n      return offsets.length;\n    };\n\nconst createSplitProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SplitAttributes, axis: number, index: number):\n        ProgramInfo => {\n          const [shapes, offsets] = SplitUtil.splitShape(input.dims, axis, attributes.split, attributes.numOutputs);\n          const offset = offsets[index];\n          const outputShape = shapes[index];\n          const rank = outputShape.length;\n          const shaderSource = `\n      float process(int indices[${rank}]) {\n        indices[${axis}] += ${offset};\n        return _A(indices);\n      }\n    `;\n          return {\n            ...splitProgramMetadata,\n            cacheHint: `${attributes.cacheKey}:${index}`,\n            output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Split requires one input.');\n  }\n\n  if (inputs[0].type !== 'int8' && inputs[0].type !== 'uint8' && inputs[0].type !== 'int16' &&\n      inputs[0].type !== 'uint16' && inputs[0].type !== 'int32' && inputs[0].type !== 'uint32' &&\n      inputs[0].type !== 'float32' && inputs[0].type !== 'float64' && inputs[0].type !== 'bool') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const squeeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.squeezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const squeezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return squeeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseSqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Squeeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Squeeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const sum = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const sumProgramMetadata = {\n    name: 'Sum',\n    inputNames: inputs.map((v, i) => `X${i}`),\n    inputTypes: new Array(inputs.length).fill(TextureType.unpacked)\n  };\n\n  const output = inferenceHandler.run(\n      {...sumProgramMetadata, get: () => createSumProgramInfo(inferenceHandler, inputs, sumProgramMetadata)}, inputs);\n  return [output];\n};\n\nconst createSumProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], sumProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const outputShape = inputs[0].dims.slice();\n      const sumLine = inputs.map((v, i) => `${glsl.texture2D}(X${i},TexCoords)`).join(' + ');\n      const shaderSource = `\n      void main() {\n        vec4 result = ${sumLine};\n        ${glsl.output} = result;\n      }\n    `;\n      return {\n        ...sumProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length === 0) {\n    throw new Error('Sum requires inputs.');\n  }\n\n  const length = inputs[0].dims.length;\n  for (let i = 1; i < inputs.length; i++) {\n    if (length !== inputs[i].dims.length) {\n      throw new Error('Input shapes are mismatched.');\n    }\n\n    for (let j = 0; j < length; j++) {\n      if (inputs[0].dims[j] !== inputs[i].dims[j]) {\n        throw new Error('Input shapes are not matched.');\n      }\n    }\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n  for (let i = 1; i < inputs.length; i++) {\n    if (inputs[0].type !== inputs[i].type) {\n      throw new Error('Input types are not matched.');\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {NUMBER_TYPES} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const tile = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const tileProgramMetadata = {\n    name: 'Tile',\n    inputNames: ['A'],\n    inputTypes: [TextureType.unpacked],\n  };\n\n  const output = inferenceHandler.run(\n      {...tileProgramMetadata, get: () => createTileProgramInfo(inferenceHandler, inputs, tileProgramMetadata)},\n      inputs);\n  return [output];\n};\n\nconst createTileProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], tileProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const outputShape = new Array(inputShape.length);\n\n      const tileOps: string[] = [];\n      for (let i = 0; i < inputShape.length; i++) {\n        outputShape[i] = inputShape[i] * inputs[1].numberData[i];\n        tileOps.push(`inputIdx[${i}] = int(mod(float(outputIdx[${i}]), ${inputShape[i]}.));`);\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        int inputIdx[${rank}];\n        ${tileOps.join('\\n')}\n        return _A(inputIdx);\n      }\n    `;\n      return {\n        ...tileProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Tile requires 2 input.');\n  }\n  if (inputs[1].dims.length !== 1) {\n    throw new Error('The second input shape must 1 dimension.');\n  }\n  if (inputs[1].dims[0] !== inputs[0].dims.length) {\n    throw new Error('Invalid input shape.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invalid repeat type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface TransposeAttributes extends AttributeWithCacheKey {\n  readonly perm: number[];\n}\n\nconst transposeProgramMetadata = {\n  name: 'Transpose',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const transpose: OperatorImplementation<TransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: TransposeAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...transposeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createTransposeProgramInfo(inferenceHandler, inputs[0], attributes.perm)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseTransposeAttributes: OperatorInitialization<TransposeAttributes> =\n    (node: Graph.Node): TransposeAttributes => createAttributeWithCacheKey({perm: node.attributes.getInts('perm', [])});\n\nconst createTransposeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, perm: number[]): ProgramInfo => {\n      const inputShape = input.dims;\n      perm = getAdjustedPerm(inputShape, perm);\n      const unpackedOutputShape = getOutputShape(inputShape, perm);\n      const rank = inputShape.length;\n      // A dims=[${inputs[0].dims.toString()}]\n      // out Dims=[${unpackedOutputShape.toString()}]\n      // based on perm=[${perm.toString()}]\n      const shaderSource = `\n      ${getPermFunctionBody('perm', perm, rank)}\n      float process(int indices[${rank}]) {\n        int a[${rank}];\n        perm(a, indices);\n        return _A(a);\n      }`;\n      return {\n        ...transposeProgramMetadata,\n        output: {dims: unpackedOutputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst getAdjustedPerm = (inputShape: readonly number[], perm: number[]): number[] => {\n  if (perm && perm.length !== inputShape.length) {\n    perm = [...(inputShape.keys())].reverse();\n  }\n  return perm;\n};\n\nconst getOutputShape = (inputShape: readonly number[], perm: number[]): readonly number[] => {\n  perm = getAdjustedPerm(inputShape, perm);\n  return ShapeUtil.sortBasedOnPerm(inputShape, perm);\n};\n\nconst getPermFunctionBody = (name: string, perm: number[], rank: number): string => {\n  const reverseFunc = [];\n  reverseFunc.push(`void ${name}(out int a[${rank}], int src[${rank}]) {`);\n  for (let i = 0; i < rank; ++i) {\n    reverseFunc.push(`\\ta[${perm[i]}]=src[${i}];`);\n  }\n  reverseFunc.push('\\t}');\n  return reverseFunc.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Transpose requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('input should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {TextureData, TextureType} from '../types';\n\nexport const encodeAsUint8 = (inferenceHandler: WebGLInferenceHandler, input: TextureData): TextureData => {\n  const outputShape = input.shape;\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  /**\n   * https://github.com/tensorflow/tfjs-core/blob/master/src/kernels/webgl/encode_float_gpu.ts\n   */\n  const shaderSource = `\n    const float FLOAT_MAX = 1.70141184e38;\n    const float FLOAT_MIN = 1.17549435e-38;\n\n    bool isNaN(float val) {\n      return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;\n    }\n\n    highp vec4 encodeAsUint8(highp float v) {\n      if (isNaN(v)) {\n        return vec4(255, 255, 255, 255);\n      }\n\n      highp float av = abs(v);\n\n      if(av < FLOAT_MIN) {\n        return vec4(0.0, 0.0, 0.0, 0.0);\n      } else if(v > FLOAT_MAX) {\n        return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n      } else if(v < -FLOAT_MAX) {\n        return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n      }\n\n      highp vec4 c = vec4(0,0,0,0);\n\n      highp float e = floor(log2(av));\n      highp float m = exp2(fract(log2(av))) - 1.0;\n\n      c[2] = floor(128.0 * m);\n      m -= c[2] / 128.0;\n      c[1] = floor(32768.0 * m);\n      m -= c[1] / 32768.0;\n      c[0] = floor(8388608.0 * m);\n\n      highp float ebias = e + 127.0;\n      c[3] = floor(ebias / 2.0);\n      ebias -= c[3] * 2.0;\n      c[2] += floor(ebias) * 128.0;\n\n      c[3] += 128.0 * step(0.0, -v);\n\n      return c / 255.0;\n    }\n\n    void main() {\n      float value = ${glsl.texture2D}(X,TexCoords).r;\n      ${glsl.output} = encodeAsUint8(value);\n    }`;\n  const programInfo = {\n    name: 'Uint8Encode',\n    inputTypes: [TextureType.unpacked],\n    inputNames: ['X'],\n    output: {dims: outputShape, type: input.tensor.type, textureType: TextureType.downloadUint8AsFloat},\n    shaderSource,\n    hasMain: true\n  };\n  return inferenceHandler.executeProgram(programInfo, [input.tensor]);\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {Tensor} from '../../../tensor';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport function glslAbs(): GlslValueFunction {\n  return glslBuiltinUnary('abs');\n}\nexport function glslAcos(): GlslValueFunction {\n  return glslBuiltinUnary('acos');\n}\nexport function glslAsin(): GlslValueFunction {\n  return glslBuiltinUnary('asin');\n}\nexport function glslAtan(): GlslValueFunction {\n  return glslBuiltinUnary('atan');\n}\nexport function glslCeil(): GlslValueFunction {\n  return glslBuiltinUnary('ceil');\n}\nexport function glslCos(): GlslValueFunction {\n  return glslBuiltinUnary('cos');\n}\nexport function glslElu(alpha: number): GlslValueFunction {\n  const name = 'elu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a >= 0.0 ? a: (exp(a) - 1.0) * alpha;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslExp(): GlslValueFunction {\n  return glslBuiltinUnary('exp');\n}\nexport function glslFloor(): GlslValueFunction {\n  return glslBuiltinUnary('floor');\n}\nexport function glslClip(min: number, max: number): GlslValueFunction {\n  const name = 'clip';\n  const body = `\n  const float min = float(${min});\n  const float max = float(${max});\n\n  float ${name}_(float a) {\n    return clamp(a, min, max);\n  }\n  vec4 ${name}_(vec4 v) {\n    return clamp(v, min, max);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslIdentity(): GlslValueFunction {\n  const name = 'indentity';\n  const body = `\n  float ${name}_(float a) {\n    return a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLeakyRelu(alpha: number): GlslValueFunction {\n  const name = 'leakyRelu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a < 0.0 ? a * alpha : a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLog(): GlslValueFunction {\n  return glslBuiltinUnary('log');\n}\nexport function glslNeg(): GlslValueFunction {\n  const name = 'neg';\n  const body = `\n  float ${name}_(float a) {\n    return -a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return -v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslNot(): GlslValueFunction {\n  const name = 'not';\n  const body = `\n  float ${name}_(float a) {\n    return float( ! bool(a) );\n  }\n  bool ${name}_(bool a) {\n    return !a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));\n  }\n  bvec4 ${name}_(bvec4 v) {\n    return bvec4(!v.x, !v.y, !v.z, !v.w);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSin(): GlslValueFunction {\n  return glslBuiltinUnary('sin');\n}\nexport function glslRelu(): GlslValueFunction {\n  const name = 'relu';\n  const body = `\n  float ${name}_(float a) {\n    return max( a, 0.0 );\n  }\n  vec4 ${name}_(vec4 v) {\n    return max( v, 0.0 );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSigmoid(): GlslValueFunction {\n  const name = 'sigmoid';\n  const body = `\n  float ${name}_(float a) {\n    return 1.0 / (1.0 + exp(-a));\n  }\n  vec4 ${name}_(vec4 v) {\n    return 1.0 / (1.0 + exp(-v));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSqrt(): GlslValueFunction {\n  return glslBuiltinUnary('sqrt');\n}\nexport function glslTan(): GlslValueFunction {\n  return glslBuiltinUnary('tan');\n}\nexport function glslTanh(): GlslValueFunction {\n  const name = 'tanh';\n  const body = `\n  float ${name}_(float a) {\n    a = clamp(a, -10., 10.);\n    a = exp(2.*a);\n    return (a - 1.) / (a + 1.);\n  }\n  vec4 ${name}_(vec4 v) {\n    v = clamp(v, -10., 10.);\n    v = exp(2.*v);\n    return (v - 1.) / (v + 1.);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nfunction glslBuiltinUnary(name: string): GlslValueFunction {\n  const body = `\n  float ${name}_(float a) {\n    return ${name}(a);\n  }\n  vec4 ${name}_(vec4 v) {\n    return ${name}(v);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\n/////\n/////\n/////\n\nconst createElementwiseProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, glslFunc: GlslValueFunction):\n        ProgramInfo => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n          return {\n            ...metadata,\n            output: {dims: input.dims, type: input.type, textureType},\n            shaderSource: `\n     ${glslFunc.body}\n     void main() {\n       vec4 v = ${glsl.texture2D}(A, TexCoords);\n       v = ${glslFunc.name}_(v);\n       ${glsl.output} = v;\n     }\n     `,\n            hasMain: true\n          };\n        };\n\nconst createElementwiseProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input: Tensor, glslFunc: GlslValueFunction, cacheKey?: string):\n        ProgramInfoLoader => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const metadata = {name: glslFunc.name, inputTypes: [textureType], inputNames: ['A'], cacheHint: cacheKey};\n          return {...metadata, get: () => createElementwiseProgramInfo(handler, metadata, input, glslFunc)};\n        };\n\nexport const abs = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAbs()), inputs)];\n\nexport const acos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAcos()), inputs)];\n\nexport const asin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAsin()), inputs)];\n\nexport const atan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAtan()), inputs)];\n\nexport interface ClipAttributes extends AttributeWithCacheKey {\n  readonly min: number;\n  readonly max: number;\n}\n\nexport const clip =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ClipAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(\n            handler, inputs[0], glslClip(attributes.min, attributes.max), attributes.cacheKey),\n        inputs)];\n\nexport const parseClipAttributes = (node: Graph.Node): ClipAttributes => createAttributeWithCacheKey(\n    {min: node.attributes.getFloat('min', MIN_CLIP), max: node.attributes.getFloat('max', MAX_CLIP)});\n\nexport const clipV11 = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const attributes = generateClipAttributesFromInputs(handler, inputs);\n  return clip(handler, [inputs[0]], attributes);\n};\n\nconst generateClipAttributesFromInputs = (handler: WebGLInferenceHandler, inputs: Tensor[]): ClipAttributes => {\n  if (inputs.length >= 3 &&\n      (!handler.session.isInitializer(inputs[1].dataId) || !handler.session.isInitializer(inputs[2].dataId))) {\n    throw new Error('dynamic clip attributes are not allowed');\n  }\n\n  const min = (inputs.length >= 3) ? inputs[1].numberData[0] : MIN_CLIP;\n  const max = (inputs.length >= 3) ? inputs[2].numberData[0] : MAX_CLIP;\n  return createAttributeWithCacheKey({min, max});\n};\n\nexport const ceil = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCeil()), inputs)];\n\nexport const cos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCos()), inputs)];\n\nexport interface EluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const elu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: EluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslElu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseEluAttributes = (node: Graph.Node): EluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 1.0)});\n\nexport const exp = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslExp()), inputs)];\n\nexport const floor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslFloor()), inputs)];\n\nexport const identity = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslIdentity()), inputs)];\n\nexport interface LeakyReluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const leakyRelu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: LeakyReluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslLeakyRelu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseLeakyReluAttributes = (node: Graph.Node): LeakyReluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 0.01)});\n\nexport const log = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslLog()), inputs)];\n\nexport const neg = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNeg()), inputs)];\n\nexport const not = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNot()), inputs)];\n\nexport const relu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslRelu()), inputs)];\n\nexport const sigmoid = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSigmoid()), inputs)];\n\nexport const sin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSin()), inputs)];\n\nexport const sqrt = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSqrt()), inputs)];\n\nexport const tan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTan()), inputs)];\n\nexport const tanh = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTanh()), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst unpackProgramMetadata = {\n  name: 'unpack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const createUnpackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const rank = input.dims.length;\n\n  const channels = getChannels('rc', rank);\n  const innerDims = channels.slice(-2);\n  const coordsDataType = getCoordsDataType(rank);\n  const unpackChannel = unpackFromChannel();\n  const isScalar = (input.dims.length === 0);\n  const sourceCoords = isScalar ? '' : getSourceCoords(rank, channels);\n  const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const shaderSource = `\n    ${unpackChannel}\n    void main() {\n      ${coordsDataType} rc = getOutputCoords();\n\n       // Sample the texture with the coords to get the rgba channel value.\n       vec4 packedInput = getA(${sourceCoords});\n\n       ${glsl.output} = vec4(getChannel(packedInput, ${coords}), 0, 0, 0);\n     }\n   `;\n\n  return {\n    ...unpackProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n    shaderSource\n  };\n};\n\nexport const createUnpackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...unpackProgramMetadata, get: () => createUnpackProgramInfo(handler, input)});\n\nfunction getSourceCoords(rank: number, dims: string[]): string {\n  if (rank === 1) {\n    return 'rc';\n  }\n\n  let coords = '';\n  for (let i = 0; i < rank; i++) {\n    coords += dims[i];\n    if (i < rank - 1) {\n      coords += ',';\n    }\n  }\n  return coords;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const unsqueeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.unsqueezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const unsqueezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return unsqueeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseUnsqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Unsqueeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Unsqueeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface UpsampleAttributes extends AttributeWithCacheKey {\n  readonly opset: number;\n  readonly isResize: boolean;\n  readonly mode: string;\n  readonly scales: number[];\n  readonly extrapolationValue: number;\n  readonly coordinateTransformMode: string;\n  readonly useExtrapolation: boolean;\n  readonly needRoiInput: boolean;\n  readonly nearestMode: string;\n  readonly cubicCoefficientA: number;\n  readonly excludeOutside: boolean;\n  readonly useNearest2xOptimization: boolean;\n  readonly roiInputIdx: number;\n  readonly scalesInputIdx: number;\n  readonly sizesInputIdx: number;\n}\n\nconst upsampleProgramMetadata = {\n  name: 'Upsample',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const upsample: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...upsampleProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createUpsampleProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseUpsampleAttributesV7: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 7);\n\nexport const parseUpsampleAttributesV9: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 9);\n\nexport const parseUpsampleAttributes = (node: Graph.Node, opset: number): UpsampleAttributes => {\n  const isResize = (opset >= 10);\n\n  // processing node attributes\n  const mode = node.attributes.getString('mode', 'nearest');\n  if (mode !== 'nearest' && mode !== 'linear' && (opset < 11 || mode !== 'cubic')) {\n    throw new Error(`unrecognized mode: ${mode}`);\n  }\n\n  let scales: number[] = [];\n  if (opset < 9) {\n    scales = node.attributes.getFloats('scales');\n    scalesValidation(scales, mode, isResize);\n  }\n\n  const extrapolationValue = node.attributes.getFloat('extrapolation_value', 0.0);\n\n  const coordinateTransformMode =\n      opset > 10 ? node.attributes.getString('coordinate_transformation_mode', 'half_pixel') : 'asymmetric';\n  if ([\n        'asymmetric', 'pytorch_half_pixel', 'tf_half_pixel_for_nn', 'align_corners', 'tf_crop_and_resize', 'half_pixel'\n      ].indexOf(coordinateTransformMode) === -1) {\n    throw new Error(`coordinate_transform_mode '${coordinateTransformMode}' is not supported`);\n  }\n  const needRoiInput = (coordinateTransformMode === 'tf_crop_and_resize');\n  const useExtrapolation = needRoiInput;\n\n  const nearestMode =\n      (mode === 'nearest' && opset >= 11) ? node.attributes.getString('nearest_mode', 'round_prefer_floor') : '';\n  if (['round_prefer_floor', 'round_prefer_ceil', 'floor', 'ceil', ''].indexOf(nearestMode) === -1) {\n    throw new Error(`nearest_mode '${nearestMode}' is not supported`);\n  }\n\n  const cubicCoefficientA = node.attributes.getFloat('cubic_coeff_a', -0.75);\n  const excludeOutside = node.attributes.getInt('exclude_outside', 0) !== 0;\n  if (excludeOutside && mode !== 'cubic') {\n    throw new Error('exclude_outside can be set to 1 only when mode is CUBIC.');\n  }\n\n  const useNearest2xOptimization =\n      (opset < 11) ? true : (mode === 'nearest' && coordinateTransformMode === 'asymmetric' && nearestMode === 'floor');\n\n  let roiInputIdx = 0;\n  let scalesInputIdx = 0;\n  let sizesInputIdx = 0;\n\n  if (opset > 10) {\n    // handle when roiInput is not given\n    if (node.inputs.length > 2) {\n      roiInputIdx = 1;\n      scalesInputIdx = 2;\n      sizesInputIdx = 3;\n    } else {\n      scalesInputIdx = 1;\n      sizesInputIdx = 2;\n    }\n  } else if (opset === 9) {\n    scalesInputIdx = 1;\n  }\n\n  return createAttributeWithCacheKey({\n    opset,\n    isResize,\n    mode,\n    scales,\n    extrapolationValue,\n    coordinateTransformMode,\n    useExtrapolation,\n    needRoiInput,\n    nearestMode,\n    cubicCoefficientA,\n    excludeOutside,\n    useNearest2xOptimization,\n    roiInputIdx,\n    scalesInputIdx,\n    sizesInputIdx\n  });\n};\n\nconst createUpsampleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [inputWidth, inputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(inputs[0].dims, TextureType.unpacked);\n\n      const outputShape = inputs[0].dims.map((dim, i) => Math.floor(dim * attributes.scales[i]));\n      const [outputWidth, outputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(outputShape, TextureType.unpacked);\n      const dim = outputShape.length;\n\n      const outputPitches = new Array<number>(dim);\n      const inputPitches = new Array<number>(dim);\n      let precalculatedPitches = `\n      int output_pitches[${dim}];\n      int input_pitches[${dim}];\n      `;\n      for (let d = dim - 1; d >= 0; d--) {\n        outputPitches[d] = (d === dim - 1) ? 1 : outputPitches[d + 1] * outputShape[d + 1];\n        inputPitches[d] = (d === dim - 1) ? 1 : inputPitches[d + 1] * inputs[0].dims[d + 1];\n\n        precalculatedPitches += `\n        output_pitches[${d}] = ${outputPitches[d]};\n        input_pitches[${d}] = ${inputPitches[d]};\n        `;\n      }\n      const getInputFloatFunction = `\n      float getInputFloat(int index) {\n        vec2 coords = offsetToCoords(index, ${inputWidth}, ${inputHeight});\n        float value = getColorAsFloat(${glsl.texture2D}(X, coords));\n        return value;\n      }\n      `;\n\n      const shaderSource = attributes.mode === 'nearest' ?\n          // nearest\n          `\n    ${getInputFloatFunction}\n    float process(int indices[${dim}]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int d, m;\n      for (int dim = 0; dim < ${dim}; ++dim) {\n        d = output_index / output_pitches[dim];\n        m = output_index - d * output_pitches[dim];\n        output_index = m;\n\n        if (scales[dim] != 1 && d > 0) {\n          int d2 = d / scales[dim];\n          m = d - d2 * scales[dim];\n          d = d2;\n        }\n        input_index += input_pitches[dim] * d;\n      }\n\n      return getInputFloat(input_index);\n    }` :\n          dim === 4 ?\n          // bilinear 4D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[4]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1, index_of_dim2, index_of_dim3;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m / output_pitches[1];\n      m = m - index_of_dim1 * output_pitches[1];\n      index_of_dim2 = m / output_pitches[2];\n      m = m - index_of_dim2 * output_pitches[2];\n      index_of_dim3 = m;\n\n      int index_of_input_dim2, index_of_input_dim3, x_offset, y_offset;\n      index_of_input_dim2 = index_of_dim2 / scales[2];\n      y_offset = index_of_dim2 - index_of_input_dim2 * scales[2];\n      index_of_input_dim3 = index_of_dim3 / scales[3];\n      x_offset = index_of_dim3 - index_of_input_dim3 * scales[3];\n\n      input_index = index_of_dim0 * input_pitches[0] +\n            index_of_dim1 * input_pitches[1] +\n            index_of_input_dim2 * input_pitches[2] +\n            index_of_input_dim3;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim2 = false;\n      if (index_of_input_dim2 == (${inputs[0].dims[2]} - 1)) {\n        // It's the end in dimension 2\n        x01 = x00;\n        end_of_dim2 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[2]);\n      }\n\n      if (index_of_input_dim3 == (input_pitches[2] - 1)) {\n        // It's the end in dimension 3\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim2 ? x10 : getInputFloat(input_index + input_pitches[2] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[2]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[2]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[3]);\n    }` :\n              // bilinear 2D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[2]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m;\n\n      int index_of_input_dim0, index_of_input_dim1, x_offset, y_offset;\n      index_of_input_dim0 = index_of_dim0 / scales[0];\n      y_offset = index_of_dim0 - index_of_input_dim0 * scales[0];\n      index_of_input_dim1 = index_of_dim1 / scales[1];\n      x_offset = index_of_dim1 - index_of_input_dim1 * scales[1];\n\n      input_index = index_of_input_dim0 * input_pitches[0] + index_of_input_dim1;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim0 = false;\n      if (index_of_input_dim0 == (${inputs[0].dims[0]} - 1)) {\n        // It's the end in dimension 0\n        x01 = x00;\n        end_of_dim0 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[0]);\n      }\n\n      if (index_of_input_dim1 == (input_pitches[0] - 1)) {\n        // It's the end in dimension 1\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim0 ? x10 : getInputFloat(input_index + input_pitches[0] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[0]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[0]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[1]);\n    }`;\n      return {\n        ...upsampleProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        variables: [{\n          name: 'scales',\n          type: 'int',\n          arrayLength: attributes.scales.length,\n          data: attributes.scales.map(x => Math.ceil(x))\n        }]\n      };\n    };\n\nexport const validateInputs = (inputs: Tensor[], attribute: UpsampleAttributes): void => {\n  if (!inputs || (attribute.opset < 9 && inputs.length !== 1) ||\n      (attribute.opset >= 9 && attribute.opset < 11 && inputs.length !== 2) ||\n      (attribute.opset >= 11 && inputs.length < 2)) {\n    throw new Error('invalid inputs.');\n  }\n\n  if (attribute.scales.length > 0 && inputs[0].dims.length !== attribute.scales.length) {\n    throw new Error('Invalid input shape.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input tensor types.');\n  }\n};\n\nexport const scalesValidation = (scales: number[], mode: string, isResize: boolean): void => {\n  if (!isResize) {\n    for (const scale of scales) {\n      if (scale < 1) {\n        throw new Error('Scale value should be greater than or equal to 1.');\n      }\n    }\n  } else {\n    for (const scale of scales) {\n      if (scale <= 0) {\n        throw new Error('Scale value should be greater than 0.');\n      }\n    }\n  }\n  if (mode === 'linear' || mode === 'cubic') {\n    if (scales.length !== 2 && (scales.length !== 4 || scales[0] !== 1 || scales[1] !== 1)) {\n      throw new Error(`'Linear' mode and 'Cubic' mode only support 2-D inputs ('Bilinear', 'Bicubic') \\\n        or 4-D inputs with the corresponding outermost 2 scale values being 1 \\\n        in the ${isResize ? 'Resize' : 'Upsample'} opeartor.`);\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {Logger, Profiler} from '../../instrument';\n\nimport {GlslPreprocessor} from './glsl-preprocessor';\nimport {getVertexShaderSource} from './glsl-source';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {Artifact, ProgramInfo, ProgramVariable, TextureData, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * ProgramManager is the main class behind running computations\n * It builds ProgramInfo's into Artifacts\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\n * Uses the artifact to run the computation by calling Draw on\n * the WebGL drawing buffer\n * ProgramManager automatically maps (binds) input variables to their\n * corresponding Location's in the binary program\n */\nexport class ProgramManager {\n  repo: Map<unknown, Artifact>;  // this should be per-session object\n  vertexShader: WebGLShader;\n  attributesBound: boolean;\n\n  constructor(\n      public profiler: Readonly<Profiler>, public glContext: WebGLContext,\n      public textureLayoutStrategy: TextureLayoutStrategy) {\n    this.repo = new Map();\n    this.attributesBound = false;\n  }\n  getArtifact(key: unknown): Artifact|undefined {\n    return this.repo.get(key);\n  }\n  setArtifact(key: unknown, artifact: Artifact): void {\n    this.repo.set(key, artifact);\n  }\n  run(buildArtifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    this.profiler.event('op', `ProgramManager.run ${buildArtifact.programInfo.name ?? 'unknown kernel'}`, () => {\n      const gl = this.glContext.gl;\n      const program = buildArtifact.program;\n      gl.useProgram(program);\n      try {\n        this.bindOutput(output);\n        if (!this.attributesBound) {\n          this.bindAttributes(buildArtifact.attribLocations);\n        }\n        this.bindUniforms(buildArtifact.uniformLocations, buildArtifact.programInfo.variables ?? [], inputs);\n      } catch (err) {\n        Logger.error('ProgramManager', buildArtifact.programInfo.shaderSource);\n        throw err;\n      }\n      this.profiler.event('backend', 'GlContext.draw()', () => {\n        this.glContext.draw();\n      });\n    }, this.glContext);\n  }\n  dispose(): void {\n    if (this.vertexShader) {\n      this.glContext.deleteShader(this.vertexShader);\n    }\n    this.repo.forEach(a => this.glContext.deleteProgram(a.program));\n  }\n  build(programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[], outputTextureLayout: TextureLayout): Artifact {\n    return this.profiler.event('backend', 'ProgramManager.build', () => {\n      const preprocessor = new GlslPreprocessor(this.glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n      const fragScript = preprocessor.preprocess();\n      const program = this.compile(fragScript);\n      const artifact = {\n        programInfo,\n        program,\n        uniformLocations: this.getUniformLocations(\n            program, preprocessor.context.programInfo.inputNames, preprocessor.context.programInfo.variables),\n        attribLocations: this.getAttribLocations(program)\n      };\n      return artifact;\n    });\n  }\n  protected compile(fragShaderScript: string): WebGLProgram {\n    if (!this.vertexShader) {\n      Logger.verbose('ProrgramManager', 'Compiling and caching Vertex shader for the first time');\n      const vertexShaderScript = getVertexShaderSource(this.glContext.version);\n      this.vertexShader = this.glContext.compileShader(vertexShaderScript, this.glContext.gl.VERTEX_SHADER);\n    }\n    if (env.debug) {\n      Logger.verbose('ProrgramManager', `FragShader:\n${fragShaderScript}\n`);\n    }\n    const fragShader = this.glContext.compileShader(fragShaderScript, this.glContext.gl.FRAGMENT_SHADER);\n    const program = this.glContext.createProgram(this.vertexShader, fragShader);\n    this.glContext.deleteShader(fragShader);\n    return program;\n  }\n  bindOutput(td: TextureData): void {\n    const width = td.width;\n    const height = td.height;\n    Logger.verbose(\n        'ProrgramManager',\n        `Binding output texture to Framebuffer: w/h=${width}/${height}, shape=${td.shape}, type=${td.tensor.type}`);\n    this.glContext.attachFramebuffer(td.texture, width, height);\n  }\n  bindAttributes(attribLocations: Artifact.AttribLocations): void {\n    const positionHandle = attribLocations.position;\n    const textureCoordHandle = attribLocations.textureCoord;\n    this.glContext.setVertexAttributes(positionHandle, textureCoordHandle);\n    this.attributesBound = true;\n  }\n  bindUniforms(uniformLocations: Artifact.UniformLocations, variables: ProgramVariable[], textures: TextureData[]):\n      void {\n    const gl = this.glContext.gl;\n    let texturePosition = 0;\n    for (const {name, type, location, arrayLength} of uniformLocations) {\n      const value = variables.find(v => v.name === name)?.data;\n      if (type !== 'sampler2D' && !value) {\n        throw new Error(`variable '${name}' does not have data defined in program info`);\n      }\n      switch (type) {\n        case 'sampler2D':\n          this.bindTexture(textures[texturePosition], location, texturePosition);\n          texturePosition++;\n          break;\n        case 'float':\n          if (arrayLength) {\n            gl.uniform1fv(location, value as number[]);\n          } else {\n            gl.uniform1f(location, value as number);\n          }\n          break;\n        case 'int':\n          if (arrayLength) {\n            gl.uniform1iv(location, value as number[]);\n          } else {\n            gl.uniform1i(location, value as number);\n          }\n          break;\n        default:\n          throw new Error(`Uniform not implemented: ${type}`);\n      }\n    }\n  }\n  bindTexture(td: TextureData, uniformHandle: WebGLUniformLocation, position: number): void {\n    this.glContext.bindTextureToUniform(td.texture, position, uniformHandle);\n  }\n  getAttribLocations(program: WebGLProgram): Artifact.AttribLocations {\n    return {\n      position: this.getAttribLocation(program, 'position'),\n      textureCoord: this.getAttribLocation(program, 'textureCoord')\n    };\n  }\n  getUniformLocations(program: WebGLProgram, samplers?: string[], variables?: VariableInfo[]):\n      Artifact.UniformLocations {\n    const uniformLocations: Artifact.UniformLocations = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLocations.push({name: sampler, type: 'sampler2D', location: this.getUniformLocation(program, sampler)});\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLocations.push({...variable, location: this.getUniformLocation(program, variable.name)});\n      }\n    }\n    return uniformLocations;\n  }\n  getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation {\n    const gl = this.glContext.gl;\n    const reference = gl.getUniformLocation(program, name);\n    if (reference === null) {\n      throw new Error(`Uniform ${name} not found.`);\n    }\n    return reference;\n  }\n  getAttribLocation(program: WebGLProgram, name: string): number {\n    const gl = this.glContext.gl;\n    const attributeLocation: number = gl.getAttribLocation(program, name);\n    return attributeLocation;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from '../../backend';\nimport {Graph} from '../../graph';\nimport {Logger} from '../../instrument';\nimport {Operator} from '../../operators';\nimport {OpSet, resolveOperator} from '../../opset';\nimport {Session} from '../../session';\nimport {Tensor} from '../../tensor';\nimport {WebGLBackend} from '../backend-webgl';\n\nimport {WebGLInferenceHandler} from './inference-handler';\nimport {WEBGL_OP_RESOLVE_RULES} from './op-resolve-rules';\nimport {ProgramManager} from './program-manager';\nimport {PreferLogicalStrategy, TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureManager} from './texture-manager';\nimport {TextureData} from './types';\n\nexport class WebGLSessionHandler implements SessionHandler {\n  programManager: ProgramManager;\n  textureManager: TextureManager;\n  layoutStrategy: TextureLayoutStrategy;\n  packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  pack2unpackMap: Map<Tensor.Id, Tensor.Id>;\n  unpack2packMap: Map<Tensor.Id, Tensor.Id>;\n  initializers: Set<Tensor.Id>;\n  pack?: boolean;\n\n  constructor(public readonly backend: WebGLBackend, public readonly context: Session.Context) {\n    this.layoutStrategy = new PreferLogicalStrategy(backend.glContext.maxTextureSize);\n    this.programManager = new ProgramManager(this.context.profiler, backend.glContext, this.layoutStrategy);\n    this.textureManager = new TextureManager(\n        backend.glContext, this.layoutStrategy, this.context.profiler,\n        {reuseTextures: backend.textureCacheMode === 'full'});\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n    this.pack = backend.pack;\n    this.pack2unpackMap = new Map();\n    this.unpack2packMap = new Map();\n  }\n\n  createInferenceHandler() {\n    return new WebGLInferenceHandler(this);\n  }\n  onGraphInitialized(graph: Graph): void {\n    const initializers = graph.getValues().filter(v => v.from === -1 && v.tensor).map(v => v.tensor!.dataId);\n    this.initializers = new Set(initializers);\n  }\n  isInitializer(tensorId: Tensor.Id): boolean {\n    return this.initializers ? this.initializers.has(tensorId) : false;\n  }\n  addInitializer(tensorId: Tensor.Id): void {\n    this.initializers.add(tensorId);\n  }\n  getTextureData(tensorId: Tensor.Id, isPacked: boolean): TextureData|undefined {\n    if (isPacked) {\n      return this.packedTextureDataCache.get(tensorId);\n    } else {\n      return this.unpackedTextureDataCache.get(tensorId);\n    }\n  }\n  setTextureData(tensorId: Tensor.Id, textureData: TextureData, isPacked = false): void {\n    Logger.verbose('WebGLSessionHandler', 'Storing Texture data in cache');\n    if (isPacked) {\n      this.packedTextureDataCache.set(tensorId, textureData);\n    } else {\n      this.unpackedTextureDataCache.set(tensorId, textureData);\n    }\n  }\n  dispose(): void {\n    this.programManager.dispose();\n    this.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.unpackedTextureDataCache = new Map();\n  }\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator {\n    const op = resolveOperator(node, opsets, WEBGL_OP_RESOLVE_RULES);\n    return {impl: op.opImpl, context: op.opInit ? op.opInit(node, graph) : node};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nexport declare namespace Encoder {\n  export interface DataTypeMap {\n    float: Float32Array;\n    byte: Uint8Array;\n    int: Uint32Array;\n  }\n  export type DataType = keyof DataTypeMap;\n  type DataArrayType = DataTypeMap[DataType];\n\n  /* eslint-disable @typescript-eslint/naming-convention */\n  export const enum Usage {\n    Default = 0,\n    UploadOnly,\n    Download4BytesAsFloat32,\n  }\n}\n\n/**\n * Abstraction for mapping data types to texture texlets\n * Encoding means how a Float32 is mapped to 1 or 4 channels for each texlet\n * Decoding means how a texlet's channels are mapped to a resulting Float32\n */\nexport interface DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType;\n  allocate(size: number): Encoder.DataArrayType;\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Encoder.DataArrayType;\n}\n/**\n * WebGL2 data encoder\n * Uses R32F as the format for texlet\n */\nexport class RedFloat32DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGL2RenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.R32F;\n      this.format = gl.RED;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA32F;\n      this.format = gl.RGBA;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType {\n    let result: Float32Array;\n    let source: Float32Array;\n    if (src.constructor !== Float32Array) {\n      Logger.warning('Encoder', 'data was not of type Float32; creating new Float32Array');\n      source = new Float32Array(src);\n    }\n    if (textureSize * this.channelSize > src.length) {\n      Logger.warning('Encoder', 'Source data too small. Allocating larger array');\n      source = src as Float32Array;\n      result = this.allocate(textureSize * this.channelSize) as Float32Array;\n      source.forEach((v, i) => result[i] = v);\n    } else {\n      source = src as Float32Array;\n      result = source;\n    }\n    return result;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n/**\n * Data encoder for WebGL 1 with support for floating point texture\n */\nexport class RGBAFloatDataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGLRenderingContext, channels = 1, textureType?: number) {\n    if (channels !== 1 && channels !== 4) {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n    this.internalFormat = gl.RGBA;\n    this.format = gl.RGBA;\n    this.channelSize = channels;\n    this.textureType = textureType || gl.FLOAT;\n  }\n  encode(src: Float32Array, textureSize: number): Encoder.DataArrayType {\n    let dest = src;\n    if (this.channelSize === 1) {\n      Logger.verbose('Encoder', 'Exploding into a larger array');\n      dest = this.allocate(textureSize) as Float32Array;\n      src.forEach((v, i) => dest[i * 4] = v);\n    }\n    return dest;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n\nexport class Uint8DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize = 4;\n  constructor(gl: WebGLRenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.ALPHA;\n      this.format = gl.ALPHA;  // not tested\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA;\n      this.format = gl.RGBA;\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Uint8Array, _textureSize: number): Encoder.DataArrayType {\n    return new Uint8Array(src.buffer, src.byteOffset, src.byteLength);\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Uint8Array(size * this.channelSize);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Uint8Array {\n    if (buffer instanceof Uint8Array) {\n      return buffer.subarray(0, dataSize);\n    }\n    throw new Error(`Invalid array type: ${buffer.constructor}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\nimport {assert} from '../../util';\n\n/** Layout preferences */\nexport interface WidthHeightPrefs {\n  breakAxis?: number;\n  isPacked?: boolean;\n  reverseWH?: boolean;\n}\n/**\n * TextureLayoutStrategy is an abstraction for different plans\n * for mapping n-dimensional arrays to 2D textures (and back)\n */\nexport interface TextureLayoutStrategy {\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number];\n}\n\n/**\n * This strategy try to find the minimal max(W,H) that fulfills (W * H == totalSize)\n */\nexport class AlwaysKeepOriginalSizeStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    // scalar tensor\n    if (shape.length === 0) {\n      return [1, 1];\n    }\n    const maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    const totalSize = shape.reduce((a, b) => a * b);\n\n    let width = Math.floor(Math.sqrt(totalSize));\n\n    for (; width < maxTextureSize && width < totalSize; width++) {\n      if (totalSize % width === 0) {\n        break;\n      }\n    }\n\n    if (width >= maxTextureSize || totalSize % width !== 0) {\n      throw new Error(`The given dimensions are outside this GPU's boundaries: ${shape}`);\n    }\n    return [width, totalSize / width];\n  }\n}\n\nexport class PreferLogicalStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const wh = this.computeTexture(shape, prefs);\n    if (prefs && prefs.isPacked) {\n      wh[0] /= 2;\n      wh[1] /= 2;\n    }\n    if (prefs && prefs.reverseWH) {\n      return [wh[1], wh[0]];\n    }\n    return wh;\n  }\n\n  computeTexture(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const isPacked = prefs && prefs.isPacked;\n    // scalar tensor\n    if (shape.length === 0) {\n      return isPacked ? [2, 2] : [1, 1];\n    }\n    let maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    let logShape = shape.slice(0);\n    if (isPacked) {\n      maxTextureSize = maxTextureSize * 2;\n\n      // This logic ensures we accurately count the number of packed texels needed\n      // to accommodate the tensor. We can only pack values in the same texel if\n      // they are from adjacent pairs of rows/cols within the same batch. So if a\n      // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n      // fact that the texels containing the third row are half empty.\n      logShape = logShape.map(\n          (d, i) => i >= logShape.length - 2 ? (logShape[i] % 2 === 0 ? logShape[i] : logShape[i] + 1) : logShape[i]);\n\n      // Packed texture height is at least 2 (the channel height of a single\n      // texel).\n      if (logShape.length === 1) {\n        logShape = [2, logShape[0]];\n      }\n    }\n\n    // If logical shape is 2, we don't squeeze, since we want to match physical.\n    if (logShape.length !== 2) {\n      const squeezeResult = squeezeShape(logShape);\n      logShape = squeezeResult.newShape;\n    }\n\n    const size = sizeFromShape(logShape);\n    if (logShape.length <= 1 && size <= maxTextureSize) {\n      return [1, size];\n    } else if (logShape.length === 2 && logShape[0] <= maxTextureSize && logShape[1] <= maxTextureSize) {\n      return logShape as [number, number];\n    } else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTextureSize && logShape[2] <= maxTextureSize) {\n      return [logShape[0] * logShape[1], logShape[2]];\n    } else if (logShape.length === 3 && logShape[0] <= maxTextureSize && logShape[1] * logShape[2] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2]];\n    } else if (\n        logShape.length === 4 && logShape[0] * logShape[1] * logShape[2] <= maxTextureSize &&\n        logShape[3] <= maxTextureSize) {\n      return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n    } else if (\n        logShape.length === 4 && logShape[0] <= maxTextureSize &&\n        logShape[1] * logShape[2] * logShape[3] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n    } else {\n      if (isPacked) {\n        // For packed textures size equals the number of channels required to\n        // accommodate the texture data. However in order to squarify such that\n        // inner dimensions stay even, we rewrite size to equal the number of\n        // texels. Then in the return statement we rehydrate the squarified\n        // dimensions to channel units.\n        return sizeToSquarishShape(size / 4).map(d => d * 2) as [number, number];\n      }\n      return sizeToSquarishShape(size);\n    }\n  }\n}\n\nexport function squeezeShape(shape: number[], axis?: number[]): {newShape: number[]; keptDims: number[]} {\n  const newShape: number[] = [];\n  const keptDims: number[] = [];\n  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\n  const axes = (axis == null || isEmptyArray) ? null : parseAxisParam(axis, shape).sort();\n  let j = 0;\n  for (let i = 0; i < shape.length; ++i) {\n    if (axes != null) {\n      if (axes[j] === i && shape[i] !== 1) {\n        throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\n      }\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\n        newShape.push(shape[i]);\n        keptDims.push(i);\n      }\n      if (axes[j] <= i) {\n        j++;\n      }\n    }\n    if (shape[i] !== 1) {\n      newShape.push(shape[i]);\n      keptDims.push(i);\n    }\n  }\n  return {newShape, keptDims};\n}\n\nexport function parseAxisParam(axis: number|number[], shape: number[]): number[] {\n  const rank = shape.length;\n\n  // Normalize input\n  axis = axis == null ? shape.map((s, i) => i) : ([] as number[]).concat(axis);\n\n  // Check for valid range\n  assert(\n      axis.every(ax => ax >= -rank && ax < rank),\n      () => `All values in axis param must be in range [-${rank}, ${rank}) but ` +\n          `got axis ${axis}`);\n\n  // Check for only integers\n  assert(\n      axis.every(isInt),\n      () => 'All values in axis param must be integers but ' +\n          `got axis ${axis}`);\n\n  // Handle negative axis.\n  return axis.map(a => a < 0 ? rank + a : a);\n}\nexport function isInt(a: number): boolean {\n  return a % 1 === 0;\n}\nexport function sizeFromShape(shape: number[]): number {\n  if (shape.length === 0) {\n    // Scalar.\n    return 1;\n  }\n  let size = shape[0];\n  for (let i = 1; i < shape.length; i++) {\n    size *= shape[i];\n  }\n  return size;\n}\nexport function getRowsCols(shape: number[]): [number, number] {\n  if (shape.length === 0) {\n    throw Error('Cannot get rows and columns of an empty shape array.');\n  }\n\n  return [shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\nexport function sizeToSquarishShape(size: number): [number, number] {\n  const width = Math.ceil(Math.sqrt(size));\n  return [width, Math.ceil(size / width)];\n}\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\n  return sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ShapeUtil} from '../../util';\n\nimport {TextureLayoutStrategy, WidthHeightPrefs} from './texture-layout-strategy';\nimport {TextureLayout, TextureType} from './types';\n\nexport const createTextureLayoutFromTextureType =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[],\n     textureType: TextureType): TextureLayout => {\n      const channel = (textureType === TextureType.unpacked || textureType === TextureType.unpackedReversed) ? 1 : 4;\n      const isPacked = textureType === TextureType.packed;\n      const reverseWH = (textureType === TextureType.unpackedReversed || textureType === TextureType.packed);\n      const breakAxis = textureType === TextureType.packedLastDimension ? shape.length - 1 : undefined;\n      const unpackedShape = textureType === TextureType.packedLastDimension ?\n          shape.map((d, i) => i === shape.length - 1 ? d * 4 : d) :\n          undefined;\n      return createTextureLayoutFromShape(\n          textureLayoutStrategy, shape, channel, unpackedShape, {isPacked, reverseWH, breakAxis});\n    };\n\nexport const calculateTextureWidthAndHeight =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], textureType: TextureType):\n        [number, number] => {\n          const layout = createTextureLayoutFromTextureType(textureLayoutStrategy, shape, textureType);\n          return [layout.width, layout.height];\n        };\n\n/**\n * Create a TextureLayout object from shape.\n */\nexport const createTextureLayoutFromShape =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], channels: 1|4 = 1,\n     unpackedShape?: readonly number[], prefs?: WidthHeightPrefs): TextureLayout => {\n      const isPacked = !!(prefs && prefs.isPacked);\n      const [width, height] = textureLayoutStrategy.computeTextureWH(isPacked ? unpackedShape || shape : shape, prefs);\n      const rank = shape.length;\n      let inferredDims = shape.slice(0);\n      if (rank === 0) {\n        inferredDims = [1];\n      }\n      if (channels === 1) {\n        // unpackedShape will take `shape` and not `inferredDims` so as to create a scalar Tensor if need be\n        unpackedShape = shape;\n      } else if (isPacked) {\n        if (channels !== 4) {\n          throw new Error('a packed texture must be 4-channel');\n        }\n        unpackedShape = shape;\n        if (rank > 0) {\n          inferredDims[rank - 1] = Math.ceil(inferredDims[rank - 1] / 2);\n        }\n        if (rank > 1) {\n          inferredDims[rank - 2] = Math.ceil(inferredDims[rank - 2] / 2);\n        }\n      } else if (!unpackedShape) {\n        throw new Error('Unpacked shape is needed when using channels > 1');\n      }\n      return {\n        width,\n        height,\n        channels,\n        isPacked,\n        shape: inferredDims,\n        strides: ShapeUtil.computeStrides(inferredDims),\n        unpackedShape,\n        reversedWH: (prefs && prefs.reverseWH)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger, Profiler} from '../../instrument';\nimport {Tensor} from '../../tensor';\n\nimport {Encoder} from './texture-data-encoder';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureData, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\nexport interface TextureManagerConfig {\n  reuseTextures?: boolean;\n}\n\n/**\n * TextureManager is the mainly responsible for caching Textures\n * Textures are cached in 2 levels:\n *   1. the texures which are associated with a dataId (from Tensor)\n *    Caching these is crucial to performance. These are In-use Textures\n *   2. textures which are not in use by any current ProgramInfo/Tensor\n *     These are called Free Textures\n * TextureManager is also used to help creating textures. For this it\n * uses WebGLContext and TextureLayoutStrategy\n */\nexport class TextureManager {\n  private readonly inUseTextures: Map<string, WebGLTexture[]>;\n  private readonly idleTextures: Map<string, WebGLTexture[]>;\n  private readonly textureLookup: Map<WebGLTexture, string>;\n  private readonly pendingRead: Map<Tensor.Id, Array<(arr: Tensor.NumberType) => void>> = new Map();\n\n  constructor(\n      public glContext: WebGLContext, public layoutStrategy: TextureLayoutStrategy, public profiler: Readonly<Profiler>,\n      private config: TextureManagerConfig) {\n    if (config.reuseTextures) {\n      this.inUseTextures = new Map();\n      this.idleTextures = new Map();\n      this.textureLookup = new Map();\n    }\n  }\n  createTextureFromLayout(\n      dataType: Tensor.DataType, layout: TextureLayout, data?: Tensor.NumberType, usage?: Encoder.Usage) {\n    const textureDataType = this.toEncoderType(dataType);\n\n    const encoder = this.glContext.getEncoder(textureDataType, layout.channels || 1, usage);\n    if (layout.isPacked && usage === Encoder.Usage.UploadOnly) {\n      throw new Error('not implemented');\n    }\n    const width = layout.width;\n    const height = layout.height;\n\n    let key: string|undefined;\n    let inUseTextures: WebGLTexture[]|undefined;\n    if (this.config.reuseTextures) {\n      key = `${width}x${height}_${encoder.format}_${encoder.internalFormat}_${encoder.textureType}`;\n      inUseTextures = this.inUseTextures.get(key);\n      if (!inUseTextures) {\n        inUseTextures = [];\n        this.inUseTextures.set(key, inUseTextures);\n      }\n\n      const idleTextures = this.idleTextures.get(key);\n      if (idleTextures && idleTextures.length > 0) {\n        const texture = idleTextures.pop()!;\n        inUseTextures.push(texture);\n        if (usage === Encoder.Usage.UploadOnly) {\n          this.glContext.updateTexture(texture, width, height, encoder, this.toTextureData(dataType, data)!);\n        }\n        return texture;\n      }\n    }\n\n    Logger.verbose('TextureManager', `Creating new texture of size ${layout.width}x${layout.height}`);\n    const texture = this.glContext.allocateTexture(width, height, encoder, this.toTextureData(dataType, data));\n\n    if (this.config.reuseTextures) {\n      inUseTextures!.push(texture);\n      this.textureLookup.set(texture, key!);\n    }\n    return texture;\n  }\n  readTexture(td: TextureData, dataType: Tensor.DataType, channels?: number): Tensor.NumberType {\n    if (!channels) {\n      channels = 1;\n    }\n    return this.profiler.event('backend', 'TextureManager.readTexture', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      return this.toTensorData(dataType, data);\n    });\n  }\n  async readTextureAsync(td: TextureData, dataType: Tensor.DataType, channels?: number): Promise<Tensor.NumberType> {\n    const dataId = td.tensor.dataId;\n    if (!channels) {\n      channels = 1;\n    }\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<Tensor.NumberType>(resolve => subscribers?.push(resolve));\n    }\n    return this.profiler.event('backend', 'TextureManager.readTextureAsync', async () => {\n      this.pendingRead.set(dataId, []);\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      // add a fence waiting for the data to be ready\n      await this.glContext.createAndWaitForFence();\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      const tensorData = this.toTensorData(dataType, data);\n      const subscribers = this.pendingRead.get(dataId);\n      this.pendingRead.delete(dataId);\n      subscribers?.forEach(resolve => resolve(tensorData));\n      return tensorData;\n    });\n  }\n  readUint8TextureAsFloat(td: TextureData): Float32Array {\n    return this.profiler.event('backend', 'TextureManager.readUint8TextureAsFloat', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b);\n      const data = this.glContext.readTexture(td.texture, td.width, td.height, dataSize * 4, 'byte', 4);\n      return new Float32Array(data.buffer, data.byteOffset, dataSize);\n    });\n  }\n  releaseTexture(textureData: TextureData, deleteTexture?: boolean): void {\n    let key: string|undefined;\n    if (this.config.reuseTextures) {\n      key = this.textureLookup.get(textureData.texture);\n      if (key) {\n        if (deleteTexture) {\n          this.textureLookup.delete(key);\n        }\n        const inUseTextures = this.inUseTextures.get(key);\n        if (inUseTextures) {\n          const index = inUseTextures.indexOf(textureData.texture);\n          if (index !== -1) {\n            inUseTextures.splice(index, 1);\n            let idleTextures = this.idleTextures.get(key);\n            if (!idleTextures) {\n              idleTextures = [];\n              this.idleTextures.set(key, idleTextures);\n            }\n            idleTextures.push(textureData.texture);\n          }\n        }\n      }\n    }\n\n    if (!key || deleteTexture) {\n      Logger.verbose('TextureManager', `Deleting texture of size ${textureData.width}x${textureData.height}`);\n      this.glContext.deleteTexture(textureData.texture);\n    }\n  }\n  toTensorData(dataType: Tensor.DataType, data: Encoder.DataArrayType): Tensor.NumberType {\n    switch (dataType) {\n      case 'int16':\n        return data instanceof Int16Array ? data : Int16Array.from(data);\n      case 'int32':\n        return data instanceof Int32Array ? data : Int32Array.from(data);\n      case 'int8':\n        return data instanceof Int8Array ? data : Int8Array.from(data);\n      case 'uint16':\n        return data instanceof Uint16Array ? data : Uint16Array.from(data);\n      case 'uint32':\n        return data instanceof Uint32Array ? data : Uint32Array.from(data);\n      case 'uint8':\n      case 'bool':\n        return data instanceof Uint8Array ? data : Uint8Array.from(data);\n      case 'float32':\n        return data instanceof Float32Array ? data : Float32Array.from(data);\n      case 'float64':\n        return data instanceof Float64Array ? data : Float64Array.from(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n  }\n  toTextureData(dataType: Tensor.DataType, data: Tensor.NumberType|undefined): Encoder.DataArrayType|undefined {\n    if (!data) {\n      return undefined;\n    }\n    return (data instanceof Float32Array) ? data : new Float32Array(data);\n    /*\n    switch (dataType) {\n      case 'int16':\n      case 'int32':\n      case 'uint16':\n      case 'uint32':\n        return (data.constructor === Uint32Array) ? data as Uint32Array : new Uint32Array(data);\n      case 'int8':\n      case 'uint8':\n      case 'bool':\n        return (data.constructor === Uint8Array) ? data as Uint8Array : new Uint8Array(data);\n      case 'float32':\n      case 'float64':\n        return (data.constructor === Float32Array) ? data as Float32Array : new Float32Array(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n    */\n  }\n  toEncoderType(_dataType: Tensor.DataType): Encoder.DataType {\n    return 'float';\n    // switch (dataType) {\n    //   case 'int16':\n    //   case 'int32':\n    //   case 'uint16':\n    //   case 'uint32':\n    //     return 'int';\n    //   case 'uint8':\n    //   case 'bool':\n    //     return 'byte';\n    //   case 'float32':\n    //   case 'float64':\n    //     return 'float';\n    //   default:\n    //     throw new Error(`TensorData type ${dataType} is not supported`);\n    // }\n  }\n  clearActiveTextures(): void {\n    this.glContext.clearActiveTextures();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../tensor';\n\n/**\n * Layout info is used for mapping n-dimensional array to 2D textures\n * The layout is created by the TextureLayoutStrategy based on\n * the Tensor's dimensions and strides\n */\nexport interface TextureLayout {\n  width: number;\n  height: number;\n  /**\n   * specify the number of value that encoded in a single pixel\n   */\n  channels: 1|2|3|4;\n  /**\n   * whether in packed mode or not\n   */\n  isPacked?: boolean;\n  /**\n   * the normalized shape\n   */\n  shape: readonly number[];\n  /**\n   * the stride of each dimensions, calculated according to shape\n   */\n  strides: readonly number[];\n  /**\n   * the original shape(dims) of the corresponding tensor\n   */\n  unpackedShape: readonly number[];\n\n  reversedWH?: boolean;\n}\nexport interface TextureData extends TextureLayout {\n  tensor: Tensor;\n  texture: WebGLTexture;\n}\n\nexport enum TextureType {\n  unpacked,              // <-- normal unpacked texture\n  unpackedReversed,      // <-- unpacked texture used in old ONNX.js implementation (deprecated)\n  packed,                // <-- normal packed texture\n  downloadUint8AsFloat,  // <-- ONLY used in texture downloading for iOS devices\n  packedLastDimension    // <-- ONLY used in old ONNX.js Conv implementation for input W (deprecated)\n}\n\nexport interface TensorInfo {\n  id?: Tensor.Id;\n  dims: readonly number[];\n  type: Tensor.DataType;\n  textureType: TextureType;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * A set of metadata of a shader program.\n */\nexport interface ProgramMetadata {\n  /**\n   * the name of the program. used for debugging and profiling\n   */\n  name: string;\n  /**\n   * texture types for each input\n   */\n  inputTypes: TextureType[];\n  /**\n   * names of each input\n   */\n  inputNames: string[];\n  /**\n   * an optional string as a cache hint in the artifact cache\n   */\n  cacheHint?: string;\n}\n\n/**\n * A ProgramInfoLoader allows\n */\nexport interface ProgramInfoLoader extends ProgramMetadata {\n  /**\n   * a function to get the program info\n   */\n  get(): ProgramInfo;\n}\n\n/**\n * A set of data that represent a shader program\n */\nexport interface ProgramInfo extends ProgramMetadata {\n  /**\n   * information of uniform variables\n   */\n  variables?: ProgramVariable[];\n  /**\n   * tensor info for output\n   */\n  output: TensorInfo;\n  /**\n   * the shader's processing source code\n   */\n  shaderSource: string;\n  /**\n   * whether the shader source contains a customized main function implementation\n   */\n  hasMain?: boolean;\n}\n\nexport interface VariableInfo {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * Information of uniforms that shader uses\n */\nexport interface UniformInfo {\n  type: 'sampler2D'|VariableInfo['type'];\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface UniformLocation extends UniformInfo {\n  location: WebGLUniformLocation;\n}\n\n/**\n * Artifact is the result of compilation\n * It does not contain input of output data\n * However anything that could be run as a \"program\"\n */\nexport interface Artifact {\n  programInfo: ProgramInfo;\n  program: WebGLProgram;\n  uniformLocations: UniformLocation[];\n  attribLocations: {position: number; textureCoord: number};\n}\nexport declare namespace Artifact {\n  type UniformLocations = Artifact['uniformLocations'];\n  type AttribLocations = Artifact['attribLocations'];\n}\n\nexport interface UniformData {\n  [name: string]: number|number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {assert} from '../../util';\n/**\n * Given a non RGBA shape calculate the R version\n * It is assumed that the dimensions are multiples of given channels\n * NOTE: it is always the last dim that gets packed.\n * @param unpackedShape original shape to create a packed version from\n */\nexport function getPackedShape(unpackedShape: readonly number[]): readonly number[] {\n  const len = unpackedShape.length;\n  return unpackedShape.slice(0, len - 1).concat(unpackedShape[len - 1] / 4);\n}\n\nexport async function repeatedTry(\n    checkFn: () => boolean, delayFn = (_counter: number) => 0, maxCounter?: number): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    let tryCount = 0;\n\n    const tryFn = () => {\n      if (checkFn()) {\n        resolve();\n        return;\n      }\n\n      tryCount++;\n\n      const nextBackoff = delayFn(tryCount);\n\n      if (maxCounter != null && tryCount >= maxCounter) {\n        reject();\n        return;\n      }\n      setTimeout(tryFn, nextBackoff);\n    };\n\n    tryFn();\n  });\n}\n\n/**\n * Generates the function name from an input sampler name.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerName(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1);\n}\n\n/**\n * Generates the function name from an input sampler name at output coordinates.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1) + 'AtOutCoords';\n}\n\n/** Returns a new input shape (a copy) that has a squeezed logical shape. */\nexport function squeezeInputShape(inputShape: readonly number[], squeezedShape: number[]): number[] {\n  // Deep copy.\n  let newInputShape: number[] = JSON.parse(JSON.stringify(inputShape));\n  newInputShape = squeezedShape;\n  return newInputShape;\n}\n\n/** Returns a list of squeezed parameters for shader functions */\nexport function getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n\n/** Returns the data type for different ranks. */\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\nexport function getGlChannels(rank = 6): string[] {\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nimport {WebGLContext} from './webgl-context';\n\nconst cache: {[contextId: string]: WebGLContext} = {};\n\n/**\n * This factory function creates proper WebGLRenderingContext based on\n * the current browsers capabilities\n * The order is from higher/most recent versions to most basic\n */\nexport function createWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\n  let context: WebGLContext|undefined;\n  if ((!contextId || contextId === 'webgl2') && 'webgl2' in cache) {\n    context = cache.webgl2;\n  } else if ((!contextId || contextId === 'webgl') && 'webgl' in cache) {\n    context = cache.webgl;\n  }\n\n  if (!context) {\n    try {\n      // try to create webgl context from an offscreen canvas\n      const offscreenCanvas = createOffscreenCanvas();\n      context = createNewWebGLContext(offscreenCanvas, contextId);\n    } catch (e) {\n      // if failed, fallback to try to use a normal canvas element\n      const canvas = createCanvas();\n      context = createNewWebGLContext(canvas, contextId);\n    }\n  }\n\n  contextId = contextId || context.version === 1 ? 'webgl' : 'webgl2';\n  const gl = context.gl;\n\n  cache[contextId] = context;\n\n  if (gl.isContextLost()) {\n    delete cache[contextId];\n    return createWebGLContext(contextId);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  return context;\n}\n\nexport function createNewWebGLContext(canvas: HTMLCanvasElement, contextId?: 'webgl'|'webgl2'): WebGLContext {\n  const contextAttributes: WebGLContextAttributes = {\n    alpha: false,\n    depth: false,\n    antialias: false,\n    stencil: false,\n    preserveDrawingBuffer: false,\n    premultipliedAlpha: false,\n    failIfMajorPerformanceCaveat: false\n  };\n  let gl: WebGLRenderingContext|null;\n  const ca = contextAttributes;\n  if (!contextId || contextId === 'webgl2') {\n    gl = canvas.getContext('webgl2', ca);\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 2);\n      } catch (err) {\n        Logger.warning('GlContextFactory', `failed to create WebGLContext using contextId 'webgl2'. Error: ${err}`);\n      }\n    }\n  }\n  if (!contextId || contextId === 'webgl') {\n    gl = canvas.getContext('webgl', ca) || canvas.getContext('experimental-webgl', ca) as WebGLRenderingContext;\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 1);\n      } catch (err) {\n        Logger.warning(\n            'GlContextFactory',\n            `failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: ${err}`);\n      }\n    }\n  }\n\n  throw new Error('WebGL is not supported');\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\ndeclare let OffscreenCanvas: {new (width: number, height: number): HTMLCanvasElement};\n\nfunction createCanvas(): HTMLCanvasElement {\n  if (typeof document === 'undefined') {\n    throw new TypeError('failed to create canvas: document is not supported');\n  }\n  const canvas: HTMLCanvasElement = document.createElement('canvas');\n  canvas.width = 1;\n  canvas.height = 1;\n  return canvas;\n}\n\nfunction createOffscreenCanvas(): HTMLCanvasElement {\n  if (typeof OffscreenCanvas === 'undefined') {\n    throw new TypeError('failed to create offscreen canvas: OffscreenCanvas is not supported');\n  }\n  return new OffscreenCanvas(1, 1);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport * as DataEncoders from './texture-data-encoder';\nimport {DataEncoder, Encoder} from './texture-data-encoder';\nimport {repeatedTry} from './utils';\n\nexport interface FenceContext {\n  query: WebGLSync|null;\n  isFencePassed(): boolean;\n}\n\ntype PollItem = {\n  isDoneFn: () => boolean; resolveFn: () => void;\n};\n\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n\n/**\n * Abstraction and wrapper around WebGLRenderingContext and its operations\n */\nexport class WebGLContext {\n  gl: WebGLRenderingContext;\n  version: 1|2;\n\n  private vertexbuffer: WebGLBuffer;\n  private framebuffer: WebGLFramebuffer;\n\n  // WebGL flags and vital parameters\n  private isFloatTextureAttachableToFrameBuffer: boolean;\n  isFloat32DownloadSupported: boolean;\n  isRenderFloat32Supported: boolean;\n  isBlendSupported: boolean;\n  maxTextureSize: number;\n  // private maxCombinedTextureImageUnits: number;\n  private maxTextureImageUnits: number;\n  // private maxCubeMapTextureSize: number;\n  // private shadingLanguageVersion: string;\n  // private webglVendor: string;\n  // private webglVersion: string;\n\n  // WebGL2 flags and vital parameters\n  // private max3DTextureSize: number;\n  // private maxArrayTextureLayers: number;\n  // private maxColorAttachments: number;\n  // private maxDrawBuffers: number;\n\n  // WebGL extensions\n  // eslint-disable-next-line camelcase\n  textureFloatExtension: OES_texture_float|null;\n  // eslint-disable-next-line camelcase\n  textureHalfFloatExtension: OES_texture_half_float|null;\n\n  // WebGL2 extensions\n  colorBufferFloatExtension: unknown|null;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  disjointTimerQueryWebgl2Extension: {TIME_ELAPSED_EXT: GLenum; GPU_DISJOINT_EXT: GLenum}|null;\n\n  private disposed: boolean;\n  private frameBufferBound = false;\n\n  constructor(gl: WebGLRenderingContext, version: 1|2) {\n    this.gl = gl;\n    this.version = version;\n\n    this.getExtensions();\n    this.vertexbuffer = this.createVertexbuffer();\n    this.framebuffer = this.createFramebuffer();\n    this.queryVitalParameters();\n  }\n\n  allocateTexture(width: number, height: number, encoder: DataEncoder, data?: Encoder.DataArrayType): WebGLTexture {\n    const gl = this.gl;\n    // create the texture\n    const texture = gl.createTexture();\n    // bind the texture so the following methods effect this texture.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    const buffer = data ? encoder.encode(data, width * height) : null;\n    gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,  // Level of detail.\n        encoder.internalFormat, width, height,\n        0,  // Always 0 in OpenGL ES.\n        encoder.format, encoder.textureType, buffer);\n    this.checkError();\n    return texture as WebGLTexture;\n  }\n  updateTexture(\n      texture: WebGLTexture, width: number, height: number, encoder: DataEncoder, data: Encoder.DataArrayType): void {\n    const gl = this.gl;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    const buffer = encoder.encode(data, width * height);\n    gl.texSubImage2D(\n        gl.TEXTURE_2D,\n        0,  // level\n        0,  // xoffset\n        0,  // yoffset\n        width, height, encoder.format, encoder.textureType, buffer);\n    this.checkError();\n  }\n  attachFramebuffer(texture: WebGLTexture, width: number, height: number): void {\n    const gl = this.gl;\n    // Make it the target for framebuffer operations - including rendering.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    this.checkError();\n    gl.viewport(0, 0, width, height);\n    gl.scissor(0, 0, width, height);\n  }\n  readTexture(\n      texture: WebGLTexture, width: number, height: number, dataSize: number, dataType: Encoder.DataType,\n      channels: number): Encoder.DataArrayType {\n    const gl = this.gl;\n    if (!channels) {\n      channels = 1;\n    }\n    if (!this.frameBufferBound) {\n      this.attachFramebuffer(texture, width, height);\n    }\n    const encoder = this.getEncoder(dataType, channels);\n    const buffer = encoder.allocate(width * height);\n    // bind texture to framebuffer\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    // TODO: Check if framebuffer is ready\n    gl.readPixels(0, 0, width, height, gl.RGBA, encoder.textureType, buffer);\n    this.checkError();\n    // unbind FB\n    return encoder.decode(buffer, dataSize);\n  }\n\n  isFramebufferReady(): boolean {\n    // TODO: Implement logic to check if the framebuffer is ready\n    return true;\n  }\n  getActiveTexture(): string {\n    const gl = this.gl;\n    const n = gl.getParameter(this.gl.ACTIVE_TEXTURE);\n    return `TEXTURE${(n - gl.TEXTURE0)}`;\n  }\n  getTextureBinding(): WebGLTexture {\n    return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);\n  }\n  getFramebufferBinding(): WebGLFramebuffer {\n    return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);\n  }\n  setVertexAttributes(positionHandle: number, textureCoordHandle: number): void {\n    const gl = this.gl;\n    gl.vertexAttribPointer(positionHandle, 3, gl.FLOAT, false, 20, 0);\n    gl.enableVertexAttribArray(positionHandle);\n    if (textureCoordHandle !== -1) {\n      gl.vertexAttribPointer(textureCoordHandle, 2, gl.FLOAT, false, 20, 12);\n      gl.enableVertexAttribArray(textureCoordHandle);\n    }\n    this.checkError();\n  }\n  createProgram(\n      vertexShader: WebGLShader,\n      fragShader: WebGLShader,\n      ): WebGLProgram {\n    const gl = this.gl;\n    const program = gl.createProgram()!;\n\n    // the program consists of our shaders\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragShader);\n    gl.linkProgram(program);\n    return program;\n  }\n  compileShader(shaderSource: string, shaderType: number): WebGLShader {\n    const gl = this.gl;\n    const shader = gl.createShader(shaderType);\n    if (!shader) {\n      throw new Error(`createShader() returned null with type ${shaderType}`);\n    }\n\n    gl.shaderSource(shader, shaderSource);\n    gl.compileShader(shader);\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\n      throw new Error(`Failed to compile shader: ${gl.getShaderInfoLog(shader)}\nShader source:\n${shaderSource}`);\n    }\n    return shader;\n  }\n  deleteShader(shader: WebGLShader): void {\n    this.gl.deleteShader(shader);\n  }\n  bindTextureToUniform(texture: WebGLTexture, position: number, uniformHandle: WebGLUniformLocation): void {\n    const gl = this.gl;\n    gl.activeTexture(gl.TEXTURE0 + position);\n    this.checkError();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    this.checkError();\n    gl.uniform1i(uniformHandle, position);\n    this.checkError();\n  }\n  draw(): void {\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\n    this.checkError();\n  }\n  checkError(): void {\n    if (env.debug) {\n      const gl = this.gl;\n      const error = gl.getError();\n      let label = '';\n      switch (error) {\n        case (gl.NO_ERROR):\n          return;\n        case (gl.INVALID_ENUM):\n          label = 'INVALID_ENUM';\n          break;\n        case (gl.INVALID_VALUE):\n          label = 'INVALID_VALUE';\n          break;\n        case (gl.INVALID_OPERATION):\n          label = 'INVALID_OPERATION';\n          break;\n        case (gl.INVALID_FRAMEBUFFER_OPERATION):\n          label = 'INVALID_FRAMEBUFFER_OPERATION';\n          break;\n        case (gl.OUT_OF_MEMORY):\n          label = 'OUT_OF_MEMORY';\n          break;\n        case (gl.CONTEXT_LOST_WEBGL):\n          label = 'CONTEXT_LOST_WEBGL';\n          break;\n        default:\n          label = `Unknown WebGL Error: ${error.toString(16)}`;\n      }\n      throw new Error(label);\n    }\n  }\n  deleteTexture(texture: WebGLTexture): void {\n    this.gl.deleteTexture(texture);\n  }\n  deleteProgram(program: WebGLProgram): void {\n    this.gl.deleteProgram(program);\n  }\n  getEncoder(dataType: Encoder.DataType, channels: number, usage: Encoder.Usage = Encoder.Usage.Default): DataEncoder {\n    if (this.version === 2) {\n      return new DataEncoders.RedFloat32DataEncoder(this.gl as WebGL2RenderingContext, channels);\n    }\n\n    switch (dataType) {\n      case 'float':\n        if (usage === Encoder.Usage.UploadOnly || this.isRenderFloat32Supported) {\n          return new DataEncoders.RGBAFloatDataEncoder(this.gl, channels);\n        } else {\n          return new DataEncoders.RGBAFloatDataEncoder(\n              this.gl, channels, this.textureHalfFloatExtension!.HALF_FLOAT_OES);\n        }\n      case 'int':\n        throw new Error('not implemented');\n      case 'byte':\n        return new DataEncoders.Uint8DataEncoder(this.gl, channels);\n      default:\n        throw new Error(`Invalid dataType: ${dataType}`);\n    }\n  }\n  clearActiveTextures(): void {\n    const gl = this.gl;\n    for (let unit = 0; unit < this.maxTextureImageUnits; ++unit) {\n      gl.activeTexture(gl.TEXTURE0 + unit);\n      gl.bindTexture(gl.TEXTURE_2D, null);\n    }\n  }\n  dispose(): void {\n    if (this.disposed) {\n      return;\n    }\n    const gl = this.gl;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteFramebuffer(this.framebuffer);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    gl.deleteBuffer(this.vertexbuffer);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    gl.finish();\n    this.disposed = true;\n  }\n\n  private createDefaultGeometry(): Float32Array {\n    // Sets of x,y,z(=0),s,t coordinates.\n    return new Float32Array([\n      -1.0, 1.0,  0.0, 0.0, 1.0,  // upper left\n      -1.0, -1.0, 0.0, 0.0, 0.0,  // lower left\n      1.0,  1.0,  0.0, 1.0, 1.0,  // upper right\n      1.0,  -1.0, 0.0, 1.0, 0.0   // lower right\n    ]);\n  }\n  private createVertexbuffer(): WebGLBuffer {\n    const gl = this.gl;\n    const buffer = gl.createBuffer();\n    if (!buffer) {\n      throw new Error('createBuffer() returned null');\n    }\n    const geometry = this.createDefaultGeometry();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, geometry, gl.STATIC_DRAW);\n    this.checkError();\n    return buffer;\n  }\n  private createFramebuffer(): WebGLFramebuffer {\n    const fb = this.gl.createFramebuffer();\n    if (!fb) {\n      throw new Error('createFramebuffer returned null');\n    }\n    return fb;\n  }\n\n  private queryVitalParameters(): void {\n    const gl = this.gl;\n\n    this.isFloatTextureAttachableToFrameBuffer = this.checkFloatTextureAttachableToFrameBuffer();\n    this.isRenderFloat32Supported = this.checkRenderFloat32();\n    this.isFloat32DownloadSupported = this.checkFloat32Download();\n\n    if (this.version === 1 && !this.textureHalfFloatExtension && !this.isRenderFloat32Supported) {\n      throw new Error('both float32 and float16 TextureType are not supported');\n    }\n\n    this.isBlendSupported = !this.isRenderFloat32Supported || this.checkFloat32Blend();\n\n    // this.maxCombinedTextureImageUnits = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n    this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    this.maxTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n    // this.maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n    // this.shadingLanguageVersion = gl.getParameter(gl.SHADING_LANGUAGE_VERSION);\n    // this.webglVendor = gl.getParameter(gl.VENDOR);\n    // this.webglVersion = gl.getParameter(gl.VERSION);\n\n    if (this.version === 2) {\n      // this.max3DTextureSize = gl.getParameter(WebGL2RenderingContext.MAX_3D_TEXTURE_SIZE);\n      // this.maxArrayTextureLayers = gl.getParameter(WebGL2RenderingContext.MAX_ARRAY_TEXTURE_LAYERS);\n      // this.maxColorAttachments = gl.getParameter(WebGL2RenderingContext.MAX_COLOR_ATTACHMENTS);\n      // this.maxDrawBuffers = gl.getParameter(WebGL2RenderingContext.MAX_DRAW_BUFFERS);\n    }\n  }\n  private getExtensions(): void {\n    if (this.version === 2) {\n      this.colorBufferFloatExtension = this.gl.getExtension('EXT_color_buffer_float');\n      this.disjointTimerQueryWebgl2Extension = this.gl.getExtension('EXT_disjoint_timer_query_webgl2');\n    } else {\n      this.textureFloatExtension = this.gl.getExtension('OES_texture_float');\n      this.textureHalfFloatExtension = this.gl.getExtension('OES_texture_half_float');\n    }\n  }\n\n  private checkFloatTextureAttachableToFrameBuffer(): boolean {\n    // test whether Float32 texture is supported:\n    // STEP.1 create a float texture\n    const gl = this.gl;\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n    // STEP.2 bind a frame buffer\n    const frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    // STEP.3 attach texture to framebuffer\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    // STEP.4 test whether framebuffer is complete\n    const isComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteTexture(texture);\n    gl.deleteFramebuffer(frameBuffer);\n    return isComplete;\n  }\n\n  private checkRenderFloat32(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  private checkFloat32Download(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n      if (!this.gl.getExtension('WEBGL_color_buffer_float')) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  /**\n   * Check whether GL_BLEND is supported\n   */\n  private checkFloat32Blend(): boolean {\n    // it looks like currently (2019-05-08) there is no easy way to detect whether BLEND is supported\n    // https://github.com/microsoft/onnxjs/issues/145\n\n    const gl = this.gl;\n\n    let texture: WebGLTexture|null|undefined;\n    let frameBuffer: WebGLFramebuffer|null|undefined;\n    let vertexShader: WebGLShader|null|undefined;\n    let fragmentShader: WebGLShader|null|undefined;\n    let program: WebGLProgram|null|undefined;\n\n    try {\n      texture = gl.createTexture();\n      frameBuffer = gl.createFramebuffer();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n      gl.enable(gl.BLEND);\n\n      vertexShader = gl.createShader(gl.VERTEX_SHADER);\n      if (!vertexShader) {\n        return false;\n      }\n      gl.shaderSource(vertexShader, 'void main(){}');\n      gl.compileShader(vertexShader);\n\n      fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n      if (!fragmentShader) {\n        return false;\n      }\n      gl.shaderSource(fragmentShader, 'precision highp float;void main(){gl_FragColor=vec4(0.5);}');\n      gl.compileShader(fragmentShader);\n\n      program = gl.createProgram();\n      if (!program) {\n        return false;\n      }\n      gl.attachShader(program, vertexShader);\n      gl.attachShader(program, fragmentShader);\n      gl.linkProgram(program);\n      gl.useProgram(program);\n\n      gl.drawArrays(gl.POINTS, 0, 1);\n      return gl.getError() === gl.NO_ERROR;\n\n    } finally {\n      gl.disable(gl.BLEND);\n\n      if (program) {\n        gl.deleteProgram(program);\n      }\n      if (vertexShader) {\n        gl.deleteShader(vertexShader);\n      }\n      if (fragmentShader) {\n        gl.deleteShader(fragmentShader);\n      }\n      if (frameBuffer) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.deleteFramebuffer(frameBuffer);\n      }\n      if (texture) {\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        gl.deleteTexture(texture);\n      }\n    }\n  }\n\n  beginTimer(): WebGLQuery {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      const query = gl2.createQuery() as WebGLQuery;\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported.');\n    }\n  }\n\n  endTimer() {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n  }\n\n  isTimerResultAvailable(query: WebGLQuery): boolean {\n    let available = false, disjoint = false;\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      disjoint = gl2.getParameter(ext.GPU_DISJOINT_EXT);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n\n    return available && !disjoint;\n  }\n\n  getTimerResult(query: WebGLQuery): number {\n    let timeElapsed = 0;\n    if (this.version === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      timeElapsed = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      gl2.deleteQuery(query);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n    // return miliseconds\n    return timeElapsed / 1000000;\n  }\n\n  async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await repeatedTry(() => this.isTimerResultAvailable(query));\n    return this.getTimerResult(query);\n  }\n\n  public async createAndWaitForFence(): Promise<void> {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  private createFence(gl: WebGLRenderingContext): FenceContext {\n    let isFencePassed: () => boolean;\n    const gl2 = gl as WebGL2RenderingContext;\n    const query = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n    gl.flush();\n    if (query === null) {\n      isFencePassed = () => true;\n    } else {\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(query, 0, 0);\n        return status === gl2.ALREADY_SIGNALED || status === gl2.CONDITION_SATISFIED;\n      };\n    }\n    return {query, isFencePassed};\n  }\n\n  async pollFence(fenceContext: FenceContext) {\n    return new Promise<void>(resolve => {\n      void this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n\n  private itemsToPoll: PollItem[] = [];\n\n  pollItems(): void {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {resolveFn} = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  private async addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\n    this.itemsToPoll.push({isDoneFn, resolveFn});\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    await repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    });\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from './backend';\nimport {Graph} from './graph';\nimport {Logger, Profiler} from './instrument';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nclass KernelOp {\n  constructor(public op: Operator, public node: Graph.Node) {}\n}\n\nexport class ExecutionPlan {\n  constructor(private graph: Graph, ops: Operator[], private profiler: Readonly<Profiler>) {\n    this.initialize(ops);\n  }\n\n  initialize(ops: Operator[]) {\n    this.profiler.event('session', 'ExecutionPlan.initialize', () => {\n      const graphNodes = this.graph.getNodes();\n      if (graphNodes.length !== ops.length) {\n        throw new Error('The size of nodes and OPs do not match.');\n      }\n\n      this._ops = ops.map((op, i) => new KernelOp(op, graphNodes[i]));\n      this.reset();\n\n      // look for starter node(s)\n      this._starter = [];\n      this._ops.forEach((op, i) => {\n        let resolved = true;\n        for (const input of op.node.inputs) {\n          if (\n              !this._values[input]                                   // not an initialized input\n              && this.graph.getInputIndices().indexOf(input) === -1  // not model input\n          ) {\n            resolved = false;\n            break;\n          }\n        }\n        if (resolved) {\n          this._starter.push(i);\n        }\n      });\n    });\n  }\n\n  reset() {\n    this._values = this.graph.getValues().map(i => i.tensor);\n  }\n\n  async execute(sessionHandler: SessionHandler, modelInputs: Tensor[]): Promise<Tensor[]> {\n    return this.profiler.event('session', 'ExecutionPlan.execute', async () => {\n      // reset mediem result\n      this.reset();\n\n      // create inference handler\n      const inferenceHandler = sessionHandler.createInferenceHandler();\n\n      // populate inputs value\n      const graphInputs = this.graph.getInputIndices();\n      if (modelInputs.length !== graphInputs.length) {\n        throw new Error(`number of input tensors don't match the number of inputs to the model: actual: ${\n            modelInputs.length} expected: ${graphInputs.length}`);\n      }\n\n      modelInputs.forEach((input, i) => {\n        const index = graphInputs[i];\n        this._values[index] = input;\n      });\n\n      // prepare running sequence\n      const sequence: number[] = this._starter.slice(0);\n\n      // execution iterations\n      const graphValues = this.graph.getValues();\n      const graphNodes = this.graph.getNodes();\n\n      let rear = 0;\n      while (rear < sequence.length) {\n        const thisOpIndex = sequence[rear++];\n        const thisOp = this._ops[thisOpIndex];\n\n        // check input\n        const inputList = thisOp.node.inputs.map(i => this._values[i]);\n        if (inputList.indexOf(undefined) !== -1) {\n          throw new Error(`unresolved input detected: op: ${thisOp.node}`);\n        }\n\n        // run\n        const inputTensors = inputList as Tensor[];\n        Logger.verbose(\n            'ExecPlan',\n            `Runing op:${thisOp.node.name} (${\n                inputTensors.map((t, i) => `'${thisOp.node.inputs[i]}': ${t.type}[${t.dims.join(',')}]`).join(', ')})`);\n\n        const outputList = await this.profiler.event(\n            'node', thisOp.node.name, async () => thisOp.op.impl(inferenceHandler, inputTensors, thisOp.op.context));\n\n        // check output\n        if (outputList.length !== thisOp.node.outputs.length) {\n          throw new Error('the size of output does not match model definition.');\n        }\n\n        // fill value\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          if (this._values[j]) {\n            throw new Error(`output [${j}] already has value: op:${thisOp.node.name}`);\n          }\n          this._values[j] = output;\n        });\n\n        // resolve downstream nodes\n        const downstreamNodes = new Set<number>();\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          for (const currentDownstreamNodeIndex of graphValues[j].to) {\n            const currentDownstreamNode = graphNodes[currentDownstreamNodeIndex];\n            let resolved = true;\n            for (const k of currentDownstreamNode.inputs) {\n              if (!this._values[k]) {\n                resolved = false;\n                break;\n              }\n            }\n            if (resolved) {\n              downstreamNodes.add(currentDownstreamNodeIndex);\n            }\n          }\n        });\n        sequence.push(...downstreamNodes);\n      }\n\n      const output: Tensor[] = [];\n      for (let i = 0; i < this.graph.getOutputIndices().length; i++) {\n        const outputIndex = this.graph.getOutputIndices()[i];\n        const outputTensor = this._values[outputIndex];\n        if (outputTensor === undefined) {\n          throw new Error(`required output [${outputIndex}] does not have value`);\n        }\n        if (outputIndex === 0) {\n          await outputTensor.getData();\n        } else {\n          // eslint-disable-next-line no-unused-expressions\n          outputTensor.data;\n        }\n        output.push(outputTensor);\n      }\n      Logger.verbose('ExecPlan', 'disposing of inferenceHandler');\n      inferenceHandler.dispose();\n      return output;\n    });\n  }\n\n  _values: Array<Tensor|undefined>;\n  _ops: KernelOp[];\n  _starter: number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from './attribute';\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\nimport {onnx} from './ort-schema/protobuf/onnx';\nimport {Tensor} from './tensor';\nimport {LongUtil, MAX_CLIP, MIN_CLIP, ProtoUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Graph {\n  export interface Shape {\n    readonly dims: readonly number[];\n  }\n  export interface ValueType {\n    readonly tensorType: Tensor.DataType;\n    readonly shape: Shape;\n  }\n  export interface Value {\n    // the tensor data. empty for non-initialized inputs\n    readonly tensor?: Tensor;\n\n    // index to the Node where the value comes from. -1 for initializer.\n    readonly from: number;\n\n    // indices to the Nodes where the values go to.\n    readonly to: readonly number[];\n\n    // value type specification. empty for non-input values.\n    readonly type?: ValueType;\n  }\n  export interface Node {\n    // name of the node\n    readonly name: string;\n\n    // the operator type\n    readonly opType: string;\n\n    // indices to the Values where the inputs come from.\n    readonly inputs: readonly number[];\n\n    // indices to the Values where the outpus go to.\n    readonly outputs: readonly number[];\n\n    // the attributes that used by the operator\n    readonly attributes: Attribute;\n  }\n\n  /**\n   * a Transformer is an instance that allows all possible transformation operations that applied to a graph\n   */\n  export interface Transformer {\n    removeAllIdentityNodes(): void;\n    removeAllDropoutNodes(): void;\n    fuseConvActivationNodes(): void;\n    // TODO: add generic functions to manipulate the graph\n  }\n\n  // an initializer can use transformer to transform the graph\n  export interface Initializer {\n    transformGraph(transformer: Transformer): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Graph {\n  getInputIndices(): readonly number[];\n  getInputNames(): readonly string[];\n  getOutputIndices(): readonly number[];\n  getOutputNames(): readonly string[];\n  getValues(): readonly Graph.Value[];\n  getNodes(): readonly Graph.Node[];\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-redeclare\nexport const Graph = {\n  /**\n   * construct a graph from a graph protobuf type\n   */\n  from: (graphProto: onnx.IGraphProto|ortFbs.Graph, initializer?: Graph.Initializer) =>\n      new GraphImpl(graphProto, initializer),\n};\n\nclass Value implements Graph.Value {\n  constructor(valueInfo?: onnx.IValueInfoProto) {\n    this._from = undefined;\n    this._to = [];\n    this.tensor = undefined;\n    this.type = undefined;\n\n    if (valueInfo) {\n      this.type = ProtoUtil.tensorValueTypeFromProto(valueInfo.type!.tensorType!);\n    }\n  }\n\n  _from?: number;  // -1 represent from initializer\n  get from() {\n    return this._from!;\n  }\n  _to: number[];\n  get to() {\n    return this._to;\n  }\n  type?: Graph.ValueType;\n  tensor?: Tensor;\n}\n\nclass Node implements Graph.Node {\n  constructor(_nodeProto: onnx.INodeProto|ortFbs.Node, name?: string) {\n    if (_nodeProto instanceof onnx.NodeProto) {\n      this.name = _nodeProto.name;\n      this.opType = _nodeProto.opType;\n      this.attributes = new Attribute(_nodeProto.attribute);\n    } else if (_nodeProto instanceof ortFbs.Node) {\n      this.name = name ?? _nodeProto.name()!;\n      this.opType = _nodeProto.opType()!;\n      this.attributes = new Attribute(ProtoUtil.tensorAttributesFromORTFormat(_nodeProto));\n    }\n\n    this.inputs = [];\n    this.outputs = [];\n    this.executeNode = true;\n  }\n\n  name: string;\n  opType: string;\n  inputs: number[];\n  outputs: number[];\n  attributes: Attribute;\n  executeNode: boolean;\n}\n\nclass GraphImpl implements Graph, Graph.Transformer {\n  private _allData: Value[];\n\n  private _allInputIndices: number[];\n  private _allInputNames: string[];\n\n  private _allOutputIndices: number[];\n  private _allOutputNames: string[];\n\n  private _nodes: Node[];\n\n  constructor(graph: onnx.IGraphProto|ortFbs.Graph, graphInitializer?: Graph.Initializer) {\n    if (!graph) {\n      throw new TypeError('graph is empty');\n    }\n\n    // build the graph - will throw exceptions if something fatal is detected\n    this.buildGraph(graph);\n\n    // execute any transformation logic for the graph (if applicable)\n    this.transformGraph(graphInitializer);\n\n    // check for cycles and other inconsistencies - will throw exceptions if something fatal is detected\n    this.checkIsAcyclic();\n  }\n\n  getInputIndices(): readonly number[] {\n    return this._allInputIndices;\n  }\n\n  getInputNames(): readonly string[] {\n    return this._allInputNames;\n  }\n\n  getOutputIndices(): readonly number[] {\n    return this._allOutputIndices;\n  }\n\n  getOutputNames(): readonly string[] {\n    return this._allOutputNames;\n  }\n\n  getValues(): readonly Graph.Value[] {\n    return this._allData;\n  }\n\n  getNodes(): readonly Graph.Node[] {\n    return this._nodes;\n  }\n\n  private buildGraph(graph: onnx.IGraphProto|ortFbs.Graph) {\n    // build the graph - will throw exceptions if something fatal is detected\n    if (graph instanceof onnx.GraphProto) {\n      this.buildGraphFromOnnxFormat(graph);\n    } else if (graph instanceof ortFbs.Graph) {\n      this.buildGraphFromOrtFormat(graph);\n    } else {\n      throw new TypeError('Graph type is not supported.');\n    }\n  }\n  private buildGraphFromOnnxFormat(graph: onnx.IGraphProto) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    if (!graph.input) {\n      throw new Error('missing information in graph: input');\n    }\n    const inputValueNames = [];\n    for (const i of graph.input) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated input name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      inputValueNames.push(i.name!);\n    }\n\n    // scan all initializers\n    if (!graph.initializer) {\n      throw new Error('missing information in graph: initializer');\n    }\n    for (const i of graph.initializer) {\n      let index = dataIndices.get(i.name!);\n      if (index === undefined) {\n        const value = new Value();\n        value.type = {\n          shape: {dims: ProtoUtil.tensorDimsFromProto(i.dims!)},\n          tensorType: ProtoUtil.tensorDataTypeFromProto(i.dataType!)\n        };\n        index = this._allData.push(value) - 1;\n        dataIndices.set(i.name!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromProto(i);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    if (!graph.output) {\n      throw new Error('missing information in graph: output');\n    }\n    for (const i of graph.output) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated output name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(i.name!);\n    }\n\n    // scan all nodes\n    if (!graph.node) {\n      throw new Error('missing information in graph: node');\n    }\n    for (const nodeProto of graph.node) {\n      if (!nodeProto.name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          const name = `unnamed_${nodeProto.opType}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            nodeProto.name = name;\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(nodeProto.name)) {\n        throw new Error(`duplicated node name: ${nodeProto.name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto)) - 1;\n      nodesIndices.set(nodeProto.name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n      if (!nodeProto.output) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (const output of nodeProto.output) {\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType === 'Constant') {\n          if (!nodeProto.attribute || nodeProto.attribute.length !== 1 || !nodeProto.attribute[0].t) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (!nodeProto.output || nodeProto.output.length !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromProto(nodeProto.attribute[0].t);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n\n      if (!nodeProto.input) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (const input of nodeProto.input) {\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          // handle exception when opset > 9 and roi not given\n          if (input === '' && nodeProto.input.length === 3 && nodeProto.opType === 'Resize') {\n            continue;\n          }\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto.name}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n\n    return true;\n  }\n\n  private buildGraphFromOrtFormat(graph: ortFbs.Graph) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    const inputValueNames = [];\n    for (let i = 0; i < graph.inputsLength(); i++) {\n      const inputName = graph.inputs(i);\n      if (dataIndices.has(inputName)) {\n        throw new Error(`duplicated input name: ${inputName}`);\n      }\n      // Find the input typeInfo from nodeargs\n      for (let j = 0; j < graph.nodeArgsLength(); j++) {\n        if (graph.nodeArgs(j)?.name() === inputName) {\n          const value = new Value();\n          const valueType = graph.nodeArgs(j)?.type()?.valueType();\n          if (valueType !== ortFbs.TypeInfoValue.tensor_type) {\n            throw new Error('Unexpected value type for the nodeArg.');\n          }\n          const valueInfo = graph.nodeArgs(j)!.type()!.value(new ortFbs.TensorTypeAndShape())!;\n          const type = ProtoUtil.tensorDataTypeFromProto(valueInfo.elemType());\n          const shape = valueInfo.shape()!;\n          const dims = [];\n          for (let k = 0; k < shape.dimLength()!; k++) {\n            dims.push(LongUtil.longToNumber(shape.dim(k)!.value()!.dimValue()!));\n          }\n          value.type = {shape: {dims}, tensorType: type};\n          const currentIndex = this._allData.push(value) - 1;\n          dataIndices.set(inputName, currentIndex);\n          inputValueNames.push(inputName);\n        }\n      }\n    }\n    // check initializers\n    for (let i = 0; i < graph.initializersLength(); i++) {\n      const initializer = graph.initializers(i)!;\n      let index = dataIndices.get(initializer.name()!);\n      if (index === undefined) {\n        const value = new Value();\n        const dims = ProtoUtil.tensorDimsFromORTFormat(initializer);\n        const type = ProtoUtil.tensorDataTypeFromProto(initializer.dataType());\n        value.type = {shape: {dims}, tensorType: type};\n        index = this._allData.push(value) - 1;\n        dataIndices.set(initializer.name()!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromOrtTensor(initializer);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    for (let i = 0; i < graph.outputsLength(); i++) {\n      const outputName = graph.outputs(i);\n      if (dataIndices.has(outputName)) {\n        throw new Error(`duplicated output name: ${outputName}`);\n      }\n      const currentIndex = this._allData.push(new Value()) - 1;\n      dataIndices.set(outputName, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(outputName);\n    }\n\n    // scan all nodes\n    if (!graph.nodes) {\n      throw new Error('missing information in graph: node');\n    }\n    for (let i = 0; i < graph.nodesLength(); i++) {\n      const nodeProto = graph.nodes(i);\n      let name = nodeProto!.name();\n      if (!name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          name = `unnamed_${nodeProto!.opType()}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            // an unique name is found. break.\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(name)) {\n        throw new Error(`duplicated node name: ${name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto!, name)) - 1;\n      nodesIndices.set(name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i);\n      if (nodeProto == null) {\n        throw new Error(`No node exists at index ${i}`);\n      }\n      if (nodeProto?.outputsLength() === 0) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto?.outputsLength(); j++) {\n        const output = nodeProto?.outputs(j);\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType() === 'Constant') {\n          if (nodeProto.attributesLength() !== 1 || !nodeProto.attributes(0)!.t()) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (nodeProto.outputsLength() !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromOrtTensor(nodeProto.attributes(0)!.t()!);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i)!;\n\n      if (nodeProto.inputsLength() === 0) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto.inputsLength()!; j++) {\n        const input = nodeProto.inputs(j)!;\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto!.name()}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n  }\n\n  private checkIsAcyclic() {\n    // go through the graph and check for cycles or other fatal inconsistencies\n    const starters: Set<number> = new Set<number>();\n    this._allInputIndices.forEach(i => {\n      const data = this._allData[i];\n      data._to.forEach(j => {\n        starters.add(j);\n      });\n    });\n\n    // Iterative DFS to check for cycles\n    const nodesStack = Array.from(starters);\n    const nodesState = new Array<string>(this._nodes.length).fill('white');\n\n    while (nodesStack.length > 0) {\n      const nodeIndex = nodesStack.pop()!;\n      // this node has now been processed completely. Mark this node 'black' to denote this.\n      if (nodesState[nodeIndex] === 'gray') {\n        nodesState[nodeIndex] = 'black';\n      } else {\n        // this node is under processing stage. mark this node 'gray' to denote this.\n        nodesStack.push(nodeIndex);\n        nodesState[nodeIndex] = 'gray';\n\n        this._nodes[nodeIndex].outputs.forEach((outgoingEdgeIndex) => {\n          const data = this._allData[outgoingEdgeIndex];\n          if (typeof data.tensor !== 'undefined') {\n            throw new Error('node outputs should not be initialized');\n          }\n          if (data._from !== nodeIndex) {\n            throw new Error('from property of the Value object doesn\\'t match index of Node being processed');\n          }\n          data._to.forEach((downstreamNodeIndex) => {\n            // back edge found - cyclic\n            if (nodesState[downstreamNodeIndex] === 'gray') {\n              throw new Error('model graph is cyclic');\n            }\n            // tree edge found - continue processing by adding it to stack\n            else if (nodesState[downstreamNodeIndex] === 'white') {\n              nodesStack.push(downstreamNodeIndex);\n            }\n          });\n        });\n      }\n    }\n  }\n\n  private transformGraph(graphInitializer?: Graph.Initializer): void {\n    // apply common transform\n    this.removeAllIdentityNodes();\n    this.removeAllDropoutNodes();\n    this.fuseConvActivationNodes();\n    // apply initializer specific transform\n    if (graphInitializer) {\n      graphInitializer.transformGraph(this);\n    }\n\n    // finalize graph\n    this.finalizeGraph();\n  }\n\n  /**\n   * finalize the graph.\n   *\n   * this function should be called after all the transformation completed.\n   * this function removes all unnecessary nodes and values from the graph\n   */\n  finalizeGraph() {\n    let offset = 0;\n    // delete all nodes that are not being executed\n    // The graph is represented using these two arrays\n    // this._nodes - Array holding the kernels to execute - each entry is a kernel pointing to this._allData\n    // this._allData - hold 2 fields - to [] & from - these feileds hold the graph map for inputs and outputs per node\n    // newIndices - remapping the graph after reading the flag 'executeNode'\n    const newIndices = new Array<number>(this._nodes.length, 0);\n    let nodePossition = 0;\n\n    for (let i = 0; i < this._nodes.length; i++) {\n      // giving new indexes to the nodes based on execution flag\n      newIndices[i] = nodePossition;\n      if (this._nodes[i].executeNode) {\n        if (nodePossition !== i) {\n          this._nodes[nodePossition] = this._nodes[i];\n        }\n        nodePossition++;\n\n      } else {\n        // delete all output values\n        this._nodes[i].outputs.forEach(ind => {\n          this._allData[ind]._from = -2;\n        });\n      }\n    }\n\n    // removing the unused nodes\n    this._nodes.splice(nodePossition, this._nodes.length - nodePossition);\n\n    // Updating this._allData according to the new this._nodes\n    for (let i = 0; i < this._allData.length; i++) {\n      const currentData = this._allData[i];\n      if (currentData._from !== undefined && currentData._from !== -1 && currentData._from !== -2) {\n        currentData._from = newIndices[currentData._from];\n      }\n\n      for (let j = 0; j < currentData._to.length; j++) {\n        if (currentData._to[j] >= 0) {\n          currentData._to[j] = newIndices[currentData._to[j]];\n        } else {\n          throw new Error('Trying to update a removed node');\n        }\n      }\n    }\n\n    offset = 0;\n    // delete all values that are not being referenced\n    for (let i = 0; i < this._allData.length; i++) {\n      // if current value is neither linked to next node, nor an output value, remove it.\n      if (this._allData[i].from === -2 && this._allOutputIndices.indexOf(i + offset) === -1) {\n        offset++;\n        this._allData.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (offset > 0) {\n        let ind = -1;\n        // if current value is neither an input value nor an initializer, find the node it's\n        // coming from and update the corresponding node output\n        if (this._allData[i].from !== undefined && this._allData[i].from !== -1) {\n          ind = this._nodes[this._allData[i].from].outputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[this._allData[i].from].outputs[ind] = i;\n          }\n        } else {\n          // if current value is an input value, update its reference in inputIndices\n          ind = this._allInputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allInputIndices[ind] = i;\n          }\n        }\n\n        // find the node that the current value is linking to and update its input reference\n        this._allData[i].to.forEach(node => {\n          ind = this._nodes[node].inputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[node].inputs[ind] = i;\n          }\n        });\n        if (this._allData[i].to.length === 0) {\n          // if current value is a graph output, update its reference in outputIndices\n          ind = this._allOutputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allOutputIndices[ind] = i;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete the specifed node. Assume the node has one incoming input and the first output connected to other nodes.\n   * An input validation must be done before calling this function.\n   * @param nodeIndex The index of node to be deleted\n   */\n  private deleteNode(nodeIndex: number) {\n    const node = this._nodes[nodeIndex];\n    if (node.outputs.length > 1) {\n      for (let i = 1; i < node.outputs.length; i++) {\n        if (this._allData[node.outputs[i]].to.length > 0) {\n          throw new Error('Node deletion with more than one output connected to other nodes is not supported. ');\n        }\n      }\n    }\n\n    // this node wil not be executed\n    node.executeNode = false;\n    const inputValueIndex = node.inputs[0];\n    const outputValueIndex = node.outputs[0];\n    const nodesConsumingOutput = this._allData[outputValueIndex].to;\n\n    // remove this node from the to property of the input Value\n    for (let i = 0; i < node.inputs.length; i++) {\n      const delIndex = this._allData[node.inputs[i]].to.indexOf(nodeIndex);\n      // should not happen\n      if (delIndex === -1) {\n        throw new Error('The Value object doesn\\'t have the current Node in it\\'s \\'to\\' property ');\n      }\n      this._allData[node.inputs[i]].to.splice(delIndex, 1);\n    }\n\n    // clear node indices consuming this output Value\n    this._allData[outputValueIndex]._to = [];\n\n    // if the output of this node is a graph output, adjust the index appropriately\n    const index = this._allOutputIndices.indexOf(outputValueIndex);\n    if (index !== -1) {\n      this._allOutputIndices[index] = inputValueIndex;\n    }\n\n    // override the inputs for nodes consuming this node's output with the input to this node\n    if (nodesConsumingOutput && nodesConsumingOutput.length > 0) {\n      for (const nodeIndex of nodesConsumingOutput) {\n        const replaceIndex = this._nodes[nodeIndex].inputs.indexOf(outputValueIndex);\n        // should not happen\n        if (replaceIndex === -1) {\n          throw new Error('The Node object doesn\\'t have the output Value in it\\'s \\'inputs\\' property ');\n        }\n        this._nodes[nodeIndex].inputs[replaceIndex] = inputValueIndex;\n        this._allData[inputValueIndex].to.push(nodeIndex);\n      }\n    }\n  }\n\n  removeAllDropoutNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Dropout' nodes so that no time is wasted in execution\n      if (node.opType === 'Dropout') {\n        // the node should have exactly 1 input and 1 or 2 outputs\n        if (node.inputs.length !== 1) {\n          throw new Error('Dropout nodes should only contain one input. ');\n        }\n        if (node.outputs.length !== 1 && node.outputs.length !== 2) {\n          throw new Error('Dropout nodes should contain either 1 or 2 output(s)');\n        }\n        // the second output should not be referenced by any other node\n        if (node.outputs.length === 2 && this._allData[node.outputs[1]]._to.length !== 0) {\n          throw new Error('Dropout nodes\\'s second output should not be referenced by other nodes');\n        }\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  removeAllIdentityNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Identity' nodes so that no time is wasted in execution\n      if (node.opType === 'Identity') {\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  isActivation(n: Node): boolean {\n    switch (n.opType) {\n      // TODO: add other activation methods\n      case 'Relu':\n      case 'Sigmoid':\n      case 'Clip':\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  fuseConvActivationNodes() {\n    for (const node of this._nodes) {\n      if (node.opType === 'Conv') {\n        const next = this._allData[node.outputs[0]]._to;\n        if (next.length === 1 && this.isActivation(this._nodes[next[0]])) {\n          const child = this._nodes[next[0]];\n          if (child.opType === 'Clip') {\n            if (child.inputs.length === 1) {\n              try {\n                node.attributes.set(\n                    'activation_params', 'floats',\n                    [child.attributes.getFloat('min'), child.attributes.getFloat('max')]);\n              } catch (e) {\n                node.attributes.set('activation_params', 'floats', [MIN_CLIP, MAX_CLIP]);\n              }\n            } else if (\n                child.inputs.length >= 3 && this._allData[child.inputs[1]].tensor !== undefined &&\n                this._allData[child.inputs[2]].tensor !== undefined) {\n              node.attributes.set('activation_params', 'floats', [\n                this._allData[child.inputs[1]].tensor!.floatData[0], this._allData[child.inputs[2]].tensor!.floatData[0]\n              ]);\n            } else {\n              // Skip fusion with clip node since clip min and clip max are not coming from initializer\n              continue;\n            }\n          }\n          node.attributes.set('activation', 'string', (child.opType));\n          this.deleteNode(next[0]);\n        }\n      }\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\n\nimport {WebGLContext} from './backends/webgl/webgl-context';\n\nexport declare namespace Logger {\n  export interface SeverityTypeMap {\n    verbose: 'v';\n    info: 'i';\n    warning: 'w';\n    error: 'e';\n    fatal: 'f';\n  }\n\n  export type Severity = keyof SeverityTypeMap;\n\n  export type Provider = 'none'|'console';\n\n  /**\n   * Logging config that used to control the behavior of logger\n   */\n  export interface Config {\n    /**\n     * Specify the logging provider. 'console' by default\n     */\n    provider?: Provider;\n    /**\n     * Specify the minimal logger serverity. 'warning' by default\n     */\n    minimalSeverity?: Logger.Severity;\n    /**\n     * Whether to output date time in log. true by default\n     */\n    logDateTime?: boolean;\n    /**\n     * Whether to output source information (Not yet supported). false by default\n     */\n    logSourceLocation?: boolean;\n  }\n\n  export interface CategorizedLogger {\n    verbose(content: string): void;\n    info(content: string): void;\n    warning(content: string): void;\n    error(content: string): void;\n    fatal(content: string): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Logger {\n  (category: string): Logger.CategorizedLogger;\n\n  verbose(content: string): void;\n  verbose(category: string, content: string): void;\n  info(content: string): void;\n  info(category: string, content: string): void;\n  warning(content: string): void;\n  warning(category: string, content: string): void;\n  error(content: string): void;\n  error(category: string, content: string): void;\n  fatal(content: string): void;\n  fatal(category: string, content: string): void;\n\n  /**\n   * Reset the logger configuration.\n   * @param config specify an optional default config\n   */\n  reset(config?: Logger.Config): void;\n  /**\n   * Set the logger's behavior on the given category\n   * @param category specify a category string. If '*' is specified, all previous configuration will be overwritten. If\n   * '' is specified, the default behavior will be updated.\n   * @param config the config object to indicate the logger's behavior\n   */\n  set(category: string, config: Logger.Config): void;\n\n  /**\n   * Set the logger's behavior from ort-common env\n   * @param env the env used to set logger. Currently only setting loglevel is supported through Env.\n   */\n  setWithEnv(env: Env): void;\n}\n\ninterface LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string): void;\n}\nclass NoOpLoggerProvider implements LoggerProvider {\n  log(_severity: Logger.Severity, _content: string, _category?: string) {\n    // do nothing\n  }\n}\nclass ConsoleLoggerProvider implements LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string) {\n    // eslint-disable-next-line no-console\n    console.log(`${this.color(severity)} ${category ? '\\x1b[35m' + category + '\\x1b[0m ' : ''}${content}`);\n  }\n\n  private color(severity: Logger.Severity) {\n    switch (severity) {\n      case 'verbose':\n        return '\\x1b[34;40mv\\x1b[0m';\n      case 'info':\n        return '\\x1b[32mi\\x1b[0m';\n      case 'warning':\n        return '\\x1b[30;43mw\\x1b[0m';\n      case 'error':\n        return '\\x1b[31;40me\\x1b[0m';\n      case 'fatal':\n        return '\\x1b[101mf\\x1b[0m';\n      default:\n        throw new Error(`unsupported severity: ${severity}`);\n    }\n  }\n}\n\nconst SEVERITY_VALUE = {\n  verbose: 1000,\n  info: 2000,\n  warning: 4000,\n  error: 5000,\n  fatal: 6000\n};\n\nconst LOGGER_PROVIDER_MAP: {readonly [provider: string]: Readonly<LoggerProvider>} = {\n  ['none']: new NoOpLoggerProvider(),\n  ['console']: new ConsoleLoggerProvider()\n};\nconst LOGGER_DEFAULT_CONFIG = {\n  provider: 'console',\n  minimalSeverity: 'warning',\n  logDateTime: true,\n  logSourceLocation: false\n};\nlet LOGGER_CONFIG_MAP:\n    {[category: string]: Readonly<Required<Logger.Config>>} = {['']: LOGGER_DEFAULT_CONFIG as Required<Logger.Config>};\n\nfunction log(category: string): Logger.CategorizedLogger;\nfunction log(severity: Logger.Severity, content: string): void;\nfunction log(severity: Logger.Severity, category: string, content: string): void;\nfunction log(severity: Logger.Severity, arg1: string, arg2?: string): void;\nfunction log(\n    arg0: string|Logger.Severity, arg1?: string, arg2?: string|number, arg3?: number): Logger.CategorizedLogger|void {\n  if (arg1 === undefined) {\n    // log(category: string): Logger.CategorizedLogger;\n    return createCategorizedLogger(arg0);\n  } else if (arg2 === undefined) {\n    // log(severity, content);\n    logInternal(arg0 as Logger.Severity, arg1, 1);\n  } else if (typeof arg2 === 'number' && arg3 === undefined) {\n    // log(severity, content, stack)\n    logInternal(arg0 as Logger.Severity, arg1, arg2);\n  } else if (typeof arg2 === 'string' && arg3 === undefined) {\n    // log(severity, category, content)\n    logInternal(arg0 as Logger.Severity, arg2, 1, arg1);\n  } else if (typeof arg2 === 'string' && typeof arg3 === 'number') {\n    // log(severity, category, content, stack)\n    logInternal(arg0 as Logger.Severity, arg2, arg3, arg1);\n  } else {\n    throw new TypeError('input is valid');\n  }\n}\n\nfunction createCategorizedLogger(category: string): Logger.CategorizedLogger {\n  return {\n    verbose: log.verbose.bind(null, category),\n    info: log.info.bind(null, category),\n    warning: log.warning.bind(null, category),\n    error: log.error.bind(null, category),\n    fatal: log.fatal.bind(null, category)\n  };\n}\n\n// NOTE: argument 'category' is put the last parameter beacause typescript\n// doesn't allow optional argument put in front of required argument. This\n// order is different from a usual logging API.\nfunction logInternal(severity: Logger.Severity, content: string, stack: number, category?: string) {\n  const config = LOGGER_CONFIG_MAP[category || ''] || LOGGER_CONFIG_MAP[''];\n  if (SEVERITY_VALUE[severity] < SEVERITY_VALUE[config.minimalSeverity]) {\n    return;\n  }\n\n  if (config.logDateTime) {\n    content = `${new Date().toISOString()}|${content}`;\n  }\n\n  if (config.logSourceLocation) {\n    // TODO: calculate source location from 'stack'\n  }\n\n  LOGGER_PROVIDER_MAP[config.provider].log(severity, content, category);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nnamespace log {\n  export function verbose(content: string): void;\n  export function verbose(category: string, content: string): void;\n  export function verbose(arg0: string, arg1?: string) {\n    log('verbose', arg0, arg1);\n  }\n  export function info(content: string): void;\n  export function info(category: string, content: string): void;\n  export function info(arg0: string, arg1?: string) {\n    log('info', arg0, arg1);\n  }\n  export function warning(content: string): void;\n  export function warning(category: string, content: string): void;\n  export function warning(arg0: string, arg1?: string) {\n    log('warning', arg0, arg1);\n  }\n  export function error(content: string): void;\n  export function error(category: string, content: string): void;\n  export function error(arg0: string, arg1?: string) {\n    log('error', arg0, arg1);\n  }\n  export function fatal(content: string): void;\n  export function fatal(category: string, content: string): void;\n  export function fatal(arg0: string, arg1?: string) {\n    log('fatal', arg0, arg1);\n  }\n\n  export function reset(config?: Logger.Config): void {\n    LOGGER_CONFIG_MAP = {};\n    set('', config || {});\n  }\n  export function set(category: string, config: Logger.Config): void {\n    if (category === '*') {\n      reset(config);\n    } else {\n      const previousConfig = LOGGER_CONFIG_MAP[category] || LOGGER_DEFAULT_CONFIG;\n      LOGGER_CONFIG_MAP[category] = {\n        provider: config.provider || previousConfig.provider,\n        minimalSeverity: config.minimalSeverity || previousConfig.minimalSeverity,\n        logDateTime: (config.logDateTime === undefined) ? previousConfig.logDateTime : config.logDateTime,\n        logSourceLocation: (config.logSourceLocation === undefined) ? previousConfig.logSourceLocation :\n                                                                      config.logSourceLocation\n      };\n    }\n\n    // TODO: we want to support wildcard or regex?\n  }\n\n  export function setWithEnv(env: Env): void {\n    const config: Logger.Config = {};\n    if (env.logLevel) {\n      config.minimalSeverity = env.logLevel as Logger.Severity;\n    }\n    set('', config);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare, @typescript-eslint/naming-convention\nexport const Logger: Logger = log;\n\nexport declare namespace Profiler {\n  export interface Config {\n    maxNumberEvents?: number;\n    flushBatchSize?: number;\n    flushIntervalInMilliseconds?: number;\n  }\n\n  export type EventCategory = 'session'|'node'|'op'|'backend';\n\n  export interface Event {\n    end(): void|Promise<void>;\n  }\n}\n// TODO\n// class WebGLEvent implements Profiler.Event {}\n\nclass Event implements Profiler.Event {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number,\n      private endCallback: (e: Event) => void|Promise<void>, public timer?: WebGLQuery, public ctx?: WebGLContext) {}\n\n  async end() {\n    return this.endCallback(this);\n  }\n\n  async checkTimer(): Promise<number> {\n    if (this.ctx === undefined || this.timer === undefined) {\n      throw new Error('No webgl timer found');\n    } else {\n      this.ctx.endTimer();\n      return this.ctx.waitForQueryAndGetTime(this.timer);\n    }\n  }\n}\n\nclass EventRecord {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number, public endTime: number) {}\n}\n\nexport class Profiler {\n  static create(config?: Profiler.Config): Profiler {\n    if (config === undefined) {\n      return new this();\n    }\n    return new this(config.maxNumberEvents, config.flushBatchSize, config.flushIntervalInMilliseconds);\n  }\n\n  private constructor(maxNumberEvents?: number, flushBatchSize?: number, flushIntervalInMilliseconds?: number) {\n    this._started = false;\n    this._maxNumberEvents = maxNumberEvents === undefined ? 10000 : maxNumberEvents;\n    this._flushBatchSize = flushBatchSize === undefined ? 10 : flushBatchSize;\n    this._flushIntervalInMilliseconds = flushIntervalInMilliseconds === undefined ? 5000 : flushIntervalInMilliseconds;\n  }\n\n  // start profiling\n  start() {\n    this._started = true;\n    this._timingEvents = [];\n    this._flushTime = now();\n    this._flushPointer = 0;\n  }\n\n  // stop profiling\n  stop() {\n    this._started = false;\n    for (; this._flushPointer < this._timingEvents.length; this._flushPointer++) {\n      this.logOneEvent(this._timingEvents[this._flushPointer]);\n    }\n  }\n\n  // create an event scope for the specific function\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T, ctx?: WebGLContext): T;\n  event<T>(category: Profiler.EventCategory, name: string, func: () => Promise<T>, ctx?: WebGLContext): Promise<T>;\n\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T | Promise<T>, ctx?: WebGLContext): T\n      |Promise<T> {\n    const event = this._started ? this.begin(category, name, ctx) : undefined;\n    let isPromise = false;\n\n    const res = func();\n\n    // we consider a then-able object is a promise\n    if (res && typeof (res as Promise<T>).then === 'function') {\n      isPromise = true;\n      return new Promise<T>((resolve, reject) => {\n        (res as Promise<T>)\n            .then(\n                async value => {  // fulfilled\n                  if (event) {\n                    await event.end();\n                  }\n                  resolve(value);\n                },\n                async reason => {  // rejected\n                  if (event) {\n                    await event.end();\n                  }\n                  reject(reason);\n                });\n      });\n    }\n    if (!isPromise && event) {\n      const eventRes = event.end();\n      if (eventRes && typeof eventRes.then === 'function') {\n        return new Promise<T>((resolve, reject) => {\n          (eventRes).then(\n              () => {  // fulfilled\n                resolve(res);\n              },\n              (reason) => {  // rejected\n                reject(reason);\n              });\n        });\n      }\n    }\n    return res;\n  }\n\n  // begin an event\n  begin(category: Profiler.EventCategory, name: string, ctx?: WebGLContext): Event {\n    if (!this._started) {\n      throw new Error('profiler is not started yet');\n    }\n    if (ctx === undefined) {\n      const startTime = now();\n      this.flush(startTime);\n      return new Event(category, name, startTime, e => this.endSync(e));\n    } else {\n      const timer: WebGLQuery = ctx.beginTimer();\n      return new Event(category, name, 0, async e => this.end(e), timer, ctx);\n    }\n  }\n\n  // end the specific event\n  private async end(event: Event): Promise<void> {\n    const endTime: number = await event.checkTimer();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private endSync(event: Event): void {\n    const endTime: number = now();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private logOneEvent(event: EventRecord) {\n    Logger.verbose(\n        `Profiler.${event.category}`,\n        `${(event.endTime - event.startTime).toFixed(2)}ms on event '${event.name}' at ${event.endTime.toFixed(2)}`);\n  }\n\n  private flush(currentTime: number) {\n    if (this._timingEvents.length - this._flushPointer >= this._flushBatchSize ||\n        currentTime - this._flushTime >= this._flushIntervalInMilliseconds) {\n      // should flush when either batch size accumlated or interval elepsed\n\n      for (const previousPointer = this._flushPointer; this._flushPointer < previousPointer + this._flushBatchSize &&\n           this._flushPointer < this._timingEvents.length;\n           this._flushPointer++) {\n        this.logOneEvent(this._timingEvents[this._flushPointer]);\n      }\n\n      this._flushTime = now();\n    }\n  }\n\n  get started() {\n    return this._started;\n  }\n  private _started = false;\n  private _timingEvents: EventRecord[];\n\n  private readonly _maxNumberEvents: number;\n\n  private readonly _flushBatchSize: number;\n  private readonly _flushIntervalInMilliseconds: number;\n\n  private _flushTime: number;\n  private _flushPointer = 0;\n}\n\n/**\n * returns a number to represent the current timestamp in a resolution as high as possible.\n */\nexport const now = (typeof performance !== 'undefined' && performance.now) ? () => performance.now() : Date.now;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\n\nimport {Graph} from './graph';\nimport {OpSet} from './opset';\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\nimport {onnx} from './ort-schema/protobuf/onnx';\nimport {LongUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport class Model {\n  // empty model\n  constructor() {}\n\n  load(buf: Uint8Array, graphInitializer?: Graph.Initializer, isOrtFormat?: boolean): void {\n    if (!isOrtFormat) {\n      // isOrtFormat === false || isOrtFormat === undefined\n      try {\n        this.loadFromOnnxFormat(buf, graphInitializer);\n        return;\n      } catch (e) {\n        if (isOrtFormat !== undefined) {\n          throw e;\n        }\n      }\n    }\n\n    this.loadFromOrtFormat(buf, graphInitializer);\n  }\n\n  private loadFromOnnxFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const modelProto = onnx.ModelProto.decode(buf);\n    const irVersion = LongUtil.longToNumber(modelProto.irVersion);\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n\n    this._opsets =\n        modelProto.opsetImport.map(i => ({domain: i.domain as string, version: LongUtil.longToNumber(i.version!)}));\n\n    this._graph = Graph.from(modelProto.graph!, graphInitializer);\n  }\n\n  private loadFromOrtFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const fb = new flatbuffers.ByteBuffer(buf);\n    const ortModel = ortFbs.InferenceSession.getRootAsInferenceSession(fb).model()!;\n    const irVersion = LongUtil.longToNumber(ortModel.irVersion());\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n    this._opsets = [];\n    for (let i = 0; i < ortModel.opsetImportLength(); i++) {\n      const opsetId = ortModel.opsetImport(i)!;\n      this._opsets.push({domain: opsetId?.domain() as string, version: LongUtil.longToNumber(opsetId.version()!)});\n    }\n\n    this._graph = Graph.from(ortModel.graph()!, graphInitializer);\n  }\n\n  private _graph: Graph;\n  get graph(): Graph {\n    return this._graph;\n  }\n\n  private _opsets: OpSet[];\n  get opsets(): readonly OpSet[] {\n    return this._opsets;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from './backend';\nimport {Graph} from './graph';\nimport {Tensor} from './tensor';\n\nexport type OperatorImplementation<T> = (inferenceHandler: InferenceHandler, inputs: Tensor[], context: T) => Tensor[];\nexport type OperatorInitialization<T> = (node: Graph.Node, graph: Graph) => T;\n\nexport interface Operator {\n  readonly impl: OperatorImplementation<unknown>;\n  readonly context: Graph.Node|unknown;\n}\n\nexport const NUMBER_TYPES: readonly Tensor.DataType[] =\n    ['float32', 'float64', 'int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const INT_TYPES: readonly Tensor.DataType[] = ['int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const FLOAT_TYPES: readonly Tensor.DataType[] = ['float32', 'float64'];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from './graph';\nimport {OperatorImplementation, OperatorInitialization} from './operators';\n\nexport interface OpSet {\n  domain: string;\n  version: number;\n}\nexport declare namespace OpSet {\n  /**\n   * Domain of an opset, it can be an empty string(default value, represent for ai.onnx), or 'ai.onnx.ml'\n   */\n  type Domain = ''|'ai.onnx.ml'|'com.microsoft';\n  /**\n   * A resolve rule consists of 4 or 5 items: opType, opSetDomain, versionSelector, operatorImplementation and\n   * operatorInitialization (optional)\n   */\n  type ResolveRule = [\n    string, Domain, string, OperatorImplementation<Graph.Node>\n  ]|[string, Domain, string, OperatorImplementation<unknown>, OperatorInitialization<unknown>];\n}\n\nexport function resolveOperator(node: Graph.Node, opsets: readonly OpSet[], rules: readonly OpSet.ResolveRule[]) {\n  for (const rule of rules) {\n    const opType = rule[0];\n    const domain = rule[1];\n    const versionSelector = rule[2];\n    const opImpl = rule[3];\n    const opInit = rule[4];\n\n    if (node.opType === opType) {  // operator type matches\n      for (const opset of opsets) {\n        // opset '' and 'ai.onnx' are considered the same.\n        if (opset.domain === domain || (opset.domain === 'ai.onnx' && domain === '')) {  // opset domain found\n          if (matchSelector(opset.version, versionSelector)) {\n            return {opImpl, opInit};\n          }\n        }\n      }\n    }\n  }\n\n  throw new TypeError(`cannot resolve operator '${node.opType}' with opsets: ${\n      opsets.map(set => `${set.domain || 'ai.onnx'} v${set.version}`).join(', ')}`);\n}\n\nfunction matchSelector(version: number, selector: string): boolean {\n  if (selector.endsWith('+')) {\n    // minimum version match ('7+' expects version>=7)\n    const rangeStart = Number.parseInt(selector.substring(0, selector.length - 1), 10);\n    return !isNaN(rangeStart) && rangeStart <= version;\n  } else if (selector.split('-').length === 2) {\n    // range match ('6-8' expects 6<=version<=8)\n    const pair = selector.split('-');\n    const rangeStart = Number.parseInt(pair[0], 10);\n    const rangeEnd = Number.parseInt(pair[1], 10);\n    return !isNaN(rangeStart) && !isNaN(rangeEnd) && rangeStart <= version && version <= rangeEnd;\n  } else {\n    // exact match ('7' expects version===7)\n    return Number.parseInt(selector, 10) === version;\n  }\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n/* eslint-disable */\n\nimport {flatbuffers} from 'flatbuffers';\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum AttributeType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    INT = 2,\n    STRING = 3,\n    TENSOR = 4,\n    GRAPH = 5,\n    FLOATS = 6,\n    INTS = 7,\n    STRINGS = 8,\n    TENSORS = 9,\n    GRAPHS = 10,\n    SPARSE_TENSOR = 11,\n    SPARSE_TENSORS = 12\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum DimensionValueType {UNKNOWN = 0, VALUE = 1, PARAM = 2}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TensorDataType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    UINT8 = 2,\n    INT8 = 3,\n    UINT16 = 4,\n    INT16 = 5,\n    INT32 = 6,\n    INT64 = 7,\n    STRING = 8,\n    BOOL = 9,\n    FLOAT16 = 10,\n    DOUBLE = 11,\n    UINT32 = 12,\n    UINT64 = 13,\n    COMPLEX64 = 14,\n    COMPLEX128 = 15,\n    BFLOAT16 = 16,\n    FLOAT8E4M3FN = 17,\n    FLOAT8E4M3FNUZ = 18,\n    FLOAT8E5M2 = 19,\n    FLOAT8E5M2FNUZ = 20,\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum NodeType {Primitive = 0, Fused = 1}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TypeInfoValue {NONE = 0, tensor_type = 1, sequence_type = 2, map_type = 3}\n}\n\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Shape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Shape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Shape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getSizePrefixedRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Dimension= obj\n     * @returns onnxruntime.experimental.fbs.Dimension\n     */\n    dim(index: number, obj?: onnxruntime.experimental.fbs.Dimension): onnxruntime.experimental.fbs.Dimension|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Dimension())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    dimLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startShape(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimOffset\n     */\n    static addDim(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, dimOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createShape(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Shape.startShape(builder);\n      Shape.addDim(builder, dimOffset);\n      return Shape.endShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Dimension {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Dimension\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Dimension {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getSizePrefixedRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.DimensionValue= obj\n     * @returns onnxruntime.experimental.fbs.DimensionValue|null\n     */\n    value(obj?: onnxruntime.experimental.fbs.DimensionValue): onnxruntime.experimental.fbs.DimensionValue|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.DimensionValue())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimension(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimension(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimension(\n        builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset,\n        denotationOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Dimension.startDimension(builder);\n      Dimension.addValue(builder, valueOffset);\n      Dimension.addDenotation(builder, denotationOffset);\n      return Dimension.endDimension(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class DimensionValue {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns DimensionValue\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DimensionValue {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getSizePrefixedRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.DimensionValueType\n     */\n    dimType(): onnxruntime.experimental.fbs.DimensionValueType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    dimValue(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    dimParam(): string|null;\n    dimParam(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    dimParam(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimensionValue(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.DimensionValueType dimType\n     */\n    static addDimType(builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType) {\n      builder.addFieldInt8(0, dimType, onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long dimValue\n     */\n    static addDimValue(builder: flatbuffers.Builder, dimValue: flatbuffers.Long) {\n      builder.addFieldInt64(1, dimValue, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimParamOffset\n     */\n    static addDimParam(builder: flatbuffers.Builder, dimParamOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimParamOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimensionValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimensionValue(\n        builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType,\n        dimValue: flatbuffers.Long, dimParamOffset: flatbuffers.Offset): flatbuffers.Offset {\n      DimensionValue.startDimensionValue(builder);\n      DimensionValue.addDimType(builder, dimType);\n      DimensionValue.addDimValue(builder, dimValue);\n      DimensionValue.addDimParam(builder, dimParamOffset);\n      return DimensionValue.endDimensionValue(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TensorTypeAndShape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TensorTypeAndShape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TensorTypeAndShape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape): TensorTypeAndShape {\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getSizePrefixedRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape):\n        TensorTypeAndShape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    elemType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Shape= obj\n     * @returns onnxruntime.experimental.fbs.Shape|null\n     */\n    shape(obj?: onnxruntime.experimental.fbs.Shape): onnxruntime.experimental.fbs.Shape|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Shape())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensorTypeAndShape(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType elemType\n     */\n    static addElemType(builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, elemType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset shapeOffset\n     */\n    static addShape(builder: flatbuffers.Builder, shapeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, shapeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensorTypeAndShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensorTypeAndShape(\n        builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType,\n        shapeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TensorTypeAndShape.startTensorTypeAndShape(builder);\n      TensorTypeAndShape.addElemType(builder, elemType);\n      TensorTypeAndShape.addShape(builder, shapeOffset);\n      return TensorTypeAndShape.endTensorTypeAndShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class MapType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns MapType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): MapType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getSizePrefixedRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    keyType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    valueType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startMapType(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType keyType\n     */\n    static addKeyType(builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, keyType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueTypeOffset\n     */\n    static addValueType(builder: flatbuffers.Builder, valueTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, valueTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endMapType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createMapType(\n        builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType,\n        valueTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      MapType.startMapType(builder);\n      MapType.addKeyType(builder, keyType);\n      MapType.addValueType(builder, valueTypeOffset);\n      return MapType.endMapType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SequenceType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SequenceType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SequenceType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getSizePrefixedRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    elemType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSequenceType(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset elemTypeOffset\n     */\n    static addElemType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, elemTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSequenceType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSequenceType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SequenceType.startSequenceType(builder);\n      SequenceType.addElemType(builder, elemTypeOffset);\n      return SequenceType.endSequenceType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class EdgeEnd {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns EdgeEnd\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): EdgeEnd {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      return this.bb!.readUint32(this.bb_pos);\n    }\n\n    /**\n     * @returns number\n     */\n    srcArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 4);\n    }\n\n    /**\n     * @returns number\n     */\n    dstArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number node_index\n     * @param number src_arg_index\n     * @param number dst_arg_index\n     * @returns flatbuffers.Offset\n     */\n    static createEdgeEnd(\n        builder: flatbuffers.Builder, node_index: number, src_arg_index: number,\n        dst_arg_index: number): flatbuffers.Offset {\n      builder.prep(4, 12);\n      builder.writeInt32(dst_arg_index);\n      builder.writeInt32(src_arg_index);\n      builder.writeInt32(node_index);\n      return builder.offset();\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class NodeEdge {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns NodeEdge\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): NodeEdge {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getSizePrefixedRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    inputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    outputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNodeEdge(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number nodeIndex\n     */\n    static addNodeIndex(builder: flatbuffers.Builder, nodeIndex: number) {\n      builder.addFieldInt32(0, nodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputEdgesOffset\n     */\n    static addInputEdges(builder: flatbuffers.Builder, inputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, inputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputEdgesOffset\n     */\n    static addOutputEdges(builder: flatbuffers.Builder, outputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, outputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNodeEdge(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNodeEdge(\n        builder: flatbuffers.Builder, nodeIndex: number, inputEdgesOffset: flatbuffers.Offset,\n        outputEdgesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      NodeEdge.startNodeEdge(builder);\n      NodeEdge.addNodeIndex(builder, nodeIndex);\n      NodeEdge.addInputEdges(builder, inputEdgesOffset);\n      NodeEdge.addOutputEdges(builder, outputEdgesOffset);\n      return NodeEdge.endNodeEdge(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Node {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Node\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Node {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getSizePrefixedRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    sinceVersion(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    index(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    opType(): string|null;\n    opType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    opType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.NodeType\n     */\n    type(): onnxruntime.experimental.fbs.NodeType {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.NodeType.Primitive;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    executionProviderType(): string|null;\n    executionProviderType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    executionProviderType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Attribute= obj\n     * @returns onnxruntime.experimental.fbs.Attribute\n     */\n    attributes(index: number, obj?: onnxruntime.experimental.fbs.Attribute): onnxruntime.experimental.fbs.Attribute\n        |null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Attribute())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    attributesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    inputArgCounts(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    inputArgCountsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Int32Array\n     */\n    inputArgCountsArray(): Int32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ?\n          new Int32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    implicitInputs(index: number): string;\n    implicitInputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    implicitInputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    implicitInputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNode(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number sinceVersion\n     */\n    static addSinceVersion(builder: flatbuffers.Builder, sinceVersion: number) {\n      builder.addFieldInt32(3, sinceVersion, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number index\n     */\n    static addIndex(builder: flatbuffers.Builder, index: number) {\n      builder.addFieldInt32(4, index, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opTypeOffset\n     */\n    static addOpType(builder: flatbuffers.Builder, opTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, opTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.NodeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.NodeType) {\n      builder.addFieldInt32(6, type, onnxruntime.experimental.fbs.NodeType.Primitive);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset executionProviderTypeOffset\n     */\n    static addExecutionProviderType(builder: flatbuffers.Builder, executionProviderTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, executionProviderTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset attributesOffset\n     */\n    static addAttributes(builder: flatbuffers.Builder, attributesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, attributesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createAttributesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startAttributesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputArgCountsOffset\n     */\n    static addInputArgCounts(builder: flatbuffers.Builder, inputArgCountsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, inputArgCountsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputArgCountsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputArgCountsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset implicitInputsOffset\n     */\n    static addImplicitInputs(builder: flatbuffers.Builder, implicitInputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, implicitInputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createImplicitInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startImplicitInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNode(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNode(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, sinceVersion: number, index: number, opTypeOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.NodeType, executionProviderTypeOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset, attributesOffset: flatbuffers.Offset,\n        inputArgCountsOffset: flatbuffers.Offset, implicitInputsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Node.startNode(builder);\n      Node.addName(builder, nameOffset);\n      Node.addDocString(builder, docStringOffset);\n      Node.addDomain(builder, domainOffset);\n      Node.addSinceVersion(builder, sinceVersion);\n      Node.addIndex(builder, index);\n      Node.addOpType(builder, opTypeOffset);\n      Node.addType(builder, type);\n      Node.addExecutionProviderType(builder, executionProviderTypeOffset);\n      Node.addInputs(builder, inputsOffset);\n      Node.addOutputs(builder, outputsOffset);\n      Node.addAttributes(builder, attributesOffset);\n      Node.addInputArgCounts(builder, inputArgCountsOffset);\n      Node.addImplicitInputs(builder, implicitInputsOffset);\n      return Node.endNode(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class ValueInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns ValueInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): ValueInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getSizePrefixedRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    type(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startValueInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset typeOffset\n     */\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, typeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endValueInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createValueInfo(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        typeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      ValueInfo.startValueInfo(builder);\n      ValueInfo.addName(builder, nameOffset);\n      ValueInfo.addDocString(builder, docStringOffset);\n      ValueInfo.addType(builder, typeOffset);\n      return ValueInfo.endValueInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TypeInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TypeInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TypeInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getSizePrefixedRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TypeInfoValue\n     */\n    valueType(): onnxruntime.experimental.fbs.TypeInfoValue {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TypeInfoValue.NONE;\n    }\n\n    /**\n     * @param flatbuffers.Table obj\n     * @returns ?flatbuffers.Table\n     */\n    value<T extends flatbuffers.Table>(obj: T): T|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTypeInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TypeInfoValue valueType\n     */\n    static addValueType(builder: flatbuffers.Builder, valueType: onnxruntime.experimental.fbs.TypeInfoValue) {\n      builder.addFieldInt8(1, valueType, onnxruntime.experimental.fbs.TypeInfoValue.NONE);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTypeInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTypeInfo(\n        builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset,\n        valueType: onnxruntime.experimental.fbs.TypeInfoValue, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TypeInfo.startTypeInfo(builder);\n      TypeInfo.addDenotation(builder, denotationOffset);\n      TypeInfo.addValueType(builder, valueType);\n      TypeInfo.addValue(builder, valueOffset);\n      return TypeInfo.endTypeInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class OperatorSetId {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns OperatorSetId\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): OperatorSetId {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getSizePrefixedRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    version(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startOperatorSetId(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: flatbuffers.Long) {\n      builder.addFieldInt64(1, version, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endOperatorSetId(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createOperatorSetId(\n        builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset, version: flatbuffers.Long): flatbuffers.Offset {\n      OperatorSetId.startOperatorSetId(builder);\n      OperatorSetId.addDomain(builder, domainOffset);\n      OperatorSetId.addVersion(builder, version);\n      return OperatorSetId.endOperatorSetId(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Tensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Tensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Tensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getSizePrefixedRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    dataType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    rawData(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    rawDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint8Array\n     */\n    rawDataArray(): Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ?\n          new Uint8Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    stringData(index: number): string;\n    stringData(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    stringData(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensor(builder: flatbuffers.Builder) {\n      builder.startObject(6);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType dataType\n     */\n    static addDataType(builder: flatbuffers.Builder, dataType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(3, dataType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset rawDataOffset\n     */\n    static addRawData(builder: flatbuffers.Builder, rawDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, rawDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createRawDataVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(1, data.length, 1);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt8(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startRawDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(1, numElems, 1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringDataOffset\n     */\n    static addStringData(builder: flatbuffers.Builder, stringDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, stringDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringDataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensor(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset, dataType: onnxruntime.experimental.fbs.TensorDataType,\n        rawDataOffset: flatbuffers.Offset, stringDataOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Tensor.startTensor(builder);\n      Tensor.addName(builder, nameOffset);\n      Tensor.addDocString(builder, docStringOffset);\n      Tensor.addDims(builder, dimsOffset);\n      Tensor.addDataType(builder, dataType);\n      Tensor.addRawData(builder, rawDataOffset);\n      Tensor.addStringData(builder, stringDataOffset);\n      return Tensor.endTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SparseTensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SparseTensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SparseTensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getSizePrefixedRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    values(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    indices(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSparseTensor(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valuesOffset\n     */\n    static addValues(builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valuesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset indicesOffset\n     */\n    static addIndices(builder: flatbuffers.Builder, indicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, indicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSparseTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSparseTensor(\n        builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset, indicesOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SparseTensor.startSparseTensor(builder);\n      SparseTensor.addValues(builder, valuesOffset);\n      SparseTensor.addIndices(builder, indicesOffset);\n      SparseTensor.addDims(builder, dimsOffset);\n      return SparseTensor.endSparseTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Attribute {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Attribute\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Attribute {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getSizePrefixedRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.AttributeType\n     */\n    type(): onnxruntime.experimental.fbs.AttributeType {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.AttributeType.UNDEFINED;\n    }\n\n    /**\n     * @returns number\n     */\n    f(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    i(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    s(): string|null;\n    s(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    s(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    t(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    g(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    floats(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    floatsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Float32Array\n     */\n    floatsArray(): Float32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ?\n          new Float32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    ints(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    intsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    strings(index: number): string;\n    strings(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    strings(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    tensors(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    tensorsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph\n     */\n    graphs(index: number, obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    graphsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startAttribute(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.AttributeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.AttributeType) {\n      builder.addFieldInt32(2, type, onnxruntime.experimental.fbs.AttributeType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number f\n     */\n    static addF(builder: flatbuffers.Builder, f: number) {\n      builder.addFieldFloat32(3, f, 0.0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long i\n     */\n    static addI(builder: flatbuffers.Builder, i: flatbuffers.Long) {\n      builder.addFieldInt64(4, i, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sOffset\n     */\n    static addS(builder: flatbuffers.Builder, sOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, sOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tOffset\n     */\n    static addT(builder: flatbuffers.Builder, tOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, tOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset gOffset\n     */\n    static addG(builder: flatbuffers.Builder, gOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, gOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset floatsOffset\n     */\n    static addFloats(builder: flatbuffers.Builder, floatsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, floatsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createFloatsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addFloat32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startFloatsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset intsOffset\n     */\n    static addInts(builder: flatbuffers.Builder, intsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, intsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createIntsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startIntsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringsOffset\n     */\n    static addStrings(builder: flatbuffers.Builder, stringsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, stringsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tensorsOffset\n     */\n    static addTensors(builder: flatbuffers.Builder, tensorsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, tensorsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createTensorsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startTensorsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphsOffset\n     */\n    static addGraphs(builder: flatbuffers.Builder, graphsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, graphsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createGraphsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startGraphsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endAttribute(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createAttribute(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.AttributeType, f: number, i: flatbuffers.Long, sOffset: flatbuffers.Offset,\n        tOffset: flatbuffers.Offset, gOffset: flatbuffers.Offset, floatsOffset: flatbuffers.Offset,\n        intsOffset: flatbuffers.Offset, stringsOffset: flatbuffers.Offset, tensorsOffset: flatbuffers.Offset,\n        graphsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Attribute.startAttribute(builder);\n      Attribute.addName(builder, nameOffset);\n      Attribute.addDocString(builder, docStringOffset);\n      Attribute.addType(builder, type);\n      Attribute.addF(builder, f);\n      Attribute.addI(builder, i);\n      Attribute.addS(builder, sOffset);\n      Attribute.addT(builder, tOffset);\n      Attribute.addG(builder, gOffset);\n      Attribute.addFloats(builder, floatsOffset);\n      Attribute.addInts(builder, intsOffset);\n      Attribute.addStrings(builder, stringsOffset);\n      Attribute.addTensors(builder, tensorsOffset);\n      Attribute.addGraphs(builder, graphsOffset);\n      return Attribute.endAttribute(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Graph {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Graph\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Graph {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getSizePrefixedRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    initializers(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    initializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.ValueInfo= obj\n     * @returns onnxruntime.experimental.fbs.ValueInfo\n     */\n    nodeArgs(index: number, obj?: onnxruntime.experimental.fbs.ValueInfo): onnxruntime.experimental.fbs.ValueInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.ValueInfo())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeArgsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Node= obj\n     * @returns onnxruntime.experimental.fbs.Node\n     */\n    nodes(index: number, obj?: onnxruntime.experimental.fbs.Node): onnxruntime.experimental.fbs.Node|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Node())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    maxNodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.NodeEdge= obj\n     * @returns onnxruntime.experimental.fbs.NodeEdge\n     */\n    nodeEdges(index: number, obj?: onnxruntime.experimental.fbs.NodeEdge): onnxruntime.experimental.fbs.NodeEdge|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? (obj || new onnxruntime.experimental.fbs.NodeEdge())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SparseTensor= obj\n     * @returns onnxruntime.experimental.fbs.SparseTensor\n     */\n    sparseInitializers(index: number, obj?: onnxruntime.experimental.fbs.SparseTensor):\n        onnxruntime.experimental.fbs.SparseTensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SparseTensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    sparseInitializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startGraph(builder: flatbuffers.Builder) {\n      builder.startObject(8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset initializersOffset\n     */\n    static addInitializers(builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, initializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeArgsOffset\n     */\n    static addNodeArgs(builder: flatbuffers.Builder, nodeArgsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, nodeArgsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeArgsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeArgsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodesOffset\n     */\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, nodesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number maxNodeIndex\n     */\n    static addMaxNodeIndex(builder: flatbuffers.Builder, maxNodeIndex: number) {\n      builder.addFieldInt32(3, maxNodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeEdgesOffset\n     */\n    static addNodeEdges(builder: flatbuffers.Builder, nodeEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, nodeEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeEdgesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sparseInitializersOffset\n     */\n    static addSparseInitializers(builder: flatbuffers.Builder, sparseInitializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, sparseInitializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSparseInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSparseInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endGraph(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createGraph(\n        builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset, nodeArgsOffset: flatbuffers.Offset,\n        nodesOffset: flatbuffers.Offset, maxNodeIndex: number, nodeEdgesOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset,\n        sparseInitializersOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Graph.startGraph(builder);\n      Graph.addInitializers(builder, initializersOffset);\n      Graph.addNodeArgs(builder, nodeArgsOffset);\n      Graph.addNodes(builder, nodesOffset);\n      Graph.addMaxNodeIndex(builder, maxNodeIndex);\n      Graph.addNodeEdges(builder, nodeEdgesOffset);\n      Graph.addInputs(builder, inputsOffset);\n      Graph.addOutputs(builder, outputsOffset);\n      Graph.addSparseInitializers(builder, sparseInitializersOffset);\n      return Graph.endGraph(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Model {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Model\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Model {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getSizePrefixedRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    irVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.OperatorSetId= obj\n     * @returns onnxruntime.experimental.fbs.OperatorSetId\n     */\n    opsetImport(index: number, obj?: onnxruntime.experimental.fbs.OperatorSetId):\n        onnxruntime.experimental.fbs.OperatorSetId|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.OperatorSetId())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    opsetImportLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerName(): string|null;\n    producerName(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerName(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerVersion(): string|null;\n    producerVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    modelVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    graph(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphDocString(): string|null;\n    graphDocString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphDocString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startModel(builder: flatbuffers.Builder) {\n      builder.startObject(9);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long irVersion\n     */\n    static addIrVersion(builder: flatbuffers.Builder, irVersion: flatbuffers.Long) {\n      builder.addFieldInt64(0, irVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opsetImportOffset\n     */\n    static addOpsetImport(builder: flatbuffers.Builder, opsetImportOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, opsetImportOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOpsetImportVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOpsetImportVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerNameOffset\n     */\n    static addProducerName(builder: flatbuffers.Builder, producerNameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, producerNameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerVersionOffset\n     */\n    static addProducerVersion(builder: flatbuffers.Builder, producerVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, producerVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long modelVersion\n     */\n    static addModelVersion(builder: flatbuffers.Builder, modelVersion: flatbuffers.Long) {\n      builder.addFieldInt64(5, modelVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphOffset\n     */\n    static addGraph(builder: flatbuffers.Builder, graphOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, graphOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphDocStringOffset\n     */\n    static addGraphDocString(builder: flatbuffers.Builder, graphDocStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, graphDocStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endModel(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createModel(\n        builder: flatbuffers.Builder, irVersion: flatbuffers.Long, opsetImportOffset: flatbuffers.Offset,\n        producerNameOffset: flatbuffers.Offset, producerVersionOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, modelVersion: flatbuffers.Long, docStringOffset: flatbuffers.Offset,\n        graphOffset: flatbuffers.Offset, graphDocStringOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Model.startModel(builder);\n      Model.addIrVersion(builder, irVersion);\n      Model.addOpsetImport(builder, opsetImportOffset);\n      Model.addProducerName(builder, producerNameOffset);\n      Model.addProducerVersion(builder, producerVersionOffset);\n      Model.addDomain(builder, domainOffset);\n      Model.addModelVersion(builder, modelVersion);\n      Model.addDocString(builder, docStringOffset);\n      Model.addGraph(builder, graphOffset);\n      Model.addGraphDocString(builder, graphDocStringOffset);\n      return Model.endModel(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class KernelCreateInfos {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns KernelCreateInfos\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): KernelCreateInfos {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos): KernelCreateInfos {\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getSizePrefixedRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos):\n        KernelCreateInfos {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    nodeIndices(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndicesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint32Array\n     */\n    nodeIndicesArray(): Uint32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ?\n          new Uint32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    kernelDefHashes(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readUint64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    kernelDefHashesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startKernelCreateInfos(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeIndicesOffset\n     */\n    static addNodeIndices(builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nodeIndicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeIndicesVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeIndicesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelDefHashesOffset\n     */\n    static addKernelDefHashes(builder: flatbuffers.Builder, kernelDefHashesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, kernelDefHashesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createKernelDefHashesVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startKernelDefHashesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endKernelCreateInfos(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createKernelCreateInfos(\n        builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset,\n        kernelDefHashesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      KernelCreateInfos.startKernelCreateInfos(builder);\n      KernelCreateInfos.addNodeIndices(builder, nodeIndicesOffset);\n      KernelCreateInfos.addKernelDefHashes(builder, kernelDefHashesOffset);\n      return KernelCreateInfos.endKernelCreateInfos(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SubGraphSessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SubGraphSessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SubGraphSessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState): SubGraphSessionState {\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getSizePrefixedRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState):\n        SubGraphSessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphId(): string|null;\n    graphId(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphId(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSubGraphSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphIdOffset\n     */\n    static addGraphId(builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, graphIdOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSubGraphSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      builder.requiredField(offset, 4);  // graph_id\n      return offset;\n    }\n\n    static createSubGraphSessionState(\n        builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SubGraphSessionState.startSubGraphSessionState(builder);\n      SubGraphSessionState.addGraphId(builder, graphIdOffset);\n      SubGraphSessionState.addSessionState(builder, sessionStateOffset);\n      return SubGraphSessionState.endSubGraphSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getSizePrefixedRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.KernelCreateInfos= obj\n     * @returns onnxruntime.experimental.fbs.KernelCreateInfos|null\n     */\n    kernels(obj?: onnxruntime.experimental.fbs.KernelCreateInfos): onnxruntime.experimental.fbs.KernelCreateInfos|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.KernelCreateInfos())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SubGraphSessionState= obj\n     * @returns onnxruntime.experimental.fbs.SubGraphSessionState\n     */\n    subGraphSessionStates(index: number, obj?: onnxruntime.experimental.fbs.SubGraphSessionState):\n        onnxruntime.experimental.fbs.SubGraphSessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SubGraphSessionState())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    subGraphSessionStatesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelsOffset\n     */\n    static addKernels(builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, kernelsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset subGraphSessionStatesOffset\n     */\n    static addSubGraphSessionStates(builder: flatbuffers.Builder, subGraphSessionStatesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, subGraphSessionStatesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSubGraphSessionStatesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSubGraphSessionStatesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSessionState(\n        builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset,\n        subGraphSessionStatesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SessionState.startSessionState(builder);\n      SessionState.addKernels(builder, kernelsOffset);\n      SessionState.addSubGraphSessionStates(builder, subGraphSessionStatesOffset);\n      return SessionState.endSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class InferenceSession {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns InferenceSession\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): InferenceSession {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getSizePrefixedRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @returns boolean\n     */\n    static bufferHasIdentifier(bb: flatbuffers.ByteBuffer): boolean {\n      return bb.__has_identifier('ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    ortVersion(): string|null;\n    ortVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    ortVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Model= obj\n     * @returns onnxruntime.experimental.fbs.Model|null\n     */\n    model(obj?: onnxruntime.experimental.fbs.Model): onnxruntime.experimental.fbs.Model|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Model())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startInferenceSession(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset ortVersionOffset\n     */\n    static addOrtVersion(builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, ortVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset modelOffset\n     */\n    static addModel(builder: flatbuffers.Builder, modelOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, modelOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endInferenceSession(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishSizePrefixedInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM', true);\n    }\n\n    static createInferenceSession(\n        builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset, modelOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      InferenceSession.startInferenceSession(builder);\n      InferenceSession.addOrtVersion(builder, ortVersionOffset);\n      InferenceSession.addModel(builder, modelOffset);\n      InferenceSession.addSessionState(builder, sessionStateOffset);\n      return InferenceSession.endInferenceSession(builder);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\n\nimport {Session} from './session';\nimport {Tensor as OnnxjsTensor} from './tensor';\n\nexport class OnnxjsSessionHandler implements SessionHandler {\n  constructor(private session: Session) {\n    this.inputNames = this.session.inputNames;\n    this.outputNames = this.session.outputNames;\n  }\n\n  async dispose(): Promise<void> {}\n  inputNames: readonly string[];\n  outputNames: readonly string[];\n  async run(\n      feeds: SessionHandler.FeedsType, _fetches: SessionHandler.FetchesType,\n      _options: InferenceSession.RunOptions): Promise<SessionHandler.ReturnType> {\n    const inputMap = new Map<string, OnnxjsTensor>();\n    for (const name in feeds) {\n      if (Object.hasOwnProperty.call(feeds, name)) {\n        const feed = feeds[name];\n        inputMap.set(\n            name,\n            new OnnxjsTensor(\n                feed.dims, feed.type as OnnxjsTensor.DataType, undefined, undefined,\n                feed.data as OnnxjsTensor.NumberType));\n      }\n    }\n    const outputMap = await this.session.run(inputMap);\n    const output: SessionHandler.ReturnType = {};\n    outputMap.forEach((tensor, name) => {\n      output[name] = new Tensor(tensor.type, tensor.data, tensor.dims);\n    });\n    return output;\n  }\n  startProfiling(): void {\n    this.session.startProfiling();\n  }\n  endProfiling(): void {\n    this.session.endProfiling();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {promisify} from 'util';\n\nimport {resolveBackend, SessionHandlerType} from './backend';\nimport {ExecutionPlan} from './execution-plan';\nimport {Graph} from './graph';\nimport {Profiler} from './instrument';\nimport {Model} from './model';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nexport declare namespace Session {\n  export interface Config {\n    backendHint?: string;\n    profiler?: Profiler.Config;\n  }\n\n  export interface Context {\n    profiler: Readonly<Profiler>;\n    graphInputTypes?: Tensor.DataType[];\n    graphInputDims?: Array<readonly number[]>;\n  }\n}\n\nexport class Session {\n  constructor(config: Session.Config = {}) {\n    this._initialized = false;\n    this.backendHint = config.backendHint;\n    this.profiler = Profiler.create(config.profiler);\n    this.context = {profiler: this.profiler, graphInputTypes: [], graphInputDims: []};\n  }\n\n  get inputNames(): readonly string[] {\n    return this._model.graph.getInputNames();\n  }\n  get outputNames(): readonly string[] {\n    return this._model.graph.getOutputNames();\n  }\n\n  startProfiling() {\n    this.profiler.start();\n  }\n\n  endProfiling() {\n    this.profiler.stop();\n  }\n\n  async loadModel(uri: string): Promise<void>;\n  async loadModel(buffer: ArrayBuffer, byteOffset?: number, length?: number): Promise<void>;\n  async loadModel(buffer: Uint8Array): Promise<void>;\n  async loadModel(arg: string|ArrayBuffer|Uint8Array, byteOffset?: number, length?: number): Promise<void> {\n    await this.profiler.event('session', 'Session.loadModel', async () => {\n      // resolve backend and session handler\n      const backend = await resolveBackend(this.backendHint);\n      this.sessionHandler = backend.createSessionHandler(this.context);\n\n      this._model = new Model();\n      if (typeof arg === 'string') {\n        const isOrtFormat = arg.endsWith('.ort');\n        if (typeof process !== 'undefined' && process.versions && process.versions.node) {\n          // node\n          const buf = await promisify(readFile)(arg);\n          this.initialize(buf, isOrtFormat);\n        } else {\n          // browser\n          const response = await fetch(arg);\n          const buf = await response.arrayBuffer();\n          this.initialize(new Uint8Array(buf), isOrtFormat);\n        }\n      } else if (!ArrayBuffer.isView(arg)) {\n        // load model from ArrayBuffer\n        const arr = new Uint8Array(arg, byteOffset || 0, length || arg.byteLength);\n        this.initialize(arr);\n      } else {\n        // load model from Uint8array\n        this.initialize(arg);\n      }\n    });\n  }\n\n  private initialize(modelProtoBlob: Uint8Array, isOrtFormat?: boolean): void {\n    if (this._initialized) {\n      throw new Error('already initialized');\n    }\n\n    this.profiler.event('session', 'Session.initialize', () => {\n      // load graph\n      const graphInitializer =\n          this.sessionHandler.transformGraph ? this.sessionHandler as Graph.Initializer : undefined;\n      this._model.load(modelProtoBlob, graphInitializer, isOrtFormat);\n\n      // graph is completely initialzied at this stage , let the interested handlers know\n      if (this.sessionHandler.onGraphInitialized) {\n        this.sessionHandler.onGraphInitialized(this._model.graph);\n      }\n      // initialize each operator in the graph\n      this.initializeOps(this._model.graph);\n\n      // instantiate an ExecutionPlan object to be used by the Session object\n      this._executionPlan = new ExecutionPlan(this._model.graph, this._ops, this.profiler);\n    });\n\n    this._initialized = true;\n  }\n\n  async run(inputs: Map<string, Tensor>|Tensor[]): Promise<Map<string, Tensor>> {\n    if (!this._initialized) {\n      throw new Error('session not initialized yet');\n    }\n\n    return this.profiler.event('session', 'Session.run', async () => {\n      const inputTensors = this.normalizeAndValidateInputs(inputs);\n\n      const outputTensors = await this._executionPlan.execute(this.sessionHandler, inputTensors);\n\n      return this.createOutput(outputTensors);\n    });\n  }\n\n  private normalizeAndValidateInputs(inputs: Map<string, Tensor>|Tensor[]): Tensor[] {\n    const modelInputNames = this._model.graph.getInputNames();\n\n    // normalize inputs\n    // inputs: Tensor[]\n    if (Array.isArray(inputs)) {\n      if (inputs.length !== modelInputNames.length) {\n        throw new Error(`incorrect input array length: expected ${modelInputNames.length} but got ${inputs.length}`);\n      }\n    }\n    // convert map to array\n    // inputs: Map<string, Tensor>\n    else {\n      if (inputs.size !== modelInputNames.length) {\n        throw new Error(`incorrect input map size: expected ${modelInputNames.length} but got ${inputs.size}`);\n      }\n\n      const sortedInputs = new Array<Tensor>(inputs.size);\n      let sortedInputsIndex = 0;\n      for (let i = 0; i < modelInputNames.length; ++i) {\n        const tensor = inputs.get(modelInputNames[i]);\n        if (!tensor) {\n          throw new Error(`missing input tensor for: '${name}'`);\n        }\n        sortedInputs[sortedInputsIndex++] = tensor;\n      }\n\n      inputs = sortedInputs;\n    }\n\n    // validate dims requirements\n    // First session run - graph input data is not cached for the session\n    if (!this.context.graphInputTypes || this.context.graphInputTypes.length === 0 || !this.context.graphInputDims ||\n        this.context.graphInputDims.length === 0) {\n      const modelInputIndices = this._model.graph.getInputIndices();\n      const modelValues = this._model.graph.getValues();\n\n      const graphInputDims = new Array<readonly number[]>(modelInputIndices.length);\n\n      for (let i = 0; i < modelInputIndices.length; ++i) {\n        const graphInput = modelValues[modelInputIndices[i]];\n        graphInputDims[i] = graphInput.type!.shape.dims;\n\n        // cached for second and subsequent runs.\n        // Some parts of the framework works on the assumption that the graph and types and shapes are static\n        this.context.graphInputTypes!.push(graphInput.type!.tensorType);\n        this.context.graphInputDims!.push(inputs[i].dims);\n      }\n\n      this.validateInputTensorDims(graphInputDims, inputs, true);\n    }\n\n    // Second and subsequent session runs - graph input data is cached for the session\n    else {\n      this.validateInputTensorDims(this.context.graphInputDims, inputs, false);\n    }\n\n    // validate types requirement\n    this.validateInputTensorTypes(this.context.graphInputTypes!, inputs);\n\n    return inputs;\n  }\n\n  private validateInputTensorTypes(graphInputTypes: Tensor.DataType[], givenInputs: Tensor[]) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedType = graphInputTypes[i];\n      const actualType = givenInputs[i].type;\n      if (expectedType !== actualType) {\n        throw new Error(`input tensor[${i}] check failed: expected type '${expectedType}' but got ${actualType}`);\n      }\n    }\n  }\n\n  private validateInputTensorDims(\n      graphInputDims: Array<readonly number[]>, givenInputs: Tensor[], noneDimSupported: boolean) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      let expectedDims = graphInputDims[i];\n      const actualDims = givenInputs[i].dims;\n\n      if (!this.compareTensorDims(expectedDims, actualDims, noneDimSupported)) {\n        throw new Error(`input tensor[${i}] check failed: expected shape '[${expectedDims.join(',')}]' but got [${\n            actualDims.join(',')}]`);\n      }\n    }\n  }\n\n  private compareTensorDims(expectedDims: readonly number[], actualDims: readonly number[], noneDimSupported: boolean):\n      boolean {\n    if (expectedDims.length !== actualDims.length) {\n      return false;\n    }\n\n    for (let i = 0; i < expectedDims.length; ++i) {\n      if (expectedDims[i] !== actualDims[i] && (!noneDimSupported || expectedDims[i] !== 0) && expectedDims[i] !== null) {\n        // data shape mis-match AND not a 'None' dimension.\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private createOutput(outputTensors: Tensor[]): Map<string, Tensor> {\n    const modelOutputNames = this._model.graph.getOutputNames();\n    if (outputTensors.length !== modelOutputNames.length) {\n      throw new Error('expected number of outputs do not match number of generated outputs');\n    }\n\n    const output = new Map<string, Tensor>();\n    for (let i = 0; i < modelOutputNames.length; ++i) {\n      output.set(modelOutputNames[i], outputTensors[i]);\n    }\n\n    return output;\n  }\n\n  private initializeOps(graph: Graph): void {\n    const nodes = graph.getNodes();\n    this._ops = new Array(nodes.length);\n\n    for (let i = 0; i < nodes.length; i++) {\n      this._ops[i] = this.sessionHandler.resolve(nodes[i], this._model.opsets, graph);\n    }\n  }\n\n  private _model: Model;\n  private _initialized: boolean;\n\n  private _ops: Operator[];\n  private _executionPlan: ExecutionPlan;\n\n  private backendHint?: string;\n\n  private sessionHandler: SessionHandlerType;\n  private context: Session.Context;\n  private profiler: Readonly<Profiler>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Guid} from 'guid-typescript';\nimport Long from 'long';\n\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\nimport {onnx} from './ort-schema/protobuf/onnx';\nimport {decodeUtf8String, ProtoUtil, ShapeUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Tensor {\n  export interface DataTypeMap {\n    bool: Uint8Array;\n    float32: Float32Array;\n    float64: Float64Array;\n    string: string[];\n    int8: Int8Array;\n    uint8: Uint8Array;\n    int16: Int16Array;\n    uint16: Uint16Array;\n    int32: Int32Array;\n    uint32: Uint32Array;\n  }\n\n  export type DataType = keyof DataTypeMap;\n\n  export type StringType = Tensor.DataTypeMap['string'];\n  export type BooleanType = Tensor.DataTypeMap['bool'];\n  export type IntegerType = Tensor.DataTypeMap['int8']|Tensor.DataTypeMap['uint8']|Tensor.DataTypeMap['int16']|\n                            Tensor.DataTypeMap['uint16']|Tensor.DataTypeMap['int32']|Tensor.DataTypeMap['uint32'];\n  export type FloatType = Tensor.DataTypeMap['float32']|Tensor.DataTypeMap['float64'];\n  export type NumberType = BooleanType|IntegerType|FloatType;\n\n  export type Id = Guid;\n}\n\ntype TensorData = Tensor.DataTypeMap[Tensor.DataType];\n\ntype DataProvider = (id: Tensor.Id) => TensorData;\ntype AsyncDataProvider = (id: Tensor.Id) => Promise<TensorData>;\n\nexport class Tensor {\n  /**\n   * get the underlying tensor data\n   */\n  get data(): TensorData {\n    if (this.cache === undefined) {\n      const data = this.dataProvider!(this.dataId);\n      if (data.length !== this.size) {\n        throw new Error('Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.');\n      }\n      this.cache = data;\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the underlying string tensor data. Should only use when type is STRING\n   */\n  get stringData() {\n    if (this.type !== 'string') {\n      throw new TypeError('data type is not string');\n    }\n\n    return this.data as Tensor.StringType;\n  }\n\n  /**\n   * get the underlying integer tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL)\n   */\n  get integerData() {\n    switch (this.type) {\n      case 'uint8':\n      case 'int8':\n      case 'uint16':\n      case 'int16':\n      case 'int32':\n      case 'uint32':\n      case 'bool':\n        return this.data as Tensor.IntegerType;\n\n      default:\n        throw new TypeError('data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)');\n    }\n  }\n\n  /**\n   * get the underlying float tensor data. Should only use when type is one of the following: (FLOAT, DOUBLE)\n   */\n  get floatData() {\n    switch (this.type) {\n      case 'float32':\n      case 'float64':\n        return this.data as Tensor.FloatType;\n\n      default:\n        throw new TypeError('data type is not float (float32, float64)');\n    }\n  }\n\n  /**\n   * get the underlying number tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL, FLOAT, DOUBLE)\n   */\n  get numberData() {\n    if (this.type !== 'string') {\n      return this.data as Tensor.NumberType;\n    }\n    throw new TypeError('type cannot be non-number (string)');\n  }\n\n  /**\n   * get value of an element at the given indices\n   */\n  get(indices: readonly number[]): Tensor.DataTypeMap[Tensor.DataType][number] {\n    return this.data[ShapeUtil.indicesToOffset(indices, this.strides)];\n  }\n\n  /**\n   * set value of an element at the given indices\n   */\n  set(indices: readonly number[], value: Tensor.DataTypeMap[Tensor.DataType][number]) {\n    this.data[ShapeUtil.indicesToOffset(indices, this.strides)] = value;\n  }\n\n  /**\n   * get the underlying tensor data asynchronously\n   */\n  async getData(): Promise<TensorData> {\n    if (this.cache === undefined) {\n      this.cache = await this.asyncDataProvider!(this.dataId);\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the number of elements in the tensor\n   */\n  public readonly size: number;\n\n  private _strides: readonly number[];\n  /**\n   * get the strides for each dimension\n   */\n  get strides(): readonly number[] {\n    if (!this._strides) {\n      this._strides = ShapeUtil.computeStrides(this.dims);\n    }\n    return this._strides;\n  }\n\n  constructor(\n      /**\n       * get the dimensions of the tensor\n       */\n      public readonly dims: readonly number[],\n      /**\n       * get the type of the tensor\n       */\n      public readonly type: Tensor.DataType, private dataProvider?: DataProvider,\n      private asyncDataProvider?: AsyncDataProvider, private cache?: TensorData,\n      /**\n       * get the data ID that used to map to a tensor data\n       */\n      public readonly dataId: Guid = Guid.create()) {\n    this.size = ShapeUtil.validateDimsAndCalcSize(dims);\n    const size = this.size;\n    const empty = (dataProvider === undefined && asyncDataProvider === undefined && cache === undefined);\n\n    if (cache !== undefined) {\n      if (cache.length !== size) {\n        throw new RangeError('Input dims doesn\\'t match data length.');\n      }\n    }\n\n    if (type === 'string') {\n      if (cache !== undefined && (!Array.isArray(cache) || !cache.every(i => typeof i === 'string'))) {\n        throw new TypeError('cache should be a string array');\n      }\n\n      if (empty) {\n        this.cache = new Array<string>(size);\n      }\n    } else {\n      if (cache !== undefined) {\n        const constructor = dataviewConstructor(type);\n        if (!(cache instanceof constructor)) {\n          throw new TypeError(`cache should be type ${constructor.name}`);\n        }\n      }\n\n      if (empty) {\n        const buf = new ArrayBuffer(size * sizeof(type));\n        this.cache = createView(buf, type);\n      }\n    }\n  }\n\n  /**\n   * Construct new Tensor from a ONNX Tensor object\n   * @param tensorProto the ONNX Tensor\n   */\n  static fromProto(tensorProto: onnx.ITensorProto): Tensor {\n    if (!tensorProto) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const type = ProtoUtil.tensorDataTypeFromProto(tensorProto.dataType!);\n    const dims = ProtoUtil.tensorDimsFromProto(tensorProto.dims!);\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      tensorProto.stringData!.forEach((str, i) => {\n        value.data[i] = decodeUtf8String(str);\n      });\n\n    } else if (\n        tensorProto.rawData && typeof tensorProto.rawData.byteLength === 'number' &&\n        tensorProto.rawData.byteLength > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource =\n          new DataView(tensorProto.rawData.buffer, tensorProto.rawData.byteOffset, tensorProto.rawData.byteLength);\n      const elementSize = sizeofProto(tensorProto.dataType!);\n      const length = tensorProto.rawData.byteLength / elementSize;\n\n      if (tensorProto.rawData.byteLength % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, tensorProto.dataType!, i * elementSize);\n        dataDest[i] = n;\n      }\n    } else {\n      // populate value from array\n      let array: Array<number|Long>;\n      switch (tensorProto.dataType) {\n        case onnx.TensorProto.DataType.FLOAT:\n          array = tensorProto.floatData!;\n          break;\n        case onnx.TensorProto.DataType.INT32:\n        case onnx.TensorProto.DataType.INT16:\n        case onnx.TensorProto.DataType.UINT16:\n        case onnx.TensorProto.DataType.INT8:\n        case onnx.TensorProto.DataType.UINT8:\n        case onnx.TensorProto.DataType.BOOL:\n          array = tensorProto.int32Data!;\n          break;\n        case onnx.TensorProto.DataType.INT64:\n          array = tensorProto.int64Data!;\n          break;\n        case onnx.TensorProto.DataType.DOUBLE:\n          array = tensorProto.doubleData!;\n          break;\n        case onnx.TensorProto.DataType.UINT32:\n        case onnx.TensorProto.DataType.UINT64:\n          array = tensorProto.uint64Data!;\n          break;\n        default:\n          // should never run here\n          throw new Error('unspecific error');\n      }\n\n      if (array === null || array === undefined) {\n        throw new Error('failed to populate data from a tensorproto value');\n      }\n\n      const data = value.data;\n      if (data.length !== array.length) {\n        throw new Error('array length mismatch');\n      }\n\n      for (let i = 0; i < array.length; i++) {\n        const element = array[i];\n        if (Long.isLong(element)) {\n          data[i] = longToNumber(element, tensorProto.dataType);\n        } else {\n          data[i] = element;\n        }\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Construct new Tensor from raw data\n   * @param data the raw data object. Should be a string array for 'string' tensor, and the corresponding typed array\n   * for other types of tensor.\n   * @param dims the dimensions of the tensor\n   * @param type the type of the tensor\n   */\n  static fromData(data: Tensor.DataTypeMap[Tensor.DataType], dims: readonly number[], type: Tensor.DataType) {\n    return new Tensor(dims, type, undefined, undefined, data);\n  }\n\n  static fromOrtTensor(ortTensor: ortFbs.Tensor) {\n    if (!ortTensor) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const dims = ProtoUtil.tensorDimsFromORTFormat(ortTensor);\n    const type = ProtoUtil.tensorDataTypeFromProto(ortTensor.dataType());\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      for (let i = 0; i < ortTensor.stringDataLength(); i++) {\n        value.data[i] = ortTensor.stringData(i);\n      }\n\n    } else if (\n        ortTensor.rawDataArray() && typeof ortTensor.rawDataLength() === 'number' && ortTensor.rawDataLength() > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource = new DataView(\n          ortTensor.rawDataArray()!.buffer, ortTensor.rawDataArray()!.byteOffset, ortTensor.rawDataLength());\n      const elementSize = sizeofProto(ortTensor.dataType());\n      const length = ortTensor.rawDataLength() / elementSize;\n\n      if (ortTensor.rawDataLength() % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, ortTensor.dataType(), i * elementSize);\n        dataDest[i] = n;\n      }\n    }\n    return value;\n  }\n}\n\nfunction sizeof(type: Tensor.DataType): number {\n  switch (type) {\n    case 'bool':\n    case 'int8':\n    case 'uint8':\n      return 1;\n    case 'int16':\n    case 'uint16':\n      return 2;\n    case 'int32':\n    case 'uint32':\n    case 'float32':\n      return 4;\n    case 'float64':\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${type}`);\n  }\n}\n\nfunction sizeofProto(type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.UINT8:\n    case onnx.TensorProto.DataType.INT8:\n    case onnx.TensorProto.DataType.BOOL:\n      return 1;\n    case onnx.TensorProto.DataType.UINT16:\n    case onnx.TensorProto.DataType.INT16:\n      return 2;\n    case onnx.TensorProto.DataType.FLOAT:\n    case onnx.TensorProto.DataType.INT32:\n    case onnx.TensorProto.DataType.UINT32:\n      return 4;\n    case onnx.TensorProto.DataType.INT64:\n    case onnx.TensorProto.DataType.DOUBLE:\n    case onnx.TensorProto.DataType.UINT64:\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n\nfunction createView(dataBuffer: ArrayBuffer, type: Tensor.DataType) {\n  return new (dataviewConstructor(type))(dataBuffer);\n}\n\nfunction dataviewConstructor(type: Tensor.DataType) {\n  switch (type) {\n    case 'bool':\n    case 'uint8':\n      return Uint8Array;\n    case 'int8':\n      return Int8Array;\n    case 'int16':\n      return Int16Array;\n    case 'uint16':\n      return Uint16Array;\n    case 'int32':\n      return Int32Array;\n    case 'uint32':\n      return Uint32Array;\n    case 'float32':\n      return Float32Array;\n    case 'float64':\n      return Float64Array;\n    default:\n      // should never run to here\n      throw new Error('unspecified error');\n  }\n}\n\n// convert a long number to a 32-bit integer (cast-down)\nfunction longToNumber(i: Long, type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  // INT64, UINT32, UINT64\n  if (type === onnx.TensorProto.DataType.INT64 || type === ortFbs.TensorDataType.INT64) {\n    if (i.greaterThanOrEqual(2147483648) || i.lessThan(-2147483648)) {\n      throw new TypeError('int64 is not supported');\n    }\n  } else if (\n      type === onnx.TensorProto.DataType.UINT32 || type === ortFbs.TensorDataType.UINT32 ||\n      type === onnx.TensorProto.DataType.UINT64 || type === ortFbs.TensorDataType.UINT64) {\n    if (i.greaterThanOrEqual(4294967296) || i.lessThan(0)) {\n      throw new TypeError('uint64 is not supported');\n    }\n  } else {\n    throw new TypeError(`not a LONG type: ${onnx.TensorProto.DataType[type]}`);\n  }\n\n  return i.toNumber();\n}\n\n// read one value from TensorProto\nfunction readProto(view: DataView, type: onnx.TensorProto.DataType|ortFbs.TensorDataType, byteOffset: number): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.BOOL:\n    case onnx.TensorProto.DataType.UINT8:\n      return view.getUint8(byteOffset);\n    case onnx.TensorProto.DataType.INT8:\n      return view.getInt8(byteOffset);\n    case onnx.TensorProto.DataType.UINT16:\n      return view.getUint16(byteOffset, true);\n    case onnx.TensorProto.DataType.INT16:\n      return view.getInt16(byteOffset, true);\n    case onnx.TensorProto.DataType.FLOAT:\n      return view.getFloat32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT32:\n      return view.getInt32(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT32:\n      return view.getUint32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), false), type);\n    case onnx.TensorProto.DataType.DOUBLE:\n      return view.getFloat64(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), true), type);\n    default:\n      throw new Error(`cannot read from DataView for type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\nimport Long from 'long';\n\nimport {Graph} from './graph';\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\nimport {onnx} from './ort-schema/protobuf/onnx';\nimport {Tensor} from './tensor';\n\n// check the inputs shape before running an OP.\n// return true when the inputs pass the check\n// return false when the inputs do not fit the requirement\n// throw exception when fatal error or not implemented\nexport function checkInputsShape(inputs: Tensor[], ...expectedDimensions: number[]): boolean {\n  if (!inputs || inputs.length !== expectedDimensions.length) {\n    return false;\n  }\n  for (let i = 0; i < inputs.length; i++) {\n    if (!inputs[i].dims || inputs[i].dims.length !== expectedDimensions[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Evaluates the given expression and asserts error message if condition is unmet.\nexport function assert(expr: boolean, msg: () => string) {\n  if (!expr) {\n    throw new Error(typeof msg === 'string' ? msg : msg());\n  }\n}\n\nexport class ArrayUtil {\n  /**\n   * Verifies if 2 input arrays contain the same elements.\n   * @param n1 Array 1\n   * @param n2 Array 2\n   * @returns Whether these 2 are equal\n   */\n  static arraysEqual(\n      n1: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array,\n      n2: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array) {\n    if (n1.length !== n2.length) {\n      return false;\n    }\n    for (let i = 0; i < n1.length; i++) {\n      if (n1[i] !== n2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nexport class MatMulUtil {\n  /**\n   * Fix the input shapes for MatMul operation if they need fixing\n   * @param dimsA The shape of tensor A. Should be an array of positive integers\n   * @param dimsB The shape of tensor B. Should be an array of positive integers\n   * @returns A tuple containing the preprocessed input shapes as required by ONNX specifications\n   */\n  static preprocessInputShapes(dimsA: readonly number[], dimsB: readonly number[]):\n      [readonly number[], readonly number[]] {\n    // If the first argument is 1-D, it is promoted to a matrix by prepending\n    // a 1 to its dimensions. After matrix multiplication the prepended 1 is\n    // removed.\n    const a = (dimsA.length === 1) ? [1, dimsA[0]] : dimsA;\n\n    // If the second argument is 1-D, it is promoted to a matrix by appending\n    // a 1 to its dimensions. After matrix multiplication the appended 1 is\n    // removed.\n    const b = (dimsB.length === 1) ? [dimsB[0], 1] : dimsB;\n\n    return [a, b];\n  }\n\n  /**\n   * Fix the output shape computed for MatMul operation if it needs fixing\n   * @param outputShape The computed outputShape. Should be an array (atleast of length 2) of positive integers.\n   * This will be mutated.\n   * @param aRank The rank of tensor A.\n   * @param bRank The rank of tensor B.\n   */\n  static postprocessOutputShape(outputShape: number[], aRank: number, bRank: number) {\n    // Remove prepended dimension if first input is 1d\n    if (aRank === 1) {\n      // outputShape = outputShape.slice(0, outputShape.length - 2).concat(outputShape.slice(outputShape.length - 1));\n      outputShape.splice(outputShape.length - 2, 1);\n    }\n    // Remove appended dimension if second input is 1d\n    if (bRank === 1) {\n      outputShape.pop();\n    }\n  }\n\n  /**\n   * Calculate the expected shape when matrix multiplication\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\n  }\n}\n\nexport class BroadcastUtil {\n  /**\n   * Calculate the expected shape when broadcasting 2 tensors\n   * @param a The shape of tensor A. Should be an array of positive integers\n   * @param b The shape of tensor B. Should be an array of positive integers\n   * @param isMatMul Whether the operation is MatMul\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcShape(adims: readonly number[], bdims: readonly number[], isMatMul = false): readonly number[]|undefined {\n    const arank = adims.length;\n    const brank = bdims.length;\n    if (arank === 0) {\n      return bdims;\n    }\n    if (brank === 0) {\n      return adims;\n    }\n    const crank = Math.max(adims.length, bdims.length);\n    const cdims = new Array<number>(crank);\n\n    // calculate the last 2 dimension if it is MatMul\n    if (isMatMul) {\n      if (arank < 2 || brank < 2) {\n        return undefined;\n      }\n      const cShapeMatMul =\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\n      if (cShapeMatMul === undefined) {\n        return undefined;\n      }\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\n    }\n\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\n\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\n        return undefined;\n      }\n      cdims[crank - i] = Math.max(aLen, bLen);\n    }\n\n    return cdims;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcas\n   * @returns The calculated indices that maps to the original tensor.\n   */\n  static index(broadcastedIndices: readonly number[], originalShape: readonly number[]): number[] {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same\n    // length as the broadcasted shape, and for each dimension the index should\n    // not be out of range.\n    const originalIndices = new Array(originalShape.length);\n    BroadcastUtil.fillIndex(broadcastedIndices, originalShape, originalIndices);\n    return originalIndices;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcast\n   * @param originalIndices The mapping of broadcastedIndices to the originalIndices (output parameter - will be\n   *     mutated).\n   */\n  static fillIndex(broadcastedIndices: readonly number[], originalShape: readonly number[], originalIndices: number[]) {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same length as the\n    // broadcasted shape, and for each dimension the index should not be out of range.\n    // NOTE 2: we assume the parameter originalIndices has the same length as the originalShape\n    const dimOffset = broadcastedIndices.length - originalShape.length;\n    for (let i = 0; i < originalShape.length; i++) {\n      originalIndices[i] = broadcastedIndices[dimOffset + i] % originalShape[i];\n    }\n  }\n\n  /**\n   * Perform the broadcasting operation on the specific operator\n   * @param a The input tensor A\n   * @param b The input tensor B\n   * @param op The operator lambda function\n   * @param inplace Whether to write the result back to A.\n   * @returns The result tensor, or undefined if input not broadcastable.\n   */\n  static calc(\n      a: Tensor, b: Tensor, op: (a: string|number, b: string|number) => (string | number), inplace: boolean,\n      resultType?: Tensor.DataType): Tensor|undefined {\n    const outputShape = BroadcastUtil.calcShape(a.dims, b.dims);\n\n    if (outputShape) {\n      if (inplace && !ShapeUtil.areEqual(outputShape, a.dims)) {\n        // B is not broadcastable to A, failed to calculate inplace.\n        return undefined;\n      }\n\n      const size = ShapeUtil.size(outputShape);\n      const c = inplace ? a : new Tensor(outputShape, resultType || a.type);\n\n      // both inputs are scalars\n      if (outputShape.length === 0) {\n        c.set([], op(a.get([]), b.get([])));\n      }\n\n      // atleast one input is a non-scalar\n      else {\n        const outputIndices = new Array<number>(outputShape.length);\n        const originalIndicesA = new Array(a.dims.length);\n        const originalIndicesB = new Array(b.dims.length);\n        let valA: string|number = 0;\n        let valB: string|number = 0;\n        let isAScalar = false;\n        let isBScalar = false;\n        if (a.dims.length === 0) {\n          valA = a.get([]);\n          isAScalar = true;\n        }\n        if (b.dims.length === 0) {\n          valB = b.get([]);\n          isBScalar = true;\n        }\n        let rest: number;\n        for (let i = 0; i < size; i++) {\n          // traversal indices\n          rest = i;\n          for (let j = outputShape.length - 1; j >= 0; j--) {\n            outputIndices[j] = rest % outputShape[j];\n            rest = Math.floor(rest / outputShape[j]);\n          }\n\n          if (!isAScalar) {\n            // map outputIndices (which is actually broadcasted) to the originalIndices\n            BroadcastUtil.fillIndex(outputIndices, a.dims, originalIndicesA);\n            valA = a.get(originalIndicesA);\n          }\n          if (!isBScalar) {\n            BroadcastUtil.fillIndex(outputIndices, b.dims, originalIndicesB);\n            valB = b.get(originalIndicesB);\n          }\n\n          c.set(outputIndices, op(valA, valB));\n        }\n      }\n\n      return c;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Determine if a shape is unidirectional broadcastable to another shape\n   * @param shape The input shape\n   * @param finalShape The desired shape after broadcasting\n   */\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\n    // align shape to the right\n    const inputRank = shape.length;\n    const finalRank = finalShape.length;\n    if (inputRank > finalRank) {\n      return false;\n    }\n    for (let i = 1; i <= inputRank; i++) {\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determine the broadcasted dims in input shape based on the given output shape.\n   * Note that this function only returns the broadcasted dims.\n   * @param inputShape The input shape\n   * @param outputShape The output shape\n   * @returns The broadcasted dims in input shape.\n   */\n  static getBroadcastDims(inputShape: readonly number[], outputShape: readonly number[]): number[] {\n    const inRank = inputShape.length;\n    const dims: number[] = [];\n    for (let i = 0; i < inRank; i++) {\n      const dim = inRank - 1 - i;\n      const a = inputShape[dim] || 1;\n      const b = outputShape[outputShape.length - 1 - i] || 1;\n      if (b > 1 && a === 1) {\n        dims.unshift(dim);\n      }\n    }\n    return dims;\n  }\n}\n\n// copy array helper\n// mimics memcpy as much as possible\nexport function arrayCopyHelper(\n    target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n    blockSize: number) {\n  if (sourceIndex < 0 || sourceIndex >= source.length) {\n    throw new Error('sourceIndex out of bounds');\n  }\n  if (targetIndex < 0 || targetIndex >= target.length) {\n    throw new Error('targetIndex out of bounds');\n  }\n  if (sourceIndex + blockSize > source.length) {\n    throw new Error('source indices to be copied are outside bounds');\n  }\n  if (targetIndex + blockSize > target.length) {\n    throw new Error('target array is too small to hold result');\n  }\n\n  for (let offset = 0; offset < blockSize; offset++) {\n    target[targetIndex + offset] = source[sourceIndex + offset];\n  }\n}\n\nexport class GemmUtil {\n  // will make sure input shapes are compatible for this op\n  // and return back the shape of the output in the form of a tuple\n  // will throw exception if the input shapes are not compatible\n  static getShapeOfGemmResult(\n      leftShape: readonly number[], transLeft: boolean, rightShape: readonly number[], transRight: boolean,\n      biasShape?: readonly number[]): readonly number[] {\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\n      throw new Error('shape need to be of size 2');\n    }\n\n    let M: number;\n    let K: number;\n    let N: number;\n\n    if (transLeft) {\n      M = leftShape[1];\n      K = leftShape[0];\n    } else {\n      M = leftShape[0];\n      K = leftShape[1];\n    }\n\n    let kDim = -1;\n\n    if (transRight) {\n      N = rightShape[0];\n      kDim = 1;\n    } else {\n      N = rightShape[1];\n      kDim = 0;\n    }\n\n    if (rightShape[kDim] !== K) {\n      throw new Error('dimension mismatch');\n    }\n\n    if (M <= 0 || N <= 0 || K <= 0) {\n      throw new Error('invalid shape specified');\n    }\n\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\n      throw new Error('gemm: invalid bias shape for broadcast');\n    }\n\n    return [M, N, K];\n  }\n}\n\nexport class ProtoUtil {\n  static tensorDataTypeFromProto(typeProto: onnx.TensorProto.DataType|\n                                 onnxruntime.experimental.fbs.TensorDataType): Tensor.DataType {\n    switch (typeProto) {\n      case onnx.TensorProto.DataType.INT8:\n        return 'int8';\n      case onnx.TensorProto.DataType.UINT8:\n        return 'uint8';\n      case onnx.TensorProto.DataType.BOOL:\n        return 'bool';\n      case onnx.TensorProto.DataType.INT16:\n        return 'int16';\n      case onnx.TensorProto.DataType.UINT16:\n        return 'uint16';\n      case onnx.TensorProto.DataType.INT32:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT32:\n        return 'uint32';\n      case onnx.TensorProto.DataType.FLOAT:\n        return 'float32';\n      case onnx.TensorProto.DataType.DOUBLE:\n        return 'float64';\n      case onnx.TensorProto.DataType.STRING:\n        return 'string';\n\n      // For INT64/UINT64, reduce their value to 32-bits.\n      // Should throw exception when overflow\n      case onnx.TensorProto.DataType.INT64:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT64:\n        return 'uint32';\n\n      default:\n        throw new Error(`unsupported data type: ${onnx.TensorProto.DataType[typeProto]}`);\n    }\n  }\n\n  static tensorDataTypeStringToEnum(type: string): onnx.TensorProto.DataType {\n    switch (type) {\n      case 'int8':\n        return onnx.TensorProto.DataType.INT8;\n      case 'uint8':\n        return onnx.TensorProto.DataType.UINT8;\n      case 'bool':\n        return onnx.TensorProto.DataType.BOOL;\n      case 'int16':\n        return onnx.TensorProto.DataType.INT16;\n      case 'uint16':\n        return onnx.TensorProto.DataType.UINT16;\n      case 'int32':\n        return onnx.TensorProto.DataType.INT32;\n      case 'uint32':\n        return onnx.TensorProto.DataType.UINT32;\n      case 'float32':\n        return onnx.TensorProto.DataType.FLOAT;\n      case 'float64':\n        return onnx.TensorProto.DataType.DOUBLE;\n      case 'string':\n        return onnx.TensorProto.DataType.STRING;\n      case 'int64':\n        return onnx.TensorProto.DataType.INT64;\n      case 'uint64':\n        return onnx.TensorProto.DataType.UINT64;\n\n      default:\n        throw new Error(`unsupported data type: ${type}`);\n    }\n  }\n\n  static tensorDimsFromProto(dims: Array<number|Long>): number[] {\n    // get rid of Long type for dims\n    return dims.map(d => Long.isLong(d) ? d.toNumber() : d);\n  }\n\n  static tensorValueTypeFromProto(valueType: onnx.TypeProto.ITensor): Graph.ValueType {\n    return {\n      tensorType: ProtoUtil.tensorDataTypeFromProto(valueType.elemType!),\n      shape: {dims: ProtoUtil.tensorDimsFromProto(valueType.shape!.dim!.map(d => d.dimValue!))}\n    };\n  }\n\n  static tensorDimsFromORTFormat(tensor: onnxruntime.experimental.fbs.Tensor) {\n    const dims = [];\n    for (let i = 0; i < tensor.dimsLength(); i++) {\n      dims.push(LongUtil.longToNumber(tensor.dims(i)!));\n    }\n    return dims;\n  }\n\n  static tensorAttributesFromORTFormat(node: onnxruntime.experimental.fbs.Node) {\n    const attributes = [];\n    for (let i = 0; i < node.attributesLength(); i++) {\n      attributes.push(node.attributes(i)!);\n    }\n    return attributes;\n  }\n}\n\nexport class LongUtil {\n  // This function is called to get a number from long type of data for attribute, dim, and ir version,\n  // which values are signed integers.\n  // To make it more generic, add an optional paramter to convert to a unsigned number.\n  static longToNumber(n: Long|flatbuffers.Long|number, unsigned?: boolean) {\n    if (Long.isLong(n)) {\n      return n.toNumber();\n    } else if (n instanceof flatbuffers.Long) {\n      return Long.fromValue({low: n.low, high: n.high, unsigned: unsigned ?? false}).toNumber();\n    }\n    return n;\n  }\n  static isLong(n: unknown) {\n    return Long.isLong(n) || n instanceof flatbuffers.Long;\n  }\n}\n\nexport class ShapeUtil {\n  static size(dims: readonly number[]): number {\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\n  }\n\n  // `axis` inclusive\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\n  }\n\n  // `axis` exclusive\n  static sizeToDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\n  }\n\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\n    let size = 1;\n    for (let i = start; i < end; i++) {\n      // safety check as this method is called by multiple other methods requiring size.\n      // size cannot be 0 or negative.\n      if (dims[i] <= 0) {\n        throw new Error(\n            // eslint-disable-next-line max-len\n            'cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.');\n      }\n      size *= dims[i];\n    }\n    return size;\n  }\n\n  static computeStrides(dims: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [1];\n    }\n    const strides = new Array(rank);\n    strides[rank - 1] = 1;\n    strides[rank - 2] = dims[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * dims[i + 1];\n    }\n    return strides;\n  }\n\n  static transpose(dims: readonly number[]): readonly number[] {\n    const copy = dims.slice();\n    return copy.reverse();\n  }\n\n  static indicesToOffset(indices: readonly number[], strides: readonly number[], axis?: number): number {\n    if (axis === undefined) {\n      axis = indices.length;\n    }\n    let offset = 0;\n    for (let i = 0; i < axis; ++i) {\n      offset += strides[i] * indices[i];\n    }\n    return offset;\n  }\n\n  static offsetToIndices(offset: number, strides: readonly number[]): readonly number[] {\n    const rank = strides.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [offset * strides[0]];\n    }\n    const indices: number[] = new Array(strides.length);\n    for (let i = 0; i < indices.length - 1; ++i) {\n      indices[i] = Math.floor(offset / strides[i]);\n      offset -= indices[i] * strides[i];\n    }\n    indices[indices.length - 1] = offset;\n    return indices;\n  }\n\n  /**\n   * normailze axis of range [-r, r) into [0, r).\n   */\n  static normalizeAxis(axis: number, tensorRank: number): number {\n    if (axis < -tensorRank && axis >= tensorRank) {\n      throw new Error('unsupported axis for this operation.');\n    }\n    return axis < 0 ? axis + tensorRank : axis;\n  }\n\n  static normalizeAxes(axes: readonly number[], tensorRank: number): number[] {\n    return axes.map(x => this.normalizeAxis(x, tensorRank));\n  }\n\n  // Increment an index into a tensor (in lexicographic\n  // ordering), wrapping around the specified upper_bound.\n  /**\n   * Increment an index into a tensor (in lexicographic ordering), wrapping around the specified upper_bound.\n   * @param index Given index to increment (Will be mutated)\n   * @param dims The dimensions of the tensor for which the given index corresponds to\n   * @param axisToIncrementOn The 1-indexed axis to increment on. If undefined, axisToIncrementOn == rank\n   */\n  static incrementIndex(index: number[], dims: readonly number[], axisToIncrementOn?: number) {\n    if (dims.length === 0 || index.length === 0) {\n      throw new Error('Index incrementing unsupported for scalar Tensor');\n    }\n    if (axisToIncrementOn === undefined) {\n      axisToIncrementOn = dims.length;\n    } else {\n      if (axisToIncrementOn <= 0 || axisToIncrementOn > dims.length) {\n        throw new Error('Incorrect axis to increment on');\n      }\n    }\n\n    for (let k = axisToIncrementOn - 1; k >= 0; --k) {\n      index[k]++;\n      if (index[k] < dims[k]) {\n        break;\n      }\n      index[k] = 0;\n    }\n  }\n\n  /**\n   * Produces a new dimensions array based on the values in the 'originalDimensions' and 'shape' array\n   * Used in Reshape\n   * @param originalDims Original Shape array\n   * @param shapeHints array containing values to compute the new dimensions\n   * For example:\n   * originalDims = [2,2] and shapeHints = [0,-1] will return [2,2]\n   * originalDims = [2,2] and shapeHints = [4] will return [4]\n   * originalDims = [2,2] and shapeHints = [5] will throw an exception\n   * https://github.com/onnx/onnx/blob/main/docs/Operators.md#Reshape\n   */\n\n  static calculateReshapedDims(originalDims: readonly number[], shapeHints: ArrayLike<number>): number[] {\n    // reshape to a Scalar Tensor\n    if (shapeHints.length === 0) {\n      if (originalDims.length === 0 || ShapeUtil.size(originalDims) === 1) {\n        return [];\n      } else {\n        throw new Error('cannot reshape to a scalar Tensor');\n      }\n    }\n\n    const nDims = shapeHints.length;\n    const reshapedDims = new Array<number>(nDims);\n    let unknownDimension = -1;\n    let newTensorSize = 1;\n    for (let i = 0; i < nDims; i++) {\n      if (shapeHints[i] < -1) {\n        throw new Error('a dimension in shape hints cannot be less than -1');\n      }\n      if (shapeHints[i] === -1) {\n        if (unknownDimension !== -1) {\n          throw new Error('at most one dimension in shape hints can be -1');\n        }\n        unknownDimension = i;\n      } else {\n        if (shapeHints[i] === 0) {\n          if (i >= originalDims.length) {\n            throw new Error('the dimension with value zero exceeds the dimension size of the input tensor');\n          }\n          reshapedDims[i] = originalDims[i];\n        } else {\n          reshapedDims[i] = shapeHints[i];\n        }\n        newTensorSize *= reshapedDims[i];\n      }\n    }\n\n    const oldTensorSize = ShapeUtil.size(originalDims);\n    if (unknownDimension !== -1) {\n      if (oldTensorSize % newTensorSize !== 0) {\n        throw new Error(`the input tensor cannot be reshaped to the requested shape. Input shape: [${\n            originalDims}] Output shape: [${shapeHints}]`);\n      }\n      reshapedDims[unknownDimension] = oldTensorSize / newTensorSize;\n    }\n    // validate sizes from originalDims and reshapedDims match\n    else {\n      if (newTensorSize !== oldTensorSize) {\n        throw new Error('reshapedDims and originalDims don\\'t have matching sizes');\n      }\n    }\n    return reshapedDims;\n  }\n\n  /**\n   * Sorts a given array based on the indices in the Perm array\n   * Used in Transpose\n   * @param a Array to be sorted such as dims or strides\n   * @param perm Perm given; if null a will be reversed\n   */\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\n    if (perm) {\n      return perm.map((v) => a[v]);\n    } else {\n      return a.slice().reverse();\n    }\n  }\n\n  /**\n   * Pads a given shape according to the padding values\n   * @param dims shape of the Tensor to be padded\n   * @param pad pad values\n   */\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\n  }\n\n  /**\n   * Determines if the two shapes are identical\n   * @param shape1\n   * @param shape2\n   */\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\n    if (shape1.length !== shape2.length) {\n      return false;\n    }\n    return shape1.every((v, i) => v === shape2[i]);\n  }\n\n  /**\n   * Validates if the given `dims` or `shape` is valid in ONNX.js context and returns data size\n   * @param dims - input `dims` that needs to be checked\n   */\n  static validateDimsAndCalcSize(dims: readonly number[]): number {\n    if (dims.length > 6) {\n      throw new TypeError('Only rank 0 to 6 is supported for tensor shape.');\n    }\n    let size = 1;\n    for (const n of dims) {\n      if (!Number.isInteger(n)) {\n        throw new TypeError(`Invalid shape: ${n} is not an integer`);\n      }\n      if (n < 0 || n > 2147483647) {\n        throw new TypeError(`Invalid shape: length ${n} is not allowed`);\n      }\n      size *= n;\n    }\n    return size;\n  }\n\n  /**\n   * Determines the shape of output tensor y = flatten(x, axis)\n   * @param dims - shape of input tensor\n   * @param axis - flatten axis, in the range [-r, r]\n   */\n  static flattenShape(dims: readonly number[], axis: number): readonly number[] {\n    if (axis < 0) {\n      axis += dims.length;\n    }\n    const total = dims.reduce((x, y) => x * y, 1);\n    const right = dims.slice(axis).reduce((x, y) => x * y, 1);\n    const outputDims = [total / right, right];\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = squeeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - squeeze axes\n   */\n  static squeezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>();\n\n    // sanity check\n    axes = ShapeUtil.normalizeAxes(axes, dims.length);\n\n    for (let i = 0; i < dims.length; i++) {\n      const inSqueezeList = axes.indexOf(i) >= 0;\n      if (inSqueezeList && dims[i] !== 1) {\n        throw new Error('squeeze an axis of size different than 1');\n      }\n\n      if ((axes.length === 0 && dims[i] > 1) || (axes.length > 0 && !inSqueezeList)) {\n        outputDims.push(dims[i]);\n      }\n    }\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = unsqueeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - unsqueeze axes\n   */\n  static unsqueezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>(dims.length + axes.length);\n\n    // initialize the array elements to 0\n    outputDims.fill(0);\n\n    // set all axes indices to 1 in outputDims and check for duplicates\n    for (let i = 0; i < axes.length; i++) {\n      const axis = ShapeUtil.normalizeAxis(axes[i], outputDims.length);\n      if (axis >= outputDims.length) {\n        throw new Error('\\'axes\\' has an out of range axis');\n      }\n      if (outputDims[axis] !== 0) {\n        throw new Error('\\'axes\\' has a duplicate axis');\n      }\n\n      outputDims[axis] = 1;\n    }\n\n    // fill in the zero entries of outputDims with the input tensor's shape\n    let inputDimsIterator = 0;\n    for (let i = 0; i < outputDims.length; i++) {\n      if (outputDims[i] === 0) {\n        outputDims[i] = dims[inputDimsIterator++];\n      }\n    }\n\n    // sanity check assertion. 'inputDimsIterator'\n    // should be equal to the length of 'dims'\n    if (inputDimsIterator !== dims.length) {\n      throw new Error('the unsqueezed dimension could not be established');\n    }\n\n    return outputDims;\n  }\n}\n\n// bunch of helper methods that do a variety of math operations\nexport class MathUtil {\n  // y = (x*x) + y\n  static sqr(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += Math.pow(source[sourceIndex + offset], 2);\n    }\n  }\n\n  // y = ax + y\n  static axpy(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, alpha: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += (alpha * source[sourceIndex + offset]);\n    }\n  }\n\n  // y = pow(x, b)\n  static powx(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, b: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = Math.pow(source[sourceIndex + offset], b);\n    }\n  }\n\n  // y = x * y\n  static mul(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = (source[sourceIndex + offset] * target[targetIndex + offset]);\n    }\n  }\n}\n\nexport class SplitUtil {\n  /**\n   * Calculates new Shapes from existing one and the splits given along the axis provides\n   * @param dims Shape of the Tensor to be splitted into two or more Shapes\n   * @param axis The dimension along which the Tensor will be split\n   * @param splits Offsets for the start of each split\n   */\n  static splitShape(dims: readonly number[], axis: number, split: number[], numOutputs?: number):\n      [number[][], number[]] {\n    if (split.length === 0) {\n      if (!numOutputs) {\n        throw new Error('need to know number of outputs when the \\'split\\' attribute is not specified');\n      }\n      SplitUtil.determineSplit(dims[axis], numOutputs, split);\n    }\n\n    const shapes: number[][] = [];\n    const offsets = [0];\n    for (let i = 0; i < split.length; ++i) {\n      if (i !== 0) {\n        offsets.push(offsets[i - 1] + split[i - 1]);\n      }\n      const shape = dims.slice();\n      shape[axis] = split[i];\n      shapes.push(shape);\n    }\n    return [shapes, offsets];\n  }\n\n  static determineSplit(numElementsAlongAxis: number, numOutputs: number, split: number[]) {\n    // If 'split' is not specified by the user, we need to partition the number of elements equally among the outputs\n    if (numElementsAlongAxis % numOutputs !== 0) {\n      throw new Error('cannot split tensor to equal sized parts');\n    }\n    for (let i = 0; i < numOutputs; ++i) {\n      split.push(numElementsAlongAxis / numOutputs);\n    }\n  }\n}\n\nexport class ReduceUtil {\n  /**\n   * Perform reduce operations on the specific operator\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduce(\n      a: Tensor, axes: number[], keepdims: boolean, op1: (b: number) => number,\n      op2: (a: number, b: number) => number): Tensor {\n    const dims = a.dims.slice(0);\n    // if axes is not set, perform reduce on all axes\n    if (axes.length === 0) {\n      dims.forEach((d, ind) => axes.push(ind));\n    }\n    // get a temporary broadcastable output shape\n    const outputDims = ReduceUtil.calcReduceShape(dims, axes, true);\n\n    // loop through the output and calculate result one by one\n    const size = ShapeUtil.size(outputDims);\n    const y = new Tensor(outputDims, a.type);\n    const strides = ShapeUtil.computeStrides(outputDims);\n    const inputStrides = ShapeUtil.computeStrides(dims);\n    const indicesY = new Array(dims.length);\n    for (let i = 0; i < size; i++) {\n      const indices = ShapeUtil.offsetToIndices(i, strides);\n      // map index\n      BroadcastUtil.fillIndex(indices, dims, indicesY);\n      y.set(\n          indices,\n          ReduceUtil.calcReduceByAxis(\n              a.numberData, axes, dims, 0, ShapeUtil.indicesToOffset(indicesY, inputStrides), op1, op2));\n    }\n\n    if (keepdims) {\n      return y;\n    } else {\n      // keepdims == 0, calculate the expected shape\n      return new Tensor(\n          ReduceUtil.calcReduceShape(dims, axes, keepdims), y.type, undefined, undefined, y.data, y.dataId);\n    }\n  }\n\n  /**\n   * Perform reduce operations on the specific operator on specific axes\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param dims The input dimension.\n   * @param curAxisInd Index in axes specifying the current dimension along\n   *      which the tensor will be reduced\n   * @param pos The current index of element to perform operation\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduceByAxis(\n      input: Tensor.NumberType, axes: number[], dims: number[], curAxisInd: number, pos: number,\n      op1: (b: number) => number, op2: (a: number, b: number) => number): number {\n    let res = 0;\n    if (curAxisInd >= axes.length) {\n      return op1(input[pos]);\n    }\n    const axis = axes[curAxisInd];\n    const step = axis >= dims.length ? 1 : ShapeUtil.size(dims.slice(axis + 1));\n    for (let i = 0; i < dims[axis]; i++) {\n      res = i === 0 ? ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2) :\n                      op2(res, ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2));\n      pos += step;\n    }\n    return res;\n  }\n\n  /**\n   * Calculate the expected shape of a reduce operation\n   * @param dims The input tensor dimension\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   */\n  static calcReduceShape(dims: readonly number[], axes: readonly number[], keepDims: boolean): number[] {\n    const outputDims = dims.slice();\n    for (let i = 0; i < axes.length; i++) {\n      if (keepDims) {\n        outputDims[axes[i]] = 1;\n      } else {\n        outputDims[axes[i]] = 0;\n      }\n    }\n    return outputDims.filter(dim => dim !== 0);\n  }\n}\n\nexport class PoolConvUtil {\n  /**\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   */\n  static adjustPoolAttributes(\n      isGlobalOperator: boolean, inputDims: readonly number[], kernelShape: number[], strides: number[],\n      dilations: number[], pads: number[]) {\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\n    }\n\n    if (isGlobalOperator) {\n      // adjust kernel shape to cover the input dims\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        if (dim >= kernelShape.length) {\n          kernelShape.push(inputDims[dim + 2]);\n        } else {\n          kernelShape[dim] = inputDims[dim + 2];\n        }\n      }\n    }\n\n    // adjust strides length to match kernel shape length\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < strides.length) {\n        if (strides[dim] < 0) {\n          throw new Error('strides should be greater than or equal to 1');\n        }\n      } else {\n        strides.push(1);\n      }\n    }\n\n    // adjust dilation value\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < dilations.length) {\n        if (dilations[dim] < 0) {\n          throw new Error('dilations should be greater than or equal to 1');\n        }\n      } else {\n        dilations.push(1);\n      }\n    }\n\n    // adjust pads length to match 2 * kernel shape length\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\n      if (dim < pads.length) {\n        if (pads[dim] < 0) {\n          throw new Error('pad should be greater than or equal to 1');\n        }\n      } else {\n        pads.push(0);\n      }\n    }\n\n    // sanity checks for values in kernel shapes and pads\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (kernelShape[dim] <= 0) {\n        throw new Error('kernel shapes need to be greater than 0');\n      }\n\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\n        throw new Error('pads should be smaller than kernel');\n      }\n    }\n  }\n\n  // adjust pad values based on 'autoPad' attribute\n  static adjustPadsBasedOnAutoPad(\n      inputDims: readonly number[], strides: readonly number[], dilations: readonly number[],\n      kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (!autoPad) {\n      return;\n    }\n\n    if (pads.length !== 2 * (inputDims.length - 2)) {\n      throw new Error('length of pads should be twice the length of data dimensions');\n    }\n\n    if (strides.length !== (inputDims.length - 2)) {\n      throw new Error('length of strides should be the length of data dimensions');\n    }\n\n    if (kernelShape.length !== (inputDims.length - 2)) {\n      throw new Error('length of kernel shapes should be the length of data dimensions');\n    }\n\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\n      PoolConvUtil.adjustPadAndReturnShape(\n          inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n          autoPad);\n    }\n  }\n\n  /**\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computePoolOutputShape(\n      isGlobalOperator: boolean, inputDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0) {\n      throw new Error('input shape must be of size greater than 0');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], inputDims[1]];\n\n    PoolConvUtil.computeShapeHelper(\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  /**\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\n   * @param strides Stride along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computeConvOutputShape(\n      inputDims: readonly number[], filterDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], filterDims[0]];\n\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\n  // called by computePoolOutputShape() and computeConvOutputShape()\n  // adjust pads based on 'autoPad' attribute prior to shape computation\n  private static computeShapeHelper(\n      isGlobalOperator: boolean, inputDims: readonly number[], outputDims: number[], strides: readonly number[],\n      dilations: readonly number[], kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (isGlobalOperator) {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(1);\n      }\n    } else {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n            autoPad));\n      }\n    }\n  }\n\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\n  private static adjustPadAndReturnShape(\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\n      padTailIndex: number, autoPad?: string): number {\n    const dkernel = dilation * (kernel - 1) + 1;\n    if (autoPad && autoPad !== 'NOTSET') {\n      switch (autoPad) {\n        case 'VALID':\n          pads[padHeadIndex] = 0;\n          pads[padTailIndex] = 0;\n          return Math.floor(((inSize - dkernel) / stride) + 1);\n        case 'SAME_LOWER':\n        case 'SAME_UPPER':\n          if (dilation !== 1) {\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\n          } else {\n            const legacyTargetSize = (inSize + stride - 1) / stride;\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\n            pads[padHeadIndex] =\n                (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\n            return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\n          }\n        default:\n          throw new Error('Unsupported AutoPad type');\n      }\n    } else {\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\n    }\n  }\n}\n\nexport const MIN_CLIP = -3.4028234663852886e+38;\nexport const MAX_CLIP = 3.4028234663852886e+38;\n\nexport function decodeUtf8String(buffer: Uint8Array): string {\n  return new TextDecoder().decode(buffer);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n// This file is generated by /js/scripts/update-version.ts\n// Do not modify file content manually.\n\nexport const version = '1.16.0';\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env, env, InferenceSession} from 'onnxruntime-common';\n\nimport {OrtWasmMessage, SerializableModeldata, SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\nimport * as core from './wasm-core-impl';\nimport {initializeWebAssembly} from './wasm-factory';\n\nconst isProxy = (): boolean => !!env.wasm.proxy && typeof document !== 'undefined';\nlet proxyWorker: Worker|undefined;\nlet initializing = false;\nlet initialized = false;\nlet aborted = false;\n\n// resolve; reject\ntype PromiseCallbacks<T = void> = [(result: T) => void, (reason: unknown) => void];\n\nlet initWasmCallbacks: PromiseCallbacks;\nlet initOrtCallbacks: PromiseCallbacks;\nconst createSessionAllocateCallbacks: Array<PromiseCallbacks<SerializableModeldata>> = [];\nconst createSessionFinalizeCallbacks: Array<PromiseCallbacks<SerializableSessionMetadata>> = [];\nconst createSessionCallbacks: Array<PromiseCallbacks<SerializableSessionMetadata>> = [];\nconst releaseSessionCallbacks: Array<PromiseCallbacks<void>> = [];\nconst runCallbacks: Array<PromiseCallbacks<SerializableTensor[]>> = [];\nconst endProfilingCallbacks: Array<PromiseCallbacks<void>> = [];\n\nconst ensureWorker = (): void => {\n  if (initializing || !initialized || aborted || !proxyWorker) {\n    throw new Error('worker not ready');\n  }\n};\n\nconst onProxyWorkerMessage = (ev: MessageEvent<OrtWasmMessage>): void => {\n  switch (ev.data.type) {\n    case 'init-wasm':\n      initializing = false;\n      if (ev.data.err) {\n        aborted = true;\n        initWasmCallbacks[1](ev.data.err);\n      } else {\n        initialized = true;\n        initWasmCallbacks[0]();\n      }\n      break;\n    case 'init-ort':\n      if (ev.data.err) {\n        initOrtCallbacks[1](ev.data.err);\n      } else {\n        initOrtCallbacks[0]();\n      }\n      break;\n    case 'create_allocate':\n      if (ev.data.err) {\n        createSessionAllocateCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionAllocateCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'create_finalize':\n      if (ev.data.err) {\n        createSessionFinalizeCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionFinalizeCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'create':\n      if (ev.data.err) {\n        createSessionCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'release':\n      if (ev.data.err) {\n        releaseSessionCallbacks.shift()![1](ev.data.err);\n      } else {\n        releaseSessionCallbacks.shift()![0]();\n      }\n      break;\n    case 'run':\n      if (ev.data.err) {\n        runCallbacks.shift()![1](ev.data.err);\n      } else {\n        runCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'end-profiling':\n      if (ev.data.err) {\n        endProfilingCallbacks.shift()![1](ev.data.err);\n      } else {\n        endProfilingCallbacks.shift()![0]();\n      }\n      break;\n    default:\n  }\n};\n\nconst scriptSrc = typeof document !== 'undefined' ? (document?.currentScript as HTMLScriptElement)?.src : undefined;\n\nexport const initializeWebAssemblyInstance = async(): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    if (initialized) {\n      return;\n    }\n    if (initializing) {\n      throw new Error('multiple calls to \\'initWasm()\\' detected.');\n    }\n    if (aborted) {\n      throw new Error('previous call to \\'initWasm()\\' failed.');\n    }\n\n    initializing = true;\n\n    // overwrite wasm filepaths\n    if (env.wasm.wasmPaths === undefined) {\n      if (scriptSrc && scriptSrc.indexOf('blob:') !== 0) {\n        env.wasm.wasmPaths = scriptSrc.substr(0, +(scriptSrc).lastIndexOf('/') + 1);\n      }\n    }\n\n    return new Promise<void>((resolve, reject) => {\n      proxyWorker?.terminate();\n      // eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports\n      proxyWorker = require('worker-loader?inline=no-fallback!./proxy-worker/main').default() as Worker;\n      proxyWorker.onmessage = onProxyWorkerMessage;\n      initWasmCallbacks = [resolve, reject];\n      const message: OrtWasmMessage = {type: 'init-wasm', in : env.wasm};\n      proxyWorker.postMessage(message);\n    });\n\n  } else {\n    return initializeWebAssembly(env.wasm);\n  }\n};\n\nexport const initializeRuntime = async(env: Env): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      initOrtCallbacks = [resolve, reject];\n      const message: OrtWasmMessage = {type: 'init-ort', in : env};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    await core.initRuntime(env);\n  }\n};\n\nexport const createSessionAllocate = async(model: Uint8Array): Promise<SerializableModeldata> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableModeldata>((resolve, reject) => {\n      createSessionAllocateCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'create_allocate', in : {model}};\n      proxyWorker!.postMessage(message, [model.buffer]);\n    });\n  } else {\n    return core.createSessionAllocate(model);\n  }\n};\n\nexport const createSessionFinalize = async(modeldata: SerializableModeldata, options?: InferenceSession.SessionOptions):\n    Promise<SerializableSessionMetadata> => {\n      if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n        ensureWorker();\n        return new Promise<SerializableSessionMetadata>((resolve, reject) => {\n          createSessionFinalizeCallbacks.push([resolve, reject]);\n          const message: OrtWasmMessage = {type: 'create_finalize', in : {modeldata, options}};\n          proxyWorker!.postMessage(message);\n        });\n      } else {\n        return core.createSessionFinalize(modeldata, options);\n      }\n    };\n\nexport const createSession =\n    async(model: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SerializableSessionMetadata> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableSessionMetadata>((resolve, reject) => {\n      createSessionCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'create', in : {model, options}};\n      proxyWorker!.postMessage(message, [model.buffer]);\n    });\n  } else {\n    return core.createSession(model, options);\n  }\n};\n\nexport const releaseSession = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      releaseSessionCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'release', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.releaseSession(sessionId);\n  }\n};\n\nexport const run = async(\n    sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\n    options: InferenceSession.RunOptions): Promise<SerializableTensor[]> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableTensor[]>((resolve, reject) => {\n      runCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'run', in : {sessionId, inputIndices, inputs, outputIndices, options}};\n      proxyWorker!.postMessage(message, core.extractTransferableBuffers(inputs));\n    });\n  } else {\n    return core.run(sessionId, inputIndices, inputs, outputIndices, options);\n  }\n};\n\nexport const endProfiling = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      endProfilingCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'end-profiling', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.endProfiling(sessionId);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {getInstance} from './wasm-factory';\nimport {allocWasmString, checkLastError, iterateExtraOptions} from './wasm-utils';\n\nexport const setRunOptions = (options: InferenceSession.RunOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let runOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const runOptions: InferenceSession.RunOptions = options || {};\n\n  try {\n    if (options?.logSeverityLevel === undefined) {\n      runOptions.logSeverityLevel = 2;  // Default to warning\n    } else if (\n        typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\n        options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n    }\n\n    if (options?.logVerbosityLevel === undefined) {\n      runOptions.logVerbosityLevel = 0;  // Default to 0\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n    }\n\n    if (options?.terminate === undefined) {\n      runOptions.terminate = false;\n    }\n\n    let tagDataOffset = 0;\n    if (options?.tag !== undefined) {\n      tagDataOffset = allocWasmString(options.tag, allocs);\n    }\n\n    runOptionsHandle = wasm._OrtCreateRunOptions(\n        runOptions.logSeverityLevel!, runOptions.logVerbosityLevel!, !!runOptions.terminate!, tagDataOffset);\n    if (runOptionsHandle === 0) {\n      checkLastError('Can\\'t create run options.');\n    }\n\n    if (options?.extra !== undefined) {\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          checkLastError(`Can't set a run config entry: ${key} - ${value}.`);\n        }\n      });\n    }\n\n    return [runOptionsHandle, allocs];\n  } catch (e) {\n    if (runOptionsHandle !== 0) {\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\n    }\n    allocs.forEach(alloc => wasm._free(alloc));\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {env, InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\nimport {promisify} from 'util';\n\nimport {SerializableModeldata} from './proxy-messages';\nimport {createSession, createSessionAllocate, createSessionFinalize, endProfiling, initializeRuntime, releaseSession, run} from './proxy-wrapper';\n\nlet runtimeInitialized: boolean;\n\nexport class OnnxruntimeWebAssemblySessionHandler implements SessionHandler {\n  private sessionId: number;\n\n  inputNames: string[];\n  outputNames: string[];\n\n  async createSessionAllocate(path: string): Promise<SerializableModeldata> {\n    // fetch model from url and move to wasm heap. The arraybufffer that held the http\n    // response is freed once we return\n    const response = await fetch(path);\n    const arrayBuffer = await response.arrayBuffer();\n    return createSessionAllocate(new Uint8Array(arrayBuffer));\n  }\n\n  async loadModel(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions): Promise<void> {\n    if (!runtimeInitialized) {\n      await initializeRuntime(env);\n      runtimeInitialized = true;\n    }\n\n    if (typeof pathOrBuffer === 'string') {\n      if (typeof process !== 'undefined' && process.versions && process.versions.node) {\n        // node\n        const model = await promisify(readFile)(pathOrBuffer);\n        [this.sessionId, this.inputNames, this.outputNames] = await createSession(model, options);\n      } else {\n        // browser\n        // fetch model and move to wasm heap.\n        const modelData: SerializableModeldata = await this.createSessionAllocate(pathOrBuffer);\n        // create the session\n        [this.sessionId, this.inputNames, this.outputNames] = await createSessionFinalize(modelData, options);\n      }\n    } else {\n      [this.sessionId, this.inputNames, this.outputNames] = await createSession(pathOrBuffer, options);\n    }\n  }\n\n  async dispose(): Promise<void> {\n    return releaseSession(this.sessionId);\n  }\n\n  async run(feeds: SessionHandler.FeedsType, fetches: SessionHandler.FetchesType, options: InferenceSession.RunOptions):\n      Promise<SessionHandler.ReturnType> {\n    const inputArray: Tensor[] = [];\n    const inputIndices: number[] = [];\n    Object.entries(feeds).forEach(kvp => {\n      const name = kvp[0];\n      const tensor = kvp[1];\n      const index = this.inputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid input '${name}'`);\n      }\n      inputArray.push(tensor);\n      inputIndices.push(index);\n    });\n\n    const outputIndices: number[] = [];\n    Object.entries(fetches).forEach(kvp => {\n      const name = kvp[0];\n      // TODO: support pre-allocated output\n      const index = this.outputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid output '${name}'`);\n      }\n      outputIndices.push(index);\n    });\n\n    const outputs =\n        await run(this.sessionId, inputIndices, inputArray.map(t => [t.type, t.dims, t.data]), outputIndices, options);\n\n    const result: SessionHandler.ReturnType = {};\n    for (let i = 0; i < outputs.length; i++) {\n      result[this.outputNames[outputIndices[i]]] = new Tensor(outputs[i][0], outputs[i][2], outputs[i][1]);\n    }\n    return result;\n  }\n\n  startProfiling(): void {\n    // TODO: implement profiling\n  }\n\n  endProfiling(): void {\n    void endProfiling(this.sessionId);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {getInstance} from './wasm-factory';\nimport {allocWasmString, checkLastError, iterateExtraOptions} from './wasm-utils';\n\nconst getGraphOptimzationLevel = (graphOptimizationLevel: string|unknown): number => {\n  switch (graphOptimizationLevel) {\n    case 'disabled':\n      return 0;\n    case 'basic':\n      return 1;\n    case 'extended':\n      return 2;\n    case 'all':\n      return 99;\n    default:\n      throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);\n  }\n};\n\nconst getExecutionMode = (executionMode: 'sequential'|'parallel'): number => {\n  switch (executionMode) {\n    case 'sequential':\n      return 0;\n    case 'parallel':\n      return 1;\n    default:\n      throw new Error(`unsupported execution mode: ${executionMode}`);\n  }\n};\n\nconst appendDefaultOptions = (options: InferenceSession.SessionOptions): void => {\n  if (!options.extra) {\n    options.extra = {};\n  }\n  if (!options.extra.session) {\n    options.extra.session = {};\n  }\n  const session = options.extra.session as Record<string, string>;\n  if (!session.use_ort_model_bytes_directly) {\n    // eslint-disable-next-line camelcase\n    session.use_ort_model_bytes_directly = '1';\n  }\n\n  // if using JSEP with WebGPU, always disable memory pattern\n  if (options.executionProviders &&\n      options.executionProviders.some(ep => (typeof ep === 'string' ? ep : ep.name) === 'webgpu')) {\n    options.enableMemPattern = false;\n  }\n};\n\nconst setExecutionProviders =\n    (sessionOptionsHandle: number, executionProviders: readonly InferenceSession.ExecutionProviderConfig[],\n     allocs: number[]): void => {\n      for (const ep of executionProviders) {\n        let epName = typeof ep === 'string' ? ep : ep.name;\n\n        // check EP name\n        switch (epName) {\n          case 'xnnpack':\n            epName = 'XNNPACK';\n            break;\n          case 'webnn':\n            epName = 'WEBNN';\n            if (typeof ep !== 'string') {\n              const webnnOptions = ep as InferenceSession.WebNNExecutionProviderOption;\n              if (webnnOptions?.deviceType) {\n                const keyDataOffset = allocWasmString('deviceType', allocs);\n                const valueDataOffset = allocWasmString(webnnOptions.deviceType, allocs);\n                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !==\n                    0) {\n                  checkLastError(`Can't set a session config entry: 'deviceType' - ${webnnOptions.deviceType}.`);\n                }\n              }\n              if (webnnOptions?.powerPreference) {\n                const keyDataOffset = allocWasmString('powerPreference', allocs);\n                const valueDataOffset = allocWasmString(webnnOptions.powerPreference, allocs);\n                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !==\n                    0) {\n                  checkLastError(\n                      `Can't set a session config entry: 'powerPreference' - ${webnnOptions.powerPreference}.`);\n                }\n              }\n            }\n            break;\n          case 'webgpu':\n            epName = 'JS';\n            break;\n          case 'wasm':\n          case 'cpu':\n            continue;\n          default:\n            throw new Error(`not supported execution provider: ${epName}`);\n        }\n\n        const epNameDataOffset = allocWasmString(epName, allocs);\n        if (getInstance()._OrtAppendExecutionProvider(sessionOptionsHandle, epNameDataOffset) !== 0) {\n          checkLastError(`Can't append execution provider: ${epName}.`);\n        }\n      }\n    };\n\nexport const setSessionOptions = (options?: InferenceSession.SessionOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let sessionOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const sessionOptions: InferenceSession.SessionOptions = options || {};\n  appendDefaultOptions(sessionOptions);\n\n  try {\n    const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel ?? 'all');\n    const executionMode = getExecutionMode(sessionOptions.executionMode ?? 'sequential');\n    const logIdDataOffset =\n        typeof sessionOptions.logId === 'string' ? allocWasmString(sessionOptions.logId, allocs) : 0;\n\n    const logSeverityLevel = sessionOptions.logSeverityLevel ?? 2;  // Default to 2 - warning\n    if (!Number.isInteger(logSeverityLevel) || logSeverityLevel < 0 || logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${logSeverityLevel}`);\n    }\n\n    const logVerbosityLevel = sessionOptions.logVerbosityLevel ?? 0;  // Default to 0 - verbose\n    if (!Number.isInteger(logVerbosityLevel) || logVerbosityLevel < 0 || logVerbosityLevel > 4) {\n      throw new Error(`log verbosity level is not valid: ${logVerbosityLevel}`);\n    }\n\n    const optimizedModelFilePathOffset = typeof sessionOptions.optimizedModelFilePath === 'string' ?\n        allocWasmString(sessionOptions.optimizedModelFilePath, allocs) :\n        0;\n\n    sessionOptionsHandle = wasm._OrtCreateSessionOptions(\n        graphOptimizationLevel, !!sessionOptions.enableCpuMemArena, !!sessionOptions.enableMemPattern, executionMode,\n        !!sessionOptions.enableProfiling, 0, logIdDataOffset, logSeverityLevel, logVerbosityLevel,\n        optimizedModelFilePathOffset);\n    if (sessionOptionsHandle === 0) {\n      checkLastError('Can\\'t create session options.');\n    }\n\n    if (sessionOptions.executionProviders) {\n      setExecutionProviders(sessionOptionsHandle, sessionOptions.executionProviders, allocs);\n    }\n\n    if (sessionOptions.extra !== undefined) {\n      iterateExtraOptions(sessionOptions.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          checkLastError(`Can't set a session config entry: ${key} - ${value}.`);\n        }\n      });\n    }\n\n    return [sessionOptionsHandle, allocs];\n  } catch (e) {\n    if (sessionOptionsHandle !== 0) {\n      wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n    }\n    allocs.forEach(alloc => wasm._free(alloc));\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from 'onnxruntime-common';\n\n// This file includes common definitions. They do NOT have dependency on the WebAssembly instance.\n\n/**\n * Copied from ONNX definition. Use this to drop dependency 'onnx_proto' to decrease compiled .js file size.\n */\nexport const enum DataType {\n  undefined = 0,\n  float = 1,\n  uint8 = 2,\n  int8 = 3,\n  uint16 = 4,\n  int16 = 5,\n  int32 = 6,\n  int64 = 7,\n  string = 8,\n  bool = 9,\n  float16 = 10,\n  double = 11,\n  uint32 = 12,\n  uint64 = 13,\n  complex64 = 14,\n  complex128 = 15,\n  bfloat16 = 16\n}\n\n/**\n * Map string tensor data to enum value\n */\nexport const tensorDataTypeStringToEnum = (type: string): DataType => {\n  switch (type) {\n    case 'int8':\n      return DataType.int8;\n    case 'uint8':\n      return DataType.uint8;\n    case 'bool':\n      return DataType.bool;\n    case 'int16':\n      return DataType.int16;\n    case 'uint16':\n      return DataType.uint16;\n    case 'int32':\n      return DataType.int32;\n    case 'uint32':\n      return DataType.uint32;\n    case 'float16':\n      return DataType.float16;\n    case 'float32':\n      return DataType.float;\n    case 'float64':\n      return DataType.double;\n    case 'string':\n      return DataType.string;\n    case 'int64':\n      return DataType.int64;\n    case 'uint64':\n      return DataType.uint64;\n\n    default:\n      throw new Error(`unsupported data type: ${type}`);\n  }\n};\n\n/**\n * Map enum value to string tensor data\n */\nexport const tensorDataTypeEnumToString = (typeProto: DataType): Tensor.Type => {\n  switch (typeProto) {\n    case DataType.int8:\n      return 'int8';\n    case DataType.uint8:\n      return 'uint8';\n    case DataType.bool:\n      return 'bool';\n    case DataType.int16:\n      return 'int16';\n    case DataType.uint16:\n      return 'uint16';\n    case DataType.int32:\n      return 'int32';\n    case DataType.uint32:\n      return 'uint32';\n    case DataType.float16:\n      return 'float16';\n    case DataType.float:\n      return 'float32';\n    case DataType.double:\n      return 'float64';\n    case DataType.string:\n      return 'string';\n    case DataType.int64:\n      return 'int64';\n    case DataType.uint64:\n      return 'uint64';\n\n    default:\n      throw new Error(`unsupported data type: ${typeProto}`);\n  }\n};\n\n/**\n * get tensor element size in bytes by the given data type\n * @returns size in integer or undefined if the data type is not supported\n */\nexport const getTensorElementSize = (dateType: number): number|\n    undefined => [undefined, 4, 1, 1, 2, 2, 4, 8, undefined, 1, 2, 8, 4, 8, undefined, undefined, undefined][dateType];\n\n/**\n * get typed array constructor by the given tensor type\n */\nexport const tensorTypeToTypedArrayConstructor = (type: Tensor.Type): Float32ArrayConstructor|Uint8ArrayConstructor|\n    Int8ArrayConstructor|Uint16ArrayConstructor|Int16ArrayConstructor|Int32ArrayConstructor|BigInt64ArrayConstructor|\n    Uint8ArrayConstructor|Float64ArrayConstructor|Uint32ArrayConstructor|BigUint64ArrayConstructor => {\n      switch (type) {\n        case 'float16':\n          return Uint16Array;\n        case 'float32':\n          return Float32Array;\n        case 'uint8':\n          return Uint8Array;\n        case 'int8':\n          return Int8Array;\n        case 'uint16':\n          return Uint16Array;\n        case 'int16':\n          return Int16Array;\n        case 'int32':\n          return Int32Array;\n        case 'bool':\n          return Uint8Array;\n        case 'float64':\n          return Float64Array;\n        case 'uint32':\n          return Uint32Array;\n        case 'int64':\n          return BigInt64Array;\n        case 'uint64':\n          return BigUint64Array;\n        default:\n          throw new Error(`unsupported type: ${type}`);\n      }\n    };\n\n/**\n * Map string log level to integer value\n */\nexport const logLevelStringToEnum = (logLevel?: 'verbose'|'info'|'warning'|'error'|'fatal'): number => {\n  switch (logLevel) {\n    case 'verbose':\n      return 0;\n    case 'info':\n      return 1;\n    case 'warning':\n      return 2;\n    case 'error':\n      return 3;\n    case 'fatal':\n      return 4;\n    default:\n      throw new Error(`unsupported logging level: ${logLevel}`);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env, InferenceSession, Tensor} from 'onnxruntime-common';\n\nimport {SerializableModeldata, SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\nimport {setRunOptions} from './run-options';\nimport {setSessionOptions} from './session-options';\nimport {logLevelStringToEnum, tensorDataTypeEnumToString, tensorDataTypeStringToEnum, tensorTypeToTypedArrayConstructor} from './wasm-common';\nimport {getInstance} from './wasm-factory';\nimport {allocWasmString, checkLastError} from './wasm-utils';\n\n/**\n * get the input/output count of the session.\n * @param sessionHandle the handle representing the session. should be non-zero.\n * @returns a tuple including 2 numbers, representing the input count and output count.\n */\nconst getSessionInputOutputCount = (sessionHandle: number): [number, number] => {\n  const wasm = getInstance();\n  const stack = wasm.stackSave();\n  try {\n    const dataOffset = wasm.stackAlloc(8);\n    const errorCode = wasm._OrtGetInputOutputCount(sessionHandle, dataOffset, dataOffset + 4);\n    if (errorCode !== 0) {\n      checkLastError('Can\\'t get session input/output count.');\n    }\n    return [wasm.HEAP32[dataOffset / 4], wasm.HEAP32[dataOffset / 4 + 1]];\n  } finally {\n    wasm.stackRestore(stack);\n  }\n};\n\n/**\n * initialize ORT environment.\n * @param numThreads SetGlobalIntraOpNumThreads(numThreads)\n * @param loggingLevel CreateEnv(static_cast<OrtLoggingLevel>(logging_level))\n */\nconst initOrt = (numThreads: number, loggingLevel: number): void => {\n  const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);\n  if (errorCode !== 0) {\n    checkLastError('Can\\'t initialize onnxruntime.');\n  }\n};\n\n/**\n * intialize runtime environment.\n * @param env passed in the environment config object.\n */\nexport const initRuntime = async(env: Env): Promise<void> => {\n  // init ORT\n  initOrt(env.wasm.numThreads!, logLevelStringToEnum(env.logLevel));\n\n  if (!BUILD_DEFS.DISABLE_WEBGPU) {\n    // init JSEP if available\n\n    // eslint-disable-next-line @typescript-eslint/no-require-imports, @typescript-eslint/no-var-requires\n    const initJsep = require('./jsep/init').init;\n    await initJsep(getInstance(), env);\n  }\n};\n\n/**\n *  tuple elements are: InferenceSession ID; inputNamesUTF8Encoded; outputNamesUTF8Encoded\n */\ntype SessionMetadata = [number, number[], number[]];\n\nconst activeSessions = new Map<number, SessionMetadata>();\n\n/**\n * allocate the memory and memcpy the model bytes, preparing for creating an instance of InferenceSession.\n * @returns a 2-elements tuple - the pointer and size of the allocated buffer\n */\nexport const createSessionAllocate = (model: Uint8Array): [number, number] => {\n  const wasm = getInstance();\n  const modelDataOffset = wasm._malloc(model.byteLength);\n  if (modelDataOffset === 0) {\n    throw new Error(`Can't create a session. failed to allocate a buffer of size ${model.byteLength}.`);\n  }\n  wasm.HEAPU8.set(model, modelDataOffset);\n  return [modelDataOffset, model.byteLength];\n};\n\n/**\n * create an inference session using the prepared buffer containing the model data.\n * @param modelData a 2-elements tuple containing the pointer and size of the model data buffer.\n * @param options an optional session options object.\n * @returns a 3-elements tuple containing [session handle, input names, output names]\n */\nexport const createSessionFinalize =\n    (modelData: SerializableModeldata, options?: InferenceSession.SessionOptions): SerializableSessionMetadata => {\n      const wasm = getInstance();\n\n      let sessionHandle = 0;\n      let sessionOptionsHandle = 0;\n      let allocs: number[] = [];\n      const inputNamesUTF8Encoded = [];\n      const outputNamesUTF8Encoded = [];\n\n      try {\n        [sessionOptionsHandle, allocs] = setSessionOptions(options);\n\n        sessionHandle = wasm._OrtCreateSession(modelData[0], modelData[1], sessionOptionsHandle);\n        if (sessionHandle === 0) {\n          checkLastError('Can\\'t create a session.');\n        }\n\n        const [inputCount, outputCount] = getSessionInputOutputCount(sessionHandle);\n\n        const inputNames = [];\n        const outputNames = [];\n        for (let i = 0; i < inputCount; i++) {\n          const name = wasm._OrtGetInputName(sessionHandle, i);\n          if (name === 0) {\n            checkLastError('Can\\'t get an input name.');\n          }\n          inputNamesUTF8Encoded.push(name);\n          inputNames.push(wasm.UTF8ToString(name));\n        }\n        for (let i = 0; i < outputCount; i++) {\n          const name = wasm._OrtGetOutputName(sessionHandle, i);\n          if (name === 0) {\n            checkLastError('Can\\'t get an output name.');\n          }\n          outputNamesUTF8Encoded.push(name);\n          outputNames.push(wasm.UTF8ToString(name));\n        }\n\n        activeSessions.set(sessionHandle, [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded]);\n        return [sessionHandle, inputNames, outputNames];\n      } catch (e) {\n        inputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\n        outputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\n\n        if (sessionHandle !== 0) {\n          wasm._OrtReleaseSession(sessionHandle);\n        }\n        throw e;\n      } finally {\n        wasm._free(modelData[0]);\n        if (sessionOptionsHandle !== 0) {\n          wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n        }\n        allocs.forEach(alloc => wasm._free(alloc));\n      }\n    };\n\n\n/**\n * create an instance of InferenceSession.\n * @returns the metadata of InferenceSession. 0-value handle for failure.\n */\nexport const createSession =\n    (model: Uint8Array, options?: InferenceSession.SessionOptions): SerializableSessionMetadata => {\n      const modelData: SerializableModeldata = createSessionAllocate(model);\n      return createSessionFinalize(modelData, options);\n    };\n\nexport const releaseSession = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error(`cannot release session. invalid session id: ${sessionId}`);\n  }\n  const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded] = session;\n\n  inputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\n  outputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\n  wasm._OrtReleaseSession(sessionHandle);\n  activeSessions.delete(sessionId);\n};\n\n/**\n * perform inference run\n */\nexport const run = async(\n    sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\n    options: InferenceSession.RunOptions): Promise<SerializableTensor[]> => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error(`cannot run inference. invalid session id: ${sessionId}`);\n  }\n  const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded] = session;\n\n  const inputCount = inputIndices.length;\n  const outputCount = outputIndices.length;\n\n  let runOptionsHandle = 0;\n  let runOptionsAllocs: number[] = [];\n\n  const inputValues: number[] = [];\n  const inputAllocs: number[] = [];\n\n  try {\n    [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);\n\n    // create input tensors\n    for (let i = 0; i < inputCount; i++) {\n      const dataType = inputs[i][0];\n      const dims = inputs[i][1];\n      const data = inputs[i][2];\n\n      let dataOffset: number;\n      let dataByteLength: number;\n\n      if (Array.isArray(data)) {\n        // string tensor\n        dataByteLength = 4 * data.length;\n        dataOffset = wasm._malloc(dataByteLength);\n        inputAllocs.push(dataOffset);\n        let dataIndex = dataOffset / 4;\n        for (let i = 0; i < data.length; i++) {\n          if (typeof data[i] !== 'string') {\n            throw new TypeError(`tensor data at index ${i} is not a string`);\n          }\n          wasm.HEAPU32[dataIndex++] = allocWasmString(data[i], inputAllocs);\n        }\n      } else {\n        dataByteLength = data.byteLength;\n        dataOffset = wasm._malloc(dataByteLength);\n        inputAllocs.push(dataOffset);\n        wasm.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), dataOffset);\n      }\n\n      const stack = wasm.stackSave();\n      const dimsOffset = wasm.stackAlloc(4 * dims.length);\n      try {\n        let dimIndex = dimsOffset / 4;\n        dims.forEach(d => wasm.HEAP32[dimIndex++] = d);\n        const tensor = wasm._OrtCreateTensor(\n            tensorDataTypeStringToEnum(dataType), dataOffset, dataByteLength, dimsOffset, dims.length);\n        if (tensor === 0) {\n          checkLastError(`Can't create tensor for input[${i}].`);\n        }\n        inputValues.push(tensor);\n      } finally {\n        wasm.stackRestore(stack);\n      }\n    }\n\n    const beforeRunStack = wasm.stackSave();\n    const inputValuesOffset = wasm.stackAlloc(inputCount * 4);\n    const inputNamesOffset = wasm.stackAlloc(inputCount * 4);\n    const outputValuesOffset = wasm.stackAlloc(outputCount * 4);\n    const outputNamesOffset = wasm.stackAlloc(outputCount * 4);\n\n    try {\n      let inputValuesIndex = inputValuesOffset / 4;\n      let inputNamesIndex = inputNamesOffset / 4;\n      let outputValuesIndex = outputValuesOffset / 4;\n      let outputNamesIndex = outputNamesOffset / 4;\n      for (let i = 0; i < inputCount; i++) {\n        wasm.HEAPU32[inputValuesIndex++] = inputValues[i];\n        wasm.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];\n      }\n      for (let i = 0; i < outputCount; i++) {\n        wasm.HEAPU32[outputValuesIndex++] = 0;\n        wasm.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];\n      }\n\n      // support RunOptions\n      let errorCode = wasm._OrtRun(\n          sessionHandle, inputNamesOffset, inputValuesOffset, inputCount, outputNamesOffset, outputCount,\n          outputValuesOffset, runOptionsHandle);\n\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const runPromise = wasm.jsepRunPromise;\n      if (runPromise && typeof runPromise.then !== 'undefined') {\n        errorCode = await runPromise;\n      }\n\n      const output: SerializableTensor[] = [];\n\n      if (errorCode !== 0) {\n        checkLastError('failed to call OrtRun().');\n      }\n\n      for (let i = 0; i < outputCount; i++) {\n        const tensor = wasm.HEAPU32[outputValuesOffset / 4 + i];\n\n        const beforeGetTensorDataStack = wasm.stackSave();\n        // stack allocate 4 pointer value\n        const tensorDataOffset = wasm.stackAlloc(4 * 4);\n\n        let type: Tensor.Type|undefined, dataOffset = 0;\n        try {\n          errorCode = wasm._OrtGetTensorData(\n              tensor, tensorDataOffset, tensorDataOffset + 4, tensorDataOffset + 8, tensorDataOffset + 12);\n          if (errorCode !== 0) {\n            checkLastError(`Can't access output tensor data on index ${i}.`);\n          }\n          let tensorDataIndex = tensorDataOffset / 4;\n          const dataType = wasm.HEAPU32[tensorDataIndex++];\n          dataOffset = wasm.HEAPU32[tensorDataIndex++];\n          const dimsOffset = wasm.HEAPU32[tensorDataIndex++];\n          const dimsLength = wasm.HEAPU32[tensorDataIndex++];\n          const dims = [];\n          for (let i = 0; i < dimsLength; i++) {\n            dims.push(wasm.HEAPU32[dimsOffset / 4 + i]);\n          }\n          wasm._OrtFree(dimsOffset);\n\n          const size = dims.length === 0 ? 1 : dims.reduce((a, b) => a * b);\n          type = tensorDataTypeEnumToString(dataType);\n          if (type === 'string') {\n            const stringData: string[] = [];\n            let dataIndex = dataOffset / 4;\n            for (let i = 0; i < size; i++) {\n              const offset = wasm.HEAPU32[dataIndex++];\n              const maxBytesToRead = i === size - 1 ? undefined : wasm.HEAPU32[dataIndex] - offset;\n              stringData.push(wasm.UTF8ToString(offset, maxBytesToRead));\n            }\n            output.push([type, dims, stringData]);\n          } else {\n            const typedArrayConstructor = tensorTypeToTypedArrayConstructor(type);\n            const data = new typedArrayConstructor(size);\n            new Uint8Array(data.buffer, data.byteOffset, data.byteLength)\n                .set(wasm.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));\n            output.push([type, dims, data]);\n          }\n        } finally {\n          wasm.stackRestore(beforeGetTensorDataStack);\n          if (type === 'string' && dataOffset) {\n            wasm._free(dataOffset);\n          }\n          wasm._OrtReleaseTensor(tensor);\n        }\n      }\n\n      return output;\n    } finally {\n      wasm.stackRestore(beforeRunStack);\n    }\n  } finally {\n    inputValues.forEach(v => wasm._OrtReleaseTensor(v));\n    inputAllocs.forEach(p => wasm._free(p));\n\n    if (runOptionsHandle !== 0) {\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\n    }\n    runOptionsAllocs.forEach(p => wasm._free(p));\n  }\n};\n\n/**\n * end profiling\n */\nexport const endProfiling = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error('invalid session id');\n  }\n  const sessionHandle = session[0];\n\n  // profile file name is not used yet, but it must be freed.\n  const profileFileName = wasm._OrtEndProfiling(sessionHandle);\n  if (profileFileName === 0) {\n    checkLastError('Can\\'t get an profile file name.');\n  }\n  wasm._OrtFree(profileFileName);\n};\n\nexport const extractTransferableBuffers = (tensors: readonly SerializableTensor[]): ArrayBufferLike[] => {\n  const buffers: ArrayBufferLike[] = [];\n  for (const tensor of tensors) {\n    const data = tensor[2];\n    if (!Array.isArray(data) && data.buffer) {\n      buffers.push(data.buffer);\n    }\n  }\n  return buffers;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\nimport * as path from 'path';\n\nimport {OrtWasmModule} from './binding/ort-wasm';\nimport {OrtWasmThreadedModule} from './binding/ort-wasm-threaded';\n\n/* eslint-disable @typescript-eslint/no-require-imports */\nconst ortWasmFactory: EmscriptenModuleFactory<OrtWasmModule> =\n    BUILD_DEFS.DISABLE_WEBGPU ? require('./binding/ort-wasm.js') : require('./binding/ort-wasm-simd.jsep.js');\n\nconst ortWasmFactoryThreaded: EmscriptenModuleFactory<OrtWasmModule> = !BUILD_DEFS.DISABLE_WASM_THREAD ?\n    (BUILD_DEFS.DISABLE_WEBGPU ? require('./binding/ort-wasm-threaded.js') :\n                                 require('./binding/ort-wasm-simd-threaded.jsep.js')) :\n    ortWasmFactory;\n/* eslint-enable @typescript-eslint/no-require-imports */\n\nlet wasm: OrtWasmModule|undefined;\nlet initialized = false;\nlet initializing = false;\nlet aborted = false;\n\nconst isMultiThreadSupported = (): boolean => {\n  try {\n    // If 'SharedArrayBuffer' is not available, WebAssembly threads will not work.\n    if (typeof SharedArrayBuffer === 'undefined') {\n      return false;\n    }\n\n    // Test for transferability of SABs (for browsers. needed for Firefox)\n    // https://groups.google.com/forum/#!msg/mozilla.dev.platform/IHkBZlHETpA/dwsMNchWEQAJ\n    if (typeof MessageChannel !== 'undefined') {\n      new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));\n    }\n\n    // Test for WebAssembly threads capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing threaded instructions.\n    return WebAssembly.validate(new Uint8Array([\n      0, 97, 115, 109, 1, 0,  0,  0, 1, 4, 1,  96, 0,   0,  3, 2, 1,  0, 5,\n      4, 1,  3,   1,   1, 10, 11, 1, 9, 0, 65, 0,  254, 16, 2, 0, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst isSimdSupported = (): boolean => {\n  try {\n    // Test for WebAssembly SIMD capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing SIMD instructions.\n\n    // The binary data is generated from the following code by wat2wasm:\n    //\n    // (module\n    //   (type $t0 (func))\n    //   (func $f0 (type $t0)\n    //     (drop\n    //       (i32x4.dot_i16x8_s\n    //         (i8x16.splat\n    //           (i32.const 0))\n    //         (v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000)))))\n\n    return WebAssembly.validate(new Uint8Array([\n      0,   97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 30, 1,   28,  0, 65, 0,\n      253, 15, 253, 12,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  253, 186, 1, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst getWasmFileName = (useSimd: boolean, useThreads: boolean) => {\n  if (useThreads) {\n    return useSimd ? 'ort-wasm-simd-threaded.wasm' : 'ort-wasm-threaded.wasm';\n  } else {\n    return useSimd ? 'ort-wasm-simd.wasm' : 'ort-wasm.wasm';\n  }\n};\n\nexport const initializeWebAssembly = async(flags: Env.WebAssemblyFlags): Promise<void> => {\n  if (initialized) {\n    return Promise.resolve();\n  }\n  if (initializing) {\n    throw new Error('multiple calls to \\'initializeWebAssembly()\\' detected.');\n  }\n  if (aborted) {\n    throw new Error('previous call to \\'initializeWebAssembly()\\' failed.');\n  }\n\n  initializing = true;\n\n  // wasm flags are already initialized\n  const timeout = flags.initTimeout!;\n  const numThreads = flags.numThreads!;\n  const simd = flags.simd!;\n\n  const useThreads = numThreads > 1 && isMultiThreadSupported();\n  const useSimd = simd && isSimdSupported();\n\n  const wasmPaths = flags.wasmPaths;\n  const wasmPrefixOverride = typeof wasmPaths === 'string' ? wasmPaths : undefined;\n  const wasmFileName = getWasmFileName(useSimd, useThreads);\n  const wasmPathOverride = typeof wasmPaths === 'object' ? wasmPaths[wasmFileName] : undefined;\n\n  let isTimeout = false;\n\n  const tasks: Array<Promise<void>> = [];\n\n  // promise for timeout\n  if (timeout > 0) {\n    tasks.push(new Promise((resolve) => {\n      setTimeout(() => {\n        isTimeout = true;\n        resolve();\n      }, timeout);\n    }));\n  }\n\n  // promise for module initialization\n  tasks.push(new Promise((resolve, reject) => {\n    const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;\n    const config: Partial<OrtWasmModule> = {\n      locateFile: (fileName: string, scriptDirectory: string) => {\n        if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads && fileName.endsWith('.worker.js') &&\n            typeof Blob !== 'undefined') {\n          return URL.createObjectURL(new Blob(\n              [\n                // This require() function is handled by webpack to load file content of the corresponding .worker.js\n                // eslint-disable-next-line @typescript-eslint/no-require-imports\n                require('./binding/ort-wasm-threaded.worker.js')\n              ],\n              {type: 'text/javascript'}));\n        }\n\n        if (fileName.endsWith('.wasm')) {\n          if (wasmPathOverride) {\n            return wasmPathOverride;\n          }\n\n          const prefix = wasmPrefixOverride ?? scriptDirectory;\n\n          if (!BUILD_DEFS.DISABLE_WEBGPU) {\n            if (wasmFileName === 'ort-wasm-simd.wasm') {\n              return prefix + 'ort-wasm-simd.jsep.wasm';\n            } else if (wasmFileName === 'ort-wasm-simd-threaded.wasm') {\n              return prefix + 'ort-wasm-simd-threaded.jsep.wasm';\n            }\n          }\n\n          return prefix + wasmFileName;\n        }\n\n        return scriptDirectory + fileName;\n      }\n    };\n\n    if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads) {\n      if (typeof Blob === 'undefined') {\n        config.mainScriptUrlOrBlob = path.join(__dirname, 'ort-wasm-threaded.js');\n      } else {\n        const scriptSourceCode = `var ortWasmThreaded=(function(){var _scriptDir;return ${factory.toString()}})();`;\n        config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], {type: 'text/javascript'});\n      }\n    }\n\n    factory(config).then(\n        // wasm module initialized successfully\n        module => {\n          initializing = false;\n          initialized = true;\n          wasm = module;\n          resolve();\n        },\n        // wasm module failed to initialize\n        (what) => {\n          initializing = false;\n          aborted = true;\n          reject(what);\n        });\n  }));\n\n  await Promise.race(tasks);\n\n  if (isTimeout) {\n    throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);\n  }\n};\n\nexport const getInstance = (): OrtWasmModule => {\n  if (initialized && wasm) {\n    return wasm;\n  }\n\n  throw new Error('WebAssembly is not initialized yet.');\n};\n\nexport const dispose = (): void => {\n  if (initialized && !initializing && !aborted) {\n    initializing = true;\n\n    (wasm as OrtWasmThreadedModule).PThread?.terminateAllThreads();\n    wasm = undefined;\n\n    initializing = false;\n    initialized = false;\n    aborted = true;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getInstance} from './wasm-factory';\n\nexport const allocWasmString = (data: string, allocs: number[]): number => {\n  const wasm = getInstance();\n\n  const dataLength = wasm.lengthBytesUTF8(data) + 1;\n  const dataOffset = wasm._malloc(dataLength);\n  wasm.stringToUTF8(data, dataOffset, dataLength);\n  allocs.push(dataOffset);\n\n  return dataOffset;\n};\n\ninterface ExtraOptionsHandler {\n  (name: string, value: string): void;\n}\n\nexport const iterateExtraOptions =\n    (options: Record<string, unknown>, prefix: string, seen: WeakSet<Record<string, unknown>>,\n     handler: ExtraOptionsHandler): void => {\n      if (typeof options == 'object' && options !== null) {\n        if (seen.has(options)) {\n          throw new Error('Circular reference in options');\n        } else {\n          seen.add(options);\n        }\n      }\n\n      Object.entries(options).forEach(([key, value]) => {\n        const name = (prefix) ? prefix + key : key;\n        if (typeof value === 'object') {\n          iterateExtraOptions(value as Record<string, unknown>, name + '.', seen, handler);\n        } else if (typeof value === 'string' || typeof value === 'number') {\n          handler(name, value.toString());\n        } else if (typeof value === 'boolean') {\n          handler(name, (value) ? '1' : '0');\n        } else {\n          throw new Error(`Can't handle extra config type: ${typeof value}`);\n        }\n      });\n    };\n\n/**\n * check web assembly API's last error and throw error if any error occurred.\n * @param message a message used when an error occurred.\n */\nexport const checkLastError = (message: string): void => {\n  const wasm = getInstance();\n\n  const stack = wasm.stackSave();\n  try {\n    const paramsOffset = wasm.stackAlloc(8);\n    wasm._OrtGetLastError(paramsOffset, paramsOffset + 4);\n    const errorCode = wasm.HEAP32[paramsOffset / 4];\n    const errorMessagePointer = wasm.HEAPU32[paramsOffset / 4 + 1];\n    const errorMessage = errorMessagePointer ? wasm.UTF8ToString(errorMessagePointer) : '';\n    throw new Error(`${message} ERROR_CODE: ${errorCode}, ERROR_MESSAGE: ${errorMessage}`);\n  } finally {\n    wasm.stackRestore(stack);\n  }\n};\n","\nimport worker from \"!!../../../../node_modules/worker-loader/dist/runtime/inline.js\";\n\nexport default function Worker_fn() {\n  return worker(\"/*!\\n* ONNX Runtime Web v1.16.0\\n* Copyright (c) Microsoft Corporation. All rights reserved.\\n* Licensed under the MIT License.\\n*/\\n(()=>{var e={918:(e,t,r)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.setRunOptions=void 0;const n=r(263),a=r(497);t.setRunOptions=e=>{const t=(0,n.getInstance)();let r=0;const o=[],i=e||{};try{if(void 0===(null==e?void 0:e.logSeverityLevel))i.logSeverityLevel=2;else if(\\\"number\\\"!=typeof e.logSeverityLevel||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(void 0===(null==e?void 0:e.logVerbosityLevel))i.logVerbosityLevel=0;else if(\\\"number\\\"!=typeof e.logVerbosityLevel||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);void 0===(null==e?void 0:e.terminate)&&(i.terminate=!1);let n=0;return void 0!==(null==e?void 0:e.tag)&&(n=(0,a.allocWasmString)(e.tag,o)),r=t._OrtCreateRunOptions(i.logSeverityLevel,i.logVerbosityLevel,!!i.terminate,n),0===r&&(0,a.checkLastError)(\\\"Can't create run options.\\\"),void 0!==(null==e?void 0:e.extra)&&(0,a.iterateExtraOptions)(e.extra,\\\"\\\",new WeakSet,((e,n)=>{const i=(0,a.allocWasmString)(e,o),u=(0,a.allocWasmString)(n,o);0!==t._OrtAddRunConfigEntry(r,i,u)&&(0,a.checkLastError)(`Can't set a run config entry: ${e} - ${n}.`)})),[r,o]}catch(e){throw 0!==r&&t._OrtReleaseRunOptions(r),o.forEach((e=>t._free(e))),e}}},622:(e,t,r)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.setSessionOptions=void 0;const n=r(263),a=r(497);t.setSessionOptions=e=>{var t,r,o,i;const u=(0,n.getInstance)();let s=0;const c=[],f=e||{};(e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});const t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly=\\\"1\\\"),e.executionProviders&&e.executionProviders.some((e=>\\\"webgpu\\\"===(\\\"string\\\"==typeof e?e:e.name)))&&(e.enableMemPattern=!1)})(f);try{const e=(e=>{switch(e){case\\\"disabled\\\":return 0;case\\\"basic\\\":return 1;case\\\"extended\\\":return 2;case\\\"all\\\":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}})(null!==(t=f.graphOptimizationLevel)&&void 0!==t?t:\\\"all\\\"),l=(e=>{switch(e){case\\\"sequential\\\":return 0;case\\\"parallel\\\":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}})(null!==(r=f.executionMode)&&void 0!==r?r:\\\"sequential\\\"),p=\\\"string\\\"==typeof f.logId?(0,a.allocWasmString)(f.logId,c):0,d=null!==(o=f.logSeverityLevel)&&void 0!==o?o:2;if(!Number.isInteger(d)||d<0||d>4)throw new Error(`log serverity level is not valid: ${d}`);const g=null!==(i=f.logVerbosityLevel)&&void 0!==i?i:0;if(!Number.isInteger(g)||g<0||g>4)throw new Error(`log verbosity level is not valid: ${g}`);const h=\\\"string\\\"==typeof f.optimizedModelFilePath?(0,a.allocWasmString)(f.optimizedModelFilePath,c):0;return s=u._OrtCreateSessionOptions(e,!!f.enableCpuMemArena,!!f.enableMemPattern,l,!!f.enableProfiling,0,p,d,g,h),0===s&&(0,a.checkLastError)(\\\"Can't create session options.\\\"),f.executionProviders&&((e,t,r)=>{for(const o of t){let t=\\\"string\\\"==typeof o?o:o.name;switch(t){case\\\"xnnpack\\\":t=\\\"XNNPACK\\\";break;case\\\"webnn\\\":if(t=\\\"WEBNN\\\",\\\"string\\\"!=typeof o){const t=o;if(null==t?void 0:t.deviceType){const o=(0,a.allocWasmString)(\\\"deviceType\\\",r),i=(0,a.allocWasmString)(t.deviceType,r);0!==(0,n.getInstance)()._OrtAddSessionConfigEntry(e,o,i)&&(0,a.checkLastError)(`Can't set a session config entry: 'deviceType' - ${t.deviceType}.`)}if(null==t?void 0:t.powerPreference){const o=(0,a.allocWasmString)(\\\"powerPreference\\\",r),i=(0,a.allocWasmString)(t.powerPreference,r);0!==(0,n.getInstance)()._OrtAddSessionConfigEntry(e,o,i)&&(0,a.checkLastError)(`Can't set a session config entry: 'powerPreference' - ${t.powerPreference}.`)}}break;case\\\"webgpu\\\":t=\\\"JS\\\";break;case\\\"wasm\\\":case\\\"cpu\\\":continue;default:throw new Error(`not supported execution provider: ${t}`)}const i=(0,a.allocWasmString)(t,r);0!==(0,n.getInstance)()._OrtAppendExecutionProvider(e,i)&&(0,a.checkLastError)(`Can't append execution provider: ${t}.`)}})(s,f.executionProviders,c),void 0!==f.extra&&(0,a.iterateExtraOptions)(f.extra,\\\"\\\",new WeakSet,((e,t)=>{const r=(0,a.allocWasmString)(e,c),n=(0,a.allocWasmString)(t,c);0!==u._OrtAddSessionConfigEntry(s,r,n)&&(0,a.checkLastError)(`Can't set a session config entry: ${e} - ${t}.`)})),[s,c]}catch(e){throw 0!==s&&u._OrtReleaseSessionOptions(s),c.forEach((e=>u._free(e))),e}}},917:(e,t)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.logLevelStringToEnum=t.tensorTypeToTypedArrayConstructor=t.getTensorElementSize=t.tensorDataTypeEnumToString=t.tensorDataTypeStringToEnum=void 0,t.tensorDataTypeStringToEnum=e=>{switch(e){case\\\"int8\\\":return 3;case\\\"uint8\\\":return 2;case\\\"bool\\\":return 9;case\\\"int16\\\":return 5;case\\\"uint16\\\":return 4;case\\\"int32\\\":return 6;case\\\"uint32\\\":return 12;case\\\"float16\\\":return 10;case\\\"float32\\\":return 1;case\\\"float64\\\":return 11;case\\\"string\\\":return 8;case\\\"int64\\\":return 7;case\\\"uint64\\\":return 13;default:throw new Error(`unsupported data type: ${e}`)}},t.tensorDataTypeEnumToString=e=>{switch(e){case 3:return\\\"int8\\\";case 2:return\\\"uint8\\\";case 9:return\\\"bool\\\";case 5:return\\\"int16\\\";case 4:return\\\"uint16\\\";case 6:return\\\"int32\\\";case 12:return\\\"uint32\\\";case 10:return\\\"float16\\\";case 1:return\\\"float32\\\";case 11:return\\\"float64\\\";case 8:return\\\"string\\\";case 7:return\\\"int64\\\";case 13:return\\\"uint64\\\";default:throw new Error(`unsupported data type: ${e}`)}},t.getTensorElementSize=e=>[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][e],t.tensorTypeToTypedArrayConstructor=e=>{switch(e){case\\\"float16\\\":case\\\"uint16\\\":return Uint16Array;case\\\"float32\\\":return Float32Array;case\\\"uint8\\\":case\\\"bool\\\":return Uint8Array;case\\\"int8\\\":return Int8Array;case\\\"int16\\\":return Int16Array;case\\\"int32\\\":return Int32Array;case\\\"float64\\\":return Float64Array;case\\\"uint32\\\":return Uint32Array;case\\\"int64\\\":return BigInt64Array;case\\\"uint64\\\":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},t.logLevelStringToEnum=e=>{switch(e){case\\\"verbose\\\":return 0;case\\\"info\\\":return 1;case\\\"warning\\\":return 2;case\\\"error\\\":return 3;case\\\"fatal\\\":return 4;default:throw new Error(`unsupported logging level: ${e}`)}}},259:function(e,t,r){\\\"use strict\\\";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(a,o){function i(e){try{s(n.next(e))}catch(e){o(e)}}function u(e){try{s(n.throw(e))}catch(e){o(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(i,u)}s((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.extractTransferableBuffers=t.endProfiling=t.run=t.releaseSession=t.createSession=t.createSessionFinalize=t.createSessionAllocate=t.initRuntime=void 0;const a=r(918),o=r(622),i=r(917),u=r(263),s=r(497);t.initRuntime=e=>n(void 0,void 0,void 0,(function*(){var t,r;t=e.wasm.numThreads,r=(0,i.logLevelStringToEnum)(e.logLevel),0!==(0,u.getInstance)()._OrtInit(t,r)&&(0,s.checkLastError)(\\\"Can't initialize onnxruntime.\\\")}));const c=new Map;t.createSessionAllocate=e=>{const t=(0,u.getInstance)(),r=t._malloc(e.byteLength);if(0===r)throw new Error(`Can't create a session. failed to allocate a buffer of size ${e.byteLength}.`);return t.HEAPU8.set(e,r),[r,e.byteLength]},t.createSessionFinalize=(e,t)=>{const r=(0,u.getInstance)();let n=0,a=0,i=[];const f=[],l=[];try{[a,i]=(0,o.setSessionOptions)(t),n=r._OrtCreateSession(e[0],e[1],a),0===n&&(0,s.checkLastError)(\\\"Can't create a session.\\\");const[p,d]=(e=>{const t=(0,u.getInstance)(),r=t.stackSave();try{const r=t.stackAlloc(8);return 0!==t._OrtGetInputOutputCount(e,r,r+4)&&(0,s.checkLastError)(\\\"Can't get session input/output count.\\\"),[t.HEAP32[r/4],t.HEAP32[r/4+1]]}finally{t.stackRestore(r)}})(n),g=[],h=[];for(let e=0;e<p;e++){const t=r._OrtGetInputName(n,e);0===t&&(0,s.checkLastError)(\\\"Can't get an input name.\\\"),f.push(t),g.push(r.UTF8ToString(t))}for(let e=0;e<d;e++){const t=r._OrtGetOutputName(n,e);0===t&&(0,s.checkLastError)(\\\"Can't get an output name.\\\"),l.push(t),h.push(r.UTF8ToString(t))}return c.set(n,[n,f,l]),[n,g,h]}catch(e){throw f.forEach((e=>r._OrtFree(e))),l.forEach((e=>r._OrtFree(e))),0!==n&&r._OrtReleaseSession(n),e}finally{r._free(e[0]),0!==a&&r._OrtReleaseSessionOptions(a),i.forEach((e=>r._free(e)))}},t.createSession=(e,r)=>{const n=(0,t.createSessionAllocate)(e);return(0,t.createSessionFinalize)(n,r)},t.releaseSession=e=>{const t=(0,u.getInstance)(),r=c.get(e);if(!r)throw new Error(`cannot release session. invalid session id: ${e}`);const[n,a,o]=r;a.forEach((e=>t._OrtFree(e))),o.forEach((e=>t._OrtFree(e))),t._OrtReleaseSession(n),c.delete(e)},t.run=(e,t,r,o,f)=>n(void 0,void 0,void 0,(function*(){const n=(0,u.getInstance)(),l=c.get(e);if(!l)throw new Error(`cannot run inference. invalid session id: ${e}`);const[p,d,g]=l,h=t.length,m=o.length;let y=0,v=[];const b=[],w=[];try{[y,v]=(0,a.setRunOptions)(f);for(let e=0;e<h;e++){const t=r[e][0],a=r[e][1],o=r[e][2];let u,c;if(Array.isArray(o)){c=4*o.length,u=n._malloc(c),w.push(u);let e=u/4;for(let t=0;t<o.length;t++){if(\\\"string\\\"!=typeof o[t])throw new TypeError(`tensor data at index ${t} is not a string`);n.HEAPU32[e++]=(0,s.allocWasmString)(o[t],w)}}else c=o.byteLength,u=n._malloc(c),w.push(u),n.HEAPU8.set(new Uint8Array(o.buffer,o.byteOffset,c),u);const f=n.stackSave(),l=n.stackAlloc(4*a.length);try{let r=l/4;a.forEach((e=>n.HEAP32[r++]=e));const o=n._OrtCreateTensor((0,i.tensorDataTypeStringToEnum)(t),u,c,l,a.length);0===o&&(0,s.checkLastError)(`Can't create tensor for input[${e}].`),b.push(o)}finally{n.stackRestore(f)}}const e=n.stackSave(),u=n.stackAlloc(4*h),c=n.stackAlloc(4*h),l=n.stackAlloc(4*m),_=n.stackAlloc(4*m);try{let e=u/4,r=c/4,a=l/4,f=_/4;for(let a=0;a<h;a++)n.HEAPU32[e++]=b[a],n.HEAPU32[r++]=d[t[a]];for(let e=0;e<m;e++)n.HEAPU32[a++]=0,n.HEAPU32[f++]=g[o[e]];let v=n._OrtRun(p,c,u,h,_,m,l,y);const w=n.jsepRunPromise;w&&void 0!==w.then&&(v=yield w);const T=[];0!==v&&(0,s.checkLastError)(\\\"failed to call OrtRun().\\\");for(let e=0;e<m;e++){const t=n.HEAPU32[l/4+e],r=n.stackSave(),a=n.stackAlloc(16);let o,u=0;try{v=n._OrtGetTensorData(t,a,a+4,a+8,a+12),0!==v&&(0,s.checkLastError)(`Can't access output tensor data on index ${e}.`);let r=a/4;const c=n.HEAPU32[r++];u=n.HEAPU32[r++];const f=n.HEAPU32[r++],l=n.HEAPU32[r++],p=[];for(let e=0;e<l;e++)p.push(n.HEAPU32[f/4+e]);n._OrtFree(f);const d=0===p.length?1:p.reduce(((e,t)=>e*t));if(o=(0,i.tensorDataTypeEnumToString)(c),\\\"string\\\"===o){const e=[];let t=u/4;for(let r=0;r<d;r++){const a=n.HEAPU32[t++],o=r===d-1?void 0:n.HEAPU32[t]-a;e.push(n.UTF8ToString(a,o))}T.push([o,p,e])}else{const e=new((0,i.tensorTypeToTypedArrayConstructor)(o))(d);new Uint8Array(e.buffer,e.byteOffset,e.byteLength).set(n.HEAPU8.subarray(u,u+e.byteLength)),T.push([o,p,e])}}finally{n.stackRestore(r),\\\"string\\\"===o&&u&&n._free(u),n._OrtReleaseTensor(t)}}return T}finally{n.stackRestore(e)}}finally{b.forEach((e=>n._OrtReleaseTensor(e))),w.forEach((e=>n._free(e))),0!==y&&n._OrtReleaseRunOptions(y),v.forEach((e=>n._free(e)))}})),t.endProfiling=e=>{const t=(0,u.getInstance)(),r=c.get(e);if(!r)throw new Error(\\\"invalid session id\\\");const n=r[0],a=t._OrtEndProfiling(n);0===a&&(0,s.checkLastError)(\\\"Can't get an profile file name.\\\"),t._OrtFree(a)},t.extractTransferableBuffers=e=>{const t=[];for(const r of e){const e=r[2];!Array.isArray(e)&&e.buffer&&t.push(e.buffer)}return t}},263:function(e,t,r){\\\"use strict\\\";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var a=Object.getOwnPropertyDescriptor(t,r);a&&!(\\\"get\\\"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,a)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,\\\"default\\\",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)\\\"default\\\"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&n(t,e,r);return a(t,e),t},i=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(a,o){function i(e){try{s(n.next(e))}catch(e){o(e)}}function u(e){try{s(n.throw(e))}catch(e){o(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(i,u)}s((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.dispose=t.getInstance=t.initializeWebAssembly=void 0;const u=o(r(449)),s=r(932),c=r(474);let f,l=!1,p=!1,d=!1;t.initializeWebAssembly=e=>i(void 0,void 0,void 0,(function*(){if(l)return Promise.resolve();if(p)throw new Error(\\\"multiple calls to 'initializeWebAssembly()' detected.\\\");if(d)throw new Error(\\\"previous call to 'initializeWebAssembly()' failed.\\\");p=!0;const t=e.initTimeout,n=e.numThreads,a=e.simd,o=n>1&&(()=>{try{return\\\"undefined\\\"!=typeof SharedArrayBuffer&&(\\\"undefined\\\"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])))}catch(e){return!1}})(),i=a&&(()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch(e){return!1}})(),g=e.wasmPaths,h=\\\"string\\\"==typeof g?g:void 0,m=((e,t)=>t?e?\\\"ort-wasm-simd-threaded.wasm\\\":\\\"ort-wasm-threaded.wasm\\\":e?\\\"ort-wasm-simd.wasm\\\":\\\"ort-wasm.wasm\\\")(i,o),y=\\\"object\\\"==typeof g?g[m]:void 0;let v=!1;const b=[];if(t>0&&b.push(new Promise((e=>{setTimeout((()=>{v=!0,e()}),t)}))),b.push(new Promise(((e,t)=>{const n=o?c:s,a={locateFile:(e,t)=>o&&e.endsWith(\\\".worker.js\\\")&&\\\"undefined\\\"!=typeof Blob?URL.createObjectURL(new Blob([r(154)],{type:\\\"text/javascript\\\"})):e.endsWith(\\\".wasm\\\")?y||(null!=h?h:t)+m:t+e};if(o)if(\\\"undefined\\\"==typeof Blob)a.mainScriptUrlOrBlob=u.join(__dirname,\\\"ort-wasm-threaded.js\\\");else{const e=`var ortWasmThreaded=(function(){var _scriptDir;return ${n.toString()}})();`;a.mainScriptUrlOrBlob=new Blob([e],{type:\\\"text/javascript\\\"})}n(a).then((t=>{p=!1,l=!0,f=t,e()}),(e=>{p=!1,d=!0,t(e)}))}))),yield Promise.race(b),v)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)})),t.getInstance=()=>{if(l&&f)return f;throw new Error(\\\"WebAssembly is not initialized yet.\\\")},t.dispose=()=>{var e;!l||p||d||(p=!0,null===(e=f.PThread)||void 0===e||e.terminateAllThreads(),f=void 0,p=!1,l=!1,d=!0)}},497:(e,t,r)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.checkLastError=t.iterateExtraOptions=t.allocWasmString=void 0;const n=r(263);t.allocWasmString=(e,t)=>{const r=(0,n.getInstance)(),a=r.lengthBytesUTF8(e)+1,o=r._malloc(a);return r.stringToUTF8(e,o,a),t.push(o),o},t.iterateExtraOptions=(e,r,n,a)=>{if(\\\"object\\\"==typeof e&&null!==e){if(n.has(e))throw new Error(\\\"Circular reference in options\\\");n.add(e)}Object.entries(e).forEach((([e,o])=>{const i=r?r+e:e;if(\\\"object\\\"==typeof o)(0,t.iterateExtraOptions)(o,i+\\\".\\\",n,a);else if(\\\"string\\\"==typeof o||\\\"number\\\"==typeof o)a(i,o.toString());else{if(\\\"boolean\\\"!=typeof o)throw new Error(\\\"Can't handle extra config type: \\\"+typeof o);a(i,o?\\\"1\\\":\\\"0\\\")}}))},t.checkLastError=e=>{const t=(0,n.getInstance)(),r=t.stackSave();try{const r=t.stackAlloc(8);t._OrtGetLastError(r,r+4);const n=t.HEAP32[r/4],a=t.HEAPU32[r/4+1],o=a?t.UTF8ToString(a):\\\"\\\";throw new Error(`${e} ERROR_CODE: ${n}, ERROR_MESSAGE: ${o}`)}finally{t.stackRestore(r)}}},474:(e,t,r)=>{var _scriptDir,n=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\\\"undefined\\\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(e={}){function t(){return F.buffer!=D.buffer&&V(),D}function n(){return F.buffer!=D.buffer&&V(),I}function a(){return F.buffer!=D.buffer&&V(),x}function o(){return F.buffer!=D.buffer&&V(),H}function i(){return F.buffer!=D.buffer&&V(),j}function u(){return F.buffer!=D.buffer&&V(),L}function s(){return F.buffer!=D.buffer&&V(),N}var c,f,l;c||(c=void 0!==e?e:{}),c.ready=new Promise(((e,t)=>{f=e,l=t}));var p,d,g,h=Object.assign({},c),m=\\\"./this.program\\\",y=(e,t)=>{throw t},v=\\\"object\\\"==typeof window,b=\\\"function\\\"==typeof importScripts,w=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,_=c.ENVIRONMENT_IS_PTHREAD||!1,T=\\\"\\\";function A(e){return c.locateFile?c.locateFile(e,T):T+e}if(w){var O=r(384),E=r(908);let t;T=b?E.dirname(T)+\\\"/\\\":__dirname+\\\"/\\\",p=(e,t)=>(e=e.startsWith(\\\"file://\\\")?new URL(e):E.normalize(e),O.readFileSync(e,t?void 0:\\\"utf8\\\")),g=e=>((e=p(e,!0)).buffer||(e=new Uint8Array(e)),e),d=(e,t,r,n=!0)=>{e=e.startsWith(\\\"file://\\\")?new URL(e):E.normalize(e),O.readFile(e,n?void 0:\\\"utf8\\\",((e,a)=>{e?r(e):t(n?a.buffer:a)}))},!c.thisProgram&&1<process.argv.length&&(m=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),y=(e,t)=>{throw process.exitCode=e,t},c.inspect=()=>\\\"[Emscripten Module object]\\\";try{t=r(925)}catch(e){throw console.error('The \\\"worker_threads\\\" module is not supported in this node.js build - perhaps a newer version is needed?'),e}global.Worker=t.Worker}else(v||b)&&(b?T=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(T=document.currentScript.src),_scriptDir&&(T=_scriptDir),T=0!==T.indexOf(\\\"blob:\\\")?T.substr(0,T.replace(/[?#].*/,\\\"\\\").lastIndexOf(\\\"/\\\")+1):\\\"\\\",w||(p=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.send(null),t.responseText},b&&(g=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.responseType=\\\"arraybuffer\\\",t.send(null),new Uint8Array(t.response)}),d=(e,t,r)=>{var n=new XMLHttpRequest;n.open(\\\"GET\\\",e,!0),n.responseType=\\\"arraybuffer\\\",n.onload=()=>{200==n.status||0==n.status&&n.response?t(n.response):r()},n.onerror=r,n.send(null)}));w&&\\\"undefined\\\"==typeof performance&&(global.performance=r(953).performance);var S=console.log.bind(console),P=console.warn.bind(console);w&&(S=(...e)=>O.writeSync(1,e.join(\\\" \\\")+\\\"\\\\n\\\"),P=(...e)=>O.writeSync(2,e.join(\\\" \\\")+\\\"\\\\n\\\"));var M,C=c.print||S,k=c.printErr||P;Object.assign(c,h),h=null,c.thisProgram&&(m=c.thisProgram),c.quit&&(y=c.quit),c.wasmBinary&&(M=c.wasmBinary);var R=c.noExitRuntime||!0;\\\"object\\\"!=typeof WebAssembly&&oe(\\\"no native wasm support detected\\\");var F,U,W,D,I,x,H,j,L,Y,z,B,N,G=!1;function V(){var e=F.buffer;c.HEAP8=D=new Int8Array(e),c.HEAP16=x=new Int16Array(e),c.HEAP32=j=new Int32Array(e),c.HEAPU8=I=new Uint8Array(e),c.HEAPU16=H=new Uint16Array(e),c.HEAPU32=L=new Uint32Array(e),c.HEAPF32=Y=new Float32Array(e),c.HEAPF64=N=new Float64Array(e),c.HEAP64=z=new BigInt64Array(e),c.HEAPU64=B=new BigUint64Array(e)}var $=c.INITIAL_MEMORY||16777216;if(5242880<=$||oe(\\\"INITIAL_MEMORY should be larger than STACK_SIZE, was \\\"+$+\\\"! (STACK_SIZE=5242880)\\\"),_)F=c.wasmMemory;else if(c.wasmMemory)F=c.wasmMemory;else if(!((F=new WebAssembly.Memory({initial:$/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw k(\\\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\\\"),w&&k(\\\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)\\\"),Error(\\\"bad memory\\\");V(),$=F.buffer.byteLength;var q,J=[],X=[],Z=[],Q=0;function K(){return R||0<Q}function ee(){var e=c.preRun.shift();J.unshift(e)}var te,re=0,ne=null,ae=null;function oe(e){throw c.onAbort&&c.onAbort(e),k(e=\\\"Aborted(\\\"+e+\\\")\\\"),G=!0,W=1,e=new WebAssembly.RuntimeError(e+\\\". Build with -sASSERTIONS for more info.\\\"),l(e),e}function ie(e){return e.startsWith(\\\"data:application/octet-stream;base64,\\\")}function ue(e){try{if(e==te&&M)return new Uint8Array(M);if(g)return g(e);throw\\\"both async and sync fetching of the wasm failed\\\"}catch(e){oe(e)}}function se(e,t,r){return function(e){if(!M&&(v||b)){if(\\\"function\\\"==typeof fetch&&!e.startsWith(\\\"file://\\\"))return fetch(e,{credentials:\\\"same-origin\\\"}).then((t=>{if(!t.ok)throw\\\"failed to load wasm binary file at '\\\"+e+\\\"'\\\";return t.arrayBuffer()})).catch((()=>ue(e)));if(d)return new Promise(((t,r)=>{d(e,(e=>t(new Uint8Array(e))),r)}))}return Promise.resolve().then((()=>ue(e)))}(e).then((e=>WebAssembly.instantiate(e,t))).then((e=>e)).then(r,(e=>{k(\\\"failed to asynchronously prepare wasm: \\\"+e),oe(e)}))}function ce(e){this.name=\\\"ExitStatus\\\",this.message=\\\"Program terminated with exit(\\\"+e+\\\")\\\",this.status=e}function fe(e){e.terminate(),e.onmessage=()=>{}}function le(e){(e=be.hb[e])||oe(),be.Lb(e)}function pe(e){var t=be.Db();if(!t)return 6;be.kb.push(t),be.hb[e.jb]=t,t.jb=e.jb;var r={cmd:\\\"run\\\",start_routine:e.Mb,arg:e.Bb,pthread_ptr:e.jb};return w&&t.unref(),t.postMessage(r,e.Sb),0}ie(te=\\\"ort-wasm-threaded.wasm\\\")||(te=A(te));var de=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf8\\\"):void 0;function ge(e,t,r){var n=(t>>>=0)+r;for(r=t;e[r]&&!(r>=n);)++r;if(16<r-t&&e.buffer&&de)return de.decode(e.buffer instanceof SharedArrayBuffer?e.slice(t,r):e.subarray(t,r));for(n=\\\"\\\";t<r;){var a=e[t++];if(128&a){var o=63&e[t++];if(192==(224&a))n+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[t++])?n+=String.fromCharCode(a):(a-=65536,n+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else n+=String.fromCharCode(a)}return n}function he(e,t){return(e>>>=0)?ge(n(),e,t):\\\"\\\"}function me(e){if(_)return Ut(1,1,e);W=e,K()||(be.Nb(),c.onExit&&c.onExit(e),G=!0),y(e,new ce(e))}function ye(e){if(W=e,_)throw _e(e),\\\"unwind\\\";me(e)}function ve(e){e instanceof ce||\\\"unwind\\\"==e||y(1,e)}var be={nb:[],kb:[],zb:[],hb:{},tb:function(){_&&be.Fb()},Vb:function(){},Fb:function(){be.receiveObjectTransfer=be.Kb,be.threadInitTLS=be.yb,be.setExitStatus=be.xb,R=!1},xb:function(e){W=e},Xb:[\\\"$terminateWorker\\\"],Nb:function(){for(var e of be.kb)fe(e);for(e of be.nb)fe(e);be.nb=[],be.kb=[],be.hb=[]},Lb:function(e){var t=e.jb;delete be.hb[t],be.nb.push(e),be.kb.splice(be.kb.indexOf(e),1),e.jb=0,ar(t)},Kb:function(){},yb:function(){be.zb.forEach((e=>e()))},Jb:e=>new Promise((t=>{e.onmessage=r=>{var n=(r=r.data).cmd;if(e.jb&&(be.Cb=e.jb),r.targetThread&&r.targetThread!=Qt()){var a=be.hb[r.Wb];a?a.postMessage(r,r.transferList):k('Internal error! Worker sent a message \\\"'+n+'\\\" to target pthread '+r.targetThread+\\\", but that thread no longer exists!\\\")}else\\\"checkMailbox\\\"===n?mt():\\\"spawnThread\\\"===n?pe(r):\\\"cleanupThread\\\"===n?le(r.thread):\\\"killThread\\\"===n?(r=r.thread,n=be.hb[r],delete be.hb[r],fe(n),ar(r),be.kb.splice(be.kb.indexOf(n),1),n.jb=0):\\\"cancelThread\\\"===n?be.hb[r.thread].postMessage({cmd:\\\"cancel\\\"}):\\\"loaded\\\"===n?(e.loaded=!0,t(e)):\\\"print\\\"===n?C(\\\"Thread \\\"+r.threadId+\\\": \\\"+r.text):\\\"printErr\\\"===n?k(\\\"Thread \\\"+r.threadId+\\\": \\\"+r.text):\\\"alert\\\"===n?alert(\\\"Thread \\\"+r.threadId+\\\": \\\"+r.text):\\\"setimmediate\\\"===r.target?e.postMessage(r):\\\"callHandler\\\"===n?c[r.handler](...r.args):n&&k(\\\"worker sent an unknown command \\\"+n);be.Cb=void 0},e.onerror=e=>{throw k(\\\"worker sent an error! \\\"+e.filename+\\\":\\\"+e.lineno+\\\": \\\"+e.message),e},w&&(e.on(\\\"message\\\",(function(t){e.onmessage({data:t})})),e.on(\\\"error\\\",(function(t){e.onerror(t)})));var r,n=[];for(r of[\\\"onExit\\\",\\\"onAbort\\\",\\\"print\\\",\\\"printErr\\\"])c.hasOwnProperty(r)&&n.push(r);e.postMessage({cmd:\\\"load\\\",handlers:n,urlOrBlob:c.mainScriptUrlOrBlob||_scriptDir,wasmMemory:F,wasmModule:U})})),Ib:function(e){e()},Ab:function(){var e=A(\\\"ort-wasm-threaded.worker.js\\\");e=new Worker(e),be.nb.push(e)},Db:function(){return 0==be.nb.length&&(be.Ab(),be.Jb(be.nb[0])),be.nb.pop()}};function we(e){for(;0<e.length;)e.shift()(c)}function _e(e){if(_)return Ut(2,0,e);ye(e)}c.PThread=be,c.establishStackSpace=function(){var e=Qt(),t=i()[e+52>>2>>>0];sr(t,t-(e=i()[e+56>>2>>>0])),fr(t)};var Te=[];function Ae(e){this.gb=e-24,this.ub=function(e){u()[this.gb+4>>2>>>0]=e},this.qb=function(e){u()[this.gb+8>>2>>>0]=e},this.tb=function(e,t){this.pb(),this.ub(e),this.qb(t)},this.pb=function(){u()[this.gb+16>>2>>>0]=0}}function Oe(e,t,r,n){return _?Ut(3,1,e,t,r,n):Ee(e,t,r,n)}function Ee(e,t,r,n){if(\\\"undefined\\\"==typeof SharedArrayBuffer)return k(\\\"Current environment does not support SharedArrayBuffer, pthreads are not available!\\\"),6;var a=[];return _&&0===a.length?Oe(e,t,r,n):(e={Mb:r,jb:e,Bb:n,Sb:a},_?(e.Ub=\\\"spawnThread\\\",postMessage(e,a),0):pe(e))}function Se(e,t,r){return _?Ut(4,1,e,t,r):0}function Pe(e,t){if(_)return Ut(5,1,e,t)}function Me(e){for(var t=0,r=0;r<e.length;++r){var n=e.charCodeAt(r);127>=n?t++:2047>=n?t+=2:55296<=n&&57343>=n?(t+=4,++r):t+=3}return t}function Ce(e,t,r,n){if(!(0<n))return 0;var a=r>>>=0;n=r+n-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(r>=n)break;t[r++>>>0]=i}else{if(2047>=i){if(r+1>=n)break;t[r++>>>0]=192|i>>6}else{if(65535>=i){if(r+2>=n)break;t[r++>>>0]=224|i>>12}else{if(r+3>=n)break;t[r++>>>0]=240|i>>18,t[r++>>>0]=128|i>>12&63}t[r++>>>0]=128|i>>6&63}t[r++>>>0]=128|63&i}}return t[r>>>0]=0,r-a}function ke(e,t,r){return Ce(e,n(),t,r)}function Re(e,t){if(_)return Ut(6,1,e,t)}function Fe(e,t,r){if(_)return Ut(7,1,e,t,r)}function Ue(e,t,r){return _?Ut(8,1,e,t,r):0}function We(e,t){if(_)return Ut(9,1,e,t)}function De(e,t,r){if(_)return Ut(10,1,e,t,r)}function Ie(e,t,r,n){if(_)return Ut(11,1,e,t,r,n)}function xe(e,t,r,n){if(_)return Ut(12,1,e,t,r,n)}function He(e,t,r,n){if(_)return Ut(13,1,e,t,r,n)}function je(e){if(_)return Ut(14,1,e)}function Le(e,t){if(_)return Ut(15,1,e,t)}function Ye(e,t,r){if(_)return Ut(16,1,e,t,r)}function ze(e){if(null===e)return\\\"null\\\";var t=typeof e;return\\\"object\\\"===t||\\\"array\\\"===t||\\\"function\\\"===t?e.toString():\\\"\\\"+e}c.invokeEntryPoint=function(e,t){var r=Te[e];r||(e>=Te.length&&(Te.length=e+1),Te[e]=r=q.get(e)),e=r(t),K()?be.xb(e):ir(e)};var Be=void 0;function Ne(e){for(var t=\\\"\\\";n()[e>>>0];)t+=Be[n()[e++>>>0]];return t}var Ge={},Ve={},$e={};function qe(e){if(void 0===e)return\\\"_unknown\\\";var t=(e=e.replace(/[^a-zA-Z0-9_]/g,\\\"$\\\")).charCodeAt(0);return 48<=t&&57>=t?\\\"_\\\"+e:e}function Je(e,t){return{[e=qe(e)]:function(){return t.apply(this,arguments)}}[e]}function Xe(e){var t=Error,r=Je(e,(function(t){this.name=e,this.message=t,void 0!==(t=Error(t).stack)&&(this.stack=this.toString()+\\\"\\\\n\\\"+t.replace(/^Error(:[^\\\\n]*)?\\\\n/,\\\"\\\"))}));return r.prototype=Object.create(t.prototype),r.prototype.constructor=r,r.prototype.toString=function(){return void 0===this.message?this.name:this.name+\\\": \\\"+this.message},r}var Ze=void 0;function Qe(e){throw new Ze(e)}function Ke(e,t,r={}){if(!(\\\"argPackAdvance\\\"in t))throw new TypeError(\\\"registerType registeredInstance requires argPackAdvance\\\");var n=t.name;if(e||Qe('type \\\"'+n+'\\\" must have a positive integer typeid pointer'),Ve.hasOwnProperty(e)){if(r.Eb)return;Qe(\\\"Cannot register type '\\\"+n+\\\"' twice\\\")}Ve[e]=t,delete $e[e],Ge.hasOwnProperty(e)&&(t=Ge[e],delete Ge[e],t.forEach((e=>e())))}function et(e,r,s){switch(r){case 0:return s?function(e){return t()[e>>>0]}:function(e){return n()[e>>>0]};case 1:return s?function(e){return a()[e>>>1]}:function(e){return o()[e>>>1]};case 2:return s?function(e){return i()[e>>>2]}:function(e){return u()[e>>>2]};case 3:return s?function(e){return z[e>>3]}:function(e){return B[e>>3]};default:throw new TypeError(\\\"Unknown integer type: \\\"+e)}}function tt(e){switch(e){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError(\\\"Unknown type size: \\\"+e)}}var rt=new function(){this.gb=[void 0],this.pb=[],this.get=function(e){return this.gb[e]},this.ub=function(e){let t=this.pb.pop()||this.gb.length;return this.gb[t]=e,t},this.Hb=function(e){this.gb[e]=void 0,this.pb.push(e)}};function nt(e){e>=rt.qb&&0==--rt.get(e).wb&&rt.Hb(e)}var at=e=>(e||Qe(\\\"Cannot use deleted val. handle = \\\"+e),rt.get(e).value),ot=e=>{switch(e){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:return rt.ub({wb:1,value:e})}};function it(e){return this.fromWireType(i()[e>>2>>>0])}function ut(e,t){switch(t){case 2:return function(e){var t=this.fromWireType;return F.buffer!=D.buffer&&V(),t.call(this,Y[e>>>2])};case 3:return function(e){return this.fromWireType(s()[e>>>3])};default:throw new TypeError(\\\"Unknown float type: \\\"+e)}}var st=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf-16le\\\"):void 0;function ct(e,t){for(var r=e>>1,i=r+t/2;!(r>=i)&&o()[r>>>0];)++r;if(32<(r<<=1)-e&&st)return st.decode(n().slice(e,r));for(r=\\\"\\\",i=0;!(i>=t/2);++i){var u=a()[e+2*i>>1>>>0];if(0==u)break;r+=String.fromCharCode(u)}return r}function ft(e,t,r){if(void 0===r&&(r=2147483647),2>r)return 0;var n=t;r=(r-=2)<2*e.length?r/2:e.length;for(var o=0;o<r;++o){var i=e.charCodeAt(o);a()[t>>1>>>0]=i,t+=2}return a()[t>>1>>>0]=0,t-n}function lt(e){return 2*e.length}function pt(e,t){for(var r=0,n=\\\"\\\";!(r>=t/4);){var a=i()[e+4*r>>2>>>0];if(0==a)break;++r,65536<=a?(a-=65536,n+=String.fromCharCode(55296|a>>10,56320|1023&a)):n+=String.fromCharCode(a)}return n}function dt(e,t,r){if(void 0===r&&(r=2147483647),4>r)return 0;var n=t>>>=0;r=n+r-4;for(var a=0;a<e.length;++a){var o=e.charCodeAt(a);if(55296<=o&&57343>=o&&(o=65536+((1023&o)<<10)|1023&e.charCodeAt(++a)),i()[t>>2>>>0]=o,(t+=4)+4>r)break}return i()[t>>2>>>0]=0,t-n}function gt(e){for(var t=0,r=0;r<e.length;++r){var n=e.charCodeAt(r);55296<=n&&57343>=n&&++r,t+=4}return t}function ht(e){\\\"function\\\"==typeof Atomics.Tb&&(Atomics.Tb(i(),e>>2,e).value.then(mt),e+=128,Atomics.store(i(),e>>2,1))}function mt(){var e=Qt();e&&(ht(e),function(e){if(!G)try{if(ur(),!K())try{_?ir(W):ye(W)}catch(e){ve(e)}}catch(e){ve(e)}}())}function yt(e,t){var r=Ve[e];if(void 0===r){var n=Ne(e=tr(e));er(e),Qe(t+\\\" has unknown type \\\"+n)}return r}c.__emscripten_thread_mailbox_await=ht,c.checkMailbox=mt;var vt={};function bt(e){var t=vt[e];return void 0===t?Ne(e):t}var wt=[];function _t(){return\\\"object\\\"==typeof globalThis?globalThis:Function(\\\"return this\\\")()}var Tt=[],At={};function Ot(e){return u()[e>>>2]+4294967296*i()[e+4>>>2]}function Et(e){return 0==e%4&&(0!=e%100||0==e%400)}var St,Pt=[0,31,60,91,121,152,182,213,244,274,305,335],Mt=[0,31,59,90,120,151,181,212,243,273,304,334];function Ct(e){return(Et(e.getFullYear())?Pt:Mt)[e.getMonth()]+e.getDate()-1}function kt(e,t,r,n,a,o,i){return _?Ut(17,1,e,t,r,n,a,o,i):-52}function Rt(e,t,r,n,a,o){if(_)return Ut(18,1,e,t,r,n,a,o)}function Ft(e){var t=Me(e)+1,r=Kt(t);return r&&ke(e,r,t),r}function Ut(e,t){var r=arguments.length-2,n=arguments;return function(e){var t=cr();return e=e(),fr(t),e}((()=>{for(var a=2*r,o=lr(8*a),i=o>>3,u=0;u<r;u++){var c=n[2+u];\\\"bigint\\\"==typeof c?(z[i+2*u]=1n,z[i+2*u+1]=c):(z[i+2*u]=0n,s()[i+2*u+1>>>0]=c)}return nr(e,a,o,t)}))}St=w?()=>{var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:()=>performance.timeOrigin+performance.now();var Wt,Dt=[],It={};function xt(){if(!Wt){var e,t={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:m||\\\"./this.program\\\"};for(e in It)void 0===It[e]?delete t[e]:t[e]=It[e];var r=[];for(e in t)r.push(e+\\\"=\\\"+t[e]);Wt=r}return Wt}function Ht(e,r){if(_)return Ut(19,1,e,r);var n=0;return xt().forEach((function(a,o){var i=r+n;for(o=u()[e+4*o>>2>>>0]=i,i=0;i<a.length;++i)t()[o++>>0>>>0]=a.charCodeAt(i);t()[o>>0>>>0]=0,n+=a.length+1})),0}function jt(e,t){if(_)return Ut(20,1,e,t);var r=xt();u()[e>>2>>>0]=r.length;var n=0;return r.forEach((function(e){n+=e.length+1})),u()[t>>2>>>0]=n,0}function Lt(e){return _?Ut(21,1,e):52}function Yt(e,t,r,n){return _?Ut(22,1,e,t,r,n):52}function zt(e,t,r,n){return _?Ut(23,1,e,t,r,n):70}var Bt=[null,[],[]];function Nt(e,t,r,a){if(_)return Ut(24,1,e,t,r,a);for(var o=0,i=0;i<r;i++){var s=u()[t>>2>>>0],c=u()[t+4>>2>>>0];t+=8;for(var f=0;f<c;f++){var l=n()[s+f>>>0],p=Bt[e];0===l||10===l?((1===e?C:k)(ge(p,0)),p.length=0):p.push(l)}o+=c}return u()[a>>2>>>0]=o,0}var Gt=[31,29,31,30,31,30,31,31,30,31,30,31],Vt=[31,28,31,30,31,30,31,31,30,31,30,31];function $t(e,r,n,a){function o(e,t,r){for(e=\\\"number\\\"==typeof e?e.toString():e||\\\"\\\";e.length<t;)e=r[0]+e;return e}function u(e,t){return o(e,t,\\\"0\\\")}function s(e,t){function r(e){return 0>e?-1:0<e?1:0}var n;return 0===(n=r(e.getFullYear()-t.getFullYear()))&&0===(n=r(e.getMonth()-t.getMonth()))&&(n=r(e.getDate()-t.getDate())),n}function c(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function f(e){var t=e.lb;for(e=new Date(new Date(e.mb+1900,0,1).getTime());0<t;){var r=e.getMonth(),n=(Et(e.getFullYear())?Gt:Vt)[r];if(!(t>n-e.getDate())){e.setDate(e.getDate()+t);break}t-=n-e.getDate()+1,e.setDate(1),11>r?e.setMonth(r+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return r=new Date(e.getFullYear()+1,0,4),t=c(new Date(e.getFullYear(),0,4)),r=c(r),0>=s(t,e)?0>=s(r,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var l=i()[a+40>>2>>>0];for(var p in a={Qb:i()[a>>2>>>0],Pb:i()[a+4>>2>>>0],rb:i()[a+8>>2>>>0],vb:i()[a+12>>2>>>0],sb:i()[a+16>>2>>>0],mb:i()[a+20>>2>>>0],ib:i()[a+24>>2>>>0],lb:i()[a+28>>2>>>0],Yb:i()[a+32>>2>>>0],Ob:i()[a+36>>2>>>0],Rb:l?he(l):\\\"\\\"},n=he(n),l={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})n=n.replace(new RegExp(p,\\\"g\\\"),l[p]);var d=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),g=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(p in l={\\\"%a\\\":function(e){return d[e.ib].substring(0,3)},\\\"%A\\\":function(e){return d[e.ib]},\\\"%b\\\":function(e){return g[e.sb].substring(0,3)},\\\"%B\\\":function(e){return g[e.sb]},\\\"%C\\\":function(e){return u((e.mb+1900)/100|0,2)},\\\"%d\\\":function(e){return u(e.vb,2)},\\\"%e\\\":function(e){return o(e.vb,2,\\\" \\\")},\\\"%g\\\":function(e){return f(e).toString().substring(2)},\\\"%G\\\":function(e){return f(e)},\\\"%H\\\":function(e){return u(e.rb,2)},\\\"%I\\\":function(e){return 0==(e=e.rb)?e=12:12<e&&(e-=12),u(e,2)},\\\"%j\\\":function(e){for(var t=0,r=0;r<=e.sb-1;t+=(Et(e.mb+1900)?Gt:Vt)[r++]);return u(e.vb+t,3)},\\\"%m\\\":function(e){return u(e.sb+1,2)},\\\"%M\\\":function(e){return u(e.Pb,2)},\\\"%n\\\":function(){return\\\"\\\\n\\\"},\\\"%p\\\":function(e){return 0<=e.rb&&12>e.rb?\\\"AM\\\":\\\"PM\\\"},\\\"%S\\\":function(e){return u(e.Qb,2)},\\\"%t\\\":function(){return\\\"\\\\t\\\"},\\\"%u\\\":function(e){return e.ib||7},\\\"%U\\\":function(e){return u(Math.floor((e.lb+7-e.ib)/7),2)},\\\"%V\\\":function(e){var t=Math.floor((e.lb+7-(e.ib+6)%7)/7);if(2>=(e.ib+371-e.lb-2)%7&&t++,t)53==t&&(4==(r=(e.ib+371-e.lb)%7)||3==r&&Et(e.mb)||(t=1));else{t=52;var r=(e.ib+7-e.lb-1)%7;(4==r||5==r&&Et(e.mb%400-1))&&t++}return u(t,2)},\\\"%w\\\":function(e){return e.ib},\\\"%W\\\":function(e){return u(Math.floor((e.lb+7-(e.ib+6)%7)/7),2)},\\\"%y\\\":function(e){return(e.mb+1900).toString().substring(2)},\\\"%Y\\\":function(e){return e.mb+1900},\\\"%z\\\":function(e){var t=0<=(e=e.Ob);return e=Math.abs(e)/60,(t?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(e/60*100+e%60)).slice(-4)},\\\"%Z\\\":function(e){return e.Rb},\\\"%%\\\":function(){return\\\"%\\\"}},n=n.replace(/%%/g,\\\"\\\\0\\\\0\\\"),l)n.includes(p)&&(n=n.replace(new RegExp(p,\\\"g\\\"),l[p](a)));return p=function(e){var t=Array(Me(e)+1);return Ce(e,t,0,t.length),t}(n=n.replace(/\\\\0\\\\0/g,\\\"%\\\")),p.length>r?0:(function(e,r){t().set(e,r>>>0)}(p,e),p.length-1)}be.tb();for(var qt=Array(256),Jt=0;256>Jt;++Jt)qt[Jt]=String.fromCharCode(Jt);Be=qt,Ze=c.BindingError=Xe(\\\"BindingError\\\"),c.InternalError=Xe(\\\"InternalError\\\"),rt.gb.push({value:void 0},{value:null},{value:!0},{value:!1}),rt.qb=rt.gb.length,c.count_emval_handles=function(){for(var e=0,t=rt.qb;t<rt.gb.length;++t)void 0!==rt.gb[t]&&++e;return e};var Xt=[null,me,_e,Oe,Se,Pe,Re,Fe,Ue,We,De,Ie,xe,He,je,Le,Ye,kt,Rt,Ht,jt,Lt,Yt,zt,Nt],Zt={b:function(e,t,r){throw new Ae(e).tb(t,r),e},ra:function(){oe(\\\"To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html\\\")},ga:function(e){rr(e,!b,1,!v),be.yb()},D:function(e){_?postMessage({cmd:\\\"cleanupThread\\\",thread:e}):le(e)},W:Ee,y:Se,na:Pe,S:Re,U:Fe,L:Ue,ka:We,ba:De,ja:Ie,F:xe,T:He,Q:je,la:Le,R:Ye,I:function(e,t,r,n,a){t=Ne(t),r=tt(r);var o=-1!=t.indexOf(\\\"u\\\");o&&(a=(1n<<64n)-1n),Ke(e,{name:t,fromWireType:function(e){return e},toWireType:function(e,r){if(\\\"bigint\\\"!=typeof r&&\\\"number\\\"!=typeof r)throw new TypeError('Cannot convert \\\"'+ze(r)+'\\\" to '+this.name);if(r<n||r>a)throw new TypeError('Passing a number \\\"'+ze(r)+'\\\" from JS side to C/C++ side to an argument of type \\\"'+t+'\\\", which is outside the valid range ['+n+\\\", \\\"+a+\\\"]!\\\");return r},argPackAdvance:8,readValueFromPointer:et(t,r,!o),ob:null})},ta:function(e,r,n,o,u){var s=tt(n);Ke(e,{name:r=Ne(r),fromWireType:function(e){return!!e},toWireType:function(e,t){return t?o:u},argPackAdvance:8,readValueFromPointer:function(e){if(1===n)var o=t();else if(2===n)o=a();else{if(4!==n)throw new TypeError(\\\"Unknown boolean type size: \\\"+r);o=i()}return this.fromWireType(o[e>>>s])},ob:null})},sa:function(e,t){Ke(e,{name:t=Ne(t),fromWireType:function(e){var t=at(e);return nt(e),t},toWireType:function(e,t){return ot(t)},argPackAdvance:8,readValueFromPointer:it,ob:null})},H:function(e,t,r){r=tt(r),Ke(e,{name:t=Ne(t),fromWireType:function(e){return e},toWireType:function(e,t){return t},argPackAdvance:8,readValueFromPointer:ut(t,r),ob:null})},u:function(e,t,r,n,a){t=Ne(t),-1===a&&(a=4294967295),a=tt(r);var o=e=>e;if(0===n){var i=32-8*r;o=e=>e<<i>>>i}r=t.includes(\\\"unsigned\\\")?function(e,t){return t>>>0}:function(e,t){return t},Ke(e,{name:t,fromWireType:o,toWireType:r,argPackAdvance:8,readValueFromPointer:et(t,a,0!==n),ob:null})},m:function(e,t,r){function n(e){e>>=2;var t=u();return new a(t.buffer,t[e+1>>>0],t[e>>>0])}var a=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array][t];Ke(e,{name:r=Ne(r),fromWireType:n,argPackAdvance:8,readValueFromPointer:n},{Eb:!0})},J:function(e,t){var r=\\\"std::string\\\"===(t=Ne(t));Ke(e,{name:t,fromWireType:function(e){var t=u()[e>>2>>>0],a=e+4;if(r)for(var o=a,i=0;i<=t;++i){var s=a+i;if(i==t||0==n()[s>>>0]){if(o=he(o,s-o),void 0===c)var c=o;else c+=String.fromCharCode(0),c+=o;o=s+1}}else{for(c=Array(t),i=0;i<t;++i)c[i]=String.fromCharCode(n()[a+i>>>0]);c=c.join(\\\"\\\")}return er(e),c},toWireType:function(e,t){t instanceof ArrayBuffer&&(t=new Uint8Array(t));var a=\\\"string\\\"==typeof t;a||t instanceof Uint8Array||t instanceof Uint8ClampedArray||t instanceof Int8Array||Qe(\\\"Cannot pass non-string to std::string\\\");var o=r&&a?Me(t):t.length,i=Kt(4+o+1),s=i+4>>>0;if(u()[i>>2>>>0]=o,r&&a)ke(t,s,o+1);else if(a)for(a=0;a<o;++a){var c=t.charCodeAt(a);255<c&&(er(s),Qe(\\\"String has UTF-16 code units that do not fit in 8 bits\\\")),n()[s+a>>>0]=c}else for(a=0;a<o;++a)n()[s+a>>>0]=t[a];return null!==e&&e.push(er,i),i},argPackAdvance:8,readValueFromPointer:it,ob:function(e){er(e)}})},A:function(e,t,r){if(r=Ne(r),2===t)var n=ct,a=ft,i=lt,s=()=>o(),c=1;else 4===t&&(n=pt,a=dt,i=gt,s=()=>u(),c=2);Ke(e,{name:r,fromWireType:function(e){for(var r,a=u()[e>>>2],o=s(),i=e+4,f=0;f<=a;++f){var l=e+4+f*t;f!=a&&0!=o[l>>>c]||(i=n(i,l-i),void 0===r?r=i:(r+=String.fromCharCode(0),r+=i),i=l+t)}return er(e),r},toWireType:function(e,n){\\\"string\\\"!=typeof n&&Qe(\\\"Cannot pass non-string to C++ string type \\\"+r);var o=i(n),s=Kt(4+o+t);return s>>>=0,u()[s>>>2]=o>>c,a(n,s+4,o+t),null!==e&&e.push(er,s),s},argPackAdvance:8,readValueFromPointer:it,ob:function(e){er(e)}})},ua:function(e,t){Ke(e,{Gb:!0,name:t=Ne(t),argPackAdvance:0,fromWireType:function(){},toWireType:function(){}})},X:function(){return 131072},qa:function(){return!0},O:function(e,t){e==t?setTimeout((()=>mt())):_?postMessage({targetThread:e,cmd:\\\"checkMailbox\\\"}):(e=be.hb[e])&&e.postMessage({cmd:\\\"checkMailbox\\\"})},ea:function(){return-1},fa:ht,pa:function(e){w&&be.hb[e].ref()},r:function(e,t,r){e=at(e),t=yt(t,\\\"emval::as\\\");var n=[],a=ot(n);return u()[r>>2>>>0]=a,t.toWireType(n,e)},i:function(e,t,r,n,a){e=wt[e],t=at(t),r=bt(r);var o=[];return u()[n>>2>>>0]=ot(o),e(t,r,o,a)},s:function(e,t,r,n){(e=wt[e])(t=at(t),r=bt(r),null,n)},c:nt,K:function(e,t){return(e=at(e))==at(t)},o:function(e){return 0===e?ot(_t()):(e=bt(e),ot(_t()[e]))},g:function(e,t){var r=function(e,t){for(var r=Array(e),n=0;n<e;++n)r[n]=yt(u()[t+4*n>>2>>>0],\\\"parameter \\\"+n);return r}(e,t),n=r[0];t=n.name+\\\"_$\\\"+r.slice(1).map((function(e){return e.name})).join(\\\"_\\\")+\\\"$\\\";var a=Tt[t];if(void 0!==a)return a;a=[\\\"retType\\\"];for(var o=[n],i=\\\"\\\",s=0;s<e-1;++s)i+=(0!==s?\\\", \\\":\\\"\\\")+\\\"arg\\\"+s,a.push(\\\"argType\\\"+s),o.push(r[1+s]);var c=\\\"return function \\\"+qe(\\\"methodCaller_\\\"+t)+\\\"(handle, name, destructors, args) {\\\\n\\\",f=0;for(s=0;s<e-1;++s)c+=\\\"    var arg\\\"+s+\\\" = argType\\\"+s+\\\".readValueFromPointer(args\\\"+(f?\\\"+\\\"+f:\\\"\\\")+\\\");\\\\n\\\",f+=r[s+1].argPackAdvance;for(c+=\\\"    var rv = handle[name](\\\"+i+\\\");\\\\n\\\",s=0;s<e-1;++s)r[s+1].deleteObject&&(c+=\\\"    argType\\\"+s+\\\".deleteObject(arg\\\"+s+\\\");\\\\n\\\");return n.Gb||(c+=\\\"    return retType.toWireType(destructors, rv);\\\\n\\\"),a.push(c+\\\"};\\\\n\\\"),e=function(e){var t=Function;if(!(t instanceof Function))throw new TypeError(\\\"new_ called with constructor type \\\"+typeof t+\\\" which is not a function\\\");var r=Je(t.name||\\\"unknownFunctionName\\\",(function(){}));return r.prototype=t.prototype,r=new r,(e=t.apply(r,e))instanceof Object?e:r}(a).apply(null,o),a=function(e){var t=wt.length;return wt.push(e),t}(e),Tt[t]=a},t:function(e,t){return e=at(e),t=at(t),ot(e[t])},d:function(e){4<e&&(rt.get(e).wb+=1)},x:function(e,t,r,n){e=at(e);var a=At[t];return a||(a=function(e){for(var t=\\\"\\\",r=0;r<e;++r)t+=(0!==r?\\\", \\\":\\\"\\\")+\\\"arg\\\"+r;var n=\\\"return function emval_allocator_\\\"+e+\\\"(constructor, argTypes, args) {\\\\n  var HEAPU32 = getMemory();\\\\n\\\";for(r=0;r<e;++r)n+=\\\"var argType\\\"+r+\\\" = requireRegisteredType(HEAPU32[((argTypes)>>2)], 'parameter \\\"+r+\\\"');\\\\nvar arg\\\"+r+\\\" = argType\\\"+r+\\\".readValueFromPointer(args);\\\\nargs += argType\\\"+r+\\\"['argPackAdvance'];\\\\nargTypes += 4;\\\\n\\\";return new Function(\\\"requireRegisteredType\\\",\\\"Module\\\",\\\"valueToHandle\\\",\\\"getMemory\\\",n+\\\"var obj = new constructor(\\\"+t+\\\");\\\\nreturn valueToHandle(obj);\\\\n}\\\\n\\\")(yt,c,ot,(()=>u()))}(t),At[t]=a),a(e,r,n)},v:function(){return ot([])},l:function(e){e=at(e);for(var t=Array(e.length),r=0;r<e.length;r++)t[r]=e[r];return ot(t)},e:function(e){return ot(bt(e))},k:function(){return ot({})},h:function(e){for(var t=at(e);t.length;){var r=t.pop();t.pop()(r)}nt(e)},j:function(e,t,r){e=at(e),t=at(t),r=at(r),e[t]=r},f:function(e,t){return e=(e=yt(e,\\\"_emval_take_value\\\")).readValueFromPointer(t),ot(e)},_:function(e,t){e=new Date(1e3*Ot(e)),i()[t>>2>>>0]=e.getUTCSeconds(),i()[t+4>>2>>>0]=e.getUTCMinutes(),i()[t+8>>2>>>0]=e.getUTCHours(),i()[t+12>>2>>>0]=e.getUTCDate(),i()[t+16>>2>>>0]=e.getUTCMonth(),i()[t+20>>2>>>0]=e.getUTCFullYear()-1900,i()[t+24>>2>>>0]=e.getUTCDay(),e=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,i()[t+28>>2>>>0]=e},$:function(e,t){e=new Date(1e3*Ot(e)),i()[t>>2>>>0]=e.getSeconds(),i()[t+4>>2>>>0]=e.getMinutes(),i()[t+8>>2>>>0]=e.getHours(),i()[t+12>>2>>>0]=e.getDate(),i()[t+16>>2>>>0]=e.getMonth(),i()[t+20>>2>>>0]=e.getFullYear()-1900,i()[t+24>>2>>>0]=e.getDay();var r=0|Ct(e);i()[t+28>>2>>>0]=r,i()[t+36>>2>>>0]=-60*e.getTimezoneOffset(),r=new Date(e.getFullYear(),6,1).getTimezoneOffset();var n=new Date(e.getFullYear(),0,1).getTimezoneOffset();e=0|(r!=n&&e.getTimezoneOffset()==Math.min(n,r)),i()[t+32>>2>>>0]=e},aa:function(e){var t=new Date(i()[e+20>>2>>>0]+1900,i()[e+16>>2>>>0],i()[e+12>>2>>>0],i()[e+8>>2>>>0],i()[e+4>>2>>>0],i()[e>>2>>>0],0),r=i()[e+32>>2>>>0],n=t.getTimezoneOffset(),a=new Date(t.getFullYear(),6,1).getTimezoneOffset(),o=new Date(t.getFullYear(),0,1).getTimezoneOffset(),u=Math.min(o,a);return 0>r?i()[e+32>>2>>>0]=Number(a!=o&&u==n):0<r!=(u==n)&&(a=Math.max(o,a),t.setTime(t.getTime()+6e4*((0<r?u:a)-n))),i()[e+24>>2>>>0]=t.getDay(),r=0|Ct(t),i()[e+28>>2>>>0]=r,i()[e>>2>>>0]=t.getSeconds(),i()[e+4>>2>>>0]=t.getMinutes(),i()[e+8>>2>>>0]=t.getHours(),i()[e+12>>2>>>0]=t.getDate(),i()[e+16>>2>>>0]=t.getMonth(),i()[e+20>>2>>>0]=t.getYear(),t.getTime()/1e3|0},Y:kt,Z:Rt,N:function(e,t,r){function n(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\\\"GMT\\\"}var a=(new Date).getFullYear(),o=new Date(a,0,1),s=new Date(a,6,1);a=o.getTimezoneOffset();var c=s.getTimezoneOffset(),f=Math.max(a,c);u()[e>>2>>>0]=60*f,i()[t>>2>>>0]=Number(a!=c),e=n(o),t=n(s),e=Ft(e),t=Ft(t),c<a?(u()[r>>2>>>0]=e,u()[r+4>>2>>>0]=t):(u()[r>>2>>>0]=t,u()[r+4>>2>>>0]=e)},n:function(){oe(\\\"\\\")},va:function(){oe(\\\"To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html\\\")},E:function(){},G:function(){return Date.now()},oa:function(){throw Q+=1,\\\"unwind\\\"},P:function(){return 4294901760},q:St,w:function(){return w?r(993).cpus().length:navigator.hardwareConcurrency},da:function(e,t,r){t/=2,Dt.length=t,r>>=3;for(var n=0;n<t;n++)Dt[n]=z[r+2*n]?z[r+2*n+1]:s()[r+2*n+1>>>0];return Xt[e].apply(null,Dt)},M:function(e){var t=n().length;if((e>>>=0)<=t||4294901760<e)return!1;for(var r=1;4>=r;r*=2){var a=t*(1+.2/r);a=Math.min(a,e+100663296);var o=Math,i=o.min;a=Math.max(e,a),a+=(65536-a%65536)%65536;e:{var u=F.buffer;try{F.grow(i.call(o,4294901760,a)-u.byteLength+65535>>>16),V();var s=1;break e}catch(e){}s=void 0}if(s)return!0}return!1},ha:Ht,ia:jt,V:ye,z:Lt,C:Yt,ca:zt,B:Nt,a:F||c.wasmMemory,ma:$t,p:function(e,t,r,n){return $t(e,t,r,n)}};!function(){function e(e,t){return e=e.exports,c.asm=e,be.zb.push(c.asm.Ua),q=c.asm.Xa,X.unshift(c.asm.wa),U=t,be.Ib((()=>{if(re--,c.monitorRunDependencies&&c.monitorRunDependencies(re),0==re&&(null!==ne&&(clearInterval(ne),ne=null),ae)){var e=ae;ae=null,e()}})),e}var t={a:Zt};if(re++,c.monitorRunDependencies&&c.monitorRunDependencies(re),c.instantiateWasm)try{return c.instantiateWasm(t,e)}catch(e){k(\\\"Module.instantiateWasm callback failed with error: \\\"+e),l(e)}(function(e,t){var r=te;return M||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||ie(r)||r.startsWith(\\\"file://\\\")||w||\\\"function\\\"!=typeof fetch?se(r,e,t):fetch(r,{credentials:\\\"same-origin\\\"}).then((n=>WebAssembly.instantiateStreaming(n,e).then(t,(function(n){return k(\\\"wasm streaming compile failed: \\\"+n),k(\\\"falling back to ArrayBuffer instantiation\\\"),se(r,e,t)}))))})(t,(function(t){e(t.instance,t.module)})).catch(l)}(),c._OrtInit=function(){return(c._OrtInit=c.asm.xa).apply(null,arguments)},c._OrtGetLastError=function(){return(c._OrtGetLastError=c.asm.ya).apply(null,arguments)},c._OrtCreateSessionOptions=function(){return(c._OrtCreateSessionOptions=c.asm.za).apply(null,arguments)},c._OrtAppendExecutionProvider=function(){return(c._OrtAppendExecutionProvider=c.asm.Aa).apply(null,arguments)},c._OrtAddSessionConfigEntry=function(){return(c._OrtAddSessionConfigEntry=c.asm.Ba).apply(null,arguments)},c._OrtReleaseSessionOptions=function(){return(c._OrtReleaseSessionOptions=c.asm.Ca).apply(null,arguments)},c._OrtCreateSession=function(){return(c._OrtCreateSession=c.asm.Da).apply(null,arguments)},c._OrtReleaseSession=function(){return(c._OrtReleaseSession=c.asm.Ea).apply(null,arguments)},c._OrtGetInputOutputCount=function(){return(c._OrtGetInputOutputCount=c.asm.Fa).apply(null,arguments)},c._OrtGetInputName=function(){return(c._OrtGetInputName=c.asm.Ga).apply(null,arguments)},c._OrtGetOutputName=function(){return(c._OrtGetOutputName=c.asm.Ha).apply(null,arguments)},c._OrtFree=function(){return(c._OrtFree=c.asm.Ia).apply(null,arguments)},c._OrtCreateTensor=function(){return(c._OrtCreateTensor=c.asm.Ja).apply(null,arguments)},c._OrtGetTensorData=function(){return(c._OrtGetTensorData=c.asm.Ka).apply(null,arguments)},c._OrtReleaseTensor=function(){return(c._OrtReleaseTensor=c.asm.La).apply(null,arguments)},c._OrtCreateRunOptions=function(){return(c._OrtCreateRunOptions=c.asm.Ma).apply(null,arguments)},c._OrtAddRunConfigEntry=function(){return(c._OrtAddRunConfigEntry=c.asm.Na).apply(null,arguments)},c._OrtReleaseRunOptions=function(){return(c._OrtReleaseRunOptions=c.asm.Oa).apply(null,arguments)},c._OrtRun=function(){return(c._OrtRun=c.asm.Pa).apply(null,arguments)},c._OrtEndProfiling=function(){return(c._OrtEndProfiling=c.asm.Qa).apply(null,arguments)};var Qt=c._pthread_self=function(){return(Qt=c._pthread_self=c.asm.Ra).apply(null,arguments)},Kt=c._malloc=function(){return(Kt=c._malloc=c.asm.Sa).apply(null,arguments)},er=c._free=function(){return(er=c._free=c.asm.Ta).apply(null,arguments)};function tr(){return(tr=c.asm.Va).apply(null,arguments)}c.__emscripten_tls_init=function(){return(c.__emscripten_tls_init=c.asm.Ua).apply(null,arguments)},c.__embind_initialize_bindings=function(){return(c.__embind_initialize_bindings=c.asm.Wa).apply(null,arguments)};var rr=c.__emscripten_thread_init=function(){return(rr=c.__emscripten_thread_init=c.asm.Ya).apply(null,arguments)};function nr(){return(nr=c.asm._a).apply(null,arguments)}function ar(){return(ar=c.asm.$a).apply(null,arguments)}c.__emscripten_thread_crashed=function(){return(c.__emscripten_thread_crashed=c.asm.Za).apply(null,arguments)};var or,ir=c.__emscripten_thread_exit=function(){return(ir=c.__emscripten_thread_exit=c.asm.ab).apply(null,arguments)},ur=c.__emscripten_check_mailbox=function(){return(ur=c.__emscripten_check_mailbox=c.asm.bb).apply(null,arguments)};function sr(){return(sr=c.asm.cb).apply(null,arguments)}function cr(){return(cr=c.asm.db).apply(null,arguments)}function fr(){return(fr=c.asm.eb).apply(null,arguments)}function lr(){return(lr=c.asm.fb).apply(null,arguments)}function pr(){function e(){if(!or&&(or=!0,c.calledRun=!0,!G)&&(_||we(X),f(c),c.onRuntimeInitialized&&c.onRuntimeInitialized(),!_)){if(c.postRun)for(\\\"function\\\"==typeof c.postRun&&(c.postRun=[c.postRun]);c.postRun.length;){var e=c.postRun.shift();Z.unshift(e)}we(Z)}}if(!(0<re))if(_)f(c),_||we(X),startWorker(c);else{if(c.preRun)for(\\\"function\\\"==typeof c.preRun&&(c.preRun=[c.preRun]);c.preRun.length;)ee();we(J),0<re||(c.setStatus?(c.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){c.setStatus(\\\"\\\")}),1),e()}),1)):e())}}if(c.keepRuntimeAlive=K,c.wasmMemory=F,c.stackAlloc=lr,c.stackSave=cr,c.stackRestore=fr,c.UTF8ToString=he,c.stringToUTF8=ke,c.lengthBytesUTF8=Me,c.ExitStatus=ce,c.PThread=be,ae=function e(){or||pr(),or||(ae=e)},c.preInit)for(\\\"function\\\"==typeof c.preInit&&(c.preInit=[c.preInit]);0<c.preInit.length;)c.preInit.pop()();return pr(),e.ready});e.exports=n},932:(e,t,r)=>{var _scriptDir,n=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\\\"undefined\\\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(e={}){var t,n,a;t||(t=void 0!==e?e:{}),t.ready=new Promise(((e,t)=>{n=e,a=t}));var o,i,u,s=Object.assign({},t),c=\\\"./this.program\\\",f=\\\"object\\\"==typeof window,l=\\\"function\\\"==typeof importScripts,p=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,d=\\\"\\\";if(p){var g=r(384),h=r(908);d=l?h.dirname(d)+\\\"/\\\":__dirname+\\\"/\\\",o=(e,t)=>(e=e.startsWith(\\\"file://\\\")?new URL(e):h.normalize(e),g.readFileSync(e,t?void 0:\\\"utf8\\\")),u=e=>((e=o(e,!0)).buffer||(e=new Uint8Array(e)),e),i=(e,t,r,n=!0)=>{e=e.startsWith(\\\"file://\\\")?new URL(e):h.normalize(e),g.readFile(e,n?void 0:\\\"utf8\\\",((e,a)=>{e?r(e):t(n?a.buffer:a)}))},!t.thisProgram&&1<process.argv.length&&(c=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),t.inspect=()=>\\\"[Emscripten Module object]\\\"}else(f||l)&&(l?d=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(d=document.currentScript.src),_scriptDir&&(d=_scriptDir),d=0!==d.indexOf(\\\"blob:\\\")?d.substr(0,d.replace(/[?#].*/,\\\"\\\").lastIndexOf(\\\"/\\\")+1):\\\"\\\",o=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.send(null),t.responseText},l&&(u=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.responseType=\\\"arraybuffer\\\",t.send(null),new Uint8Array(t.response)}),i=(e,t,r)=>{var n=new XMLHttpRequest;n.open(\\\"GET\\\",e,!0),n.responseType=\\\"arraybuffer\\\",n.onload=()=>{200==n.status||0==n.status&&n.response?t(n.response):r()},n.onerror=r,n.send(null)});var m,y=t.print||console.log.bind(console),v=t.printErr||console.warn.bind(console);Object.assign(t,s),s=null,t.thisProgram&&(c=t.thisProgram),t.wasmBinary&&(m=t.wasmBinary),t.noExitRuntime,\\\"object\\\"!=typeof WebAssembly&&L(\\\"no native wasm support detected\\\");var b,w,_,T,A,O,E,S,P,M,C,k=!1;function R(){var e=b.buffer;t.HEAP8=w=new Int8Array(e),t.HEAP16=T=new Int16Array(e),t.HEAP32=O=new Int32Array(e),t.HEAPU8=_=new Uint8Array(e),t.HEAPU16=A=new Uint16Array(e),t.HEAPU32=E=new Uint32Array(e),t.HEAPF32=S=new Float32Array(e),t.HEAPF64=C=new Float64Array(e),t.HEAP64=P=new BigInt64Array(e),t.HEAPU64=M=new BigUint64Array(e)}var F=[],U=[],W=[];function D(){var e=t.preRun.shift();F.unshift(e)}var I,x=0,H=null,j=null;function L(e){throw t.onAbort&&t.onAbort(e),v(e=\\\"Aborted(\\\"+e+\\\")\\\"),k=!0,e=new WebAssembly.RuntimeError(e+\\\". Build with -sASSERTIONS for more info.\\\"),a(e),e}function Y(e){return e.startsWith(\\\"data:application/octet-stream;base64,\\\")}if(!Y(I=\\\"ort-wasm.wasm\\\")){var z=I;I=t.locateFile?t.locateFile(z,d):d+z}function B(e){try{if(e==I&&m)return new Uint8Array(m);if(u)return u(e);throw\\\"both async and sync fetching of the wasm failed\\\"}catch(e){L(e)}}function N(e,t,r){return function(e){if(!m&&(f||l)){if(\\\"function\\\"==typeof fetch&&!e.startsWith(\\\"file://\\\"))return fetch(e,{credentials:\\\"same-origin\\\"}).then((t=>{if(!t.ok)throw\\\"failed to load wasm binary file at '\\\"+e+\\\"'\\\";return t.arrayBuffer()})).catch((()=>B(e)));if(i)return new Promise(((t,r)=>{i(e,(e=>t(new Uint8Array(e))),r)}))}return Promise.resolve().then((()=>B(e)))}(e).then((e=>WebAssembly.instantiate(e,t))).then((e=>e)).then(r,(e=>{v(\\\"failed to asynchronously prepare wasm: \\\"+e),L(e)}))}function G(e){for(;0<e.length;)e.shift()(t)}function V(e){this.Ja=e-24,this.Wa=function(e){E[this.Ja+4>>2>>>0]=e},this.Va=function(e){E[this.Ja+8>>2>>>0]=e},this.Ra=function(e,t){this.Sa(),this.Wa(e),this.Va(t)},this.Sa=function(){E[this.Ja+16>>2>>>0]=0}}var $=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf8\\\"):void 0;function q(e,t,r){var n=(t>>>=0)+r;for(r=t;e[r]&&!(r>=n);)++r;if(16<r-t&&e.buffer&&$)return $.decode(e.subarray(t,r));for(n=\\\"\\\";t<r;){var a=e[t++];if(128&a){var o=63&e[t++];if(192==(224&a))n+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[t++])?n+=String.fromCharCode(a):(a-=65536,n+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else n+=String.fromCharCode(a)}return n}function J(e,t){return(e>>>=0)?q(_,e,t):\\\"\\\"}function X(e){for(var t=0,r=0;r<e.length;++r){var n=e.charCodeAt(r);127>=n?t++:2047>=n?t+=2:55296<=n&&57343>=n?(t+=4,++r):t+=3}return t}function Z(e,t,r,n){if(!(0<n))return 0;var a=r>>>=0;n=r+n-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(r>=n)break;t[r++>>>0]=i}else{if(2047>=i){if(r+1>=n)break;t[r++>>>0]=192|i>>6}else{if(65535>=i){if(r+2>=n)break;t[r++>>>0]=224|i>>12}else{if(r+3>=n)break;t[r++>>>0]=240|i>>18,t[r++>>>0]=128|i>>12&63}t[r++>>>0]=128|i>>6&63}t[r++>>>0]=128|63&i}}return t[r>>>0]=0,r-a}function Q(e,t,r){return Z(e,_,t,r)}function K(e){if(null===e)return\\\"null\\\";var t=typeof e;return\\\"object\\\"===t||\\\"array\\\"===t||\\\"function\\\"===t?e.toString():\\\"\\\"+e}var ee=void 0;function te(e){for(var t=\\\"\\\";_[e>>>0];)t+=ee[_[e++>>>0]];return t}var re={},ne={},ae={};function oe(e){if(void 0===e)return\\\"_unknown\\\";var t=(e=e.replace(/[^a-zA-Z0-9_]/g,\\\"$\\\")).charCodeAt(0);return 48<=t&&57>=t?\\\"_\\\"+e:e}function ie(e,t){return{[e=oe(e)]:function(){return t.apply(this,arguments)}}[e]}function ue(e){var t=Error,r=ie(e,(function(t){this.name=e,this.message=t,void 0!==(t=Error(t).stack)&&(this.stack=this.toString()+\\\"\\\\n\\\"+t.replace(/^Error(:[^\\\\n]*)?\\\\n/,\\\"\\\"))}));return r.prototype=Object.create(t.prototype),r.prototype.constructor=r,r.prototype.toString=function(){return void 0===this.message?this.name:this.name+\\\": \\\"+this.message},r}var se=void 0;function ce(e){throw new se(e)}function fe(e,t,r={}){if(!(\\\"argPackAdvance\\\"in t))throw new TypeError(\\\"registerType registeredInstance requires argPackAdvance\\\");var n=t.name;if(e||ce('type \\\"'+n+'\\\" must have a positive integer typeid pointer'),ne.hasOwnProperty(e)){if(r.Za)return;ce(\\\"Cannot register type '\\\"+n+\\\"' twice\\\")}ne[e]=t,delete ae[e],re.hasOwnProperty(e)&&(t=re[e],delete re[e],t.forEach((e=>e())))}function le(e,t,r){switch(t){case 0:return r?function(e){return w[e>>>0]}:function(e){return _[e>>>0]};case 1:return r?function(e){return T[e>>>1]}:function(e){return A[e>>>1]};case 2:return r?function(e){return O[e>>>2]}:function(e){return E[e>>>2]};case 3:return r?function(e){return P[e>>3]}:function(e){return M[e>>3]};default:throw new TypeError(\\\"Unknown integer type: \\\"+e)}}function pe(e){switch(e){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError(\\\"Unknown type size: \\\"+e)}}var de=new function(){this.Ja=[void 0],this.Ra=[],this.get=function(e){return this.Ja[e]},this.Va=function(e){let t=this.Ra.pop()||this.Ja.length;return this.Ja[t]=e,t},this.Wa=function(e){this.Ja[e]=void 0,this.Ra.push(e)}};function ge(e){e>=de.Sa&&0==--de.get(e).Ya&&de.Wa(e)}var he=e=>(e||ce(\\\"Cannot use deleted val. handle = \\\"+e),de.get(e).value),me=e=>{switch(e){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:return de.Va({Ya:1,value:e})}};function ye(e){return this.fromWireType(O[e>>2>>>0])}function ve(e,t){switch(t){case 2:return function(e){return this.fromWireType(S[e>>>2])};case 3:return function(e){return this.fromWireType(C[e>>>3])};default:throw new TypeError(\\\"Unknown float type: \\\"+e)}}var be=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf-16le\\\"):void 0;function we(e,t){for(var r=e>>1,n=r+t/2;!(r>=n)&&A[r>>>0];)++r;if(32<(r<<=1)-e&&be)return be.decode(_.subarray(e>>>0,r>>>0));for(r=\\\"\\\",n=0;!(n>=t/2);++n){var a=T[e+2*n>>1>>>0];if(0==a)break;r+=String.fromCharCode(a)}return r}function _e(e,t,r){if(void 0===r&&(r=2147483647),2>r)return 0;var n=t;r=(r-=2)<2*e.length?r/2:e.length;for(var a=0;a<r;++a)T[t>>1>>>0]=e.charCodeAt(a),t+=2;return T[t>>1>>>0]=0,t-n}function Te(e){return 2*e.length}function Ae(e,t){for(var r=0,n=\\\"\\\";!(r>=t/4);){var a=O[e+4*r>>2>>>0];if(0==a)break;++r,65536<=a?(a-=65536,n+=String.fromCharCode(55296|a>>10,56320|1023&a)):n+=String.fromCharCode(a)}return n}function Oe(e,t,r){if(void 0===r&&(r=2147483647),4>r)return 0;var n=t>>>=0;r=n+r-4;for(var a=0;a<e.length;++a){var o=e.charCodeAt(a);if(55296<=o&&57343>=o&&(o=65536+((1023&o)<<10)|1023&e.charCodeAt(++a)),O[t>>2>>>0]=o,(t+=4)+4>r)break}return O[t>>2>>>0]=0,t-n}function Ee(e){for(var t=0,r=0;r<e.length;++r){var n=e.charCodeAt(r);55296<=n&&57343>=n&&++r,t+=4}return t}function Se(e,t){var r=ne[e];if(void 0===r){var n=te(e=Qe(e));Ze(e),ce(t+\\\" has unknown type \\\"+n)}return r}var Pe={};function Me(e){var t=Pe[e];return void 0===t?te(e):t}var Ce=[];function ke(){return\\\"object\\\"==typeof globalThis?globalThis:Function(\\\"return this\\\")()}var Re=[],Fe={};function Ue(e){return 0==e%4&&(0!=e%100||0==e%400)}var We,De=[0,31,60,91,121,152,182,213,244,274,305,335],Ie=[0,31,59,90,120,151,181,212,243,273,304,334];function xe(e){return(Ue(e.getFullYear())?De:Ie)[e.getMonth()]+e.getDate()-1}function He(e){var t=X(e)+1,r=Xe(t);return r&&Q(e,r,t),r}We=p?()=>{var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:()=>performance.now();var je={};function Le(){if(!Ye){var e,t={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:c||\\\"./this.program\\\"};for(e in je)void 0===je[e]?delete t[e]:t[e]=je[e];var r=[];for(e in t)r.push(e+\\\"=\\\"+t[e]);Ye=r}return Ye}var Ye,ze=[null,[],[]],Be=[31,29,31,30,31,30,31,31,30,31,30,31],Ne=[31,28,31,30,31,30,31,31,30,31,30,31];function Ge(e,t,r,n){function a(e,t,r){for(e=\\\"number\\\"==typeof e?e.toString():e||\\\"\\\";e.length<t;)e=r[0]+e;return e}function o(e,t){return a(e,t,\\\"0\\\")}function i(e,t){function r(e){return 0>e?-1:0<e?1:0}var n;return 0===(n=r(e.getFullYear()-t.getFullYear()))&&0===(n=r(e.getMonth()-t.getMonth()))&&(n=r(e.getDate()-t.getDate())),n}function u(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function s(e){var t=e.Oa;for(e=new Date(new Date(e.Pa+1900,0,1).getTime());0<t;){var r=e.getMonth(),n=(Ue(e.getFullYear())?Be:Ne)[r];if(!(t>n-e.getDate())){e.setDate(e.getDate()+t);break}t-=n-e.getDate()+1,e.setDate(1),11>r?e.setMonth(r+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return r=new Date(e.getFullYear()+1,0,4),t=u(new Date(e.getFullYear(),0,4)),r=u(r),0>=i(t,e)?0>=i(r,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var c=O[n+40>>2>>>0];for(var f in n={cb:O[n>>2>>>0],bb:O[n+4>>2>>>0],Ta:O[n+8>>2>>>0],Xa:O[n+12>>2>>>0],Ua:O[n+16>>2>>>0],Pa:O[n+20>>2>>>0],Na:O[n+24>>2>>>0],Oa:O[n+28>>2>>>0],fb:O[n+32>>2>>>0],ab:O[n+36>>2>>>0],eb:c?J(c):\\\"\\\"},r=J(r),c={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})r=r.replace(new RegExp(f,\\\"g\\\"),c[f]);var l=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),p=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(f in c={\\\"%a\\\":function(e){return l[e.Na].substring(0,3)},\\\"%A\\\":function(e){return l[e.Na]},\\\"%b\\\":function(e){return p[e.Ua].substring(0,3)},\\\"%B\\\":function(e){return p[e.Ua]},\\\"%C\\\":function(e){return o((e.Pa+1900)/100|0,2)},\\\"%d\\\":function(e){return o(e.Xa,2)},\\\"%e\\\":function(e){return a(e.Xa,2,\\\" \\\")},\\\"%g\\\":function(e){return s(e).toString().substring(2)},\\\"%G\\\":function(e){return s(e)},\\\"%H\\\":function(e){return o(e.Ta,2)},\\\"%I\\\":function(e){return 0==(e=e.Ta)?e=12:12<e&&(e-=12),o(e,2)},\\\"%j\\\":function(e){for(var t=0,r=0;r<=e.Ua-1;t+=(Ue(e.Pa+1900)?Be:Ne)[r++]);return o(e.Xa+t,3)},\\\"%m\\\":function(e){return o(e.Ua+1,2)},\\\"%M\\\":function(e){return o(e.bb,2)},\\\"%n\\\":function(){return\\\"\\\\n\\\"},\\\"%p\\\":function(e){return 0<=e.Ta&&12>e.Ta?\\\"AM\\\":\\\"PM\\\"},\\\"%S\\\":function(e){return o(e.cb,2)},\\\"%t\\\":function(){return\\\"\\\\t\\\"},\\\"%u\\\":function(e){return e.Na||7},\\\"%U\\\":function(e){return o(Math.floor((e.Oa+7-e.Na)/7),2)},\\\"%V\\\":function(e){var t=Math.floor((e.Oa+7-(e.Na+6)%7)/7);if(2>=(e.Na+371-e.Oa-2)%7&&t++,t)53==t&&(4==(r=(e.Na+371-e.Oa)%7)||3==r&&Ue(e.Pa)||(t=1));else{t=52;var r=(e.Na+7-e.Oa-1)%7;(4==r||5==r&&Ue(e.Pa%400-1))&&t++}return o(t,2)},\\\"%w\\\":function(e){return e.Na},\\\"%W\\\":function(e){return o(Math.floor((e.Oa+7-(e.Na+6)%7)/7),2)},\\\"%y\\\":function(e){return(e.Pa+1900).toString().substring(2)},\\\"%Y\\\":function(e){return e.Pa+1900},\\\"%z\\\":function(e){var t=0<=(e=e.ab);return e=Math.abs(e)/60,(t?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(e/60*100+e%60)).slice(-4)},\\\"%Z\\\":function(e){return e.eb},\\\"%%\\\":function(){return\\\"%\\\"}},r=r.replace(/%%/g,\\\"\\\\0\\\\0\\\"),c)r.includes(f)&&(r=r.replace(new RegExp(f,\\\"g\\\"),c[f](n)));return f=function(e){var t=Array(X(e)+1);return Z(e,t,0,t.length),t}(r=r.replace(/\\\\0\\\\0/g,\\\"%\\\")),f.length>t?0:(w.set(f,e>>>0),f.length-1)}for(var Ve=Array(256),$e=0;256>$e;++$e)Ve[$e]=String.fromCharCode($e);ee=Ve,se=t.BindingError=ue(\\\"BindingError\\\"),t.InternalError=ue(\\\"InternalError\\\"),de.Ja.push({value:void 0},{value:null},{value:!0},{value:!1}),de.Sa=de.Ja.length,t.count_emval_handles=function(){for(var e=0,t=de.Sa;t<de.Ja.length;++t)void 0!==de.Ja[t]&&++e;return e};var qe={a:function(e,t,r){throw new V(e).Ra(t,r),e},da:function(){L(\\\"To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html\\\")},v:function(){return 0},ba:function(){},N:function(){},P:function(){},H:function(){return 0},$:function(){},V:function(){},_:function(){},A:function(){},O:function(){},L:function(){},aa:function(){},M:function(){},D:function(e,t,r,n,a){t=te(t),r=pe(r);var o=-1!=t.indexOf(\\\"u\\\");o&&(a=(1n<<64n)-1n),fe(e,{name:t,fromWireType:function(e){return e},toWireType:function(e,r){if(\\\"bigint\\\"!=typeof r&&\\\"number\\\"!=typeof r)throw new TypeError('Cannot convert \\\"'+K(r)+'\\\" to '+this.name);if(r<n||r>a)throw new TypeError('Passing a number \\\"'+K(r)+'\\\" from JS side to C/C++ side to an argument of type \\\"'+t+'\\\", which is outside the valid range ['+n+\\\", \\\"+a+\\\"]!\\\");return r},argPackAdvance:8,readValueFromPointer:le(t,r,!o),Qa:null})},ga:function(e,t,r,n,a){var o=pe(r);fe(e,{name:t=te(t),fromWireType:function(e){return!!e},toWireType:function(e,t){return t?n:a},argPackAdvance:8,readValueFromPointer:function(e){if(1===r)var n=w;else if(2===r)n=T;else{if(4!==r)throw new TypeError(\\\"Unknown boolean type size: \\\"+t);n=O}return this.fromWireType(n[e>>>o])},Qa:null})},fa:function(e,t){fe(e,{name:t=te(t),fromWireType:function(e){var t=he(e);return ge(e),t},toWireType:function(e,t){return me(t)},argPackAdvance:8,readValueFromPointer:ye,Qa:null})},C:function(e,t,r){r=pe(r),fe(e,{name:t=te(t),fromWireType:function(e){return e},toWireType:function(e,t){return t},argPackAdvance:8,readValueFromPointer:ve(t,r),Qa:null})},p:function(e,t,r,n,a){t=te(t),-1===a&&(a=4294967295),a=pe(r);var o=e=>e;if(0===n){var i=32-8*r;o=e=>e<<i>>>i}r=t.includes(\\\"unsigned\\\")?function(e,t){return t>>>0}:function(e,t){return t},fe(e,{name:t,fromWireType:o,toWireType:r,argPackAdvance:8,readValueFromPointer:le(t,a,0!==n),Qa:null})},l:function(e,t,r){function n(e){e>>=2;var t=E;return new a(t.buffer,t[e+1>>>0],t[e>>>0])}var a=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array][t];fe(e,{name:r=te(r),fromWireType:n,argPackAdvance:8,readValueFromPointer:n},{Za:!0})},E:function(e,t){var r=\\\"std::string\\\"===(t=te(t));fe(e,{name:t,fromWireType:function(e){var t=E[e>>2>>>0],n=e+4;if(r)for(var a=n,o=0;o<=t;++o){var i=n+o;if(o==t||0==_[i>>>0]){if(a=J(a,i-a),void 0===u)var u=a;else u+=String.fromCharCode(0),u+=a;a=i+1}}else{for(u=Array(t),o=0;o<t;++o)u[o]=String.fromCharCode(_[n+o>>>0]);u=u.join(\\\"\\\")}return Ze(e),u},toWireType:function(e,t){t instanceof ArrayBuffer&&(t=new Uint8Array(t));var n=\\\"string\\\"==typeof t;n||t instanceof Uint8Array||t instanceof Uint8ClampedArray||t instanceof Int8Array||ce(\\\"Cannot pass non-string to std::string\\\");var a=r&&n?X(t):t.length,o=Xe(4+a+1),i=o+4>>>0;if(E[o>>2>>>0]=a,r&&n)Q(t,i,a+1);else if(n)for(n=0;n<a;++n){var u=t.charCodeAt(n);255<u&&(Ze(i),ce(\\\"String has UTF-16 code units that do not fit in 8 bits\\\")),_[i+n>>>0]=u}else for(n=0;n<a;++n)_[i+n>>>0]=t[n];return null!==e&&e.push(Ze,o),o},argPackAdvance:8,readValueFromPointer:ye,Qa:function(e){Ze(e)}})},x:function(e,t,r){if(r=te(r),2===t)var n=we,a=_e,o=Te,i=()=>A,u=1;else 4===t&&(n=Ae,a=Oe,o=Ee,i=()=>E,u=2);fe(e,{name:r,fromWireType:function(e){for(var r,a=E[e>>>2],o=i(),s=e+4,c=0;c<=a;++c){var f=e+4+c*t;c!=a&&0!=o[f>>>u]||(s=n(s,f-s),void 0===r?r=s:(r+=String.fromCharCode(0),r+=s),s=f+t)}return Ze(e),r},toWireType:function(e,n){\\\"string\\\"!=typeof n&&ce(\\\"Cannot pass non-string to C++ string type \\\"+r);var i=o(n),s=Xe(4+i+t);return E[(s>>>=0)>>>2]=i>>u,a(n,s+4,i+t),null!==e&&e.push(Ze,s),s},argPackAdvance:8,readValueFromPointer:ye,Qa:function(e){Ze(e)}})},ha:function(e,t){fe(e,{$a:!0,name:t=te(t),argPackAdvance:0,fromWireType:function(){},toWireType:function(){}})},ca:function(){return!0},o:function(e,t,r){e=he(e),t=Se(t,\\\"emval::as\\\");var n=[],a=me(n);return E[r>>2>>>0]=a,t.toWireType(n,e)},h:function(e,t,r,n,a){e=Ce[e],t=he(t),r=Me(r);var o=[];return E[n>>2>>>0]=me(o),e(t,r,o,a)},q:function(e,t,r,n){(e=Ce[e])(t=he(t),r=Me(r),null,n)},b:ge,F:function(e,t){return(e=he(e))==he(t)},u:function(e){return 0===e?me(ke()):(e=Me(e),me(ke()[e]))},g:function(e,t){var r=function(e,t){for(var r=Array(e),n=0;n<e;++n)r[n]=Se(E[t+4*n>>2>>>0],\\\"parameter \\\"+n);return r}(e,t),n=r[0];t=n.name+\\\"_$\\\"+r.slice(1).map((function(e){return e.name})).join(\\\"_\\\")+\\\"$\\\";var a=Re[t];if(void 0!==a)return a;a=[\\\"retType\\\"];for(var o=[n],i=\\\"\\\",u=0;u<e-1;++u)i+=(0!==u?\\\", \\\":\\\"\\\")+\\\"arg\\\"+u,a.push(\\\"argType\\\"+u),o.push(r[1+u]);var s=\\\"return function \\\"+oe(\\\"methodCaller_\\\"+t)+\\\"(handle, name, destructors, args) {\\\\n\\\",c=0;for(u=0;u<e-1;++u)s+=\\\"    var arg\\\"+u+\\\" = argType\\\"+u+\\\".readValueFromPointer(args\\\"+(c?\\\"+\\\"+c:\\\"\\\")+\\\");\\\\n\\\",c+=r[u+1].argPackAdvance;for(s+=\\\"    var rv = handle[name](\\\"+i+\\\");\\\\n\\\",u=0;u<e-1;++u)r[u+1].deleteObject&&(s+=\\\"    argType\\\"+u+\\\".deleteObject(arg\\\"+u+\\\");\\\\n\\\");return n.$a||(s+=\\\"    return retType.toWireType(destructors, rv);\\\\n\\\"),a.push(s+\\\"};\\\\n\\\"),e=function(e){var t=Function;if(!(t instanceof Function))throw new TypeError(\\\"new_ called with constructor type \\\"+typeof t+\\\" which is not a function\\\");var r=ie(t.name||\\\"unknownFunctionName\\\",(function(){}));return r.prototype=t.prototype,r=new r,(e=t.apply(r,e))instanceof Object?e:r}(a).apply(null,o),a=function(e){var t=Ce.length;return Ce.push(e),t}(e),Re[t]=a},r:function(e,t){return e=he(e),t=he(t),me(e[t])},c:function(e){4<e&&(de.get(e).Ya+=1)},G:function(e,r,n,a){e=he(e);var o=Fe[r];return o||(o=function(e){for(var r=\\\"\\\",n=0;n<e;++n)r+=(0!==n?\\\", \\\":\\\"\\\")+\\\"arg\\\"+n;var a=\\\"return function emval_allocator_\\\"+e+\\\"(constructor, argTypes, args) {\\\\n  var HEAPU32 = getMemory();\\\\n\\\";for(n=0;n<e;++n)a+=\\\"var argType\\\"+n+\\\" = requireRegisteredType(HEAPU32[((argTypes)>>2)], 'parameter \\\"+n+\\\"');\\\\nvar arg\\\"+n+\\\" = argType\\\"+n+\\\".readValueFromPointer(args);\\\\nargs += argType\\\"+n+\\\"['argPackAdvance'];\\\\nargTypes += 4;\\\\n\\\";return new Function(\\\"requireRegisteredType\\\",\\\"Module\\\",\\\"valueToHandle\\\",\\\"getMemory\\\",a+\\\"var obj = new constructor(\\\"+r+\\\");\\\\nreturn valueToHandle(obj);\\\\n}\\\\n\\\")(Se,t,me,(()=>E))}(r),Fe[r]=o),o(e,n,a)},s:function(){return me([])},k:function(e){e=he(e);for(var t=Array(e.length),r=0;r<e.length;r++)t[r]=e[r];return me(t)},d:function(e){return me(Me(e))},j:function(){return me({})},f:function(e){for(var t=he(e);t.length;){var r=t.pop();t.pop()(r)}ge(e)},i:function(e,t,r){e=he(e),t=he(t),r=he(r),e[t]=r},e:function(e,t){return e=(e=Se(e,\\\"_emval_take_value\\\")).readValueFromPointer(t),me(e)},S:function(e,t){e=new Date(1e3*(E[e>>>2]+4294967296*O[e+4>>>2])),O[t>>2>>>0]=e.getUTCSeconds(),O[t+4>>2>>>0]=e.getUTCMinutes(),O[t+8>>2>>>0]=e.getUTCHours(),O[t+12>>2>>>0]=e.getUTCDate(),O[t+16>>2>>>0]=e.getUTCMonth(),O[t+20>>2>>>0]=e.getUTCFullYear()-1900,O[t+24>>2>>>0]=e.getUTCDay(),O[t+28>>2>>>0]=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},T:function(e,t){e=new Date(1e3*(E[e>>>2]+4294967296*O[e+4>>>2])),O[t>>2>>>0]=e.getSeconds(),O[t+4>>2>>>0]=e.getMinutes(),O[t+8>>2>>>0]=e.getHours(),O[t+12>>2>>>0]=e.getDate(),O[t+16>>2>>>0]=e.getMonth(),O[t+20>>2>>>0]=e.getFullYear()-1900,O[t+24>>2>>>0]=e.getDay(),O[t+28>>2>>>0]=0|xe(e),O[t+36>>2>>>0]=-60*e.getTimezoneOffset();var r=new Date(e.getFullYear(),6,1).getTimezoneOffset(),n=new Date(e.getFullYear(),0,1).getTimezoneOffset();O[t+32>>2>>>0]=0|(r!=n&&e.getTimezoneOffset()==Math.min(n,r))},U:function(e){var t=new Date(O[e+20>>2>>>0]+1900,O[e+16>>2>>>0],O[e+12>>2>>>0],O[e+8>>2>>>0],O[e+4>>2>>>0],O[e>>2>>>0],0),r=O[e+32>>2>>>0],n=t.getTimezoneOffset(),a=new Date(t.getFullYear(),6,1).getTimezoneOffset(),o=new Date(t.getFullYear(),0,1).getTimezoneOffset(),i=Math.min(o,a);return 0>r?O[e+32>>2>>>0]=Number(a!=o&&i==n):0<r!=(i==n)&&(a=Math.max(o,a),t.setTime(t.getTime()+6e4*((0<r?i:a)-n))),O[e+24>>2>>>0]=t.getDay(),O[e+28>>2>>>0]=0|xe(t),O[e>>2>>>0]=t.getSeconds(),O[e+4>>2>>>0]=t.getMinutes(),O[e+8>>2>>>0]=t.getHours(),O[e+12>>2>>>0]=t.getDate(),O[e+16>>2>>>0]=t.getMonth(),O[e+20>>2>>>0]=t.getYear(),t.getTime()/1e3|0},Q:function(){return-52},R:function(){},J:function(e,t,r){function n(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\\\"GMT\\\"}var a=(new Date).getFullYear(),o=new Date(a,0,1),i=new Date(a,6,1);a=o.getTimezoneOffset();var u=i.getTimezoneOffset();E[e>>2>>>0]=60*Math.max(a,u),O[t>>2>>>0]=Number(a!=u),e=n(o),t=n(i),e=He(e),t=He(t),u<a?(E[r>>2>>>0]=e,E[r+4>>2>>>0]=t):(E[r>>2>>>0]=t,E[r+4>>2>>>0]=e)},t:function(){L(\\\"\\\")},ia:function(){L(\\\"To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html\\\")},B:function(){return Date.now()},K:function(){return 4294901760},n:We,Z:function(e,t,r){_.copyWithin(e>>>0,t>>>0,t+r>>>0)},I:function(e){var t=_.length;if(4294901760<(e>>>=0))return!1;for(var r=1;4>=r;r*=2){var n=t*(1+.2/r);n=Math.min(n,e+100663296);var a=Math,o=a.min;n=Math.max(e,n),n+=(65536-n%65536)%65536;e:{var i=b.buffer;try{b.grow(o.call(a,4294901760,n)-i.byteLength+65535>>>16),R();var u=1;break e}catch(e){}u=void 0}if(u)return!0}return!1},X:function(e,t){var r=0;return Le().forEach((function(n,a){var o=t+r;for(a=E[e+4*a>>2>>>0]=o,o=0;o<n.length;++o)w[a++>>0>>>0]=n.charCodeAt(o);w[a>>0>>>0]=0,r+=n.length+1})),0},Y:function(e,t){var r=Le();E[e>>2>>>0]=r.length;var n=0;return r.forEach((function(e){n+=e.length+1})),E[t>>2>>>0]=n,0},w:function(){return 52},z:function(){return 52},W:function(){return 70},y:function(e,t,r,n){for(var a=0,o=0;o<r;o++){var i=E[t>>2>>>0],u=E[t+4>>2>>>0];t+=8;for(var s=0;s<u;s++){var c=_[i+s>>>0],f=ze[e];0===c||10===c?((1===e?y:v)(q(f,0)),f.length=0):f.push(c)}a+=u}return E[n>>2>>>0]=a,0},ea:Ge,m:function(e,t,r,n){return Ge(e,t,r,n)}};!function(){function e(e){if(e=e.exports,t.asm=e,b=t.asm.ja,R(),U.unshift(t.asm.ka),x--,t.monitorRunDependencies&&t.monitorRunDependencies(x),0==x&&(null!==H&&(clearInterval(H),H=null),j)){var r=j;j=null,r()}return e}var r={a:qe};if(x++,t.monitorRunDependencies&&t.monitorRunDependencies(x),t.instantiateWasm)try{return t.instantiateWasm(r,e)}catch(e){v(\\\"Module.instantiateWasm callback failed with error: \\\"+e),a(e)}(function(e,t){var r=I;return m||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||Y(r)||r.startsWith(\\\"file://\\\")||p||\\\"function\\\"!=typeof fetch?N(r,e,t):fetch(r,{credentials:\\\"same-origin\\\"}).then((n=>WebAssembly.instantiateStreaming(n,e).then(t,(function(n){return v(\\\"wasm streaming compile failed: \\\"+n),v(\\\"falling back to ArrayBuffer instantiation\\\"),N(r,e,t)}))))})(r,(function(t){e(t.instance)})).catch(a)}(),t._OrtInit=function(){return(t._OrtInit=t.asm.la).apply(null,arguments)},t._OrtGetLastError=function(){return(t._OrtGetLastError=t.asm.ma).apply(null,arguments)},t._OrtCreateSessionOptions=function(){return(t._OrtCreateSessionOptions=t.asm.na).apply(null,arguments)},t._OrtAppendExecutionProvider=function(){return(t._OrtAppendExecutionProvider=t.asm.oa).apply(null,arguments)},t._OrtAddSessionConfigEntry=function(){return(t._OrtAddSessionConfigEntry=t.asm.pa).apply(null,arguments)},t._OrtReleaseSessionOptions=function(){return(t._OrtReleaseSessionOptions=t.asm.qa).apply(null,arguments)},t._OrtCreateSession=function(){return(t._OrtCreateSession=t.asm.ra).apply(null,arguments)},t._OrtReleaseSession=function(){return(t._OrtReleaseSession=t.asm.sa).apply(null,arguments)},t._OrtGetInputOutputCount=function(){return(t._OrtGetInputOutputCount=t.asm.ta).apply(null,arguments)},t._OrtGetInputName=function(){return(t._OrtGetInputName=t.asm.ua).apply(null,arguments)},t._OrtGetOutputName=function(){return(t._OrtGetOutputName=t.asm.va).apply(null,arguments)},t._OrtFree=function(){return(t._OrtFree=t.asm.wa).apply(null,arguments)},t._OrtCreateTensor=function(){return(t._OrtCreateTensor=t.asm.xa).apply(null,arguments)},t._OrtGetTensorData=function(){return(t._OrtGetTensorData=t.asm.ya).apply(null,arguments)},t._OrtReleaseTensor=function(){return(t._OrtReleaseTensor=t.asm.za).apply(null,arguments)},t._OrtCreateRunOptions=function(){return(t._OrtCreateRunOptions=t.asm.Aa).apply(null,arguments)},t._OrtAddRunConfigEntry=function(){return(t._OrtAddRunConfigEntry=t.asm.Ba).apply(null,arguments)},t._OrtReleaseRunOptions=function(){return(t._OrtReleaseRunOptions=t.asm.Ca).apply(null,arguments)},t._OrtRun=function(){return(t._OrtRun=t.asm.Da).apply(null,arguments)},t._OrtEndProfiling=function(){return(t._OrtEndProfiling=t.asm.Ea).apply(null,arguments)};var Je,Xe=t._malloc=function(){return(Xe=t._malloc=t.asm.Fa).apply(null,arguments)},Ze=t._free=function(){return(Ze=t._free=t.asm.Ga).apply(null,arguments)};function Qe(){return(Qe=t.asm.Ha).apply(null,arguments)}function Ke(){return(Ke=t.asm.Ka).apply(null,arguments)}function et(){return(et=t.asm.La).apply(null,arguments)}function tt(){return(tt=t.asm.Ma).apply(null,arguments)}function rt(){function e(){if(!Je&&(Je=!0,t.calledRun=!0,!k)){if(G(U),n(t),t.onRuntimeInitialized&&t.onRuntimeInitialized(),t.postRun)for(\\\"function\\\"==typeof t.postRun&&(t.postRun=[t.postRun]);t.postRun.length;){var e=t.postRun.shift();W.unshift(e)}G(W)}}if(!(0<x)){if(t.preRun)for(\\\"function\\\"==typeof t.preRun&&(t.preRun=[t.preRun]);t.preRun.length;)D();G(F),0<x||(t.setStatus?(t.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){t.setStatus(\\\"\\\")}),1),e()}),1)):e())}}if(t.__embind_initialize_bindings=function(){return(t.__embind_initialize_bindings=t.asm.Ia).apply(null,arguments)},t.stackAlloc=tt,t.stackSave=Ke,t.stackRestore=et,t.UTF8ToString=J,t.stringToUTF8=Q,t.lengthBytesUTF8=X,j=function e(){Je||rt(),Je||(j=e)},t.preInit)for(\\\"function\\\"==typeof t.preInit&&(t.preInit=[t.preInit]);0<t.preInit.length;)t.preInit.pop()();return rt(),e.ready});e.exports=n},154:e=>{\\\"use strict\\\";e.exports='\\\"use strict\\\";var e={},a=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node;if(a){var r=require(\\\"worker_threads\\\"),t=r.parentPort;t.on(\\\"message\\\",(e=>onmessage({data:e})));var s=require(\\\"fs\\\");Object.assign(global,{self:global,require:require,Module:e,location:{href:__filename},Worker:r.Worker,importScripts:function(e){(0,eval)(s.readFileSync(e,\\\"utf8\\\")+\\\"//# sourceURL=\\\"+e)},postMessage:function(e){t.postMessage(e)},performance:global.performance||{now:function(){return Date.now()}}})}var o=!1,n=function(){var e=Array.prototype.slice.call(arguments).join(\\\" \\\");a?s.writeSync(2,e+\\\"\\\\\\\\n\\\"):console.error(e)};self.alert=function(){var a=Array.prototype.slice.call(arguments).join(\\\" \\\");postMessage({cmd:\\\"alert\\\",text:a,threadId:e._pthread_self()})},e.instantiateWasm=(a,r)=>{var t=e.wasmModule;return e.wasmModule=null,r(new WebAssembly.Instance(t,a))},self.onunhandledrejection=e=>{throw e.reason??e},self.onmessage=function a(r){try{if(\\\"load\\\"===r.data.cmd){let s=[];self.onmessage=e=>s.push(e),self.startWorker=r=>{e=r,postMessage({cmd:\\\"loaded\\\"});for(let e of s)a(e);self.onmessage=a},e.wasmModule=r.data.wasmModule;for(const a of r.data.handlers)e[a]=function(){postMessage({cmd:\\\"callHandler\\\",handler:a,args:[...arguments]})};if(e.wasmMemory=r.data.wasmMemory,e.buffer=e.wasmMemory.buffer,e.ENVIRONMENT_IS_PTHREAD=!0,\\\"string\\\"==typeof r.data.urlOrBlob)importScripts(r.data.urlOrBlob);else{var t=URL.createObjectURL(r.data.urlOrBlob);importScripts(t),URL.revokeObjectURL(t)}ortWasmThreaded(e)}else if(\\\"run\\\"===r.data.cmd){e.__emscripten_thread_init(r.data.pthread_ptr,0,0,1),e.__emscripten_thread_mailbox_await(r.data.pthread_ptr),e.establishStackSpace(),e.PThread.receiveObjectTransfer(r.data),e.PThread.threadInitTLS(),o||(e.__embind_initialize_bindings(),o=!0);try{e.invokeEntryPoint(r.data.start_routine,r.data.arg)}catch(e){if(\\\"unwind\\\"!=e)throw e}}else\\\"cancel\\\"===r.data.cmd?e._pthread_self()&&e.__emscripten_thread_exit(-1):\\\"setimmediate\\\"===r.data.target||(\\\"checkMailbox\\\"===r.data.cmd?o&&e.checkMailbox():r.data.cmd&&(n(\\\"worker.js received unknown command \\\"+r.data.cmd),n(r.data)))}catch(a){throw e.__emscripten_thread_crashed&&e.__emscripten_thread_crashed(),a}};\\\\n'},384:()=>{},993:()=>{},908:()=>{},953:()=>{},925:()=>{},449:()=>{}},t={};function r(n){var a=t[n];if(void 0!==a)return a.exports;var o=t[n]={exports:{}};return e[n].call(o.exports,o,o.exports,r),o.exports}(()=>{\\\"use strict\\\";const e=r(259),t=r(263);self.onmessage=r=>{switch(r.data.type){case\\\"init-wasm\\\":try{(0,t.initializeWebAssembly)(r.data.in).then((()=>postMessage({type:\\\"init-wasm\\\"})),(e=>postMessage({type:\\\"init-wasm\\\",err:e})))}catch(e){postMessage({type:\\\"init-wasm\\\",err:e})}break;case\\\"init-ort\\\":try{(0,e.initRuntime)(r.data.in).then((()=>postMessage({type:\\\"init-ort\\\"})),(e=>postMessage({type:\\\"init-ort\\\",err:e}))),postMessage({type:\\\"init-ort\\\"})}catch(e){postMessage({type:\\\"init-ort\\\",err:e})}break;case\\\"create_allocate\\\":try{const{model:t}=r.data.in,n=(0,e.createSessionAllocate)(t);postMessage({type:\\\"create_allocate\\\",out:n})}catch(e){postMessage({type:\\\"create_allocate\\\",err:e})}break;case\\\"create_finalize\\\":try{const{modeldata:t,options:n}=r.data.in,a=(0,e.createSessionFinalize)(t,n);postMessage({type:\\\"create_finalize\\\",out:a})}catch(e){postMessage({type:\\\"create_finalize\\\",err:e})}break;case\\\"create\\\":try{const{model:t,options:n}=r.data.in,a=(0,e.createSession)(t,n);postMessage({type:\\\"create\\\",out:a})}catch(e){postMessage({type:\\\"create\\\",err:e})}break;case\\\"release\\\":try{const t=r.data.in;(0,e.releaseSession)(t),postMessage({type:\\\"release\\\"})}catch(e){postMessage({type:\\\"release\\\",err:e})}break;case\\\"run\\\":try{const{sessionId:t,inputIndices:n,inputs:a,outputIndices:o,options:i}=r.data.in;(0,e.run)(t,n,a,o,i).then((t=>{postMessage({type:\\\"run\\\",out:t},(0,e.extractTransferableBuffers)(t))}),(e=>{postMessage({type:\\\"run\\\",err:e})}))}catch(e){postMessage({type:\\\"run\\\",err:e})}break;case\\\"end-profiling\\\":try{const t=r.data.in;(0,e.endProfiling)(t),postMessage({type:\\\"end-profiling\\\"})}catch(e){postMessage({type:\\\"end-profiling\\\",err:e})}}}})()})();\\n\", \"Worker\", undefined, undefined);\n}\n","\"use strict\";\n\n/* eslint-env browser */\n\n/* eslint-disable no-undef, no-use-before-define, new-cap */\nmodule.exports = function (content, workerConstructor, workerOptions, url) {\n  var globalScope = self || window;\n\n  try {\n    try {\n      var blob;\n\n      try {\n        // New API\n        blob = new globalScope.Blob([content]);\n      } catch (e) {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = globalScope.BlobBuilder || globalScope.WebKitBlobBuilder || globalScope.MozBlobBuilder || globalScope.MSBlobBuilder;\n        blob = new BlobBuilder();\n        blob.append(content);\n        blob = blob.getBlob();\n      }\n\n      var URL = globalScope.URL || globalScope.webkitURL;\n      var objectURL = URL.createObjectURL(blob);\n      var worker = new globalScope[workerConstructor](objectURL, workerOptions);\n      URL.revokeObjectURL(objectURL);\n      return worker;\n    } catch (e) {\n      return new globalScope[workerConstructor](\"data:application/javascript,\".concat(encodeURIComponent(content)), workerOptions);\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error(\"Inline worker is not supported\");\n    }\n\n    return new globalScope[workerConstructor](url, workerOptions);\n  }\n};","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.onnx = (function() {\n\n    /**\n     * Namespace onnx.\n     * @exports onnx\n     * @namespace\n     */\n    var onnx = {};\n\n    /**\n     * Version enum.\n     * @name onnx.Version\n     * @enum {number}\n     * @property {number} _START_VERSION=0 _START_VERSION value\n     * @property {number} IR_VERSION_2017_10_10=1 IR_VERSION_2017_10_10 value\n     * @property {number} IR_VERSION_2017_10_30=2 IR_VERSION_2017_10_30 value\n     * @property {number} IR_VERSION_2017_11_3=3 IR_VERSION_2017_11_3 value\n     * @property {number} IR_VERSION_2019_1_22=4 IR_VERSION_2019_1_22 value\n     * @property {number} IR_VERSION_2019_3_18=5 IR_VERSION_2019_3_18 value\n     * @property {number} IR_VERSION_2019_9_19=6 IR_VERSION_2019_9_19 value\n     * @property {number} IR_VERSION_2020_5_8=7 IR_VERSION_2020_5_8 value\n     * @property {number} IR_VERSION_2021_7_30=8 IR_VERSION_2021_7_30 value\n     * @property {number} IR_VERSION=9 IR_VERSION value\n     */\n    onnx.Version = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"_START_VERSION\"] = 0;\n        values[valuesById[1] = \"IR_VERSION_2017_10_10\"] = 1;\n        values[valuesById[2] = \"IR_VERSION_2017_10_30\"] = 2;\n        values[valuesById[3] = \"IR_VERSION_2017_11_3\"] = 3;\n        values[valuesById[4] = \"IR_VERSION_2019_1_22\"] = 4;\n        values[valuesById[5] = \"IR_VERSION_2019_3_18\"] = 5;\n        values[valuesById[6] = \"IR_VERSION_2019_9_19\"] = 6;\n        values[valuesById[7] = \"IR_VERSION_2020_5_8\"] = 7;\n        values[valuesById[8] = \"IR_VERSION_2021_7_30\"] = 8;\n        values[valuesById[9] = \"IR_VERSION\"] = 9;\n        return values;\n    })();\n\n    onnx.AttributeProto = (function() {\n\n        /**\n         * Properties of an AttributeProto.\n         * @memberof onnx\n         * @interface IAttributeProto\n         * @property {string|null} [name] AttributeProto name\n         * @property {string|null} [refAttrName] AttributeProto refAttrName\n         * @property {string|null} [docString] AttributeProto docString\n         * @property {onnx.AttributeProto.AttributeType|null} [type] AttributeProto type\n         * @property {number|null} [f] AttributeProto f\n         * @property {number|Long|null} [i] AttributeProto i\n         * @property {Uint8Array|null} [s] AttributeProto s\n         * @property {onnx.ITensorProto|null} [t] AttributeProto t\n         * @property {onnx.IGraphProto|null} [g] AttributeProto g\n         * @property {onnx.ISparseTensorProto|null} [sparseTensor] AttributeProto sparseTensor\n         * @property {onnx.ITypeProto|null} [tp] AttributeProto tp\n         * @property {Array.<number>|null} [floats] AttributeProto floats\n         * @property {Array.<number|Long>|null} [ints] AttributeProto ints\n         * @property {Array.<Uint8Array>|null} [strings] AttributeProto strings\n         * @property {Array.<onnx.ITensorProto>|null} [tensors] AttributeProto tensors\n         * @property {Array.<onnx.IGraphProto>|null} [graphs] AttributeProto graphs\n         * @property {Array.<onnx.ISparseTensorProto>|null} [sparseTensors] AttributeProto sparseTensors\n         * @property {Array.<onnx.ITypeProto>|null} [typeProtos] AttributeProto typeProtos\n         */\n\n        /**\n         * Constructs a new AttributeProto.\n         * @memberof onnx\n         * @classdesc Represents an AttributeProto.\n         * @implements IAttributeProto\n         * @constructor\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         */\n        function AttributeProto(properties) {\n            this.floats = [];\n            this.ints = [];\n            this.strings = [];\n            this.tensors = [];\n            this.graphs = [];\n            this.sparseTensors = [];\n            this.typeProtos = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * AttributeProto name.\n         * @member {string} name\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.name = \"\";\n\n        /**\n         * AttributeProto refAttrName.\n         * @member {string} refAttrName\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.refAttrName = \"\";\n\n        /**\n         * AttributeProto docString.\n         * @member {string} docString\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.docString = \"\";\n\n        /**\n         * AttributeProto type.\n         * @member {onnx.AttributeProto.AttributeType} type\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.type = 0;\n\n        /**\n         * AttributeProto f.\n         * @member {number} f\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.f = 0;\n\n        /**\n         * AttributeProto i.\n         * @member {number|Long} i\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.i = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * AttributeProto s.\n         * @member {Uint8Array} s\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.s = $util.newBuffer([]);\n\n        /**\n         * AttributeProto t.\n         * @member {onnx.ITensorProto|null|undefined} t\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.t = null;\n\n        /**\n         * AttributeProto g.\n         * @member {onnx.IGraphProto|null|undefined} g\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.g = null;\n\n        /**\n         * AttributeProto sparseTensor.\n         * @member {onnx.ISparseTensorProto|null|undefined} sparseTensor\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.sparseTensor = null;\n\n        /**\n         * AttributeProto tp.\n         * @member {onnx.ITypeProto|null|undefined} tp\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.tp = null;\n\n        /**\n         * AttributeProto floats.\n         * @member {Array.<number>} floats\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.floats = $util.emptyArray;\n\n        /**\n         * AttributeProto ints.\n         * @member {Array.<number|Long>} ints\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.ints = $util.emptyArray;\n\n        /**\n         * AttributeProto strings.\n         * @member {Array.<Uint8Array>} strings\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.strings = $util.emptyArray;\n\n        /**\n         * AttributeProto tensors.\n         * @member {Array.<onnx.ITensorProto>} tensors\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.tensors = $util.emptyArray;\n\n        /**\n         * AttributeProto graphs.\n         * @member {Array.<onnx.IGraphProto>} graphs\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.graphs = $util.emptyArray;\n\n        /**\n         * AttributeProto sparseTensors.\n         * @member {Array.<onnx.ISparseTensorProto>} sparseTensors\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.sparseTensors = $util.emptyArray;\n\n        /**\n         * AttributeProto typeProtos.\n         * @member {Array.<onnx.ITypeProto>} typeProtos\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.typeProtos = $util.emptyArray;\n\n        /**\n         * Creates a new AttributeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         * @returns {onnx.AttributeProto} AttributeProto instance\n         */\n        AttributeProto.create = function create(properties) {\n            return new AttributeProto(properties);\n        };\n\n        /**\n         * Encodes the specified AttributeProto message. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.f != null && Object.hasOwnProperty.call(message, \"f\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.f);\n            if (message.i != null && Object.hasOwnProperty.call(message, \"i\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.i);\n            if (message.s != null && Object.hasOwnProperty.call(message, \"s\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.s);\n            if (message.t != null && Object.hasOwnProperty.call(message, \"t\"))\n                $root.onnx.TensorProto.encode(message.t, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.g != null && Object.hasOwnProperty.call(message, \"g\"))\n                $root.onnx.GraphProto.encode(message.g, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.floats != null && message.floats.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.floats.length; ++i)\n                    writer.float(message.floats[i]);\n                writer.ldelim();\n            }\n            if (message.ints != null && message.ints.length) {\n                writer.uint32(/* id 8, wireType 2 =*/66).fork();\n                for (var i = 0; i < message.ints.length; ++i)\n                    writer.int64(message.ints[i]);\n                writer.ldelim();\n            }\n            if (message.strings != null && message.strings.length)\n                for (var i = 0; i < message.strings.length; ++i)\n                    writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.strings[i]);\n            if (message.tensors != null && message.tensors.length)\n                for (var i = 0; i < message.tensors.length; ++i)\n                    $root.onnx.TensorProto.encode(message.tensors[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.graphs != null && message.graphs.length)\n                for (var i = 0; i < message.graphs.length; ++i)\n                    $root.onnx.GraphProto.encode(message.graphs[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 13, wireType 2 =*/106).string(message.docString);\n            if (message.tp != null && Object.hasOwnProperty.call(message, \"tp\"))\n                $root.onnx.TypeProto.encode(message.tp, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            if (message.typeProtos != null && message.typeProtos.length)\n                for (var i = 0; i < message.typeProtos.length; ++i)\n                    $root.onnx.TypeProto.encode(message.typeProtos[i], writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();\n            if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\n                writer.uint32(/* id 20, wireType 0 =*/160).int32(message.type);\n            if (message.refAttrName != null && Object.hasOwnProperty.call(message, \"refAttrName\"))\n                writer.uint32(/* id 21, wireType 2 =*/170).string(message.refAttrName);\n            if (message.sparseTensor != null && Object.hasOwnProperty.call(message, \"sparseTensor\"))\n                $root.onnx.SparseTensorProto.encode(message.sparseTensor, writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();\n            if (message.sparseTensors != null && message.sparseTensors.length)\n                for (var i = 0; i < message.sparseTensors.length; ++i)\n                    $root.onnx.SparseTensorProto.encode(message.sparseTensors[i], writer.uint32(/* id 23, wireType 2 =*/186).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified AttributeProto message, length delimited. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.AttributeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 21: {\n                        message.refAttrName = reader.string();\n                        break;\n                    }\n                case 13: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                case 20: {\n                        message.type = reader.int32();\n                        break;\n                    }\n                case 2: {\n                        message.f = reader.float();\n                        break;\n                    }\n                case 3: {\n                        message.i = reader.int64();\n                        break;\n                    }\n                case 4: {\n                        message.s = reader.bytes();\n                        break;\n                    }\n                case 5: {\n                        message.t = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 6: {\n                        message.g = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 22: {\n                        message.sparseTensor = $root.onnx.SparseTensorProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 14: {\n                        message.tp = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 7: {\n                        if (!(message.floats && message.floats.length))\n                            message.floats = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.floats.push(reader.float());\n                        } else\n                            message.floats.push(reader.float());\n                        break;\n                    }\n                case 8: {\n                        if (!(message.ints && message.ints.length))\n                            message.ints = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.ints.push(reader.int64());\n                        } else\n                            message.ints.push(reader.int64());\n                        break;\n                    }\n                case 9: {\n                        if (!(message.strings && message.strings.length))\n                            message.strings = [];\n                        message.strings.push(reader.bytes());\n                        break;\n                    }\n                case 10: {\n                        if (!(message.tensors && message.tensors.length))\n                            message.tensors = [];\n                        message.tensors.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 11: {\n                        if (!(message.graphs && message.graphs.length))\n                            message.graphs = [];\n                        message.graphs.push($root.onnx.GraphProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 23: {\n                        if (!(message.sparseTensors && message.sparseTensors.length))\n                            message.sparseTensors = [];\n                        message.sparseTensors.push($root.onnx.SparseTensorProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 15: {\n                        if (!(message.typeProtos && message.typeProtos.length))\n                            message.typeProtos = [];\n                        message.typeProtos.push($root.onnx.TypeProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an AttributeProto message.\n         * @function verify\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        AttributeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                if (!$util.isString(message.refAttrName))\n                    return \"refAttrName: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                switch (message.type) {\n                default:\n                    return \"type: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 11:\n                case 13:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                case 12:\n                case 14:\n                    break;\n                }\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                if (typeof message.f !== \"number\")\n                    return \"f: number expected\";\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (!$util.isInteger(message.i) && !(message.i && $util.isInteger(message.i.low) && $util.isInteger(message.i.high)))\n                    return \"i: integer|Long expected\";\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                if (!(message.s && typeof message.s.length === \"number\" || $util.isString(message.s)))\n                    return \"s: buffer expected\";\n            if (message.t != null && message.hasOwnProperty(\"t\")) {\n                var error = $root.onnx.TensorProto.verify(message.t);\n                if (error)\n                    return \"t.\" + error;\n            }\n            if (message.g != null && message.hasOwnProperty(\"g\")) {\n                var error = $root.onnx.GraphProto.verify(message.g);\n                if (error)\n                    return \"g.\" + error;\n            }\n            if (message.sparseTensor != null && message.hasOwnProperty(\"sparseTensor\")) {\n                var error = $root.onnx.SparseTensorProto.verify(message.sparseTensor);\n                if (error)\n                    return \"sparseTensor.\" + error;\n            }\n            if (message.tp != null && message.hasOwnProperty(\"tp\")) {\n                var error = $root.onnx.TypeProto.verify(message.tp);\n                if (error)\n                    return \"tp.\" + error;\n            }\n            if (message.floats != null && message.hasOwnProperty(\"floats\")) {\n                if (!Array.isArray(message.floats))\n                    return \"floats: array expected\";\n                for (var i = 0; i < message.floats.length; ++i)\n                    if (typeof message.floats[i] !== \"number\")\n                        return \"floats: number[] expected\";\n            }\n            if (message.ints != null && message.hasOwnProperty(\"ints\")) {\n                if (!Array.isArray(message.ints))\n                    return \"ints: array expected\";\n                for (var i = 0; i < message.ints.length; ++i)\n                    if (!$util.isInteger(message.ints[i]) && !(message.ints[i] && $util.isInteger(message.ints[i].low) && $util.isInteger(message.ints[i].high)))\n                        return \"ints: integer|Long[] expected\";\n            }\n            if (message.strings != null && message.hasOwnProperty(\"strings\")) {\n                if (!Array.isArray(message.strings))\n                    return \"strings: array expected\";\n                for (var i = 0; i < message.strings.length; ++i)\n                    if (!(message.strings[i] && typeof message.strings[i].length === \"number\" || $util.isString(message.strings[i])))\n                        return \"strings: buffer[] expected\";\n            }\n            if (message.tensors != null && message.hasOwnProperty(\"tensors\")) {\n                if (!Array.isArray(message.tensors))\n                    return \"tensors: array expected\";\n                for (var i = 0; i < message.tensors.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.tensors[i]);\n                    if (error)\n                        return \"tensors.\" + error;\n                }\n            }\n            if (message.graphs != null && message.hasOwnProperty(\"graphs\")) {\n                if (!Array.isArray(message.graphs))\n                    return \"graphs: array expected\";\n                for (var i = 0; i < message.graphs.length; ++i) {\n                    var error = $root.onnx.GraphProto.verify(message.graphs[i]);\n                    if (error)\n                        return \"graphs.\" + error;\n                }\n            }\n            if (message.sparseTensors != null && message.hasOwnProperty(\"sparseTensors\")) {\n                if (!Array.isArray(message.sparseTensors))\n                    return \"sparseTensors: array expected\";\n                for (var i = 0; i < message.sparseTensors.length; ++i) {\n                    var error = $root.onnx.SparseTensorProto.verify(message.sparseTensors[i]);\n                    if (error)\n                        return \"sparseTensors.\" + error;\n                }\n            }\n            if (message.typeProtos != null && message.hasOwnProperty(\"typeProtos\")) {\n                if (!Array.isArray(message.typeProtos))\n                    return \"typeProtos: array expected\";\n                for (var i = 0; i < message.typeProtos.length; ++i) {\n                    var error = $root.onnx.TypeProto.verify(message.typeProtos[i]);\n                    if (error)\n                        return \"typeProtos.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an AttributeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.AttributeProto} AttributeProto\n         */\n        AttributeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.AttributeProto)\n                return object;\n            var message = new $root.onnx.AttributeProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.refAttrName != null)\n                message.refAttrName = String(object.refAttrName);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            switch (object.type) {\n            default:\n                if (typeof object.type === \"number\") {\n                    message.type = object.type;\n                    break;\n                }\n                break;\n            case \"UNDEFINED\":\n            case 0:\n                message.type = 0;\n                break;\n            case \"FLOAT\":\n            case 1:\n                message.type = 1;\n                break;\n            case \"INT\":\n            case 2:\n                message.type = 2;\n                break;\n            case \"STRING\":\n            case 3:\n                message.type = 3;\n                break;\n            case \"TENSOR\":\n            case 4:\n                message.type = 4;\n                break;\n            case \"GRAPH\":\n            case 5:\n                message.type = 5;\n                break;\n            case \"SPARSE_TENSOR\":\n            case 11:\n                message.type = 11;\n                break;\n            case \"TYPE_PROTO\":\n            case 13:\n                message.type = 13;\n                break;\n            case \"FLOATS\":\n            case 6:\n                message.type = 6;\n                break;\n            case \"INTS\":\n            case 7:\n                message.type = 7;\n                break;\n            case \"STRINGS\":\n            case 8:\n                message.type = 8;\n                break;\n            case \"TENSORS\":\n            case 9:\n                message.type = 9;\n                break;\n            case \"GRAPHS\":\n            case 10:\n                message.type = 10;\n                break;\n            case \"SPARSE_TENSORS\":\n            case 12:\n                message.type = 12;\n                break;\n            case \"TYPE_PROTOS\":\n            case 14:\n                message.type = 14;\n                break;\n            }\n            if (object.f != null)\n                message.f = Number(object.f);\n            if (object.i != null)\n                if ($util.Long)\n                    (message.i = $util.Long.fromValue(object.i)).unsigned = false;\n                else if (typeof object.i === \"string\")\n                    message.i = parseInt(object.i, 10);\n                else if (typeof object.i === \"number\")\n                    message.i = object.i;\n                else if (typeof object.i === \"object\")\n                    message.i = new $util.LongBits(object.i.low >>> 0, object.i.high >>> 0).toNumber();\n            if (object.s != null)\n                if (typeof object.s === \"string\")\n                    $util.base64.decode(object.s, message.s = $util.newBuffer($util.base64.length(object.s)), 0);\n                else if (object.s.length >= 0)\n                    message.s = object.s;\n            if (object.t != null) {\n                if (typeof object.t !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.t: object expected\");\n                message.t = $root.onnx.TensorProto.fromObject(object.t);\n            }\n            if (object.g != null) {\n                if (typeof object.g !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.g: object expected\");\n                message.g = $root.onnx.GraphProto.fromObject(object.g);\n            }\n            if (object.sparseTensor != null) {\n                if (typeof object.sparseTensor !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.sparseTensor: object expected\");\n                message.sparseTensor = $root.onnx.SparseTensorProto.fromObject(object.sparseTensor);\n            }\n            if (object.tp != null) {\n                if (typeof object.tp !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.tp: object expected\");\n                message.tp = $root.onnx.TypeProto.fromObject(object.tp);\n            }\n            if (object.floats) {\n                if (!Array.isArray(object.floats))\n                    throw TypeError(\".onnx.AttributeProto.floats: array expected\");\n                message.floats = [];\n                for (var i = 0; i < object.floats.length; ++i)\n                    message.floats[i] = Number(object.floats[i]);\n            }\n            if (object.ints) {\n                if (!Array.isArray(object.ints))\n                    throw TypeError(\".onnx.AttributeProto.ints: array expected\");\n                message.ints = [];\n                for (var i = 0; i < object.ints.length; ++i)\n                    if ($util.Long)\n                        (message.ints[i] = $util.Long.fromValue(object.ints[i])).unsigned = false;\n                    else if (typeof object.ints[i] === \"string\")\n                        message.ints[i] = parseInt(object.ints[i], 10);\n                    else if (typeof object.ints[i] === \"number\")\n                        message.ints[i] = object.ints[i];\n                    else if (typeof object.ints[i] === \"object\")\n                        message.ints[i] = new $util.LongBits(object.ints[i].low >>> 0, object.ints[i].high >>> 0).toNumber();\n            }\n            if (object.strings) {\n                if (!Array.isArray(object.strings))\n                    throw TypeError(\".onnx.AttributeProto.strings: array expected\");\n                message.strings = [];\n                for (var i = 0; i < object.strings.length; ++i)\n                    if (typeof object.strings[i] === \"string\")\n                        $util.base64.decode(object.strings[i], message.strings[i] = $util.newBuffer($util.base64.length(object.strings[i])), 0);\n                    else if (object.strings[i].length >= 0)\n                        message.strings[i] = object.strings[i];\n            }\n            if (object.tensors) {\n                if (!Array.isArray(object.tensors))\n                    throw TypeError(\".onnx.AttributeProto.tensors: array expected\");\n                message.tensors = [];\n                for (var i = 0; i < object.tensors.length; ++i) {\n                    if (typeof object.tensors[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.tensors: object expected\");\n                    message.tensors[i] = $root.onnx.TensorProto.fromObject(object.tensors[i]);\n                }\n            }\n            if (object.graphs) {\n                if (!Array.isArray(object.graphs))\n                    throw TypeError(\".onnx.AttributeProto.graphs: array expected\");\n                message.graphs = [];\n                for (var i = 0; i < object.graphs.length; ++i) {\n                    if (typeof object.graphs[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.graphs: object expected\");\n                    message.graphs[i] = $root.onnx.GraphProto.fromObject(object.graphs[i]);\n                }\n            }\n            if (object.sparseTensors) {\n                if (!Array.isArray(object.sparseTensors))\n                    throw TypeError(\".onnx.AttributeProto.sparseTensors: array expected\");\n                message.sparseTensors = [];\n                for (var i = 0; i < object.sparseTensors.length; ++i) {\n                    if (typeof object.sparseTensors[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.sparseTensors: object expected\");\n                    message.sparseTensors[i] = $root.onnx.SparseTensorProto.fromObject(object.sparseTensors[i]);\n                }\n            }\n            if (object.typeProtos) {\n                if (!Array.isArray(object.typeProtos))\n                    throw TypeError(\".onnx.AttributeProto.typeProtos: array expected\");\n                message.typeProtos = [];\n                for (var i = 0; i < object.typeProtos.length; ++i) {\n                    if (typeof object.typeProtos[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.typeProtos: object expected\");\n                    message.typeProtos[i] = $root.onnx.TypeProto.fromObject(object.typeProtos[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an AttributeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.AttributeProto} message AttributeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AttributeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.floats = [];\n                object.ints = [];\n                object.strings = [];\n                object.tensors = [];\n                object.graphs = [];\n                object.typeProtos = [];\n                object.sparseTensors = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.f = 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.i = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.i = options.longs === String ? \"0\" : 0;\n                if (options.bytes === String)\n                    object.s = \"\";\n                else {\n                    object.s = [];\n                    if (options.bytes !== Array)\n                        object.s = $util.newBuffer(object.s);\n                }\n                object.t = null;\n                object.g = null;\n                object.docString = \"\";\n                object.tp = null;\n                object.type = options.enums === String ? \"UNDEFINED\" : 0;\n                object.refAttrName = \"\";\n                object.sparseTensor = null;\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                object.f = options.json && !isFinite(message.f) ? String(message.f) : message.f;\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (typeof message.i === \"number\")\n                    object.i = options.longs === String ? String(message.i) : message.i;\n                else\n                    object.i = options.longs === String ? $util.Long.prototype.toString.call(message.i) : options.longs === Number ? new $util.LongBits(message.i.low >>> 0, message.i.high >>> 0).toNumber() : message.i;\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                object.s = options.bytes === String ? $util.base64.encode(message.s, 0, message.s.length) : options.bytes === Array ? Array.prototype.slice.call(message.s) : message.s;\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                object.t = $root.onnx.TensorProto.toObject(message.t, options);\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                object.g = $root.onnx.GraphProto.toObject(message.g, options);\n            if (message.floats && message.floats.length) {\n                object.floats = [];\n                for (var j = 0; j < message.floats.length; ++j)\n                    object.floats[j] = options.json && !isFinite(message.floats[j]) ? String(message.floats[j]) : message.floats[j];\n            }\n            if (message.ints && message.ints.length) {\n                object.ints = [];\n                for (var j = 0; j < message.ints.length; ++j)\n                    if (typeof message.ints[j] === \"number\")\n                        object.ints[j] = options.longs === String ? String(message.ints[j]) : message.ints[j];\n                    else\n                        object.ints[j] = options.longs === String ? $util.Long.prototype.toString.call(message.ints[j]) : options.longs === Number ? new $util.LongBits(message.ints[j].low >>> 0, message.ints[j].high >>> 0).toNumber() : message.ints[j];\n            }\n            if (message.strings && message.strings.length) {\n                object.strings = [];\n                for (var j = 0; j < message.strings.length; ++j)\n                    object.strings[j] = options.bytes === String ? $util.base64.encode(message.strings[j], 0, message.strings[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.strings[j]) : message.strings[j];\n            }\n            if (message.tensors && message.tensors.length) {\n                object.tensors = [];\n                for (var j = 0; j < message.tensors.length; ++j)\n                    object.tensors[j] = $root.onnx.TensorProto.toObject(message.tensors[j], options);\n            }\n            if (message.graphs && message.graphs.length) {\n                object.graphs = [];\n                for (var j = 0; j < message.graphs.length; ++j)\n                    object.graphs[j] = $root.onnx.GraphProto.toObject(message.graphs[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.tp != null && message.hasOwnProperty(\"tp\"))\n                object.tp = $root.onnx.TypeProto.toObject(message.tp, options);\n            if (message.typeProtos && message.typeProtos.length) {\n                object.typeProtos = [];\n                for (var j = 0; j < message.typeProtos.length; ++j)\n                    object.typeProtos[j] = $root.onnx.TypeProto.toObject(message.typeProtos[j], options);\n            }\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = options.enums === String ? $root.onnx.AttributeProto.AttributeType[message.type] === undefined ? message.type : $root.onnx.AttributeProto.AttributeType[message.type] : message.type;\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                object.refAttrName = message.refAttrName;\n            if (message.sparseTensor != null && message.hasOwnProperty(\"sparseTensor\"))\n                object.sparseTensor = $root.onnx.SparseTensorProto.toObject(message.sparseTensor, options);\n            if (message.sparseTensors && message.sparseTensors.length) {\n                object.sparseTensors = [];\n                for (var j = 0; j < message.sparseTensors.length; ++j)\n                    object.sparseTensors[j] = $root.onnx.SparseTensorProto.toObject(message.sparseTensors[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this AttributeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.AttributeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AttributeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for AttributeProto\n         * @function getTypeUrl\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        AttributeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.AttributeProto\";\n        };\n\n        /**\n         * AttributeType enum.\n         * @name onnx.AttributeProto.AttributeType\n         * @enum {number}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} INT=2 INT value\n         * @property {number} STRING=3 STRING value\n         * @property {number} TENSOR=4 TENSOR value\n         * @property {number} GRAPH=5 GRAPH value\n         * @property {number} SPARSE_TENSOR=11 SPARSE_TENSOR value\n         * @property {number} TYPE_PROTO=13 TYPE_PROTO value\n         * @property {number} FLOATS=6 FLOATS value\n         * @property {number} INTS=7 INTS value\n         * @property {number} STRINGS=8 STRINGS value\n         * @property {number} TENSORS=9 TENSORS value\n         * @property {number} GRAPHS=10 GRAPHS value\n         * @property {number} SPARSE_TENSORS=12 SPARSE_TENSORS value\n         * @property {number} TYPE_PROTOS=14 TYPE_PROTOS value\n         */\n        AttributeProto.AttributeType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"INT\"] = 2;\n            values[valuesById[3] = \"STRING\"] = 3;\n            values[valuesById[4] = \"TENSOR\"] = 4;\n            values[valuesById[5] = \"GRAPH\"] = 5;\n            values[valuesById[11] = \"SPARSE_TENSOR\"] = 11;\n            values[valuesById[13] = \"TYPE_PROTO\"] = 13;\n            values[valuesById[6] = \"FLOATS\"] = 6;\n            values[valuesById[7] = \"INTS\"] = 7;\n            values[valuesById[8] = \"STRINGS\"] = 8;\n            values[valuesById[9] = \"TENSORS\"] = 9;\n            values[valuesById[10] = \"GRAPHS\"] = 10;\n            values[valuesById[12] = \"SPARSE_TENSORS\"] = 12;\n            values[valuesById[14] = \"TYPE_PROTOS\"] = 14;\n            return values;\n        })();\n\n        return AttributeProto;\n    })();\n\n    onnx.ValueInfoProto = (function() {\n\n        /**\n         * Properties of a ValueInfoProto.\n         * @memberof onnx\n         * @interface IValueInfoProto\n         * @property {string|null} [name] ValueInfoProto name\n         * @property {onnx.ITypeProto|null} [type] ValueInfoProto type\n         * @property {string|null} [docString] ValueInfoProto docString\n         */\n\n        /**\n         * Constructs a new ValueInfoProto.\n         * @memberof onnx\n         * @classdesc Represents a ValueInfoProto.\n         * @implements IValueInfoProto\n         * @constructor\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         */\n        function ValueInfoProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ValueInfoProto name.\n         * @member {string} name\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.name = \"\";\n\n        /**\n         * ValueInfoProto type.\n         * @member {onnx.ITypeProto|null|undefined} type\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.type = null;\n\n        /**\n         * ValueInfoProto docString.\n         * @member {string} docString\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new ValueInfoProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         * @returns {onnx.ValueInfoProto} ValueInfoProto instance\n         */\n        ValueInfoProto.create = function create(properties) {\n            return new ValueInfoProto(properties);\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\n                $root.onnx.TypeProto.encode(message.type, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.docString);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message, length delimited. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ValueInfoProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.type = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 3: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ValueInfoProto message.\n         * @function verify\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ValueInfoProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\")) {\n                var error = $root.onnx.TypeProto.verify(message.type);\n                if (error)\n                    return \"type.\" + error;\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ValueInfoProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         */\n        ValueInfoProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ValueInfoProto)\n                return object;\n            var message = new $root.onnx.ValueInfoProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.type != null) {\n                if (typeof object.type !== \"object\")\n                    throw TypeError(\".onnx.ValueInfoProto.type: object expected\");\n                message.type = $root.onnx.TypeProto.fromObject(object.type);\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ValueInfoProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.ValueInfoProto} message ValueInfoProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ValueInfoProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.name = \"\";\n                object.type = null;\n                object.docString = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = $root.onnx.TypeProto.toObject(message.type, options);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            return object;\n        };\n\n        /**\n         * Converts this ValueInfoProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ValueInfoProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ValueInfoProto\n         * @function getTypeUrl\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ValueInfoProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.ValueInfoProto\";\n        };\n\n        return ValueInfoProto;\n    })();\n\n    onnx.NodeProto = (function() {\n\n        /**\n         * Properties of a NodeProto.\n         * @memberof onnx\n         * @interface INodeProto\n         * @property {Array.<string>|null} [input] NodeProto input\n         * @property {Array.<string>|null} [output] NodeProto output\n         * @property {string|null} [name] NodeProto name\n         * @property {string|null} [opType] NodeProto opType\n         * @property {string|null} [domain] NodeProto domain\n         * @property {Array.<onnx.IAttributeProto>|null} [attribute] NodeProto attribute\n         * @property {string|null} [docString] NodeProto docString\n         */\n\n        /**\n         * Constructs a new NodeProto.\n         * @memberof onnx\n         * @classdesc Represents a NodeProto.\n         * @implements INodeProto\n         * @constructor\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         */\n        function NodeProto(properties) {\n            this.input = [];\n            this.output = [];\n            this.attribute = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * NodeProto input.\n         * @member {Array.<string>} input\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.input = $util.emptyArray;\n\n        /**\n         * NodeProto output.\n         * @member {Array.<string>} output\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.output = $util.emptyArray;\n\n        /**\n         * NodeProto name.\n         * @member {string} name\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.name = \"\";\n\n        /**\n         * NodeProto opType.\n         * @member {string} opType\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.opType = \"\";\n\n        /**\n         * NodeProto domain.\n         * @member {string} domain\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.domain = \"\";\n\n        /**\n         * NodeProto attribute.\n         * @member {Array.<onnx.IAttributeProto>} attribute\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.attribute = $util.emptyArray;\n\n        /**\n         * NodeProto docString.\n         * @member {string} docString\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new NodeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         * @returns {onnx.NodeProto} NodeProto instance\n         */\n        NodeProto.create = function create(properties) {\n            return new NodeProto(properties);\n        };\n\n        /**\n         * Encodes the specified NodeProto message. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.input[i]);\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.output[i]);\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);\n            if (message.opType != null && Object.hasOwnProperty.call(message, \"opType\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.opType);\n            if (message.attribute != null && message.attribute.length)\n                for (var i = 0; i < message.attribute.length; ++i)\n                    $root.onnx.AttributeProto.encode(message.attribute[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.domain);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified NodeProto message, length delimited. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.NodeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        if (!(message.input && message.input.length))\n                            message.input = [];\n                        message.input.push(reader.string());\n                        break;\n                    }\n                case 2: {\n                        if (!(message.output && message.output.length))\n                            message.output = [];\n                        message.output.push(reader.string());\n                        break;\n                    }\n                case 3: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 4: {\n                        message.opType = reader.string();\n                        break;\n                    }\n                case 7: {\n                        message.domain = reader.string();\n                        break;\n                    }\n                case 5: {\n                        if (!(message.attribute && message.attribute.length))\n                            message.attribute = [];\n                        message.attribute.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 6: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a NodeProto message.\n         * @function verify\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        NodeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i)\n                    if (!$util.isString(message.input[i]))\n                        return \"input: string[] expected\";\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i)\n                    if (!$util.isString(message.output[i]))\n                        return \"output: string[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                if (!$util.isString(message.opType))\n                    return \"opType: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\n                if (!Array.isArray(message.attribute))\n                    return \"attribute: array expected\";\n                for (var i = 0; i < message.attribute.length; ++i) {\n                    var error = $root.onnx.AttributeProto.verify(message.attribute[i]);\n                    if (error)\n                        return \"attribute.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a NodeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.NodeProto} NodeProto\n         */\n        NodeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.NodeProto)\n                return object;\n            var message = new $root.onnx.NodeProto();\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.NodeProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i)\n                    message.input[i] = String(object.input[i]);\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.NodeProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i)\n                    message.output[i] = String(object.output[i]);\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.opType != null)\n                message.opType = String(object.opType);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.attribute) {\n                if (!Array.isArray(object.attribute))\n                    throw TypeError(\".onnx.NodeProto.attribute: array expected\");\n                message.attribute = [];\n                for (var i = 0; i < object.attribute.length; ++i) {\n                    if (typeof object.attribute[i] !== \"object\")\n                        throw TypeError(\".onnx.NodeProto.attribute: object expected\");\n                    message.attribute[i] = $root.onnx.AttributeProto.fromObject(object.attribute[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a NodeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.NodeProto} message NodeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        NodeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.input = [];\n                object.output = [];\n                object.attribute = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.opType = \"\";\n                object.docString = \"\";\n                object.domain = \"\";\n            }\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = message.input[j];\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = message.output[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                object.opType = message.opType;\n            if (message.attribute && message.attribute.length) {\n                object.attribute = [];\n                for (var j = 0; j < message.attribute.length; ++j)\n                    object.attribute[j] = $root.onnx.AttributeProto.toObject(message.attribute[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            return object;\n        };\n\n        /**\n         * Converts this NodeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.NodeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        NodeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for NodeProto\n         * @function getTypeUrl\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        NodeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.NodeProto\";\n        };\n\n        return NodeProto;\n    })();\n\n    onnx.TrainingInfoProto = (function() {\n\n        /**\n         * Properties of a TrainingInfoProto.\n         * @memberof onnx\n         * @interface ITrainingInfoProto\n         * @property {onnx.IGraphProto|null} [initialization] TrainingInfoProto initialization\n         * @property {onnx.IGraphProto|null} [algorithm] TrainingInfoProto algorithm\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [initializationBinding] TrainingInfoProto initializationBinding\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [updateBinding] TrainingInfoProto updateBinding\n         */\n\n        /**\n         * Constructs a new TrainingInfoProto.\n         * @memberof onnx\n         * @classdesc Represents a TrainingInfoProto.\n         * @implements ITrainingInfoProto\n         * @constructor\n         * @param {onnx.ITrainingInfoProto=} [properties] Properties to set\n         */\n        function TrainingInfoProto(properties) {\n            this.initializationBinding = [];\n            this.updateBinding = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TrainingInfoProto initialization.\n         * @member {onnx.IGraphProto|null|undefined} initialization\n         * @memberof onnx.TrainingInfoProto\n         * @instance\n         */\n        TrainingInfoProto.prototype.initialization = null;\n\n        /**\n         * TrainingInfoProto algorithm.\n         * @member {onnx.IGraphProto|null|undefined} algorithm\n         * @memberof onnx.TrainingInfoProto\n         * @instance\n         */\n        TrainingInfoProto.prototype.algorithm = null;\n\n        /**\n         * TrainingInfoProto initializationBinding.\n         * @member {Array.<onnx.IStringStringEntryProto>} initializationBinding\n         * @memberof onnx.TrainingInfoProto\n         * @instance\n         */\n        TrainingInfoProto.prototype.initializationBinding = $util.emptyArray;\n\n        /**\n         * TrainingInfoProto updateBinding.\n         * @member {Array.<onnx.IStringStringEntryProto>} updateBinding\n         * @memberof onnx.TrainingInfoProto\n         * @instance\n         */\n        TrainingInfoProto.prototype.updateBinding = $util.emptyArray;\n\n        /**\n         * Creates a new TrainingInfoProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {onnx.ITrainingInfoProto=} [properties] Properties to set\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto instance\n         */\n        TrainingInfoProto.create = function create(properties) {\n            return new TrainingInfoProto(properties);\n        };\n\n        /**\n         * Encodes the specified TrainingInfoProto message. Does not implicitly {@link onnx.TrainingInfoProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {onnx.ITrainingInfoProto} message TrainingInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TrainingInfoProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.initialization != null && Object.hasOwnProperty.call(message, \"initialization\"))\n                $root.onnx.GraphProto.encode(message.initialization, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.algorithm != null && Object.hasOwnProperty.call(message, \"algorithm\"))\n                $root.onnx.GraphProto.encode(message.algorithm, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.initializationBinding != null && message.initializationBinding.length)\n                for (var i = 0; i < message.initializationBinding.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.initializationBinding[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.updateBinding != null && message.updateBinding.length)\n                for (var i = 0; i < message.updateBinding.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.updateBinding[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TrainingInfoProto message, length delimited. Does not implicitly {@link onnx.TrainingInfoProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {onnx.ITrainingInfoProto} message TrainingInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TrainingInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TrainingInfoProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TrainingInfoProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TrainingInfoProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.initialization = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 2: {\n                        message.algorithm = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 3: {\n                        if (!(message.initializationBinding && message.initializationBinding.length))\n                            message.initializationBinding = [];\n                        message.initializationBinding.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 4: {\n                        if (!(message.updateBinding && message.updateBinding.length))\n                            message.updateBinding = [];\n                        message.updateBinding.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TrainingInfoProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TrainingInfoProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TrainingInfoProto message.\n         * @function verify\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TrainingInfoProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.initialization != null && message.hasOwnProperty(\"initialization\")) {\n                var error = $root.onnx.GraphProto.verify(message.initialization);\n                if (error)\n                    return \"initialization.\" + error;\n            }\n            if (message.algorithm != null && message.hasOwnProperty(\"algorithm\")) {\n                var error = $root.onnx.GraphProto.verify(message.algorithm);\n                if (error)\n                    return \"algorithm.\" + error;\n            }\n            if (message.initializationBinding != null && message.hasOwnProperty(\"initializationBinding\")) {\n                if (!Array.isArray(message.initializationBinding))\n                    return \"initializationBinding: array expected\";\n                for (var i = 0; i < message.initializationBinding.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.initializationBinding[i]);\n                    if (error)\n                        return \"initializationBinding.\" + error;\n                }\n            }\n            if (message.updateBinding != null && message.hasOwnProperty(\"updateBinding\")) {\n                if (!Array.isArray(message.updateBinding))\n                    return \"updateBinding: array expected\";\n                for (var i = 0; i < message.updateBinding.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.updateBinding[i]);\n                    if (error)\n                        return \"updateBinding.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TrainingInfoProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto\n         */\n        TrainingInfoProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TrainingInfoProto)\n                return object;\n            var message = new $root.onnx.TrainingInfoProto();\n            if (object.initialization != null) {\n                if (typeof object.initialization !== \"object\")\n                    throw TypeError(\".onnx.TrainingInfoProto.initialization: object expected\");\n                message.initialization = $root.onnx.GraphProto.fromObject(object.initialization);\n            }\n            if (object.algorithm != null) {\n                if (typeof object.algorithm !== \"object\")\n                    throw TypeError(\".onnx.TrainingInfoProto.algorithm: object expected\");\n                message.algorithm = $root.onnx.GraphProto.fromObject(object.algorithm);\n            }\n            if (object.initializationBinding) {\n                if (!Array.isArray(object.initializationBinding))\n                    throw TypeError(\".onnx.TrainingInfoProto.initializationBinding: array expected\");\n                message.initializationBinding = [];\n                for (var i = 0; i < object.initializationBinding.length; ++i) {\n                    if (typeof object.initializationBinding[i] !== \"object\")\n                        throw TypeError(\".onnx.TrainingInfoProto.initializationBinding: object expected\");\n                    message.initializationBinding[i] = $root.onnx.StringStringEntryProto.fromObject(object.initializationBinding[i]);\n                }\n            }\n            if (object.updateBinding) {\n                if (!Array.isArray(object.updateBinding))\n                    throw TypeError(\".onnx.TrainingInfoProto.updateBinding: array expected\");\n                message.updateBinding = [];\n                for (var i = 0; i < object.updateBinding.length; ++i) {\n                    if (typeof object.updateBinding[i] !== \"object\")\n                        throw TypeError(\".onnx.TrainingInfoProto.updateBinding: object expected\");\n                    message.updateBinding[i] = $root.onnx.StringStringEntryProto.fromObject(object.updateBinding[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TrainingInfoProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {onnx.TrainingInfoProto} message TrainingInfoProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TrainingInfoProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.initializationBinding = [];\n                object.updateBinding = [];\n            }\n            if (options.defaults) {\n                object.initialization = null;\n                object.algorithm = null;\n            }\n            if (message.initialization != null && message.hasOwnProperty(\"initialization\"))\n                object.initialization = $root.onnx.GraphProto.toObject(message.initialization, options);\n            if (message.algorithm != null && message.hasOwnProperty(\"algorithm\"))\n                object.algorithm = $root.onnx.GraphProto.toObject(message.algorithm, options);\n            if (message.initializationBinding && message.initializationBinding.length) {\n                object.initializationBinding = [];\n                for (var j = 0; j < message.initializationBinding.length; ++j)\n                    object.initializationBinding[j] = $root.onnx.StringStringEntryProto.toObject(message.initializationBinding[j], options);\n            }\n            if (message.updateBinding && message.updateBinding.length) {\n                object.updateBinding = [];\n                for (var j = 0; j < message.updateBinding.length; ++j)\n                    object.updateBinding[j] = $root.onnx.StringStringEntryProto.toObject(message.updateBinding[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TrainingInfoProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TrainingInfoProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TrainingInfoProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TrainingInfoProto\n         * @function getTypeUrl\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TrainingInfoProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.TrainingInfoProto\";\n        };\n\n        return TrainingInfoProto;\n    })();\n\n    onnx.ModelProto = (function() {\n\n        /**\n         * Properties of a ModelProto.\n         * @memberof onnx\n         * @interface IModelProto\n         * @property {number|Long|null} [irVersion] ModelProto irVersion\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] ModelProto opsetImport\n         * @property {string|null} [producerName] ModelProto producerName\n         * @property {string|null} [producerVersion] ModelProto producerVersion\n         * @property {string|null} [domain] ModelProto domain\n         * @property {number|Long|null} [modelVersion] ModelProto modelVersion\n         * @property {string|null} [docString] ModelProto docString\n         * @property {onnx.IGraphProto|null} [graph] ModelProto graph\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [metadataProps] ModelProto metadataProps\n         * @property {Array.<onnx.ITrainingInfoProto>|null} [trainingInfo] ModelProto trainingInfo\n         * @property {Array.<onnx.IFunctionProto>|null} [functions] ModelProto functions\n         */\n\n        /**\n         * Constructs a new ModelProto.\n         * @memberof onnx\n         * @classdesc Represents a ModelProto.\n         * @implements IModelProto\n         * @constructor\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         */\n        function ModelProto(properties) {\n            this.opsetImport = [];\n            this.metadataProps = [];\n            this.trainingInfo = [];\n            this.functions = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ModelProto irVersion.\n         * @member {number|Long} irVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.irVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto opsetImport.\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.opsetImport = $util.emptyArray;\n\n        /**\n         * ModelProto producerName.\n         * @member {string} producerName\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerName = \"\";\n\n        /**\n         * ModelProto producerVersion.\n         * @member {string} producerVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerVersion = \"\";\n\n        /**\n         * ModelProto domain.\n         * @member {string} domain\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.domain = \"\";\n\n        /**\n         * ModelProto modelVersion.\n         * @member {number|Long} modelVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.modelVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto docString.\n         * @member {string} docString\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.docString = \"\";\n\n        /**\n         * ModelProto graph.\n         * @member {onnx.IGraphProto|null|undefined} graph\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.graph = null;\n\n        /**\n         * ModelProto metadataProps.\n         * @member {Array.<onnx.IStringStringEntryProto>} metadataProps\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.metadataProps = $util.emptyArray;\n\n        /**\n         * ModelProto trainingInfo.\n         * @member {Array.<onnx.ITrainingInfoProto>} trainingInfo\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.trainingInfo = $util.emptyArray;\n\n        /**\n         * ModelProto functions.\n         * @member {Array.<onnx.IFunctionProto>} functions\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.functions = $util.emptyArray;\n\n        /**\n         * Creates a new ModelProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         * @returns {onnx.ModelProto} ModelProto instance\n         */\n        ModelProto.create = function create(properties) {\n            return new ModelProto(properties);\n        };\n\n        /**\n         * Encodes the specified ModelProto message. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.irVersion != null && Object.hasOwnProperty.call(message, \"irVersion\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.irVersion);\n            if (message.producerName != null && Object.hasOwnProperty.call(message, \"producerName\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.producerName);\n            if (message.producerVersion != null && Object.hasOwnProperty.call(message, \"producerVersion\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.producerVersion);\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.domain);\n            if (message.modelVersion != null && Object.hasOwnProperty.call(message, \"modelVersion\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.modelVersion);\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.graph != null && Object.hasOwnProperty.call(message, \"graph\"))\n                $root.onnx.GraphProto.encode(message.graph, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.opsetImport != null && message.opsetImport.length)\n                for (var i = 0; i < message.opsetImport.length; ++i)\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.metadataProps != null && message.metadataProps.length)\n                for (var i = 0; i < message.metadataProps.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.metadataProps[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            if (message.trainingInfo != null && message.trainingInfo.length)\n                for (var i = 0; i < message.trainingInfo.length; ++i)\n                    $root.onnx.TrainingInfoProto.encode(message.trainingInfo[i], writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();\n            if (message.functions != null && message.functions.length)\n                for (var i = 0; i < message.functions.length; ++i)\n                    $root.onnx.FunctionProto.encode(message.functions[i], writer.uint32(/* id 25, wireType 2 =*/202).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ModelProto message, length delimited. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ModelProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.irVersion = reader.int64();\n                        break;\n                    }\n                case 8: {\n                        if (!(message.opsetImport && message.opsetImport.length))\n                            message.opsetImport = [];\n                        message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 2: {\n                        message.producerName = reader.string();\n                        break;\n                    }\n                case 3: {\n                        message.producerVersion = reader.string();\n                        break;\n                    }\n                case 4: {\n                        message.domain = reader.string();\n                        break;\n                    }\n                case 5: {\n                        message.modelVersion = reader.int64();\n                        break;\n                    }\n                case 6: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                case 7: {\n                        message.graph = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 14: {\n                        if (!(message.metadataProps && message.metadataProps.length))\n                            message.metadataProps = [];\n                        message.metadataProps.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 20: {\n                        if (!(message.trainingInfo && message.trainingInfo.length))\n                            message.trainingInfo = [];\n                        message.trainingInfo.push($root.onnx.TrainingInfoProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 25: {\n                        if (!(message.functions && message.functions.length))\n                            message.functions = [];\n                        message.functions.push($root.onnx.FunctionProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ModelProto message.\n         * @function verify\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ModelProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (!$util.isInteger(message.irVersion) && !(message.irVersion && $util.isInteger(message.irVersion.low) && $util.isInteger(message.irVersion.high)))\n                    return \"irVersion: integer|Long expected\";\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\n                if (!Array.isArray(message.opsetImport))\n                    return \"opsetImport: array expected\";\n                for (var i = 0; i < message.opsetImport.length; ++i) {\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n                    if (error)\n                        return \"opsetImport.\" + error;\n                }\n            }\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                if (!$util.isString(message.producerName))\n                    return \"producerName: string expected\";\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                if (!$util.isString(message.producerVersion))\n                    return \"producerVersion: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (!$util.isInteger(message.modelVersion) && !(message.modelVersion && $util.isInteger(message.modelVersion.low) && $util.isInteger(message.modelVersion.high)))\n                    return \"modelVersion: integer|Long expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.graph != null && message.hasOwnProperty(\"graph\")) {\n                var error = $root.onnx.GraphProto.verify(message.graph);\n                if (error)\n                    return \"graph.\" + error;\n            }\n            if (message.metadataProps != null && message.hasOwnProperty(\"metadataProps\")) {\n                if (!Array.isArray(message.metadataProps))\n                    return \"metadataProps: array expected\";\n                for (var i = 0; i < message.metadataProps.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.metadataProps[i]);\n                    if (error)\n                        return \"metadataProps.\" + error;\n                }\n            }\n            if (message.trainingInfo != null && message.hasOwnProperty(\"trainingInfo\")) {\n                if (!Array.isArray(message.trainingInfo))\n                    return \"trainingInfo: array expected\";\n                for (var i = 0; i < message.trainingInfo.length; ++i) {\n                    var error = $root.onnx.TrainingInfoProto.verify(message.trainingInfo[i]);\n                    if (error)\n                        return \"trainingInfo.\" + error;\n                }\n            }\n            if (message.functions != null && message.hasOwnProperty(\"functions\")) {\n                if (!Array.isArray(message.functions))\n                    return \"functions: array expected\";\n                for (var i = 0; i < message.functions.length; ++i) {\n                    var error = $root.onnx.FunctionProto.verify(message.functions[i]);\n                    if (error)\n                        return \"functions.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ModelProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ModelProto} ModelProto\n         */\n        ModelProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ModelProto)\n                return object;\n            var message = new $root.onnx.ModelProto();\n            if (object.irVersion != null)\n                if ($util.Long)\n                    (message.irVersion = $util.Long.fromValue(object.irVersion)).unsigned = false;\n                else if (typeof object.irVersion === \"string\")\n                    message.irVersion = parseInt(object.irVersion, 10);\n                else if (typeof object.irVersion === \"number\")\n                    message.irVersion = object.irVersion;\n                else if (typeof object.irVersion === \"object\")\n                    message.irVersion = new $util.LongBits(object.irVersion.low >>> 0, object.irVersion.high >>> 0).toNumber();\n            if (object.opsetImport) {\n                if (!Array.isArray(object.opsetImport))\n                    throw TypeError(\".onnx.ModelProto.opsetImport: array expected\");\n                message.opsetImport = [];\n                for (var i = 0; i < object.opsetImport.length; ++i) {\n                    if (typeof object.opsetImport[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.opsetImport: object expected\");\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n                }\n            }\n            if (object.producerName != null)\n                message.producerName = String(object.producerName);\n            if (object.producerVersion != null)\n                message.producerVersion = String(object.producerVersion);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.modelVersion != null)\n                if ($util.Long)\n                    (message.modelVersion = $util.Long.fromValue(object.modelVersion)).unsigned = false;\n                else if (typeof object.modelVersion === \"string\")\n                    message.modelVersion = parseInt(object.modelVersion, 10);\n                else if (typeof object.modelVersion === \"number\")\n                    message.modelVersion = object.modelVersion;\n                else if (typeof object.modelVersion === \"object\")\n                    message.modelVersion = new $util.LongBits(object.modelVersion.low >>> 0, object.modelVersion.high >>> 0).toNumber();\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.graph != null) {\n                if (typeof object.graph !== \"object\")\n                    throw TypeError(\".onnx.ModelProto.graph: object expected\");\n                message.graph = $root.onnx.GraphProto.fromObject(object.graph);\n            }\n            if (object.metadataProps) {\n                if (!Array.isArray(object.metadataProps))\n                    throw TypeError(\".onnx.ModelProto.metadataProps: array expected\");\n                message.metadataProps = [];\n                for (var i = 0; i < object.metadataProps.length; ++i) {\n                    if (typeof object.metadataProps[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.metadataProps: object expected\");\n                    message.metadataProps[i] = $root.onnx.StringStringEntryProto.fromObject(object.metadataProps[i]);\n                }\n            }\n            if (object.trainingInfo) {\n                if (!Array.isArray(object.trainingInfo))\n                    throw TypeError(\".onnx.ModelProto.trainingInfo: array expected\");\n                message.trainingInfo = [];\n                for (var i = 0; i < object.trainingInfo.length; ++i) {\n                    if (typeof object.trainingInfo[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.trainingInfo: object expected\");\n                    message.trainingInfo[i] = $root.onnx.TrainingInfoProto.fromObject(object.trainingInfo[i]);\n                }\n            }\n            if (object.functions) {\n                if (!Array.isArray(object.functions))\n                    throw TypeError(\".onnx.ModelProto.functions: array expected\");\n                message.functions = [];\n                for (var i = 0; i < object.functions.length; ++i) {\n                    if (typeof object.functions[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.functions: object expected\");\n                    message.functions[i] = $root.onnx.FunctionProto.fromObject(object.functions[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ModelProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.ModelProto} message ModelProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ModelProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.opsetImport = [];\n                object.metadataProps = [];\n                object.trainingInfo = [];\n                object.functions = [];\n            }\n            if (options.defaults) {\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.irVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.irVersion = options.longs === String ? \"0\" : 0;\n                object.producerName = \"\";\n                object.producerVersion = \"\";\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.modelVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.modelVersion = options.longs === String ? \"0\" : 0;\n                object.docString = \"\";\n                object.graph = null;\n            }\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (typeof message.irVersion === \"number\")\n                    object.irVersion = options.longs === String ? String(message.irVersion) : message.irVersion;\n                else\n                    object.irVersion = options.longs === String ? $util.Long.prototype.toString.call(message.irVersion) : options.longs === Number ? new $util.LongBits(message.irVersion.low >>> 0, message.irVersion.high >>> 0).toNumber() : message.irVersion;\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                object.producerName = message.producerName;\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                object.producerVersion = message.producerVersion;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (typeof message.modelVersion === \"number\")\n                    object.modelVersion = options.longs === String ? String(message.modelVersion) : message.modelVersion;\n                else\n                    object.modelVersion = options.longs === String ? $util.Long.prototype.toString.call(message.modelVersion) : options.longs === Number ? new $util.LongBits(message.modelVersion.low >>> 0, message.modelVersion.high >>> 0).toNumber() : message.modelVersion;\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                object.graph = $root.onnx.GraphProto.toObject(message.graph, options);\n            if (message.opsetImport && message.opsetImport.length) {\n                object.opsetImport = [];\n                for (var j = 0; j < message.opsetImport.length; ++j)\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n            }\n            if (message.metadataProps && message.metadataProps.length) {\n                object.metadataProps = [];\n                for (var j = 0; j < message.metadataProps.length; ++j)\n                    object.metadataProps[j] = $root.onnx.StringStringEntryProto.toObject(message.metadataProps[j], options);\n            }\n            if (message.trainingInfo && message.trainingInfo.length) {\n                object.trainingInfo = [];\n                for (var j = 0; j < message.trainingInfo.length; ++j)\n                    object.trainingInfo[j] = $root.onnx.TrainingInfoProto.toObject(message.trainingInfo[j], options);\n            }\n            if (message.functions && message.functions.length) {\n                object.functions = [];\n                for (var j = 0; j < message.functions.length; ++j)\n                    object.functions[j] = $root.onnx.FunctionProto.toObject(message.functions[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ModelProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ModelProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ModelProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ModelProto\n         * @function getTypeUrl\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ModelProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.ModelProto\";\n        };\n\n        return ModelProto;\n    })();\n\n    onnx.StringStringEntryProto = (function() {\n\n        /**\n         * Properties of a StringStringEntryProto.\n         * @memberof onnx\n         * @interface IStringStringEntryProto\n         * @property {string|null} [key] StringStringEntryProto key\n         * @property {string|null} [value] StringStringEntryProto value\n         */\n\n        /**\n         * Constructs a new StringStringEntryProto.\n         * @memberof onnx\n         * @classdesc Represents a StringStringEntryProto.\n         * @implements IStringStringEntryProto\n         * @constructor\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         */\n        function StringStringEntryProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * StringStringEntryProto key.\n         * @member {string} key\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.key = \"\";\n\n        /**\n         * StringStringEntryProto value.\n         * @member {string} value\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.value = \"\";\n\n        /**\n         * Creates a new StringStringEntryProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto instance\n         */\n        StringStringEntryProto.create = function create(properties) {\n            return new StringStringEntryProto(properties);\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && Object.hasOwnProperty.call(message, \"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);\n            if (message.value != null && Object.hasOwnProperty.call(message, \"value\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message, length delimited. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.StringStringEntryProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.key = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.value = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a StringStringEntryProto message.\n         * @function verify\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        StringStringEntryProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!$util.isString(message.key))\n                    return \"key: string expected\";\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                if (!$util.isString(message.value))\n                    return \"value: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a StringStringEntryProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         */\n        StringStringEntryProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.StringStringEntryProto)\n                return object;\n            var message = new $root.onnx.StringStringEntryProto();\n            if (object.key != null)\n                message.key = String(object.key);\n            if (object.value != null)\n                message.value = String(object.value);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a StringStringEntryProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.StringStringEntryProto} message StringStringEntryProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        StringStringEntryProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.key = \"\";\n                object.value = \"\";\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = message.key;\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                object.value = message.value;\n            return object;\n        };\n\n        /**\n         * Converts this StringStringEntryProto to JSON.\n         * @function toJSON\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        StringStringEntryProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for StringStringEntryProto\n         * @function getTypeUrl\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        StringStringEntryProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.StringStringEntryProto\";\n        };\n\n        return StringStringEntryProto;\n    })();\n\n    onnx.TensorAnnotation = (function() {\n\n        /**\n         * Properties of a TensorAnnotation.\n         * @memberof onnx\n         * @interface ITensorAnnotation\n         * @property {string|null} [tensorName] TensorAnnotation tensorName\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [quantParameterTensorNames] TensorAnnotation quantParameterTensorNames\n         */\n\n        /**\n         * Constructs a new TensorAnnotation.\n         * @memberof onnx\n         * @classdesc Represents a TensorAnnotation.\n         * @implements ITensorAnnotation\n         * @constructor\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         */\n        function TensorAnnotation(properties) {\n            this.quantParameterTensorNames = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorAnnotation tensorName.\n         * @member {string} tensorName\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.tensorName = \"\";\n\n        /**\n         * TensorAnnotation quantParameterTensorNames.\n         * @member {Array.<onnx.IStringStringEntryProto>} quantParameterTensorNames\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.quantParameterTensorNames = $util.emptyArray;\n\n        /**\n         * Creates a new TensorAnnotation instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         * @returns {onnx.TensorAnnotation} TensorAnnotation instance\n         */\n        TensorAnnotation.create = function create(properties) {\n            return new TensorAnnotation(properties);\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorName != null && Object.hasOwnProperty.call(message, \"tensorName\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.tensorName);\n            if (message.quantParameterTensorNames != null && message.quantParameterTensorNames.length)\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.quantParameterTensorNames[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message, length delimited. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorAnnotation();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.tensorName = reader.string();\n                        break;\n                    }\n                case 2: {\n                        if (!(message.quantParameterTensorNames && message.quantParameterTensorNames.length))\n                            message.quantParameterTensorNames = [];\n                        message.quantParameterTensorNames.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorAnnotation message.\n         * @function verify\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorAnnotation.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                if (!$util.isString(message.tensorName))\n                    return \"tensorName: string expected\";\n            if (message.quantParameterTensorNames != null && message.hasOwnProperty(\"quantParameterTensorNames\")) {\n                if (!Array.isArray(message.quantParameterTensorNames))\n                    return \"quantParameterTensorNames: array expected\";\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.quantParameterTensorNames[i]);\n                    if (error)\n                        return \"quantParameterTensorNames.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorAnnotation message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         */\n        TensorAnnotation.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorAnnotation)\n                return object;\n            var message = new $root.onnx.TensorAnnotation();\n            if (object.tensorName != null)\n                message.tensorName = String(object.tensorName);\n            if (object.quantParameterTensorNames) {\n                if (!Array.isArray(object.quantParameterTensorNames))\n                    throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: array expected\");\n                message.quantParameterTensorNames = [];\n                for (var i = 0; i < object.quantParameterTensorNames.length; ++i) {\n                    if (typeof object.quantParameterTensorNames[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: object expected\");\n                    message.quantParameterTensorNames[i] = $root.onnx.StringStringEntryProto.fromObject(object.quantParameterTensorNames[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorAnnotation message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.TensorAnnotation} message TensorAnnotation\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorAnnotation.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.quantParameterTensorNames = [];\n            if (options.defaults)\n                object.tensorName = \"\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                object.tensorName = message.tensorName;\n            if (message.quantParameterTensorNames && message.quantParameterTensorNames.length) {\n                object.quantParameterTensorNames = [];\n                for (var j = 0; j < message.quantParameterTensorNames.length; ++j)\n                    object.quantParameterTensorNames[j] = $root.onnx.StringStringEntryProto.toObject(message.quantParameterTensorNames[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorAnnotation to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorAnnotation.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TensorAnnotation\n         * @function getTypeUrl\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TensorAnnotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.TensorAnnotation\";\n        };\n\n        return TensorAnnotation;\n    })();\n\n    onnx.GraphProto = (function() {\n\n        /**\n         * Properties of a GraphProto.\n         * @memberof onnx\n         * @interface IGraphProto\n         * @property {Array.<onnx.INodeProto>|null} [node] GraphProto node\n         * @property {string|null} [name] GraphProto name\n         * @property {Array.<onnx.ITensorProto>|null} [initializer] GraphProto initializer\n         * @property {Array.<onnx.ISparseTensorProto>|null} [sparseInitializer] GraphProto sparseInitializer\n         * @property {string|null} [docString] GraphProto docString\n         * @property {Array.<onnx.IValueInfoProto>|null} [input] GraphProto input\n         * @property {Array.<onnx.IValueInfoProto>|null} [output] GraphProto output\n         * @property {Array.<onnx.IValueInfoProto>|null} [valueInfo] GraphProto valueInfo\n         * @property {Array.<onnx.ITensorAnnotation>|null} [quantizationAnnotation] GraphProto quantizationAnnotation\n         */\n\n        /**\n         * Constructs a new GraphProto.\n         * @memberof onnx\n         * @classdesc Represents a GraphProto.\n         * @implements IGraphProto\n         * @constructor\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         */\n        function GraphProto(properties) {\n            this.node = [];\n            this.initializer = [];\n            this.sparseInitializer = [];\n            this.input = [];\n            this.output = [];\n            this.valueInfo = [];\n            this.quantizationAnnotation = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * GraphProto node.\n         * @member {Array.<onnx.INodeProto>} node\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.node = $util.emptyArray;\n\n        /**\n         * GraphProto name.\n         * @member {string} name\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.name = \"\";\n\n        /**\n         * GraphProto initializer.\n         * @member {Array.<onnx.ITensorProto>} initializer\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.initializer = $util.emptyArray;\n\n        /**\n         * GraphProto sparseInitializer.\n         * @member {Array.<onnx.ISparseTensorProto>} sparseInitializer\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.sparseInitializer = $util.emptyArray;\n\n        /**\n         * GraphProto docString.\n         * @member {string} docString\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.docString = \"\";\n\n        /**\n         * GraphProto input.\n         * @member {Array.<onnx.IValueInfoProto>} input\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.input = $util.emptyArray;\n\n        /**\n         * GraphProto output.\n         * @member {Array.<onnx.IValueInfoProto>} output\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.output = $util.emptyArray;\n\n        /**\n         * GraphProto valueInfo.\n         * @member {Array.<onnx.IValueInfoProto>} valueInfo\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.valueInfo = $util.emptyArray;\n\n        /**\n         * GraphProto quantizationAnnotation.\n         * @member {Array.<onnx.ITensorAnnotation>} quantizationAnnotation\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.quantizationAnnotation = $util.emptyArray;\n\n        /**\n         * Creates a new GraphProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         * @returns {onnx.GraphProto} GraphProto instance\n         */\n        GraphProto.create = function create(properties) {\n            return new GraphProto(properties);\n        };\n\n        /**\n         * Encodes the specified GraphProto message. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.node != null && message.node.length)\n                for (var i = 0; i < message.node.length; ++i)\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n            if (message.initializer != null && message.initializer.length)\n                for (var i = 0; i < message.initializer.length; ++i)\n                    $root.onnx.TensorProto.encode(message.initializer[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.docString);\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.input[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.output[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.valueInfo != null && message.valueInfo.length)\n                for (var i = 0; i < message.valueInfo.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.valueInfo[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.quantizationAnnotation != null && message.quantizationAnnotation.length)\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i)\n                    $root.onnx.TensorAnnotation.encode(message.quantizationAnnotation[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            if (message.sparseInitializer != null && message.sparseInitializer.length)\n                for (var i = 0; i < message.sparseInitializer.length; ++i)\n                    $root.onnx.SparseTensorProto.encode(message.sparseInitializer[i], writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified GraphProto message, length delimited. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.GraphProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        if (!(message.node && message.node.length))\n                            message.node = [];\n                        message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 2: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 5: {\n                        if (!(message.initializer && message.initializer.length))\n                            message.initializer = [];\n                        message.initializer.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 15: {\n                        if (!(message.sparseInitializer && message.sparseInitializer.length))\n                            message.sparseInitializer = [];\n                        message.sparseInitializer.push($root.onnx.SparseTensorProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 10: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                case 11: {\n                        if (!(message.input && message.input.length))\n                            message.input = [];\n                        message.input.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 12: {\n                        if (!(message.output && message.output.length))\n                            message.output = [];\n                        message.output.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 13: {\n                        if (!(message.valueInfo && message.valueInfo.length))\n                            message.valueInfo = [];\n                        message.valueInfo.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 14: {\n                        if (!(message.quantizationAnnotation && message.quantizationAnnotation.length))\n                            message.quantizationAnnotation = [];\n                        message.quantizationAnnotation.push($root.onnx.TensorAnnotation.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a GraphProto message.\n         * @function verify\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        GraphProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\n                if (!Array.isArray(message.node))\n                    return \"node: array expected\";\n                for (var i = 0; i < message.node.length; ++i) {\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\n                    if (error)\n                        return \"node.\" + error;\n                }\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.initializer != null && message.hasOwnProperty(\"initializer\")) {\n                if (!Array.isArray(message.initializer))\n                    return \"initializer: array expected\";\n                for (var i = 0; i < message.initializer.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.initializer[i]);\n                    if (error)\n                        return \"initializer.\" + error;\n                }\n            }\n            if (message.sparseInitializer != null && message.hasOwnProperty(\"sparseInitializer\")) {\n                if (!Array.isArray(message.sparseInitializer))\n                    return \"sparseInitializer: array expected\";\n                for (var i = 0; i < message.sparseInitializer.length; ++i) {\n                    var error = $root.onnx.SparseTensorProto.verify(message.sparseInitializer[i]);\n                    if (error)\n                        return \"sparseInitializer.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.input[i]);\n                    if (error)\n                        return \"input.\" + error;\n                }\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.output[i]);\n                    if (error)\n                        return \"output.\" + error;\n                }\n            }\n            if (message.valueInfo != null && message.hasOwnProperty(\"valueInfo\")) {\n                if (!Array.isArray(message.valueInfo))\n                    return \"valueInfo: array expected\";\n                for (var i = 0; i < message.valueInfo.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.valueInfo[i]);\n                    if (error)\n                        return \"valueInfo.\" + error;\n                }\n            }\n            if (message.quantizationAnnotation != null && message.hasOwnProperty(\"quantizationAnnotation\")) {\n                if (!Array.isArray(message.quantizationAnnotation))\n                    return \"quantizationAnnotation: array expected\";\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i) {\n                    var error = $root.onnx.TensorAnnotation.verify(message.quantizationAnnotation[i]);\n                    if (error)\n                        return \"quantizationAnnotation.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a GraphProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.GraphProto} GraphProto\n         */\n        GraphProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.GraphProto)\n                return object;\n            var message = new $root.onnx.GraphProto();\n            if (object.node) {\n                if (!Array.isArray(object.node))\n                    throw TypeError(\".onnx.GraphProto.node: array expected\");\n                message.node = [];\n                for (var i = 0; i < object.node.length; ++i) {\n                    if (typeof object.node[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.node: object expected\");\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n                }\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.initializer) {\n                if (!Array.isArray(object.initializer))\n                    throw TypeError(\".onnx.GraphProto.initializer: array expected\");\n                message.initializer = [];\n                for (var i = 0; i < object.initializer.length; ++i) {\n                    if (typeof object.initializer[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.initializer: object expected\");\n                    message.initializer[i] = $root.onnx.TensorProto.fromObject(object.initializer[i]);\n                }\n            }\n            if (object.sparseInitializer) {\n                if (!Array.isArray(object.sparseInitializer))\n                    throw TypeError(\".onnx.GraphProto.sparseInitializer: array expected\");\n                message.sparseInitializer = [];\n                for (var i = 0; i < object.sparseInitializer.length; ++i) {\n                    if (typeof object.sparseInitializer[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.sparseInitializer: object expected\");\n                    message.sparseInitializer[i] = $root.onnx.SparseTensorProto.fromObject(object.sparseInitializer[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.GraphProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i) {\n                    if (typeof object.input[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.input: object expected\");\n                    message.input[i] = $root.onnx.ValueInfoProto.fromObject(object.input[i]);\n                }\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.GraphProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i) {\n                    if (typeof object.output[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.output: object expected\");\n                    message.output[i] = $root.onnx.ValueInfoProto.fromObject(object.output[i]);\n                }\n            }\n            if (object.valueInfo) {\n                if (!Array.isArray(object.valueInfo))\n                    throw TypeError(\".onnx.GraphProto.valueInfo: array expected\");\n                message.valueInfo = [];\n                for (var i = 0; i < object.valueInfo.length; ++i) {\n                    if (typeof object.valueInfo[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.valueInfo: object expected\");\n                    message.valueInfo[i] = $root.onnx.ValueInfoProto.fromObject(object.valueInfo[i]);\n                }\n            }\n            if (object.quantizationAnnotation) {\n                if (!Array.isArray(object.quantizationAnnotation))\n                    throw TypeError(\".onnx.GraphProto.quantizationAnnotation: array expected\");\n                message.quantizationAnnotation = [];\n                for (var i = 0; i < object.quantizationAnnotation.length; ++i) {\n                    if (typeof object.quantizationAnnotation[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.quantizationAnnotation: object expected\");\n                    message.quantizationAnnotation[i] = $root.onnx.TensorAnnotation.fromObject(object.quantizationAnnotation[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a GraphProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.GraphProto} message GraphProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        GraphProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.node = [];\n                object.initializer = [];\n                object.input = [];\n                object.output = [];\n                object.valueInfo = [];\n                object.quantizationAnnotation = [];\n                object.sparseInitializer = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.docString = \"\";\n            }\n            if (message.node && message.node.length) {\n                object.node = [];\n                for (var j = 0; j < message.node.length; ++j)\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.initializer && message.initializer.length) {\n                object.initializer = [];\n                for (var j = 0; j < message.initializer.length; ++j)\n                    object.initializer[j] = $root.onnx.TensorProto.toObject(message.initializer[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = $root.onnx.ValueInfoProto.toObject(message.input[j], options);\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = $root.onnx.ValueInfoProto.toObject(message.output[j], options);\n            }\n            if (message.valueInfo && message.valueInfo.length) {\n                object.valueInfo = [];\n                for (var j = 0; j < message.valueInfo.length; ++j)\n                    object.valueInfo[j] = $root.onnx.ValueInfoProto.toObject(message.valueInfo[j], options);\n            }\n            if (message.quantizationAnnotation && message.quantizationAnnotation.length) {\n                object.quantizationAnnotation = [];\n                for (var j = 0; j < message.quantizationAnnotation.length; ++j)\n                    object.quantizationAnnotation[j] = $root.onnx.TensorAnnotation.toObject(message.quantizationAnnotation[j], options);\n            }\n            if (message.sparseInitializer && message.sparseInitializer.length) {\n                object.sparseInitializer = [];\n                for (var j = 0; j < message.sparseInitializer.length; ++j)\n                    object.sparseInitializer[j] = $root.onnx.SparseTensorProto.toObject(message.sparseInitializer[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this GraphProto to JSON.\n         * @function toJSON\n         * @memberof onnx.GraphProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        GraphProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for GraphProto\n         * @function getTypeUrl\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        GraphProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.GraphProto\";\n        };\n\n        return GraphProto;\n    })();\n\n    onnx.TensorProto = (function() {\n\n        /**\n         * Properties of a TensorProto.\n         * @memberof onnx\n         * @interface ITensorProto\n         * @property {Array.<number|Long>|null} [dims] TensorProto dims\n         * @property {number|null} [dataType] TensorProto dataType\n         * @property {onnx.TensorProto.ISegment|null} [segment] TensorProto segment\n         * @property {Array.<number>|null} [floatData] TensorProto floatData\n         * @property {Array.<number>|null} [int32Data] TensorProto int32Data\n         * @property {Array.<Uint8Array>|null} [stringData] TensorProto stringData\n         * @property {Array.<number|Long>|null} [int64Data] TensorProto int64Data\n         * @property {string|null} [name] TensorProto name\n         * @property {string|null} [docString] TensorProto docString\n         * @property {Uint8Array|null} [rawData] TensorProto rawData\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [externalData] TensorProto externalData\n         * @property {onnx.TensorProto.DataLocation|null} [dataLocation] TensorProto dataLocation\n         * @property {Array.<number>|null} [doubleData] TensorProto doubleData\n         * @property {Array.<number|Long>|null} [uint64Data] TensorProto uint64Data\n         */\n\n        /**\n         * Constructs a new TensorProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorProto.\n         * @implements ITensorProto\n         * @constructor\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         */\n        function TensorProto(properties) {\n            this.dims = [];\n            this.floatData = [];\n            this.int32Data = [];\n            this.stringData = [];\n            this.int64Data = [];\n            this.externalData = [];\n            this.doubleData = [];\n            this.uint64Data = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorProto dims.\n         * @member {Array.<number|Long>} dims\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dims = $util.emptyArray;\n\n        /**\n         * TensorProto dataType.\n         * @member {number} dataType\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataType = 0;\n\n        /**\n         * TensorProto segment.\n         * @member {onnx.TensorProto.ISegment|null|undefined} segment\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.segment = null;\n\n        /**\n         * TensorProto floatData.\n         * @member {Array.<number>} floatData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.floatData = $util.emptyArray;\n\n        /**\n         * TensorProto int32Data.\n         * @member {Array.<number>} int32Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int32Data = $util.emptyArray;\n\n        /**\n         * TensorProto stringData.\n         * @member {Array.<Uint8Array>} stringData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.stringData = $util.emptyArray;\n\n        /**\n         * TensorProto int64Data.\n         * @member {Array.<number|Long>} int64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int64Data = $util.emptyArray;\n\n        /**\n         * TensorProto name.\n         * @member {string} name\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.name = \"\";\n\n        /**\n         * TensorProto docString.\n         * @member {string} docString\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.docString = \"\";\n\n        /**\n         * TensorProto rawData.\n         * @member {Uint8Array} rawData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.rawData = $util.newBuffer([]);\n\n        /**\n         * TensorProto externalData.\n         * @member {Array.<onnx.IStringStringEntryProto>} externalData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.externalData = $util.emptyArray;\n\n        /**\n         * TensorProto dataLocation.\n         * @member {onnx.TensorProto.DataLocation} dataLocation\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataLocation = 0;\n\n        /**\n         * TensorProto doubleData.\n         * @member {Array.<number>} doubleData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.doubleData = $util.emptyArray;\n\n        /**\n         * TensorProto uint64Data.\n         * @member {Array.<number|Long>} uint64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.uint64Data = $util.emptyArray;\n\n        /**\n         * Creates a new TensorProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         * @returns {onnx.TensorProto} TensorProto instance\n         */\n        TensorProto.create = function create(properties) {\n            return new TensorProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorProto message. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dims != null && message.dims.length) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork();\n                for (var i = 0; i < message.dims.length; ++i)\n                    writer.int64(message.dims[i]);\n                writer.ldelim();\n            }\n            if (message.dataType != null && Object.hasOwnProperty.call(message, \"dataType\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.dataType);\n            if (message.segment != null && Object.hasOwnProperty.call(message, \"segment\"))\n                $root.onnx.TensorProto.Segment.encode(message.segment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.floatData != null && message.floatData.length) {\n                writer.uint32(/* id 4, wireType 2 =*/34).fork();\n                for (var i = 0; i < message.floatData.length; ++i)\n                    writer.float(message.floatData[i]);\n                writer.ldelim();\n            }\n            if (message.int32Data != null && message.int32Data.length) {\n                writer.uint32(/* id 5, wireType 2 =*/42).fork();\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    writer.int32(message.int32Data[i]);\n                writer.ldelim();\n            }\n            if (message.stringData != null && message.stringData.length)\n                for (var i = 0; i < message.stringData.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.stringData[i]);\n            if (message.int64Data != null && message.int64Data.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    writer.int64(message.int64Data[i]);\n                writer.ldelim();\n            }\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.name);\n            if (message.rawData != null && Object.hasOwnProperty.call(message, \"rawData\"))\n                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.rawData);\n            if (message.doubleData != null && message.doubleData.length) {\n                writer.uint32(/* id 10, wireType 2 =*/82).fork();\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    writer.double(message.doubleData[i]);\n                writer.ldelim();\n            }\n            if (message.uint64Data != null && message.uint64Data.length) {\n                writer.uint32(/* id 11, wireType 2 =*/90).fork();\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    writer.uint64(message.uint64Data[i]);\n                writer.ldelim();\n            }\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 12, wireType 2 =*/98).string(message.docString);\n            if (message.externalData != null && message.externalData.length)\n                for (var i = 0; i < message.externalData.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.externalData[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.dataLocation != null && Object.hasOwnProperty.call(message, \"dataLocation\"))\n                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.dataLocation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorProto message, length delimited. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        if (!(message.dims && message.dims.length))\n                            message.dims = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.dims.push(reader.int64());\n                        } else\n                            message.dims.push(reader.int64());\n                        break;\n                    }\n                case 2: {\n                        message.dataType = reader.int32();\n                        break;\n                    }\n                case 3: {\n                        message.segment = $root.onnx.TensorProto.Segment.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 4: {\n                        if (!(message.floatData && message.floatData.length))\n                            message.floatData = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.floatData.push(reader.float());\n                        } else\n                            message.floatData.push(reader.float());\n                        break;\n                    }\n                case 5: {\n                        if (!(message.int32Data && message.int32Data.length))\n                            message.int32Data = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.int32Data.push(reader.int32());\n                        } else\n                            message.int32Data.push(reader.int32());\n                        break;\n                    }\n                case 6: {\n                        if (!(message.stringData && message.stringData.length))\n                            message.stringData = [];\n                        message.stringData.push(reader.bytes());\n                        break;\n                    }\n                case 7: {\n                        if (!(message.int64Data && message.int64Data.length))\n                            message.int64Data = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.int64Data.push(reader.int64());\n                        } else\n                            message.int64Data.push(reader.int64());\n                        break;\n                    }\n                case 8: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 12: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                case 9: {\n                        message.rawData = reader.bytes();\n                        break;\n                    }\n                case 13: {\n                        if (!(message.externalData && message.externalData.length))\n                            message.externalData = [];\n                        message.externalData.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 14: {\n                        message.dataLocation = reader.int32();\n                        break;\n                    }\n                case 10: {\n                        if (!(message.doubleData && message.doubleData.length))\n                            message.doubleData = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.doubleData.push(reader.double());\n                        } else\n                            message.doubleData.push(reader.double());\n                        break;\n                    }\n                case 11: {\n                        if (!(message.uint64Data && message.uint64Data.length))\n                            message.uint64Data = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.uint64Data.push(reader.uint64());\n                        } else\n                            message.uint64Data.push(reader.uint64());\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorProto message.\n         * @function verify\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                if (!Array.isArray(message.dims))\n                    return \"dims: array expected\";\n                for (var i = 0; i < message.dims.length; ++i)\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\n                        return \"dims: integer|Long[] expected\";\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                if (!$util.isInteger(message.dataType))\n                    return \"dataType: integer expected\";\n            if (message.segment != null && message.hasOwnProperty(\"segment\")) {\n                var error = $root.onnx.TensorProto.Segment.verify(message.segment);\n                if (error)\n                    return \"segment.\" + error;\n            }\n            if (message.floatData != null && message.hasOwnProperty(\"floatData\")) {\n                if (!Array.isArray(message.floatData))\n                    return \"floatData: array expected\";\n                for (var i = 0; i < message.floatData.length; ++i)\n                    if (typeof message.floatData[i] !== \"number\")\n                        return \"floatData: number[] expected\";\n            }\n            if (message.int32Data != null && message.hasOwnProperty(\"int32Data\")) {\n                if (!Array.isArray(message.int32Data))\n                    return \"int32Data: array expected\";\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    if (!$util.isInteger(message.int32Data[i]))\n                        return \"int32Data: integer[] expected\";\n            }\n            if (message.stringData != null && message.hasOwnProperty(\"stringData\")) {\n                if (!Array.isArray(message.stringData))\n                    return \"stringData: array expected\";\n                for (var i = 0; i < message.stringData.length; ++i)\n                    if (!(message.stringData[i] && typeof message.stringData[i].length === \"number\" || $util.isString(message.stringData[i])))\n                        return \"stringData: buffer[] expected\";\n            }\n            if (message.int64Data != null && message.hasOwnProperty(\"int64Data\")) {\n                if (!Array.isArray(message.int64Data))\n                    return \"int64Data: array expected\";\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    if (!$util.isInteger(message.int64Data[i]) && !(message.int64Data[i] && $util.isInteger(message.int64Data[i].low) && $util.isInteger(message.int64Data[i].high)))\n                        return \"int64Data: integer|Long[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                if (!(message.rawData && typeof message.rawData.length === \"number\" || $util.isString(message.rawData)))\n                    return \"rawData: buffer expected\";\n            if (message.externalData != null && message.hasOwnProperty(\"externalData\")) {\n                if (!Array.isArray(message.externalData))\n                    return \"externalData: array expected\";\n                for (var i = 0; i < message.externalData.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.externalData[i]);\n                    if (error)\n                        return \"externalData.\" + error;\n                }\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                switch (message.dataLocation) {\n                default:\n                    return \"dataLocation: enum value expected\";\n                case 0:\n                case 1:\n                    break;\n                }\n            if (message.doubleData != null && message.hasOwnProperty(\"doubleData\")) {\n                if (!Array.isArray(message.doubleData))\n                    return \"doubleData: array expected\";\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    if (typeof message.doubleData[i] !== \"number\")\n                        return \"doubleData: number[] expected\";\n            }\n            if (message.uint64Data != null && message.hasOwnProperty(\"uint64Data\")) {\n                if (!Array.isArray(message.uint64Data))\n                    return \"uint64Data: array expected\";\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    if (!$util.isInteger(message.uint64Data[i]) && !(message.uint64Data[i] && $util.isInteger(message.uint64Data[i].low) && $util.isInteger(message.uint64Data[i].high)))\n                        return \"uint64Data: integer|Long[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorProto} TensorProto\n         */\n        TensorProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorProto)\n                return object;\n            var message = new $root.onnx.TensorProto();\n            if (object.dims) {\n                if (!Array.isArray(object.dims))\n                    throw TypeError(\".onnx.TensorProto.dims: array expected\");\n                message.dims = [];\n                for (var i = 0; i < object.dims.length; ++i)\n                    if ($util.Long)\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n                    else if (typeof object.dims[i] === \"string\")\n                        message.dims[i] = parseInt(object.dims[i], 10);\n                    else if (typeof object.dims[i] === \"number\")\n                        message.dims[i] = object.dims[i];\n                    else if (typeof object.dims[i] === \"object\")\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n            }\n            if (object.dataType != null)\n                message.dataType = object.dataType | 0;\n            if (object.segment != null) {\n                if (typeof object.segment !== \"object\")\n                    throw TypeError(\".onnx.TensorProto.segment: object expected\");\n                message.segment = $root.onnx.TensorProto.Segment.fromObject(object.segment);\n            }\n            if (object.floatData) {\n                if (!Array.isArray(object.floatData))\n                    throw TypeError(\".onnx.TensorProto.floatData: array expected\");\n                message.floatData = [];\n                for (var i = 0; i < object.floatData.length; ++i)\n                    message.floatData[i] = Number(object.floatData[i]);\n            }\n            if (object.int32Data) {\n                if (!Array.isArray(object.int32Data))\n                    throw TypeError(\".onnx.TensorProto.int32Data: array expected\");\n                message.int32Data = [];\n                for (var i = 0; i < object.int32Data.length; ++i)\n                    message.int32Data[i] = object.int32Data[i] | 0;\n            }\n            if (object.stringData) {\n                if (!Array.isArray(object.stringData))\n                    throw TypeError(\".onnx.TensorProto.stringData: array expected\");\n                message.stringData = [];\n                for (var i = 0; i < object.stringData.length; ++i)\n                    if (typeof object.stringData[i] === \"string\")\n                        $util.base64.decode(object.stringData[i], message.stringData[i] = $util.newBuffer($util.base64.length(object.stringData[i])), 0);\n                    else if (object.stringData[i].length >= 0)\n                        message.stringData[i] = object.stringData[i];\n            }\n            if (object.int64Data) {\n                if (!Array.isArray(object.int64Data))\n                    throw TypeError(\".onnx.TensorProto.int64Data: array expected\");\n                message.int64Data = [];\n                for (var i = 0; i < object.int64Data.length; ++i)\n                    if ($util.Long)\n                        (message.int64Data[i] = $util.Long.fromValue(object.int64Data[i])).unsigned = false;\n                    else if (typeof object.int64Data[i] === \"string\")\n                        message.int64Data[i] = parseInt(object.int64Data[i], 10);\n                    else if (typeof object.int64Data[i] === \"number\")\n                        message.int64Data[i] = object.int64Data[i];\n                    else if (typeof object.int64Data[i] === \"object\")\n                        message.int64Data[i] = new $util.LongBits(object.int64Data[i].low >>> 0, object.int64Data[i].high >>> 0).toNumber();\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.rawData != null)\n                if (typeof object.rawData === \"string\")\n                    $util.base64.decode(object.rawData, message.rawData = $util.newBuffer($util.base64.length(object.rawData)), 0);\n                else if (object.rawData.length >= 0)\n                    message.rawData = object.rawData;\n            if (object.externalData) {\n                if (!Array.isArray(object.externalData))\n                    throw TypeError(\".onnx.TensorProto.externalData: array expected\");\n                message.externalData = [];\n                for (var i = 0; i < object.externalData.length; ++i) {\n                    if (typeof object.externalData[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorProto.externalData: object expected\");\n                    message.externalData[i] = $root.onnx.StringStringEntryProto.fromObject(object.externalData[i]);\n                }\n            }\n            switch (object.dataLocation) {\n            default:\n                if (typeof object.dataLocation === \"number\") {\n                    message.dataLocation = object.dataLocation;\n                    break;\n                }\n                break;\n            case \"DEFAULT\":\n            case 0:\n                message.dataLocation = 0;\n                break;\n            case \"EXTERNAL\":\n            case 1:\n                message.dataLocation = 1;\n                break;\n            }\n            if (object.doubleData) {\n                if (!Array.isArray(object.doubleData))\n                    throw TypeError(\".onnx.TensorProto.doubleData: array expected\");\n                message.doubleData = [];\n                for (var i = 0; i < object.doubleData.length; ++i)\n                    message.doubleData[i] = Number(object.doubleData[i]);\n            }\n            if (object.uint64Data) {\n                if (!Array.isArray(object.uint64Data))\n                    throw TypeError(\".onnx.TensorProto.uint64Data: array expected\");\n                message.uint64Data = [];\n                for (var i = 0; i < object.uint64Data.length; ++i)\n                    if ($util.Long)\n                        (message.uint64Data[i] = $util.Long.fromValue(object.uint64Data[i])).unsigned = true;\n                    else if (typeof object.uint64Data[i] === \"string\")\n                        message.uint64Data[i] = parseInt(object.uint64Data[i], 10);\n                    else if (typeof object.uint64Data[i] === \"number\")\n                        message.uint64Data[i] = object.uint64Data[i];\n                    else if (typeof object.uint64Data[i] === \"object\")\n                        message.uint64Data[i] = new $util.LongBits(object.uint64Data[i].low >>> 0, object.uint64Data[i].high >>> 0).toNumber(true);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.TensorProto} message TensorProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.dims = [];\n                object.floatData = [];\n                object.int32Data = [];\n                object.stringData = [];\n                object.int64Data = [];\n                object.doubleData = [];\n                object.uint64Data = [];\n                object.externalData = [];\n            }\n            if (options.defaults) {\n                object.dataType = 0;\n                object.segment = null;\n                object.name = \"\";\n                if (options.bytes === String)\n                    object.rawData = \"\";\n                else {\n                    object.rawData = [];\n                    if (options.bytes !== Array)\n                        object.rawData = $util.newBuffer(object.rawData);\n                }\n                object.docString = \"\";\n                object.dataLocation = options.enums === String ? \"DEFAULT\" : 0;\n            }\n            if (message.dims && message.dims.length) {\n                object.dims = [];\n                for (var j = 0; j < message.dims.length; ++j)\n                    if (typeof message.dims[j] === \"number\")\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n                    else\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                object.dataType = message.dataType;\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                object.segment = $root.onnx.TensorProto.Segment.toObject(message.segment, options);\n            if (message.floatData && message.floatData.length) {\n                object.floatData = [];\n                for (var j = 0; j < message.floatData.length; ++j)\n                    object.floatData[j] = options.json && !isFinite(message.floatData[j]) ? String(message.floatData[j]) : message.floatData[j];\n            }\n            if (message.int32Data && message.int32Data.length) {\n                object.int32Data = [];\n                for (var j = 0; j < message.int32Data.length; ++j)\n                    object.int32Data[j] = message.int32Data[j];\n            }\n            if (message.stringData && message.stringData.length) {\n                object.stringData = [];\n                for (var j = 0; j < message.stringData.length; ++j)\n                    object.stringData[j] = options.bytes === String ? $util.base64.encode(message.stringData[j], 0, message.stringData[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.stringData[j]) : message.stringData[j];\n            }\n            if (message.int64Data && message.int64Data.length) {\n                object.int64Data = [];\n                for (var j = 0; j < message.int64Data.length; ++j)\n                    if (typeof message.int64Data[j] === \"number\")\n                        object.int64Data[j] = options.longs === String ? String(message.int64Data[j]) : message.int64Data[j];\n                    else\n                        object.int64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.int64Data[j]) : options.longs === Number ? new $util.LongBits(message.int64Data[j].low >>> 0, message.int64Data[j].high >>> 0).toNumber() : message.int64Data[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                object.rawData = options.bytes === String ? $util.base64.encode(message.rawData, 0, message.rawData.length) : options.bytes === Array ? Array.prototype.slice.call(message.rawData) : message.rawData;\n            if (message.doubleData && message.doubleData.length) {\n                object.doubleData = [];\n                for (var j = 0; j < message.doubleData.length; ++j)\n                    object.doubleData[j] = options.json && !isFinite(message.doubleData[j]) ? String(message.doubleData[j]) : message.doubleData[j];\n            }\n            if (message.uint64Data && message.uint64Data.length) {\n                object.uint64Data = [];\n                for (var j = 0; j < message.uint64Data.length; ++j)\n                    if (typeof message.uint64Data[j] === \"number\")\n                        object.uint64Data[j] = options.longs === String ? String(message.uint64Data[j]) : message.uint64Data[j];\n                    else\n                        object.uint64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.uint64Data[j]) : options.longs === Number ? new $util.LongBits(message.uint64Data[j].low >>> 0, message.uint64Data[j].high >>> 0).toNumber(true) : message.uint64Data[j];\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.externalData && message.externalData.length) {\n                object.externalData = [];\n                for (var j = 0; j < message.externalData.length; ++j)\n                    object.externalData[j] = $root.onnx.StringStringEntryProto.toObject(message.externalData[j], options);\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                object.dataLocation = options.enums === String ? $root.onnx.TensorProto.DataLocation[message.dataLocation] === undefined ? message.dataLocation : $root.onnx.TensorProto.DataLocation[message.dataLocation] : message.dataLocation;\n            return object;\n        };\n\n        /**\n         * Converts this TensorProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TensorProto\n         * @function getTypeUrl\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TensorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.TensorProto\";\n        };\n\n        /**\n         * DataType enum.\n         * @name onnx.TensorProto.DataType\n         * @enum {number}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} UINT8=2 UINT8 value\n         * @property {number} INT8=3 INT8 value\n         * @property {number} UINT16=4 UINT16 value\n         * @property {number} INT16=5 INT16 value\n         * @property {number} INT32=6 INT32 value\n         * @property {number} INT64=7 INT64 value\n         * @property {number} STRING=8 STRING value\n         * @property {number} BOOL=9 BOOL value\n         * @property {number} FLOAT16=10 FLOAT16 value\n         * @property {number} DOUBLE=11 DOUBLE value\n         * @property {number} UINT32=12 UINT32 value\n         * @property {number} UINT64=13 UINT64 value\n         * @property {number} COMPLEX64=14 COMPLEX64 value\n         * @property {number} COMPLEX128=15 COMPLEX128 value\n         * @property {number} BFLOAT16=16 BFLOAT16 value\n         * @property {number} FLOAT8E4M3FN=17 FLOAT8E4M3FN value\n         * @property {number} FLOAT8E4M3FNUZ=18 FLOAT8E4M3FNUZ value\n         * @property {number} FLOAT8E5M2=19 FLOAT8E5M2 value\n         * @property {number} FLOAT8E5M2FNUZ=20 FLOAT8E5M2FNUZ value\n         */\n        TensorProto.DataType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"UINT8\"] = 2;\n            values[valuesById[3] = \"INT8\"] = 3;\n            values[valuesById[4] = \"UINT16\"] = 4;\n            values[valuesById[5] = \"INT16\"] = 5;\n            values[valuesById[6] = \"INT32\"] = 6;\n            values[valuesById[7] = \"INT64\"] = 7;\n            values[valuesById[8] = \"STRING\"] = 8;\n            values[valuesById[9] = \"BOOL\"] = 9;\n            values[valuesById[10] = \"FLOAT16\"] = 10;\n            values[valuesById[11] = \"DOUBLE\"] = 11;\n            values[valuesById[12] = \"UINT32\"] = 12;\n            values[valuesById[13] = \"UINT64\"] = 13;\n            values[valuesById[14] = \"COMPLEX64\"] = 14;\n            values[valuesById[15] = \"COMPLEX128\"] = 15;\n            values[valuesById[16] = \"BFLOAT16\"] = 16;\n            values[valuesById[17] = \"FLOAT8E4M3FN\"] = 17;\n            values[valuesById[18] = \"FLOAT8E4M3FNUZ\"] = 18;\n            values[valuesById[19] = \"FLOAT8E5M2\"] = 19;\n            values[valuesById[20] = \"FLOAT8E5M2FNUZ\"] = 20;\n            return values;\n        })();\n\n        TensorProto.Segment = (function() {\n\n            /**\n             * Properties of a Segment.\n             * @memberof onnx.TensorProto\n             * @interface ISegment\n             * @property {number|Long|null} [begin] Segment begin\n             * @property {number|Long|null} [end] Segment end\n             */\n\n            /**\n             * Constructs a new Segment.\n             * @memberof onnx.TensorProto\n             * @classdesc Represents a Segment.\n             * @implements ISegment\n             * @constructor\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             */\n            function Segment(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Segment begin.\n             * @member {number|Long} begin\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.begin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Segment end.\n             * @member {number|Long} end\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.end = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Creates a new Segment instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             * @returns {onnx.TensorProto.Segment} Segment instance\n             */\n            Segment.create = function create(properties) {\n                return new Segment(properties);\n            };\n\n            /**\n             * Encodes the specified Segment message. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.begin != null && Object.hasOwnProperty.call(message, \"begin\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.begin);\n                if (message.end != null && Object.hasOwnProperty.call(message, \"end\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.end);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Segment message, length delimited. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto.Segment();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.begin = reader.int64();\n                            break;\n                        }\n                    case 2: {\n                            message.end = reader.int64();\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Segment message.\n             * @function verify\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Segment.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (!$util.isInteger(message.begin) && !(message.begin && $util.isInteger(message.begin.low) && $util.isInteger(message.begin.high)))\n                        return \"begin: integer|Long expected\";\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (!$util.isInteger(message.end) && !(message.end && $util.isInteger(message.end.low) && $util.isInteger(message.end.high)))\n                        return \"end: integer|Long expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Segment message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorProto.Segment} Segment\n             */\n            Segment.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorProto.Segment)\n                    return object;\n                var message = new $root.onnx.TensorProto.Segment();\n                if (object.begin != null)\n                    if ($util.Long)\n                        (message.begin = $util.Long.fromValue(object.begin)).unsigned = false;\n                    else if (typeof object.begin === \"string\")\n                        message.begin = parseInt(object.begin, 10);\n                    else if (typeof object.begin === \"number\")\n                        message.begin = object.begin;\n                    else if (typeof object.begin === \"object\")\n                        message.begin = new $util.LongBits(object.begin.low >>> 0, object.begin.high >>> 0).toNumber();\n                if (object.end != null)\n                    if ($util.Long)\n                        (message.end = $util.Long.fromValue(object.end)).unsigned = false;\n                    else if (typeof object.end === \"string\")\n                        message.end = parseInt(object.end, 10);\n                    else if (typeof object.end === \"number\")\n                        message.end = object.end;\n                    else if (typeof object.end === \"object\")\n                        message.end = new $util.LongBits(object.end.low >>> 0, object.end.high >>> 0).toNumber();\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Segment message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.Segment} message Segment\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Segment.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.begin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.begin = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.end = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.end = options.longs === String ? \"0\" : 0;\n                }\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (typeof message.begin === \"number\")\n                        object.begin = options.longs === String ? String(message.begin) : message.begin;\n                    else\n                        object.begin = options.longs === String ? $util.Long.prototype.toString.call(message.begin) : options.longs === Number ? new $util.LongBits(message.begin.low >>> 0, message.begin.high >>> 0).toNumber() : message.begin;\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (typeof message.end === \"number\")\n                        object.end = options.longs === String ? String(message.end) : message.end;\n                    else\n                        object.end = options.longs === String ? $util.Long.prototype.toString.call(message.end) : options.longs === Number ? new $util.LongBits(message.end.low >>> 0, message.end.high >>> 0).toNumber() : message.end;\n                return object;\n            };\n\n            /**\n             * Converts this Segment to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Segment.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Segment\n             * @function getTypeUrl\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Segment.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TensorProto.Segment\";\n            };\n\n            return Segment;\n        })();\n\n        /**\n         * DataLocation enum.\n         * @name onnx.TensorProto.DataLocation\n         * @enum {number}\n         * @property {number} DEFAULT=0 DEFAULT value\n         * @property {number} EXTERNAL=1 EXTERNAL value\n         */\n        TensorProto.DataLocation = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"DEFAULT\"] = 0;\n            values[valuesById[1] = \"EXTERNAL\"] = 1;\n            return values;\n        })();\n\n        return TensorProto;\n    })();\n\n    onnx.SparseTensorProto = (function() {\n\n        /**\n         * Properties of a SparseTensorProto.\n         * @memberof onnx\n         * @interface ISparseTensorProto\n         * @property {onnx.ITensorProto|null} [values] SparseTensorProto values\n         * @property {onnx.ITensorProto|null} [indices] SparseTensorProto indices\n         * @property {Array.<number|Long>|null} [dims] SparseTensorProto dims\n         */\n\n        /**\n         * Constructs a new SparseTensorProto.\n         * @memberof onnx\n         * @classdesc Represents a SparseTensorProto.\n         * @implements ISparseTensorProto\n         * @constructor\n         * @param {onnx.ISparseTensorProto=} [properties] Properties to set\n         */\n        function SparseTensorProto(properties) {\n            this.dims = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * SparseTensorProto values.\n         * @member {onnx.ITensorProto|null|undefined} values\n         * @memberof onnx.SparseTensorProto\n         * @instance\n         */\n        SparseTensorProto.prototype.values = null;\n\n        /**\n         * SparseTensorProto indices.\n         * @member {onnx.ITensorProto|null|undefined} indices\n         * @memberof onnx.SparseTensorProto\n         * @instance\n         */\n        SparseTensorProto.prototype.indices = null;\n\n        /**\n         * SparseTensorProto dims.\n         * @member {Array.<number|Long>} dims\n         * @memberof onnx.SparseTensorProto\n         * @instance\n         */\n        SparseTensorProto.prototype.dims = $util.emptyArray;\n\n        /**\n         * Creates a new SparseTensorProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {onnx.ISparseTensorProto=} [properties] Properties to set\n         * @returns {onnx.SparseTensorProto} SparseTensorProto instance\n         */\n        SparseTensorProto.create = function create(properties) {\n            return new SparseTensorProto(properties);\n        };\n\n        /**\n         * Encodes the specified SparseTensorProto message. Does not implicitly {@link onnx.SparseTensorProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {onnx.ISparseTensorProto} message SparseTensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SparseTensorProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.values != null && Object.hasOwnProperty.call(message, \"values\"))\n                $root.onnx.TensorProto.encode(message.values, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.indices != null && Object.hasOwnProperty.call(message, \"indices\"))\n                $root.onnx.TensorProto.encode(message.indices, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.dims != null && message.dims.length) {\n                writer.uint32(/* id 3, wireType 2 =*/26).fork();\n                for (var i = 0; i < message.dims.length; ++i)\n                    writer.int64(message.dims[i]);\n                writer.ldelim();\n            }\n            return writer;\n        };\n\n        /**\n         * Encodes the specified SparseTensorProto message, length delimited. Does not implicitly {@link onnx.SparseTensorProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {onnx.ISparseTensorProto} message SparseTensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SparseTensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a SparseTensorProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.SparseTensorProto} SparseTensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SparseTensorProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.SparseTensorProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.values = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 2: {\n                        message.indices = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 3: {\n                        if (!(message.dims && message.dims.length))\n                            message.dims = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.dims.push(reader.int64());\n                        } else\n                            message.dims.push(reader.int64());\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a SparseTensorProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.SparseTensorProto} SparseTensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SparseTensorProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a SparseTensorProto message.\n         * @function verify\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        SparseTensorProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.values != null && message.hasOwnProperty(\"values\")) {\n                var error = $root.onnx.TensorProto.verify(message.values);\n                if (error)\n                    return \"values.\" + error;\n            }\n            if (message.indices != null && message.hasOwnProperty(\"indices\")) {\n                var error = $root.onnx.TensorProto.verify(message.indices);\n                if (error)\n                    return \"indices.\" + error;\n            }\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                if (!Array.isArray(message.dims))\n                    return \"dims: array expected\";\n                for (var i = 0; i < message.dims.length; ++i)\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\n                        return \"dims: integer|Long[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a SparseTensorProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.SparseTensorProto} SparseTensorProto\n         */\n        SparseTensorProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.SparseTensorProto)\n                return object;\n            var message = new $root.onnx.SparseTensorProto();\n            if (object.values != null) {\n                if (typeof object.values !== \"object\")\n                    throw TypeError(\".onnx.SparseTensorProto.values: object expected\");\n                message.values = $root.onnx.TensorProto.fromObject(object.values);\n            }\n            if (object.indices != null) {\n                if (typeof object.indices !== \"object\")\n                    throw TypeError(\".onnx.SparseTensorProto.indices: object expected\");\n                message.indices = $root.onnx.TensorProto.fromObject(object.indices);\n            }\n            if (object.dims) {\n                if (!Array.isArray(object.dims))\n                    throw TypeError(\".onnx.SparseTensorProto.dims: array expected\");\n                message.dims = [];\n                for (var i = 0; i < object.dims.length; ++i)\n                    if ($util.Long)\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n                    else if (typeof object.dims[i] === \"string\")\n                        message.dims[i] = parseInt(object.dims[i], 10);\n                    else if (typeof object.dims[i] === \"number\")\n                        message.dims[i] = object.dims[i];\n                    else if (typeof object.dims[i] === \"object\")\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a SparseTensorProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {onnx.SparseTensorProto} message SparseTensorProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        SparseTensorProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.dims = [];\n            if (options.defaults) {\n                object.values = null;\n                object.indices = null;\n            }\n            if (message.values != null && message.hasOwnProperty(\"values\"))\n                object.values = $root.onnx.TensorProto.toObject(message.values, options);\n            if (message.indices != null && message.hasOwnProperty(\"indices\"))\n                object.indices = $root.onnx.TensorProto.toObject(message.indices, options);\n            if (message.dims && message.dims.length) {\n                object.dims = [];\n                for (var j = 0; j < message.dims.length; ++j)\n                    if (typeof message.dims[j] === \"number\")\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n                    else\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\n            }\n            return object;\n        };\n\n        /**\n         * Converts this SparseTensorProto to JSON.\n         * @function toJSON\n         * @memberof onnx.SparseTensorProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        SparseTensorProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for SparseTensorProto\n         * @function getTypeUrl\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        SparseTensorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.SparseTensorProto\";\n        };\n\n        return SparseTensorProto;\n    })();\n\n    onnx.TensorShapeProto = (function() {\n\n        /**\n         * Properties of a TensorShapeProto.\n         * @memberof onnx\n         * @interface ITensorShapeProto\n         * @property {Array.<onnx.TensorShapeProto.IDimension>|null} [dim] TensorShapeProto dim\n         */\n\n        /**\n         * Constructs a new TensorShapeProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorShapeProto.\n         * @implements ITensorShapeProto\n         * @constructor\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         */\n        function TensorShapeProto(properties) {\n            this.dim = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorShapeProto dim.\n         * @member {Array.<onnx.TensorShapeProto.IDimension>} dim\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         */\n        TensorShapeProto.prototype.dim = $util.emptyArray;\n\n        /**\n         * Creates a new TensorShapeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         * @returns {onnx.TensorShapeProto} TensorShapeProto instance\n         */\n        TensorShapeProto.create = function create(properties) {\n            return new TensorShapeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dim != null && message.dim.length)\n                for (var i = 0; i < message.dim.length; ++i)\n                    $root.onnx.TensorShapeProto.Dimension.encode(message.dim[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        if (!(message.dim && message.dim.length))\n                            message.dim = [];\n                        message.dim.push($root.onnx.TensorShapeProto.Dimension.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorShapeProto message.\n         * @function verify\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorShapeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dim != null && message.hasOwnProperty(\"dim\")) {\n                if (!Array.isArray(message.dim))\n                    return \"dim: array expected\";\n                for (var i = 0; i < message.dim.length; ++i) {\n                    var error = $root.onnx.TensorShapeProto.Dimension.verify(message.dim[i]);\n                    if (error)\n                        return \"dim.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorShapeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         */\n        TensorShapeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorShapeProto)\n                return object;\n            var message = new $root.onnx.TensorShapeProto();\n            if (object.dim) {\n                if (!Array.isArray(object.dim))\n                    throw TypeError(\".onnx.TensorShapeProto.dim: array expected\");\n                message.dim = [];\n                for (var i = 0; i < object.dim.length; ++i) {\n                    if (typeof object.dim[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorShapeProto.dim: object expected\");\n                    message.dim[i] = $root.onnx.TensorShapeProto.Dimension.fromObject(object.dim[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorShapeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.TensorShapeProto} message TensorShapeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorShapeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.dim = [];\n            if (message.dim && message.dim.length) {\n                object.dim = [];\n                for (var j = 0; j < message.dim.length; ++j)\n                    object.dim[j] = $root.onnx.TensorShapeProto.Dimension.toObject(message.dim[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorShapeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorShapeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TensorShapeProto\n         * @function getTypeUrl\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TensorShapeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.TensorShapeProto\";\n        };\n\n        TensorShapeProto.Dimension = (function() {\n\n            /**\n             * Properties of a Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @interface IDimension\n             * @property {number|Long|null} [dimValue] Dimension dimValue\n             * @property {string|null} [dimParam] Dimension dimParam\n             * @property {string|null} [denotation] Dimension denotation\n             */\n\n            /**\n             * Constructs a new Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @classdesc Represents a Dimension.\n             * @implements IDimension\n             * @constructor\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             */\n            function Dimension(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Dimension dimValue.\n             * @member {number|Long|null|undefined} dimValue\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimValue = null;\n\n            /**\n             * Dimension dimParam.\n             * @member {string|null|undefined} dimParam\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimParam = null;\n\n            /**\n             * Dimension denotation.\n             * @member {string} denotation\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.denotation = \"\";\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * Dimension value.\n             * @member {\"dimValue\"|\"dimParam\"|undefined} value\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Object.defineProperty(Dimension.prototype, \"value\", {\n                get: $util.oneOfGetter($oneOfFields = [\"dimValue\", \"dimParam\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new Dimension instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension instance\n             */\n            Dimension.create = function create(properties) {\n                return new Dimension(properties);\n            };\n\n            /**\n             * Encodes the specified Dimension message. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.dimValue != null && Object.hasOwnProperty.call(message, \"dimValue\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.dimValue);\n                if (message.dimParam != null && Object.hasOwnProperty.call(message, \"dimParam\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.dimParam);\n                if (message.denotation != null && Object.hasOwnProperty.call(message, \"denotation\"))\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.denotation);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Dimension message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto.Dimension();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.dimValue = reader.int64();\n                            break;\n                        }\n                    case 2: {\n                            message.dimParam = reader.string();\n                            break;\n                        }\n                    case 3: {\n                            message.denotation = reader.string();\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Dimension message.\n             * @function verify\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Dimension.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    properties.value = 1;\n                    if (!$util.isInteger(message.dimValue) && !(message.dimValue && $util.isInteger(message.dimValue.low) && $util.isInteger(message.dimValue.high)))\n                        return \"dimValue: integer|Long expected\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    if (properties.value === 1)\n                        return \"value: multiple values\";\n                    properties.value = 1;\n                    if (!$util.isString(message.dimParam))\n                        return \"dimParam: string expected\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    if (!$util.isString(message.denotation))\n                        return \"denotation: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Dimension message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             */\n            Dimension.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorShapeProto.Dimension)\n                    return object;\n                var message = new $root.onnx.TensorShapeProto.Dimension();\n                if (object.dimValue != null)\n                    if ($util.Long)\n                        (message.dimValue = $util.Long.fromValue(object.dimValue)).unsigned = false;\n                    else if (typeof object.dimValue === \"string\")\n                        message.dimValue = parseInt(object.dimValue, 10);\n                    else if (typeof object.dimValue === \"number\")\n                        message.dimValue = object.dimValue;\n                    else if (typeof object.dimValue === \"object\")\n                        message.dimValue = new $util.LongBits(object.dimValue.low >>> 0, object.dimValue.high >>> 0).toNumber();\n                if (object.dimParam != null)\n                    message.dimParam = String(object.dimParam);\n                if (object.denotation != null)\n                    message.denotation = String(object.denotation);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Dimension message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.Dimension} message Dimension\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Dimension.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.denotation = \"\";\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    if (typeof message.dimValue === \"number\")\n                        object.dimValue = options.longs === String ? String(message.dimValue) : message.dimValue;\n                    else\n                        object.dimValue = options.longs === String ? $util.Long.prototype.toString.call(message.dimValue) : options.longs === Number ? new $util.LongBits(message.dimValue.low >>> 0, message.dimValue.high >>> 0).toNumber() : message.dimValue;\n                    if (options.oneofs)\n                        object.value = \"dimValue\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    object.dimParam = message.dimParam;\n                    if (options.oneofs)\n                        object.value = \"dimParam\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    object.denotation = message.denotation;\n                return object;\n            };\n\n            /**\n             * Converts this Dimension to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Dimension.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Dimension\n             * @function getTypeUrl\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Dimension.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TensorShapeProto.Dimension\";\n            };\n\n            return Dimension;\n        })();\n\n        return TensorShapeProto;\n    })();\n\n    onnx.TypeProto = (function() {\n\n        /**\n         * Properties of a TypeProto.\n         * @memberof onnx\n         * @interface ITypeProto\n         * @property {onnx.TypeProto.ITensor|null} [tensorType] TypeProto tensorType\n         * @property {onnx.TypeProto.ISequence|null} [sequenceType] TypeProto sequenceType\n         * @property {onnx.TypeProto.IMap|null} [mapType] TypeProto mapType\n         * @property {onnx.TypeProto.IOptional|null} [optionalType] TypeProto optionalType\n         * @property {onnx.TypeProto.ISparseTensor|null} [sparseTensorType] TypeProto sparseTensorType\n         * @property {string|null} [denotation] TypeProto denotation\n         */\n\n        /**\n         * Constructs a new TypeProto.\n         * @memberof onnx\n         * @classdesc Represents a TypeProto.\n         * @implements ITypeProto\n         * @constructor\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         */\n        function TypeProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TypeProto tensorType.\n         * @member {onnx.TypeProto.ITensor|null|undefined} tensorType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.tensorType = null;\n\n        /**\n         * TypeProto sequenceType.\n         * @member {onnx.TypeProto.ISequence|null|undefined} sequenceType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.sequenceType = null;\n\n        /**\n         * TypeProto mapType.\n         * @member {onnx.TypeProto.IMap|null|undefined} mapType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.mapType = null;\n\n        /**\n         * TypeProto optionalType.\n         * @member {onnx.TypeProto.IOptional|null|undefined} optionalType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.optionalType = null;\n\n        /**\n         * TypeProto sparseTensorType.\n         * @member {onnx.TypeProto.ISparseTensor|null|undefined} sparseTensorType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.sparseTensorType = null;\n\n        /**\n         * TypeProto denotation.\n         * @member {string} denotation\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.denotation = \"\";\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * TypeProto value.\n         * @member {\"tensorType\"|\"sequenceType\"|\"mapType\"|\"optionalType\"|\"sparseTensorType\"|undefined} value\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        Object.defineProperty(TypeProto.prototype, \"value\", {\n            get: $util.oneOfGetter($oneOfFields = [\"tensorType\", \"sequenceType\", \"mapType\", \"optionalType\", \"sparseTensorType\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new TypeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         * @returns {onnx.TypeProto} TypeProto instance\n         */\n        TypeProto.create = function create(properties) {\n            return new TypeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TypeProto message. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorType != null && Object.hasOwnProperty.call(message, \"tensorType\"))\n                $root.onnx.TypeProto.Tensor.encode(message.tensorType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.sequenceType != null && Object.hasOwnProperty.call(message, \"sequenceType\"))\n                $root.onnx.TypeProto.Sequence.encode(message.sequenceType, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            if (message.mapType != null && Object.hasOwnProperty.call(message, \"mapType\"))\n                $root.onnx.TypeProto.Map.encode(message.mapType, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.denotation != null && Object.hasOwnProperty.call(message, \"denotation\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.denotation);\n            if (message.sparseTensorType != null && Object.hasOwnProperty.call(message, \"sparseTensorType\"))\n                $root.onnx.TypeProto.SparseTensor.encode(message.sparseTensorType, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.optionalType != null && Object.hasOwnProperty.call(message, \"optionalType\"))\n                $root.onnx.TypeProto.Optional.encode(message.optionalType, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TypeProto message, length delimited. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.tensorType = $root.onnx.TypeProto.Tensor.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 4: {\n                        message.sequenceType = $root.onnx.TypeProto.Sequence.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 5: {\n                        message.mapType = $root.onnx.TypeProto.Map.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 9: {\n                        message.optionalType = $root.onnx.TypeProto.Optional.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 8: {\n                        message.sparseTensorType = $root.onnx.TypeProto.SparseTensor.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 6: {\n                        message.denotation = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TypeProto message.\n         * @function verify\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TypeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Tensor.verify(message.tensorType);\n                    if (error)\n                        return \"tensorType.\" + error;\n                }\n            }\n            if (message.sequenceType != null && message.hasOwnProperty(\"sequenceType\")) {\n                if (properties.value === 1)\n                    return \"value: multiple values\";\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Sequence.verify(message.sequenceType);\n                    if (error)\n                        return \"sequenceType.\" + error;\n                }\n            }\n            if (message.mapType != null && message.hasOwnProperty(\"mapType\")) {\n                if (properties.value === 1)\n                    return \"value: multiple values\";\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Map.verify(message.mapType);\n                    if (error)\n                        return \"mapType.\" + error;\n                }\n            }\n            if (message.optionalType != null && message.hasOwnProperty(\"optionalType\")) {\n                if (properties.value === 1)\n                    return \"value: multiple values\";\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Optional.verify(message.optionalType);\n                    if (error)\n                        return \"optionalType.\" + error;\n                }\n            }\n            if (message.sparseTensorType != null && message.hasOwnProperty(\"sparseTensorType\")) {\n                if (properties.value === 1)\n                    return \"value: multiple values\";\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.SparseTensor.verify(message.sparseTensorType);\n                    if (error)\n                        return \"sparseTensorType.\" + error;\n                }\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                if (!$util.isString(message.denotation))\n                    return \"denotation: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a TypeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TypeProto} TypeProto\n         */\n        TypeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TypeProto)\n                return object;\n            var message = new $root.onnx.TypeProto();\n            if (object.tensorType != null) {\n                if (typeof object.tensorType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.tensorType: object expected\");\n                message.tensorType = $root.onnx.TypeProto.Tensor.fromObject(object.tensorType);\n            }\n            if (object.sequenceType != null) {\n                if (typeof object.sequenceType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.sequenceType: object expected\");\n                message.sequenceType = $root.onnx.TypeProto.Sequence.fromObject(object.sequenceType);\n            }\n            if (object.mapType != null) {\n                if (typeof object.mapType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.mapType: object expected\");\n                message.mapType = $root.onnx.TypeProto.Map.fromObject(object.mapType);\n            }\n            if (object.optionalType != null) {\n                if (typeof object.optionalType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.optionalType: object expected\");\n                message.optionalType = $root.onnx.TypeProto.Optional.fromObject(object.optionalType);\n            }\n            if (object.sparseTensorType != null) {\n                if (typeof object.sparseTensorType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.sparseTensorType: object expected\");\n                message.sparseTensorType = $root.onnx.TypeProto.SparseTensor.fromObject(object.sparseTensorType);\n            }\n            if (object.denotation != null)\n                message.denotation = String(object.denotation);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TypeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.TypeProto} message TypeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TypeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.denotation = \"\";\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                object.tensorType = $root.onnx.TypeProto.Tensor.toObject(message.tensorType, options);\n                if (options.oneofs)\n                    object.value = \"tensorType\";\n            }\n            if (message.sequenceType != null && message.hasOwnProperty(\"sequenceType\")) {\n                object.sequenceType = $root.onnx.TypeProto.Sequence.toObject(message.sequenceType, options);\n                if (options.oneofs)\n                    object.value = \"sequenceType\";\n            }\n            if (message.mapType != null && message.hasOwnProperty(\"mapType\")) {\n                object.mapType = $root.onnx.TypeProto.Map.toObject(message.mapType, options);\n                if (options.oneofs)\n                    object.value = \"mapType\";\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                object.denotation = message.denotation;\n            if (message.sparseTensorType != null && message.hasOwnProperty(\"sparseTensorType\")) {\n                object.sparseTensorType = $root.onnx.TypeProto.SparseTensor.toObject(message.sparseTensorType, options);\n                if (options.oneofs)\n                    object.value = \"sparseTensorType\";\n            }\n            if (message.optionalType != null && message.hasOwnProperty(\"optionalType\")) {\n                object.optionalType = $root.onnx.TypeProto.Optional.toObject(message.optionalType, options);\n                if (options.oneofs)\n                    object.value = \"optionalType\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TypeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TypeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TypeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TypeProto\n         * @function getTypeUrl\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TypeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.TypeProto\";\n        };\n\n        TypeProto.Tensor = (function() {\n\n            /**\n             * Properties of a Tensor.\n             * @memberof onnx.TypeProto\n             * @interface ITensor\n             * @property {number|null} [elemType] Tensor elemType\n             * @property {onnx.ITensorShapeProto|null} [shape] Tensor shape\n             */\n\n            /**\n             * Constructs a new Tensor.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Tensor.\n             * @implements ITensor\n             * @constructor\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             */\n            function Tensor(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Tensor elemType.\n             * @member {number} elemType\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.elemType = 0;\n\n            /**\n             * Tensor shape.\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.shape = null;\n\n            /**\n             * Creates a new Tensor instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Tensor} Tensor instance\n             */\n            Tensor.create = function create(properties) {\n                return new Tensor(properties);\n            };\n\n            /**\n             * Encodes the specified Tensor message. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\n                if (message.shape != null && Object.hasOwnProperty.call(message, \"shape\"))\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Tensor message, length delimited. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Tensor();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.elemType = reader.int32();\n                            break;\n                        }\n                    case 2: {\n                            message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Tensor message.\n             * @function verify\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Tensor.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    if (!$util.isInteger(message.elemType))\n                        return \"elemType: integer expected\";\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\n                    if (error)\n                        return \"shape.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Tensor message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             */\n            Tensor.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Tensor)\n                    return object;\n                var message = new $root.onnx.TypeProto.Tensor();\n                if (object.elemType != null)\n                    message.elemType = object.elemType | 0;\n                if (object.shape != null) {\n                    if (typeof object.shape !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Tensor.shape: object expected\");\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Tensor message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.Tensor} message Tensor\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Tensor.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.elemType = 0;\n                    object.shape = null;\n                }\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = message.elemType;\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n                return object;\n            };\n\n            /**\n             * Converts this Tensor to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Tensor.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Tensor\n             * @function getTypeUrl\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Tensor.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TypeProto.Tensor\";\n            };\n\n            return Tensor;\n        })();\n\n        TypeProto.Sequence = (function() {\n\n            /**\n             * Properties of a Sequence.\n             * @memberof onnx.TypeProto\n             * @interface ISequence\n             * @property {onnx.ITypeProto|null} [elemType] Sequence elemType\n             */\n\n            /**\n             * Constructs a new Sequence.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Sequence.\n             * @implements ISequence\n             * @constructor\n             * @param {onnx.TypeProto.ISequence=} [properties] Properties to set\n             */\n            function Sequence(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Sequence elemType.\n             * @member {onnx.ITypeProto|null|undefined} elemType\n             * @memberof onnx.TypeProto.Sequence\n             * @instance\n             */\n            Sequence.prototype.elemType = null;\n\n            /**\n             * Creates a new Sequence instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {onnx.TypeProto.ISequence=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Sequence} Sequence instance\n             */\n            Sequence.create = function create(properties) {\n                return new Sequence(properties);\n            };\n\n            /**\n             * Encodes the specified Sequence message. Does not implicitly {@link onnx.TypeProto.Sequence.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {onnx.TypeProto.ISequence} message Sequence message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Sequence.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\n                    $root.onnx.TypeProto.encode(message.elemType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Sequence message, length delimited. Does not implicitly {@link onnx.TypeProto.Sequence.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {onnx.TypeProto.ISequence} message Sequence message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Sequence.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Sequence message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Sequence} Sequence\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Sequence.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Sequence();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.elemType = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Sequence message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Sequence} Sequence\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Sequence.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Sequence message.\n             * @function verify\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Sequence.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\")) {\n                    var error = $root.onnx.TypeProto.verify(message.elemType);\n                    if (error)\n                        return \"elemType.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Sequence message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Sequence} Sequence\n             */\n            Sequence.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Sequence)\n                    return object;\n                var message = new $root.onnx.TypeProto.Sequence();\n                if (object.elemType != null) {\n                    if (typeof object.elemType !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Sequence.elemType: object expected\");\n                    message.elemType = $root.onnx.TypeProto.fromObject(object.elemType);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Sequence message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {onnx.TypeProto.Sequence} message Sequence\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Sequence.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.elemType = null;\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = $root.onnx.TypeProto.toObject(message.elemType, options);\n                return object;\n            };\n\n            /**\n             * Converts this Sequence to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Sequence\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Sequence.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Sequence\n             * @function getTypeUrl\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Sequence.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TypeProto.Sequence\";\n            };\n\n            return Sequence;\n        })();\n\n        TypeProto.Map = (function() {\n\n            /**\n             * Properties of a Map.\n             * @memberof onnx.TypeProto\n             * @interface IMap\n             * @property {number|null} [keyType] Map keyType\n             * @property {onnx.ITypeProto|null} [valueType] Map valueType\n             */\n\n            /**\n             * Constructs a new Map.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Map.\n             * @implements IMap\n             * @constructor\n             * @param {onnx.TypeProto.IMap=} [properties] Properties to set\n             */\n            function Map(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Map keyType.\n             * @member {number} keyType\n             * @memberof onnx.TypeProto.Map\n             * @instance\n             */\n            Map.prototype.keyType = 0;\n\n            /**\n             * Map valueType.\n             * @member {onnx.ITypeProto|null|undefined} valueType\n             * @memberof onnx.TypeProto.Map\n             * @instance\n             */\n            Map.prototype.valueType = null;\n\n            /**\n             * Creates a new Map instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {onnx.TypeProto.IMap=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Map} Map instance\n             */\n            Map.create = function create(properties) {\n                return new Map(properties);\n            };\n\n            /**\n             * Encodes the specified Map message. Does not implicitly {@link onnx.TypeProto.Map.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {onnx.TypeProto.IMap} message Map message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Map.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.keyType != null && Object.hasOwnProperty.call(message, \"keyType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.keyType);\n                if (message.valueType != null && Object.hasOwnProperty.call(message, \"valueType\"))\n                    $root.onnx.TypeProto.encode(message.valueType, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Map message, length delimited. Does not implicitly {@link onnx.TypeProto.Map.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {onnx.TypeProto.IMap} message Map message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Map.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Map message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Map} Map\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Map.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Map();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.keyType = reader.int32();\n                            break;\n                        }\n                    case 2: {\n                            message.valueType = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Map message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Map} Map\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Map.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Map message.\n             * @function verify\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Map.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.keyType != null && message.hasOwnProperty(\"keyType\"))\n                    if (!$util.isInteger(message.keyType))\n                        return \"keyType: integer expected\";\n                if (message.valueType != null && message.hasOwnProperty(\"valueType\")) {\n                    var error = $root.onnx.TypeProto.verify(message.valueType);\n                    if (error)\n                        return \"valueType.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Map message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Map} Map\n             */\n            Map.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Map)\n                    return object;\n                var message = new $root.onnx.TypeProto.Map();\n                if (object.keyType != null)\n                    message.keyType = object.keyType | 0;\n                if (object.valueType != null) {\n                    if (typeof object.valueType !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Map.valueType: object expected\");\n                    message.valueType = $root.onnx.TypeProto.fromObject(object.valueType);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Map message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {onnx.TypeProto.Map} message Map\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Map.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.keyType = 0;\n                    object.valueType = null;\n                }\n                if (message.keyType != null && message.hasOwnProperty(\"keyType\"))\n                    object.keyType = message.keyType;\n                if (message.valueType != null && message.hasOwnProperty(\"valueType\"))\n                    object.valueType = $root.onnx.TypeProto.toObject(message.valueType, options);\n                return object;\n            };\n\n            /**\n             * Converts this Map to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Map\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Map.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Map\n             * @function getTypeUrl\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Map.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TypeProto.Map\";\n            };\n\n            return Map;\n        })();\n\n        TypeProto.Optional = (function() {\n\n            /**\n             * Properties of an Optional.\n             * @memberof onnx.TypeProto\n             * @interface IOptional\n             * @property {onnx.ITypeProto|null} [elemType] Optional elemType\n             */\n\n            /**\n             * Constructs a new Optional.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents an Optional.\n             * @implements IOptional\n             * @constructor\n             * @param {onnx.TypeProto.IOptional=} [properties] Properties to set\n             */\n            function Optional(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Optional elemType.\n             * @member {onnx.ITypeProto|null|undefined} elemType\n             * @memberof onnx.TypeProto.Optional\n             * @instance\n             */\n            Optional.prototype.elemType = null;\n\n            /**\n             * Creates a new Optional instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {onnx.TypeProto.IOptional=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Optional} Optional instance\n             */\n            Optional.create = function create(properties) {\n                return new Optional(properties);\n            };\n\n            /**\n             * Encodes the specified Optional message. Does not implicitly {@link onnx.TypeProto.Optional.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {onnx.TypeProto.IOptional} message Optional message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Optional.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\n                    $root.onnx.TypeProto.encode(message.elemType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Optional message, length delimited. Does not implicitly {@link onnx.TypeProto.Optional.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {onnx.TypeProto.IOptional} message Optional message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Optional.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes an Optional message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Optional} Optional\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Optional.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Optional();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.elemType = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes an Optional message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Optional} Optional\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Optional.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies an Optional message.\n             * @function verify\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Optional.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\")) {\n                    var error = $root.onnx.TypeProto.verify(message.elemType);\n                    if (error)\n                        return \"elemType.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates an Optional message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Optional} Optional\n             */\n            Optional.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Optional)\n                    return object;\n                var message = new $root.onnx.TypeProto.Optional();\n                if (object.elemType != null) {\n                    if (typeof object.elemType !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Optional.elemType: object expected\");\n                    message.elemType = $root.onnx.TypeProto.fromObject(object.elemType);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from an Optional message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {onnx.TypeProto.Optional} message Optional\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Optional.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.elemType = null;\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = $root.onnx.TypeProto.toObject(message.elemType, options);\n                return object;\n            };\n\n            /**\n             * Converts this Optional to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Optional\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Optional.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Optional\n             * @function getTypeUrl\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Optional.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TypeProto.Optional\";\n            };\n\n            return Optional;\n        })();\n\n        TypeProto.SparseTensor = (function() {\n\n            /**\n             * Properties of a SparseTensor.\n             * @memberof onnx.TypeProto\n             * @interface ISparseTensor\n             * @property {number|null} [elemType] SparseTensor elemType\n             * @property {onnx.ITensorShapeProto|null} [shape] SparseTensor shape\n             */\n\n            /**\n             * Constructs a new SparseTensor.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a SparseTensor.\n             * @implements ISparseTensor\n             * @constructor\n             * @param {onnx.TypeProto.ISparseTensor=} [properties] Properties to set\n             */\n            function SparseTensor(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * SparseTensor elemType.\n             * @member {number} elemType\n             * @memberof onnx.TypeProto.SparseTensor\n             * @instance\n             */\n            SparseTensor.prototype.elemType = 0;\n\n            /**\n             * SparseTensor shape.\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\n             * @memberof onnx.TypeProto.SparseTensor\n             * @instance\n             */\n            SparseTensor.prototype.shape = null;\n\n            /**\n             * Creates a new SparseTensor instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {onnx.TypeProto.ISparseTensor=} [properties] Properties to set\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor instance\n             */\n            SparseTensor.create = function create(properties) {\n                return new SparseTensor(properties);\n            };\n\n            /**\n             * Encodes the specified SparseTensor message. Does not implicitly {@link onnx.TypeProto.SparseTensor.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {onnx.TypeProto.ISparseTensor} message SparseTensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            SparseTensor.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\n                if (message.shape != null && Object.hasOwnProperty.call(message, \"shape\"))\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified SparseTensor message, length delimited. Does not implicitly {@link onnx.TypeProto.SparseTensor.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {onnx.TypeProto.ISparseTensor} message SparseTensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            SparseTensor.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a SparseTensor message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            SparseTensor.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.SparseTensor();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.elemType = reader.int32();\n                            break;\n                        }\n                    case 2: {\n                            message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a SparseTensor message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            SparseTensor.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a SparseTensor message.\n             * @function verify\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            SparseTensor.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    if (!$util.isInteger(message.elemType))\n                        return \"elemType: integer expected\";\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\n                    if (error)\n                        return \"shape.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a SparseTensor message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor\n             */\n            SparseTensor.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.SparseTensor)\n                    return object;\n                var message = new $root.onnx.TypeProto.SparseTensor();\n                if (object.elemType != null)\n                    message.elemType = object.elemType | 0;\n                if (object.shape != null) {\n                    if (typeof object.shape !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.SparseTensor.shape: object expected\");\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a SparseTensor message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {onnx.TypeProto.SparseTensor} message SparseTensor\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            SparseTensor.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.elemType = 0;\n                    object.shape = null;\n                }\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = message.elemType;\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n                return object;\n            };\n\n            /**\n             * Converts this SparseTensor to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.SparseTensor\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            SparseTensor.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for SparseTensor\n             * @function getTypeUrl\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            SparseTensor.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TypeProto.SparseTensor\";\n            };\n\n            return SparseTensor;\n        })();\n\n        return TypeProto;\n    })();\n\n    onnx.OperatorSetIdProto = (function() {\n\n        /**\n         * Properties of an OperatorSetIdProto.\n         * @memberof onnx\n         * @interface IOperatorSetIdProto\n         * @property {string|null} [domain] OperatorSetIdProto domain\n         * @property {number|Long|null} [version] OperatorSetIdProto version\n         */\n\n        /**\n         * Constructs a new OperatorSetIdProto.\n         * @memberof onnx\n         * @classdesc Represents an OperatorSetIdProto.\n         * @implements IOperatorSetIdProto\n         * @constructor\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         */\n        function OperatorSetIdProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * OperatorSetIdProto domain.\n         * @member {string} domain\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.domain = \"\";\n\n        /**\n         * OperatorSetIdProto version.\n         * @member {number|Long} version\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new OperatorSetIdProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto instance\n         */\n        OperatorSetIdProto.create = function create(properties) {\n            return new OperatorSetIdProto(properties);\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.domain);\n            if (message.version != null && Object.hasOwnProperty.call(message, \"version\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.version);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message, length delimited. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.OperatorSetIdProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.domain = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.version = reader.int64();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an OperatorSetIdProto message.\n         * @function verify\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        OperatorSetIdProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))\n                    return \"version: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates an OperatorSetIdProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         */\n        OperatorSetIdProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.OperatorSetIdProto)\n                return object;\n            var message = new $root.onnx.OperatorSetIdProto();\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.version != null)\n                if ($util.Long)\n                    (message.version = $util.Long.fromValue(object.version)).unsigned = false;\n                else if (typeof object.version === \"string\")\n                    message.version = parseInt(object.version, 10);\n                else if (typeof object.version === \"number\")\n                    message.version = object.version;\n                else if (typeof object.version === \"object\")\n                    message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an OperatorSetIdProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.OperatorSetIdProto} message OperatorSetIdProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        OperatorSetIdProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.version = options.longs === String ? \"0\" : 0;\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (typeof message.version === \"number\")\n                    object.version = options.longs === String ? String(message.version) : message.version;\n                else\n                    object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;\n            return object;\n        };\n\n        /**\n         * Converts this OperatorSetIdProto to JSON.\n         * @function toJSON\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        OperatorSetIdProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for OperatorSetIdProto\n         * @function getTypeUrl\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        OperatorSetIdProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.OperatorSetIdProto\";\n        };\n\n        return OperatorSetIdProto;\n    })();\n\n    /**\n     * OperatorStatus enum.\n     * @name onnx.OperatorStatus\n     * @enum {number}\n     * @property {number} EXPERIMENTAL=0 EXPERIMENTAL value\n     * @property {number} STABLE=1 STABLE value\n     */\n    onnx.OperatorStatus = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"EXPERIMENTAL\"] = 0;\n        values[valuesById[1] = \"STABLE\"] = 1;\n        return values;\n    })();\n\n    onnx.FunctionProto = (function() {\n\n        /**\n         * Properties of a FunctionProto.\n         * @memberof onnx\n         * @interface IFunctionProto\n         * @property {string|null} [name] FunctionProto name\n         * @property {Array.<string>|null} [input] FunctionProto input\n         * @property {Array.<string>|null} [output] FunctionProto output\n         * @property {Array.<string>|null} [attribute] FunctionProto attribute\n         * @property {Array.<onnx.IAttributeProto>|null} [attributeProto] FunctionProto attributeProto\n         * @property {Array.<onnx.INodeProto>|null} [node] FunctionProto node\n         * @property {string|null} [docString] FunctionProto docString\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] FunctionProto opsetImport\n         * @property {string|null} [domain] FunctionProto domain\n         */\n\n        /**\n         * Constructs a new FunctionProto.\n         * @memberof onnx\n         * @classdesc Represents a FunctionProto.\n         * @implements IFunctionProto\n         * @constructor\n         * @param {onnx.IFunctionProto=} [properties] Properties to set\n         */\n        function FunctionProto(properties) {\n            this.input = [];\n            this.output = [];\n            this.attribute = [];\n            this.attributeProto = [];\n            this.node = [];\n            this.opsetImport = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * FunctionProto name.\n         * @member {string} name\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.name = \"\";\n\n        /**\n         * FunctionProto input.\n         * @member {Array.<string>} input\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.input = $util.emptyArray;\n\n        /**\n         * FunctionProto output.\n         * @member {Array.<string>} output\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.output = $util.emptyArray;\n\n        /**\n         * FunctionProto attribute.\n         * @member {Array.<string>} attribute\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.attribute = $util.emptyArray;\n\n        /**\n         * FunctionProto attributeProto.\n         * @member {Array.<onnx.IAttributeProto>} attributeProto\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.attributeProto = $util.emptyArray;\n\n        /**\n         * FunctionProto node.\n         * @member {Array.<onnx.INodeProto>} node\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.node = $util.emptyArray;\n\n        /**\n         * FunctionProto docString.\n         * @member {string} docString\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.docString = \"\";\n\n        /**\n         * FunctionProto opsetImport.\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.opsetImport = $util.emptyArray;\n\n        /**\n         * FunctionProto domain.\n         * @member {string} domain\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.domain = \"\";\n\n        /**\n         * Creates a new FunctionProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {onnx.IFunctionProto=} [properties] Properties to set\n         * @returns {onnx.FunctionProto} FunctionProto instance\n         */\n        FunctionProto.create = function create(properties) {\n            return new FunctionProto(properties);\n        };\n\n        /**\n         * Encodes the specified FunctionProto message. Does not implicitly {@link onnx.FunctionProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {onnx.IFunctionProto} message FunctionProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FunctionProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.input[i]);\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.output[i]);\n            if (message.attribute != null && message.attribute.length)\n                for (var i = 0; i < message.attribute.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.attribute[i]);\n            if (message.node != null && message.node.length)\n                for (var i = 0; i < message.node.length; ++i)\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.docString);\n            if (message.opsetImport != null && message.opsetImport.length)\n                for (var i = 0; i < message.opsetImport.length; ++i)\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.domain);\n            if (message.attributeProto != null && message.attributeProto.length)\n                for (var i = 0; i < message.attributeProto.length; ++i)\n                    $root.onnx.AttributeProto.encode(message.attributeProto[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified FunctionProto message, length delimited. Does not implicitly {@link onnx.FunctionProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {onnx.IFunctionProto} message FunctionProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FunctionProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a FunctionProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.FunctionProto} FunctionProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FunctionProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.FunctionProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 4: {\n                        if (!(message.input && message.input.length))\n                            message.input = [];\n                        message.input.push(reader.string());\n                        break;\n                    }\n                case 5: {\n                        if (!(message.output && message.output.length))\n                            message.output = [];\n                        message.output.push(reader.string());\n                        break;\n                    }\n                case 6: {\n                        if (!(message.attribute && message.attribute.length))\n                            message.attribute = [];\n                        message.attribute.push(reader.string());\n                        break;\n                    }\n                case 11: {\n                        if (!(message.attributeProto && message.attributeProto.length))\n                            message.attributeProto = [];\n                        message.attributeProto.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 7: {\n                        if (!(message.node && message.node.length))\n                            message.node = [];\n                        message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 8: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                case 9: {\n                        if (!(message.opsetImport && message.opsetImport.length))\n                            message.opsetImport = [];\n                        message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 10: {\n                        message.domain = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a FunctionProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.FunctionProto} FunctionProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FunctionProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a FunctionProto message.\n         * @function verify\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        FunctionProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i)\n                    if (!$util.isString(message.input[i]))\n                        return \"input: string[] expected\";\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i)\n                    if (!$util.isString(message.output[i]))\n                        return \"output: string[] expected\";\n            }\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\n                if (!Array.isArray(message.attribute))\n                    return \"attribute: array expected\";\n                for (var i = 0; i < message.attribute.length; ++i)\n                    if (!$util.isString(message.attribute[i]))\n                        return \"attribute: string[] expected\";\n            }\n            if (message.attributeProto != null && message.hasOwnProperty(\"attributeProto\")) {\n                if (!Array.isArray(message.attributeProto))\n                    return \"attributeProto: array expected\";\n                for (var i = 0; i < message.attributeProto.length; ++i) {\n                    var error = $root.onnx.AttributeProto.verify(message.attributeProto[i]);\n                    if (error)\n                        return \"attributeProto.\" + error;\n                }\n            }\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\n                if (!Array.isArray(message.node))\n                    return \"node: array expected\";\n                for (var i = 0; i < message.node.length; ++i) {\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\n                    if (error)\n                        return \"node.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\n                if (!Array.isArray(message.opsetImport))\n                    return \"opsetImport: array expected\";\n                for (var i = 0; i < message.opsetImport.length; ++i) {\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n                    if (error)\n                        return \"opsetImport.\" + error;\n                }\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a FunctionProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.FunctionProto} FunctionProto\n         */\n        FunctionProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.FunctionProto)\n                return object;\n            var message = new $root.onnx.FunctionProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.FunctionProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i)\n                    message.input[i] = String(object.input[i]);\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.FunctionProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i)\n                    message.output[i] = String(object.output[i]);\n            }\n            if (object.attribute) {\n                if (!Array.isArray(object.attribute))\n                    throw TypeError(\".onnx.FunctionProto.attribute: array expected\");\n                message.attribute = [];\n                for (var i = 0; i < object.attribute.length; ++i)\n                    message.attribute[i] = String(object.attribute[i]);\n            }\n            if (object.attributeProto) {\n                if (!Array.isArray(object.attributeProto))\n                    throw TypeError(\".onnx.FunctionProto.attributeProto: array expected\");\n                message.attributeProto = [];\n                for (var i = 0; i < object.attributeProto.length; ++i) {\n                    if (typeof object.attributeProto[i] !== \"object\")\n                        throw TypeError(\".onnx.FunctionProto.attributeProto: object expected\");\n                    message.attributeProto[i] = $root.onnx.AttributeProto.fromObject(object.attributeProto[i]);\n                }\n            }\n            if (object.node) {\n                if (!Array.isArray(object.node))\n                    throw TypeError(\".onnx.FunctionProto.node: array expected\");\n                message.node = [];\n                for (var i = 0; i < object.node.length; ++i) {\n                    if (typeof object.node[i] !== \"object\")\n                        throw TypeError(\".onnx.FunctionProto.node: object expected\");\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.opsetImport) {\n                if (!Array.isArray(object.opsetImport))\n                    throw TypeError(\".onnx.FunctionProto.opsetImport: array expected\");\n                message.opsetImport = [];\n                for (var i = 0; i < object.opsetImport.length; ++i) {\n                    if (typeof object.opsetImport[i] !== \"object\")\n                        throw TypeError(\".onnx.FunctionProto.opsetImport: object expected\");\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n                }\n            }\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a FunctionProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {onnx.FunctionProto} message FunctionProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        FunctionProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.input = [];\n                object.output = [];\n                object.attribute = [];\n                object.node = [];\n                object.opsetImport = [];\n                object.attributeProto = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.docString = \"\";\n                object.domain = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = message.input[j];\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = message.output[j];\n            }\n            if (message.attribute && message.attribute.length) {\n                object.attribute = [];\n                for (var j = 0; j < message.attribute.length; ++j)\n                    object.attribute[j] = message.attribute[j];\n            }\n            if (message.node && message.node.length) {\n                object.node = [];\n                for (var j = 0; j < message.node.length; ++j)\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.opsetImport && message.opsetImport.length) {\n                object.opsetImport = [];\n                for (var j = 0; j < message.opsetImport.length; ++j)\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.attributeProto && message.attributeProto.length) {\n                object.attributeProto = [];\n                for (var j = 0; j < message.attributeProto.length; ++j)\n                    object.attributeProto[j] = $root.onnx.AttributeProto.toObject(message.attributeProto[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this FunctionProto to JSON.\n         * @function toJSON\n         * @memberof onnx.FunctionProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        FunctionProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for FunctionProto\n         * @function getTypeUrl\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        FunctionProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.FunctionProto\";\n        };\n\n        return FunctionProto;\n    })();\n\n    return onnx;\n})();\n\nmodule.exports = $root;\n","var _scriptDir,e=(_scriptDir=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\"undefined\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(e={}){function n(){return P.buffer!=x.buffer&&L(),x}function r(){return P.buffer!=x.buffer&&L(),W}function t(){return P.buffer!=x.buffer&&L(),I}function a(){return P.buffer!=x.buffer&&L(),U}function o(){return P.buffer!=x.buffer&&L(),j}function i(){return P.buffer!=x.buffer&&L(),H}function u(){return P.buffer!=x.buffer&&L(),q}var f,s,c;f||(f=void 0!==e?e:{}),f.ready=new Promise(((e,n)=>{s=e,c=n}));var l,p,d,h=Object.assign({},f),m=\"./this.program\",b=(e,n)=>{throw n},g=\"object\"==typeof window,y=\"function\"==typeof importScripts,v=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,w=f.ENVIRONMENT_IS_PTHREAD||!1,_=\"\";function T(e){return f.locateFile?f.locateFile(e,_):_+e}if(v){var A=require(\"fs\"),O=require(\"path\");let e;_=y?O.dirname(_)+\"/\":__dirname+\"/\",l=(e,n)=>(e=e.startsWith(\"file://\")?new URL(e):O.normalize(e),A.readFileSync(e,n?void 0:\"utf8\")),d=e=>((e=l(e,!0)).buffer||(e=new Uint8Array(e)),e),p=(e,n,r,t=!0)=>{e=e.startsWith(\"file://\")?new URL(e):O.normalize(e),A.readFile(e,t?void 0:\"utf8\",((e,a)=>{e?r(e):n(t?a.buffer:a)}))},!f.thisProgram&&1<process.argv.length&&(m=process.argv[1].replace(/\\\\/g,\"/\")),process.argv.slice(2),b=(e,n)=>{throw process.exitCode=e,n},f.inspect=()=>\"[Emscripten Module object]\";try{e=require(\"worker_threads\")}catch(e){throw console.error('The \"worker_threads\" module is not supported in this node.js build - perhaps a newer version is needed?'),e}global.Worker=e.Worker}else(g||y)&&(y?_=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(_=document.currentScript.src),_scriptDir&&(_=_scriptDir),_=0!==_.indexOf(\"blob:\")?_.substr(0,_.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):\"\",v||(l=e=>{var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.send(null),n.responseText},y&&(d=e=>{var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.responseType=\"arraybuffer\",n.send(null),new Uint8Array(n.response)}),p=(e,n,r)=>{var t=new XMLHttpRequest;t.open(\"GET\",e,!0),t.responseType=\"arraybuffer\",t.onload=()=>{200==t.status||0==t.status&&t.response?n(t.response):r()},t.onerror=r,t.send(null)}));v&&\"undefined\"==typeof performance&&(global.performance=require(\"perf_hooks\").performance);var S=console.log.bind(console),E=console.warn.bind(console);v&&(S=(...e)=>A.writeSync(1,e.join(\" \")+\"\\n\"),E=(...e)=>A.writeSync(2,e.join(\" \")+\"\\n\"));var M,C=f.print||S,k=f.printErr||E;Object.assign(f,h),h=null,f.thisProgram&&(m=f.thisProgram),f.quit&&(b=f.quit),f.wasmBinary&&(M=f.wasmBinary);var F=f.noExitRuntime||!0;\"object\"!=typeof WebAssembly&&ae(\"no native wasm support detected\");var P,R,D,x,W,I,U,j,H,Y,B,z,q,G=!1;function L(){var e=P.buffer;f.HEAP8=x=new Int8Array(e),f.HEAP16=I=new Int16Array(e),f.HEAP32=j=new Int32Array(e),f.HEAPU8=W=new Uint8Array(e),f.HEAPU16=U=new Uint16Array(e),f.HEAPU32=H=new Uint32Array(e),f.HEAPF32=Y=new Float32Array(e),f.HEAPF64=q=new Float64Array(e),f.HEAP64=B=new BigInt64Array(e),f.HEAPU64=z=new BigUint64Array(e)}var N=f.INITIAL_MEMORY||16777216;if(5242880<=N||ae(\"INITIAL_MEMORY should be larger than STACK_SIZE, was \"+N+\"! (STACK_SIZE=5242880)\"),w)P=f.wasmMemory;else if(f.wasmMemory)P=f.wasmMemory;else if(!((P=new WebAssembly.Memory({initial:N/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw k(\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\"),v&&k(\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)\"),Error(\"bad memory\");L(),N=P.buffer.byteLength;var V,J=[],X=[],Z=[],$=0;function K(){return F||0<$}function Q(){var e=f.preRun.shift();J.unshift(e)}var ee,ne=0,re=null,te=null;function ae(e){throw f.onAbort&&f.onAbort(e),k(e=\"Aborted(\"+e+\")\"),G=!0,D=1,e=new WebAssembly.RuntimeError(e+\". Build with -sASSERTIONS for more info.\"),c(e),e}function oe(e){return e.startsWith(\"data:application/octet-stream;base64,\")}function ie(e){try{if(e==ee&&M)return new Uint8Array(M);if(d)return d(e);throw\"both async and sync fetching of the wasm failed\"}catch(e){ae(e)}}function ue(e,n,r){return function(e){if(!M&&(g||y)){if(\"function\"==typeof fetch&&!e.startsWith(\"file://\"))return fetch(e,{credentials:\"same-origin\"}).then((n=>{if(!n.ok)throw\"failed to load wasm binary file at '\"+e+\"'\";return n.arrayBuffer()})).catch((()=>ie(e)));if(p)return new Promise(((n,r)=>{p(e,(e=>n(new Uint8Array(e))),r)}))}return Promise.resolve().then((()=>ie(e)))}(e).then((e=>WebAssembly.instantiate(e,n))).then((e=>e)).then(r,(e=>{k(\"failed to asynchronously prepare wasm: \"+e),ae(e)}))}function fe(e){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+e+\")\",this.status=e}function se(e){e.terminate(),e.onmessage=()=>{}}function ce(e){(e=ye.hb[e])||ae(),ye.Lb(e)}function le(e){var n=ye.Db();if(!n)return 6;ye.kb.push(n),ye.hb[e.jb]=n,n.jb=e.jb;var r={cmd:\"run\",start_routine:e.Mb,arg:e.Bb,pthread_ptr:e.jb};return v&&n.unref(),n.postMessage(r,e.Sb),0}oe(ee=\"ort-wasm-threaded.wasm\")||(ee=T(ee));var pe=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;function de(e,n,r){var t=(n>>>=0)+r;for(r=n;e[r]&&!(r>=t);)++r;if(16<r-n&&e.buffer&&pe)return pe.decode(e.buffer instanceof SharedArrayBuffer?e.slice(n,r):e.subarray(n,r));for(t=\"\";n<r;){var a=e[n++];if(128&a){var o=63&e[n++];if(192==(224&a))t+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[n++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[n++])?t+=String.fromCharCode(a):(a-=65536,t+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else t+=String.fromCharCode(a)}return t}function he(e,n){return(e>>>=0)?de(r(),e,n):\"\"}function me(e){if(w)return Dn(1,1,e);D=e,K()||(ye.Nb(),f.onExit&&f.onExit(e),G=!0),b(e,new fe(e))}function be(e){if(D=e,w)throw we(e),\"unwind\";me(e)}function ge(e){e instanceof fe||\"unwind\"==e||b(1,e)}var ye={nb:[],kb:[],zb:[],hb:{},tb:function(){w&&ye.Fb()},Vb:function(){},Fb:function(){ye.receiveObjectTransfer=ye.Kb,ye.threadInitTLS=ye.yb,ye.setExitStatus=ye.xb,F=!1},xb:function(e){D=e},Xb:[\"$terminateWorker\"],Nb:function(){for(var e of ye.kb)se(e);for(e of ye.nb)se(e);ye.nb=[],ye.kb=[],ye.hb=[]},Lb:function(e){var n=e.jb;delete ye.hb[n],ye.nb.push(e),ye.kb.splice(ye.kb.indexOf(e),1),e.jb=0,ar(n)},Kb:function(){},yb:function(){ye.zb.forEach((e=>e()))},Jb:e=>new Promise((n=>{e.onmessage=r=>{var t=(r=r.data).cmd;if(e.jb&&(ye.Cb=e.jb),r.targetThread&&r.targetThread!=Kn()){var a=ye.hb[r.Wb];a?a.postMessage(r,r.transferList):k('Internal error! Worker sent a message \"'+t+'\" to target pthread '+r.targetThread+\", but that thread no longer exists!\")}else\"checkMailbox\"===t?bn():\"spawnThread\"===t?le(r):\"cleanupThread\"===t?ce(r.thread):\"killThread\"===t?(r=r.thread,t=ye.hb[r],delete ye.hb[r],se(t),ar(r),ye.kb.splice(ye.kb.indexOf(t),1),t.jb=0):\"cancelThread\"===t?ye.hb[r.thread].postMessage({cmd:\"cancel\"}):\"loaded\"===t?(e.loaded=!0,n(e)):\"print\"===t?C(\"Thread \"+r.threadId+\": \"+r.text):\"printErr\"===t?k(\"Thread \"+r.threadId+\": \"+r.text):\"alert\"===t?alert(\"Thread \"+r.threadId+\": \"+r.text):\"setimmediate\"===r.target?e.postMessage(r):\"callHandler\"===t?f[r.handler](...r.args):t&&k(\"worker sent an unknown command \"+t);ye.Cb=void 0},e.onerror=e=>{throw k(\"worker sent an error! \"+e.filename+\":\"+e.lineno+\": \"+e.message),e},v&&(e.on(\"message\",(function(n){e.onmessage({data:n})})),e.on(\"error\",(function(n){e.onerror(n)})));var r,t=[];for(r of[\"onExit\",\"onAbort\",\"print\",\"printErr\"])f.hasOwnProperty(r)&&t.push(r);e.postMessage({cmd:\"load\",handlers:t,urlOrBlob:f.mainScriptUrlOrBlob||_scriptDir,wasmMemory:P,wasmModule:R})})),Ib:function(e){e()},Ab:function(){var e=T(\"ort-wasm-threaded.worker.js\");e=new Worker(e),ye.nb.push(e)},Db:function(){return 0==ye.nb.length&&(ye.Ab(),ye.Jb(ye.nb[0])),ye.nb.pop()}};function ve(e){for(;0<e.length;)e.shift()(f)}function we(e){if(w)return Dn(2,0,e);be(e)}f.PThread=ye,f.establishStackSpace=function(){var e=Kn(),n=o()[e+52>>2>>>0];fr(n,n-(e=o()[e+56>>2>>>0])),cr(n)};var _e=[];function Te(e){this.gb=e-24,this.ub=function(e){i()[this.gb+4>>2>>>0]=e},this.qb=function(e){i()[this.gb+8>>2>>>0]=e},this.tb=function(e,n){this.pb(),this.ub(e),this.qb(n)},this.pb=function(){i()[this.gb+16>>2>>>0]=0}}function Ae(e,n,r,t){return w?Dn(3,1,e,n,r,t):Oe(e,n,r,t)}function Oe(e,n,r,t){if(\"undefined\"==typeof SharedArrayBuffer)return k(\"Current environment does not support SharedArrayBuffer, pthreads are not available!\"),6;var a=[];return w&&0===a.length?Ae(e,n,r,t):(e={Mb:r,jb:e,Bb:t,Sb:a},w?(e.Ub=\"spawnThread\",postMessage(e,a),0):le(e))}function Se(e,n,r){return w?Dn(4,1,e,n,r):0}function Ee(e,n){if(w)return Dn(5,1,e,n)}function Me(e){for(var n=0,r=0;r<e.length;++r){var t=e.charCodeAt(r);127>=t?n++:2047>=t?n+=2:55296<=t&&57343>=t?(n+=4,++r):n+=3}return n}function Ce(e,n,r,t){if(!(0<t))return 0;var a=r>>>=0;t=r+t-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(r>=t)break;n[r++>>>0]=i}else{if(2047>=i){if(r+1>=t)break;n[r++>>>0]=192|i>>6}else{if(65535>=i){if(r+2>=t)break;n[r++>>>0]=224|i>>12}else{if(r+3>=t)break;n[r++>>>0]=240|i>>18,n[r++>>>0]=128|i>>12&63}n[r++>>>0]=128|i>>6&63}n[r++>>>0]=128|63&i}}return n[r>>>0]=0,r-a}function ke(e,n,t){return Ce(e,r(),n,t)}function Fe(e,n){if(w)return Dn(6,1,e,n)}function Pe(e,n,r){if(w)return Dn(7,1,e,n,r)}function Re(e,n,r){return w?Dn(8,1,e,n,r):0}function De(e,n){if(w)return Dn(9,1,e,n)}function xe(e,n,r){if(w)return Dn(10,1,e,n,r)}function We(e,n,r,t){if(w)return Dn(11,1,e,n,r,t)}function Ie(e,n,r,t){if(w)return Dn(12,1,e,n,r,t)}function Ue(e,n,r,t){if(w)return Dn(13,1,e,n,r,t)}function je(e){if(w)return Dn(14,1,e)}function He(e,n){if(w)return Dn(15,1,e,n)}function Ye(e,n,r){if(w)return Dn(16,1,e,n,r)}function Be(e){if(null===e)return\"null\";var n=typeof e;return\"object\"===n||\"array\"===n||\"function\"===n?e.toString():\"\"+e}f.invokeEntryPoint=function(e,n){var r=_e[e];r||(e>=_e.length&&(_e.length=e+1),_e[e]=r=V.get(e)),e=r(n),K()?ye.xb(e):ir(e)};var ze=void 0;function qe(e){for(var n=\"\";r()[e>>>0];)n+=ze[r()[e++>>>0]];return n}var Ge={},Le={},Ne={};function Ve(e){if(void 0===e)return\"_unknown\";var n=(e=e.replace(/[^a-zA-Z0-9_]/g,\"$\")).charCodeAt(0);return 48<=n&&57>=n?\"_\"+e:e}function Je(e,n){return{[e=Ve(e)]:function(){return n.apply(this,arguments)}}[e]}function Xe(e){var n=Error,r=Je(e,(function(n){this.name=e,this.message=n,void 0!==(n=Error(n).stack)&&(this.stack=this.toString()+\"\\n\"+n.replace(/^Error(:[^\\n]*)?\\n/,\"\"))}));return r.prototype=Object.create(n.prototype),r.prototype.constructor=r,r.prototype.toString=function(){return void 0===this.message?this.name:this.name+\": \"+this.message},r}var Ze=void 0;function $e(e){throw new Ze(e)}function Ke(e,n,r={}){if(!(\"argPackAdvance\"in n))throw new TypeError(\"registerType registeredInstance requires argPackAdvance\");var t=n.name;if(e||$e('type \"'+t+'\" must have a positive integer typeid pointer'),Le.hasOwnProperty(e)){if(r.Eb)return;$e(\"Cannot register type '\"+t+\"' twice\")}Le[e]=n,delete Ne[e],Ge.hasOwnProperty(e)&&(n=Ge[e],delete Ge[e],n.forEach((e=>e())))}function Qe(e,u,f){switch(u){case 0:return f?function(e){return n()[e>>>0]}:function(e){return r()[e>>>0]};case 1:return f?function(e){return t()[e>>>1]}:function(e){return a()[e>>>1]};case 2:return f?function(e){return o()[e>>>2]}:function(e){return i()[e>>>2]};case 3:return f?function(e){return B[e>>3]}:function(e){return z[e>>3]};default:throw new TypeError(\"Unknown integer type: \"+e)}}function en(e){switch(e){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError(\"Unknown type size: \"+e)}}var nn=new function(){this.gb=[void 0],this.pb=[],this.get=function(e){return this.gb[e]},this.ub=function(e){let n=this.pb.pop()||this.gb.length;return this.gb[n]=e,n},this.Hb=function(e){this.gb[e]=void 0,this.pb.push(e)}};function rn(e){e>=nn.qb&&0==--nn.get(e).wb&&nn.Hb(e)}var tn=e=>(e||$e(\"Cannot use deleted val. handle = \"+e),nn.get(e).value),an=e=>{switch(e){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:return nn.ub({wb:1,value:e})}};function on(e){return this.fromWireType(o()[e>>2>>>0])}function un(e,n){switch(n){case 2:return function(e){var n=this.fromWireType;return P.buffer!=x.buffer&&L(),n.call(this,Y[e>>>2])};case 3:return function(e){return this.fromWireType(u()[e>>>3])};default:throw new TypeError(\"Unknown float type: \"+e)}}var fn=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf-16le\"):void 0;function sn(e,n){for(var o=e>>1,i=o+n/2;!(o>=i)&&a()[o>>>0];)++o;if(32<(o<<=1)-e&&fn)return fn.decode(r().slice(e,o));for(o=\"\",i=0;!(i>=n/2);++i){var u=t()[e+2*i>>1>>>0];if(0==u)break;o+=String.fromCharCode(u)}return o}function cn(e,n,r){if(void 0===r&&(r=2147483647),2>r)return 0;var a=n;r=(r-=2)<2*e.length?r/2:e.length;for(var o=0;o<r;++o){var i=e.charCodeAt(o);t()[n>>1>>>0]=i,n+=2}return t()[n>>1>>>0]=0,n-a}function ln(e){return 2*e.length}function pn(e,n){for(var r=0,t=\"\";!(r>=n/4);){var a=o()[e+4*r>>2>>>0];if(0==a)break;++r,65536<=a?(a-=65536,t+=String.fromCharCode(55296|a>>10,56320|1023&a)):t+=String.fromCharCode(a)}return t}function dn(e,n,r){if(void 0===r&&(r=2147483647),4>r)return 0;var t=n>>>=0;r=t+r-4;for(var a=0;a<e.length;++a){var i=e.charCodeAt(a);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++a)),o()[n>>2>>>0]=i,(n+=4)+4>r)break}return o()[n>>2>>>0]=0,n-t}function hn(e){for(var n=0,r=0;r<e.length;++r){var t=e.charCodeAt(r);55296<=t&&57343>=t&&++r,n+=4}return n}function mn(e){\"function\"==typeof Atomics.Tb&&(Atomics.Tb(o(),e>>2,e).value.then(bn),e+=128,Atomics.store(o(),e>>2,1))}function bn(){var e=Kn();e&&(mn(e),function(e){if(!G)try{if(ur(),!K())try{w?ir(D):be(D)}catch(e){ge(e)}}catch(e){ge(e)}}())}function gn(e,n){var r=Le[e];if(void 0===r){var t=qe(e=nr(e));er(e),$e(n+\" has unknown type \"+t)}return r}f.__emscripten_thread_mailbox_await=mn,f.checkMailbox=bn;var yn={};function vn(e){var n=yn[e];return void 0===n?qe(e):n}var wn=[];function _n(){return\"object\"==typeof globalThis?globalThis:Function(\"return this\")()}var Tn=[],An={};function On(e){return i()[e>>>2]+4294967296*o()[e+4>>>2]}function Sn(e){return 0==e%4&&(0!=e%100||0==e%400)}var En,Mn=[0,31,60,91,121,152,182,213,244,274,305,335],Cn=[0,31,59,90,120,151,181,212,243,273,304,334];function kn(e){return(Sn(e.getFullYear())?Mn:Cn)[e.getMonth()]+e.getDate()-1}function Fn(e,n,r,t,a,o,i){return w?Dn(17,1,e,n,r,t,a,o,i):-52}function Pn(e,n,r,t,a,o){if(w)return Dn(18,1,e,n,r,t,a,o)}function Rn(e){var n=Me(e)+1,r=Qn(n);return r&&ke(e,r,n),r}function Dn(e,n){var r=arguments.length-2,t=arguments;return function(e){var n=sr();return e=e(),cr(n),e}((()=>{for(var a=2*r,o=lr(8*a),i=o>>3,f=0;f<r;f++){var s=t[2+f];\"bigint\"==typeof s?(B[i+2*f]=1n,B[i+2*f+1]=s):(B[i+2*f]=0n,u()[i+2*f+1>>>0]=s)}return tr(e,a,o,n)}))}En=v?()=>{var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:()=>performance.timeOrigin+performance.now();var xn,Wn=[],In={};function Un(){if(!xn){var e,n={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:m||\"./this.program\"};for(e in In)void 0===In[e]?delete n[e]:n[e]=In[e];var r=[];for(e in n)r.push(e+\"=\"+n[e]);xn=r}return xn}function jn(e,r){if(w)return Dn(19,1,e,r);var t=0;return Un().forEach((function(a,o){var u=r+t;for(o=i()[e+4*o>>2>>>0]=u,u=0;u<a.length;++u)n()[o++>>0>>>0]=a.charCodeAt(u);n()[o>>0>>>0]=0,t+=a.length+1})),0}function Hn(e,n){if(w)return Dn(20,1,e,n);var r=Un();i()[e>>2>>>0]=r.length;var t=0;return r.forEach((function(e){t+=e.length+1})),i()[n>>2>>>0]=t,0}function Yn(e){return w?Dn(21,1,e):52}function Bn(e,n,r,t){return w?Dn(22,1,e,n,r,t):52}function zn(e,n,r,t){return w?Dn(23,1,e,n,r,t):70}var qn=[null,[],[]];function Gn(e,n,t,a){if(w)return Dn(24,1,e,n,t,a);for(var o=0,u=0;u<t;u++){var f=i()[n>>2>>>0],s=i()[n+4>>2>>>0];n+=8;for(var c=0;c<s;c++){var l=r()[f+c>>>0],p=qn[e];0===l||10===l?((1===e?C:k)(de(p,0)),p.length=0):p.push(l)}o+=s}return i()[a>>2>>>0]=o,0}var Ln=[31,29,31,30,31,30,31,31,30,31,30,31],Nn=[31,28,31,30,31,30,31,31,30,31,30,31];function Vn(e,r,t,a){function i(e,n,r){for(e=\"number\"==typeof e?e.toString():e||\"\";e.length<n;)e=r[0]+e;return e}function u(e,n){return i(e,n,\"0\")}function f(e,n){function r(e){return 0>e?-1:0<e?1:0}var t;return 0===(t=r(e.getFullYear()-n.getFullYear()))&&0===(t=r(e.getMonth()-n.getMonth()))&&(t=r(e.getDate()-n.getDate())),t}function s(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function c(e){var n=e.lb;for(e=new Date(new Date(e.mb+1900,0,1).getTime());0<n;){var r=e.getMonth(),t=(Sn(e.getFullYear())?Ln:Nn)[r];if(!(n>t-e.getDate())){e.setDate(e.getDate()+n);break}n-=t-e.getDate()+1,e.setDate(1),11>r?e.setMonth(r+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return r=new Date(e.getFullYear()+1,0,4),n=s(new Date(e.getFullYear(),0,4)),r=s(r),0>=f(n,e)?0>=f(r,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var l=o()[a+40>>2>>>0];for(var p in a={Qb:o()[a>>2>>>0],Pb:o()[a+4>>2>>>0],rb:o()[a+8>>2>>>0],vb:o()[a+12>>2>>>0],sb:o()[a+16>>2>>>0],mb:o()[a+20>>2>>>0],ib:o()[a+24>>2>>>0],lb:o()[a+28>>2>>>0],Yb:o()[a+32>>2>>>0],Ob:o()[a+36>>2>>>0],Rb:l?he(l):\"\"},t=he(t),l={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"})t=t.replace(new RegExp(p,\"g\"),l[p]);var d=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),h=\"January February March April May June July August September October November December\".split(\" \");for(p in l={\"%a\":function(e){return d[e.ib].substring(0,3)},\"%A\":function(e){return d[e.ib]},\"%b\":function(e){return h[e.sb].substring(0,3)},\"%B\":function(e){return h[e.sb]},\"%C\":function(e){return u((e.mb+1900)/100|0,2)},\"%d\":function(e){return u(e.vb,2)},\"%e\":function(e){return i(e.vb,2,\" \")},\"%g\":function(e){return c(e).toString().substring(2)},\"%G\":function(e){return c(e)},\"%H\":function(e){return u(e.rb,2)},\"%I\":function(e){return 0==(e=e.rb)?e=12:12<e&&(e-=12),u(e,2)},\"%j\":function(e){for(var n=0,r=0;r<=e.sb-1;n+=(Sn(e.mb+1900)?Ln:Nn)[r++]);return u(e.vb+n,3)},\"%m\":function(e){return u(e.sb+1,2)},\"%M\":function(e){return u(e.Pb,2)},\"%n\":function(){return\"\\n\"},\"%p\":function(e){return 0<=e.rb&&12>e.rb?\"AM\":\"PM\"},\"%S\":function(e){return u(e.Qb,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(e){return e.ib||7},\"%U\":function(e){return u(Math.floor((e.lb+7-e.ib)/7),2)},\"%V\":function(e){var n=Math.floor((e.lb+7-(e.ib+6)%7)/7);if(2>=(e.ib+371-e.lb-2)%7&&n++,n)53==n&&(4==(r=(e.ib+371-e.lb)%7)||3==r&&Sn(e.mb)||(n=1));else{n=52;var r=(e.ib+7-e.lb-1)%7;(4==r||5==r&&Sn(e.mb%400-1))&&n++}return u(n,2)},\"%w\":function(e){return e.ib},\"%W\":function(e){return u(Math.floor((e.lb+7-(e.ib+6)%7)/7),2)},\"%y\":function(e){return(e.mb+1900).toString().substring(2)},\"%Y\":function(e){return e.mb+1900},\"%z\":function(e){var n=0<=(e=e.Ob);return e=Math.abs(e)/60,(n?\"+\":\"-\")+String(\"0000\"+(e/60*100+e%60)).slice(-4)},\"%Z\":function(e){return e.Rb},\"%%\":function(){return\"%\"}},t=t.replace(/%%/g,\"\\0\\0\"),l)t.includes(p)&&(t=t.replace(new RegExp(p,\"g\"),l[p](a)));return p=function(e){var n=Array(Me(e)+1);return Ce(e,n,0,n.length),n}(t=t.replace(/\\0\\0/g,\"%\")),p.length>r?0:(function(e,r){n().set(e,r>>>0)}(p,e),p.length-1)}ye.tb();for(var Jn=Array(256),Xn=0;256>Xn;++Xn)Jn[Xn]=String.fromCharCode(Xn);ze=Jn,Ze=f.BindingError=Xe(\"BindingError\"),f.InternalError=Xe(\"InternalError\"),nn.gb.push({value:void 0},{value:null},{value:!0},{value:!1}),nn.qb=nn.gb.length,f.count_emval_handles=function(){for(var e=0,n=nn.qb;n<nn.gb.length;++n)void 0!==nn.gb[n]&&++e;return e};var Zn=[null,me,we,Ae,Se,Ee,Fe,Pe,Re,De,xe,We,Ie,Ue,je,He,Ye,Fn,Pn,jn,Hn,Yn,Bn,zn,Gn],$n={b:function(e,n,r){throw new Te(e).tb(n,r),e},ra:function(){ae(\"To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html\")},ga:function(e){rr(e,!y,1,!g),ye.yb()},D:function(e){w?postMessage({cmd:\"cleanupThread\",thread:e}):ce(e)},W:Oe,y:Se,na:Ee,S:Fe,U:Pe,L:Re,ka:De,ba:xe,ja:We,F:Ie,T:Ue,Q:je,la:He,R:Ye,I:function(e,n,r,t,a){n=qe(n),r=en(r);var o=-1!=n.indexOf(\"u\");o&&(a=(1n<<64n)-1n),Ke(e,{name:n,fromWireType:function(e){return e},toWireType:function(e,r){if(\"bigint\"!=typeof r&&\"number\"!=typeof r)throw new TypeError('Cannot convert \"'+Be(r)+'\" to '+this.name);if(r<t||r>a)throw new TypeError('Passing a number \"'+Be(r)+'\" from JS side to C/C++ side to an argument of type \"'+n+'\", which is outside the valid range ['+t+\", \"+a+\"]!\");return r},argPackAdvance:8,readValueFromPointer:Qe(n,r,!o),ob:null})},ta:function(e,r,a,i,u){var f=en(a);Ke(e,{name:r=qe(r),fromWireType:function(e){return!!e},toWireType:function(e,n){return n?i:u},argPackAdvance:8,readValueFromPointer:function(e){if(1===a)var i=n();else if(2===a)i=t();else{if(4!==a)throw new TypeError(\"Unknown boolean type size: \"+r);i=o()}return this.fromWireType(i[e>>>f])},ob:null})},sa:function(e,n){Ke(e,{name:n=qe(n),fromWireType:function(e){var n=tn(e);return rn(e),n},toWireType:function(e,n){return an(n)},argPackAdvance:8,readValueFromPointer:on,ob:null})},H:function(e,n,r){r=en(r),Ke(e,{name:n=qe(n),fromWireType:function(e){return e},toWireType:function(e,n){return n},argPackAdvance:8,readValueFromPointer:un(n,r),ob:null})},u:function(e,n,r,t,a){n=qe(n),-1===a&&(a=4294967295),a=en(r);var o=e=>e;if(0===t){var i=32-8*r;o=e=>e<<i>>>i}r=n.includes(\"unsigned\")?function(e,n){return n>>>0}:function(e,n){return n},Ke(e,{name:n,fromWireType:o,toWireType:r,argPackAdvance:8,readValueFromPointer:Qe(n,a,0!==t),ob:null})},m:function(e,n,r){function t(e){e>>=2;var n=i();return new a(n.buffer,n[e+1>>>0],n[e>>>0])}var a=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array][n];Ke(e,{name:r=qe(r),fromWireType:t,argPackAdvance:8,readValueFromPointer:t},{Eb:!0})},J:function(e,n){var t=\"std::string\"===(n=qe(n));Ke(e,{name:n,fromWireType:function(e){var n=i()[e>>2>>>0],a=e+4;if(t)for(var o=a,u=0;u<=n;++u){var f=a+u;if(u==n||0==r()[f>>>0]){if(o=he(o,f-o),void 0===s)var s=o;else s+=String.fromCharCode(0),s+=o;o=f+1}}else{for(s=Array(n),u=0;u<n;++u)s[u]=String.fromCharCode(r()[a+u>>>0]);s=s.join(\"\")}return er(e),s},toWireType:function(e,n){n instanceof ArrayBuffer&&(n=new Uint8Array(n));var a=\"string\"==typeof n;a||n instanceof Uint8Array||n instanceof Uint8ClampedArray||n instanceof Int8Array||$e(\"Cannot pass non-string to std::string\");var o=t&&a?Me(n):n.length,u=Qn(4+o+1),f=u+4>>>0;if(i()[u>>2>>>0]=o,t&&a)ke(n,f,o+1);else if(a)for(a=0;a<o;++a){var s=n.charCodeAt(a);255<s&&(er(f),$e(\"String has UTF-16 code units that do not fit in 8 bits\")),r()[f+a>>>0]=s}else for(a=0;a<o;++a)r()[f+a>>>0]=n[a];return null!==e&&e.push(er,u),u},argPackAdvance:8,readValueFromPointer:on,ob:function(e){er(e)}})},A:function(e,n,r){if(r=qe(r),2===n)var t=sn,o=cn,u=ln,f=()=>a(),s=1;else 4===n&&(t=pn,o=dn,u=hn,f=()=>i(),s=2);Ke(e,{name:r,fromWireType:function(e){for(var r,a=i()[e>>>2],o=f(),u=e+4,c=0;c<=a;++c){var l=e+4+c*n;c!=a&&0!=o[l>>>s]||(u=t(u,l-u),void 0===r?r=u:(r+=String.fromCharCode(0),r+=u),u=l+n)}return er(e),r},toWireType:function(e,t){\"string\"!=typeof t&&$e(\"Cannot pass non-string to C++ string type \"+r);var a=u(t),f=Qn(4+a+n);return f>>>=0,i()[f>>>2]=a>>s,o(t,f+4,a+n),null!==e&&e.push(er,f),f},argPackAdvance:8,readValueFromPointer:on,ob:function(e){er(e)}})},ua:function(e,n){Ke(e,{Gb:!0,name:n=qe(n),argPackAdvance:0,fromWireType:function(){},toWireType:function(){}})},X:function(){return 131072},qa:function(){return!0},O:function(e,n){e==n?setTimeout((()=>bn())):w?postMessage({targetThread:e,cmd:\"checkMailbox\"}):(e=ye.hb[e])&&e.postMessage({cmd:\"checkMailbox\"})},ea:function(){return-1},fa:mn,pa:function(e){v&&ye.hb[e].ref()},r:function(e,n,r){e=tn(e),n=gn(n,\"emval::as\");var t=[],a=an(t);return i()[r>>2>>>0]=a,n.toWireType(t,e)},i:function(e,n,r,t,a){e=wn[e],n=tn(n),r=vn(r);var o=[];return i()[t>>2>>>0]=an(o),e(n,r,o,a)},s:function(e,n,r,t){(e=wn[e])(n=tn(n),r=vn(r),null,t)},c:rn,K:function(e,n){return(e=tn(e))==tn(n)},o:function(e){return 0===e?an(_n()):(e=vn(e),an(_n()[e]))},g:function(e,n){var r=function(e,n){for(var r=Array(e),t=0;t<e;++t)r[t]=gn(i()[n+4*t>>2>>>0],\"parameter \"+t);return r}(e,n),t=r[0];n=t.name+\"_$\"+r.slice(1).map((function(e){return e.name})).join(\"_\")+\"$\";var a=Tn[n];if(void 0!==a)return a;a=[\"retType\"];for(var o=[t],u=\"\",f=0;f<e-1;++f)u+=(0!==f?\", \":\"\")+\"arg\"+f,a.push(\"argType\"+f),o.push(r[1+f]);var s=\"return function \"+Ve(\"methodCaller_\"+n)+\"(handle, name, destructors, args) {\\n\",c=0;for(f=0;f<e-1;++f)s+=\"    var arg\"+f+\" = argType\"+f+\".readValueFromPointer(args\"+(c?\"+\"+c:\"\")+\");\\n\",c+=r[f+1].argPackAdvance;for(s+=\"    var rv = handle[name](\"+u+\");\\n\",f=0;f<e-1;++f)r[f+1].deleteObject&&(s+=\"    argType\"+f+\".deleteObject(arg\"+f+\");\\n\");return t.Gb||(s+=\"    return retType.toWireType(destructors, rv);\\n\"),a.push(s+\"};\\n\"),e=function(e){var n=Function;if(!(n instanceof Function))throw new TypeError(\"new_ called with constructor type \"+typeof n+\" which is not a function\");var r=Je(n.name||\"unknownFunctionName\",(function(){}));return r.prototype=n.prototype,r=new r,(e=n.apply(r,e))instanceof Object?e:r}(a).apply(null,o),a=function(e){var n=wn.length;return wn.push(e),n}(e),Tn[n]=a},t:function(e,n){return e=tn(e),n=tn(n),an(e[n])},d:function(e){4<e&&(nn.get(e).wb+=1)},x:function(e,n,r,t){e=tn(e);var a=An[n];return a||(a=function(e){for(var n=\"\",r=0;r<e;++r)n+=(0!==r?\", \":\"\")+\"arg\"+r;var t=\"return function emval_allocator_\"+e+\"(constructor, argTypes, args) {\\n  var HEAPU32 = getMemory();\\n\";for(r=0;r<e;++r)t+=\"var argType\"+r+\" = requireRegisteredType(HEAPU32[((argTypes)>>2)], 'parameter \"+r+\"');\\nvar arg\"+r+\" = argType\"+r+\".readValueFromPointer(args);\\nargs += argType\"+r+\"['argPackAdvance'];\\nargTypes += 4;\\n\";return new Function(\"requireRegisteredType\",\"Module\",\"valueToHandle\",\"getMemory\",t+\"var obj = new constructor(\"+n+\");\\nreturn valueToHandle(obj);\\n}\\n\")(gn,f,an,(()=>i()))}(n),An[n]=a),a(e,r,t)},v:function(){return an([])},l:function(e){e=tn(e);for(var n=Array(e.length),r=0;r<e.length;r++)n[r]=e[r];return an(n)},e:function(e){return an(vn(e))},k:function(){return an({})},h:function(e){for(var n=tn(e);n.length;){var r=n.pop();n.pop()(r)}rn(e)},j:function(e,n,r){e=tn(e),n=tn(n),r=tn(r),e[n]=r},f:function(e,n){return e=(e=gn(e,\"_emval_take_value\")).readValueFromPointer(n),an(e)},_:function(e,n){e=new Date(1e3*On(e)),o()[n>>2>>>0]=e.getUTCSeconds(),o()[n+4>>2>>>0]=e.getUTCMinutes(),o()[n+8>>2>>>0]=e.getUTCHours(),o()[n+12>>2>>>0]=e.getUTCDate(),o()[n+16>>2>>>0]=e.getUTCMonth(),o()[n+20>>2>>>0]=e.getUTCFullYear()-1900,o()[n+24>>2>>>0]=e.getUTCDay(),e=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,o()[n+28>>2>>>0]=e},$:function(e,n){e=new Date(1e3*On(e)),o()[n>>2>>>0]=e.getSeconds(),o()[n+4>>2>>>0]=e.getMinutes(),o()[n+8>>2>>>0]=e.getHours(),o()[n+12>>2>>>0]=e.getDate(),o()[n+16>>2>>>0]=e.getMonth(),o()[n+20>>2>>>0]=e.getFullYear()-1900,o()[n+24>>2>>>0]=e.getDay();var r=0|kn(e);o()[n+28>>2>>>0]=r,o()[n+36>>2>>>0]=-60*e.getTimezoneOffset(),r=new Date(e.getFullYear(),6,1).getTimezoneOffset();var t=new Date(e.getFullYear(),0,1).getTimezoneOffset();e=0|(r!=t&&e.getTimezoneOffset()==Math.min(t,r)),o()[n+32>>2>>>0]=e},aa:function(e){var n=new Date(o()[e+20>>2>>>0]+1900,o()[e+16>>2>>>0],o()[e+12>>2>>>0],o()[e+8>>2>>>0],o()[e+4>>2>>>0],o()[e>>2>>>0],0),r=o()[e+32>>2>>>0],t=n.getTimezoneOffset(),a=new Date(n.getFullYear(),6,1).getTimezoneOffset(),i=new Date(n.getFullYear(),0,1).getTimezoneOffset(),u=Math.min(i,a);return 0>r?o()[e+32>>2>>>0]=Number(a!=i&&u==t):0<r!=(u==t)&&(a=Math.max(i,a),n.setTime(n.getTime()+6e4*((0<r?u:a)-t))),o()[e+24>>2>>>0]=n.getDay(),r=0|kn(n),o()[e+28>>2>>>0]=r,o()[e>>2>>>0]=n.getSeconds(),o()[e+4>>2>>>0]=n.getMinutes(),o()[e+8>>2>>>0]=n.getHours(),o()[e+12>>2>>>0]=n.getDate(),o()[e+16>>2>>>0]=n.getMonth(),o()[e+20>>2>>>0]=n.getYear(),n.getTime()/1e3|0},Y:Fn,Z:Pn,N:function(e,n,r){function t(e){return(e=e.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?e[1]:\"GMT\"}var a=(new Date).getFullYear(),u=new Date(a,0,1),f=new Date(a,6,1);a=u.getTimezoneOffset();var s=f.getTimezoneOffset(),c=Math.max(a,s);i()[e>>2>>>0]=60*c,o()[n>>2>>>0]=Number(a!=s),e=t(u),n=t(f),e=Rn(e),n=Rn(n),s<a?(i()[r>>2>>>0]=e,i()[r+4>>2>>>0]=n):(i()[r>>2>>>0]=n,i()[r+4>>2>>>0]=e)},n:function(){ae(\"\")},va:function(){ae(\"To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html\")},E:function(){},G:function(){return Date.now()},oa:function(){throw $+=1,\"unwind\"},P:function(){return 4294901760},q:En,w:function(){return v?require(\"os\").cpus().length:navigator.hardwareConcurrency},da:function(e,n,r){n/=2,Wn.length=n,r>>=3;for(var t=0;t<n;t++)Wn[t]=B[r+2*t]?B[r+2*t+1]:u()[r+2*t+1>>>0];return Zn[e].apply(null,Wn)},M:function(e){var n=r().length;if((e>>>=0)<=n||4294901760<e)return!1;for(var t=1;4>=t;t*=2){var a=n*(1+.2/t);a=Math.min(a,e+100663296);var o=Math,i=o.min;a=Math.max(e,a),a+=(65536-a%65536)%65536;e:{var u=P.buffer;try{P.grow(i.call(o,4294901760,a)-u.byteLength+65535>>>16),L();var f=1;break e}catch(e){}f=void 0}if(f)return!0}return!1},ha:jn,ia:Hn,V:be,z:Yn,C:Bn,ca:zn,B:Gn,a:P||f.wasmMemory,ma:Vn,p:function(e,n,r,t){return Vn(e,n,r,t)}};!function(){function e(e,n){return e=e.exports,f.asm=e,ye.zb.push(f.asm.Ua),V=f.asm.Xa,X.unshift(f.asm.wa),R=n,ye.Ib((()=>{if(ne--,f.monitorRunDependencies&&f.monitorRunDependencies(ne),0==ne&&(null!==re&&(clearInterval(re),re=null),te)){var e=te;te=null,e()}})),e}var n={a:$n};if(ne++,f.monitorRunDependencies&&f.monitorRunDependencies(ne),f.instantiateWasm)try{return f.instantiateWasm(n,e)}catch(e){k(\"Module.instantiateWasm callback failed with error: \"+e),c(e)}(function(e,n){var r=ee;return M||\"function\"!=typeof WebAssembly.instantiateStreaming||oe(r)||r.startsWith(\"file://\")||v||\"function\"!=typeof fetch?ue(r,e,n):fetch(r,{credentials:\"same-origin\"}).then((t=>WebAssembly.instantiateStreaming(t,e).then(n,(function(t){return k(\"wasm streaming compile failed: \"+t),k(\"falling back to ArrayBuffer instantiation\"),ue(r,e,n)}))))})(n,(function(n){e(n.instance,n.module)})).catch(c)}(),f._OrtInit=function(){return(f._OrtInit=f.asm.xa).apply(null,arguments)},f._OrtGetLastError=function(){return(f._OrtGetLastError=f.asm.ya).apply(null,arguments)},f._OrtCreateSessionOptions=function(){return(f._OrtCreateSessionOptions=f.asm.za).apply(null,arguments)},f._OrtAppendExecutionProvider=function(){return(f._OrtAppendExecutionProvider=f.asm.Aa).apply(null,arguments)},f._OrtAddSessionConfigEntry=function(){return(f._OrtAddSessionConfigEntry=f.asm.Ba).apply(null,arguments)},f._OrtReleaseSessionOptions=function(){return(f._OrtReleaseSessionOptions=f.asm.Ca).apply(null,arguments)},f._OrtCreateSession=function(){return(f._OrtCreateSession=f.asm.Da).apply(null,arguments)},f._OrtReleaseSession=function(){return(f._OrtReleaseSession=f.asm.Ea).apply(null,arguments)},f._OrtGetInputOutputCount=function(){return(f._OrtGetInputOutputCount=f.asm.Fa).apply(null,arguments)},f._OrtGetInputName=function(){return(f._OrtGetInputName=f.asm.Ga).apply(null,arguments)},f._OrtGetOutputName=function(){return(f._OrtGetOutputName=f.asm.Ha).apply(null,arguments)},f._OrtFree=function(){return(f._OrtFree=f.asm.Ia).apply(null,arguments)},f._OrtCreateTensor=function(){return(f._OrtCreateTensor=f.asm.Ja).apply(null,arguments)},f._OrtGetTensorData=function(){return(f._OrtGetTensorData=f.asm.Ka).apply(null,arguments)},f._OrtReleaseTensor=function(){return(f._OrtReleaseTensor=f.asm.La).apply(null,arguments)},f._OrtCreateRunOptions=function(){return(f._OrtCreateRunOptions=f.asm.Ma).apply(null,arguments)},f._OrtAddRunConfigEntry=function(){return(f._OrtAddRunConfigEntry=f.asm.Na).apply(null,arguments)},f._OrtReleaseRunOptions=function(){return(f._OrtReleaseRunOptions=f.asm.Oa).apply(null,arguments)},f._OrtRun=function(){return(f._OrtRun=f.asm.Pa).apply(null,arguments)},f._OrtEndProfiling=function(){return(f._OrtEndProfiling=f.asm.Qa).apply(null,arguments)};var Kn=f._pthread_self=function(){return(Kn=f._pthread_self=f.asm.Ra).apply(null,arguments)},Qn=f._malloc=function(){return(Qn=f._malloc=f.asm.Sa).apply(null,arguments)},er=f._free=function(){return(er=f._free=f.asm.Ta).apply(null,arguments)};function nr(){return(nr=f.asm.Va).apply(null,arguments)}f.__emscripten_tls_init=function(){return(f.__emscripten_tls_init=f.asm.Ua).apply(null,arguments)},f.__embind_initialize_bindings=function(){return(f.__embind_initialize_bindings=f.asm.Wa).apply(null,arguments)};var rr=f.__emscripten_thread_init=function(){return(rr=f.__emscripten_thread_init=f.asm.Ya).apply(null,arguments)};function tr(){return(tr=f.asm._a).apply(null,arguments)}function ar(){return(ar=f.asm.$a).apply(null,arguments)}f.__emscripten_thread_crashed=function(){return(f.__emscripten_thread_crashed=f.asm.Za).apply(null,arguments)};var or,ir=f.__emscripten_thread_exit=function(){return(ir=f.__emscripten_thread_exit=f.asm.ab).apply(null,arguments)},ur=f.__emscripten_check_mailbox=function(){return(ur=f.__emscripten_check_mailbox=f.asm.bb).apply(null,arguments)};function fr(){return(fr=f.asm.cb).apply(null,arguments)}function sr(){return(sr=f.asm.db).apply(null,arguments)}function cr(){return(cr=f.asm.eb).apply(null,arguments)}function lr(){return(lr=f.asm.fb).apply(null,arguments)}function pr(){function e(){if(!or&&(or=!0,f.calledRun=!0,!G)&&(w||ve(X),s(f),f.onRuntimeInitialized&&f.onRuntimeInitialized(),!w)){if(f.postRun)for(\"function\"==typeof f.postRun&&(f.postRun=[f.postRun]);f.postRun.length;){var e=f.postRun.shift();Z.unshift(e)}ve(Z)}}if(!(0<ne))if(w)s(f),w||ve(X),startWorker(f);else{if(f.preRun)for(\"function\"==typeof f.preRun&&(f.preRun=[f.preRun]);f.preRun.length;)Q();ve(J),0<ne||(f.setStatus?(f.setStatus(\"Running...\"),setTimeout((function(){setTimeout((function(){f.setStatus(\"\")}),1),e()}),1)):e())}}if(f.keepRuntimeAlive=K,f.wasmMemory=P,f.stackAlloc=lr,f.stackSave=sr,f.stackRestore=cr,f.UTF8ToString=he,f.stringToUTF8=ke,f.lengthBytesUTF8=Me,f.ExitStatus=fe,f.PThread=ye,te=function e(){or||pr(),or||(te=e)},f.preInit)for(\"function\"==typeof f.preInit&&(f.preInit=[f.preInit]);0<f.preInit.length;)f.preInit.pop()();return pr(),e.ready});\"object\"==typeof exports&&\"object\"==typeof module?module.exports=e:\"function\"==typeof define&&define.amd?define([],(function(){return e})):\"object\"==typeof exports&&(exports.ortWasmThreaded=e);\n","\nvar ortWasm = (() => {\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\n  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;\n  return (\nfunction(ortWasm = {})  {\n\nvar e;e||(e=typeof ortWasm !== 'undefined' ? ortWasm : {});var aa,m;e.ready=new Promise((a,b)=>{aa=a;m=b});var ba=Object.assign({},e),ca=\"./this.program\",da=\"object\"==typeof window,r=\"function\"==typeof importScripts,ea=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,v=\"\",fa,w,y;\nif(ea){var fs=require(\"fs\"),ha=require(\"path\");v=r?ha.dirname(v)+\"/\":__dirname+\"/\";fa=(a,b)=>{a=a.startsWith(\"file://\")?new URL(a):ha.normalize(a);return fs.readFileSync(a,b?void 0:\"utf8\")};y=a=>{a=fa(a,!0);a.buffer||(a=new Uint8Array(a));return a};w=(a,b,c,d=!0)=>{a=a.startsWith(\"file://\")?new URL(a):ha.normalize(a);fs.readFile(a,d?void 0:\"utf8\",(g,h)=>{g?c(g):b(d?h.buffer:h)})};!e.thisProgram&&1<process.argv.length&&(ca=process.argv[1].replace(/\\\\/g,\"/\"));process.argv.slice(2);e.inspect=()=>\"[Emscripten Module object]\"}else if(da||\nr)r?v=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(v=document.currentScript.src),_scriptDir&&(v=_scriptDir),0!==v.indexOf(\"blob:\")?v=v.substr(0,v.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):v=\"\",fa=a=>{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.send(null);return b.responseText},r&&(y=a=>{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.responseType=\"arraybuffer\";b.send(null);return new Uint8Array(b.response)}),w=(a,b,c)=>{var d=new XMLHttpRequest;d.open(\"GET\",a,!0);d.responseType=\n\"arraybuffer\";d.onload=()=>{200==d.status||0==d.status&&d.response?b(d.response):c()};d.onerror=c;d.send(null)};var ia=e.print||console.log.bind(console),z=e.printErr||console.warn.bind(console);Object.assign(e,ba);ba=null;e.thisProgram&&(ca=e.thisProgram);var A;e.wasmBinary&&(A=e.wasmBinary);var noExitRuntime=e.noExitRuntime||!0;\"object\"!=typeof WebAssembly&&B(\"no native wasm support detected\");var C,ja=!1,D,F,G,I,J,K,ka,la,ma,na;\nfunction oa(){var a=C.buffer;e.HEAP8=D=new Int8Array(a);e.HEAP16=G=new Int16Array(a);e.HEAP32=J=new Int32Array(a);e.HEAPU8=F=new Uint8Array(a);e.HEAPU16=I=new Uint16Array(a);e.HEAPU32=K=new Uint32Array(a);e.HEAPF32=ka=new Float32Array(a);e.HEAPF64=na=new Float64Array(a);e.HEAP64=la=new BigInt64Array(a);e.HEAPU64=ma=new BigUint64Array(a)}var pa=[],qa=[],ra=[];function sa(){var a=e.preRun.shift();pa.unshift(a)}var L=0,ta=null,M=null;\nfunction B(a){if(e.onAbort)e.onAbort(a);a=\"Aborted(\"+a+\")\";z(a);ja=!0;a=new WebAssembly.RuntimeError(a+\". Build with -sASSERTIONS for more info.\");m(a);throw a;}function ua(a){return a.startsWith(\"data:application/octet-stream;base64,\")}var N;N=\"ort-wasm.wasm\";if(!ua(N)){var va=N;N=e.locateFile?e.locateFile(va,v):v+va}function wa(a){try{if(a==N&&A)return new Uint8Array(A);if(y)return y(a);throw\"both async and sync fetching of the wasm failed\";}catch(b){B(b)}}\nfunction xa(a){if(!A&&(da||r)){if(\"function\"==typeof fetch&&!a.startsWith(\"file://\"))return fetch(a,{credentials:\"same-origin\"}).then(b=>{if(!b.ok)throw\"failed to load wasm binary file at '\"+a+\"'\";return b.arrayBuffer()}).catch(()=>wa(a));if(w)return new Promise((b,c)=>{w(a,d=>b(new Uint8Array(d)),c)})}return Promise.resolve().then(()=>wa(a))}function ya(a,b,c){return xa(a).then(d=>WebAssembly.instantiate(d,b)).then(d=>d).then(c,d=>{z(\"failed to asynchronously prepare wasm: \"+d);B(d)})}\nfunction za(a,b){var c=N;return A||\"function\"!=typeof WebAssembly.instantiateStreaming||ua(c)||c.startsWith(\"file://\")||ea||\"function\"!=typeof fetch?ya(c,a,b):fetch(c,{credentials:\"same-origin\"}).then(d=>WebAssembly.instantiateStreaming(d,a).then(b,function(g){z(\"wasm streaming compile failed: \"+g);z(\"falling back to ArrayBuffer instantiation\");return ya(c,a,b)}))}function Aa(a){for(;0<a.length;)a.shift()(e)}\nfunction Ba(a){this.Ja=a-24;this.Wa=function(b){K[this.Ja+4>>2>>>0]=b};this.Va=function(b){K[this.Ja+8>>2>>>0]=b};this.Ra=function(b,c){this.Sa();this.Wa(b);this.Va(c)};this.Sa=function(){K[this.Ja+16>>2>>>0]=0}}var Ca=0,Da=0,Ea=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;\nfunction Fa(a,b,c){b>>>=0;var d=b+c;for(c=b;a[c]&&!(c>=d);)++c;if(16<c-b&&a.buffer&&Ea)return Ea.decode(a.subarray(b,c));for(d=\"\";b<c;){var g=a[b++];if(g&128){var h=a[b++]&63;if(192==(g&224))d+=String.fromCharCode((g&31)<<6|h);else{var l=a[b++]&63;g=224==(g&240)?(g&15)<<12|h<<6|l:(g&7)<<18|h<<12|l<<6|a[b++]&63;65536>g?d+=String.fromCharCode(g):(g-=65536,d+=String.fromCharCode(55296|g>>10,56320|g&1023))}}else d+=String.fromCharCode(g)}return d}function O(a,b){return(a>>>=0)?Fa(F,a,b):\"\"}\nfunction P(a){for(var b=0,c=0;c<a.length;++c){var d=a.charCodeAt(c);127>=d?b++:2047>=d?b+=2:55296<=d&&57343>=d?(b+=4,++c):b+=3}return b}\nfunction Ga(a,b,c,d){c>>>=0;if(!(0<d))return 0;var g=c;d=c+d-1;for(var h=0;h<a.length;++h){var l=a.charCodeAt(h);if(55296<=l&&57343>=l){var k=a.charCodeAt(++h);l=65536+((l&1023)<<10)|k&1023}if(127>=l){if(c>=d)break;b[c++>>>0]=l}else{if(2047>=l){if(c+1>=d)break;b[c++>>>0]=192|l>>6}else{if(65535>=l){if(c+2>=d)break;b[c++>>>0]=224|l>>12}else{if(c+3>=d)break;b[c++>>>0]=240|l>>18;b[c++>>>0]=128|l>>12&63}b[c++>>>0]=128|l>>6&63}b[c++>>>0]=128|l&63}}b[c>>>0]=0;return c-g}\nfunction Ha(a,b,c){return Ga(a,F,b,c)}function Ia(a){if(null===a)return\"null\";var b=typeof a;return\"object\"===b||\"array\"===b||\"function\"===b?a.toString():\"\"+a}var Ja=void 0;function Q(a){for(var b=\"\";F[a>>>0];)b+=Ja[F[a++>>>0]];return b}var Ka={},La={},Ma={};function Na(a){if(void 0===a)return\"_unknown\";a=a.replace(/[^a-zA-Z0-9_]/g,\"$\");var b=a.charCodeAt(0);return 48<=b&&57>=b?\"_\"+a:a}function Oa(a,b){a=Na(a);return{[a]:function(){return b.apply(this,arguments)}}[a]}\nfunction Pa(a){var b=Error,c=Oa(a,function(d){this.name=a;this.message=d;d=Error(d).stack;void 0!==d&&(this.stack=this.toString()+\"\\n\"+d.replace(/^Error(:[^\\n]*)?\\n/,\"\"))});c.prototype=Object.create(b.prototype);c.prototype.constructor=c;c.prototype.toString=function(){return void 0===this.message?this.name:this.name+\": \"+this.message};return c}var Qa=void 0;function R(a){throw new Qa(a);}\nfunction S(a,b,c={}){if(!(\"argPackAdvance\"in b))throw new TypeError(\"registerType registeredInstance requires argPackAdvance\");var d=b.name;a||R('type \"'+d+'\" must have a positive integer typeid pointer');if(La.hasOwnProperty(a)){if(c.Za)return;R(\"Cannot register type '\"+d+\"' twice\")}La[a]=b;delete Ma[a];Ka.hasOwnProperty(a)&&(b=Ka[a],delete Ka[a],b.forEach(g=>g()))}\nfunction Ra(a,b,c){switch(b){case 0:return c?function(d){return D[d>>>0]}:function(d){return F[d>>>0]};case 1:return c?function(d){return G[d>>>1]}:function(d){return I[d>>>1]};case 2:return c?function(d){return J[d>>>2]}:function(d){return K[d>>>2]};case 3:return c?function(d){return la[d>>3]}:function(d){return ma[d>>3]};default:throw new TypeError(\"Unknown integer type: \"+a);}}\nfunction T(a){switch(a){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError(\"Unknown type size: \"+a);}}var U=new function(){this.Ja=[void 0];this.Ra=[];this.get=function(a){return this.Ja[a]};this.Va=function(a){let b=this.Ra.pop()||this.Ja.length;this.Ja[b]=a;return b};this.Wa=function(a){this.Ja[a]=void 0;this.Ra.push(a)}};function Sa(a){a>=U.Sa&&0===--U.get(a).Ya&&U.Wa(a)}\nvar V=a=>{a||R(\"Cannot use deleted val. handle = \"+a);return U.get(a).value},W=a=>{switch(a){case void 0:return 1;case null:return 2;case !0:return 3;case !1:return 4;default:return U.Va({Ya:1,value:a})}};function Ta(a){return this.fromWireType(J[a>>2>>>0])}function Ua(a,b){switch(b){case 2:return function(c){return this.fromWireType(ka[c>>>2])};case 3:return function(c){return this.fromWireType(na[c>>>3])};default:throw new TypeError(\"Unknown float type: \"+a);}}\nvar Va=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf-16le\"):void 0;function Wa(a,b){var c=a>>1;for(var d=c+b/2;!(c>=d)&&I[c>>>0];)++c;c<<=1;if(32<c-a&&Va)return Va.decode(F.subarray(a>>>0,c>>>0));c=\"\";for(d=0;!(d>=b/2);++d){var g=G[a+2*d>>1>>>0];if(0==g)break;c+=String.fromCharCode(g)}return c}function Xa(a,b,c){void 0===c&&(c=2147483647);if(2>c)return 0;c-=2;var d=b;c=c<2*a.length?c/2:a.length;for(var g=0;g<c;++g)G[b>>1>>>0]=a.charCodeAt(g),b+=2;G[b>>1>>>0]=0;return b-d}\nfunction Ya(a){return 2*a.length}function Za(a,b){for(var c=0,d=\"\";!(c>=b/4);){var g=J[a+4*c>>2>>>0];if(0==g)break;++c;65536<=g?(g-=65536,d+=String.fromCharCode(55296|g>>10,56320|g&1023)):d+=String.fromCharCode(g)}return d}function $a(a,b,c){b>>>=0;void 0===c&&(c=2147483647);if(4>c)return 0;var d=b;c=d+c-4;for(var g=0;g<a.length;++g){var h=a.charCodeAt(g);if(55296<=h&&57343>=h){var l=a.charCodeAt(++g);h=65536+((h&1023)<<10)|l&1023}J[b>>2>>>0]=h;b+=4;if(b+4>c)break}J[b>>2>>>0]=0;return b-d}\nfunction ab(a){for(var b=0,c=0;c<a.length;++c){var d=a.charCodeAt(c);55296<=d&&57343>=d&&++c;b+=4}return b}function X(a,b){var c=La[a];if(void 0===c){a=bb(a);var d=Q(a);Y(a);R(b+\" has unknown type \"+d)}return c}var cb={};function db(a){var b=cb[a];return void 0===b?Q(a):b}var eb=[];function gb(){return\"object\"==typeof globalThis?globalThis:Function(\"return this\")()}function hb(a){var b=eb.length;eb.push(a);return b}\nfunction ib(a,b){for(var c=Array(a),d=0;d<a;++d)c[d]=X(K[b+4*d>>2>>>0],\"parameter \"+d);return c}var jb=[];function kb(a){var b=Function;if(!(b instanceof Function))throw new TypeError(\"new_ called with constructor type \"+typeof b+\" which is not a function\");var c=Oa(b.name||\"unknownFunctionName\",function(){});c.prototype=b.prototype;c=new c;a=b.apply(c,a);return a instanceof Object?a:c}\nfunction lb(a){for(var b=\"\",c=0;c<a;++c)b+=(0!==c?\", \":\"\")+\"arg\"+c;var d=\"return function emval_allocator_\"+a+\"(constructor, argTypes, args) {\\n  var HEAPU32 = getMemory();\\n\";for(c=0;c<a;++c)d+=\"var argType\"+c+\" = requireRegisteredType(HEAPU32[((argTypes)>>2)], 'parameter \"+c+\"');\\nvar arg\"+c+\" = argType\"+c+\".readValueFromPointer(args);\\nargs += argType\"+c+\"['argPackAdvance'];\\nargTypes += 4;\\n\";return(new Function(\"requireRegisteredType\",\"Module\",\"valueToHandle\",\"getMemory\",d+(\"var obj = new constructor(\"+\nb+\");\\nreturn valueToHandle(obj);\\n}\\n\")))(X,e,W,()=>K)}var mb={};function Z(a){return 0===a%4&&(0!==a%100||0===a%400)}var nb=[0,31,60,91,121,152,182,213,244,274,305,335],ob=[0,31,59,90,120,151,181,212,243,273,304,334];function pb(a){return(Z(a.getFullYear())?nb:ob)[a.getMonth()]+a.getDate()-1}function qb(a){var b=P(a)+1,c=rb(b);c&&Ha(a,c,b);return c}var sb;sb=ea?()=>{var a=process.hrtime();return 1E3*a[0]+a[1]/1E6}:()=>performance.now();var tb={};\nfunction ub(){if(!vb){var a={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:ca||\"./this.program\"},b;for(b in tb)void 0===tb[b]?delete a[b]:a[b]=tb[b];var c=[];for(b in a)c.push(b+\"=\"+a[b]);vb=c}return vb}var vb,wb=[null,[],[]],xb=[31,29,31,30,31,30,31,31,30,31,30,31],yb=[31,28,31,30,31,30,31,31,30,31,30,31];\nfunction zb(a){var b=Array(P(a)+1);Ga(a,b,0,b.length);return b}\nfunction Ab(a,b,c,d){function g(f,q,t){for(f=\"number\"==typeof f?f.toString():f||\"\";f.length<q;)f=t[0]+f;return f}function h(f,q){return g(f,q,\"0\")}function l(f,q){function t(fb){return 0>fb?-1:0<fb?1:0}var H;0===(H=t(f.getFullYear()-q.getFullYear()))&&0===(H=t(f.getMonth()-q.getMonth()))&&(H=t(f.getDate()-q.getDate()));return H}function k(f){switch(f.getDay()){case 0:return new Date(f.getFullYear()-1,11,29);case 1:return f;case 2:return new Date(f.getFullYear(),0,3);case 3:return new Date(f.getFullYear(),\n0,2);case 4:return new Date(f.getFullYear(),0,1);case 5:return new Date(f.getFullYear()-1,11,31);case 6:return new Date(f.getFullYear()-1,11,30)}}function n(f){var q=f.Oa;for(f=new Date((new Date(f.Pa+1900,0,1)).getTime());0<q;){var t=f.getMonth(),H=(Z(f.getFullYear())?xb:yb)[t];if(q>H-f.getDate())q-=H-f.getDate()+1,f.setDate(1),11>t?f.setMonth(t+1):(f.setMonth(0),f.setFullYear(f.getFullYear()+1));else{f.setDate(f.getDate()+q);break}}t=new Date(f.getFullYear()+1,0,4);q=k(new Date(f.getFullYear(),\n0,4));t=k(t);return 0>=l(q,f)?0>=l(t,f)?f.getFullYear()+1:f.getFullYear():f.getFullYear()-1}var p=J[d+40>>2>>>0];d={cb:J[d>>2>>>0],bb:J[d+4>>2>>>0],Ta:J[d+8>>2>>>0],Xa:J[d+12>>2>>>0],Ua:J[d+16>>2>>>0],Pa:J[d+20>>2>>>0],Na:J[d+24>>2>>>0],Oa:J[d+28>>2>>>0],fb:J[d+32>>2>>>0],ab:J[d+36>>2>>>0],eb:p?O(p):\"\"};c=O(c);p={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\n\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var u in p)c=c.replace(new RegExp(u,\"g\"),p[u]);var x=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),E=\"January February March April May June July August September October November December\".split(\" \");p={\"%a\":function(f){return x[f.Na].substring(0,3)},\"%A\":function(f){return x[f.Na]},\"%b\":function(f){return E[f.Ua].substring(0,\n3)},\"%B\":function(f){return E[f.Ua]},\"%C\":function(f){return h((f.Pa+1900)/100|0,2)},\"%d\":function(f){return h(f.Xa,2)},\"%e\":function(f){return g(f.Xa,2,\" \")},\"%g\":function(f){return n(f).toString().substring(2)},\"%G\":function(f){return n(f)},\"%H\":function(f){return h(f.Ta,2)},\"%I\":function(f){f=f.Ta;0==f?f=12:12<f&&(f-=12);return h(f,2)},\"%j\":function(f){for(var q=0,t=0;t<=f.Ua-1;q+=(Z(f.Pa+1900)?xb:yb)[t++]);return h(f.Xa+q,3)},\"%m\":function(f){return h(f.Ua+1,2)},\"%M\":function(f){return h(f.bb,\n2)},\"%n\":function(){return\"\\n\"},\"%p\":function(f){return 0<=f.Ta&&12>f.Ta?\"AM\":\"PM\"},\"%S\":function(f){return h(f.cb,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(f){return f.Na||7},\"%U\":function(f){return h(Math.floor((f.Oa+7-f.Na)/7),2)},\"%V\":function(f){var q=Math.floor((f.Oa+7-(f.Na+6)%7)/7);2>=(f.Na+371-f.Oa-2)%7&&q++;if(q)53==q&&(t=(f.Na+371-f.Oa)%7,4==t||3==t&&Z(f.Pa)||(q=1));else{q=52;var t=(f.Na+7-f.Oa-1)%7;(4==t||5==t&&Z(f.Pa%400-1))&&q++}return h(q,2)},\"%w\":function(f){return f.Na},\"%W\":function(f){return h(Math.floor((f.Oa+\n7-(f.Na+6)%7)/7),2)},\"%y\":function(f){return(f.Pa+1900).toString().substring(2)},\"%Y\":function(f){return f.Pa+1900},\"%z\":function(f){f=f.ab;var q=0<=f;f=Math.abs(f)/60;return(q?\"+\":\"-\")+String(\"0000\"+(f/60*100+f%60)).slice(-4)},\"%Z\":function(f){return f.eb},\"%%\":function(){return\"%\"}};c=c.replace(/%%/g,\"\\x00\\x00\");for(u in p)c.includes(u)&&(c=c.replace(new RegExp(u,\"g\"),p[u](d)));c=c.replace(/\\0\\0/g,\"%\");u=zb(c);if(u.length>b)return 0;D.set(u,a>>>0);return u.length-1}\nfor(var Bb=Array(256),Cb=0;256>Cb;++Cb)Bb[Cb]=String.fromCharCode(Cb);Ja=Bb;Qa=e.BindingError=Pa(\"BindingError\");e.InternalError=Pa(\"InternalError\");U.Ja.push({value:void 0},{value:null},{value:!0},{value:!1});U.Sa=U.Ja.length;e.count_emval_handles=function(){for(var a=0,b=U.Sa;b<U.Ja.length;++b)void 0!==U.Ja[b]&&++a;return a};\nvar Db={a:function(a,b,c){(new Ba(a)).Ra(b,c);Ca=a;Da++;throw Ca;},da:function(){B(\"To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html\")},v:function(){return 0},ba:function(){},N:function(){},P:function(){},H:function(){return 0},$:function(){},V:function(){},_:function(){},A:function(){},O:function(){},L:function(){},aa:function(){},M:function(){},D:function(a,b,c,d,g){b=Q(b);c=T(c);var h=-1!=b.indexOf(\"u\");h&&(g=(1n<<64n)-1n);S(a,{name:b,\nfromWireType:function(l){return l},toWireType:function(l,k){if(\"bigint\"!=typeof k&&\"number\"!=typeof k)throw new TypeError('Cannot convert \"'+Ia(k)+'\" to '+this.name);if(k<d||k>g)throw new TypeError('Passing a number \"'+Ia(k)+'\" from JS side to C/C++ side to an argument of type \"'+b+'\", which is outside the valid range ['+d+\", \"+g+\"]!\");return k},argPackAdvance:8,readValueFromPointer:Ra(b,c,!h),Qa:null})},ga:function(a,b,c,d,g){var h=T(c);b=Q(b);S(a,{name:b,fromWireType:function(l){return!!l},toWireType:function(l,\nk){return k?d:g},argPackAdvance:8,readValueFromPointer:function(l){if(1===c)var k=D;else if(2===c)k=G;else if(4===c)k=J;else throw new TypeError(\"Unknown boolean type size: \"+b);return this.fromWireType(k[l>>>h])},Qa:null})},fa:function(a,b){b=Q(b);S(a,{name:b,fromWireType:function(c){var d=V(c);Sa(c);return d},toWireType:function(c,d){return W(d)},argPackAdvance:8,readValueFromPointer:Ta,Qa:null})},C:function(a,b,c){c=T(c);b=Q(b);S(a,{name:b,fromWireType:function(d){return d},toWireType:function(d,\ng){return g},argPackAdvance:8,readValueFromPointer:Ua(b,c),Qa:null})},p:function(a,b,c,d,g){b=Q(b);-1===g&&(g=4294967295);g=T(c);var h=k=>k;if(0===d){var l=32-8*c;h=k=>k<<l>>>l}c=b.includes(\"unsigned\")?function(k,n){return n>>>0}:function(k,n){return n};S(a,{name:b,fromWireType:h,toWireType:c,argPackAdvance:8,readValueFromPointer:Ra(b,g,0!==d),Qa:null})},l:function(a,b,c){function d(h){h>>=2;var l=K;return new g(l.buffer,l[h+1>>>0],l[h>>>0])}var g=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,\nUint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array][b];c=Q(c);S(a,{name:c,fromWireType:d,argPackAdvance:8,readValueFromPointer:d},{Za:!0})},E:function(a,b){b=Q(b);var c=\"std::string\"===b;S(a,{name:b,fromWireType:function(d){var g=K[d>>2>>>0],h=d+4;if(c)for(var l=h,k=0;k<=g;++k){var n=h+k;if(k==g||0==F[n>>>0]){l=O(l,n-l);if(void 0===p)var p=l;else p+=String.fromCharCode(0),p+=l;l=n+1}}else{p=Array(g);for(k=0;k<g;++k)p[k]=String.fromCharCode(F[h+k>>>0]);p=p.join(\"\")}Y(d);return p},toWireType:function(d,\ng){g instanceof ArrayBuffer&&(g=new Uint8Array(g));var h=\"string\"==typeof g;h||g instanceof Uint8Array||g instanceof Uint8ClampedArray||g instanceof Int8Array||R(\"Cannot pass non-string to std::string\");var l=c&&h?P(g):g.length;var k=rb(4+l+1);var n=k+4>>>0;K[k>>2>>>0]=l;if(c&&h)Ha(g,n,l+1);else if(h)for(h=0;h<l;++h){var p=g.charCodeAt(h);255<p&&(Y(n),R(\"String has UTF-16 code units that do not fit in 8 bits\"));F[n+h>>>0]=p}else for(h=0;h<l;++h)F[n+h>>>0]=g[h];null!==d&&d.push(Y,k);return k},argPackAdvance:8,\nreadValueFromPointer:Ta,Qa:function(d){Y(d)}})},x:function(a,b,c){c=Q(c);if(2===b){var d=Wa;var g=Xa;var h=Ya;var l=()=>I;var k=1}else 4===b&&(d=Za,g=$a,h=ab,l=()=>K,k=2);S(a,{name:c,fromWireType:function(n){for(var p=K[n>>>2],u=l(),x,E=n+4,f=0;f<=p;++f){var q=n+4+f*b;if(f==p||0==u[q>>>k])E=d(E,q-E),void 0===x?x=E:(x+=String.fromCharCode(0),x+=E),E=q+b}Y(n);return x},toWireType:function(n,p){\"string\"!=typeof p&&R(\"Cannot pass non-string to C++ string type \"+c);var u=h(p),x=rb(4+u+b);x>>>=0;K[x>>>\n2]=u>>k;g(p,x+4,u+b);null!==n&&n.push(Y,x);return x},argPackAdvance:8,readValueFromPointer:Ta,Qa:function(n){Y(n)}})},ha:function(a,b){b=Q(b);S(a,{$a:!0,name:b,argPackAdvance:0,fromWireType:function(){},toWireType:function(){}})},ca:function(){return!0},o:function(a,b,c){a=V(a);b=X(b,\"emval::as\");var d=[],g=W(d);K[c>>2>>>0]=g;return b.toWireType(d,a)},h:function(a,b,c,d,g){a=eb[a];b=V(b);c=db(c);var h=[];K[d>>2>>>0]=W(h);return a(b,c,h,g)},q:function(a,b,c,d){a=eb[a];b=V(b);c=db(c);a(b,c,null,d)},\nb:Sa,F:function(a,b){a=V(a);b=V(b);return a==b},u:function(a){if(0===a)return W(gb());a=db(a);return W(gb()[a])},g:function(a,b){var c=ib(a,b),d=c[0];b=d.name+\"_$\"+c.slice(1).map(function(u){return u.name}).join(\"_\")+\"$\";var g=jb[b];if(void 0!==g)return g;g=[\"retType\"];for(var h=[d],l=\"\",k=0;k<a-1;++k)l+=(0!==k?\", \":\"\")+\"arg\"+k,g.push(\"argType\"+k),h.push(c[1+k]);var n=\"return function \"+Na(\"methodCaller_\"+b)+\"(handle, name, destructors, args) {\\n\",p=0;for(k=0;k<a-1;++k)n+=\"    var arg\"+k+\" = argType\"+\nk+\".readValueFromPointer(args\"+(p?\"+\"+p:\"\")+\");\\n\",p+=c[k+1].argPackAdvance;n+=\"    var rv = handle[name](\"+l+\");\\n\";for(k=0;k<a-1;++k)c[k+1].deleteObject&&(n+=\"    argType\"+k+\".deleteObject(arg\"+k+\");\\n\");d.$a||(n+=\"    return retType.toWireType(destructors, rv);\\n\");g.push(n+\"};\\n\");a=kb(g).apply(null,h);g=hb(a);return jb[b]=g},r:function(a,b){a=V(a);b=V(b);return W(a[b])},c:function(a){4<a&&(U.get(a).Ya+=1)},G:function(a,b,c,d){a=V(a);var g=mb[b];g||(g=lb(b),mb[b]=g);return g(a,c,d)},s:function(){return W([])},\nk:function(a){a=V(a);for(var b=Array(a.length),c=0;c<a.length;c++)b[c]=a[c];return W(b)},d:function(a){return W(db(a))},j:function(){return W({})},f:function(a){for(var b=V(a);b.length;){var c=b.pop();b.pop()(c)}Sa(a)},i:function(a,b,c){a=V(a);b=V(b);c=V(c);a[b]=c},e:function(a,b){a=X(a,\"_emval_take_value\");a=a.readValueFromPointer(b);return W(a)},S:function(a,b){a=new Date(1E3*(K[a>>>2]+4294967296*J[a+4>>>2]));J[b>>2>>>0]=a.getUTCSeconds();J[b+4>>2>>>0]=a.getUTCMinutes();J[b+8>>2>>>0]=a.getUTCHours();\nJ[b+12>>2>>>0]=a.getUTCDate();J[b+16>>2>>>0]=a.getUTCMonth();J[b+20>>2>>>0]=a.getUTCFullYear()-1900;J[b+24>>2>>>0]=a.getUTCDay();J[b+28>>2>>>0]=(a.getTime()-Date.UTC(a.getUTCFullYear(),0,1,0,0,0,0))/864E5|0},T:function(a,b){a=new Date(1E3*(K[a>>>2]+4294967296*J[a+4>>>2]));J[b>>2>>>0]=a.getSeconds();J[b+4>>2>>>0]=a.getMinutes();J[b+8>>2>>>0]=a.getHours();J[b+12>>2>>>0]=a.getDate();J[b+16>>2>>>0]=a.getMonth();J[b+20>>2>>>0]=a.getFullYear()-1900;J[b+24>>2>>>0]=a.getDay();J[b+28>>2>>>0]=pb(a)|0;J[b+36>>\n2>>>0]=-(60*a.getTimezoneOffset());var c=(new Date(a.getFullYear(),6,1)).getTimezoneOffset(),d=(new Date(a.getFullYear(),0,1)).getTimezoneOffset();J[b+32>>2>>>0]=(c!=d&&a.getTimezoneOffset()==Math.min(d,c))|0},U:function(a){var b=new Date(J[a+20>>2>>>0]+1900,J[a+16>>2>>>0],J[a+12>>2>>>0],J[a+8>>2>>>0],J[a+4>>2>>>0],J[a>>2>>>0],0),c=J[a+32>>2>>>0],d=b.getTimezoneOffset(),g=(new Date(b.getFullYear(),6,1)).getTimezoneOffset(),h=(new Date(b.getFullYear(),0,1)).getTimezoneOffset(),l=Math.min(h,g);0>c?\nJ[a+32>>2>>>0]=Number(g!=h&&l==d):0<c!=(l==d)&&(g=Math.max(h,g),b.setTime(b.getTime()+6E4*((0<c?l:g)-d)));J[a+24>>2>>>0]=b.getDay();J[a+28>>2>>>0]=pb(b)|0;J[a>>2>>>0]=b.getSeconds();J[a+4>>2>>>0]=b.getMinutes();J[a+8>>2>>>0]=b.getHours();J[a+12>>2>>>0]=b.getDate();J[a+16>>2>>>0]=b.getMonth();J[a+20>>2>>>0]=b.getYear();return b.getTime()/1E3|0},Q:function(){return-52},R:function(){},J:function(a,b,c){function d(n){return(n=n.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?n[1]:\"GMT\"}var g=(new Date).getFullYear(),\nh=new Date(g,0,1),l=new Date(g,6,1);g=h.getTimezoneOffset();var k=l.getTimezoneOffset();K[a>>2>>>0]=60*Math.max(g,k);J[b>>2>>>0]=Number(g!=k);a=d(h);b=d(l);a=qb(a);b=qb(b);k<g?(K[c>>2>>>0]=a,K[c+4>>2>>>0]=b):(K[c>>2>>>0]=b,K[c+4>>2>>>0]=a)},t:function(){B(\"\")},ia:function(){B(\"To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html\")},B:function(){return Date.now()},K:function(){return 4294901760},n:sb,Z:function(a,b,c){F.copyWithin(a>>>0,b>>>\n0,b+c>>>0)},I:function(a){var b=F.length;a>>>=0;if(4294901760<a)return!1;for(var c=1;4>=c;c*=2){var d=b*(1+.2/c);d=Math.min(d,a+100663296);var g=Math,h=g.min;d=Math.max(a,d);d+=(65536-d%65536)%65536;a:{var l=C.buffer;try{C.grow(h.call(g,4294901760,d)-l.byteLength+65535>>>16);oa();var k=1;break a}catch(n){}k=void 0}if(k)return!0}return!1},X:function(a,b){var c=0;ub().forEach(function(d,g){var h=b+c;g=K[a+4*g>>2>>>0]=h;for(h=0;h<d.length;++h)D[g++>>0>>>0]=d.charCodeAt(h);D[g>>0>>>0]=0;c+=d.length+1});\nreturn 0},Y:function(a,b){var c=ub();K[a>>2>>>0]=c.length;var d=0;c.forEach(function(g){d+=g.length+1});K[b>>2>>>0]=d;return 0},w:function(){return 52},z:function(){return 52},W:function(){return 70},y:function(a,b,c,d){for(var g=0,h=0;h<c;h++){var l=K[b>>2>>>0],k=K[b+4>>2>>>0];b+=8;for(var n=0;n<k;n++){var p=F[l+n>>>0],u=wb[a];0===p||10===p?((1===a?ia:z)(Fa(u,0)),u.length=0):u.push(p)}g+=k}K[d>>2>>>0]=g;return 0},ea:Ab,m:function(a,b,c,d){return Ab(a,b,c,d)}};\n(function(){function a(c){c=c.exports;e.asm=c;C=e.asm.ja;oa();qa.unshift(e.asm.ka);L--;e.monitorRunDependencies&&e.monitorRunDependencies(L);if(0==L&&(null!==ta&&(clearInterval(ta),ta=null),M)){var d=M;M=null;d()}return c}var b={a:Db};L++;e.monitorRunDependencies&&e.monitorRunDependencies(L);if(e.instantiateWasm)try{return e.instantiateWasm(b,a)}catch(c){z(\"Module.instantiateWasm callback failed with error: \"+c),m(c)}za(b,function(c){a(c.instance)}).catch(m);return{}})();\ne._OrtInit=function(){return(e._OrtInit=e.asm.la).apply(null,arguments)};e._OrtGetLastError=function(){return(e._OrtGetLastError=e.asm.ma).apply(null,arguments)};e._OrtCreateSessionOptions=function(){return(e._OrtCreateSessionOptions=e.asm.na).apply(null,arguments)};e._OrtAppendExecutionProvider=function(){return(e._OrtAppendExecutionProvider=e.asm.oa).apply(null,arguments)};e._OrtAddSessionConfigEntry=function(){return(e._OrtAddSessionConfigEntry=e.asm.pa).apply(null,arguments)};\ne._OrtReleaseSessionOptions=function(){return(e._OrtReleaseSessionOptions=e.asm.qa).apply(null,arguments)};e._OrtCreateSession=function(){return(e._OrtCreateSession=e.asm.ra).apply(null,arguments)};e._OrtReleaseSession=function(){return(e._OrtReleaseSession=e.asm.sa).apply(null,arguments)};e._OrtGetInputOutputCount=function(){return(e._OrtGetInputOutputCount=e.asm.ta).apply(null,arguments)};e._OrtGetInputName=function(){return(e._OrtGetInputName=e.asm.ua).apply(null,arguments)};\ne._OrtGetOutputName=function(){return(e._OrtGetOutputName=e.asm.va).apply(null,arguments)};e._OrtFree=function(){return(e._OrtFree=e.asm.wa).apply(null,arguments)};e._OrtCreateTensor=function(){return(e._OrtCreateTensor=e.asm.xa).apply(null,arguments)};e._OrtGetTensorData=function(){return(e._OrtGetTensorData=e.asm.ya).apply(null,arguments)};e._OrtReleaseTensor=function(){return(e._OrtReleaseTensor=e.asm.za).apply(null,arguments)};\ne._OrtCreateRunOptions=function(){return(e._OrtCreateRunOptions=e.asm.Aa).apply(null,arguments)};e._OrtAddRunConfigEntry=function(){return(e._OrtAddRunConfigEntry=e.asm.Ba).apply(null,arguments)};e._OrtReleaseRunOptions=function(){return(e._OrtReleaseRunOptions=e.asm.Ca).apply(null,arguments)};e._OrtRun=function(){return(e._OrtRun=e.asm.Da).apply(null,arguments)};e._OrtEndProfiling=function(){return(e._OrtEndProfiling=e.asm.Ea).apply(null,arguments)};\nvar rb=e._malloc=function(){return(rb=e._malloc=e.asm.Fa).apply(null,arguments)},Y=e._free=function(){return(Y=e._free=e.asm.Ga).apply(null,arguments)};function bb(){return(bb=e.asm.Ha).apply(null,arguments)}e.__embind_initialize_bindings=function(){return(e.__embind_initialize_bindings=e.asm.Ia).apply(null,arguments)};function Eb(){return(Eb=e.asm.Ka).apply(null,arguments)}function Fb(){return(Fb=e.asm.La).apply(null,arguments)}function Gb(){return(Gb=e.asm.Ma).apply(null,arguments)}\ne.stackAlloc=Gb;e.stackSave=Eb;e.stackRestore=Fb;e.UTF8ToString=O;e.stringToUTF8=Ha;e.lengthBytesUTF8=P;var Hb;M=function Ib(){Hb||Jb();Hb||(M=Ib)};\nfunction Jb(){function a(){if(!Hb&&(Hb=!0,e.calledRun=!0,!ja)){Aa(qa);aa(e);if(e.onRuntimeInitialized)e.onRuntimeInitialized();if(e.postRun)for(\"function\"==typeof e.postRun&&(e.postRun=[e.postRun]);e.postRun.length;){var b=e.postRun.shift();ra.unshift(b)}Aa(ra)}}if(!(0<L)){if(e.preRun)for(\"function\"==typeof e.preRun&&(e.preRun=[e.preRun]);e.preRun.length;)sa();Aa(pa);0<L||(e.setStatus?(e.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){e.setStatus(\"\")},1);a()},1)):a())}}\nif(e.preInit)for(\"function\"==typeof e.preInit&&(e.preInit=[e.preInit]);0<e.preInit.length;)e.preInit.pop()();Jb();\n\n\n  return ortWasm.ready\n}\n\n);\n})();\nif (typeof exports === 'object' && typeof module === 'object')\n  module.exports = ortWasm;\nelse if (typeof define === 'function' && define['amd'])\n  define([], function() { return ortWasm; });\nelse if (typeof exports === 'object')\n  exports[\"ortWasm\"] = ortWasm;\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nexports.__esModule = true;\r\nvar Guid = /** @class */ (function () {\r\n    function Guid(guid) {\r\n        if (!guid) {\r\n            throw new TypeError(\"Invalid argument; `value` has no value.\");\r\n        }\r\n        this.value = Guid.EMPTY;\r\n        if (guid && Guid.isGuid(guid)) {\r\n            this.value = guid;\r\n        }\r\n    }\r\n    Guid.isGuid = function (guid) {\r\n        var value = guid.toString();\r\n        return guid && (guid instanceof Guid || Guid.validator.test(value));\r\n    };\r\n    Guid.create = function () {\r\n        return new Guid([Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\"));\r\n    };\r\n    Guid.createEmpty = function () {\r\n        return new Guid(\"emptyguid\");\r\n    };\r\n    Guid.parse = function (guid) {\r\n        return new Guid(guid);\r\n    };\r\n    Guid.raw = function () {\r\n        return [Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\");\r\n    };\r\n    Guid.gen = function (count) {\r\n        var out = \"\";\r\n        for (var i = 0; i < count; i++) {\r\n            // tslint:disable-next-line:no-bitwise\r\n            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n        }\r\n        return out;\r\n    };\r\n    Guid.prototype.equals = function (other) {\r\n        // Comparing string `value` against provided `guid` will auto-call\r\n        // toString on `guid` for comparison\r\n        return Guid.isGuid(other) && this.value === other.toString();\r\n    };\r\n    Guid.prototype.isEmpty = function () {\r\n        return this.value === Guid.EMPTY;\r\n    };\r\n    Guid.prototype.toString = function () {\r\n        return this.value;\r\n    };\r\n    Guid.prototype.toJSON = function () {\r\n        return {\r\n            value: this.value\r\n        };\r\n    };\r\n    Guid.validator = new RegExp(\"^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$\", \"i\");\r\n    Guid.EMPTY = \"00000000-0000-0000-0000-000000000000\";\r\n    return Guid;\r\n}());\r\nexports.Guid = Guid;\r\n","// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available across modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    CustomError.prototype = Object.create(Error.prototype, {\n        constructor: {\n            value: CustomError,\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n        name: {\n            get: function get() { return name; },\n            set: undefined,\n            enumerable: false,\n            // configurable: false would accurately preserve the behavior of\n            // the original, but I'm guessing that was not intentional.\n            // For an actual error subclass, this property would\n            // be configurable.\n            configurable: true,\n        },\n        toString: {\n            value: function value() { return this.name + \": \" + this.message; },\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n    });\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.resolveBackend = exports.registerBackend = void 0;\nconst backends = {};\nconst backendsSortedByPriority = [];\n/**\n * Register a backend.\n *\n * @param name - the name as a key to lookup as an execution provider.\n * @param backend - the backend object.\n * @param priority - an integer indicating the priority of the backend. Higher number means higher priority. if priority\n * < 0, it will be considered as a 'beta' version and will not be used as a fallback backend by default.\n *\n * @internal\n */\nconst registerBackend = (name, backend, priority) => {\n    if (backend && typeof backend.init === 'function' && typeof backend.createSessionHandler === 'function') {\n        const currentBackend = backends[name];\n        if (currentBackend === undefined) {\n            backends[name] = { backend, priority };\n        }\n        else if (currentBackend.priority > priority) {\n            // same name is already registered with a higher priority. skip registeration.\n            return;\n        }\n        else if (currentBackend.priority === priority) {\n            if (currentBackend.backend !== backend) {\n                throw new Error(`cannot register backend \"${name}\" using priority ${priority}`);\n            }\n        }\n        if (priority >= 0) {\n            const i = backendsSortedByPriority.indexOf(name);\n            if (i !== -1) {\n                backendsSortedByPriority.splice(i, 1);\n            }\n            for (let i = 0; i < backendsSortedByPriority.length; i++) {\n                if (backends[backendsSortedByPriority[i]].priority <= priority) {\n                    backendsSortedByPriority.splice(i, 0, name);\n                    return;\n                }\n            }\n            backendsSortedByPriority.push(name);\n        }\n        return;\n    }\n    throw new TypeError('not a valid backend');\n};\nexports.registerBackend = registerBackend;\n/**\n * Resolve backend by specified hints.\n *\n * @param backendHints - a list of execution provider names to lookup. If omitted use registered backends as list.\n * @returns a promise that resolves to the backend.\n *\n * @internal\n */\nconst resolveBackend = async (backendHints) => {\n    const backendNames = backendHints.length === 0 ? backendsSortedByPriority : backendHints;\n    const errors = [];\n    for (const backendName of backendNames) {\n        const backendInfo = backends[backendName];\n        if (backendInfo) {\n            if (backendInfo.initialized) {\n                return backendInfo.backend;\n            }\n            else if (backendInfo.aborted) {\n                continue; // current backend is unavailable; try next\n            }\n            const isInitializing = !!backendInfo.initPromise;\n            try {\n                if (!isInitializing) {\n                    backendInfo.initPromise = backendInfo.backend.init();\n                }\n                await backendInfo.initPromise;\n                backendInfo.initialized = true;\n                return backendInfo.backend;\n            }\n            catch (e) {\n                if (!isInitializing) {\n                    errors.push({ name: backendName, err: e });\n                }\n                backendInfo.aborted = true;\n            }\n            finally {\n                delete backendInfo.initPromise;\n            }\n        }\n    }\n    throw new Error(`no available backend found. ERR: ${errors.map(e => `[${e.name}] ${e.err}`).join(', ')}`);\n};\nexports.resolveBackend = resolveBackend;\n//# sourceMappingURL=backend-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.registerBackend = void 0;\nvar backend_impl_js_1 = require(\"./backend-impl.js\");\nObject.defineProperty(exports, \"registerBackend\", { enumerable: true, get: function () { return backend_impl_js_1.registerBackend; } });\n//# sourceMappingURL=backend.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.env = void 0;\nconst version_js_1 = require(\"./version.js\");\nlet logLevelValue = 'warning';\nexports.env = {\n    wasm: {},\n    webgl: {},\n    webgpu: {},\n    versions: { common: version_js_1.version },\n    set logLevel(value) {\n        if (value === undefined) {\n            return;\n        }\n        if (typeof value !== 'string' || ['verbose', 'info', 'warning', 'error', 'fatal'].indexOf(value) === -1) {\n            throw new Error(`Unsupported logging level: ${value}`);\n        }\n        logLevelValue = value;\n    },\n    get logLevel() {\n        return logLevelValue;\n    },\n};\n// set property 'logLevel' so that they can be correctly transferred to worker by `postMessage()`.\nObject.defineProperty(exports.env, 'logLevel', { enumerable: true });\n//# sourceMappingURL=env-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.env = void 0;\nconst env_impl_js_1 = require(\"./env-impl.js\");\n/**\n * Represent a set of flags as a global singleton.\n */\nexports.env = env_impl_js_1.env;\n//# sourceMappingURL=env.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * # ONNX Runtime JavaScript API\n *\n * ONNX Runtime JavaScript API is a unified API for all JavaScript usages, including the following NPM packages:\n *\n * - [onnxruntime-node](https://www.npmjs.com/package/onnxruntime-node)\n * - [onnxruntime-web](https://www.npmjs.com/package/onnxruntime-web)\n * - [onnxruntime-react-native](https://www.npmjs.com/package/onnxruntime-react-native)\n *\n * See also:\n * - [Get Started](https://onnxruntime.ai/docs/get-started/with-javascript.html)\n * - [Inference examples](https://github.com/microsoft/onnxruntime-inference-examples/tree/main/js)\n *\n * @packageDocumentation\n */\n__exportStar(require(\"./backend.js\"), exports);\n__exportStar(require(\"./env.js\"), exports);\n__exportStar(require(\"./inference-session.js\"), exports);\n__exportStar(require(\"./tensor.js\"), exports);\n__exportStar(require(\"./onnx-value.js\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InferenceSession = void 0;\nconst backend_impl_js_1 = require(\"./backend-impl.js\");\nconst tensor_js_1 = require(\"./tensor.js\");\nclass InferenceSession {\n    constructor(handler) {\n        this.handler = handler;\n    }\n    async run(feeds, arg1, arg2) {\n        const fetches = {};\n        let options = {};\n        // check inputs\n        if (typeof feeds !== 'object' || feeds === null || feeds instanceof tensor_js_1.Tensor || Array.isArray(feeds)) {\n            throw new TypeError('\\'feeds\\' must be an object that use input names as keys and OnnxValue as corresponding values.');\n        }\n        let isFetchesEmpty = true;\n        // determine which override is being used\n        if (typeof arg1 === 'object') {\n            if (arg1 === null) {\n                throw new TypeError('Unexpected argument[1]: cannot be null.');\n            }\n            if (arg1 instanceof tensor_js_1.Tensor) {\n                throw new TypeError('\\'fetches\\' cannot be a Tensor');\n            }\n            if (Array.isArray(arg1)) {\n                if (arg1.length === 0) {\n                    throw new TypeError('\\'fetches\\' cannot be an empty array.');\n                }\n                isFetchesEmpty = false;\n                // output names\n                for (const name of arg1) {\n                    if (typeof name !== 'string') {\n                        throw new TypeError('\\'fetches\\' must be a string array or an object.');\n                    }\n                    if (this.outputNames.indexOf(name) === -1) {\n                        throw new RangeError(`'fetches' contains invalid output name: ${name}.`);\n                    }\n                    fetches[name] = null;\n                }\n                if (typeof arg2 === 'object' && arg2 !== null) {\n                    options = arg2;\n                }\n                else if (typeof arg2 !== 'undefined') {\n                    throw new TypeError('\\'options\\' must be an object.');\n                }\n            }\n            else {\n                // decide whether arg1 is fetches or options\n                // if any output name is present and its value is valid OnnxValue, we consider it fetches\n                let isFetches = false;\n                const arg1Keys = Object.getOwnPropertyNames(arg1);\n                for (const name of this.outputNames) {\n                    if (arg1Keys.indexOf(name) !== -1) {\n                        const v = arg1[name];\n                        if (v === null || v instanceof tensor_js_1.Tensor) {\n                            isFetches = true;\n                            isFetchesEmpty = false;\n                            fetches[name] = v;\n                        }\n                    }\n                }\n                if (isFetches) {\n                    if (typeof arg2 === 'object' && arg2 !== null) {\n                        options = arg2;\n                    }\n                    else if (typeof arg2 !== 'undefined') {\n                        throw new TypeError('\\'options\\' must be an object.');\n                    }\n                }\n                else {\n                    options = arg1;\n                }\n            }\n        }\n        else if (typeof arg1 !== 'undefined') {\n            throw new TypeError('Unexpected argument[1]: must be \\'fetches\\' or \\'options\\'.');\n        }\n        // check if all inputs are in feed\n        for (const name of this.inputNames) {\n            if (typeof feeds[name] === 'undefined') {\n                throw new Error(`input '${name}' is missing in 'feeds'.`);\n            }\n        }\n        // if no fetches is specified, we use the full output names list\n        if (isFetchesEmpty) {\n            for (const name of this.outputNames) {\n                fetches[name] = null;\n            }\n        }\n        // feeds, fetches and options are prepared\n        const results = await this.handler.run(feeds, fetches, options);\n        const returnValue = {};\n        for (const key in results) {\n            if (Object.hasOwnProperty.call(results, key)) {\n                returnValue[key] = new tensor_js_1.Tensor(results[key].type, results[key].data, results[key].dims);\n            }\n        }\n        return returnValue;\n    }\n    async release() {\n        return this.handler.dispose();\n    }\n    static async create(arg0, arg1, arg2, arg3) {\n        // either load from a file or buffer\n        let filePathOrUint8Array;\n        let options = {};\n        if (typeof arg0 === 'string') {\n            filePathOrUint8Array = arg0;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n        }\n        else if (arg0 instanceof Uint8Array) {\n            filePathOrUint8Array = arg0;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n        }\n        else if (arg0 instanceof ArrayBuffer ||\n            (typeof SharedArrayBuffer !== 'undefined' && arg0 instanceof SharedArrayBuffer)) {\n            const buffer = arg0;\n            let byteOffset = 0;\n            let byteLength = arg0.byteLength;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 === 'number') {\n                byteOffset = arg1;\n                if (!Number.isSafeInteger(byteOffset)) {\n                    throw new RangeError('\\'byteOffset\\' must be an integer.');\n                }\n                if (byteOffset < 0 || byteOffset >= buffer.byteLength) {\n                    throw new RangeError(`'byteOffset' is out of range [0, ${buffer.byteLength}).`);\n                }\n                byteLength = arg0.byteLength - byteOffset;\n                if (typeof arg2 === 'number') {\n                    byteLength = arg2;\n                    if (!Number.isSafeInteger(byteLength)) {\n                        throw new RangeError('\\'byteLength\\' must be an integer.');\n                    }\n                    if (byteLength <= 0 || byteOffset + byteLength > buffer.byteLength) {\n                        throw new RangeError(`'byteLength' is out of range (0, ${buffer.byteLength - byteOffset}].`);\n                    }\n                    if (typeof arg3 === 'object' && arg3 !== null) {\n                        options = arg3;\n                    }\n                    else if (typeof arg3 !== 'undefined') {\n                        throw new TypeError('\\'options\\' must be an object.');\n                    }\n                }\n                else if (typeof arg2 !== 'undefined') {\n                    throw new TypeError('\\'byteLength\\' must be a number.');\n                }\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n            filePathOrUint8Array = new Uint8Array(buffer, byteOffset, byteLength);\n        }\n        else {\n            throw new TypeError('Unexpected argument[0]: must be \\'path\\' or \\'buffer\\'.');\n        }\n        // get backend hints\n        const eps = options.executionProviders || [];\n        const backendHints = eps.map(i => typeof i === 'string' ? i : i.name);\n        const backend = await (0, backend_impl_js_1.resolveBackend)(backendHints);\n        const handler = await backend.createSessionHandler(filePathOrUint8Array, options);\n        return new InferenceSession(handler);\n    }\n    startProfiling() {\n        this.handler.startProfiling();\n    }\n    endProfiling() {\n        this.handler.endProfiling();\n    }\n    get inputNames() {\n        return this.handler.inputNames;\n    }\n    get outputNames() {\n        return this.handler.outputNames;\n    }\n}\nexports.InferenceSession = InferenceSession;\n//# sourceMappingURL=inference-session-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InferenceSession = void 0;\nconst inference_session_impl_js_1 = require(\"./inference-session-impl.js\");\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexports.InferenceSession = inference_session_impl_js_1.InferenceSession;\n//# sourceMappingURL=inference-session.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=onnx-value.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.tensorToImageData = exports.tensorToDataURL = void 0;\n/**\n * implementation of Tensor.toDataURL()\n */\nconst tensorToDataURL = (tensor, options) => {\n    const canvas = document.createElement('canvas');\n    canvas.width = tensor.dims[3];\n    canvas.height = tensor.dims[2];\n    const pixels2DContext = canvas.getContext('2d');\n    if (pixels2DContext != null) {\n        // Default values for height and width & format\n        let width;\n        let height;\n        if (options?.tensorLayout !== undefined && options.tensorLayout === 'NHWC') {\n            width = tensor.dims[2];\n            height = tensor.dims[3];\n        }\n        else { // Default layout is NCWH\n            width = tensor.dims[3];\n            height = tensor.dims[2];\n        }\n        const inputformat = options?.format !== undefined ? options.format : 'RGB';\n        const norm = options?.norm;\n        let normMean;\n        let normBias;\n        if (norm === undefined || norm.mean === undefined) {\n            normMean = [255, 255, 255, 255];\n        }\n        else {\n            if (typeof (norm.mean) === 'number') {\n                normMean = [norm.mean, norm.mean, norm.mean, norm.mean];\n            }\n            else {\n                normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 0];\n                if (norm.mean[3] !== undefined) {\n                    normMean[3] = norm.mean[3];\n                }\n            }\n        }\n        if (norm === undefined || norm.bias === undefined) {\n            normBias = [0, 0, 0, 0];\n        }\n        else {\n            if (typeof (norm.bias) === 'number') {\n                normBias = [norm.bias, norm.bias, norm.bias, norm.bias];\n            }\n            else {\n                normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];\n                if (norm.bias[3] !== undefined) {\n                    normBias[3] = norm.bias[3];\n                }\n            }\n        }\n        const stride = height * width;\n        // Default pointer assignments\n        let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;\n        // Updating the pointer assignments based on the input image format\n        if (inputformat === 'RGBA') {\n            rTensorPointer = 0;\n            gTensorPointer = stride;\n            bTensorPointer = stride * 2;\n            aTensorPointer = stride * 3;\n        }\n        else if (inputformat === 'RGB') {\n            rTensorPointer = 0;\n            gTensorPointer = stride;\n            bTensorPointer = stride * 2;\n        }\n        else if (inputformat === 'RBG') {\n            rTensorPointer = 0;\n            bTensorPointer = stride;\n            gTensorPointer = stride * 2;\n        }\n        for (let i = 0; i < height; i++) {\n            for (let j = 0; j < width; j++) {\n                const R = (tensor.data[rTensorPointer++] - normBias[0]) * normMean[0]; // R value\n                const G = (tensor.data[gTensorPointer++] - normBias[1]) * normMean[1]; // G value\n                const B = (tensor.data[bTensorPointer++] - normBias[2]) * normMean[2]; // B value\n                const A = aTensorPointer === -1 ?\n                    255 :\n                    (tensor.data[aTensorPointer++] - normBias[3]) * normMean[3]; // A value\n                // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n                pixels2DContext.fillStyle = 'rgba(' + R + ',' + G + ',' + B + ',' + A + ')';\n                pixels2DContext.fillRect(j, i, 1, 1);\n            }\n        }\n        return canvas.toDataURL();\n    }\n    else {\n        throw new Error('Can not access image data');\n    }\n};\nexports.tensorToDataURL = tensorToDataURL;\n/**\n * implementation of Tensor.toImageData()\n */\nconst tensorToImageData = (tensor, options) => {\n    const pixels2DContext = document.createElement('canvas').getContext('2d');\n    let image;\n    if (pixels2DContext != null) {\n        // Default values for height and width & format\n        let width;\n        let height;\n        let channels;\n        if (options?.tensorLayout !== undefined && options.tensorLayout === 'NHWC') {\n            width = tensor.dims[2];\n            height = tensor.dims[1];\n            channels = tensor.dims[3];\n        }\n        else { // Default layout is NCWH\n            width = tensor.dims[3];\n            height = tensor.dims[2];\n            channels = tensor.dims[1];\n        }\n        const inputformat = options !== undefined ? (options.format !== undefined ? options.format : 'RGB') : 'RGB';\n        const norm = options?.norm;\n        let normMean;\n        let normBias;\n        if (norm === undefined || norm.mean === undefined) {\n            normMean = [255, 255, 255, 255];\n        }\n        else {\n            if (typeof (norm.mean) === 'number') {\n                normMean = [norm.mean, norm.mean, norm.mean, norm.mean];\n            }\n            else {\n                normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 255];\n                if (norm.mean[3] !== undefined) {\n                    normMean[3] = norm.mean[3];\n                }\n            }\n        }\n        if (norm === undefined || norm.bias === undefined) {\n            normBias = [0, 0, 0, 0];\n        }\n        else {\n            if (typeof (norm.bias) === 'number') {\n                normBias = [norm.bias, norm.bias, norm.bias, norm.bias];\n            }\n            else {\n                normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];\n                if (norm.bias[3] !== undefined) {\n                    normBias[3] = norm.bias[3];\n                }\n            }\n        }\n        const stride = height * width;\n        if (options !== undefined) {\n            if (options.format !== undefined && (channels === 4 && options.format !== 'RGBA') ||\n                (channels === 3 && (options.format !== 'RGB' && options.format !== 'BGR'))) {\n                throw new Error('Tensor format doesn\\'t match input tensor dims');\n            }\n        }\n        // Default pointer assignments\n        const step = 4;\n        let rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;\n        let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;\n        // Updating the pointer assignments based on the input image format\n        if (inputformat === 'RGBA') {\n            rTensorPointer = 0;\n            gTensorPointer = stride;\n            bTensorPointer = stride * 2;\n            aTensorPointer = stride * 3;\n        }\n        else if (inputformat === 'RGB') {\n            rTensorPointer = 0;\n            gTensorPointer = stride;\n            bTensorPointer = stride * 2;\n        }\n        else if (inputformat === 'RBG') {\n            rTensorPointer = 0;\n            bTensorPointer = stride;\n            gTensorPointer = stride * 2;\n        }\n        image = pixels2DContext.createImageData(width, height);\n        for (let i = 0; i < height * width; rImagePointer += step, gImagePointer += step, bImagePointer += step, aImagePointer += step, i++) {\n            image.data[rImagePointer] = (tensor.data[rTensorPointer++] - normBias[0]) * normMean[0]; // R value\n            image.data[gImagePointer] = (tensor.data[gTensorPointer++] - normBias[1]) * normMean[1]; // G value\n            image.data[bImagePointer] = (tensor.data[bTensorPointer++] - normBias[2]) * normMean[2]; // B value\n            image.data[aImagePointer] = aTensorPointer === -1 ?\n                255 :\n                (tensor.data[aTensorPointer++] - normBias[3]) * normMean[3]; // A value\n        }\n    }\n    else {\n        throw new Error('Can not access image data');\n    }\n    return image;\n};\nexports.tensorToImageData = tensorToImageData;\n//# sourceMappingURL=tensor-conversion-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.tensorFromImage = exports.bufferToTensor = void 0;\nconst tensor_js_1 = require(\"./tensor.js\");\n/**\n * Create a new tensor object from image object\n *\n * @param buffer - Extracted image buffer data - assuming RGBA format\n * @param imageFormat - input image configuration - required configurations height, width, format\n * @param tensorFormat - output tensor configuration - Default is RGB format\n */\nconst bufferToTensor = (buffer, options) => {\n    if (buffer === undefined) {\n        throw new Error('Image buffer must be defined');\n    }\n    if (options.height === undefined || options.width === undefined) {\n        throw new Error('Image height and width must be defined');\n    }\n    if (options.tensorLayout === 'NHWC') {\n        throw new Error('NHWC Tensor layout is not supported yet');\n    }\n    const { height, width } = options;\n    const norm = options.norm ?? { mean: 255, bias: 0 };\n    let normMean;\n    let normBias;\n    if (typeof (norm.mean) === 'number') {\n        normMean = [norm.mean, norm.mean, norm.mean, norm.mean];\n    }\n    else {\n        normMean = [norm.mean[0], norm.mean[1], norm.mean[2], norm.mean[3] ?? 255];\n    }\n    if (typeof (norm.bias) === 'number') {\n        normBias = [norm.bias, norm.bias, norm.bias, norm.bias];\n    }\n    else {\n        normBias = [norm.bias[0], norm.bias[1], norm.bias[2], norm.bias[3] ?? 0];\n    }\n    const inputformat = options.format !== undefined ? options.format : 'RGBA';\n    // default value is RGBA since imagedata and HTMLImageElement uses it\n    const outputformat = options.tensorFormat !== undefined ?\n        (options.tensorFormat !== undefined ? options.tensorFormat : 'RGB') :\n        'RGB';\n    const stride = height * width;\n    const float32Data = outputformat === 'RGBA' ? new Float32Array(stride * 4) : new Float32Array(stride * 3);\n    // Default pointer assignments\n    let step = 4, rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;\n    let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;\n    // Updating the pointer assignments based on the input image format\n    if (inputformat === 'RGB') {\n        step = 3;\n        rImagePointer = 0;\n        gImagePointer = 1;\n        bImagePointer = 2;\n        aImagePointer = -1;\n    }\n    // Updating the pointer assignments based on the output tensor format\n    if (outputformat === 'RGBA') {\n        aTensorPointer = stride * 3;\n    }\n    else if (outputformat === 'RBG') {\n        rTensorPointer = 0;\n        bTensorPointer = stride;\n        gTensorPointer = stride * 2;\n    }\n    else if (outputformat === 'BGR') {\n        bTensorPointer = 0;\n        gTensorPointer = stride;\n        rTensorPointer = stride * 2;\n    }\n    for (let i = 0; i < stride; i++, rImagePointer += step, bImagePointer += step, gImagePointer += step, aImagePointer += step) {\n        float32Data[rTensorPointer++] = (buffer[rImagePointer] + normBias[0]) / normMean[0];\n        float32Data[gTensorPointer++] = (buffer[gImagePointer] + normBias[1]) / normMean[1];\n        float32Data[bTensorPointer++] = (buffer[bImagePointer] + normBias[2]) / normMean[2];\n        if (aTensorPointer !== -1 && aImagePointer !== -1) {\n            float32Data[aTensorPointer++] = (buffer[aImagePointer] + normBias[3]) / normMean[3];\n        }\n    }\n    // Float32Array -> ort.Tensor\n    const outputTensor = outputformat === 'RGBA' ? new tensor_js_1.Tensor('float32', float32Data, [1, 4, height, width]) :\n        new tensor_js_1.Tensor('float32', float32Data, [1, 3, height, width]);\n    return outputTensor;\n};\nexports.bufferToTensor = bufferToTensor;\n/**\n * implementation of Tensor.fromImage().\n */\nconst tensorFromImage = async (image, options) => {\n    // checking the type of image object\n    const isHTMLImageEle = typeof (HTMLImageElement) !== 'undefined' && image instanceof HTMLImageElement;\n    const isImageDataEle = typeof (ImageData) !== 'undefined' && image instanceof ImageData;\n    const isImageBitmap = typeof (ImageBitmap) !== 'undefined' && image instanceof ImageBitmap;\n    const isString = typeof image === 'string';\n    let data;\n    let bufferToTensorOptions = options ?? {};\n    // filling and checking image configuration options\n    if (isHTMLImageEle) {\n        // HTMLImageElement - image object - format is RGBA by default\n        const canvas = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const pixels2DContext = canvas.getContext('2d');\n        if (pixels2DContext != null) {\n            let height = image.height;\n            let width = image.width;\n            if (options !== undefined && options.resizedHeight !== undefined && options.resizedWidth !== undefined) {\n                height = options.resizedHeight;\n                width = options.resizedWidth;\n            }\n            if (options !== undefined) {\n                bufferToTensorOptions = options;\n                if (options.tensorFormat !== undefined) {\n                    throw new Error('Image input config format must be RGBA for HTMLImageElement');\n                }\n                else {\n                    bufferToTensorOptions.tensorFormat = 'RGBA';\n                }\n                bufferToTensorOptions.height = height;\n                bufferToTensorOptions.width = width;\n            }\n            else {\n                bufferToTensorOptions.tensorFormat = 'RGBA';\n                bufferToTensorOptions.height = height;\n                bufferToTensorOptions.width = width;\n            }\n            pixels2DContext.drawImage(image, 0, 0);\n            data = pixels2DContext.getImageData(0, 0, width, height).data;\n        }\n        else {\n            throw new Error('Can not access image data');\n        }\n    }\n    else if (isImageDataEle) {\n        let height;\n        let width;\n        if (options !== undefined && options.resizedWidth !== undefined && options.resizedHeight !== undefined) {\n            height = options.resizedHeight;\n            width = options.resizedWidth;\n        }\n        else {\n            height = image.height;\n            width = image.width;\n        }\n        if (options !== undefined) {\n            bufferToTensorOptions = options;\n        }\n        bufferToTensorOptions.format = 'RGBA';\n        bufferToTensorOptions.height = height;\n        bufferToTensorOptions.width = width;\n        if (options !== undefined) {\n            const tempCanvas = document.createElement('canvas');\n            tempCanvas.width = width;\n            tempCanvas.height = height;\n            const pixels2DContext = tempCanvas.getContext('2d');\n            if (pixels2DContext != null) {\n                pixels2DContext.putImageData(image, 0, 0);\n                data = pixels2DContext.getImageData(0, 0, width, height).data;\n            }\n            else {\n                throw new Error('Can not access image data');\n            }\n        }\n        else {\n            data = image.data;\n        }\n    }\n    else if (isImageBitmap) {\n        // ImageBitmap - image object - format must be provided by user\n        if (options === undefined) {\n            throw new Error('Please provide image config with format for Imagebitmap');\n        }\n        const pixels2DContext = document.createElement('canvas').getContext('2d');\n        if (pixels2DContext != null) {\n            const height = image.height;\n            const width = image.width;\n            pixels2DContext.drawImage(image, 0, 0, width, height);\n            data = pixels2DContext.getImageData(0, 0, width, height).data;\n            bufferToTensorOptions.height = height;\n            bufferToTensorOptions.width = width;\n            return (0, exports.bufferToTensor)(data, bufferToTensorOptions);\n        }\n        else {\n            throw new Error('Can not access image data');\n        }\n    }\n    else if (isString) {\n        return new Promise((resolve, reject) => {\n            const canvas = document.createElement('canvas');\n            const context = canvas.getContext('2d');\n            if (!image || !context) {\n                return reject();\n            }\n            const newImage = new Image();\n            newImage.crossOrigin = 'Anonymous';\n            newImage.src = image;\n            newImage.onload = () => {\n                canvas.width = newImage.width;\n                canvas.height = newImage.height;\n                context.drawImage(newImage, 0, 0, canvas.width, canvas.height);\n                const img = context.getImageData(0, 0, canvas.width, canvas.height);\n                bufferToTensorOptions.height = canvas.height;\n                bufferToTensorOptions.width = canvas.width;\n                resolve((0, exports.bufferToTensor)(img.data, bufferToTensorOptions));\n            };\n        });\n    }\n    else {\n        throw new Error('Input data provided is not supported - aborted tensor creation');\n    }\n    if (data !== undefined) {\n        return (0, exports.bufferToTensor)(data, bufferToTensorOptions);\n    }\n    else {\n        throw new Error('Input data provided is not supported - aborted tensor creation');\n    }\n};\nexports.tensorFromImage = tensorFromImage;\n//# sourceMappingURL=tensor-factory-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Tensor = void 0;\nconst tensor_conversion_impl_js_1 = require(\"./tensor-conversion-impl.js\");\nconst tensor_factory_impl_js_1 = require(\"./tensor-factory-impl.js\");\nconst tensor_utils_impl_js_1 = require(\"./tensor-utils-impl.js\");\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nconst NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP = new Map([\n    ['float32', Float32Array],\n    ['uint8', Uint8Array],\n    ['int8', Int8Array],\n    ['uint16', Uint16Array],\n    ['float16', Uint16Array],\n    ['int16', Int16Array],\n    ['int32', Int32Array],\n    ['bool', Uint8Array],\n    ['float64', Float64Array],\n    ['uint32', Uint32Array],\n]);\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nconst NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP = new Map([\n    [Float32Array, 'float32'],\n    [Uint8Array, 'uint8'],\n    [Int8Array, 'int8'],\n    [Uint16Array, 'uint16'],\n    [Int16Array, 'int16'],\n    [Int32Array, 'int32'],\n    [Float64Array, 'float64'],\n    [Uint32Array, 'uint32'],\n]);\n// the following code allows delaying execution of BigInt checking. This allows lazy initialization for\n// NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP and NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP, which allows BigInt polyfill\n// if available.\nlet isBigIntChecked = false;\nconst checkBigInt = () => {\n    if (!isBigIntChecked) {\n        isBigIntChecked = true;\n        const isBigInt64ArrayAvailable = typeof BigInt64Array !== 'undefined' && typeof BigInt64Array.from === 'function';\n        const isBigUint64ArrayAvailable = typeof BigUint64Array !== 'undefined' && typeof BigUint64Array.from === 'function';\n        if (isBigInt64ArrayAvailable) {\n            NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('int64', BigInt64Array);\n            NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigInt64Array, 'int64');\n        }\n        if (isBigUint64ArrayAvailable) {\n            NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('uint64', BigUint64Array);\n            NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigUint64Array, 'uint64');\n        }\n    }\n};\nclass Tensor {\n    constructor(arg0, arg1, arg2) {\n        checkBigInt();\n        let type;\n        let data;\n        let dims;\n        // check whether arg0 is type or data\n        if (typeof arg0 === 'string') {\n            //\n            // Override: constructor(type, data, ...)\n            //\n            type = arg0;\n            dims = arg2;\n            if (arg0 === 'string') {\n                // string tensor\n                if (!Array.isArray(arg1)) {\n                    throw new TypeError('A string tensor\\'s data must be a string array.');\n                }\n                // we don't check whether every element in the array is string; this is too slow. we assume it's correct and\n                // error will be populated at inference\n                data = arg1;\n            }\n            else {\n                // numeric tensor\n                const typedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(arg0);\n                if (typedArrayConstructor === undefined) {\n                    throw new TypeError(`Unsupported tensor type: ${arg0}.`);\n                }\n                if (Array.isArray(arg1)) {\n                    if (arg0 === 'float16') {\n                        // Throw error here because when user try to use number array as data,\n                        // e.g. new Tensor('float16', [1, 2, 3, 4], dims)), it will actually call\n                        // Uint16Array.from(arg1) which generates wrong data.\n                        throw new TypeError('Creating a float16 tensor from number array is not supported. Please use Uint16Array as data.');\n                    }\n                    else if (arg0 === 'uint64' || arg0 === 'int64') {\n                        // use 'as any' here because:\n                        // 1. TypeScript's check on type of 'Array.isArray()' does not work with readonly arrays.\n                        // see https://github.com/microsoft/TypeScript/issues/17002\n                        // 2. TypeScript's check on union type of '(BigInt64ArrayConstructor|BigUint64ArrayConstructor).from()' does\n                        // not accept parameter mapFn.\n                        // 3. parameters of 'SupportedTypedArrayConstructors.from()' does not match the requirement of the union\n                        // type.\n                        // assume 'arg1' is of type \"readonly number[]|readonly bigint[]\" here.\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        data = typedArrayConstructor.from(arg1, BigInt);\n                    }\n                    else {\n                        // assume 'arg1' is of type \"readonly number[]\" here.\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        data = typedArrayConstructor.from(arg1);\n                    }\n                }\n                else if (arg1 instanceof typedArrayConstructor) {\n                    data = arg1;\n                }\n                else {\n                    throw new TypeError(`A ${type} tensor's data must be type of ${typedArrayConstructor}`);\n                }\n            }\n        }\n        else {\n            //\n            // Override: constructor(data, ...)\n            //\n            dims = arg1;\n            if (Array.isArray(arg0)) {\n                // only boolean[] and string[] is supported\n                if (arg0.length === 0) {\n                    throw new TypeError('Tensor type cannot be inferred from an empty array.');\n                }\n                const firstElementType = typeof arg0[0];\n                if (firstElementType === 'string') {\n                    type = 'string';\n                    data = arg0;\n                }\n                else if (firstElementType === 'boolean') {\n                    type = 'bool';\n                    // 'arg0' is of type 'boolean[]'. Uint8Array.from(boolean[]) actually works, but typescript thinks this is\n                    // wrong type. We use 'as any' to make it happy.\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    data = Uint8Array.from(arg0);\n                }\n                else {\n                    throw new TypeError(`Invalid element type of data array: ${firstElementType}.`);\n                }\n            }\n            else {\n                // get tensor type from TypedArray\n                const mappedType = NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(arg0.constructor);\n                if (mappedType === undefined) {\n                    throw new TypeError(`Unsupported type for tensor data: ${arg0.constructor}.`);\n                }\n                type = mappedType;\n                data = arg0;\n            }\n        }\n        // type and data is processed, now processing dims\n        if (dims === undefined) {\n            // assume 1-D tensor if dims omitted\n            dims = [data.length];\n        }\n        else if (!Array.isArray(dims)) {\n            throw new TypeError('A tensor\\'s dims must be a number array');\n        }\n        // perform check\n        const size = (0, tensor_utils_impl_js_1.calculateSize)(dims);\n        if (size !== data.length) {\n            throw new Error(`Tensor's size(${size}) does not match data length(${data.length}).`);\n        }\n        this.dims = dims;\n        this.type = type;\n        this.data = data;\n        this.size = size;\n    }\n    static async fromImage(image, options) {\n        return (0, tensor_factory_impl_js_1.tensorFromImage)(image, options);\n    }\n    // #endregion\n    // #region conversions\n    toDataURL(options) {\n        return (0, tensor_conversion_impl_js_1.tensorToDataURL)(this, options);\n    }\n    toImageData(options) {\n        return (0, tensor_conversion_impl_js_1.tensorToImageData)(this, options);\n    }\n    // #endregion\n    // #region tensor utilities\n    reshape(dims) {\n        return (0, tensor_utils_impl_js_1.tensorReshape)(this, dims);\n    }\n}\nexports.Tensor = Tensor;\n//# sourceMappingURL=tensor-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.tensorReshape = exports.calculateSize = void 0;\nconst tensor_js_1 = require(\"./tensor.js\");\n/**\n * calculate size from dims.\n *\n * @param dims the dims array. May be an illegal input.\n */\nconst calculateSize = (dims) => {\n    let size = 1;\n    for (let i = 0; i < dims.length; i++) {\n        const dim = dims[i];\n        if (typeof dim !== 'number' || !Number.isSafeInteger(dim)) {\n            throw new TypeError(`dims[${i}] must be an integer, got: ${dim}`);\n        }\n        if (dim < 0) {\n            throw new RangeError(`dims[${i}] must be a non-negative integer, got: ${dim}`);\n        }\n        size *= dim;\n    }\n    return size;\n};\nexports.calculateSize = calculateSize;\n/**\n * implementation of Tensor.reshape()\n */\nconst tensorReshape = (tensor, dims) => new tensor_js_1.Tensor(tensor.type, tensor.data, dims);\nexports.tensorReshape = tensorReshape;\n//# sourceMappingURL=tensor-utils-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Tensor = void 0;\nconst tensor_impl_js_1 = require(\"./tensor-impl.js\");\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexports.Tensor = tensor_impl_js_1.Tensor;\n//# sourceMappingURL=tensor.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.version = void 0;\n// This file is generated by /js/scripts/update-version.ts\n// Do not modify file content manually.\nexports.version = '1.16.0';\n//# sourceMappingURL=version.js.map","// GENERATED FILE. DO NOT EDIT.\nvar Long = (function(exports) {\n  \"use strict\";\n  \n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  \n  /**\n   * @license\n   * Copyright 2009 The Closure Library Authors\n   * Copyright 2020 Daniel Wirtz / The long.js Authors.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *\n   * SPDX-License-Identifier: Apache-2.0\n   */\n  // WebAssembly optimizations to do native i64 multiplication and divide\n  var wasm = null;\n  \n  try {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;\n  } catch (e) {// no wasm support :(\n  }\n  /**\n   * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n   *  See the from* functions below for more convenient ways of constructing Longs.\n   * @exports Long\n   * @class A Long class for representing a 64 bit two's-complement integer value.\n   * @param {number} low The low (signed) 32 bits of the long\n   * @param {number} high The high (signed) 32 bits of the long\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @constructor\n   */\n  \n  \n  function Long(low, high, unsigned) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     */\n    this.low = low | 0;\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     */\n  \n    this.high = high | 0;\n    /**\n     * Whether unsigned or not.\n     * @type {boolean}\n     */\n  \n    this.unsigned = !!unsigned;\n  } // The internal representation of a long is the two given signed, 32-bit values.\n  // We use 32-bit pieces because these are the size of integers on which\n  // Javascript performs bit-operations.  For operations like addition and\n  // multiplication, we split each number into 16 bit pieces, which can easily be\n  // multiplied within Javascript's floating-point representation without overflow\n  // or change in sign.\n  //\n  // In the algorithms below, we frequently reduce the negative case to the\n  // positive case by negating the input(s) and then post-processing the result.\n  // Note that we must ALWAYS check specially whether those values are MIN_VALUE\n  // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n  // a positive number, it overflows back into a negative).  Not handling this\n  // case would often result in infinite recursion.\n  //\n  // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n  // methods on which they depend.\n  \n  /**\n   * An indicator used to reliably determine if an object is a Long or not.\n   * @type {boolean}\n   * @const\n   * @private\n   */\n  \n  \n  Long.prototype.__isLong__;\n  Object.defineProperty(Long.prototype, \"__isLong__\", {\n    value: true\n  });\n  /**\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   * @inner\n   */\n  \n  function isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n  }\n  /**\n   * @function\n   * @param {*} value number\n   * @returns {number}\n   * @inner\n   */\n  \n  \n  function ctz32(value) {\n    var c = Math.clz32(value & -value);\n    return value ? 31 - c : c;\n  }\n  /**\n   * Tests if the specified object is a Long.\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   */\n  \n  \n  Long.isLong = isLong;\n  /**\n   * A cache of the Long representations of small integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var INT_CACHE = {};\n  /**\n   * A cache of the Long representations of small unsigned integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var UINT_CACHE = {};\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromInt(value, unsigned) {\n    var obj, cachedObj, cache;\n  \n    if (unsigned) {\n      value >>>= 0;\n  \n      if (cache = 0 <= value && value < 256) {\n        cachedObj = UINT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, 0, true);\n      if (cache) UINT_CACHE[value] = obj;\n      return obj;\n    } else {\n      value |= 0;\n  \n      if (cache = -128 <= value && value < 128) {\n        cachedObj = INT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, value < 0 ? -1 : 0, false);\n      if (cache) INT_CACHE[value] = obj;\n      return obj;\n    }\n  }\n  /**\n   * Returns a Long representing the given 32 bit integer value.\n   * @function\n   * @param {number} value The 32 bit integer in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromInt = fromInt;\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromNumber(value, unsigned) {\n    if (isNaN(value)) return unsigned ? UZERO : ZERO;\n  \n    if (unsigned) {\n      if (value < 0) return UZERO;\n      if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;\n    } else {\n      if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;\n      if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;\n    }\n  \n    if (value < 0) return fromNumber(-value, unsigned).neg();\n    return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);\n  }\n  /**\n   * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n   * @function\n   * @param {number} value The number in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromNumber = fromNumber;\n  /**\n   * @param {number} lowBits\n   * @param {number} highBits\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n  }\n  /**\n   * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n   *  assumed to use 32 bits.\n   * @function\n   * @param {number} lowBits The low 32 bits\n   * @param {number} highBits The high 32 bits\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBits = fromBits;\n  /**\n   * @function\n   * @param {number} base\n   * @param {number} exponent\n   * @returns {number}\n   * @inner\n   */\n  \n  var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n  \n  /**\n   * @param {string} str\n   * @param {(boolean|number)=} unsigned\n   * @param {number=} radix\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromString(str, unsigned, radix) {\n    if (str.length === 0) throw Error('empty string');\n  \n    if (typeof unsigned === 'number') {\n      // For goog.math.long compatibility\n      radix = unsigned;\n      unsigned = false;\n    } else {\n      unsigned = !!unsigned;\n    }\n  \n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\") return unsigned ? UZERO : ZERO;\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    var p;\n    if ((p = str.indexOf('-')) > 0) throw Error('interior hyphen');else if (p === 0) {\n      return fromString(str.substring(1), unsigned, radix).neg();\n    } // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n  \n    for (var i = 0; i < str.length; i += 8) {\n      var size = Math.min(8, str.length - i),\n          value = parseInt(str.substring(i, i + size), radix);\n  \n      if (size < 8) {\n        var power = fromNumber(pow_dbl(radix, size));\n        result = result.mul(power).add(fromNumber(value));\n      } else {\n        result = result.mul(radixToPower);\n        result = result.add(fromNumber(value));\n      }\n    }\n  \n    result.unsigned = unsigned;\n    return result;\n  }\n  /**\n   * Returns a Long representation of the given string, written using the specified radix.\n   * @function\n   * @param {string} str The textual representation of the Long\n   * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n   * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromString = fromString;\n  /**\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromValue(val, unsigned) {\n    if (typeof val === 'number') return fromNumber(val, unsigned);\n    if (typeof val === 'string') return fromString(val, unsigned); // Throws for non-objects, converts non-instanceof Long:\n  \n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n  }\n  /**\n   * Converts the specified value to a Long using the appropriate from* function for its type.\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long}\n   */\n  \n  \n  Long.fromValue = fromValue; // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n  // no runtime penalty for these.\n  \n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_16_DBL = 1 << 16;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24_DBL = 1 << 24;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n  /**\n   * @type {!Long}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ZERO = fromInt(0);\n  /**\n   * Signed zero.\n   * @type {!Long}\n   */\n  \n  Long.ZERO = ZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UZERO = fromInt(0, true);\n  /**\n   * Unsigned zero.\n   * @type {!Long}\n   */\n  \n  Long.UZERO = UZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ONE = fromInt(1);\n  /**\n   * Signed one.\n   * @type {!Long}\n   */\n  \n  Long.ONE = ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UONE = fromInt(1, true);\n  /**\n   * Unsigned one.\n   * @type {!Long}\n   */\n  \n  Long.UONE = UONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var NEG_ONE = fromInt(-1);\n  /**\n   * Signed negative one.\n   * @type {!Long}\n   */\n  \n  Long.NEG_ONE = NEG_ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n  /**\n   * Maximum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_VALUE = MAX_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n  /**\n   * Maximum unsigned value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n  /**\n   * Minimum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MIN_VALUE = MIN_VALUE;\n  /**\n   * @alias Long.prototype\n   * @inner\n   */\n  \n  var LongPrototype = Long.prototype;\n  /**\n   * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  LongPrototype.toInt = function toInt() {\n    return this.unsigned ? this.low >>> 0 : this.low;\n  };\n  /**\n   * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.toNumber = function toNumber() {\n    if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n  };\n  /**\n   * Converts the Long to a string written in the specified radix.\n   * @this {!Long}\n   * @param {number=} radix Radix (2-36), defaults to 10\n   * @returns {string}\n   * @override\n   * @throws {RangeError} If `radix` is out of range\n   */\n  \n  \n  LongPrototype.toString = function toString(radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    if (this.isZero()) return '0';\n  \n    if (this.isNegative()) {\n      // Unsigned Longs are never negative\n      if (this.eq(MIN_VALUE)) {\n        // We need to change the Long value before it can be negated, so we remove\n        // the bottom-most digit in this base and then recurse to do the rest.\n        var radixLong = fromNumber(radix),\n            div = this.div(radixLong),\n            rem1 = div.mul(radixLong).sub(this);\n        return div.toString(radix) + rem1.toInt().toString(radix);\n      } else return '-' + this.neg().toString(radix);\n    } // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n  \n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n        rem = this;\n    var result = '';\n  \n    while (true) {\n      var remDiv = rem.div(radixToPower),\n          intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n          digits = intval.toString(radix);\n      rem = remDiv;\n      if (rem.isZero()) return digits + result;else {\n        while (digits.length < 6) digits = '0' + digits;\n  \n        result = '' + digits + result;\n      }\n    }\n  };\n  /**\n   * Gets the high 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed high bits\n   */\n  \n  \n  LongPrototype.getHighBits = function getHighBits() {\n    return this.high;\n  };\n  /**\n   * Gets the high 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned high bits\n   */\n  \n  \n  LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n    return this.high >>> 0;\n  };\n  /**\n   * Gets the low 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed low bits\n   */\n  \n  \n  LongPrototype.getLowBits = function getLowBits() {\n    return this.low;\n  };\n  /**\n   * Gets the low 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned low bits\n   */\n  \n  \n  LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n    return this.low >>> 0;\n  };\n  /**\n   * Gets the number of bits needed to represent the absolute value of this Long.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n    if (this.isNegative()) // Unsigned Longs are never negative\n      return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n    var val = this.high != 0 ? this.high : this.low;\n  \n    for (var bit = 31; bit > 0; bit--) if ((val & 1 << bit) != 0) break;\n  \n    return this.high != 0 ? bit + 33 : bit + 1;\n  };\n  /**\n   * Tests if this Long's value equals zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isZero = function isZero() {\n    return this.high === 0 && this.low === 0;\n  };\n  /**\n   * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eqz = LongPrototype.isZero;\n  /**\n   * Tests if this Long's value is negative.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  LongPrototype.isNegative = function isNegative() {\n    return !this.unsigned && this.high < 0;\n  };\n  /**\n   * Tests if this Long's value is positive or zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isPositive = function isPositive() {\n    return this.unsigned || this.high >= 0;\n  };\n  /**\n   * Tests if this Long's value is odd.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isOdd = function isOdd() {\n    return (this.low & 1) === 1;\n  };\n  /**\n   * Tests if this Long's value is even.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isEven = function isEven() {\n    return (this.low & 1) === 0;\n  };\n  /**\n   * Tests if this Long's value equals the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.equals = function equals(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\n    return this.high === other.high && this.low === other.low;\n  };\n  /**\n   * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eq = LongPrototype.equals;\n  /**\n   * Tests if this Long's value differs from the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.notEquals = function notEquals(other) {\n    return !this.eq(\n    /* validates */\n    other);\n  };\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.neq = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ne = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value is less than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThan = function lessThan(other) {\n    return this.comp(\n    /* validates */\n    other) < 0;\n  };\n  /**\n   * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lt = LongPrototype.lessThan;\n  /**\n   * Tests if this Long's value is less than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) <= 0;\n  };\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lte = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.le = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThan = function greaterThan(other) {\n    return this.comp(\n    /* validates */\n    other) > 0;\n  };\n  /**\n   * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gt = LongPrototype.greaterThan;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) >= 0;\n  };\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ge = LongPrototype.greaterThanOrEqual;\n  /**\n   * Compares this Long's value with the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  LongPrototype.compare = function compare(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.eq(other)) return 0;\n    var thisNeg = this.isNegative(),\n        otherNeg = other.isNegative();\n    if (thisNeg && !otherNeg) return -1;\n    if (!thisNeg && otherNeg) return 1; // At this point the sign bits are the same\n  \n    if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1; // Both are positive if at least one is unsigned\n  \n    return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n  };\n  /**\n   * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  \n  LongPrototype.comp = LongPrototype.compare;\n  /**\n   * Negates this Long's value.\n   * @this {!Long}\n   * @returns {!Long} Negated Long\n   */\n  \n  LongPrototype.negate = function negate() {\n    if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;\n    return this.not().add(ONE);\n  };\n  /**\n   * Negates this Long's value. This is an alias of {@link Long#negate}.\n   * @function\n   * @returns {!Long} Negated Long\n   */\n  \n  \n  LongPrototype.neg = LongPrototype.negate;\n  /**\n   * Returns the sum of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} addend Addend\n   * @returns {!Long} Sum\n   */\n  \n  LongPrototype.add = function add(addend) {\n    if (!isLong(addend)) addend = fromValue(addend); // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the difference of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.subtract = function subtract(subtrahend) {\n    if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);\n    return this.add(subtrahend.neg());\n  };\n  /**\n   * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n   * @function\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.sub = LongPrototype.subtract;\n  /**\n   * Returns the product of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  LongPrototype.multiply = function multiply(multiplier) {\n    if (this.isZero()) return this;\n    if (!isLong(multiplier)) multiplier = fromValue(multiplier); // use wasm support if present\n  \n    if (wasm) {\n      var low = wasm[\"mul\"](this.low, this.high, multiplier.low, multiplier.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (multiplier.isZero()) return this.unsigned ? UZERO : ZERO;\n    if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;\n    if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;\n  \n    if (this.isNegative()) {\n      if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());else return this.neg().mul(multiplier).neg();\n    } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg(); // If both longs are small, use float multiplication\n  \n  \n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24)) return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned); // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n   * @function\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  \n  LongPrototype.mul = LongPrototype.multiply;\n  /**\n   * Returns this Long divided by the specified. The result is signed if this Long is signed or\n   *  unsigned if this Long is unsigned.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  LongPrototype.divide = function divide(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor);\n    if (divisor.isZero()) throw Error('division by zero'); // use wasm support if present\n  \n    if (wasm) {\n      // guard against signed division overflow: the largest\n      // negative number / -1 would be 1 larger than the largest\n      // positive number, due to two's complement.\n      if (!this.unsigned && this.high === -0x80000000 && divisor.low === -1 && divisor.high === -1) {\n        // be consistent with non-wasm code path\n        return this;\n      }\n  \n      var low = (this.unsigned ? wasm[\"div_u\"] : wasm[\"div_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (this.isZero()) return this.unsigned ? UZERO : ZERO;\n    var approx, rem, res;\n  \n    if (!this.unsigned) {\n      // This section is only relevant for signed longs and is derived from the\n      // closure library as a whole.\n      if (this.eq(MIN_VALUE)) {\n        if (divisor.eq(ONE) || divisor.eq(NEG_ONE)) return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n        else if (divisor.eq(MIN_VALUE)) return ONE;else {\n          // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n          var halfThis = this.shr(1);\n          approx = halfThis.div(divisor).shl(1);\n  \n          if (approx.eq(ZERO)) {\n            return divisor.isNegative() ? ONE : NEG_ONE;\n          } else {\n            rem = this.sub(divisor.mul(approx));\n            res = approx.add(rem.div(divisor));\n            return res;\n          }\n        }\n      } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;\n  \n      if (this.isNegative()) {\n        if (divisor.isNegative()) return this.neg().div(divisor.neg());\n        return this.neg().div(divisor).neg();\n      } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();\n  \n      res = ZERO;\n    } else {\n      // The algorithm below has not been made for unsigned longs. It's therefore\n      // required to take special care of the MSB prior to running it.\n      if (!divisor.unsigned) divisor = divisor.toUnsigned();\n      if (divisor.gt(this)) return UZERO;\n      if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n        return UONE;\n      res = UZERO;\n    } // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n  \n  \n    rem = this;\n  \n    while (rem.gte(divisor)) {\n      // Approximate the result of division. This may be a little greater or\n      // smaller than the actual value.\n      approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber())); // We will tweak the approximate result by changing it in the 48-th digit or\n      // the smallest non-fractional digit, whichever is larger.\n  \n      var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n          delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),\n          // Decrease the approximation until it is smaller than the remainder.  Note\n      // that if it is too large, the product overflows and is negative.\n      approxRes = fromNumber(approx),\n          approxRem = approxRes.mul(divisor);\n  \n      while (approxRem.isNegative() || approxRem.gt(rem)) {\n        approx -= delta;\n        approxRes = fromNumber(approx, this.unsigned);\n        approxRem = approxRes.mul(divisor);\n      } // We know the answer can't be zero... and actually, zero would cause\n      // infinite recursion since we would make no progress.\n  \n  \n      if (approxRes.isZero()) approxRes = ONE;\n      res = res.add(approxRes);\n      rem = rem.sub(approxRem);\n    }\n  \n    return res;\n  };\n  /**\n   * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  \n  LongPrototype.div = LongPrototype.divide;\n  /**\n   * Returns this Long modulo the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.modulo = function modulo(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor); // use wasm support if present\n  \n    if (wasm) {\n      var low = (this.unsigned ? wasm[\"rem_u\"] : wasm[\"rem_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    return this.sub(this.div(divisor).mul(divisor));\n  };\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  \n  LongPrototype.mod = LongPrototype.modulo;\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.rem = LongPrototype.modulo;\n  /**\n   * Returns the bitwise NOT of this Long.\n   * @this {!Long}\n   * @returns {!Long}\n   */\n  \n  LongPrototype.not = function not() {\n    return fromBits(~this.low, ~this.high, this.unsigned);\n  };\n  /**\n   * Returns count leading zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.countLeadingZeros = function countLeadingZeros() {\n    return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;\n  };\n  /**\n   * Returns count leading zeros. This is an alias of {@link Long#countLeadingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.clz = LongPrototype.countLeadingZeros;\n  /**\n   * Returns count trailing zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  LongPrototype.countTrailingZeros = function countTrailingZeros() {\n    return this.low ? ctz32(this.low) : ctz32(this.high) + 32;\n  };\n  /**\n   * Returns count trailing zeros. This is an alias of {@link Long#countTrailingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.ctz = LongPrototype.countTrailingZeros;\n  /**\n   * Returns the bitwise AND of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  LongPrototype.and = function and(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise OR of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.or = function or(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise XOR of this Long and the given one.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.xor = function xor(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shiftLeft = function shiftLeft(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);else return fromBits(0, this.low << numBits - 32, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shl = LongPrototype.shiftLeft;\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRight = function shiftRight(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);else return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shr = LongPrototype.shiftRight;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >>> numBits, this.unsigned);\n    if (numBits === 32) return fromBits(this.high, 0, this.unsigned);\n    return fromBits(this.high >>> numBits - 32, 0, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits rotated to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateLeft = function rotateLeft(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.low << numBits | this.high >>> b, this.high << numBits | this.low >>> b, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.high << numBits | this.low >>> b, this.low << numBits | this.high >>> b, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotl = LongPrototype.rotateLeft;\n  /**\n   * Returns this Long with bits rotated to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateRight = function rotateRight(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.high << b | this.low >>> numBits, this.low << b | this.high >>> numBits, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.low << b | this.high >>> numBits, this.high << b | this.low >>> numBits, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotr = LongPrototype.rotateRight;\n  /**\n   * Converts this Long to signed.\n   * @this {!Long}\n   * @returns {!Long} Signed long\n   */\n  \n  LongPrototype.toSigned = function toSigned() {\n    if (!this.unsigned) return this;\n    return fromBits(this.low, this.high, false);\n  };\n  /**\n   * Converts this Long to unsigned.\n   * @this {!Long}\n   * @returns {!Long} Unsigned long\n   */\n  \n  \n  LongPrototype.toUnsigned = function toUnsigned() {\n    if (this.unsigned) return this;\n    return fromBits(this.low, this.high, true);\n  };\n  /**\n   * Converts this Long to its byte representation.\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @this {!Long}\n   * @returns {!Array.<number>} Byte representation\n   */\n  \n  \n  LongPrototype.toBytes = function toBytes(le) {\n    return le ? this.toBytesLE() : this.toBytesBE();\n  };\n  /**\n   * Converts this Long to its little endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Little endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesLE = function toBytesLE() {\n    var hi = this.high,\n        lo = this.low;\n    return [lo & 0xff, lo >>> 8 & 0xff, lo >>> 16 & 0xff, lo >>> 24, hi & 0xff, hi >>> 8 & 0xff, hi >>> 16 & 0xff, hi >>> 24];\n  };\n  /**\n   * Converts this Long to its big endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Big endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesBE = function toBytesBE() {\n    var hi = this.high,\n        lo = this.low;\n    return [hi >>> 24, hi >>> 16 & 0xff, hi >>> 8 & 0xff, hi & 0xff, lo >>> 24, lo >>> 16 & 0xff, lo >>> 8 & 0xff, lo & 0xff];\n  };\n  /**\n   * Creates a Long from its byte representation.\n   * @param {!Array.<number>} bytes Byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytes = function fromBytes(bytes, unsigned, le) {\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\n  };\n  /**\n   * Creates a Long from its little endian byte representation.\n   * @param {!Array.<number>} bytes Little endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {\n    return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);\n  };\n  /**\n   * Creates a Long from its big endian byte representation.\n   * @param {!Array.<number>} bytes Big endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {\n    return new Long(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);\n  };\n  \n  var _default = Long;\n  exports.default = _default;\n  return \"default\" in exports ? exports.default : exports;\n})({});\nif (typeof define === 'function' && define.amd) define([], function() { return Long; });\nelse if (typeof module === 'object' && typeof exports === 'object') module.exports = Long;\n","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZE_PREFIX_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {!flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {!Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {!flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n * @param {boolean=} opt_size_prefix\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier, opt_size_prefix) {\n  var size_prefix = opt_size_prefix ? flatbuffers.SIZE_PREFIX_LENGTH : 0;\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH + size_prefix);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT + size_prefix);\n  this.addOffset(root_table);\n  if (size_prefix) {\n    this.addInt32(this.bb.capacity() - this.space);\n  }\n  this.bb.setPosition(this.space);\n};\n\n/**\n * Finalize a size prefixed buffer, pointing to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finishSizePrefixed = function (root_table, opt_file_identifier) {\n  this.finish(root_table, opt_file_identifier, true);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {!flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|!Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(1057);\n"],"names":["root","factory","exports","module","define","amd","self","onnxjsBackend","init","createSessionHandler","pathOrBuffer","options","session","Session","loadModel","OnnxjsSessionHandler","initializeFlags","env","wasm","initTimeout","simd","proxy","numThreads","Number","isInteger","numCpuLogicalCores","navigator","cpus","length","hardwareConcurrency","Math","min","ceil","wasmBackend","initializeWebAssemblyInstance","handler","OnnxruntimeWebAssemblySessionHandler","Promise","resolve","registerBackend","versions","web","version","AttributeWithCacheKeyImpl","constructor","attribute","Object","assign","this","cacheKey","_cacheKey","getOwnPropertyNames","sort","map","name","join","createAttributeWithCacheKey","ortFbs","onnxruntime","experimental","fbs","Attribute","attributes","_attributes","Map","attr","onnx","AttributeProto","set","getValue","getType","size","Error","key","type","value","delete","getFloat","defaultValue","get","getInt","getString","getTensor","getFloats","getInts","getStrings","getTensors","valueAndType","undefined","static","AttributeType","FLOAT","INT","STRING","TENSOR","FLOATS","INTS","STRINGS","TENSORS","attrType","GRAPH","GRAPHS","getValueNoCheck","LongUtil","isLong","longToNumber","arr","numberValue","Array","i","maybeLong","Tensor","fromProto","fromOrtTensor","utf8String","decodeUtf8String","getValueNoCheckFromOnnxFormat","getValueNoCheckFromOrtFormat","f","s","t","g","floats","ints","strings","tensors","graphs","floatsArray","intsLength","push","stringsLength","tensorsLength","backendsCache","tryLoadBackend","backendHint","backendObj","backend","obj","o","initialize","dispose","isBackend","webgl","WebGLBackend","resolveBackend","hint","hints","cache","contextId","matmulMaxBatchSize","textureCacheMode","pack","async","glContext","createWebGLContext","Logger","setWithEnv","verbose","e","warning","context","WebGLSessionHandler","CoordsGlslLib","GlslLib","super","getFunctions","offsetToCoords","coordsToOffset","toVec","valueFrom","getCommonUtilFuncs","getInputsSamplingSnippets","getOutputSamplingSnippet","getCustomTypes","GlslLibRoutine","outputLayout","outputTextureLayout","isPacked","getPackedOutputSamplingSnippet","getUnpackedOutputSamplingSnippet","outShape","unpackedShape","outTexShape","width","height","result","funcName","getOutputScalarCoords","getOutputPacked1DCoords","getOutputPacked2DCoords","getOutputPacked3DCoords","getOutputPackedNDCoords","floatTextureSetRGBASource","getGlsl","output","getOutputUnpacked1DCoords","getOutputUnpacked2DCoords","getOutputUnpacked3DCoords","getOutputUnpacked4DCoords","getOutputUnpacked5DCoords","getOutputUnpacked6DCoords","floatTextureSetRSource","shape","texShape","packedTexShape","source","ArrayUtil","arraysEqual","texelsInLogicalRow","texelsInBatch","texelsInBatchN","batches","coords","b","rank","strides","coordsToCompute","coordsFromIndexSnippet","stride","glsl","texture2D","programInfo","inputNames","forEach","samplerName","inputLayout","inputTextureLayouts","generateShaderFuncNameFromInputSamplerName","getPackedSamplerFromInput","getUnpackedSamplerFromInput","outCoordFuncName","generateShaderFuncNameFromInputSamplerNameAtOutCoords","getPackedSamplerAtOutputCoords","getUnpackedSamplerAtOutputCoords","inShape","texName","texFuncSnippet","inRank","outRank","broadcastDims","BroadcastUtil","getBroadcastDims","getCoordsDataType","rankDiff","coordsSnippet","fields","getGlChannels","d","unpackedCoordsSnippet","isInputScalar","ShapeUtil","isOutputScalar","rows","cols","indexOf","inTexShape","getPackedSamplerScalar","getPackedSampler1D","getPackedSampler2D","getPackedSampler3D","getPackedSamplerND","getUnpackedSamplerScalar","getUnpackedSampler1D","getUnpackedSampler2D","getUnpackedSampler3D","getUnpackedSampler4D","getUnpackedSampler5D","getUnpackedSampler6D","texNumR","texNumC","packedSampler","valuesPerRow","squeezedShape","slice","keptDims","newInputShape","squeezeInputShape","params","newInputLayout","JSON","parse","stringify","samplerRoutine","routineBody","getSqueezedParams","dependencies","index","tNumR","tNumC","newShape","squeezeShape","stride0","stride1","routine","revDims","reverse","stride2","stride3","stride4","xScale","yScale","stridesBlock","body","layout","getValueFromSingle","varName","transpose","getPackedValueFrom","FunctionType","addDependency","node","nodes","cycleCheck","Set","alreadyTraversed","createOrderedNodes","graphNodes","dfsTraverse","has","add","EncodingGlslLib","encodeFloat32","decodeFloat32","encode","decode","encodeUint8","endianness","isLittleEndian","decodeUint8","ArrayBuffer","a","Uint32Array","c","Uint8Array","FragColorGlslLib","setFragColor","getColorAsFloat","INLINE_FUNC_DEF_REGEX","script","inlineDefs","match","exec","split","tokens","trim","filter","v","regexString","replace","regex","RegExp","variable","declLine","newBody","paramRedecLine","replacement","libs","glslLibRoutineDependencyGraph","GlslContext","keys","glslRegistry","lib","libName","routinesInLib","currentNode","GlslLibRoutineNode","preprocess","shaderSource","hasMain","getDefaultFragShaderMain","replaceInlines","getFragShaderPreamble","getUniforms","variables","getImports","routinesIncluded","selectGlslLibRoutinesToBeIncluded","routines","classAndRoutine","TopologicalSortGlslRoutines","returnOrderedNodes","samplers","uniformLines","sampler","arrayLength","VecGlslLib","ShapeUtilsGlslLib","bcastIndex","bcastMatmulIndex","offsetToIndices","indicesToOffset","incrementIndices","outputRank","dimOffset","block","indexToOffsetSingle","offsetToIndicesSingle","shapeInit","GLSL_ES_2_0","varyingVertex","varyingFrag","outputDeclaration","GLSL_ES_3_0","outputShapeLength","binaryVecFunctions","copyVec","setVecItem","getVecItem","nameOp","sub","mul","div","fname","assignmentBlock","packedTextureDataCache","unpackedTextureDataCache","calculateTextureWidthAndHeight","textureType","layoutStrategy","executeProgram","program","inputs","inputTypes","inputTextureDatas","getOrCreateTextureData","texture","cacheHint","getProgramInfoUniqueKey","artifact","programManager","getArtifact","createTextureLayoutFromTextureType","dims","outputTextureData","createTextureData","build","setArtifact","runProgram","run","tensor","TextureType","packed","td","getTextureData","dataId","unpack","packedLastDimension","group","channels","adjustedKernelShape","adjustedLayout","buffer","numberData","numFeatureMaps","oldRowSize","newRowSize","Float32Array","oldOffset","newOffset","subarray","unpackedTextureLayout","createTextureLayoutFromShape","reverseWH","unpackedTextureData","createTextureDataFromLayoutBindTensor","dataType","data","usage","textureManager","createTextureFromLayout","createTextureDataFromTexture","reshapeUnpacked","input","reshapedDims","inputTD","unpacked","newTextureLayout","computeStrides","reshapePacked","isReshapeCheap","squeezedInputShape","processDims3D","squeezedOutputShape","squeezedInputTensor","squeezedOutputTensor","createPackedReshape3DProgramInfoLoader","cast","tensorId","textureData","_id","readTexture","readTextureAsync","setTextureData","isInitializer","isTextureLayoutCached","clearActiveTextures","releaseTexture","isFloat32DownloadSupported","readUint8TextureAsFloat","encodeAsUint8","createPackProgramInfoLoader","createUnpackProgramInfoLoader","WEBGL_OP_RESOLVE_RULES","unaryOps","abs","acos","binaryOps","and","asin","atan","averagePool","parseAveragePoolAttributes","batchNormalization","parseBatchNormalizationAttributes","parseCastAttributes","clip","parseClipAttributes","clipV11","concat","parseConcatAttributes","conv","parseConvAttributes","convTranspose","parseConvTransposeAttributes","cos","identity","depthToSpace","parseDepthToSpaceAttributes","equal","elu","parseEluAttributes","exp","flatten","parseFlattenAttributes","floor","gather","parseGatherAttributes","gemm","parseGemmAttributesV7","parseGemmAttributesV11","globalAveragePool","parseGlobalAveragePoolAttributes","globalMaxPool","greater","imageScaler","parseImageScalerAttributes","instanceNormalization","parseInstanceNormalizationAttributes","leakyRelu","parseLeakyReluAttributes","less","lrn","parseLrnAttributes","log","matMul","parseMatMulAttributes","maxPool","parseMaxPoolAttributes","neg","not","or","padV2","parsePadAttributesV2","padV11","parsePadAttributesV11","pow","pRelu","reduceLogSum","parseReduceAttributes","reduceMax","reduceMean","reduceMin","reduceProd","reduceSum","reduceLogSumSquare","relu","reshape","resize","parseResizeAttributesV10","parseResizeAttributesV11","sigmoid","sin","sliceV10","parseSliceAttributes","softmax","parseSoftmaxAttributes","softmaxV13","parseSoftmaxAttributesV13","parseSplitAttributes","sqrt","squeeze","parseSqueezeAttributes","squeezeV13","sum","tan","tanh","tile","parseTransposeAttributes","upsample","parseUpsampleAttributesV7","parseUpsampleAttributesV9","unsqueeze","parseUnsqueezeAttributes","unsqueezeV13","xor","batchNormalizationProgramMetadata","inferenceHandler","validateInputs","createBatchNormalizationProgramInfo","epsilon","momentum","spatial","scaleWidth","scaleHeight","X","scale","B","mean","var_","glslAdd","ValueBased","glslDiv","glslMul","glslSub","glslEqual","glslGreater","glslLess","glslAnd","glslOr","glslXor","glslPow","glslBuiltinBinary","glslPRelu","createBinaryProgramInfoLoader","glslFunc","outputTensorType","createBinaryProgramInfo","isBroadcast","areEqual","outputShape","usePackedTexture","calculatedShape","calcShape","aRank","bRank","aBcast","bBcast","to","ProtoUtil","tensorDataTypeFromProto","createPackedConcatProgramInfoLoader","metadata","inputCount","from","fill","axis","inputShape","dataNShape","axisIndex","getChannels","dtype","unpackChannel","unpackFromChannel","shapes","offsets","channel","lastChannels","allChannels","getValueSnippet","shift","getShiftedChannelsSnippet","lastIndex","x","createPackedConcatProgramInfo","channelIdx","idx","createUnpackedConcatProgramInfoLoader","sizeInConcatAxis","previousSum","getTextureIndexWhereDataResidesMethod","getTextureIndexWhereDataResidesLinearSearch","getTextureIndexWhereDataResidesBinarySearch","getFetchDataFromCorrectTextureMethod","getGetSizeInConcatAxisValueFromIndexMethod","createUnpackedConcatProgramInfo","numberOfTensors","tensorRank","codeLines","inputType","inputDimensionality","createUnpackedGroupedConvProgramInfoLoader","hasBias","processBias","xShape","wShape","outputChannelsPerGroup","autoPad","dilations","kernelShape","pads","calculateOutputShape","activationFunction","applyActivation","getActivationSnippet","createUnpackedGroupedConvProgramInfo","conv2DPackedPointwise","xshape","kshape","reshapedX","reshapedK","matmulInputs","matmulOutput","createPackedMatmulProgramInfoLoader","conv2DPacked","im2colOutput","createPackedIm2ColProgramInfoLoader","kernelReshaped","computeTotalPad","inDim","adj","kernel","dilation","outSize","distributePadding","totalPad","head","tail","smallPad","convTranspose2d","adjustedAttributes","getAdjustedConvTransposeAttributes","convTranspose2DUnpacked","valueInit","inputChannelsPerGroup","createUnpackedConvTransposeProgramInfo","createUnpackedConvTransposeProgramInfoLoader","outputPadding","spatialRank","updateShape","calculateOutputShapeAndPads","newAttributes","activationAttributes","parseInternalActivationAttributes","featureMaps","adjustPads","batchSize","inputSpatialShape","outChannels","dilatedKernelShape","outputSpatialShape","conv2d","getAdjustedConvAttributes","packMode","isPointwise","conv2DUnpackedPointwise","conv2DUnpacked","createMatmulProgramInfoLoader","xIm2Col","createIm2ColProgramInfoLoader","dotProductInputs","createDotProductProgramInfoLoader","PoolConvUtil","adjustPadsBasedOnAutoPad","blocksize","blocksizeSqr","transposePerm","mode","firstReshapeShape","firstReshapedTensor","transposeAttributes","perm","transposeOutput","secondReshapeShape","TypeError","activationCacheKey","createDotProductProgramMetadata","im2colShape","calculateIm2ColDims","kWidth","kHeight","im2colStrides","im2colWidth","im2colHeight","initValue","sharedDim","createDotProductProgramInfo","outputDims","flattenShape","r","func","activation","glslRelu","glslSigmoid","glslClip","clipMin","clipMax","activationName","MIN_CLIP","MAX_CLIP","createGatherProgramInfoLoader","gatherProgramMetadata","indexDataShape","normalizeAxis","indexCopyOps","createGatherProgramInfo","NUMBER_TYPES","createGemmProgramInfoLoader","parseGemmAttributes","isOptionalC","transA","transB","alpha","beta","createGemmProgramInfo","aShape","bShape","M","N","GemmUtil","getShapeOfGemmResult","line","w","wshape","kernelSize","unrolled","row","col","createPackedIm2ColProgramInfo","im2colDims","createIm2ColProgramInfo","createImageScalerProgramInfoLoader","bias","imageScalerProgramMetadata","createGetBiasMethod","createImageScalerProgramInfo","numChannels","meanAndVariance","createMeanAndVarianceProgramInfoLoader","createComputeOutputProgramInfoLoader","meanAndVarianceProgramMetadata","xDims","channelSize","createMeanAndVarianceProgramInfo","computeOutputProgramMetadata","meanAndVarianceShape","textureWidth","textureHeight","meanAndVarianceWidth","meanAndVarianceHeight","createComputeOutputProgramInfo","createLrnProgramInfoLoader","lrnProgramMetadata","C","createLrnProgramInfo","sharedDimIndex","coordsDataType","allGlChannels","getBiasForMatmulSnippet","getBiasForMatmul","getBcastedSamplerForMatmulSnippet","unpackedACoordsSnippet","unpackedBCoordsSnippet","inAShape","inBShape","inARank","inBRank","rankADiff","rankBDiff","broadcastADims","broadcastBDims","coordsASnippet","coordsBSnippet","swapDimSnippet","getBcastSamplerForMatmul","getSamplerAInLoopSnippet","res","getA","getSamplerBInLoopSnippet","getB","createPackedMatmulProgramInfo","createMatmulProgramMetadata","arank","brank","createMatmulProgramInfo","packProgramMetadata","unpackedReversed","inputRank","setup","reversedInputWH","outOfBoundsCondition","cond","getOutOfBoundsCondition","D","getOutput","createPackProgramInfo","getVecChannels","padProgramMetadata","validateInputsV2","createPadProgramInfo","validateInputsV11","attrubutes","generatePadAttributesFromInputs","integerData","floatData","padShape","getPadFunction","getPadConstant","getPadReflect","getPadEdge","createAveragePoolProgramInfo","ceilMode","countIncludePad","isGlobalOperator","getAdjustedPoolAttributesAndOutputShape","op2","generatePoolingCode","createMaxPoolProgramInfo","storageOrder","hasDilations","hasOwnProperty","call","adjustPoolAttributes","computePoolOutputShape","globalMaxPoolAttributes","globalMaxPoolMetadata","inputDims","op1","start","kw","sw","pwStart","pwEnd","dimW","codeW","codeH","codeHEnd","kh","sh","phStart","phEnd","dimH","kernelStrides","stridesRank","padsRank","offsetToIndicesFunction","copyInputDims","copyArray","copyPads","copyKernelStrides","copyStrides","padCode","reduce","cur","array","arrayName","reduceOp","reduceProgramMetadata","createReduceProgramInfo","axes","keepDims","iRank","idxCopy","normalizeAxes","ops","reduceOps","k","idxZero","input3D","outputShape3D","createPackedReshape3DProgramMetadata","inputShape3D","mainLoop","outputCoords","getReshapedInputCoords","getFlattenedIndexFrom3D","createPackedReshape3DProgramInfo","batch","isCheapReshape","calculateReshapedDims","resizeProgramMetadata","createPackedResizeProgramInfo","parseUpsampleAttributes","scales","prepareInputs","every","coordinateTransformMode","dim","outputHeight","outputWidth","inputHeight","inputWidth","scalesHeight","scalesWidth","getSourceFracIndex","outputSizes","scalesTensor","scalesInputIdx","sizesInputIdx","parseScalesData","isResize","sizesTensor","parseScalesDataFromOutputSize","yDims","scalesValidation","end","Int32Array","sliceProgramMetadata","createSliceProgramInfo","starts","ends","val","normalizedAxes","sliceOps","validateInputsV10","generateSliceAttributesFromInputs","some","softmaxComputeMaxProgramMetadata","softmaxComputeScaleProgramMetadata","softmaxProgramMetadata","logicalRowCount","sizeToDimension","featureCount","sizeFromDimension","computeSoftmax","isTransposeRequired","transposedInputShape","transposeAttribute","transposedInputs","_","p","computeMaxProgramInfo","createComputeMaxProgramInfo","max","computeScaleProgramInfo","createComputScaleProgramInfo","softMaxProgramInfo","createSoftMaxProgramInfo","maxElementPerLogicalRow","normalizationPerLogicalRow","splitProgramMetadata","count","getProgramCount","createSplitProgramInfo","numOutputs","outputs","SplitUtil","splitShape","offset","validateInputsV13","sumProgramMetadata","createSumProgramInfo","j","tileProgramMetadata","createTileProgramInfo","tileOps","transposeProgramMetadata","createTransposeProgramInfo","getAdjustedPerm","unpackedOutputShape","getOutputShape","getPermFunctionBody","sortBasedOnPerm","reverseFunc","downloadUint8AsFloat","glslAbs","glslBuiltinUnary","glslAcos","glslAsin","glslAtan","glslCeil","glslCos","glslElu","glslExp","glslFloor","glslIdentity","glslLeakyRelu","glslLog","glslNeg","glslNot","glslSin","glslSqrt","glslTan","glslTanh","createElementwiseProgramInfoLoader","createElementwiseProgramInfo","generateClipAttributesFromInputs","unpackProgramMetadata","createUnpackProgramInfo","innerDims","sourceCoords","getSourceCoords","unsqueezeShape","upsampleProgramMetadata","createUpsampleProgramInfo","opset","extrapolationValue","needRoiInput","useExtrapolation","nearestMode","cubicCoefficientA","excludeOutside","useNearest2xOptimization","roiInputIdx","outputPitches","inputPitches","precalculatedPitches","getInputFloatFunction","profiler","textureLayoutStrategy","repo","attributesBound","buildArtifact","event","gl","useProgram","bindOutput","bindAttributes","attribLocations","bindUniforms","uniformLocations","err","error","draw","vertexShader","deleteShader","deleteProgram","preprocessor","GlslPreprocessor","fragScript","compile","getUniformLocations","getAttribLocations","fragShaderScript","vertexShaderScript","getVertexShaderSource","compileShader","VERTEX_SHADER","debug","fragShader","FRAGMENT_SHADER","createProgram","attachFramebuffer","positionHandle","position","textureCoordHandle","textureCoord","setVertexAttributes","textures","texturePosition","location","find","bindTexture","uniform1fv","uniform1f","uniform1iv","uniform1i","uniformHandle","bindTextureToUniform","getAttribLocation","getUniformLocation","reference","PreferLogicalStrategy","maxTextureSize","ProgramManager","TextureManager","reuseTextures","pack2unpackMap","unpack2packMap","createInferenceHandler","WebGLInferenceHandler","onGraphInitialized","graph","initializers","getValues","addInitializer","opsets","op","resolveOperator","impl","opImpl","opInit","internalFormat","R32F","format","RED","RGBA32F","RGBA","src","textureSize","allocate","dataSize","dest","ALPHA","UNSIGNED_BYTE","_textureSize","byteOffset","byteLength","isEmptyArray","isArray","parseAxisParam","assert","ax","isInt","sizeFromShape","sizeToSquarishShape","computeTextureWH","prefs","breakAxis","wsize","hsize","totalSize","wh","computeTexture","logShape","squeezeResult","dimsToSkip","inferredDims","reversedWH","config","pendingRead","inUseTextures","idleTextures","textureLookup","textureDataType","toEncoderType","encoder","getEncoder","pop","updateTexture","toTextureData","allocateTexture","toTensorData","subscribers","createAndWaitForFence","tensorData","deleteTexture","splice","Int16Array","Int8Array","Uint16Array","Float64Array","_dataType","len","checkFn","delayFn","_counter","maxCounter","reject","tryCount","tryFn","nextBackoff","setTimeout","charAt","toUpperCase","createNewWebGLContext","canvas","ca","depth","antialias","stencil","preserveDrawingBuffer","premultipliedAlpha","failIfMajorPerformanceCaveat","getContext","WebGLContext","webgl2","OffscreenCanvas","createOffscreenCanvas","document","createElement","createCanvas","isContextLost","disable","DEPTH_TEST","STENCIL_TEST","BLEND","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","enable","SCISSOR_TEST","CULL_FACE","cullFace","BACK","linearSearchLastTrue","frameBufferBound","itemsToPoll","getExtensions","vertexbuffer","createVertexbuffer","framebuffer","createFramebuffer","queryVitalParameters","createTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","checkError","texSubImage2D","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","viewport","scissor","readPixels","isFramebufferReady","getActiveTexture","getParameter","ACTIVE_TEXTURE","TEXTURE0","getTextureBinding","TEXTURE_BINDING_2D","getFramebufferBinding","FRAMEBUFFER_BINDING","vertexAttribPointer","enableVertexAttribArray","attachShader","linkProgram","shaderType","shader","createShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","activeTexture","drawArrays","TRIANGLE_STRIP","getError","label","toString","DataEncoders","RedFloat32DataEncoder","isRenderFloat32Supported","RGBAFloatDataEncoder","textureHalfFloatExtension","HALF_FLOAT_OES","Uint8DataEncoder","unit","maxTextureImageUnits","disposed","deleteFramebuffer","bindBuffer","ARRAY_BUFFER","deleteBuffer","ELEMENT_ARRAY_BUFFER","finish","createDefaultGeometry","createBuffer","geometry","bufferData","STATIC_DRAW","fb","isFloatTextureAttachableToFrameBuffer","checkFloatTextureAttachableToFrameBuffer","checkRenderFloat32","checkFloat32Download","isBlendSupported","checkFloat32Blend","MAX_TEXTURE_SIZE","MAX_TEXTURE_IMAGE_UNITS","colorBufferFloatExtension","getExtension","disjointTimerQueryWebgl2Extension","textureFloatExtension","frameBuffer","isComplete","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","fragmentShader","POINTS","NO_ERROR","beginTimer","gl2","ext","query","createQuery","beginQuery","TIME_ELAPSED_EXT","endTimer","endQuery","isTimerResultAvailable","available","disjoint","getQueryParameter","QUERY_RESULT_AVAILABLE","GPU_DISJOINT_EXT","getTimerResult","timeElapsed","QUERY_RESULT","deleteQuery","waitForQueryAndGetTime","repeatedTry","fenceContext","createFence","pollFence","isFencePassed","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","status","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","addItemToPoll","pollItems","isDoneFn","resolveFn","KernelOp","getNodes","_ops","reset","_starter","resolved","_values","getInputIndices","execute","sessionHandler","modelInputs","graphInputs","sequence","graphValues","rear","thisOpIndex","thisOp","inputList","inputTensors","outputList","downstreamNodes","currentDownstreamNodeIndex","currentDownstreamNode","getOutputIndices","outputIndex","outputTensor","getData","Graph","graphProto","initializer","GraphImpl","Value","valueInfo","_from","_to","tensorValueTypeFromProto","tensorType","Node","_nodeProto","NodeProto","opType","tensorAttributesFromORTFormat","executeNode","graphInitializer","buildGraph","transformGraph","checkIsAcyclic","_allInputIndices","getInputNames","_allInputNames","_allOutputIndices","getOutputNames","_allOutputNames","_allData","_nodes","GraphProto","buildGraphFromOnnxFormat","buildGraphFromOrtFormat","dataIndices","nodesIndices","inputValueNames","currentIndex","tensorDimsFromProto","nodeProto","pick","dataIndex","inputsLength","inputName","nodeArgsLength","nodeArgs","valueType","TypeInfoValue","tensor_type","TensorTypeAndShape","elemType","dimLength","dimValue","initializersLength","tensorDimsFromORTFormat","outputsLength","outputName","nodesLength","attributesLength","starters","nodesStack","nodesState","nodeIndex","outgoingEdgeIndex","downstreamNodeIndex","removeAllIdentityNodes","removeAllDropoutNodes","fuseConvActivationNodes","finalizeGraph","newIndices","nodePossition","ind","currentData","deleteNode","inputValueIndex","outputValueIndex","nodesConsumingOutput","delIndex","replaceIndex","isActivation","n","next","child","SEVERITY_VALUE","info","fatal","LOGGER_PROVIDER_MAP","_severity","_content","_category","severity","content","category","console","color","LOGGER_DEFAULT_CONFIG","provider","minimalSeverity","logDateTime","logSourceLocation","LOGGER_CONFIG_MAP","arg0","arg1","arg2","arg3","bind","logInternal","stack","Date","toISOString","previousConfig","logLevel","Event","startTime","endCallback","timer","ctx","checkTimer","EventRecord","endTime","maxNumberEvents","flushBatchSize","flushIntervalInMilliseconds","_started","_flushPointer","_maxNumberEvents","_flushBatchSize","_flushIntervalInMilliseconds","_timingEvents","_flushTime","now","stop","logOneEvent","begin","isPromise","then","reason","eventRes","endSync","toFixed","currentTime","previousPointer","started","performance","load","buf","isOrtFormat","loadFromOnnxFormat","loadFromOrtFormat","modelProto","ModelProto","irVersion","_opsets","opsetImport","domain","_graph","flatbuffers","ByteBuffer","ortModel","InferenceSession","getRootAsInferenceSession","model","opsetImportLength","opsetId","INT_TYPES","FLOAT_TYPES","matchSelector","selector","endsWith","rangeStart","parseInt","substring","isNaN","pair","rangeEnd","rules","rule","versionSelector","DimensionValueType","TensorDataType","NodeType","Shape","bb","bb_pos","__init","readInt32","setPosition","SIZE_PREFIX_LENGTH","__offset","Dimension","__indirect","__vector","__vector_len","builder","startObject","addFieldOffset","startVector","addOffset","endVector","numElems","endObject","startShape","addDim","endShape","DimensionValue","denotation","optionalEncoding","__string","valueOffset","denotationOffset","startDimension","addValue","addDenotation","endDimension","dimType","readInt8","UNKNOWN","readInt64","createLong","dimParam","addFieldInt8","addFieldInt64","dimParamOffset","startDimensionValue","addDimType","addDimValue","addDimParam","endDimensionValue","UNDEFINED","addFieldInt32","shapeOffset","startTensorTypeAndShape","addElemType","addShape","endTensorTypeAndShape","MapType","keyType","TypeInfo","valueTypeOffset","startMapType","addKeyType","addValueType","endMapType","SequenceType","elemTypeOffset","startSequenceType","endSequenceType","EdgeEnd","readUint32","srcArgIndex","dstArgIndex","node_index","src_arg_index","dst_arg_index","prep","writeInt32","NodeEdge","inputEdges","inputEdgesLength","outputEdges","outputEdgesLength","inputEdgesOffset","outputEdgesOffset","startNodeEdge","addNodeIndex","addInputEdges","addOutputEdges","endNodeEdge","docString","sinceVersion","Primitive","executionProviderType","inputArgCounts","inputArgCountsLength","inputArgCountsArray","bytes","implicitInputs","implicitInputsLength","nameOffset","docStringOffset","domainOffset","opTypeOffset","executionProviderTypeOffset","inputsOffset","outputsOffset","attributesOffset","inputArgCountsOffset","addInt32","implicitInputsOffset","startNode","addName","addDocString","addDomain","addSinceVersion","addIndex","addOpType","addType","addExecutionProviderType","addInputs","addOutputs","addAttributes","addInputArgCounts","addImplicitInputs","endNode","ValueInfo","typeOffset","startValueInfo","endValueInfo","readUint8","NONE","__union","startTypeInfo","endTypeInfo","OperatorSetId","startOperatorSetId","addVersion","endOperatorSetId","dimsLength","rawData","rawDataLength","rawDataArray","stringData","stringDataLength","dimsOffset","addInt64","rawDataOffset","addInt8","stringDataOffset","startTensor","addDims","addDataType","addRawData","addStringData","endTensor","SparseTensor","values","indices","valuesOffset","indicesOffset","startSparseTensor","addValues","addIndices","endSparseTensor","readFloat32","floatsLength","graphsLength","addFieldFloat32","sOffset","tOffset","gOffset","floatsOffset","addFloat32","intsOffset","stringsOffset","tensorsOffset","graphsOffset","startAttribute","addF","addI","addS","addT","addG","addFloats","addInts","addStrings","addTensors","addGraphs","endAttribute","maxNodeIndex","nodeEdges","nodeEdgesLength","sparseInitializers","sparseInitializersLength","initializersOffset","nodeArgsOffset","nodesOffset","nodeEdgesOffset","sparseInitializersOffset","startGraph","addInitializers","addNodeArgs","addNodes","addMaxNodeIndex","addNodeEdges","addSparseInitializers","endGraph","Model","producerName","producerVersion","modelVersion","graphDocString","opsetImportOffset","producerNameOffset","producerVersionOffset","graphOffset","graphDocStringOffset","startModel","addIrVersion","addOpsetImport","addProducerName","addProducerVersion","addModelVersion","addGraph","addGraphDocString","endModel","KernelCreateInfos","nodeIndices","nodeIndicesLength","nodeIndicesArray","kernelDefHashes","readUint64","kernelDefHashesLength","nodeIndicesOffset","kernelDefHashesOffset","startKernelCreateInfos","addNodeIndices","addKernelDefHashes","endKernelCreateInfos","SubGraphSessionState","graphId","sessionState","SessionState","graphIdOffset","sessionStateOffset","requiredField","startSubGraphSessionState","addGraphId","addSessionState","endSubGraphSessionState","kernels","subGraphSessionStates","subGraphSessionStatesLength","kernelsOffset","subGraphSessionStatesOffset","startSessionState","addKernels","addSubGraphSessionStates","endSessionState","__has_identifier","ortVersion","ortVersionOffset","modelOffset","startInferenceSession","addOrtVersion","addModel","endInferenceSession","outputNames","feeds","_fetches","_options","inputMap","feed","outputMap","startProfiling","endProfiling","_initialized","Profiler","create","graphInputTypes","graphInputDims","_model","arg","process","promisify","readFile","response","fetch","arrayBuffer","isView","modelProtoBlob","initializeOps","_executionPlan","ExecutionPlan","normalizeAndValidateInputs","outputTensors","createOutput","modelInputNames","sortedInputs","sortedInputsIndex","validateInputTensorDims","modelInputIndices","modelValues","graphInput","validateInputTensorTypes","givenInputs","expectedType","actualType","noneDimSupported","expectedDims","actualDims","compareTensorDims","modelOutputNames","dataProvider","asyncDataProvider","_strides","Guid","validateDimsAndCalcSize","empty","RangeError","dataviewConstructor","sizeof","dataBuffer","createView","tensorProto","str","dataDest","dataSource","DataView","elementSize","sizeofProto","readProto","TensorProto","DataType","INT32","INT16","UINT16","INT8","UINT8","BOOL","int32Data","INT64","int64Data","DOUBLE","doubleData","UINT32","UINT64","uint64Data","element","ortTensor","greaterThanOrEqual","lessThan","toNumber","view","getUint8","getInt8","getUint16","getInt16","getFloat32","getInt32","getUint32","fromBits","getFloat64","expectedDimensions","expr","msg","n1","n2","MatMulUtil","dimsA","dimsB","adims","bdims","isMatMul","crank","cdims","cShapeMatMul","calcMatMulShape","aLen","bLen","broadcastedIndices","originalShape","originalIndices","fillIndex","inplace","resultType","outputIndices","originalIndicesA","originalIndicesB","rest","valA","valB","isAScalar","isBScalar","finalShape","finalRank","unshift","target","targetIndex","sourceIndex","blockSize","leftShape","transLeft","rightShape","transRight","biasShape","K","kDim","isValidBroadcast","typeProto","unsigned","Long","fromValue","low","high","getSizeFromDimensionRange","axisToIncrementOn","originalDims","shapeHints","nDims","unknownDimension","newTensorSize","oldTensorSize","pad","shape1","shape2","total","y","right","inSqueezeList","inputDimsIterator","determineSplit","numElementsAlongAxis","ReduceUtil","keepdims","calcReduceShape","inputStrides","indicesY","calcReduceByAxis","curAxisInd","pos","step","adjustPadAndReturnShape","computeShapeHelper","filterDims","inSize","padHeadIndex","padTailIndex","dkernel","padNeeded","TextDecoder","isProxy","proxyWorker","initWasmCallbacks","initOrtCallbacks","initializing","initialized","aborted","createSessionAllocateCallbacks","createSessionFinalizeCallbacks","createSessionCallbacks","releaseSessionCallbacks","runCallbacks","endProfilingCallbacks","ensureWorker","onProxyWorkerMessage","ev","out","scriptSrc","currentScript","wasmPaths","substr","lastIndexOf","terminate","onmessage","message","in","postMessage","initializeWebAssembly","initializeRuntime","core","initRuntime","createSessionAllocate","createSessionFinalize","modeldata","createSession","releaseSession","sessionId","inputIndices","extractTransferableBuffers","setRunOptions","getInstance","runOptionsHandle","allocs","runOptions","logSeverityLevel","logVerbosityLevel","tagDataOffset","tag","allocWasmString","_OrtCreateRunOptions","checkLastError","extra","iterateExtraOptions","WeakSet","keyDataOffset","valueDataOffset","_OrtAddRunConfigEntry","_OrtReleaseRunOptions","alloc","_free","runtimeInitialized","path","modelData","fetches","inputArray","entries","kvp","setSessionOptions","sessionOptionsHandle","sessionOptions","use_ort_model_bytes_directly","executionProviders","ep","enableMemPattern","appendDefaultOptions","graphOptimizationLevel","getGraphOptimzationLevel","executionMode","getExecutionMode","logIdDataOffset","logId","optimizedModelFilePathOffset","optimizedModelFilePath","_OrtCreateSessionOptions","enableCpuMemArena","enableProfiling","epName","webnnOptions","deviceType","_OrtAddSessionConfigEntry","powerPreference","epNameDataOffset","_OrtAppendExecutionProvider","setExecutionProviders","_OrtReleaseSessionOptions","tensorDataTypeStringToEnum","tensorDataTypeEnumToString","getTensorElementSize","dateType","tensorTypeToTypedArrayConstructor","BigInt64Array","BigUint64Array","logLevelStringToEnum","loggingLevel","_OrtInit","activeSessions","modelDataOffset","_malloc","HEAPU8","sessionHandle","inputNamesUTF8Encoded","outputNamesUTF8Encoded","_OrtCreateSession","outputCount","stackSave","dataOffset","stackAlloc","_OrtGetInputOutputCount","HEAP32","stackRestore","getSessionInputOutputCount","_OrtGetInputName","UTF8ToString","_OrtGetOutputName","_OrtFree","_OrtReleaseSession","runOptionsAllocs","inputValues","inputAllocs","dataByteLength","HEAPU32","dimIndex","_OrtCreateTensor","beforeRunStack","inputValuesOffset","inputNamesOffset","outputValuesOffset","outputNamesOffset","inputValuesIndex","inputNamesIndex","outputValuesIndex","outputNamesIndex","errorCode","_OrtRun","runPromise","jsepRunPromise","beforeGetTensorDataStack","tensorDataOffset","_OrtGetTensorData","tensorDataIndex","maxBytesToRead","_OrtReleaseTensor","profileFileName","_OrtEndProfiling","buffers","ortWasmFactory","ortWasmFactoryThreaded","flags","timeout","useThreads","SharedArrayBuffer","MessageChannel","port1","WebAssembly","validate","isMultiThreadSupported","useSimd","isSimdSupported","wasmPrefixOverride","wasmFileName","getWasmFileName","wasmPathOverride","isTimeout","tasks","locateFile","fileName","scriptDirectory","Blob","URL","createObjectURL","mainScriptUrlOrBlob","__dirname","scriptSourceCode","what","race","PThread","terminateAllThreads","dataLength","lengthBytesUTF8","stringToUTF8","prefix","seen","paramsOffset","_OrtGetLastError","errorMessagePointer","errorMessage","Worker_fn","workerConstructor","workerOptions","url","globalScope","window","blob","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","append","getBlob","webkitURL","objectURL","worker","revokeObjectURL","encodeURIComponent","valuesById","$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Version","properties","sparseTensors","typeProtos","prototype","refAttrName","newBuffer","sparseTensor","tp","emptyArray","writer","uint32","string","float","int64","fork","ldelim","TypeProto","int32","SparseTensorProto","encodeDelimited","reader","end2","skipType","decodeDelimited","verify","isString","fromObject","object","String","LongBits","base64","toObject","arrays","defaults","long","longs","enums","json","isFinite","toJSON","toJSONOptions","getTypeUrl","typeUrlPrefix","ValueInfoProto","TrainingInfoProto","initializationBinding","updateBinding","initialization","algorithm","StringStringEntryProto","metadataProps","trainingInfo","functions","OperatorSetIdProto","FunctionProto","TensorAnnotation","quantParameterTensorNames","tensorName","sparseInitializer","quantizationAnnotation","externalData","segment","dataLocation","Segment","double","uint64","DataLocation","TensorShapeProto","$oneOfFields","defineProperty","oneOfGetter","oneOfSetter","oneofs","sequenceType","mapType","optionalType","sparseTensorType","Sequence","Optional","OperatorStatus","attributeProto","_scriptDir","__filename","P","L","W","I","U","H","u","q","ready","l","h","m","importScripts","ENVIRONMENT_IS_PTHREAD","T","A","O","dirname","startsWith","normalize","readFileSync","thisProgram","argv","exitCode","inspect","global","Worker","href","XMLHttpRequest","open","send","responseText","responseType","onload","onerror","S","E","warn","writeSync","print","printErr","quit","wasmBinary","F","noExitRuntime","ae","R","Y","z","G","HEAP8","HEAP16","HEAPU16","HEAPF32","HEAPF64","HEAP64","HEAPU64","INITIAL_MEMORY","wasmMemory","Memory","initial","maximum","shared","V","J","Z","$","Q","preRun","ee","ne","re","te","onAbort","RuntimeError","oe","ie","ue","credentials","ok","catch","instantiate","fe","se","ce","ye","hb","Lb","le","Db","kb","jb","cmd","start_routine","Mb","Bb","pthread_ptr","unref","Sb","pe","de","fromCharCode","he","me","Dn","Nb","onExit","be","we","ge","nb","zb","tb","Fb","Vb","receiveObjectTransfer","Kb","threadInitTLS","yb","setExitStatus","xb","Xb","ar","Jb","Cb","targetThread","Kn","Wb","transferList","bn","thread","loaded","threadId","text","alert","args","filename","lineno","on","handlers","urlOrBlob","wasmModule","Ib","Ab","ve","establishStackSpace","fr","cr","_e","Te","gb","ub","qb","pb","Ae","Oe","Ub","Se","Ee","Me","charCodeAt","Ce","ke","Fe","Pe","Re","De","xe","We","Ie","Ue","je","He","Ye","Be","invokeEntryPoint","ir","ze","qe","Ge","Le","Ne","Ve","Je","apply","arguments","Xe","Ze","$e","Ke","Eb","Qe","en","nn","Hb","rn","wb","tn","an","fromWireType","un","fn","sn","cn","ln","pn","dn","hn","mn","Atomics","Tb","store","ur","gn","nr","er","__emscripten_thread_mailbox_await","checkMailbox","yn","vn","wn","_n","globalThis","Function","Tn","An","On","Sn","En","Mn","Cn","kn","getFullYear","getMonth","getDate","Fn","Pn","Rn","Qn","sr","lr","tr","hrtime","timeOrigin","xn","Wn","In","Un","USER","LOGNAME","PATH","PWD","HOME","LANG","languages","jn","Hn","Yn","Bn","zn","qn","Gn","Ln","Nn","Vn","getDay","lb","mb","getTime","setDate","setMonth","setFullYear","Qb","Pb","rb","vb","sb","ib","Yb","Ob","Rb","includes","Jn","Xn","BindingError","InternalError","count_emval_handles","Zn","$n","ra","ga","rr","na","ka","ba","ja","la","toWireType","argPackAdvance","readValueFromPointer","ob","ta","sa","Uint8ClampedArray","ua","Gb","qa","ea","fa","pa","ref","deleteObject","getUTCSeconds","getUTCMinutes","getUTCHours","getUTCDate","getUTCMonth","getUTCFullYear","getUTCDay","UTC","getSeconds","getMinutes","getHours","getTimezoneOffset","aa","setTime","getYear","toTimeString","va","oa","da","grow","ha","ia","ma","asm","Ua","Xa","wa","monitorRunDependencies","clearInterval","instantiateWasm","instantiateStreaming","instance","xa","ya","za","Aa","Ba","Ca","Da","Ea","Fa","Ga","Ha","Ia","Ja","Ka","La","Ma","Na","Oa","Pa","Qa","_pthread_self","Ra","Sa","Ta","Va","__emscripten_tls_init","__embind_initialize_bindings","Wa","__emscripten_thread_init","Ya","_a","$a","__emscripten_thread_crashed","Za","__emscripten_thread_exit","ab","__emscripten_check_mailbox","cb","db","eb","pr","calledRun","onRuntimeInitialized","postRun","startWorker","setStatus","keepRuntimeAlive","ExitStatus","preInit","ortWasm","fs","copyWithin","pending","b64","s64","parts","chunk","invalidEncoding","test","EventEmitter","_listeners","evt","off","listeners","emit","f32","f8b","writeFloat_f32_cpy","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","round","exponent","LN2","readFloat_ieee754","readUint","uint","mantissa","NaN","Infinity","writeUintLE","writeUintBE","readUintLE","readUintBE","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","inquire","moduleName","mod","eval","SIZE","MAX","slab","utf8","read","write","c1","c2","__esModule","guid","EMPTY","isGuid","validator","gen","createEmpty","raw","random","equals","other","isEmpty","protobuf","configure","_configure","BufferWriter","BufferReader","rpc","indexOutOfRange","writeLength","create_array","Buffer","isBuffer","readLongVarint","bits","readFixed32_end","readFixed64","_slice","sint32","bool","fixed32","sfixed32","skip","wireType","BufferReader_","merge","sint64","zzDecode","fixed64","sfixed64","utf8Slice","Service","rpcImpl","requestDelimited","responseDelimited","Boolean","rpcCall","method","requestCtor","responseCtor","request","callback","asPromise","endedByRPC","zero","zzEncode","zeroHash","fromNumber","fromString","toLong","fromHash","hash","toHash","mask","part0","part1","part2","dst","ifNotSet","newError","CustomError","captureStackTrace","writable","enumerable","configurable","pool","isNode","freeze","emptyObject","isObject","isset","isSet","prop","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","lcFirst","toLowerCase","ProtocolError","fieldNames","fieldMap","encoding","allocUnsafe","Op","noop","State","states","writeByte","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","backends","backendsSortedByPriority","priority","currentBackend","backendHints","backendNames","errors","backendName","backendInfo","isInitializing","initPromise","backend_impl_js_1","version_js_1","logLevelValue","webgpu","common","env_impl_js_1","__createBinding","k2","desc","getOwnPropertyDescriptor","__exportStar","tensor_js_1","isFetchesEmpty","isFetches","arg1Keys","results","returnValue","filePathOrUint8Array","isSafeInteger","inference_session_impl_js_1","tensorToImageData","tensorToDataURL","pixels2DContext","tensorLayout","inputformat","norm","normMean","normBias","rTensorPointer","gTensorPointer","bTensorPointer","aTensorPointer","fillStyle","fillRect","toDataURL","image","rImagePointer","gImagePointer","bImagePointer","aImagePointer","createImageData","tensorFromImage","bufferToTensor","outputformat","tensorFormat","float32Data","isHTMLImageEle","HTMLImageElement","isImageDataEle","ImageData","isImageBitmap","ImageBitmap","bufferToTensorOptions","resizedHeight","resizedWidth","drawImage","getImageData","newImage","Image","crossOrigin","img","tempCanvas","putImageData","tensor_conversion_impl_js_1","tensor_factory_impl_js_1","tensor_utils_impl_js_1","NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP","NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP","isBigIntChecked","isBigInt64ArrayAvailable","isBigUint64ArrayAvailable","checkBigInt","typedArrayConstructor","BigInt","firstElementType","mappedType","calculateSize","toImageData","tensorReshape","tensor_impl_js_1","default","Instance","Module","ctz32","clz32","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","radix","radixToPower","power","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","eq","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","comp","lt","lessThanOrEqual","lte","greaterThan","gt","gte","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","b00","divide","divisor","approx","toUnsigned","shru","shr","shl","log2","delta","approxRes","approxRem","modulo","countLeadingZeros","clz","countTrailingZeros","ctz","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","rotateLeft","rotl","rotateRight","rotr","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","_default","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","float32","float64","toFloat64","Builder","opt_initial_size","initial_size","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","clear","capacity","forceDefaults","asUint8Array","additional_bytes","align_size","old_buf_size","growByteBuffer","byte_size","writeInt8","writeInt16","writeInt64","writeFloat32","writeFloat64","addInt16","addFloat64","voffset","slot","addFieldInt16","addFieldFloat64","addFieldStruct","nested","notNested","new_buf_size","nbb","numfields","vtableloc","trimmed_size","existing_vtable","vt1","outer_loop","vt2","readInt16","root_table","opt_file_identifier","opt_size_prefix","size_prefix","file_identifier","finishSizePrefixed","table","field","table_start","vtable_start","elem_size","num_elems","alignment","createString","codePoint","bytes_","position_","readUint16","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","vtable_offset","opt_encoding","ident","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","definition","Symbol","toStringTag","__webpack_exports__"],"sourceRoot":""}