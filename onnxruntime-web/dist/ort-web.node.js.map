{"version":3,"file":"ort-web.node.js","mappings":"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","sources":["webpack://onnxruntime-web/./lib/backend-onnxjs.ts","webpack://onnxruntime-web/./lib/backend-wasm.ts","webpack://onnxruntime-web/./lib/index.ts","webpack://onnxruntime-web/./lib/onnxjs/attribute-with-cache-key.ts","webpack://onnxruntime-web/./lib/onnxjs/attribute.ts","webpack://onnxruntime-web/./lib/onnxjs/backend.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/backend-webgl.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-coordinate-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-definitions.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-encoding-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-fragcolor-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-function-inliner.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-preprocessor.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-registered-libs.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-shape-utils-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-source.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-vec-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/inference-handler.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/op-resolve-rules.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/batch-normalization.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/binary-op.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/cast.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/concat-packed.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/concat.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/conv-grouped.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/conv-pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/conv-transpose.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/conv.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/depth-to-space.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/dot-product.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/flatten.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/fuse-utils.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/gather.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/gemm.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/im2col-pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/im2col.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/image-scaler.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/instance-normalization.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/lrn.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/matmul-pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/matmul.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/packing-utils.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/pad.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/pool.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/reduce.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/reshape-packed.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/reshape.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/resize-packed.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/shape.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/slice.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/softmax.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/split.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/squeeze.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/sum.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/tile.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/transpose.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/uint8-encode.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/unary-op.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/unpack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/unsqueeze.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/upsample.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/program-manager.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/session-handler.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/texture-data-encoder.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/texture-layout-strategy.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/texture-layout.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/texture-manager.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/types.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/utils.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/webgl-context-factory.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/webgl-context.ts","webpack://onnxruntime-web/./lib/onnxjs/execution-plan.ts","webpack://onnxruntime-web/./lib/onnxjs/graph.ts","webpack://onnxruntime-web/./lib/onnxjs/instrument.ts","webpack://onnxruntime-web/./lib/onnxjs/model.ts","webpack://onnxruntime-web/./lib/onnxjs/operators.ts","webpack://onnxruntime-web/./lib/onnxjs/opset.ts","webpack://onnxruntime-web/./lib/onnxjs/ort-schema/flatbuffers/ort-generated.ts","webpack://onnxruntime-web/./lib/onnxjs/session-handler.ts","webpack://onnxruntime-web/./lib/onnxjs/session.ts","webpack://onnxruntime-web/./lib/onnxjs/tensor.ts","webpack://onnxruntime-web/./lib/onnxjs/util.ts","webpack://onnxruntime-web/./lib/version.ts","webpack://onnxruntime-web/./lib/wasm/proxy-wrapper.ts","webpack://onnxruntime-web/./lib/wasm/run-options.ts","webpack://onnxruntime-web/./lib/wasm/session-handler.ts","webpack://onnxruntime-web/./lib/wasm/session-options.ts","webpack://onnxruntime-web/./lib/wasm/wasm-common.ts","webpack://onnxruntime-web/./lib/wasm/wasm-core-impl.ts","webpack://onnxruntime-web/./lib/wasm/wasm-factory.ts","webpack://onnxruntime-web/./lib/wasm/wasm-utils.ts","webpack://onnxruntime-web/./lib/wasm/proxy-worker/main.ts","webpack://onnxruntime-web/../node_modules/worker-loader/dist/runtime/inline.js","webpack://onnxruntime-web/./lib/onnxjs/ort-schema/protobuf/onnx.js","webpack://onnxruntime-web/./lib/wasm/binding/ort-wasm-threaded.min.js","webpack://onnxruntime-web/./lib/wasm/binding/ort-wasm.js","webpack://onnxruntime-web/./node_modules/@protobufjs/aspromise/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/base64/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/eventemitter/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/float/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/inquire/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/pool/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/utf8/index.js","webpack://onnxruntime-web/./node_modules/guid-typescript/dist/guid.js","webpack://onnxruntime-web/./node_modules/protobufjs/minimal.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/index-minimal.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/reader.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/reader_buffer.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/roots.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/rpc.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/rpc/service.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/util/longbits.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/util/minimal.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/writer.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/writer_buffer.js","webpack://onnxruntime-web/external commonjs \"fs\"","webpack://onnxruntime-web/external commonjs \"os\"","webpack://onnxruntime-web/external commonjs \"path\"","webpack://onnxruntime-web/external commonjs \"perf_hooks\"","webpack://onnxruntime-web/external commonjs \"util\"","webpack://onnxruntime-web/external commonjs \"worker_threads\"","webpack://onnxruntime-web/external commonjs {\"commonjs\":\"onnxruntime-common\",\"commonjs2\":\"onnxruntime-common\",\"root\":\"ort\"}","webpack://onnxruntime-web/./node_modules/long/umd/index.js","webpack://onnxruntime-web/./node_modules/flatbuffers/js/flatbuffers.mjs","webpack://onnxruntime-web/webpack/bootstrap","webpack://onnxruntime-web/webpack/runtime/compat get default export","webpack://onnxruntime-web/webpack/runtime/define property getters","webpack://onnxruntime-web/webpack/runtime/hasOwnProperty shorthand","webpack://onnxruntime-web/webpack/runtime/make namespace object","webpack://onnxruntime-web/webpack/startup"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable import/no-internal-modules */\nimport {Backend, InferenceSession, SessionHandler} from 'onnxruntime-common';\n\nimport {Session} from './onnxjs/session';\nimport {OnnxjsSessionHandler} from './onnxjs/session-handler';\n\nclass OnnxjsBackend implements Backend {\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  async init(): Promise<void> {}\n\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    // NOTE: Session.Config(from onnx.js) is not compatible with InferenceSession.SessionOptions(from\n    // onnxruntime-common).\n    //       In future we should remove Session.Config and use InferenceSession.SessionOptions.\n    //       Currently we allow this to happen to make test runner work.\n    const session = new Session(options as unknown as Session.Config);\n\n    // typescript cannot merge method override correctly (so far in 4.2.3). need if-else to call the method.\n    if (typeof pathOrBuffer === 'string') {\n      await session.loadModel(pathOrBuffer);\n    } else {\n      await session.loadModel(pathOrBuffer);\n    }\n\n    return new OnnxjsSessionHandler(session);\n  }\n}\n\nexport const onnxjsBackend = new OnnxjsBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Backend, env, InferenceSession, SessionHandler} from 'onnxruntime-common';\nimport {cpus} from 'os';\n\nimport {initializeWebAssemblyInstance} from './wasm/proxy-wrapper';\nimport {OnnxruntimeWebAssemblySessionHandler} from './wasm/session-handler';\n\n/**\n * This function initializes all flags for WebAssembly.\n *\n * Those flags are accessible from `ort.env.wasm`. Users are allow to set those flags before the first inference session\n * being created, to override default value.\n */\nexport const initializeFlags = (): void => {\n  if (typeof env.wasm.initTimeout !== 'number' || env.wasm.initTimeout < 0) {\n    env.wasm.initTimeout = 0;\n  }\n\n  if (typeof env.wasm.simd !== 'boolean') {\n    env.wasm.simd = true;\n  }\n\n  if (typeof env.wasm.proxy !== 'boolean') {\n    env.wasm.proxy = false;\n  }\n\n  if (typeof env.wasm.numThreads !== 'number' || !Number.isInteger(env.wasm.numThreads) || env.wasm.numThreads <= 0) {\n    const numCpuLogicalCores = typeof navigator === 'undefined' ? cpus().length : navigator.hardwareConcurrency;\n    env.wasm.numThreads = Math.min(4, Math.ceil((numCpuLogicalCores || 1) / 2));\n  }\n};\n\nclass OnnxruntimeWebAssemblyBackend implements Backend {\n  async init(): Promise<void> {\n    // populate wasm flags\n    initializeFlags();\n\n    // init wasm\n    await initializeWebAssemblyInstance();\n  }\n  createSessionHandler(path: string, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\n  createSessionHandler(buffer: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    const handler = new OnnxruntimeWebAssemblySessionHandler();\n    await handler.loadModel(pathOrBuffer, options);\n    return Promise.resolve(handler);\n  }\n}\n\nexport const wasmBackend = new OnnxruntimeWebAssemblyBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports */\n// We use \"require\" instead of \"import\" here because import statement must be put in top level. Our current code does\n// not allow terser to tree-shaking code as expected because some codes are treated as having side effects.\n// So we import code inside the if-clause to allow terser remove the code safely.\n\nexport * from 'onnxruntime-common';\nimport {registerBackend, env} from 'onnxruntime-common';\nimport {version} from './version';\n\nif (!BUILD_DEFS.DISABLE_WEBGL) {\n  const onnxjsBackend = require('./backend-onnxjs').onnxjsBackend;\n  registerBackend('webgl', onnxjsBackend, -10);\n}\n\nif (!BUILD_DEFS.DISABLE_WASM) {\n  const wasmBackend = require('./backend-wasm').wasmBackend;\n  if (!BUILD_DEFS.DISABLE_WEBGPU && typeof navigator !== 'undefined' && navigator.gpu) {\n    registerBackend('webgpu', wasmBackend, 5);\n  }\n  registerBackend('cpu', wasmBackend, 10);\n  registerBackend('wasm', wasmBackend, 10);\n  registerBackend('xnnpack', wasmBackend, 9);\n  registerBackend('webnn', wasmBackend, 9);\n}\n\nenv.versions.web = version;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nclass AttributeWithCacheKeyImpl {\n  constructor(attribute: Record<string, unknown>) {\n    Object.assign(this, attribute);\n  }\n\n  private _cacheKey: string;\n  public get cacheKey(): string {\n    if (!this._cacheKey) {\n      this._cacheKey =\n          Object.getOwnPropertyNames(this).sort().map(name => `${(this as Record<string, unknown>)[name]}`).join(';');\n    }\n    return this._cacheKey;\n  }\n}\n\nexport interface AttributeWithCacheKey {\n  readonly cacheKey: string;\n}\n\nexport const createAttributeWithCacheKey = <T extends Record<string, unknown>>(attribute: T): T&AttributeWithCacheKey =>\n    new AttributeWithCacheKeyImpl(attribute) as unknown as T & AttributeWithCacheKey;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport Long from 'long';\n\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\nimport {onnx} from './ort-schema/protobuf/onnx';\nimport {Tensor} from './tensor';\nimport {decodeUtf8String, LongUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Attribute {\n  export interface DataTypeMap {\n    float: number;\n    int: number;\n    string: string;\n    tensor: Tensor;\n    floats: number[];\n    ints: number[];\n    strings: string[];\n    tensors: Tensor[];\n  }\n\n  export type DataType = keyof DataTypeMap;\n}\n\ntype ValueTypes = Attribute.DataTypeMap[Attribute.DataType];\n\ntype Value = [ValueTypes, Attribute.DataType];\n\nexport class Attribute {\n  constructor(attributes: onnx.IAttributeProto[]|ortFbs.Attribute[]|null|undefined) {\n    this._attributes = new Map();\n    if (attributes !== null && attributes !== undefined) {\n      for (const attr of attributes) {\n        if (attr instanceof onnx.AttributeProto) {\n          this._attributes.set(attr.name, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        } else if (attr instanceof ortFbs.Attribute) {\n          this._attributes.set(attr.name()!, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        }\n      }\n      if (this._attributes.size < attributes.length) {\n        throw new Error('duplicated attribute names');\n      }\n    }\n  }\n\n  set(key: string, type: Attribute.DataType, value: ValueTypes): void {\n    this._attributes.set(key, [value, type]);\n  }\n  delete(key: string): void {\n    this._attributes.delete(key);\n  }\n  getFloat(key: string, defaultValue?: Attribute.DataTypeMap['float']) {\n    return this.get(key, 'float', defaultValue);\n  }\n\n  getInt(key: string, defaultValue?: Attribute.DataTypeMap['int']) {\n    return this.get(key, 'int', defaultValue);\n  }\n\n  getString(key: string, defaultValue?: Attribute.DataTypeMap['string']) {\n    return this.get(key, 'string', defaultValue);\n  }\n\n  getTensor(key: string, defaultValue?: Attribute.DataTypeMap['tensor']) {\n    return this.get(key, 'tensor', defaultValue);\n  }\n\n  getFloats(key: string, defaultValue?: Attribute.DataTypeMap['floats']) {\n    return this.get(key, 'floats', defaultValue);\n  }\n\n  getInts(key: string, defaultValue?: Attribute.DataTypeMap['ints']) {\n    return this.get(key, 'ints', defaultValue);\n  }\n\n  getStrings(key: string, defaultValue?: Attribute.DataTypeMap['strings']) {\n    return this.get(key, 'strings', defaultValue);\n  }\n\n  getTensors(key: string, defaultValue?: Attribute.DataTypeMap['tensors']) {\n    return this.get(key, 'tensors', defaultValue);\n  }\n\n  private get<V extends Attribute.DataTypeMap[Attribute.DataType]>(\n      key: string, type: Attribute.DataType, defaultValue?: V): V {\n    const valueAndType = this._attributes.get(key);\n    if (valueAndType === undefined) {\n      if (defaultValue !== undefined) {\n        return defaultValue;\n      }\n      throw new Error(`required attribute not found: ${key}`);\n    }\n    if (valueAndType[1] !== type) {\n      throw new Error(`type mismatch: expected ${type} but got ${valueAndType[1]}`);\n    }\n    return valueAndType[0] as V;\n  }\n\n  private static getType(attr: onnx.IAttributeProto|ortFbs.Attribute): Attribute.DataType {\n    const type = attr instanceof onnx.AttributeProto ? (attr).type : (attr as ortFbs.Attribute).type();\n    switch (type) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return 'float';\n      case onnx.AttributeProto.AttributeType.INT:\n        return 'int';\n      case onnx.AttributeProto.AttributeType.STRING:\n        return 'string';\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return 'tensor';\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return 'floats';\n      case onnx.AttributeProto.AttributeType.INTS:\n        return 'ints';\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return 'strings';\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return 'tensors';\n      default:\n        throw new Error(`attribute type is not supported yet: ${onnx.AttributeProto.AttributeType[type]}`);\n    }\n  }\n\n  private static getValue(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    const attrType = attr instanceof onnx.AttributeProto ? attr.type : (attr as ortFbs.Attribute).type();\n    if (attrType === onnx.AttributeProto.AttributeType.GRAPH || attrType === onnx.AttributeProto.AttributeType.GRAPHS) {\n      throw new Error('graph attribute is not supported yet');\n    }\n\n    const value = this.getValueNoCheck(attr);\n\n    // cast LONG to number\n    if (attrType === onnx.AttributeProto.AttributeType.INT && LongUtil.isLong(value)) {\n      return LongUtil.longToNumber(value as Long | flatbuffers.Long);\n    }\n\n    // cast LONG[] to number[]\n    if (attrType === onnx.AttributeProto.AttributeType.INTS) {\n      const arr = (value as Array<number|Long|flatbuffers.Long>);\n      const numberValue: number[] = new Array<number>(arr.length);\n\n      for (let i = 0; i < arr.length; i++) {\n        const maybeLong = arr[i];\n        numberValue[i] = LongUtil.longToNumber(maybeLong);\n      }\n\n      return numberValue;\n    }\n\n    // cast onnx.TensorProto to onnxjs.Tensor\n    if (attrType === onnx.AttributeProto.AttributeType.TENSOR) {\n      return attr instanceof onnx.AttributeProto ? Tensor.fromProto(value as onnx.ITensorProto) :\n                                                   Tensor.fromOrtTensor(value as ortFbs.Tensor);\n    }\n\n    // cast onnx.TensorProto[] to onnxjs.Tensor[]\n    if (attrType === onnx.AttributeProto.AttributeType.TENSORS) {\n      if (attr instanceof onnx.AttributeProto) {\n        const tensorProtos = value as onnx.ITensorProto[];\n        return tensorProtos.map(value => Tensor.fromProto(value));\n      } else if (attr instanceof ortFbs.Attribute) {\n        const tensorProtos = value as ortFbs.Tensor[];\n        return tensorProtos.map(value => Tensor.fromOrtTensor(value));\n      }\n    }\n\n    // cast Uint8Array to string\n    if (attrType === onnx.AttributeProto.AttributeType.STRING) {\n      // string in onnx attribute is of uint8array type, so we need to convert it to string below. While in ort format,\n      // string attributes are returned as string, so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8String = value as Uint8Array;\n        return decodeUtf8String(utf8String);\n      }\n    }\n\n    // cast Uint8Array[] to string[]\n    if (attrType === onnx.AttributeProto.AttributeType.STRINGS) {\n      // strings in onnx attribute is returned as uint8array[], so we need to convert it to string[] below. While in ort\n      // format strings attributes are returned as string[], so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8Strings = value as Uint8Array[];\n        return utf8Strings.map(decodeUtf8String);\n      }\n    }\n\n    return value as ValueTypes;\n  }\n\n  private static getValueNoCheck(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    return attr instanceof (onnx.AttributeProto) ? this.getValueNoCheckFromOnnxFormat(attr) :\n                                                   this.getValueNoCheckFromOrtFormat(attr as ortFbs.Attribute);\n  }\n\n  private static getValueNoCheckFromOnnxFormat(attr: onnx.IAttributeProto) {\n    switch (attr.type!) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return attr.f;\n      case onnx.AttributeProto.AttributeType.INT:\n        return attr.i;\n      case onnx.AttributeProto.AttributeType.STRING:\n        return attr.s;\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return attr.t;\n      case onnx.AttributeProto.AttributeType.GRAPH:\n        return attr.g;\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return attr.floats;\n      case onnx.AttributeProto.AttributeType.INTS:\n        return attr.ints;\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return attr.strings;\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return attr.tensors;\n      case onnx.AttributeProto.AttributeType.GRAPHS:\n        return attr.graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${onnx.AttributeProto.AttributeType[attr.type!]}`);\n    }\n  }\n\n  private static getValueNoCheckFromOrtFormat(attr: ortFbs.Attribute) {\n    switch (attr.type()) {\n      case ortFbs.AttributeType.FLOAT:\n        return attr.f();\n      case ortFbs.AttributeType.INT:\n        return attr.i();\n      case ortFbs.AttributeType.STRING:\n        return attr.s();\n      case ortFbs.AttributeType.TENSOR:\n        return attr.t();\n      case ortFbs.AttributeType.GRAPH:\n        return attr.g();\n      case ortFbs.AttributeType.FLOATS:\n        return attr.floatsArray();\n      case ortFbs.AttributeType.INTS: {\n        const ints = [];\n        for (let i = 0; i < attr.intsLength(); i++) {\n          ints.push(attr.ints(i)!);\n        }\n        return ints;\n      }\n      case ortFbs.AttributeType.STRINGS: {\n        const strings = [];\n        for (let i = 0; i < attr.stringsLength(); i++) {\n          strings.push(attr.strings(i));\n        }\n        return strings;\n      }\n      case ortFbs.AttributeType.TENSORS: {\n        const tensors = [];\n        for (let i = 0; i < attr.tensorsLength(); i++) {\n          tensors.push(attr.tensors(i)!);\n        }\n        return tensors;\n      }\n      // case ortFbs.AttributeType.GRAPHS:\n      // TODO: Subgraph not supported yet.\n      // const graphs = [];\n      // for (let i = 0; i < attr.graphsLength(); i++) {\n      //   graphs.push(attr.graphs(i)!);\n      // }\n      // return graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${ortFbs.AttributeType[attr.type()]}`);\n    }\n  }\n\n  protected _attributes: Map<string, Value>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {WebGLBackend} from './backends/backend-webgl';\nimport {Graph} from './graph';\nimport {Operator} from './operators';\nimport {OpSet} from './opset';\nimport {Session} from './session';\n\nexport interface InferenceHandler {\n  /**\n   * dispose the inference handler. it will be called as the last step in Session.run()\n   */\n  dispose(): void;\n}\n\nexport interface SessionHandler {\n  /**\n   * transform the graph at initialization time\n   * @param graphTransformer the graph transformer to manipulate the model graph\n   */\n  transformGraph?(graphTransformer: Graph.Transformer): void;\n\n  /**\n   * create an instance of InferenceHandler to use in a Session.run() call\n   */\n  createInferenceHandler(): InferenceHandler;\n\n  /**\n   * dispose the session handler. it will be called when a session is being disposed explicitly\n   */\n  dispose(): void;\n\n  /**\n   * Resolves the operator from the name and opset version; backend specific\n   * @param node the node to resolve\n   * @param opsets a list of opsets that exported from the model\n   * @param graph the completely initialized graph\n   */\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator;\n\n  /**\n   * This method let's the sessionHandler know that the graph initialization is complete\n   * @param graph the completely initialized graph\n   */\n  onGraphInitialized?(graph: Graph): void;\n\n  /**\n   * a reference to the corresponding backend\n   */\n  readonly backend: Backend;\n\n  /**\n   * a reference to the session context\n   */\n  readonly context: Session.Context;\n}\n\nexport interface Backend {\n  /**\n   * initialize the backend. will be called only once, when the first time the\n   * backend it to be used\n   */\n  initialize(): boolean|Promise<boolean>;\n\n  /**\n   * create an instance of SessionHandler to use in a Session object's lifecycle\n   */\n  createSessionHandler(context: Session.Context): SessionHandler;\n\n  /**\n   * dispose the backend. currently this will not be called\n   */\n  dispose(): void;\n}\n\n// caches all initialized backend instances\nconst backendsCache: Map<string, Backend> = new Map();\n\nexport const backend: {[name: string]: Backend} = {\n  webgl: new WebGLBackend()\n};\n\n/**\n * Resolve a reference to the backend. If a hint is specified, the corresponding\n * backend will be used.\n */\nexport async function resolveBackend(hint?: string|readonly string[]): Promise<Backend> {\n  if (!hint) {\n    return resolveBackend(['webgl']);\n  } else {\n    const hints = typeof hint === 'string' ? [hint] : hint;\n\n    for (const backendHint of hints) {\n      const cache = backendsCache.get(backendHint);\n      if (cache) {\n        return cache;\n      }\n\n      const backend = await tryLoadBackend(backendHint);\n      if (backend) {\n        return backend;\n      }\n    }\n  }\n\n  throw new Error('no available backend to use');\n}\n\nasync function tryLoadBackend(backendHint: string): Promise<Backend|undefined> {\n  const backendObj = backend;\n\n  if (typeof backendObj[backendHint] !== 'undefined' && isBackend(backendObj[backendHint])) {\n    const backend = backendObj[backendHint];\n    let init = backend.initialize();\n    if (typeof init === 'object' && 'then' in init) {\n      init = await init;\n    }\n    if (init) {\n      backendsCache.set(backendHint, backend);\n      return backend;\n    }\n  }\n\n  return undefined;\n}\n\nfunction isBackend(obj: unknown) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const o = obj as any;\n\n  // check if an object is a Backend instance\n  if (\n      'initialize' in o && typeof o.initialize === 'function' &&                      // initialize()\n      'createSessionHandler' in o && typeof o.createSessionHandler === 'function' &&  // createSessionHandler()\n      'dispose' in o && typeof o.dispose === 'function'                               // dispose()\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nexport type BackendType = Backend;\nexport type SessionHandlerType = ReturnType<BackendType['createSessionHandler']>;\nexport type InferenceHandlerType = ReturnType<SessionHandlerType['createInferenceHandler']>;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {Backend, SessionHandler} from '../backend';\nimport {Logger} from '../instrument';\nimport {Session} from '../session';\n\nimport {WebGLSessionHandler} from './webgl/session-handler';\nimport {WebGLContext} from './webgl/webgl-context';\nimport {createWebGLContext} from './webgl/webgl-context-factory';\n\n/**\n * WebGLBackend is the entry point for all WebGL opeartions\n * When it starts it created the WebGLRenderingContext\n * and other main framework components such as Program and Texture Managers\n */\nexport class WebGLBackend implements Backend {\n  glContext: WebGLContext;\n\n  get contextId(): 'webgl'|'webgl2'|undefined {\n    return env.webgl.contextId;\n  }\n  set contextId(value: 'webgl'|'webgl2'|undefined) {\n    env.webgl.contextId = value;\n  }\n\n  get matmulMaxBatchSize(): number|undefined {\n    return env.webgl.matmulMaxBatchSize;\n  }\n  set matmulMaxBatchSize(value: number|undefined) {\n    env.webgl.matmulMaxBatchSize = value;\n  }\n\n  get textureCacheMode(): 'initializerOnly'|'full'|undefined {\n    return env.webgl.textureCacheMode;\n  }\n  set textureCacheMode(value: 'initializerOnly'|'full'|undefined) {\n    env.webgl.textureCacheMode = value;\n  }\n\n  get pack(): boolean|undefined {\n    return env.webgl.pack;\n  }\n  set pack(value: boolean|undefined) {\n    env.webgl.pack = value;\n  }\n\n  get async(): boolean|undefined {\n    return env.webgl.async;\n  }\n  set async(value: boolean|undefined) {\n    env.webgl.async = value;\n  }\n\n  initialize(): boolean {\n    try {\n      this.glContext = createWebGLContext(this.contextId);\n      if (typeof this.matmulMaxBatchSize !== 'number') {\n        this.matmulMaxBatchSize = 16;\n      }\n      if (typeof this.textureCacheMode !== 'string') {\n        this.textureCacheMode = 'full';\n      }\n      if (typeof this.pack !== 'boolean') {\n        this.pack = false;\n      }\n      if (typeof this.async !== 'boolean') {\n        this.async = false;\n      }\n\n      Logger.setWithEnv(env);\n\n      Logger.verbose(\n          'WebGLBackend',\n          `Created WebGLContext: ${typeof this.glContext} with matmulMaxBatchSize: ${\n              this.matmulMaxBatchSize}; textureCacheMode: ${this.textureCacheMode}; pack: ${this.pack}; async: ${\n              this.async}.`);\n      return true;\n    } catch (e) {\n      Logger.warning('WebGLBackend', `Unable to initialize WebGLBackend. ${e}`);\n      return false;\n    }\n  }\n  createSessionHandler(context: Session.Context): SessionHandler {\n    return new WebGLSessionHandler(this, context);\n  }\n  dispose(): void {\n    this.glContext.dispose();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ArrayUtil, BroadcastUtil, ShapeUtil} from '../../util';\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\nimport {squeezeShape} from './texture-layout-strategy';\nimport {TextureLayout} from './types';\nimport {generateShaderFuncNameFromInputSamplerName, generateShaderFuncNameFromInputSamplerNameAtOutCoords, getCoordsDataType, getGlChannels, getSqueezedParams, squeezeInputShape} from './utils';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class CoordsGlslLib extends GlslLib {\n  returnType: string;\n\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.offsetToCoords(),\n      ...this.coordsToOffset(),\n      ...this.toVec(),\n      ...this.valueFrom(),\n      // TODO return these only when packing is enabled.\n      ...this.getCommonUtilFuncs(),\n      ...this.getInputsSamplingSnippets(),\n      ...this.getOutputSamplingSnippet()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected offsetToCoords(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'offsetToCoords';\n    return {\n      offsetToCoords: new GlslLibRoutine(`\n      vec2 ${funcName}(int offset, int width, int height) {\n        int t = offset / width;\n        int s = offset - t*width;\n        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);\n        return coords;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected coordsToOffset(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'coordsToOffset';\n    return {\n      coordsToOffset: new GlslLibRoutine(`\n      int ${funcName}(vec2 coords, int width, int height) {\n        float s = coords.s * float(width);\n        float t = coords.t * float(height);\n        int offset = int(t) * width + int(s);\n        return offset;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Generates code for output sampler.\n   */\n\n  protected getOutputSamplingSnippet(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    if (outputLayout.isPacked) {\n      return this.getPackedOutputSamplingSnippet(outputLayout);\n    } else {\n      return this.getUnpackedOutputSamplingSnippet(outputLayout);\n    }\n  }\n\n  /**\n   * Generates code for packed output sampler.\n   */\n  protected getPackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputPacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] = this.getOutputPacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputPacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        result[funcName] = this.getOutputPackedNDCoords(outShape, outTexShape as [number, number]);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRGBASource = `\n      void setOutput(vec4 val) {\n        ${glsl.output} = val;\n      }\n    `;\n    const floatTextureSetRGBAFuncName = 'floatTextureSetRGBA';\n    result[floatTextureSetRGBAFuncName] = new GlslLibRoutine(floatTextureSetRGBASource);\n    return result;\n  }\n\n  /**\n   * Generates code for unpacked output sampler.\n   */\n  protected getUnpackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputUnpacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] =\n            this.getOutputUnpacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputUnpacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      case 4:\n        result[funcName] = this.getOutputUnpacked4DCoords(\n            outShape as [number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 5:\n        result[funcName] = this.getOutputUnpacked5DCoords(\n            outShape as [number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 6:\n        result[funcName] = this.getOutputUnpacked6DCoords(\n            outShape as [number, number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        throw new Error(`Unsupported output dimensionality: ${outShape.length}`);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRSource = `\n        void setOutput(float val) {\n          ${glsl.output} = vec4(val, 0, 0, 0);\n        }\n    `;\n    const floatTextureSetRFuncName = 'floatTextureSetR';\n    result[floatTextureSetRFuncName] = new GlslLibRoutine(floatTextureSetRSource);\n    return result;\n  }\n\n  /**\n   * Scalar output coordinates.\n   */\n  protected getOutputScalarCoords(): GlslLibRoutine {\n    return new GlslLibRoutine(`\n      int getOutputCoords() {\n        return 0;\n      }\n    `);\n  }\n\n  /**\n   * 1D packed output coordinates.\n   */\n  protected getOutputPacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = texShape;\n    let source = '';\n    if (packedTexShape[0] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.y * ${packedTexShape[1]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    if (packedTexShape[1] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.x * ${packedTexShape[0]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                 vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          return 2 * (resTexRC.y * ${packedTexShape[0]} + resTexRC.x);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 2D packed output coordinates.\n   */\n  protected getOutputPacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    if (ArrayUtil.arraysEqual(shape, texShape)) {\n      source = `\n        ivec2 getOutputCoords() {\n          return 2 * ivec2(TexCoords.xy * vec2(${texShape[0]}, ${texShape[1]}));\n        }\n      `;\n      return new GlslLibRoutine(source);\n    }\n\n    const packedTexShape = texShape;\n    // texels needed to accommodate a logical row\n    const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n    /**\n     * getOutputCoords\n     *\n     * resTexRC: The rows and columns of the texels. If you move over one\n     * texel to the right in the packed texture, you are moving over one column\n     * (not two).\n     *\n     * index: The texel index\n     */\n    source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 3D packed output coordinates.\n   */\n  protected getOutputPacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n    const source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          int b = index / ${texelsInBatch};\n          index -= b * ${texelsInBatch};\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec3(b, r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * ND packed output coordinates.\n   */\n  protected getOutputPackedNDCoords(shape: readonly number[], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n\n    const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n    let texelsInBatchN = texelsInBatch;\n    let batches = '';\n    let coords = 'b, r, c';\n\n    for (let b = 2; b < shape.length - 1; b++) {\n      texelsInBatchN *= shape[shape.length - b - 1];\n      batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n      coords = `b${b}, ` + coords;\n    }\n    const source = `\n      ivec${shape.length} getOutputCoords() {\n        ivec2 resTexRC = ivec2(TexCoords.xy *\n                              vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n        int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n        ${batches}\n\n        int b = index / ${texelsInBatch};\n        index -= b * ${texelsInBatch};\n\n        // reverse r and c order for packed texture\n        int r = imod(index, ${texelsInLogicalRow}) * 2;\n        int c = 2 * (index / ${texelsInLogicalRow});\n\n        return ivec${shape.length}(${coords});\n      }\n    `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 1D output coordinates.\n   */\n  protected getOutputUnpacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          return resTexRC.y * ${texShape[0]} + resTexRC.x;\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 2D output coordinates.\n   */\n  protected getOutputUnpacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          int r = index / ${shape[1]};\n          int c = index - r * ${shape[1]};\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 3D output coordinates.\n   */\n  protected getOutputUnpacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec3(r, c, d);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 4D output coordinates.\n   */\n  protected getOutputUnpacked4DCoords(shape: [number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec4 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec4(r, c, d, d2);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 5D output coordinates.\n   */\n  protected getOutputUnpacked5DCoords(shape: [number, number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec5 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec5(r, c, d, d2, d3);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 6D output coordinates.\n   */\n  protected getOutputUnpacked6DCoords(shape: [number, number, number, number, number, number], texShape: [\n    number, number\n  ]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3', 'd4'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n     ivec6 getOutputCoords() {\n         ivec2 resTexRC = ivec2(TexCoords.xy *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n         int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n         ${coordsFromIndexSnippet}\n         return ivec6(r, c, d, d2, d3, d4);\n       }\n     `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Generates code for common UV coords computation utility functions.\n   */\n  protected getCommonUtilFuncs(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    let funcName = 'uvFromFlat';\n    result[funcName] = new GlslLibRoutine(`\n    vec2 uvFromFlat(int texNumR, int texNumC, int index) {\n      int texC = index / texNumR;\n      int texR = index - texC * texNumR;\n      // TODO: swap texR, texC order in following function so row is corresponding to u and column is corresponding to\n      //       v.\n      return (vec2(texR, texC) + halfCR) / vec2(texNumR, texNumC);\n    }\n    `);\n    funcName = 'packedUVfrom1D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n        int texelIndex = index / 2;\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom2D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom2D(int texNumR, int texNumC, int texelsInLogicalRow, int row, int col) {\n        int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom3D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom3D(int texNumR, int texNumC,\n          int texelsInBatch, int texelsInLogicalRow, int b,\n          int row, int col) {\n        int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = index / texNumC;\n        int texC = index - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'sampleTexture';\n    const glsl = getGlsl(this.context.glContext.version);\n    result[funcName] = new GlslLibRoutine(`\n        float sampleTexture(sampler2D textureSampler, vec2 uv) {\n            return ${glsl.texture2D}(textureSampler, uv).r;\n        }`);\n    return result;\n  }\n\n  /**\n   * Constructing snippets for inputs\n   */\n  protected getInputsSamplingSnippets(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const outputLayout = this.context.outputTextureLayout;\n    this.context.programInfo.inputNames.forEach((samplerName, i) => {\n      const inputLayout = this.context.inputTextureLayouts[i];\n      const funcName = generateShaderFuncNameFromInputSamplerName(samplerName);\n      if (inputLayout.isPacked) {\n        result[funcName] = this.getPackedSamplerFromInput(funcName, samplerName, inputLayout);\n      } else {\n        result[funcName] = this.getUnpackedSamplerFromInput(funcName, samplerName, inputLayout);\n      }\n\n      const outCoordFuncName = generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName);\n      if (inputLayout.unpackedShape.length <= outputLayout.unpackedShape.length) {\n        if (inputLayout.isPacked) {\n          result[outCoordFuncName] =\n              this.getPackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        } else {\n          result[outCoordFuncName] =\n              this.getUnpackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        }\n      }\n    });\n\n    return result;\n  }\n\n  /**\n   * Constructing snippets for output coordinates of samplers\n   */\n  protected getPackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texName = name;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(texName);\n\n    const inRank = inShape.length;\n    const outRank = outShape.length;\n\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n\n    const type = getCoordsDataType(outRank);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n\n    let output = 'return outputValue;';\n    const inSize = ShapeUtil.size(inShape);\n    const isInputScalar = inSize === 1;\n    const outSize = ShapeUtil.size(outShape);\n    const isOutputScalar = outSize === 1;\n\n    if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n      output = `\n        return vec4(outputValue.xy, outputValue.xy);\n      `;\n    } else if (isInputScalar && !isOutputScalar) {\n      if (outRank === 1) {\n        output = `\n          return vec4(outputValue.x, outputValue.x, 0., 0.);\n        `;\n      } else {\n        output = `\n          return vec4(outputValue.x);\n        `;\n      }\n    } else if (broadcastDims.length) {\n      const rows = inRank - 2;\n      const cols = inRank - 1;\n\n      if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.x);';\n      } else if (broadcastDims.indexOf(rows) > -1) {\n        output = 'return vec4(outputValue.x, outputValue.y, ' +\n            'outputValue.x, outputValue.y);';\n      } else if (broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.xx, outputValue.zz);';\n      }\n    }\n\n    const swapLastDimsSnippet = `\n        int lastDim = coords.${fields[outRank - 1]};\n        coords.${fields[outRank - 1]} = coords.${fields[outRank - 2]};\n        coords.${fields[outRank - 2]} = lastDim;\n      `;\n    const source = `\n      vec4 ${funcName}() {\n        ${type} coords = getOutputCoords();\n        ${swapLastDimsSnippet}\n        ${coordsSnippet}\n        vec4 outputValue = ${texFuncSnippet}(${unpackedCoordsSnippet});\n        ${output}\n      }\n    `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for unpacked output coordinates of samplers\n   */\n  protected getUnpackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const inTexShape = [inputLayout.width, inputLayout.height];\n    const inRank = inputLayout.unpackedShape.length;\n    const outRank = outputLayout.unpackedShape.length;\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(name);\n\n    if (inRank === outRank && ArrayUtil.arraysEqual(inTexShape, outTexShape)) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, TexCoords);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const type = getCoordsDataType(outRank);\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inputLayout.unpackedShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n    const source = `\n        float ${funcName}() {\n          ${type} coords = getOutputCoords();\n          ${coordsSnippet}\n          return ${texFuncSnippet}(${unpackedCoordsSnippet});\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for packed operations.\n   */\n  protected getPackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    switch (inputLayout.unpackedShape.length) {\n      case 0:\n        return this.getPackedSamplerScalar(funcName, name);\n      case 1:\n        return this.getPackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getPackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getPackedSampler3D(funcName, name, inputLayout);\n      default:\n        return this.getPackedSamplerND(funcName, name, inputLayout);\n    }\n  }\n\n  /**\n   * Constructing snippets for unpacked operations.\n   */\n  protected getUnpackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    switch (shape.length) {\n      case 0:\n        return this.getUnpackedSamplerScalar(funcName, name, inputLayout);\n      case 1:\n        return this.getUnpackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getUnpackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getUnpackedSampler3D(funcName, name, inputLayout);\n      case 4:\n        return this.getUnpackedSampler4D(funcName, name, inputLayout);\n      case 5:\n        return this.getUnpackedSampler5D(funcName, name, inputLayout);\n      case 6:\n        return this.getUnpackedSampler6D(funcName, name, inputLayout);\n      default:\n        // TODO support more dimensionalities\n        throw new Error(`Unsupported dimension ${shape.length}-D`);\n    }\n  }\n\n  /**\n   * Packed scalar snippet.\n   */\n  protected getPackedSamplerScalar(funcName: string, name: string): GlslLibRoutine {\n    const glsl = getGlsl(this.context.glContext.version);\n    const source = `\n          vec4 ${funcName}() {\n            return ${glsl.texture2D}(${name}, halfCR);\n          }\n        `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Packed 1D snippet.\n   */\n  protected getPackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[1], texShape[0]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedSampler = `vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n      ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom1D']);\n  }\n\n  /**\n   * Packed 2D snippet.\n   */\n  protected getPackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const packedSampler = `vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n        return ${glsl.texture2D}(${name}, uv);\n      }`;\n\n      return new GlslLibRoutine(packedSampler);\n    }\n    const packedTexShape = texShape;\n    const valuesPerRow = Math.ceil(shape[1] / 2);\n    const packedSampler = `vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${packedTexShape[1]}, ${packedTexShape[0]}, ${valuesPerRow}, row, col);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom2D']);\n  }\n\n  /**\n   * Packed 3D snippet.\n   */\n  protected getPackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[0], texShape[1]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    if (shape[0] === 1) {\n      const squeezedShape = shape.slice(1);\n      const keptDims = [1, 2];\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['b', 'row', 'col'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const samplerRoutine = this.getPackedSamplerFromInput(funcName, name, newInputLayout);\n      const packedSampler = `${samplerRoutine.routineBody}\n      vec4 ${funcName}(int b, int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      } `;\n      const source = packedSampler;\n      return new GlslLibRoutine(source, samplerRoutine.dependencies);\n    }\n    const texNumR = packedTexShape[0];\n    const texNumC = packedTexShape[1];\n\n    const valuesPerRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n\n    const packedSampler = `vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumC}, ${texNumR}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${name}, uv);}`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom3D']);\n  }\n  /*\n   * Packed ND snippet.\n   */\n  protected getPackedSamplerND(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const rank = shape.length;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texNumR = packedTexShape[1];\n    const texNumC = packedTexShape[0];\n    const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n    let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n    let params = 'int b, int row, int col';\n    let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n    for (let b = 2; b < rank - 1; b++) {\n      params = `int b${b}, ` + params;\n      texelsInBatch *= shape[rank - b - 1];\n      index = `b${b} * ${texelsInBatch} + ` + index;\n    }\n    const packedSampler = `vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked scalar snippet.\n   */\n  protected getUnpackedSamplerScalar(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const [texNumR, texNumC] = [inputLayout.width, inputLayout.height];\n    if (texNumR === 1 && texNumC === 1) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, halfCR);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const source = `\n        float ${funcName}() {\n          int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, offset_${name});\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 1D snippet.\n   */\n  protected getUnpackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const tNumR = inputLayout.width;\n    const tNumC = inputLayout.height;\n\n    if (tNumC === 1 && tNumR === 1) {\n      const source = `\n        float ${funcName}(int index) {\n          return sampleTexture(${name}, halfCR);\n        }\n      `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    if (tNumC === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2((float(index) + 0.5) / ${tNumR}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    if (tNumR === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2(0.5, (float(index) + 0.5) / ${tNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    const source = `\n        float ${funcName}(int index) {\n          vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 2D snippet.\n   */\n\n  protected getUnpackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n\n    // TODO: modify row/col order for other dimensions.\n    const texShape = [inputLayout.height, inputLayout.width];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const texNumR = texShape[1];\n      const texNumC = texShape[0];\n      const source = `\n          float ${funcName}(int row, int col) {\n            vec2 uv = (vec2(row, col) + halfCR) / vec2(${texNumR}.0, ${texNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const params = ['col', 'row'];\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const texNumR = texShape[1];\n    const texNumC = texShape[0];\n    if (texNumC === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    if (texNumR === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    const source = `\n        float ${funcName}(int row, int col) {\n          int index = col * ${shape[1]} + row;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 3D snippet.\n   */\n\n  protected getUnpackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride0 = shape[1] * shape[2];\n    const stride1 = shape[2];\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['batch', 'col', 'row'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const routine = this.getUnpackedSamplerFromInput(funcName, name, newInputLayout);\n      // TODO: revisit the logic here to make it simpler\n      const revDims = keptDims.reverse();\n      const source = `\n          ${routine.routineBody}\n          float ${funcName}(int batch, int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, revDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, routine.dependencies);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int depth, int row, int col) {\n            // Explicitly use integer operations as dot() only works on floats.\n            int index = depth * ${stride0} + col * ${stride1} + row;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 4D snippet.\n   */\n\n  protected getUnpackedSampler4D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride2 = shape[3];\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    //\n    // TODO: re-enable this shortcut once the index calculation bug is fixed.\n    //\n    // const {newShape, keptDims} = squeezeShape(shape as number[]);\n    // if (newShape.length < shape.length) {\n    //   const newInputShape = squeezeInputShape(shape, newShape);\n    //   const params = ['row', 'col', 'depth', 'depth2'];\n    //   // Deep copy of input texture layout.\n    //   const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n    //   newInputLayout.unpackedShape = newInputShape;\n    //   const source = `\n    //       ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n    //       float ${funcName}(int row, int col, int depth, int depth2) {\n    //         return ${funcName}(${getSqueezedParams(params, keptDims)});\n    //       }\n    //     `;\n    //   return new GlslLibRoutine(\n    //       source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    // }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2) {\n          int index = row * ${stride0} + col * ${stride1} +\n              depth2 * ${stride2} + depth;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 5D snippet.\n   */\n  protected getUnpackedSampler5D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride3 = shape[4];\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n          int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth3 * ${stride3} + depth2;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n  }\n\n  /**\n   * Unpacked 6D snippet.\n   */\n  protected getUnpackedSampler6D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride4 = shape[5];\n    const stride3 = shape[4] * stride4;\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n            ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n            float ${funcName}(int row, int col, int depth,\n              int depth2, int depth3, int depth4) {\n              return ${funcName}(${getSqueezedParams(params, keptDims)});\n            }\n          `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int row, int col, int depth,\n            int depth2, int depth3, int depth4) {\n            int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n            depth2 * ${stride3} + depth3 * ${stride4} + depth4;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * This is the main function to map from the given texture coordiantes (s,t)\n   * to logical indices for the output\n   * There will only be one single variation of this\n   * Also see coordsToOffset and offsetToIndices for input-specific versions\n   */\n  protected toVec(): {[name: string]: GlslLibRoutine} {\n    const output = this.context.outputTextureLayout;\n    const rank = output.shape.length;\n    const strides = output.strides;\n    const xScale = output.width;\n    const yScale = output.height;\n\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n        c[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= c[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n        c[${rank - 1}] = offset;`);\n    const body = `\n      void toVec(vec2 texCoords, out int c[${rank}]) {\n        int offset = coordsToOffset(texCoords, ${xScale}, ${yScale});\n        ${stridesBlock.join('')}\n      }\n      void toVec(int offset, out int c[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n    `;\n    return {toVec: new GlslLibRoutine(body, ['coordinates.coordsToOffset'])};\n  }\n  /**\n   * These are value getter functions generated for each input\n   * Each function is hardwired to the name and dimensions of the input\n   * An '_T' variation is also produced which accesses values as if the\n   * input was transposed\n   */\n  protected valueFrom(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const layout = this.context.inputTextureLayouts[i];\n      const shape = layout.unpackedShape.length > 0 ? layout.unpackedShape : layout.shape;\n      const rank = shape.length;\n      let funcName = `_${name}`;\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, false),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n      funcName = funcName + '_T';\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, true),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n    });\n    return result;\n  }\n  /**\n   * Produces one value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getValueFromSingle(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        float ${name}(int m[${rank}]) {\n          int offset = indicesToOffset${name}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          float value = getColorAsFloat(${glsl.texture2D}(${varName}, coords));\n          return value;\n        }\n        `;\n  }\n\n  /**\n   * Produces a packed value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getPackedValueFrom(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}_Pack`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        vec4 ${name}(int m[${rank}]) {\n          int offset = indicesToOffset_${varName}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          return ${glsl.texture2D}(${varName}, coords);\n        }\n        `;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ProgramInfo, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport enum FunctionType {\n  ValueBased,\n  Positional\n}\nexport interface GlslFunction<T extends FunctionType> {\n  body: string;\n  name: string;\n  type: T;\n}\nexport type GlslValueFunction = GlslFunction<FunctionType.ValueBased>;\nexport interface GlslPositionalFunction extends GlslFunction<FunctionType.Positional> {\n  inputShape: readonly number[];\n  outputShape: readonly number[];\n}\n\nexport class GlslContext {\n  constructor(\n      public glContext: WebGLContext, public programInfo: ProgramInfo, public inputTextureLayouts: TextureLayout[],\n      public outputTextureLayout: TextureLayout) {}\n}\nexport abstract class GlslLib {\n  constructor(public context: GlslContext) {}\n  abstract getFunctions(): {[name: string]: GlslLibRoutine};\n  abstract getCustomTypes(): {[name: string]: string};\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies\nexport class GlslLibRoutine {\n  constructor(public routineBody: string, public dependencies?: string[]) {}\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies AS GRAPH Nodes\n// this level of abstraction is used to topologically sort routines before fragment shade inclusion\nexport class GlslLibRoutineNode {\n  dependencies: GlslLibRoutineNode[];\n  routineBody: string;\n  constructor(public name: string, routineBody?: string, dependencies?: GlslLibRoutineNode[]) {\n    if (dependencies) {\n      this.dependencies = dependencies;\n    } else {\n      this.dependencies = [];\n    }\n\n    if (routineBody) {\n      this.routineBody = routineBody;\n    }\n  }\n  addDependency(node: GlslLibRoutineNode) {\n    if (node) {\n      this.dependencies.push(node);\n    }\n  }\n}\n\n// topologically sort GLSL library routines (graph nodes abstraction) before shader script inclusion\nexport class TopologicalSortGlslRoutines {\n  static returnOrderedNodes(nodes: GlslLibRoutineNode[]): GlslLibRoutineNode[] {\n    if (!nodes || nodes.length === 0) {\n      return [];\n    }\n\n    if (nodes.length === 1) {\n      return nodes;\n    }\n\n    const cycleCheck = new Set<string>();\n    const alreadyTraversed = new Set<string>();\n    const result = new Array<GlslLibRoutineNode>();\n\n    this.createOrderedNodes(nodes, cycleCheck, alreadyTraversed, result);\n    return result;\n  }\n\n  private static createOrderedNodes(\n      graphNodes: GlslLibRoutineNode[], cycleCheck: Set<string>, alreadyTraversed: Set<string>,\n      result: GlslLibRoutineNode[]) {\n    for (let i = 0; i < graphNodes.length; ++i) {\n      this.dfsTraverse(graphNodes[i], cycleCheck, alreadyTraversed, result);\n    }\n  }\n\n  private static dfsTraverse(\n      root: GlslLibRoutineNode, cycleCheck: Set<string>, alreadyTraversed: Set<string>, result: GlslLibRoutineNode[]) {\n    // if this root has already been traversed return\n    if (!root || alreadyTraversed.has(root.name)) {\n      return;\n    }\n\n    // cyclic dependency has been detected\n    if (cycleCheck.has(root.name)) {\n      throw new Error('Cyclic dependency detected. Can\\'t topologically sort routines needed for shader.');\n    }\n\n    // hold this node to detect cycles if any\n    cycleCheck.add(root.name);\n\n    // traverse children in a dfs fashion\n    const dependencies = root.dependencies;\n    if (dependencies && dependencies.length > 0) {\n      for (let i = 0; i < dependencies.length; ++i) {\n        this.dfsTraverse(dependencies[i], cycleCheck, alreadyTraversed, result);\n      }\n    }\n\n    // add to result holder\n    result.push(root);\n\n    // mark this node as traversed so that we don't traverse from this again\n    alreadyTraversed.add(root.name);\n\n    // release the hold\n    cycleCheck.delete(root.name);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * This GLSL library handles routines converting\n * float32 to/from Unsigned byte or float 16\n */\nexport class EncodingGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.encodeFloat32(), ...this.decodeFloat32()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected encodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      encode: new GlslLibRoutine(`highp vec4 encode(highp float f) {\n        return vec4(f, 0.0, 0.0, 0.0);\n      }\n        `)\n    };\n  }\n  protected decodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      decode: new GlslLibRoutine(`highp float decode(highp vec4 rgba) {\n        return rgba.r;\n      }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode encode a 32bit float to a vec4 (of unsigned bytes)\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected encodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      encode: new GlslLibRoutine(`\n      highp vec4 encode(highp float f) {\n        highp float F = abs(f);\n        highp float Sign = step(0.0,-f);\n        highp float Exponent = floor(log2(F));\n        highp float Mantissa = (exp2(- Exponent) * F);\n        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));\n        highp vec4 rgba;\n        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));\n        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);\n        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));\n        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));\n        ${endianness}\n        rgba = rgba / 255.0; // values need to be normalized to [0,1]\n        return rgba;\n    }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode a vec4 of unsigned bytes to float32\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected decodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      decode: new GlslLibRoutine(`\n        highp float decode(highp vec4 rgba) {\n          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]\n          ${endianness}\n          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;\n          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;\n          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);\n          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));\n          return Result;\n      }\n        `)\n    };\n  }\n  /**\n   * Determines if the machine is little endian or not\n   * @credit: https://gist.github.com/TooTallNate/4750953\n   */\n  static isLittleEndian(): boolean {\n    const b = new ArrayBuffer(4);\n    const a = new Uint32Array(b);\n    const c = new Uint8Array(b);\n    a[0] = 0xdeadbeef;\n    if (c[0] === 0xef) {\n      return true;\n    }\n    if (c[0] === 0xde) {\n      return false;\n    }\n    throw new Error('unknown endianness');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\n\n/**\n * This GLSL library handles routines around reading a texlet and writing to it\n * Reading and writing could be more than just dealing with one channel\n * It may require encoding/decoding to/from 4 channels into one\n */\nexport class FragColorGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.setFragColor(), ...this.getColorAsFloat()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected setFragColor(): {[name: string]: GlslLibRoutine} {\n    const glsl = getGlsl(this.context.glContext.version);\n    return {\n      setFragColor: new GlslLibRoutine(\n          `\n        void setFragColor(float value) {\n            ${glsl.output} = encode(value);\n        }\n        `,\n          ['encoding.encode'])\n    };\n  }\n  protected getColorAsFloat(): {[name: string]: GlslLibRoutine} {\n    return {\n      getColorAsFloat: new GlslLibRoutine(\n          `\n        float getColorAsFloat(vec4 color) {\n            return decode(color);\n        }\n        `,\n          ['encoding.decode'])\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nconst INLINE_FUNC_DEF_REGEX = /@inline[\\s\\n\\r]+(\\w+)[\\s\\n\\r]+([0-9a-zA-Z_]+)\\s*\\(([^)]*)\\)\\s*{(([^}]|[\\n\\r])*)}/gm;\nconst FUNC_CALL_REGEX = '(\\\\w+)?\\\\s+([_0-9a-zA-Z]+)\\\\s+=\\\\s+__FUNC__\\\\((.*)\\\\)\\\\s*;';\n/**\n * GLSL preprocessor responsible for resolving @inline directives\n */\nexport function replaceInlines(script: string): string {\n  const inlineDefs: {[name: string]: {params: Array<{type: string; name: string}|null>; body: string}} = {};\n  let match;\n  while ((match = INLINE_FUNC_DEF_REGEX.exec(script)) !== null) {\n    const params = match[3]\n                       .split(',')\n                       .map(s => {\n                         const tokens = s.trim().split(' ');\n                         if (tokens && tokens.length === 2) {\n                           return {type: tokens[0], name: tokens[1]};\n                         }\n                         return null;\n                       })\n                       .filter(v => v !== null);\n    inlineDefs[match[2]] = {params, body: match[4]};\n  }\n  for (const name in inlineDefs) {\n    const regexString = FUNC_CALL_REGEX.replace('__FUNC__', name);\n    const regex = new RegExp(regexString, 'gm');\n    while ((match = regex.exec(script)) !== null) {\n      const type = match[1];\n      const variable = match[2];\n      const params = match[3].split(',');\n      const declLine = (type) ? `${type} ${variable};` : '';\n      let newBody: string = inlineDefs[name].body;\n      let paramRedecLine = '';\n      inlineDefs[name].params.forEach((v, i) => {\n        if (v) {\n          paramRedecLine += `${v.type} ${v.name} = ${params[i]};\\n`;\n        }\n      });\n      newBody = `${paramRedecLine}\\n ${newBody}`;\n      newBody = newBody.replace('return', `${variable} = `);\n      const replacement = `\n      ${declLine}\n      {\n        ${newBody}\n      }\n      `;\n      script = script.replace(match[0], replacement);\n    }\n  }\n  script = script.replace(INLINE_FUNC_DEF_REGEX, '');\n  return script;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutineNode, TopologicalSortGlslRoutines} from './glsl-definitions';\nimport {replaceInlines} from './glsl-function-inliner';\nimport {glslRegistry} from './glsl-registered-libs';\nimport {getDefaultFragShaderMain, getFragShaderPreamble} from './glsl-source';\nimport {ProgramInfo, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * Preprocessor for the additions to the GLSL language\n * It deals with:\n *  @include directives\n *  @inline\n *  Loop unrolling (not implemented)\n *  Macro resolution (not implemented)\n */\nexport class GlslPreprocessor {\n  readonly context: GlslContext;\n  readonly libs: {[name: string]: GlslLib} = {};\n  readonly glslLibRoutineDependencyGraph: {[routineName: string]: GlslLibRoutineNode} = {};\n\n  constructor(\n      glContext: WebGLContext, programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[],\n      outputTextureLayout: TextureLayout) {\n    this.context = new GlslContext(glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n\n    // construct GlslLibs\n    Object.keys(glslRegistry).forEach((name: string) => {\n      const lib = new glslRegistry[name](this.context);\n      this.libs[name] = lib;\n    });\n\n    // construct GlslRoutineDependencyGraph\n    const map = this.glslLibRoutineDependencyGraph;\n    for (const libName in this.libs) {\n      const lib = this.libs[libName];\n      const routinesInLib = lib.getFunctions();\n      for (const routine in routinesInLib) {\n        const key = libName + '.' + routine;\n        let currentNode: GlslLibRoutineNode;\n        if (map[key]) {\n          currentNode = map[key];\n          currentNode.routineBody = routinesInLib[routine].routineBody;\n        } else {\n          currentNode = new GlslLibRoutineNode(key, routinesInLib[routine].routineBody);\n          map[key] = currentNode;\n        }\n        const dependencies = routinesInLib[routine].dependencies;\n        if (dependencies) {\n          for (let i = 0; i < dependencies.length; ++i) {\n            if (!map[dependencies[i]]) {\n              const node = new GlslLibRoutineNode(dependencies[i]);\n              map[dependencies[i]] = node;\n              currentNode.addDependency(node);\n            } else {\n              currentNode.addDependency(map[dependencies[i]]);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  preprocess(): string {\n    const programInfo = this.context.programInfo;\n    let source = programInfo.shaderSource;\n\n    // append main() function\n    if (!this.context.programInfo.hasMain) {\n      source = `${source}\n      ${getDefaultFragShaderMain(this.context.glContext.version, this.context.outputTextureLayout.shape.length)}`;\n    }\n    // replace inlines\n    source = replaceInlines(source);\n\n    // concat final source string\n    return `${getFragShaderPreamble(this.context.glContext.version)}\n    ${this.getUniforms(programInfo.inputNames, programInfo.variables)}\n    ${this.getImports(source)}\n    ${source}`;\n  }\n\n  protected getImports(script: string): string {\n    const routinesIncluded = this.selectGlslLibRoutinesToBeIncluded(script);\n\n    if (routinesIncluded.length === 0) {\n      return '';\n    }\n\n    let routines = '';\n    for (let i = 0; i < routinesIncluded.length; ++i) {\n      if (routinesIncluded[i].routineBody) {\n        routines += routinesIncluded[i].routineBody + '\\n';\n      } else {\n        throw new Error(`Missing body for the Glsl Library routine: ${routinesIncluded[i].name}`);\n      }\n    }\n\n    return routines;\n  }\n  private selectGlslLibRoutinesToBeIncluded(script: string): GlslLibRoutineNode[] {\n    const nodes: GlslLibRoutineNode[] = [];\n\n    Object.keys(this.glslLibRoutineDependencyGraph).forEach(classAndRoutine => {\n      const routine = classAndRoutine.split('.')[1];\n      if (script.indexOf(routine) !== -1) {\n        nodes.push(this.glslLibRoutineDependencyGraph[classAndRoutine]);\n      }\n    });\n\n    return TopologicalSortGlslRoutines.returnOrderedNodes(nodes);\n  }\n\n  protected getUniforms(samplers?: string[], variables?: VariableInfo[]): string {\n    const uniformLines: string[] = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLines.push(`uniform sampler2D ${sampler};`);\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLines.push(\n            `uniform ${variable.type} ${variable.name}${variable.arrayLength ? `[${variable.arrayLength}]` : ''};`);\n      }\n    }\n    return uniformLines.join('\\n');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {CoordsGlslLib} from './glsl-coordinate-lib';\nimport {GlslContext, GlslLib} from './glsl-definitions';\nimport {EncodingGlslLib} from './glsl-encoding-lib';\nimport {FragColorGlslLib} from './glsl-fragcolor-lib';\nimport {ShapeUtilsGlslLib} from './glsl-shape-utils-lib';\nimport {VecGlslLib} from './glsl-vec-lib';\n\nexport const glslRegistry: {[name: string]: new (context: GlslContext) => GlslLib} = {\n  'encoding': EncodingGlslLib,\n  'fragcolor': FragColorGlslLib,\n  'vec': VecGlslLib,\n  'shapeUtils': ShapeUtilsGlslLib,\n  'coordinates': CoordsGlslLib,\n  //  'arrays': ArrayGlslSLib\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class ShapeUtilsGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.bcastIndex(),\n      ...this.bcastMatmulIndex(),\n      ...this.offsetToIndices(),\n      ...this.indicesToOffset(),\n      ...this.incrementIndices()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  protected bcastIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].unpackedShape;\n      if (shape.length <= outputRank) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName} (int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected bcastMatmulIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      if (!(shape.length < 2 || shape.length > outputRank)) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastMatmulIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank - 2; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName}(int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n          realIndices[${rank - 1}] = bcastedIndices[${outputRank - 1}];\n          realIndices[${rank - 2}] = bcastedIndices[${outputRank - 2}];\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected indicesToOffset(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `indicesToOffset_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides));\n      funcName = `indicesToOffset_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static indexToOffsetSingle(name: string, rank: number, strides: readonly number[]): string {\n    let block = '';\n    for (let i = rank - 1; i >= 0; --i) {\n      block += `\n        offset += indices[${i}] * ${strides[i]};\n        `;\n    }\n    return `\n      int ${name}(int indices[${rank}]) {\n        int offset = 0;\n        ${block}\n        return offset;\n      }\n      `;\n  }\n  protected offsetToIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `offsetToIndices_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides));\n      funcName = `offsetToIndices_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static offsetToIndicesSingle(name: string, rank: number, strides: readonly number[]): string {\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n      indices[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= indices[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n      indices[${rank - 1}] = offset;`);\n    return `\n      void ${name}(int offset, out int indices[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n      `;\n  }\n  protected incrementIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const rank = shape.length;\n      const funcName = `incrementIndices_${name}`;\n      let shapeInit = '';\n      for (let i = 0; i < rank; ++i) {\n        shapeInit += `\n        shape[${i}] = ${shape[i]};`;\n      }\n      const body = `\n        void ${funcName}(int axis, out int indices[${rank}]) {\n          int shape[${rank}];\n          ${shapeInit};\n          for(int i = ${rank} -1 ; i >= 0; --i) {\n            if(i > axis) continue;\n            indices[i] += 1;\n            if(indices[i] < shape[i]) {\n              break;\n            }\n            indices[i] = 0;\n          }\n        }\n        `;\n      result[funcName] = new GlslLibRoutine(body);\n    });\n    return result;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/**\n * represent a version irrelevant abstraction of for GLSL source code\n */\nexport interface Glsl {\n  readonly version: string;\n  readonly attribute: string;\n  readonly varyingVertex: string;\n  readonly varyingFrag: string;\n  readonly texture2D: string;\n  readonly output: string;\n  readonly outputDeclaration: string;\n}\n\nconst GLSL_ES_2_0: Glsl = {\n  version: '',\n  attribute: 'attribute',\n  varyingVertex: 'varying',\n  varyingFrag: 'varying',\n  texture2D: 'texture2D',\n  output: 'gl_FragColor',\n  outputDeclaration: '',\n};\nconst GLSL_ES_3_0: Glsl = {\n  version: '#version 300 es',\n  attribute: 'in',\n  varyingVertex: 'out',\n  varyingFrag: 'in',\n  texture2D: 'texture',\n  output: 'outputColor',\n  outputDeclaration: 'out vec4 outputColor;',\n};\n\nexport function getGlsl(version: 1|2) {\n  return version === 1 ? GLSL_ES_2_0 : GLSL_ES_3_0;\n}\n\nexport function getVertexShaderSource(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n      precision highp float;\n      ${glsl.attribute} vec3 position;\n      ${glsl.attribute} vec2 textureCoord;\n\n      ${glsl.varyingVertex} vec2 TexCoords;\n\n      void main()\n      {\n          gl_Position = vec4(position, 1.0);\n          TexCoords = textureCoord;\n      }`;\n}\n\nexport function getFragShaderPreamble(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFrag} vec2 TexCoords;\n    ${glsl.outputDeclaration}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    // Custom vector types to handle higher dimenalities.\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    `;\n}\n\nexport function getDefaultFragShaderMain(version: 1|2, outputShapeLength: number): string {\n  const glsl = getGlsl(version);\n  return `\n  void main() {\n    int indices[${outputShapeLength}];\n    toVec(TexCoords, indices);\n    vec4 result = vec4(process(indices));\n    ${glsl.output} = result;\n  }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for vec routines\n * Vec is an varible length int array. The length is fixed at the time of\n * generating the library functions from the dimensions of the output.\n */\nexport class VecGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.binaryVecFunctions(), ...this.copyVec(), ...this.setVecItem(), ...this.getVecItem()};\n  }\n  protected binaryVecFunctions(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    const nameOp: {[name: string]: string} = {add: '+=', sub: '-=', mul: '*=', div: '/='};\n    const result: {[name: string]: GlslLibRoutine} = {};\n    for (const name in nameOp) {\n      const fname = `${name}Vec`;\n      let assignmentBlock = '';\n      for (let i = 0; i < rank; ++i) {\n        assignmentBlock += `\n          dest[${i}] ${nameOp[name]} src[${i}];\n          `;\n      }\n      const body = `\n        void ${fname}(int src[${rank}], out int dest[${rank}]) {\n          ${assignmentBlock}\n        }\n        `;\n      result[fname] = new GlslLibRoutine(body);\n    }\n\n    return result;\n  }\n  protected copyVec(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let assignmentBlock = '';\n    for (let i = 0; i < rank; ++i) {\n      assignmentBlock += `\n        dest[${i}] = src[${i}];\n        `;\n    }\n    const body = `\n      void copyVec(int src[${rank}], out int dest[${rank}]) {\n        ${assignmentBlock}\n      }\n      `;\n    return {copyVec: new GlslLibRoutine(body)};\n  }\n\n  protected setVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index =${rank} + index;\n        if (index == 0)\n            m[0] = value;\n        `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            m[${i}] = value;\n            `;\n    }\n    block += `\n        else\n            m[${rank - 1}] = value;\n        `;\n    const body = `\n      void setVecItem(out int m[${rank}], int index, int value) {\n        ${block}\n      }\n        `;\n    return {setVecItem: new GlslLibRoutine(body)};\n  }\n  protected getVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index = ${rank} + index;\n        if (index == 0)\n            return m[0];\n      `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            return m[${i}];\n      `;\n    }\n    block += `\n        else\n            return m[${rank - 1}];\n        `;\n    const body = `\n      int getVecItem(int m[${rank}], int index) {\n        ${block}\n      }\n    `;\n    return {getVecItem: new GlslLibRoutine(body)};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from '../../backend';\nimport {Logger} from '../../instrument';\nimport {Tensor} from '../../tensor';\nimport {ShapeUtil} from '../../util';\n\nimport {createPackProgramInfoLoader} from './ops/pack';\nimport {createPackedReshape3DProgramInfoLoader, isReshapeCheap, processDims3D} from './ops/reshape-packed';\nimport {encodeAsUint8} from './ops/uint8-encode';\nimport {createUnpackProgramInfoLoader} from './ops/unpack';\nimport {WebGLSessionHandler} from './session-handler';\nimport {Encoder} from './texture-data-encoder';\nimport {calculateTextureWidthAndHeight, createTextureLayoutFromShape, createTextureLayoutFromTextureType} from './texture-layout';\nimport {Artifact, ProgramInfo, ProgramInfoLoader, TextureData, TextureLayout, TextureType} from './types';\n\nconst getProgramInfoUniqueKey =\n    (programInfo: ProgramInfo|ProgramInfoLoader, inputTextureDatas: TextureData[]): string => {\n      const inputs =\n          inputTextureDatas.map(texture => `${texture.unpackedShape.join(',')};${texture.width}x${texture.height}`)\n              .join('_');\n      let key = programInfo.name;\n      if (programInfo.cacheHint) {\n        key += '[' + programInfo.cacheHint + ']';\n      }\n      key += ':' + inputs;\n      return key;\n    };\n\nexport class WebGLInferenceHandler implements InferenceHandler {\n  private packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  private unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  constructor(public session: WebGLSessionHandler) {\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  /**\n   * @returns [width, height]\n   */\n  calculateTextureWidthAndHeight(shape: readonly number[], textureType: TextureType): [number, number] {\n    return calculateTextureWidthAndHeight(this.session.layoutStrategy, shape, textureType);\n  }\n\n  executeProgram(program: ProgramInfo|ProgramInfoLoader, inputs: readonly Tensor[]): TextureData {\n    if (inputs.length < program.inputNames.length) {\n      throw new Error(`Input size mustn't be less than ${program.inputNames.length}.`);\n    }\n    if (program.inputNames.length !== program.inputTypes.length) {\n      throw new Error('input names size does not match input types');\n    }\n\n    // create texture info for input\n    const inputTextureDatas: TextureData[] = [];\n    for (let i = 0; i < program.inputNames.length; ++i) {\n      inputTextureDatas[i] = this.getOrCreateTextureData(inputs[i], program.inputTypes[i]);\n    }\n\n    const key = getProgramInfoUniqueKey(program, inputTextureDatas);\n    let artifact = this.session.programManager.getArtifact(key);\n    const programInfo = artifact ?\n        artifact.programInfo :\n        (typeof (program as ProgramInfoLoader).get === 'function' ? (program as ProgramInfoLoader).get() :\n                                                                    (program as ProgramInfo));\n\n    // create texture info for output\n    const outputTextureLayout = createTextureLayoutFromTextureType(\n        this.session.layoutStrategy, programInfo.output.dims, programInfo.output.textureType);\n    const outputTextureData = this.createTextureData(outputTextureLayout, programInfo.output.type);\n\n    if (!artifact) {\n      artifact = this.session.programManager.build(programInfo, inputTextureDatas, outputTextureData);\n      this.session.programManager.setArtifact(key, artifact);\n    }\n\n    this.runProgram(artifact, inputTextureDatas, outputTextureData);\n    return outputTextureData;\n  }\n\n  run(program: ProgramInfoLoader, inputs: readonly Tensor[]): Tensor {\n    const outputTextureData = this.executeProgram(program, inputs);\n    return outputTextureData.tensor;\n  }\n\n  private runProgram(artifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    // input should match\n    for (let i = 0; i < inputs.length; ++i) {\n      if (!!inputs[i].isPacked !== (artifact.programInfo.inputTypes[i] === TextureType.packed)) {\n        throw new Error(`input[${i}] property packed inconsistent`);\n      }\n    }\n\n    // output should match\n    if (!!output.isPacked !== (artifact.programInfo.output.textureType === TextureType.packed)) {\n      throw new Error('output property packed inconsistent');\n    }\n\n    this.session.programManager.run(artifact, inputs, output);\n  }\n\n  /**\n   * Create a TextureData object from a tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * If a related texture data is found in cache, returns it;\n   * Otherwise:\n   *   Creates a new texture layout if not provided;\n   *   Creates WebGLTexture with the layout;\n   *   Upload tensor data to the texture;\n   *   Creates a texture data object associated with the given tensor.\n   * @param tensor the tensor with data to upload\n   */\n  private getOrCreateTextureData(tensor: Tensor, textureType: TextureType) {\n    let td = this.getTextureData(tensor.dataId, textureType === TextureType.packed);\n\n    if (!td) {\n      // check if we have texture data in different type\n      td = this.getTextureData(tensor.dataId, textureType !== TextureType.packed);\n      if (td) {\n        if (textureType === TextureType.packed) {\n          return this.pack(td);\n        } else {\n          return this.unpack(td);\n        }\n      }\n    }\n\n    if (!td) {\n      const layout = createTextureLayoutFromTextureType(this.session.layoutStrategy, tensor.dims, textureType);\n\n      if (textureType === TextureType.packedLastDimension) {\n        const group = 1;\n        const channels = 4;\n        const shape = tensor.dims;\n        if (shape.length === 4) {\n          // pre-processing for kernel data of Conv.\n          //\n          // TODO: currently this is a hacking to overwrite Conv's weight. The correct way to do this should be:\n          // 1. implement texture based const-folding\n          // 2. create a WebGL program \"preprocessConvWeight\" to do the same work as below\n          // 3. run the program before dotProduct.\n          //\n          const adjustedKernelShape = [shape[0], Math.ceil((shape[1] * shape[2] * shape[3]) / channels)];\n          const adjustedLayout =\n              createTextureLayoutFromTextureType(this.session.layoutStrategy, adjustedKernelShape, textureType);\n          let buffer = tensor.numberData;\n          if (shape[1] * shape[2] * shape[3] % channels !== 0) {\n            const numFeatureMaps = shape[0];\n            const oldRowSize = shape[1] * shape[2] * shape[3];\n            const newRowSize = Math.ceil(oldRowSize * group / channels) * channels;\n            const newSize = numFeatureMaps * newRowSize;\n            buffer = new Float32Array(newSize);\n            for (let f = 0; f < numFeatureMaps; ++f) {\n              const oldOffset = f * oldRowSize;\n              const newOffset = f * newRowSize + f % group * oldRowSize;\n              buffer.set(tensor.numberData.subarray(oldOffset, oldOffset + oldRowSize), newOffset);\n            }\n          }\n          return this.createTextureData(adjustedLayout, tensor.type, buffer, tensor, Encoder.Usage.UploadOnly);\n        }\n      }\n\n      if (textureType === TextureType.packed) {\n        const unpackedTextureLayout =\n            createTextureLayoutFromShape(this.session.layoutStrategy, tensor.dims, 1, [], {reverseWH: true});\n        const unpackedTextureData = this.createTextureData(\n            unpackedTextureLayout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n        td = this.pack(unpackedTextureData);\n      } else {\n        td = this.createTextureData(layout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n      }\n    }\n    return td;\n  }\n\n  /**\n   * Create a TextureData object using the given data and bind to the given tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * NOTE: this function is a hack for Conv implementation. should remove this function, after rewriting Conv\n   * implementation by Graph.Transformer\n   * @param dataType the tensor data type\n   * @param data the actual data to upload\n   * @param tensor the tensor to bind. tensor's data is ignored.\n   */\n  createTextureDataFromLayoutBindTensor(\n      layout: TextureLayout, dataType: Tensor.DataType, data: Tensor.NumberType, tensor: Tensor): TextureData {\n    return this.createTextureData(layout, dataType, data, tensor, Encoder.Usage.UploadOnly);\n  }\n\n  private createTextureData(\n      layout: TextureLayout, dataType: Tensor.DataType, data?: Tensor.NumberType, tensor?: Tensor,\n      usage?: Encoder.Usage): TextureData {\n    Logger.verbose('InferenceHandler', `Creating TextureData: layout:[${JSON.stringify(layout)}]`);\n    const texture = this.session.textureManager.createTextureFromLayout(dataType, layout, data, usage);\n    return this.createTextureDataFromTexture(layout, dataType, texture, tensor);\n  }\n\n  reshapeUnpacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureLayout: TextureLayout = {\n      channels: inputTD.channels,\n      height: inputTD.height,\n      width: inputTD.width,\n      // handle reshaping into scalar Tensors\n      shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n      strides: ShapeUtil.computeStrides(reshapedDims),\n      unpackedShape: reshapedDims,\n    };\n    const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  reshapePacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.packed);\n\n    // check if the reshape is 'cheap'\n    if (isReshapeCheap(input.dims, reshapedDims)) {\n      const newTextureLayout: TextureLayout = {\n        channels: inputTD.channels,\n        height: inputTD.height,\n        width: inputTD.width,\n        // handle reshaping into scalar Tensors\n        shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n        strides: ShapeUtil.computeStrides(reshapedDims),\n        unpackedShape: reshapedDims,\n        isPacked: true\n      };\n      const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n      return newTextureData.tensor;\n    }\n\n    const squeezedInputShape = processDims3D(input.dims);\n    const squeezedOutputShape = processDims3D(reshapedDims);\n\n    const squeezedInputTensor = this.reshapePacked(input, squeezedInputShape);\n    const squeezedOutputTensor = this.run(\n        createPackedReshape3DProgramInfoLoader(this, squeezedInputTensor, squeezedOutputShape), [squeezedInputTensor]);\n    const outputTensor = this.reshapePacked(squeezedOutputTensor, reshapedDims);\n    return outputTensor;\n  }\n\n  cast(input: Tensor, type: Tensor.DataType): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureData = this.createTextureDataFromTexture(inputTD as TextureLayout, type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  private createTextureDataFromTexture(\n      layout: TextureLayout, dataType: Tensor.DataType, texture: WebGLTexture, tensor?: Tensor, tensorId?: Tensor.Id) {\n    const textureData: TextureData = {\n      ...layout,\n      tensor: tensor ||\n          new Tensor(\n                  layout.unpackedShape, dataType, (_id: Tensor.Id) => this.readTexture(textureData),\n                  async (_id: Tensor.Id) => this.readTextureAsync(textureData), undefined, tensorId),\n      texture\n    };\n    this.setTextureData(textureData.tensor.dataId, textureData, layout.isPacked);\n    return textureData;\n  }\n\n  private getTextureData(tensorId: Tensor.Id, isPacked = false): TextureData|undefined {\n    return this.session.isInitializer(tensorId) ? this.session.getTextureData(tensorId, isPacked) :\n        isPacked                                ? this.packedTextureDataCache.get(tensorId) :\n                                                  this.unpackedTextureDataCache.get(tensorId);\n  }\n  setTextureData(tensorId: Tensor.Id, td: TextureData, isPacked = false): void {\n    if (this.session.isInitializer(tensorId)) {\n      this.session.setTextureData(tensorId, td, isPacked);\n    } else {\n      (isPacked ? this.packedTextureDataCache : this.unpackedTextureDataCache).set(tensorId, td);\n    }\n  }\n  isTextureLayoutCached(tensor: Tensor, isPacked = false): boolean {\n    return !!this.getTextureData(tensor.dataId, isPacked);\n  }\n\n  dispose(): void {\n    this.session.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  readTexture(textureData: TextureData): Tensor.NumberType {\n    if (textureData.isPacked) {\n      return this.readTexture(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTexture(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  async readTextureAsync(textureData: TextureData): Promise<Tensor.NumberType> {\n    if (textureData.isPacked) {\n      return this.readTextureAsync(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTextureAsync(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  pack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createPackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n\n  unpack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createUnpackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {OpSet} from '../../opset';\n\nimport {batchNormalization, parseBatchNormalizationAttributes} from './ops/batch-normalization';\nimport * as binaryOps from './ops/binary-op';\nimport {cast, parseCastAttributes} from './ops/cast';\nimport {concat, parseConcatAttributes} from './ops/concat';\nimport {conv, parseConvAttributes} from './ops/conv';\nimport {convTranspose, parseConvTransposeAttributes} from './ops/conv-transpose';\nimport {depthToSpace, parseDepthToSpaceAttributes} from './ops/depth-to-space';\nimport {flatten, parseFlattenAttributes} from './ops/flatten';\nimport {gather, parseGatherAttributes} from './ops/gather';\nimport {gemm, parseGemmAttributesV11, parseGemmAttributesV7} from './ops/gemm';\nimport {imageScaler, parseImageScalerAttributes} from './ops/image-scaler';\nimport {instanceNormalization, parseInstanceNormalizationAttributes} from './ops/instance-normalization';\nimport {lrn, parseLrnAttributes} from './ops/lrn';\nimport {matMul, parseMatMulAttributes} from './ops/matmul';\nimport {padV11, padV2, parsePadAttributesV11, parsePadAttributesV2} from './ops/pad';\nimport {averagePool, globalAveragePool, globalMaxPool, maxPool, parseAveragePoolAttributes, parseGlobalAveragePoolAttributes, parseMaxPoolAttributes} from './ops/pool';\nimport {parseReduceAttributes, reduceLogSum, reduceLogSumSquare, reduceMax, reduceMean, reduceMin, reduceProd, reduceSum} from './ops/reduce';\nimport {reshape} from './ops/reshape';\nimport {parseResizeAttributesV10, parseResizeAttributesV11, resize} from './ops/resize-packed';\nimport {shape} from './ops/shape';\nimport {parseSliceAttributes, slice, sliceV10} from './ops/slice';\nimport {parseSoftmaxAttributes, parseSoftmaxAttributesV13, softmax, softmaxV13} from './ops/softmax';\nimport {parseSplitAttributes, split} from './ops/split';\nimport {parseSqueezeAttributes, squeeze, squeezeV13} from './ops/squeeze';\nimport {sum} from './ops/sum';\nimport {tile} from './ops/tile';\nimport {parseTransposeAttributes, transpose} from './ops/transpose';\nimport * as unaryOps from './ops/unary-op';\nimport {parseUnsqueezeAttributes, unsqueeze, unsqueezeV13} from './ops/unsqueeze';\nimport {parseUpsampleAttributesV7, parseUpsampleAttributesV9, upsample} from './ops/upsample';\n\nexport const WEBGL_OP_RESOLVE_RULES: readonly OpSet.ResolveRule[] = [\n  ['Abs', '', '6+', unaryOps.abs],\n  ['Acos', '', '7+', unaryOps.acos],\n  ['Add', '', '7+', binaryOps.add],\n  ['And', '', '7+', binaryOps.and],\n  ['Asin', '', '7+', unaryOps.asin],\n  ['Atan', '', '7+', unaryOps.atan],\n  // TODO: support new attributes for AveragePool-10\n  ['AveragePool', '', '7+', averagePool, parseAveragePoolAttributes],\n  ['BatchNormalization', '', '7+', batchNormalization, parseBatchNormalizationAttributes],\n  ['Cast', '', '6+', cast, parseCastAttributes],\n  ['Ceil', '', '6+', unaryOps.ceil],\n  ['Clip', '', '6-10', unaryOps.clip, unaryOps.parseClipAttributes],\n  ['Clip', '', '11+', unaryOps.clipV11],\n  ['Concat', '', '4+', concat, parseConcatAttributes],\n  ['Conv', '', '1+', conv, parseConvAttributes],\n  ['ConvTranspose', '', '1+', convTranspose, parseConvTransposeAttributes],\n  ['Cos', '', '7+', unaryOps.cos],\n  ['Div', '', '7+', binaryOps.div],\n  ['Dropout', '', '7+', unaryOps.identity],\n  ['DepthToSpace', '', '1+', depthToSpace, parseDepthToSpaceAttributes],\n  ['Equal', '', '7+', binaryOps.equal],\n  ['Elu', '', '6+', unaryOps.elu, unaryOps.parseEluAttributes],\n  ['Exp', '', '6+', unaryOps.exp],\n  ['Flatten', '', '1+', flatten, parseFlattenAttributes],\n  ['Floor', '', '6+', unaryOps.floor],\n  ['FusedConv', 'com.microsoft', '1+', conv, parseConvAttributes],\n  ['Gather', '', '1+', gather, parseGatherAttributes],\n  ['Gemm', '', '7-10', gemm, parseGemmAttributesV7],\n  ['Gemm', '', '11+', gemm, parseGemmAttributesV11],\n  ['GlobalAveragePool', '', '1+', globalAveragePool, parseGlobalAveragePoolAttributes],\n  ['GlobalMaxPool', '', '1+', globalMaxPool],\n  ['Greater', '', '7+', binaryOps.greater],\n  ['Identity', '', '1+', unaryOps.identity],\n  ['ImageScaler', '', '1+', imageScaler, parseImageScalerAttributes],\n  ['InstanceNormalization', '', '6+', instanceNormalization, parseInstanceNormalizationAttributes],\n  ['LeakyRelu', '', '6+', unaryOps.leakyRelu, unaryOps.parseLeakyReluAttributes],\n  ['Less', '', '7+', binaryOps.less],\n  ['LRN', '', '1+', lrn, parseLrnAttributes],\n  ['Log', '', '6+', unaryOps.log],\n  ['MatMul', '', '1+', matMul, parseMatMulAttributes],\n  // TODO: support new attributes for MaxPool-8 and MaxPool-10\n  ['MaxPool', '', '1+', maxPool, parseMaxPoolAttributes],\n  ['Mul', '', '7+', binaryOps.mul],\n  ['Neg', '', '6+', unaryOps.neg],\n  ['Not', '', '1+', unaryOps.not],\n  ['Or', '', '7+', binaryOps.or],\n  ['Pad', '', '2-10', padV2, parsePadAttributesV2],\n  ['Pad', '', '11+', padV11, parsePadAttributesV11],\n  ['Pow', '', '7+', binaryOps.pow],\n  ['PRelu', '', '7+', binaryOps.pRelu],\n  ['ReduceLogSum', '', '1+', reduceLogSum, parseReduceAttributes],\n  ['ReduceMax', '', '1+', reduceMax, parseReduceAttributes],\n  ['ReduceMean', '', '1+', reduceMean, parseReduceAttributes],\n  ['ReduceMin', '', '1+', reduceMin, parseReduceAttributes],\n  ['ReduceProd', '', '1+', reduceProd, parseReduceAttributes],\n  ['ReduceSum', '', '1-12', reduceSum, parseReduceAttributes],\n  ['ReduceSumSquare', '', '1+', reduceLogSumSquare, parseReduceAttributes],\n  ['Relu', '', '6+', unaryOps.relu],\n  ['Reshape', '', '5+', reshape],\n  ['Resize', '', '10', resize, parseResizeAttributesV10],\n  ['Resize', '', '11+', resize, parseResizeAttributesV11],\n  ['Shape', '', '1+', shape],\n  ['Sigmoid', '', '6+', unaryOps.sigmoid],\n  ['Sin', '', '7+', unaryOps.sin],\n  ['Slice', '', '10+', sliceV10],  // TODO: support 'steps' for Slice-10\n  ['Slice', '', '1-9', slice, parseSliceAttributes],\n  // The \"semantic\" meaning of axis has changed in opset-13.\n  ['Softmax', '', '1-12', softmax, parseSoftmaxAttributes],\n  ['Softmax', '', '13+', softmaxV13, parseSoftmaxAttributesV13],\n  // 'Split' operator has an optional attribute 'split'\n  // this attribute determines how the specified axis of input data is split.\n  // When the attribute is missing, we need the count of number of outputs\n  // so that we can determine the 'split' attribute from the runtime input to the Operator\n  ['Split', '', '2-12', split, parseSplitAttributes],\n  ['Sqrt', '', '6+', unaryOps.sqrt],\n  ['Squeeze', '', '1-12', squeeze, parseSqueezeAttributes],\n  ['Squeeze', '', '13+', squeezeV13],\n  ['Sub', '', '7+', binaryOps.sub],\n  ['Sum', '', '6+', sum],\n  ['Tan', '', '7+', unaryOps.tan],\n  ['Tanh', '', '6+', unaryOps.tanh],\n  ['Tile', '', '6+', tile],\n  ['Transpose', '', '1+', transpose, parseTransposeAttributes],\n  ['Upsample', '', '7-8', upsample, parseUpsampleAttributesV7],\n  ['Upsample', '', '9', upsample, parseUpsampleAttributesV9],\n  ['Unsqueeze', '', '1-12', unsqueeze, parseUnsqueezeAttributes],\n  ['Unsqueeze', '', '13+', unsqueezeV13],\n  ['Xor', '', '7+', binaryOps.xor],\n];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface BatchNormalizationAttributes extends AttributeWithCacheKey {\n  epsilon: number;\n  momentum: number;\n  spatial: number;\n}\n\nconst batchNormalizationProgramMetadata = {\n  name: 'BatchNormalization',\n  inputNames: ['A', 'Scale', 'B', 'Mean', 'Variance'],\n  inputTypes:\n      [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked]\n};\n\nexport const batchNormalization: OperatorImplementation<BatchNormalizationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...batchNormalizationProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createBatchNormalizationProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseBatchNormalizationAttributes: OperatorInitialization<BatchNormalizationAttributes> =\n    (node: Graph.Node): BatchNormalizationAttributes => {\n      const epsilon = node.attributes.getFloat('epsilon', 1e-5);\n      const momentum = node.attributes.getFloat('momentum', 0.9);\n      const spatial = node.attributes.getInt('spatial', 1);\n      return createAttributeWithCacheKey({epsilon, momentum, spatial});\n    };\n\nconst createBatchNormalizationProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes):\n        ProgramInfo => {\n          const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n          const rank = inputs[0].dims.length;\n          const [scaleWidth, scaleHeight] =\n              inferenceHandler.calculateTextureWidthAndHeight(inputs[1].dims, TextureType.unpacked);\n          const shaderSource = `\n  float process(int[${rank}] indices) {\n    vec2 position = offsetToCoords(indices[1], ${scaleWidth}, ${scaleHeight});\n    float scale = getColorAsFloat(${glsl.texture2D}(Scale, position));\n    float mean = getColorAsFloat(${glsl.texture2D}(Mean, position));\n    float variance = getColorAsFloat(${glsl.texture2D}(Variance, position));\n    float b = getColorAsFloat(${glsl.texture2D}(B, position));\n\n    return scale * ( (_A(indices) - mean) / sqrt(variance + float(${attributes.epsilon})) ) + b;\n  }`;\n          return {\n            ...batchNormalizationProgramMetadata,\n            output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 5) {\n    throw new Error('BatchNormalization requires 5 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n  const mean = inputs[3];\n  const var_ = inputs[4];\n\n  // input should atleast have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1 || mean.dims.length !== 1 ||\n      var_.dims.length !== 1) {\n    throw new Error('invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1] || mean.dims[0] !== X.dims[1] ||\n      var_.dims[0] !== X.dims[1]) {\n    throw new Error('invalid input shape.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64') || (mean.type !== 'float32' && mean.type !== 'float64') ||\n      (var_.type !== 'float32' && var_.type !== 'float64')) {\n    throw new Error('invalid input tensor types.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\n\nexport function glslAdd(): GlslValueFunction {\n  const name = 'add_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a + b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 + v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslDiv(): GlslValueFunction {\n  const name = 'div_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a / b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 / v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslMul(): GlslValueFunction {\n  const name = 'mul_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a * b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 * v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSub(): GlslValueFunction {\n  const name = 'sub_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a - b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 - v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslEqual(): GlslValueFunction {\n  const name = 'equal_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a == b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(equal(v1, v2));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslGreater(): GlslValueFunction {\n  const name = 'greater_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a > b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r > v2.r ,\n      v1.g > v2.g,\n      v1.b > v2.b,\n      v1.a > v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLess(): GlslValueFunction {\n  const name = 'less_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a < b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r < v2.r ,\n                v1.g < v2.g,\n                v1.b < v2.b,\n                v1.a < v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslAnd(): GlslValueFunction {\n  const name = 'and_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) && bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r && b2.r ,\n                b1.g && b2.g,\n                b1.b && b2.b,\n                b1.a && b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslOr(): GlslValueFunction {\n  const name = 'or_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) || bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r || b2.r ,\n                b1.g || b2.g,\n                b1.b || b2.b,\n                b1.a || b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslXor(): GlslValueFunction {\n  const name = 'xor_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) ^^ bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r ^^ b2.r ,\n                b1.g ^^ b2.g,\n                b1.b ^^ b2.b,\n                b1.a ^^ b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslPow(): GlslValueFunction {\n  return glslBuiltinBinary('pow');\n}\nexport function glslPRelu(): GlslValueFunction {\n  const name = 'prelu_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a < 0.0 ? a * b: a;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(\n      v1.r < 0.0 ? v1.r * v2.r: v1.r,\n      v1.g < 0.0 ? v1.g * v2.g: v1.g,\n      v1.b < 0.0 ? v1.b * v2.b: v1.b,\n      v1.a < 0.0 ? v1.a * v2.a: v1.a\n      );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nfunction glslBuiltinBinary(fname: string): GlslValueFunction {\n  const name = `${fname}_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return ${fname}(a, b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return ${fname}(v1, v2);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nconst createBinaryProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type, cacheKey?: string): ProgramInfoLoader => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        cacheHint: cacheKey,\n        get: () => createBinaryProgramInfo(handler, inputs, glslFunc, outputTensorType)\n      };\n    };\n\nconst createBinaryProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type): ProgramInfo => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n      let outputShape = inputs[0].dims;\n\n      const usePackedTexture = handler.session.pack;\n\n      if (isBroadcast) {\n        const calculatedShape = BroadcastUtil.calcShape(inputs[0].dims, inputs[1].dims, false);\n        if (!calculatedShape) {\n          throw new Error('Can\\'t perform binary op on the given tensors');\n        }\n        outputShape = calculatedShape;\n        const outputRank = outputShape.length;\n        const aRank = inputs[0].dims.length !== 0 ? inputs[0].dims.length : 1;\n        const bRank = inputs[1].dims.length !== 0 ? inputs[1].dims.length : 1;\n        const aBcast = inputs[0].dims.length !== 0 ? 'bcastIndices_A(indices, aindices);' : 'aindices[0] = 0;';\n        const bBcast = inputs[1].dims.length !== 0 ? 'bcastIndices_B(indices, bindices);' : 'bindices[0] = 0;';\n\n        const glsl = getGlsl(handler.session.backend.glContext.version);\n        const shaderSource = usePackedTexture ? `\n      ${glslFunc.body}\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n        vec4 result = ${glslFunc.name}(a, b);\n        ${glsl.output} = result;\n      }` :\n                                                `\n      ${glslFunc.body}\n      float process(int indices[${outputRank}]) {\n        int aindices[${aRank}];\n        int bindices[${bRank}];\n        ${aBcast}\n        ${bBcast}\n        return ${glslFunc.name}(_A(aindices), _B(bindices));\n      }`;\n\n        return {\n          name: glslFunc.name,\n          inputNames: ['A', 'B'],\n          inputTypes: [textureType, textureType],\n          output: {dims: outputShape, type: outputTensorType, textureType},\n          shaderSource,\n          hasMain: usePackedTexture\n        };\n      }\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n      const shaderSource = `\n    ${glslFunc.body}\n    void main() {\n      vec4 v1 = ${glsl.texture2D}(A, TexCoords);\n      vec4 v2 = ${glsl.texture2D}(B, TexCoords);\n      vec4 result = ${glslFunc.name}(v1, v2);\n      ${glsl.output} = result;\n    }\n    `;\n\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        output: {dims: inputs[0].dims, type: outputTensorType, textureType},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const add = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAdd()), inputs)];\n\nexport const and = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAnd(), 'bool'), inputs)];\n\nexport const div = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslDiv()), inputs)];\n\nexport const equal = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslEqual(), 'bool'), inputs)];\n\nexport const greater = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslGreater(), 'bool'), inputs)];\n\nexport const less = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslLess(), 'bool'), inputs)];\n\nexport const mul = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslMul()), inputs)];\n\nexport const or = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslOr(), 'bool'), inputs)];\n\nexport const pow = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPow()), inputs)];\n\nexport const pRelu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPRelu()), inputs)];\n\nexport const sub = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslSub()), inputs)];\n\nexport const xor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslXor(), 'bool'), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ProtoUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const cast: OperatorImplementation<Tensor.DataType> =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], to: Tensor.DataType): Tensor[] => {\n      validateInputs(inputs);\n      return [handler.cast(inputs[0], to)];\n    };\n\nexport const parseCastAttributes: OperatorInitialization<Tensor.DataType> = (node: Graph.Node): Tensor.DataType =>\n    ProtoUtil.tensorDataTypeFromProto(node.attributes.getInt('to'));\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Cast requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {ConcatAttributes} from './concat';\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst createPackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat (packed)',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.packed),\n  cacheHint\n});\n\nconst createPackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n      const coords = getChannels('coords', rank);\n      const dtype = getCoordsDataType(rank);\n      const unpackChannel = unpackFromChannel();\n\n      const shapes = inputs.map(i => i.dims);\n      const channels = getGlChannels(rank);\n      const offsets: number[] = new Array(shapes.length - 1);\n\n      offsets[0] = shapes[0][axis];\n      for (let i = 1; i < offsets.length; i++) {\n        offsets[i] = offsets[i - 1] + shapes[i][axis];\n      }\n\n      const channel = channels[axis];\n      const lastChannels = channels.slice(-2);\n      const allChannels = channels.join();\n\n      let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getX0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n      for (let i = 1; i < offsets.length; i++) {\n        const shift = offsets[i - 1];\n        getValueSnippet += `\n            if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n              return getChannel(\n                getX${i}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n                vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));\n            }`;\n      }\n      const lastIndex = offsets.length;\n      const shift = offsets[offsets.length - 1];\n      getValueSnippet += `\n            return getChannel(\n              getX${lastIndex}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n              vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));`;\n\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n\n      const shaderSource = `\n          ${unpackChannel}\n          float getValue(${channels.map(x => 'int ' + x)}) {\n            ${getValueSnippet}\n          }\n\n          void main() {\n            ${dtype} coords = getOutputCoords();\n            int lastDim = coords.${channels[rank - 1]};\n            coords.${channels[rank - 1]} = coords.${channels[rank - 2]};\n            coords.${channels[rank - 2]} = lastDim;\n\n            vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n            if (${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.g = getValue(${coords});\n            }\n\n            ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]}) {\n              result.a = getValue(${coords});\n            }\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]} &&\n                ${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.b = getValue(${coords});\n            }\n            ${glsl.output} = result;\n          }\n        `;\n\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createPackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createPackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createPackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getShiftedChannelsSnippet = (channels: string[], channel: string, shift: number): string => {\n  const channelIdx = channels.indexOf(channel);\n  const res = channels.map((c, idx) => {\n    if (idx === channelIdx) {\n      return `${c} - ${shift}`;\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {createPackedConcatProgramInfoLoader} from './concat-packed';\n\nexport interface ConcatAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const concat: OperatorImplementation<ConcatAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): Tensor[] => {\n      validateInputs(inputs);\n      if (inferenceHandler.session.pack && inputs[0].dims.length > 1) {\n        const output =\n            inferenceHandler.run(createPackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      } else {\n        const output =\n            inferenceHandler.run(createUnpackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      }\n    };\n\nconst createUnpackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.unpacked),\n  cacheHint\n});\n\nconst createUnpackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n\n      const sizeInConcatAxis = new Array<number>(inputs.length);\n      let previousSum = 0;\n      for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n        previousSum += inputs[i].dims[axis];\n        sizeInConcatAxis[i] = previousSum;\n      }\n\n      let getTextureIndexWhereDataResidesMethod = '';\n      // in most cases linear search is sufficient, as in most scenarios, only 2 tensors are concatenated\n      if (inputs.length < 5) {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n      } else {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesBinarySearch(sizeInConcatAxis);\n      }\n\n      const fetchDataFromCorrectTextureMethod = getFetchDataFromCorrectTextureMethod(inputs.length, rank);\n      const getSizeInConcatAxisValueFromIndexMethod = getGetSizeInConcatAxisValueFromIndexMethod(sizeInConcatAxis);\n      const shaderSource = `\n        ${fetchDataFromCorrectTextureMethod}\n        ${getSizeInConcatAxisValueFromIndexMethod}\n        ${getTextureIndexWhereDataResidesMethod}\n        float process(int indices[${rank}]) {\n          int textureIndex = getTextureWhereDataResides (indices[${axis}]);\n\n          if(textureIndex != 0) {\n            indices[${axis}] = indices[${axis}] - int(getSizeInConcatAxisValueFromIndex(textureIndex-int(1)));\n          }\n\n          return fetchDataFromCorrectTexture(textureIndex, indices);\n        }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n      };\n    };\n\nconst createUnpackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createUnpackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createUnpackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getTextureIndexWhereDataResidesLinearSearch = (sizeInConcatAxis: number[]): string => {\n  const searchAxis = sizeInConcatAxis.map((size, i) => `if(index<${size}) {return ${i};}\n`);\n  return `int getTextureWhereDataResides(int index) {\n      ${searchAxis.join('')}\n    }`;\n};\n\n// TODO: Implement BinarySearch in GLSL\nconst getTextureIndexWhereDataResidesBinarySearch = (sizeInConcatAxis: number[]): string =>\n    getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n\nconst getFetchDataFromCorrectTextureMethod = (numberOfTensors: number, tensorRank: number) => {\n  const codeLines: string[] = [`float fetchDataFromCorrectTexture(int textureIndex, int indices[${tensorRank}]) {`];\n  for (let i = 0; i < numberOfTensors; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    } else if (i === numberOfTensors - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return _X${i}(indices); }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst getGetSizeInConcatAxisValueFromIndexMethod = (sizeInConcatAxis: number[]): string => {\n  const codeLines: string[] = ['int getSizeInConcatAxisValueFromIndex(int index) {'];\n  for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    } else if (i === sizeInConcatAxis.length - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return ${sizeInConcatAxis[i]}; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n\n  return codeLines.join('\\n');\n};\n\nexport const parseConcatAttributes: OperatorInitialization<ConcatAttributes> = (node: Graph.Node): ConcatAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis')});\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 1) {\n    throw new Error('too few inputs');\n  }\n\n  const inputType = inputs[0].type;\n  const inputDimensionality = inputs[0].dims.length;\n\n  // TODO: Support string concat\n  if (inputType === 'string') {\n    throw new Error('string tensor is not supported yet');\n  }\n\n  for (const input of inputs) {\n    // make sure types of all inputs match\n    if (input.type !== inputType) {\n      throw new Error('input tensors should be one type');\n    }\n\n    // make sure the dimensionality of all inputs are the same\n    if (input.dims.length !== inputDimensionality) {\n      throw new Error('input tensors should have the same shape');\n    }\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../../instrument';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {getActivationSnippet} from './fuse-utils';\n\nconst createUnpackedGroupedConvProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'GroupedConv',\n  inputNames: hasBias ? ['X', 'W', 'Bias'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedGroupedConvProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBias(output_channel);' : '';\n      const xShape = inputs[0].dims.slice();\n      const wShape = inputs[1].dims.slice();\n      const outputChannelsPerGroup = wShape[0] / attributes.group;\n      Logger.verbose(\n          'GroupedConv',\n          `autpPad:${attributes.autoPad}, dilations:${attributes.dilations}, group:${attributes.group}, kernelShape:${\n              attributes.kernelShape}, pads:${attributes.pads}, strides:${attributes.strides}`);\n      const outputShape =\n          calculateOutputShape(xShape, wShape, attributes.dilations, attributes.pads, attributes.strides);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n    ivec2 xRCCorner = coords.zw * strides - pads;\n    int group_id = output_channel / ${outputChannelsPerGroup};\n\n    float value = 0.0;\n    for (int wInChannel = 0; wInChannel < ${wShape[1]}; wInChannel++) {\n      int input_channel = group_id * ${wShape[1]} + wInChannel;\n      for (int wHeight = 0; wHeight < ${wShape[2]}; wHeight++) {\n        int xHeight = xRCCorner.x + wHeight * ${attributes.dilations[0]};\n\n        if (xHeight < 0 || xHeight >= ${xShape[2]}) {\n          continue;\n        }\n\n        for (int wWidth = 0; wWidth < ${wShape[3]}; wWidth++) {\n          int xWidth = xRCCorner.y + wWidth * ${attributes.dilations[1]};\n          if (xWidth < 0 || xWidth >= ${xShape[3]}) {\n            continue;\n          }\n\n          float xVal = getX(batch, input_channel, xWidth, xHeight);\n          float wVal = getW(output_channel, wInChannel, wWidth, wHeight);\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${processBias}\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createUnpackedGroupedConvProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes):\n        ProgramInfoLoader => {\n          const metadata = createUnpackedGroupedConvProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedGroupedConvProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {createPackedIm2ColProgramInfoLoader} from './im2col-pack';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const conv2DPackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapePacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapePacked(matmulOutput, outputShape);\n    };\n\nexport const conv2DPacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n\n      // run im2col\n      const im2colOutput = inferenceHandler.run(\n          createPackedIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes),\n          [inputs[0]]);\n\n      // reshape kernel\n      const kernelReshaped = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1] * kshape[2] * kshape[3]]);\n\n      // run matmul\n      const matmulInputs =\n          (inputs.length === 3) ? [kernelReshaped, im2colOutput, inputs[2]] : [kernelReshaped, im2colOutput];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n\n      // reshape output\n      const outputReshaped = inferenceHandler.reshapePacked(matmulOutput, outputShape);\n      return outputReshaped;\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\nimport {getActivationSnippet, parseInternalActivationAttributes} from './fuse-utils';\n\nconst computeTotalPad =\n    (inDim: number, stride: number, adj: number, kernel: number, dilation: number, outSize: number) =>\n        (inDim - 1) * stride + adj + (kernel - 1) * dilation + 1 - outSize;\n\nconst distributePadding = (totalPad: number, autoPad: string, pads: number[], head: number, tail: number) => {\n  const smallPad = Math.floor(totalPad / 2);\n  if (autoPad === 'SAME_UPPER') {\n    pads[head] = smallPad;\n    pads[tail] = totalPad - smallPad;\n  } else if (autoPad === 'SAME_LOWER') {\n    pads[head] = totalPad - smallPad;\n    pads[tail] = smallPad;\n  }\n};\n\nconst calculateOutputShapeAndPads =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[], autoPad: string,\n     pads: number[], strides: readonly number[], outputPadding: readonly number[], outputShape: number[]) => {\n      const spatialRank = inputShape.length - 2;\n      const updateShape = outputShape.length === 0;\n      for (let i = 0; i < spatialRank; ++i) {\n        const outSize = updateShape ? inputShape[i + 2] * strides[i] : outputShape[i];\n        const totalPad = computeTotalPad(inputShape[i + 2], strides[i], pads[i], kernelShape[i], dilations[i], outSize);\n        distributePadding(totalPad, autoPad, pads, i, i + spatialRank);\n        if (updateShape) {\n          outputShape.push(\n              strides[i] * (inputShape[i + 2] - 1) + outputPadding[i] + (kernelShape[i] - 1) * dilations[i] + 1 -\n              pads[i] - pads[i + spatialRank]);\n        }\n      }\n    };\n\nexport interface ConvTransposeAttributes extends ConvAttributes {\n  readonly outputPadding: readonly number[];\n  readonly outputShape: readonly number[];\n}\n\nexport const convTranspose: OperatorImplementation<ConvTransposeAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not convTranspose2D\n      return convTranspose2d(inferenceHandler, inputs, attributes);\n    };\n\nconst convTranspose2d: OperatorImplementation<ConvTransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvTransposeAttributes(attributes, inputs);\n      return [convTranspose2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n    };\n\nconst createConvTransposeProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'ConvTranspose',\n  inputNames: hasBias ? ['X', 'W', 'B'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedConvTransposeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvTransposeAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const valueInit = hasBias ? 'getB(output_channel)' : '0.0';\n      const xShape = inputs[0].dims;\n      const wShape = inputs[1].dims;\n      const outputChannelsPerGroup = wShape[1];\n      const inputChannelsPerGroup = wShape[0] / attributes.group;\n      const outputShape = [inputs[0].dims[0], inputs[1].dims[1] * attributes.group, ...attributes.outputShape];\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n\n    ivec2 loc = coords.zw + pads;\n\n    int group_id = output_channel / ${outputChannelsPerGroup};\n    int wOutChannel = output_channel - group_id * ${outputChannelsPerGroup};\n\n    float value = ${valueInit};\n    for (int inChannelOffset = 0; inChannelOffset < ${inputChannelsPerGroup}; inChannelOffset++) {\n      int input_channel = group_id * ${inputChannelsPerGroup} + inChannelOffset;\n      for (int wWOff = 0; wWOff < ${wShape[2]}; wWOff++) {\n        for (int wHOff = 0; wHOff < ${wShape[3]}; wHOff++) {\n          ivec2 wOff = ivec2(wWOff * ${attributes.dilations[0]}, wHOff * ${attributes.dilations[1]});\n          ivec2 wLoc = loc - wOff;\n          ivec2 wLocIn = wLoc / strides;\n          if (\n            wLocIn * strides == wLoc &&\n            wLocIn.x >= 0 && wLocIn.x < ${xShape[2]} &&\n            wLocIn.y >= 0 && wLocIn.y < ${xShape[3]}\n          ) {\n            float xVal = getX(batch, input_channel, wLocIn.y, wLocIn.x);\n            float wVal = getW(input_channel, wOutChannel, wHOff, wWOff);\n            value += xVal * wVal;\n          }\n        }\n      }\n    }\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nconst createUnpackedConvTransposeProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\n        ProgramInfoLoader => {\n          const metadata = createConvTransposeProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedConvTransposeProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n\n\nconst convTranspose2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\n        Tensor => {\n          const result = inferenceHandler.run(\n              createUnpackedConvTransposeProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n          return result;\n        };\n\nconst getAdjustedConvTransposeAttributes = <T extends ConvTransposeAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n\n  const pads = attributes.pads.slice();\n  const outputShape = attributes.outputShape.slice();\n  const inputShape = inputs[0].dims;\n  // If outputShape is not specified in the attributes of this op, infer it from the parameters\n  // Similarly, automatically infer pads if not specified\n  calculateOutputShapeAndPads(\n      inputShape, kernelShape, attributes.dilations, attributes.autoPad, pads, attributes.strides,\n      attributes.outputPadding, outputShape);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, outputShape, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvTransposeAttributes: OperatorInitialization<ConvTransposeAttributes> =\n    (node: Graph.Node): ConvTransposeAttributes => {\n      const attributes = node.attributes;\n      const activationAttributes = parseInternalActivationAttributes(attributes);\n      // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n      const autoPad = attributes.getString('auto_pad', 'NOTSET');\n      const dilations = attributes.getInts('dilations', [1, 1]);\n      const group = attributes.getInt('group', 1);\n      const kernelShape = attributes.getInts('kernel_shape', []);\n      const outputPadding = attributes.getInts('output_padding', [0, 0]);\n      const outputShape = attributes.getInts('output_shape', []);\n      const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n      const strides = attributes.getInts('strides', [1, 1]);\n\n      return createAttributeWithCacheKey(\n          {autoPad, dilations, group, kernelShape, outputPadding, outputShape, pads, strides, ...activationAttributes});\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvTransposeAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[0];\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  const featureMaps = inputs[1].dims[1] * attributes.group;\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[2].dims[0] !== featureMaps)) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // Wrong output padding dimension\n  if (attributes.outputPadding.length !== spatialRank) {\n    throw new Error(`output_padding should be ${spatialRank}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // as with kernelShape, must have same number of spatial dims as input\n  if (attributes.outputShape.length !== 0 && attributes.outputShape.length !== inputs[0].dims.length - 2) {\n    throw new Error('invalid output shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('ConvTranspose input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('ConvTranspose input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {createUnpackedGroupedConvProgramInfoLoader} from './conv-grouped';\nimport {conv2DPacked} from './conv-pack';\nimport {createDotProductProgramInfoLoader} from './dot-product';\nimport {InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createIm2ColProgramInfoLoader} from './im2col';\nimport {createMatmulProgramInfoLoader} from './matmul';\n\n\nexport const calculateOutputShape =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[],\n     adjustPads: readonly number[], strides: readonly number[]): number[] => {\n      const batchSize = inputShape[0];\n      const inputSpatialShape = inputShape.slice(2);\n      const spatialRank = inputSpatialShape.length;\n      const outChannels = kernelShape[0];\n      const kernelSpatialShape = kernelShape.slice(2);\n      const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\n      const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\n      const outputSpatialShape =\n          inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\n      const outputShape = [batchSize, outChannels].concat(...outputSpatialShape);\n      return outputShape;\n    };\n\nexport interface ConvAttributes extends InternalActivationAttributes, AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly dilations: readonly number[];\n  readonly group: number;\n  readonly kernelShape: readonly number[];\n  readonly pads: readonly number[];\n  readonly strides: readonly number[];\n}\n\nexport const conv: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not conv2D\n      return conv2d(inferenceHandler, inputs, attributes);\n    };\n\nconst conv2d: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvAttributes(attributes, inputs);\n      const packMode = inferenceHandler.session.pack;\n      const isPointwise = adjustedAttributes.kernelShape[0] === 1 && adjustedAttributes.kernelShape[1] === 1;\n      if (adjustedAttributes.group > 1) {\n        const result = inferenceHandler.run(\n            createUnpackedGroupedConvProgramInfoLoader(inferenceHandler, inputs, adjustedAttributes), inputs);\n        return [result];\n      } else if (isPointwise && packMode) {\n        return [conv2DUnpackedPointwise(inferenceHandler, inputs, adjustedAttributes)];\n      } else if (packMode && inputs[0].dims.length === 4 && inputs[0].dims[0] === 1 && !isPointwise) {\n        return [conv2DPacked(inferenceHandler, inputs, adjustedAttributes)];\n      } else {\n        return [conv2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n      }\n    };\n\nconst conv2DUnpackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapeUnpacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapeUnpacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(createMatmulProgramInfoLoader(matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapeUnpacked(matmulOutput, outputShape);\n    };\n\nconst conv2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const xIm2Col = inferenceHandler.run(\n          createIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes), [inputs[0]]);\n\n      const dotProductInputs = inputs.length === 3 ? [xIm2Col, inputs[1], inputs[2]] : [xIm2Col, inputs[1]];\n      const output = inferenceHandler.run(\n          createDotProductProgramInfoLoader(inferenceHandler, inputs, outputShape, attributes), dotProductInputs);\n      return output;\n    };\n\nconst getAdjustedConvAttributes = <T extends ConvAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPadsBasedOnAutoPad(\n      inputs[0].dims, attributes.strides, attributes.dilations, kernelShape, pads, attributes.autoPad);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvAttributes: OperatorInitialization<ConvAttributes> = (node: Graph.Node): ConvAttributes => {\n  const attributes = node.attributes;\n  const activationAttributes = parseInternalActivationAttributes(attributes);\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n  const autoPad = attributes.getString('auto_pad', 'NOTSET');\n  const dilations = attributes.getInts('dilations', [1, 1]);\n  const group = attributes.getInt('group', 1);\n  const kernelShape = attributes.getInts('kernel_shape', []);\n  const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n  const strides = attributes.getInts('strides', [1, 1]);\n\n  return createAttributeWithCacheKey({autoPad, dilations, group, kernelShape, pads, strides, ...activationAttributes});\n};\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[1] * attributes.group;\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('Conv input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('Conv input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface DepthToSpaceAttributes {\n  mode: 'DCR'|'CRD';\n  blocksize: number;\n}\n\nexport const depthToSpace: OperatorImplementation<DepthToSpaceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: DepthToSpaceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const blocksize = attributes.blocksize;\n      const blocksizeSqr = blocksize * blocksize;\n      const transposePerm = attributes.mode === 'DCR' ? [0, 3, 4, 1, 5, 2] : [0, 1, 4, 2, 5, 3];\n      const firstReshapeShape = attributes.mode === 'DCR' ?\n          [\n            inputs[0].dims[0], blocksize, blocksize, inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ] :\n          [\n            inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, blocksize, blocksize, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ];\n\n      // const transpose = new WebGLTranspose();\n      // const attributes = new Attribute(undefined);\n      // attributes.set('perm', 'ints', transposePerm);\n      // transpose.initialize(attributes);\n\n      // First reshape\n      const firstReshapedTensor = inferenceHandler.reshapeUnpacked(inputs[0], firstReshapeShape);\n\n      // transpose\n      const transposeAttributes: TransposeAttributes = {perm: transposePerm, cacheKey: `${transposePerm}`};\n      const [transposeOutput] = transpose(inferenceHandler, [firstReshapedTensor], transposeAttributes);\n\n      // Second reshape\n      const secondReshapeShape = [\n        inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2] * blocksize,\n        inputs[0].dims[3] * blocksize\n      ];\n      const result = inferenceHandler.reshapeUnpacked(transposeOutput, secondReshapeShape);\n      return [result];\n    };\n\nexport const parseDepthToSpaceAttributes: OperatorInitialization<DepthToSpaceAttributes> =\n    (node: Graph.Node): DepthToSpaceAttributes => {\n      // processing node attributes\n      const blocksize = node.attributes.getInt('blocksize');\n      if (blocksize < 1) {\n        throw new Error(`blocksize must be >= 1, but got : ${blocksize} for DepthToSpace`);\n      }\n      const mode = node.attributes.getString('mode', 'DCR');\n      if (mode !== 'DCR' && mode !== 'CRD') {\n        throw new Error(`unrecognized mode: ${mode} for DepthToSpace`);\n      }\n      return {mode, blocksize};\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (inputs.length !== 1) {\n    throw new Error(`DepthToSpace expect 1 inputs, but got ${inputs.length}`);\n  }\n\n  // Input has to be a 4-D tensor\n  // TODO: Support string depth-to-space.\n  if (inputs[0].type === 'string' || inputs[0].dims.length !== 4) {\n    throw new TypeError('DepthToSpace input should be a 4-D numeric tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {calculateIm2ColDims} from './im2col';\n\nconst createDotProductProgramMetadata = (hasBias: boolean, attributes: InternalActivationAttributes) => ({\n  name: 'ConvDotProduct',\n  inputNames: hasBias ? ['Im2Col', 'K', 'B'] : ['Im2Col', 'K'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.packedLastDimension],\n  cacheKey: attributes.activationCacheKey\n});\n\nconst createDotProductProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: readonly Tensor[],\n     outputShape: number[], attributes: InternalActivationAttributes): ProgramInfo => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const adjustedKernelShape = [kshape[0], Math.ceil((xshape[1] * kshape[2] * kshape[3]) / 4)];\n      const im2colShape = calculateIm2ColDims(xshape, kshape, outputShape);\n      const [kWidth, kHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(adjustedKernelShape, TextureType.packedLastDimension);\n\n      const im2colStrides = ShapeUtil.computeStrides(im2colShape);\n      const [im2colWidth, im2colHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(im2colShape, TextureType.packedLastDimension);\n      const rank = outputShape.length;\n\n      const initValue = (inputs.length < 3) ? '0.0' : '_B(b)';\n      const sharedDim = Math.ceil(xshape[1] * kshape[2] * kshape[3] / 4);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n${activationFunction}\nfloat process(int indices[${rank}]) {\n  int b[1];\n  b[0] = indices[1];\n  int im2col[4];\n  im2col[0] = indices[0];\n  im2col[1] = indices[2];\n  im2col[2] = indices[3];\n  int im2colOffset = im2col[0] * ${im2colStrides[0]} + im2col[1] * ${im2colStrides[1]} + im2col[2] * ${\n          im2colStrides[2]};\n  int kernelOffset = indices[1] * ${adjustedKernelShape[1]};\n  float value = ${initValue};\n  for (int i = 0; i < ${sharedDim}; ++i) {\n    vec2 im2colCoords = offsetToCoords(im2colOffset, ${im2colWidth}, ${im2colHeight});\n    vec2 kernelCoords = offsetToCoords(kernelOffset, ${kWidth}, ${kHeight});\n    value += dot(${glsl.texture2D}(Im2Col, im2colCoords), ${glsl.texture2D}(K, kernelCoords));\n    ++im2colOffset;\n    ++kernelOffset;\n  }\n  ${applyActivation}\n  return value;\n}`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nexport const createDotProductProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], outputShape: number[],\n     attributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createDotProductProgramMetadata(inputs.length > 2, attributes);\n      return {\n        ...metadata,\n        get: () => createDotProductProgramInfo(inferenceHandler, metadata, inputs, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const flatten: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number): Tensor[] => {\n      validateInputs(inputs, axis);\n\n      const outputDims = ShapeUtil.flattenShape(inputs[0].dims, axis);\n      return [inferenceHandler.reshapeUnpacked(inputs[0], outputDims)];\n    };\n\nexport const parseFlattenAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getInt('axis', 1);  // default axis is 1\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Flatten requires 1 input.');\n  }\n\n  const r = inputs[0].dims.length;\n  if (r === 0) {\n    throw new Error('scalar tensor is not supported.');\n  }\n\n  if (axis < -r || axis > r) {\n    throw new Error('Invalid axis');\n  }\n\n  // TODO: Support string type\n  if (inputs[0].type === 'string') {\n    throw new Error('string tensor is not supported.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../../../attribute';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {GlslValueFunction} from '../glsl-definitions';\n\nimport {glslClip, glslRelu, glslSigmoid} from './unary-op';\n\nexport interface InternalActivationAttributes {\n  readonly activation: string;\n  readonly clipMin?: number;\n  readonly clipMax?: number;\n  readonly activationCacheKey: string;\n}\n\nexport function getActivationSnippet(attributes: InternalActivationAttributes) {\n  let func: GlslValueFunction;\n  switch (attributes.activation) {\n    case 'Relu':\n      func = glslRelu();\n      break;\n    case 'Sigmoid':\n      func = glslSigmoid();\n      break;\n    case 'Clip':\n      func = glslClip(attributes.clipMin!, attributes.clipMax!);\n      break;\n    // TODO: adding other activations that can be fused.\n    default:\n      return {activationFunction: '', applyActivation: ''};\n  }\n\n  const activationName = func.name;\n  const activationFunction = func.body;\n  const applyActivation = `value = ${activationName}_(value);`;\n  return {activationFunction, applyActivation};\n}\n\nexport const parseInternalActivationAttributes = (attributes: Attribute): InternalActivationAttributes => {\n  const activation = attributes.getString('activation', '');\n\n  if (activation === 'Clip') {\n    const [clipMin, clipMax] = attributes.getFloats('activation_params', [MIN_CLIP, MAX_CLIP]);\n    return {activation, clipMax, clipMin, activationCacheKey: `${activation}:${clipMin},${clipMax}`};\n  }\n  return {activation, activationCacheKey: activation};\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\ninterface GatherAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const gather: OperatorImplementation<GatherAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): Tensor[] => {\n      validateInputs(inputs, attributes.axis);\n      const output = inferenceHandler.run(createGatherProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseGatherAttributes: OperatorInitialization<GatherAttributes> = (node: Graph.Node): GatherAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 0)});\n\nconst gatherProgramMetadata = {\n  name: 'Gather',\n  inputNames: ['A', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createGatherProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const indexDataShape = inputs[1].dims.slice();\n      const outputShape = new Array(inputShape.length + indexDataShape.length - 1);\n\n      axis = ShapeUtil.normalizeAxis(axis, inputShape.length);\n      const indexCopyOps: string[] = [];\n      for (let i = 0; i < outputShape.length; i++) {\n        // outputShape is divided into three parts: A, B, C\n        // |0        axis|  axis + indexDataShape.length |          end|\n        // |     A       |             B                 |      C      |\n        //\n        // inputIdx: [A, inputs[1][B], C]\n        if (i < axis) {  // A\n          outputShape[i] = inputShape[i];\n          indexCopyOps.push(`inputIdx[${i}] = outputIdx[${i}];`);\n        } else {\n          if (i < axis + indexDataShape.length) {  // B\n            outputShape[i] = indexDataShape[i - axis];\n            indexCopyOps.push(`indexDataIdx[${i - axis}] = outputIdx[${i}];`);\n          } else {                                                       // C\n            outputShape[i] = inputShape[i - indexDataShape.length + 1];  // skip 1 for axis\n            indexCopyOps.push(`inputIdx[${i - indexDataShape.length + 1}] = outputIdx[${i}];`);\n          }\n        }\n      }\n\n      const orank = outputShape.length || 1;\n      const irank = inputShape.length;\n      const iDrank = indexDataShape.length || 1;\n      const shaderSource = `\n      float process(int outputIdx[${orank}]) {\n        int inputIdx[${irank}];\n        int indexDataIdx[${iDrank}];\n        indexDataIdx[0] = 0;\n        ${indexCopyOps.join('\\n        ')}\n        int idx = int(_B(indexDataIdx));\n        inputIdx[${axis}] = idx < 0 ? idx + ${inputShape[axis]} : idx;\n        return _A(inputIdx);\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createGatherProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): ProgramInfoLoader => {\n      const metadata = {...gatherProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createGatherProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Gather requires 2 inputs.');\n  }\n  const tensorRank = inputs[0].dims.length;\n  if (tensorRank < 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (axis < -tensorRank || axis > tensorRank - 1) {\n    throw new Error('Invalid axis.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invaid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invaid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {GemmUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface GemmAttributes extends AttributeWithCacheKey {\n  transA: boolean;\n  transB: boolean;\n  alpha: number;\n  beta: number;\n  isOptionalC: boolean;  // in opset 11, C becomes optional\n}\n\nexport const gemm: OperatorImplementation<GemmAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GemmAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(createGemmProgramInfoLoader(inputs, attributes), inputs);\n      return [output];\n    };\n\nconst parseGemmAttributes = (node: Graph.Node, isOptionalC: boolean): GemmAttributes => {\n  const transA = node.attributes.getInt('transA', 0) !== 0;\n  const transB = node.attributes.getInt('transB', 0) !== 0;\n  const alpha = node.attributes.getFloat('alpha', 1.0);\n  const beta = node.attributes.getFloat('beta', 1.0);\n  return createAttributeWithCacheKey({transA, transB, alpha, beta, isOptionalC});\n};\n\nexport const parseGemmAttributesV7: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, false);\n\nexport const parseGemmAttributesV11: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, true);\n\nconst createGemmProgramInfoLoader = (inputs: Tensor[], attributes: GemmAttributes): ProgramInfoLoader => {\n  const metadata = {\n    name: 'Gemm',\n    inputNames: inputs.length === 3 ? ['A', 'B', 'C'] : ['A', 'B'],\n    inputTypes: inputs.length === 3 ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                                      [TextureType.unpacked, TextureType.unpacked],\n    key: attributes.cacheKey\n  };\n\n  return {...metadata, get: () => createGemmProgramInfo(metadata, inputs, attributes)};\n};\n\nconst createGemmProgramInfo =\n    (metadata: ProgramMetadata, inputs: Tensor[], attributes: GemmAttributes): ProgramInfo => {\n      const aShape = inputs[0].dims.slice();\n      const bShape = inputs[1].dims.slice();\n      const [M, N] = GemmUtil.getShapeOfGemmResult(\n          aShape, attributes.transA, bShape, attributes.transB, inputs.length === 3 ? inputs[2].dims : undefined);\n      const outputShape = [M, N];\n      if (!outputShape) {\n        throw new Error('Can\\'t use gemm on the given tensors');\n      }\n      let sharedDim = aShape[aShape.length - 1];\n      let line = '';\n      if (attributes.transA) {\n        sharedDim = aShape[0];\n      }\n      if (attributes.transA && attributes.transB) {\n        line = 'value += _A_T(a) * _B_T(b);';\n      } else if (attributes.transA && !attributes.transB) {\n        line = 'value += _A_T(a) * _B(b);';\n      } else if (!attributes.transA && attributes.transB) {\n        line = 'value += _A(a) * _B_T(b);';\n      } else if (!attributes.transA && !attributes.transB) {\n        line = 'value += _A(a) * _B(b);';\n      }\n      const rank = outputShape.length;\n      const declareC = inputs.length === 3 ? `int c[${inputs[2].dims.length}];` : '';\n      const broadcastC = inputs.length === 3 ? 'bcastIndices_C(indices, c);' : '';\n      const calculateC = inputs.length === 3 ? 'value += beta * _C(c);' : '';\n      const shaderSource = `\n      float process(int indices[${rank}]) {\n          int a[${rank}];\n          int b[${rank}];\n          ${declareC}\n\n          copyVec(indices, a);\n          copyVec(indices, b);\n          ${broadcastC}\n\n          float value = 0.0;\n          for (int k=0; k<${sharedDim}; ++k) {\n              a[${rank - 1}] = k;\n              b[${rank - 2}] = k;\n              ${line}\n          }\n\n          value = value * alpha;\n          ${calculateC}\n          return value;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        variables: [\n          {name: 'alpha', type: 'float', data: attributes.alpha}, {name: 'beta', type: 'float', data: attributes.beta}\n        ],\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: GemmAttributes): void => {\n  if (!inputs) {\n    throw new Error('Input is missing');\n  }\n  if (attributes.isOptionalC && (inputs.length < 2 || inputs.length > 3)) {\n    throw new Error('Invaid input shape.');\n  }\n  if (!attributes.isOptionalC && inputs.length !== 3) {\n    throw new Error('Gemm requires 3 inputs');\n  }\n\n  // 'C' can be of dimensionality 1 or 2 only\n  if (inputs.length === 3 && inputs[2].dims.length !== 1 && inputs[2].dims.length !== 2) {\n    throw new Error('Invalid input shape of C');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') ||\n      (inputs.length === 3 && inputs[2].type !== 'float32' && inputs[2].type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n\n  if ((inputs[0].type !== inputs[1].type) || (inputs.length === 3 && inputs[0].type !== inputs[2].type)) {\n    throw new Error('Input types are mismatched');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col (packed)',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed],\n  cacheHint,\n});\n\nconst createPackedIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n      const rowDim = 2;\n      const colDim = 3;\n      const rank = outputShape.length;\n      const im2colShape = [wshape[1] * wshape[2] * wshape[3], outputShape[2] * outputShape[3]];\n      const kernelSize = wshape[2] * wshape[3];\n      const unpackChannel = unpackFromChannel();\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      let unrolled = '';\n\n      for (let row = 0; row <= 1; row++) {\n        for (let col = 0; col <= 1; col++) {\n          unrolled += `\n            blockIndex = rc.x + ${col};\n            pos = rc.y + ${row};\n\n            if(blockIndex < ${im2colShape[1]} && pos < ${im2colShape[0]}) {\n              offsetY = int(blockIndex / (${outputShape[rank - 1]})) * ${attributes.strides[0]} -\n                ${attributes.pads[0]};\n              d0 = offsetY + ${attributes.dilations[0]} * (imod(pos, ${kernelSize}) / ${wshape[2]});\n\n              if(d0 < ${xshape[rowDim]} && d0 >= 0) {\n                offsetX = imod(blockIndex, ${outputShape[rank - 1]}) * ${attributes.strides[1]} -\n                  ${attributes.pads[1]};\n                d1 = offsetX + ${attributes.dilations[1]} * imod(imod(pos, ${kernelSize}), ${wshape[2]});\n\n                if(d1 < ${xshape[colDim]} && d1 >= 0) {\n\n                  ch = int(float(pos)/ ${kernelSize}.);\n                    innerDims = vec2(d0, d1);\n                    result[${row * 2 + col}] = getChannel(\n                      getA(0, ch, int(innerDims.x),\n                      int(innerDims.y)), innerDims);\n                }\n              }\n            }\n\n          `;\n        }\n      }\n\n      const shaderSource = `\n      ${unpackChannel}\n\n      void main() {\n        ivec2 rc = getOutputCoords();\n          vec4 result = vec4(0.0);\n          int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n          vec2 innerDims;\n          ${unrolled}\n          ${glsl.output} = result;\n      }\n            `;\n      return {\n        ...metadata,\n        output: {dims: im2colShape, type: x.type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createPackedIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\n\nconst createIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n  cacheHint,\n});\n\nconst createIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n\n      const rank = outputShape.length;\n      const im2colDims = calculateIm2ColDims(xshape, wshape, outputShape, 4);\n\n      const shaderSource = `\n        const int XC = ${xshape[1]};\n        const int XH = ${xshape[2]};\n        const int XW = ${xshape[3]};\n        const int KH = ${attributes.kernelShape[0]};\n        const int KW = ${attributes.kernelShape[1]};\n        const int dilationH = ${attributes.dilations[0]};\n        const int dilationW = ${attributes.dilations[1]};\n        const int strideH = ${attributes.strides[0]};\n        const int strideW = ${attributes.strides[1]};\n        const int padH = ${attributes.pads[0]};\n        const int padW = ${attributes.pads[1]};\n        const int KHKW = KH*KW;\n        const int XCKHKW = XC * KHKW;\n        const int outputChannels = 4;\n        vec4 process(int indices[${rank}]) {\n          int b  = indices[0]; // batch size\n          int oh = indices[1] * strideH - padH; //output height\n          int ow = indices[2] * strideW - padW; //output width\n          int p = indices[3] * outputChannels; //patch\n          vec4 value = vec4(0.0);\n          for(int i=0; i < outputChannels; ++i) {\n            if(p < XCKHKW) {\n              int patchC = p / KHKW;\n              int patchH = (p - patchC*KHKW) / KW;\n              int patchW = (p - patchC*KHKW) - patchH * KW;\n              int xh2 = oh + patchH * dilationH;\n              int xw2 = ow + patchW * dilationW;\n              int x[${xshape.length}];\n              x[0] = b;\n              x[1] = patchC;\n              x[2] = xh2;\n              x[3] = xw2;\n              if(xh2 >= 0 &&\n                  xh2 < XH &&\n                  xw2 >= 0 &&\n                  xw2 < XW) {\n                value[i] = _X(x);\n              }\n            }\n            ++p;\n          }\n          return value;\n        }\n        `;\n      return {\n        ...metadata,\n        output: {dims: im2colDims, type: x.type, textureType: TextureType.packedLastDimension},\n        shaderSource\n      };\n    };\n\nexport const createIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n\n\nexport const calculateIm2ColDims =\n    (inputShape: readonly number[], kernelShape: readonly number[], outputShape: readonly number[], channels = 4):\n        number[] =>\n            [outputShape[0], outputShape[2], outputShape[3],\n             Math.ceil(inputShape[1] * kernelShape[2] * kernelShape[3] / channels)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface ImageScalerAttributes extends AttributeWithCacheKey {\n  scale: number;\n  bias: number[];\n}\n\nexport const imageScaler: OperatorImplementation<ImageScalerAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output =\n          inferenceHandler.run(createImageScalerProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseImageScalerAttributes: OperatorInitialization<ImageScalerAttributes> =\n    (node: Graph.Node): ImageScalerAttributes => {\n      const scale = node.attributes.getFloat('scale');\n      const bias = node.attributes.getFloats('bias');\n      return createAttributeWithCacheKey({scale, bias});\n    };\n\nconst imageScalerProgramMetadata = {\n  name: 'ImageScaler',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createImageScalerProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], attributes: ImageScalerAttributes):\n        ProgramInfo => {\n          const outputShape = inputs[0].dims.slice();\n          const rank = outputShape.length;\n          const getBiasMethod = createGetBiasMethod(attributes.bias.length);\n          const shaderSource = `\n      ${getBiasMethod}\n      float process(int indices[${rank}]) {\n        return _X(indices) * scale + getBias(bias, indices[1]);\n      }`;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            variables: [\n              {name: 'bias', type: 'float', arrayLength: attributes.bias.length, data: attributes.bias},\n              {name: 'scale', type: 'float', data: attributes.scale}\n            ],\n            shaderSource\n          };\n        };\n\nconst createImageScalerProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): ProgramInfoLoader => {\n      const metadata = {...imageScalerProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createImageScalerProgramInfo(handler, metadata, inputs, attributes)};\n    };\n\nconst createGetBiasMethod = (numChannels: number): string => {\n  const codeLines: string[] = [`float getBias(float bias[${numChannels}], int channel) {`];\n  for (let i = 0; i < numChannels; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (channel == ${i}) { return bias[${i}]; }`);\n    } else if (i === numChannels - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return bias[${i}]; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (channel == ${i}) { return bias[${i}]; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('ImageScaler requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Invalid input shape.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport const instanceNormalization: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], epsilon: number): Tensor[] => {\n      validateInputs(inputs);\n\n      const meanAndVariance = inferenceHandler.run(createMeanAndVarianceProgramInfoLoader(inputs[0]), inputs);\n      const output = inferenceHandler.run(\n          createComputeOutputProgramInfoLoader(inferenceHandler, inputs[0], epsilon, meanAndVariance.dims),\n          [inputs[0], meanAndVariance, inputs[1], inputs[2]]);\n      return [output];\n    };\n\nexport const parseInstanceNormalizationAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getFloat('epsilon', 1e-5);\n\nconst meanAndVarianceProgramMetadata = {\n  name: 'InstanceNormalization_MeanAndVariance',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createMeanAndVarianceProgramInfo = (metadata: ProgramMetadata, input: Tensor): ProgramInfo => {\n  const xDims = input.dims.slice();\n  const channel = xDims[1];\n  const channelSize = xDims[2] * xDims[3];\n  const outputShape = [xDims[0], channel];\n\n  const shaderSource = `\n      vec4 process(int[2] indices) {\n        vec4 v = vec4(0.0);\n        int a[4];\n        a[0] = indices[0];\n        a[1] = indices[1];\n        float temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += x;\n          }\n        }\n        float mean = temp / float(${channelSize});\n        temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += (x - mean) * (x - mean);\n          }\n        }\n        v.r = mean;\n        v.g = temp / float(${channelSize});\n\n        return v;\n      }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: input.type, textureType: TextureType.packedLastDimension},\n    shaderSource\n  };\n};\n\nconst createMeanAndVarianceProgramInfoLoader = (input: Tensor): ProgramInfoLoader => ({\n  ...meanAndVarianceProgramMetadata,\n  get: () => createMeanAndVarianceProgramInfo(meanAndVarianceProgramMetadata, input)\n});\n\nconst computeOutputProgramMetadata = {\n  name: 'InstanceNormalization_ComputeOutput',\n  inputNames: ['X', 'MeanAndVariance', 'Scale', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createComputeOutputProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, epsilon: number,\n     meanAndVarianceShape: readonly number[]): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(meanAndVarianceShape, TextureType.packedLastDimension);\n      const [meanAndVarianceWidth, meanAndVarianceHeight] = [textureWidth / 4, textureHeight];\n      const shaderSource = `\n      vec4 get_MeanAndVariance(int[2] mv) {\n        int offset = indicesToOffset_MeanAndVariance(mv);\n        vec2 coords = offsetToCoords(offset, ${meanAndVarianceWidth}, ${meanAndVarianceHeight});\n        return ${glsl.texture2D}(MeanAndVariance, coords);\n      }\n\n      float process(int[4] indices) {\n        int mv[2];\n        mv[0] = indices[0];\n        mv[1] = indices[1];\n        vec4 mean_and_variance = get_MeanAndVariance(mv);\n        float mean = mean_and_variance.r;\n        float variance = mean_and_variance.g;\n\n        int sb[1];\n        sb[0] = indices[1];\n        float scale = _Scale(sb);\n        float b = _B(sb);\n\n        return scale * (_X(indices) - mean) / sqrt(variance + epsilon) + b;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        variables: [{name: 'epsilon', type: 'float', data: epsilon}],\n        shaderSource\n      };\n    };\n\nconst createComputeOutputProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, epsilon: number, meanAndVarianceShape: readonly number[]):\n        ProgramInfoLoader => {\n          const metadata = {...computeOutputProgramMetadata, cacheHint: `${epsilon}`};\n          return {\n            ...metadata,\n            get: () => createComputeOutputProgramInfo(inferenceHandler, metadata, input, epsilon, meanAndVarianceShape)\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 3) {\n    throw new Error('InstanceNormalization requires 3 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n\n  // input should at least have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1]) {\n    throw new Error('Input shapes are mismatched.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Only support 4-D input shape.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\n\nexport interface LrnAttributes extends AttributeWithCacheKey {\n  alpha: number;\n  beta: number;\n  bias: number;\n  size: number;\n}\n\nexport const lrn: OperatorImplementation<LrnAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: LrnAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      // if (inferenceHandler.session.pack) {\n      //   return [inferenceHandler.run(createPackedLrnProgramInfoLoader(inferenceHandler, inputs, attributes),\n      //   inputs)];\n      // } else {\n      return [inferenceHandler.run(createLrnProgramInfoLoader(inputs, attributes), inputs)];\n      //}\n    };\n\nexport const parseLrnAttributes: OperatorInitialization<LrnAttributes> = (node: Graph.Node): LrnAttributes => {\n  const alpha = node.attributes.getFloat('alpha', 0.0001);\n  const beta = node.attributes.getFloat('beta', 0.75);\n  const bias = node.attributes.getFloat('bias', 1.0);\n  const size = node.attributes.getInt('size');\n\n  return createAttributeWithCacheKey({alpha, beta, bias, size});\n};\n\nconst lrnProgramMetadata = {\n  name: 'LRN',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked]\n};\n\nfunction createLrnProgramInfo(inputs: Tensor[], attributes: LrnAttributes): ProgramInfo {\n  const C = inputs[0].dims[1];\n  const rank = inputs[0].dims.length;\n  const from = -Math.floor((attributes.size - 1) / 2);\n  const to = Math.ceil((attributes.size - 1) / 2);\n  const alpha = `float(${attributes.alpha}) / float(${attributes.size})`;\n  const bias = `float(${attributes.bias})`;\n  const beta = `float(${attributes.beta})`;\n\n  const shaderSource = `\n    float process(int indices[${rank}]) {\n        int c = indices[1];\n        float x = _X(indices);\n        float square_sum = 0.0;\n\n        for (int i = ${from}; i <= ${to}; i++) {\n          int idx = c + i;\n          if (c >= 0 && c < ${C}) {\n            indices[1] = idx;\n            float j = _X(indices);\n            square_sum += j * j;\n          }\n        }\n        return x / pow(${bias} + ${alpha} * square_sum, ${beta});\n    }`;\n  return {\n    ...lrnProgramMetadata,\n    cacheHint: attributes.cacheKey,\n    output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\n    shaderSource,\n  };\n}\n\nexport function createLrnProgramInfoLoader(inputs: Tensor[], attributes: LrnAttributes): ProgramInfoLoader {\n  return {...lrnProgramMetadata, cacheHint: attributes.cacheKey, get: () => createLrnProgramInfo(inputs, attributes)};\n}\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('LRN requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('currently only support LRN for input with \"NCHW\" format');\n  }\n  if (inputs[0].type !== 'float32') {\n    throw new Error('input should be float type');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {getBiasForMatmul} from './matmul';\n\nconst createPackedMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul (packed)',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.packed, TextureType.packed, TextureType.packed] :\n                        [TextureType.packed, TextureType.packed],\n  cacheHint\n});\n\nconst createPackedMatmulProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n      const aShape = inputs[0].dims;\n      const bShape = inputs[1].dims;\n      const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n\n      if (!outputShape) {\n        throw new Error('Can\\'t use matmul on the given tensors');\n      }\n      const sharedDim = aShape[aShape.length - 1];\n      const sharedDimIndex = Math.ceil(sharedDim / 2);\n      const aRank = aShape.length;\n      const bRank = bShape.length;\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const coordsDataType = getCoordsDataType(outputShape.length);\n      const outRank = outputShape.length;\n      const allGlChannels = getGlChannels();\n      const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\n\n      const getBiasForMatmulSnippet =\n          hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, true)}` : '';\n\n      const getBcastedSamplerForMatmulSnippet =\n          isBroadcast ? `${getBcastSamplerForMatmul(coordsDataType, allGlChannels, inputs, outputShape)}` : '';\n\n      const getSamplerAInLoopSnippet = isBroadcast ? 'getAAtOutCoordsMatmul(i)' : `getA(${getA(allGlChannels, aRank)})`;\n      const getSamplerBInLoopSnippet = isBroadcast ? 'getBAtOutCoordsMatmul(i)' : `getB(${getB(allGlChannels, bRank)})`;\n      const getOutputCoordsSnippet = isBroadcast ? '' : `${coordsDataType} rc =\n          getOutputCoords(); int lastDim = rc.${allGlChannels[outRank - 1]}; rc.${allGlChannels[outRank - 1]} =\n          rc.${allGlChannels[outRank - 2]}; rc.${allGlChannels[outRank - 2]} = lastDim;\n      `;\n      const shaderSource = `\n            ${getBcastedSamplerForMatmulSnippet}\n            ${getBiasForMatmulSnippet}\n            ${activationFunction}\n            void main() {\n              ${getOutputCoordsSnippet}\n\n              vec4 value = vec4(0);\n              for (int i = 0; i < ${sharedDimIndex}; i++) {\n                vec4 a = ${getSamplerAInLoopSnippet};\n                vec4 b = ${getSamplerBInLoopSnippet};\n\n                value += (a.rrbb * b.rgrg);\n                value += (a.ggaa * b.baba);\n              }\n              ${processBias}\n              ${applyActivation}\n              ${glsl.output} = value;\n            }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedMatmulProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createPackedMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedMatmulProgramInfo(inferenceHandler, metadata, inputs, activationAttributes)\n      };\n    };\n\nfunction getBcastSamplerForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inputs: Tensor[], outShape: readonly number[]): string {\n  let unpackedACoordsSnippet = [];\n  let unpackedBCoordsSnippet = [];\n\n  const inAShape = inputs[0].dims;\n  const inBShape = inputs[1].dims;\n\n  const inARank = inAShape.length;\n  const inBRank = inBShape.length;\n\n  const outRank = outShape.length;\n  const rankADiff = outRank - inARank;\n  const rankBDiff = outRank - inBRank;\n\n  unpackedACoordsSnippet = inAShape.map((s, i) => `coords.${allGlChannels[i + rankADiff]}`);\n  unpackedACoordsSnippet[inARank - 1] = 'i*2';\n  unpackedACoordsSnippet.join(', ');\n  unpackedBCoordsSnippet = inBShape.map((s, i) => `coords.${allGlChannels[i + rankBDiff]}`);\n  unpackedBCoordsSnippet[inBRank - 2] = 'i*2';\n  unpackedBCoordsSnippet.join(', ');\n\n  const broadcastADims = BroadcastUtil.getBroadcastDims(inAShape, outShape);\n  const broadcastBDims = BroadcastUtil.getBroadcastDims(inBShape, outShape);\n\n  const coordsASnippet = broadcastADims.map(d => `coords.${allGlChannels[d + rankADiff]} = 0;`).join('\\n');\n  const coordsBSnippet = broadcastBDims.map(d => `coords.${allGlChannels[d + rankBDiff]} = 0;`).join('\\n');\n  const swapDimSnippet = `int lastDim = coords.${allGlChannels[outRank - 1]};\n  coords.${allGlChannels[outRank - 1]} = coords.${allGlChannels[outRank - 2]};\n  coords.${allGlChannels[outRank - 2]} = lastDim;`;\n\n  const getBcastSamplerMatmulSource = `\nvec4 getAAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsASnippet}\n  vec4 outputValue = getA(${unpackedACoordsSnippet});\n  return outputValue;\n}\n\nvec4 getBAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsBSnippet}\n  vec4 outputValue = getB(${unpackedBCoordsSnippet});\n  return outputValue;\n}`;\n\n  return getBcastSamplerMatmulSource;\n}\n\nfunction getA(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += `rc.${allGlChannels[rank - 2]}, ` +\n      'i*2';\n  return res;\n}\n\nfunction getB(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += 'i*2, ' +\n      `rc.${allGlChannels[rank - 1]}`;\n  return res;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActivationSnippet, InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const matMul: OperatorImplementation<InternalActivationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: InternalActivationAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      if (inferenceHandler.session.pack) {\n        return [inferenceHandler.run(\n            createPackedMatmulProgramInfoLoader(inferenceHandler, inputs, attributes), inputs)];\n      } else {\n        return [inferenceHandler.run(createMatmulProgramInfoLoader(inputs, attributes), inputs)];\n      }\n    };\n\nexport const parseMatMulAttributes: OperatorInitialization<InternalActivationAttributes> =\n    (node: Graph.Node): InternalActivationAttributes => parseInternalActivationAttributes(node.attributes);\n\nconst createMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nfunction createMatmulProgramInfo(\n    metadata: ProgramMetadata, inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfo {\n  const aShape = inputs[0].dims;\n  const bShape = inputs[1].dims;\n  const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n  if (!outputShape) {\n    throw new Error('Can\\'t use matmul on the given tensors');\n  }\n  const coordsDataType = getCoordsDataType(outputShape.length);\n  const allGlChannels = getGlChannels();\n  const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\n\n  const hasBias = inputs.length > 2;\n  const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n  const getBiasForMatmulSnippet =\n      hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, false)}` : '';\n\n  const rank = outputShape.length;\n  const arank = aShape.length;\n  const brank = bShape.length;\n  const sharedDim = aShape[aShape.length - 1];\n  const shaderSource = `\n    ${activationFunction}\n    ${getBiasForMatmulSnippet}\n    float process(int indices[${rank}]) {\n        int a[${arank}];\n        int b[${brank}];\n        bcastMatmulIndices_A(indices, a);\n        bcastMatmulIndices_B(indices, b);\n\n        float value;\n        for (int k=0; k<${sharedDim}; ++k) {\n            a[${arank - 1}] = k;\n            b[${brank - 2}] = k;\n            value += _A(a) * _B(b);\n        }\n        ${processBias}\n        ${applyActivation}\n        return value;\n    }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n    shaderSource,\n  };\n}\n\nexport function createMatmulProgramInfoLoader(\n    inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfoLoader {\n  const metadata = createMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n  return {...metadata, get: () => createMatmulProgramInfo(metadata, inputs, activationAttributes)};\n}\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('MatMul requires 2 inputs.');\n  }\n\n  if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\n    throw new Error('shared dimension does not match.');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64')) {\n    throw new Error('inputs should be float type');\n  }\n\n  if (inputs[0].type !== inputs[1].type) {\n    throw new Error('inputs types should match');\n  }\n};\n\nexport function getBiasForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inShape: readonly number[], outShape: readonly number[],\n    isPacked: boolean): string {\n  let unpackedCoordsSnippet = '';\n  const inRank = inShape.length;\n  const outRank = outShape.length;\n  const rankDiff = outRank - inRank;\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inShape.map((s, i) => `coords.${allGlChannels[i + rankDiff]}`).join(', ');\n  }\n  const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n  const coordsSnippet = broadcastDims.map(d => `coords.${allGlChannels[d + rankDiff]} = 0;`).join('\\n');\n  const inSize = ShapeUtil.size(inShape);\n  const isInputScalar = inSize === 1;\n  let output = 'vec4(outputValue.xx, outputValue.yy)';\n  if (isInputScalar) {\n    output = 'vec4(outputValue.x)';\n  }\n  const getBiasForMatmulSource = isPacked ? `\nvec4 getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  vec4 outputValue = getBias(${unpackedCoordsSnippet});\n  return ${output};\n}` :\n                                            `\nfloat getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  return getBias(coords.x);\n}`;\n\n  return getBiasForMatmulSource;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels} from './packing-utils';\n\nconst packProgramMetadata = {\n  name: 'pack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpackedReversed]\n};\n\nconst createPackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const inputShape = input.dims;\n\n  const inputRank = inputShape.length;\n  // createTextureLayoutFromShape won't change output rank. Need to verify by running tests\n  const outputRank = input.dims.length;\n\n  const coordsDataType = getCoordsDataType(outputRank);\n  const channels = getChannels('rc', outputRank);\n  const setup = getSetup(outputRank, channels, inputShape[inputShape.length - 2], inputShape[inputShape.length - 1]);\n\n  let reversedInputWH;\n  if (inputRank === 0) {\n    reversedInputWH = [1, 1];\n  } else if (inputRank === 1) {\n    reversedInputWH = [inputShape[0], 1];\n  } else {\n    reversedInputWH = [inputShape[outputRank - 1], inputShape[outputRank - 2]];\n  }\n  const outOfBoundsCondition = getOutOfBoundsCondition(outputRank, reversedInputWH, channels);\n  const output = getOutput(inputShape, channels);\n\n  const shaderSource = `\n        void main() {\n          ${coordsDataType} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            ${glsl.output} = vec4(0);\n          } else {\n            ${setup}\n\n            ${glsl.output} = vec4(${output});\n          }\n        }\n      `;\n  return {\n    ...packProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.packed},\n    shaderSource\n  };\n};\n\nexport const createPackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...packProgramMetadata, get: () => createPackProgramInfo(handler, input)});\n\n/**\n * check output coordinate location and return false if it is outside input's width/height boundary\n */\nfunction getOutOfBoundsCondition(rank: number, shape: readonly number[], dims: string[]): string {\n  if (rank === 0) {\n    return 'false';\n  }\n  if (rank === 1) {\n    return `rc > ${shape[0]}`;\n  }\n\n  let cond = '';\n  for (let i = rank - 2; i < rank; i++) {\n    cond += `${dims[i]} >= ${shape[i - rank + 2]}`;\n    if (i < rank - 1) {\n      cond += '||';\n    }\n  }\n\n  return cond;\n}\n\n/**\n * code snippet to sample input texture with output coordiantes\n */\nfunction getOutput(shape: readonly number[], dims: string[]): string {\n  const rank = shape.length;\n\n  if (rank === 0) {\n    return 'getA(), 0, 0, 0';\n  }\n\n  if (rank === 1) {\n    return `getA(rc),\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\n            0, 0`;\n  }\n\n  const coord00 = 'r, c';\n  const coord01 = 'r, cp1';\n  const coord10 = 'rp1, c';\n  const coord11 = 'rp1, cp1';\n  let D = '';\n  if (rank > 2) {\n    for (let i = 0; i < rank - 2; ++i) {\n      D = D + `${dims[i]},`;\n    }\n  }\n  return `getA(${D}${coord00}),\n          rEdge ? 0. : getA(${D}${coord10}),\n          cEdge ? 0. : getA(${D}${coord01}),\n          rEdge || cEdge ? 0. : getA(${D}${coord11})`;\n}\n\n/**\n * code snippet to setup 4 coordinates and edge conditions\n */\nfunction getSetup(rank: number, dims: string[], rows: number, cols: number): string {\n  if (rank === 0 || rank === 1) {\n    return '';\n  }\n  // rank >= 2 for width+height pack.\n  else {\n    const setup = `\n    int r = ${dims[rank - 2]};\n    int c = ${dims[rank - 1]};\n    int rp1 = ${dims[rank - 2]} + 1;\n    int cp1 = ${dims[rank - 1]} + 1;\n    bool rEdge = rp1 >= ${cols};\n    bool cEdge = cp1 >= ${rows};\n    `;\n    return setup;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlChannels} from '../utils';\n\nexport function getVecChannels(name: string, rank: number): string[] {\n  return getGlChannels(rank).map(d => `${name}.${d}`);\n}\n\nexport function getChannels(name: string, rank: number): string[] {\n  if (rank === 1) {\n    return [name];\n  }\n  return getVecChannels(name, rank);\n}\n\nexport function unpackFromChannel(): string {\n  return `\n    float getChannel(vec4 frag, int dim) {\n      int modCoord = imod(dim, 2);\n      return modCoord == 0 ? frag.r : frag.g;\n    }\n\n    float getChannel(vec4 frag, vec2 innerDims) {\n      vec2 modCoord = mod(innerDims, 2.);\n      return modCoord.x == 0. ?\n        (modCoord.y == 0. ? frag.r : frag.g) :\n        (modCoord.y == 0. ? frag.b : frag.a);\n    }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl, Glsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface PadAttributes extends AttributeWithCacheKey {\n  readonly mode: string;\n  readonly pads: number[];\n  readonly value: number;\n}\n\nconst padProgramMetadata = {\n  name: 'Pad',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const padV2: OperatorImplementation<PadAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: PadAttributes): Tensor[] => {\n      validateInputsV2(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...padProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPadProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parsePadAttributesV2: OperatorInitialization<PadAttributes> = (node: Graph.Node): PadAttributes => {\n  const mode = node.attributes.getString('mode', 'constant');\n  const value = node.attributes.getFloat('value', 0.0);\n  const pads = node.attributes.getInts('pads');\n  return createAttributeWithCacheKey({mode, value, pads});\n};\n\nexport const padV11: OperatorImplementation<string> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): Tensor[] => {\n      validateInputsV11(inputs);\n      const attrubutes = generatePadAttributesFromInputs(inferenceHandler, inputs, mode);\n      return padV2(inferenceHandler, [inputs[0]], attrubutes);\n    };\n\nexport const parsePadAttributesV11: OperatorInitialization<string> = (node: Graph.Node): string =>\n    node.attributes.getString('mode', 'constant');\n\nconst generatePadAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): PadAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          (inputs.length >= 3 && !inferenceHandler.session.isInitializer(inputs[2].dataId))) {\n        throw new Error('dynamic pad attributes are not allowed');\n      }\n\n      const pads = Array.from(inputs[1].integerData);\n      const value = (inputs.length >= 3) ? inputs[2].floatData[0] : 0.0;\n\n      return createAttributeWithCacheKey({mode, pads, value});\n    };\n\nconst createPadProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): ProgramInfo => {\n      const outputShape = ShapeUtil.padShape(input.dims.slice(), attributes.pads);\n      const rank = outputShape.length;\n      const padFunction = getPadFunction(inferenceHandler, input, attributes);\n      const shaderSource = `\n      ${padFunction}\n      float process(int[${rank}] indices) {\n          return padA(indices);\n      }`;\n      return {\n        name: 'Pad',\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputsV2 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pad requires 1 input');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst validateInputsV11 = (inputs: Tensor[]): void => {\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Pad requires 2 or 3 inputs');\n  }\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 3 && inputs[2].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst getPadFunction = (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): string => {\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  const [width, height] = inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n  const strides = ShapeUtil.computeStrides(input.dims);\n\n  switch (attributes.mode) {\n    case 'constant':\n      return getPadConstant(glsl, input.dims, strides, width, height, attributes.pads, attributes.value);\n    case 'reflect':\n      return getPadReflect(glsl, input.dims, strides, width, height, attributes.pads);\n    case 'edge':\n      return getPadEdge(glsl, input.dims, strides, width, height, attributes.pads);\n    default:\n      throw new Error('Invalid mode');\n  }\n};\n\nconst getPadConstant =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[],\n     value: number): string => {\n      const rank = shape.length;\n      let block = '';\n      for (let i = rank - 1; i >= 0; --i) {\n        block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  return constant;\n        if (k >= ${shape[i]}) return constant;\n        offset += k * ${strides[i]};\n        `;\n      }\n      return `\n      float padA(int m[${rank}]) {\n        const float constant = float(${value});\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n    };\n\nconst getPadReflect =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0) { k = -k; }\n        {\n          const int _2n_1 = ${2 * (shape[i] - 1)};\n          k = int( mod( float(k), float(_2n_1) ) ) ;\n          if(k >= ${shape[i]}) { k = _2n_1 - k; }\n        }\n        offset += k * ${strides[i]};\n        `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n\nconst getPadEdge =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  k = 0;\n        if (k >= ${shape[i]}) k = ${shape[i] - 1};\n        offset += k * ${strides[i]};\n      `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface AveragePoolAttributes extends AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly ceilMode: number;\n  readonly countIncludePad: boolean;\n  readonly kernelShape: readonly number[];\n  readonly strides: readonly number[];\n  readonly pads: readonly number[];\n}\n\nexport const averagePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'AveragePool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n\n      // TODO: support attribute 'ceil_mode'\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\n      }\n\n      return createAttributeWithCacheKey({autoPad, ceilMode, countIncludePad, kernelShape, strides, pads});\n    };\n\nconst createAveragePoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: AveragePoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const kernelSize = ShapeUtil.size(adjustedAttributes.kernelShape);\n          const op1 = 'value += _X(x);';\n          let op2 = '';\n          if (adjustedAttributes.countIncludePad) {\n            op2 += `value /= float(${kernelSize});`;\n          } else {\n            op2 += `value /= float(${kernelSize} - pad);`;\n          }\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '0.0');\n          const shaderSource = `\n        ${poolingCode}\n      `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nexport const globalAveragePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata = {\n        name: 'GlobalAveragePool',\n        inputNames: ['X'],\n        inputTypes: [TextureType.unpacked],\n        cacheHint: `${attributes.countIncludePad}`\n      };\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, true, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseGlobalAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      return createAttributeWithCacheKey(\n          {autoPad: '', ceilMode: 0, countIncludePad, kernelShape: [], strides: [], pads: []});\n    };\n\nexport interface MaxPoolAttributes extends AveragePoolAttributes {\n  readonly storageOrder: number;\n  readonly dilations: number[];\n}\n\nexport const maxPool: OperatorImplementation<MaxPoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: MaxPoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'MaxPool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createMaxPoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseMaxPoolAttributes: OperatorInitialization<MaxPoolAttributes> =\n    (node: Graph.Node): MaxPoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n      const storageOrder = node.attributes.getInt('storage_order', 0);\n      const dilations = node.attributes.getInts('dilations', []);\n\n      // TODO: support attribute 'ceil_mode' and 'storage_order'\n      if (storageOrder !== 0) {\n        throw new Error('column major storage order is not yet supported for MaxPool');\n      }\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\n      }\n\n      return createAttributeWithCacheKey(\n          {autoPad, ceilMode, countIncludePad: false, kernelShape, strides, pads, storageOrder, dilations});\n    };\n\nconst createMaxPoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: MaxPoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const op1 = `\n      value = max(_X(x), value);\n    `;\n          const op2 = '';\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '-1e5');\n          const shaderSource = `\n      ${poolingCode}\n    `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst getAdjustedPoolAttributesAndOutputShape =\n    (inputs: Tensor[], attributes: AveragePoolAttributes|MaxPoolAttributes, isGlobalOperator: boolean):\n        [AveragePoolAttributes|MaxPoolAttributes, number[]] => {\n          const inputShape = inputs[0].dims.slice();\n          const hasDilations = Object.hasOwnProperty.call(attributes, 'dilations');\n          const kernelShape = attributes.kernelShape.slice();\n          const strides = attributes.strides.slice();\n          const dilations: number[] = hasDilations ? (attributes as MaxPoolAttributes).dilations.slice() : [];\n          const pads = attributes.pads.slice();\n          PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, dilations, pads);\n\n          const outputShape = PoolConvUtil.computePoolOutputShape(\n              isGlobalOperator, inputShape, strides, dilations, kernelShape, pads, attributes.autoPad);\n\n          const newAttributes = Object.assign({}, attributes);\n          if (hasDilations) {\n            Object.assign(newAttributes, {kernelShape, strides, pads, dilations, cacheKey: attributes.cacheKey});\n          } else {\n            Object.assign(newAttributes, {kernelShape, strides, pads, cacheKey: attributes.cacheKey});\n          }\n          return [newAttributes, outputShape];\n        };\n\nconst globalMaxPoolAttributes = {\n  autoPad: '',\n  ceilMode: 0,\n  countIncludePad: false,\n  kernelShape: [],\n  strides: [],\n  pads: [],\n  storageOrder: 0,\n  dilations: [],\n  cacheKey: ''\n};\n\nconst globalMaxPoolMetadata = {\n  name: 'GlobalMaxPool',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const globalMaxPool = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  const output = inferenceHandler.run(\n      {\n        ...globalMaxPoolMetadata,\n        get: () => createMaxPoolProgramInfo(inputs, globalMaxPoolMetadata, true, globalMaxPoolAttributes)\n      },\n      inputs);\n  return [output];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pool ops requires 1 input.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst generatePoolingCode =\n    (inputDims: readonly number[], attributes: AveragePoolAttributes, op1: string, op2: string, start: string):\n        string => {\n          const rank = inputDims.length;\n          if (attributes.kernelShape.length <= 2) {\n            const kw = attributes.kernelShape[attributes.kernelShape.length - 1];\n            const sw = attributes.strides[attributes.strides.length - 1];\n            const pwStart = attributes.pads[attributes.pads.length / 2 - 1];\n            const pwEnd = attributes.pads[attributes.pads.length - 1];\n            const dimW = inputDims[rank - 1];\n            let codeW = '';\n            let codeH = '';\n            let codeHEnd = '';\n            if (pwStart + pwEnd !== 0) {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            if (x[${rank} - 1] < 0 || x[${rank} - 1] >= ${dimW}) {\n              pad++;\n              continue;\n            }\n            ${op1}\n          }`;\n            } else {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            ${op1}\n          }`;\n            }\n\n            if (attributes.kernelShape.length === 2) {\n              const kh = attributes.kernelShape[attributes.kernelShape.length - 2];\n              const sh = attributes.strides[attributes.strides.length - 2];\n              const phStart = attributes.pads[attributes.pads.length / 2 - 2];\n              const phEnd = attributes.pads[attributes.pads.length - 2];\n              const dimH = inputDims[rank - 2];\n              if (phStart + phEnd !== 0) {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n              if (x[${rank} - 2] < 0 || x[${rank} - 2] >= ${dimH}) {\n                pad+= ${kw};\n                continue;\n              }\n          `;\n              } else {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n            `;\n              }\n              codeHEnd = `\n          }\n        `;\n            }\n\n            const poolingCode = `\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n\n          float value = ${start};\n          int pad = 0;\n          ${codeH}\n          ${codeW}\n          ${codeHEnd}\n          ${op2}\n          return value;\n        }\n      `;\n            return poolingCode;\n          } else {\n            const kernelSize = ShapeUtil.size(attributes.kernelShape);\n            const kernelStrides = ShapeUtil.computeStrides(attributes.kernelShape);\n            const stridesRank = kernelStrides.length;\n            const padsRank = attributes.pads.length;\n            const offsetToIndicesFunction = offsetToIndices(stridesRank);\n            const copyInputDims = copyArray(inputDims, 'inputDims');\n            const copyPads = copyArray(attributes.pads, 'pads');\n            const copyKernelStrides = copyArray(kernelStrides, 'kernelStrides');\n            const copyStrides = copyArray(attributes.strides, 'strides');\n            const hasPads = attributes.pads.reduce((sum, cur) => sum + cur);\n            let padCode = '';\n            if (hasPads) {\n              padCode = `\n            if (x[j] >= inputDims[j] || x[j] < 0) {\n              pad++;\n              isPad = true;\n              break;\n            }\n          }\n          if (!isPad) {\n            ${op1}\n          }`;\n            } else {\n              padCode = `\n          }\n          ${op1}\n        `;\n            }\n            const poolingCode = `\n        ${offsetToIndicesFunction}\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n          int offset[${stridesRank}];\n          int pads[${padsRank}];\n          int inputDims[${rank}];\n          int kernelStrides[${stridesRank}];\n          int strides[${stridesRank}];\n          ${copyPads}\n          ${copyInputDims}\n          ${copyStrides}\n          ${copyKernelStrides}\n\n          float value = ${start};\n          int pad = 0;\n          bool isPad = false;\n          for (int i = 0; i < ${kernelSize}; i++) {\n            offsetToIndices(i, kernelStrides, offset);\n            isPad = false;\n            for (int j = ${rank} - ${stridesRank}; j < ${rank}; j++) {\n              x[j] = indices[j] * strides[j - ${rank} + ${stridesRank}]\n                + offset[j - ${rank} + ${stridesRank}] - pads[j - 2];\n              ${padCode}\n          }\n          ${op2}\n\n          return value;\n        }\n      `;\n            return poolingCode;\n          }\n        };\n\nconst copyArray = (array: readonly number[], arrayName: string): string => {\n  let block = '';\n  for (let i = 0; i < array.length; i++) {\n    block += `\n      ${arrayName}[${i}] = ${array[i]};\n    `;\n  }\n  return block;\n};\n\nconst offsetToIndices = (rank: number): string => `\n  void offsetToIndices(int offset, int[${rank}] strides, out int[${rank}] indices) {\n    if (${rank} == 0) {\n      return;\n    }\n    for (int i = 0; i < ${rank} - 1; ++i) {\n      indices[i] = offset / strides[i];\n      offset -= indices[i] * strides[i];\n    }\n    indices[${rank} - 1] = offset;\n  }`;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface ReduceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly keepDims: boolean;\n}\n\n// return [init ops, reduce ops, final ops]\ntype ReduceOp = (inputs: Tensor[], axes: number[]) => string[];\n\nconst reduce =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string,\n     reduceOp: ReduceOp): Tensor[] => {\n      validateInputs(inputs);\n\n      const reduceProgramMetadata = {\n        name,\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n      };\n\n      const output = inferenceHandler.run(\n          {\n            ...reduceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () =>\n                createReduceProgramInfo(inferenceHandler, inputs, attributes, name, reduceOp, reduceProgramMetadata)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseReduceAttributes: OperatorInitialization<ReduceAttributes> = (node: Graph.Node): ReduceAttributes => {\n  const axes = node.attributes.getInts('axes', []);\n  const keepDims = node.attributes.getInt('keepdims', 1) === 1;\n  return createAttributeWithCacheKey({axes, keepDims});\n};\n\nconst createReduceProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string, reduceOp: ReduceOp,\n     reduceProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const outputShape: number[] = [];\n      const iRank = inputs[0].dims.length || 1;\n\n      const idxCopy = [];  // copy output indexes to input indexes\n\n      const axes = ShapeUtil.normalizeAxes(attributes.axes, inputs[0].dims.length);\n      const ops = reduceOp(inputs, axes);\n      let reduceOps = ops[1];\n\n      for (let k = 0; k < inputs[0].dims.length; k++) {\n        // if this axis is reduced\n        if (axes.indexOf(k) >= 0 || axes.length === 0) {\n          if (attributes.keepDims) {\n            outputShape.push(1);\n          }  // else { remove the axis from outputShape; }\n\n          // loop over the d-th axis\n          reduceOps = `\n          for(int j${k} = 0; j${k} < ${inputs[0].dims[k]}; j${k}++) {\n            inputIdx[${k}] = j${k};\n            ${reduceOps}\n          }`;\n        } else {\n          idxCopy.push(`inputIdx[${k}] = outputIdx[${outputShape.length}];`);\n\n          outputShape.push(inputs[0].dims[k]);\n        }\n      }\n\n      const oRank = outputShape.length || 1;\n\n      const shaderSource = `\n      float process(int outputIdx[${oRank}]) {\n        float value;                 // final result\n        int inputIdx[${iRank}];      // addressing input data\n        ${idxCopy.join('\\n')}\n        ${ops[0]}       // init ops for reduce max/min\n        ${reduceOps}\n        ${ops[2]}       // final computation for reduce mean\n        return value;\n      }`;\n\n      return {\n        ...reduceProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  // TODO: support Reduce* operators with 2 inputs.\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Reduce op requires 1 input.');\n  }\n\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const reduceSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceSum', reduceOp);\n    };\n\nexport const reduceMean: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        let size = 1.0;\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            size *= inputs[0].dims[k];\n          }\n        }\n\n        return ['value = 0.0;', 'value += _A(inputIdx);', `value /= ${size}.;`];  // ensure real number with `.`\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMean', reduceOp);\n    };\n\nexport const reduceMax: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = max(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMax', reduceOp);\n    };\n\nexport const reduceMin: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = min(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMin', reduceOp);\n    };\n\nexport const reduceProd: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 1.0;', 'value *= _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceProd', reduceOp);\n    };\n\nexport const reduceLogSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', 'value = log(value);'];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSum', reduceOp);\n    };\n\nexport const reduceLogSumSquare: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['float t; value = 0.0;', 't = _A(inputIdx); value += t * t;', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSumSquare', reduceOp);\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedReshape3DProgramMetadata = (outputShape3D: readonly number[]) =>\n    ({name: 'Reshape (packed)', inputTypes: [TextureType.packed], inputNames: ['A'], cacheHint: `${outputShape3D}`});\n\nconst createPackedReshape3DProgramInfo =\n    (handler: WebGLInferenceHandler, input3D: Tensor, metadata: ProgramMetadata, outputShape3D: readonly number[]):\n        ProgramInfo => {\n          const inputShape3D = input3D.dims as [number, number, number];\n          const squeezedOutputShape = outputShape3D as [number, number, number];\n\n          let mainLoop = '';\n          for (let i = 0; i < 4; i++) {\n            let outputCoords = '';\n            switch (i) {\n              case 0:\n                outputCoords = 'outputCoords = rc;';\n                break;\n              case 1:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z);';\n                break;\n              case 2:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y, rc.z+1);';\n                break;\n              case 3:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z+1);';\n                break;\n              default:\n                throw new Error();\n            }\n\n            mainLoop += `\n        ${outputCoords}\n        ${i > 0 ? 'if(outputCoords.y < rows && outputCoords.z < cols){' : ''}\n          int flattenedIndex = getFlattenedIndex(outputCoords);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flattenedIndex);\n          vec2 innerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] = getChannel(getA(inputRC.x, inputRC.y, inputRC.z), innerDims);\n\n        ${i > 0 ? '}' : ''}\n      `;\n          }\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n\n          const shaderSource = `\n      ${getReshapedInputCoords(inputShape3D)}\n      ${getFlattenedIndexFrom3D(squeezedOutputShape)}\n      ${unpackFromChannel()}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.0);\n\n        ivec3 outputCoords;\n        int rows = ${squeezedOutputShape[2]};\n        int cols = ${squeezedOutputShape[1]};\n\n        ${mainLoop}\n        ${glsl.output} = result;\n      }\n    `;\n\n          return {\n            ...metadata,\n            output: {dims: squeezedOutputShape, type: input3D.type, textureType: TextureType.packed},\n            shaderSource,\n            hasMain: true\n          };\n        };\n\nexport const createPackedReshape3DProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input3D: Tensor, outputShape3D: readonly number[]): ProgramInfoLoader => {\n      const metadata = createPackedReshape3DProgramMetadata(outputShape3D);\n      return {...metadata, get: () => createPackedReshape3DProgramInfo(handler, input3D, metadata, outputShape3D)};\n    };\n\nexport function processDims3D(shape: ArrayLike<number>): [number, number, number] {\n  if (shape.length === 0) {\n    return [1, 1, 1];\n  }\n  // TODO: squeeze other shapes to 2D case\n  let batch = 1;\n  for (let i = 0; i < shape.length - 2; ++i) {\n    batch *= shape[i];\n  }\n  return [batch, shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\n\n// For packed reshape, we need to re-arrange texel data for output shape.\n// Our pack is designed to pack a 2x2 tile in last h and w dimension, so\n// for the reshaped new tensor, we just need to re-arrange the last h and\n// w dimension. For any shape that is not in 3D, i.e. [batch, W, H], we\n// first convert it to 3D by collapsing other dimension to batch dim, then\n// process with the last two dimensions.\n// Note: we only need the shape tensor to calculate output shape, so the\n// content in shape tensor is never uploaded to GPU. It is always kept in CPU.\n// TODO: optimize the algorithm -- in some cases, if the last two dims are\n// the same between input shape and output shape, the packed reshape can be\n// treated as no-op.\nexport function isReshapeCheap(dims: readonly number[], reshapedDims: readonly number[]) {\n  let isCheapReshape = false;\n  if (dims.length === 0 || reshapedDims.length === 0) {  // scalar\n    isCheapReshape = true;\n  } else if (dims.length < 2 || reshapedDims.length < 2) {  // 1D\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1];\n  } else {  // 2D +\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1] &&\n        dims[dims.length - 2] === reshapedDims[reshapedDims.length - 2];\n  }\n\n  return isCheapReshape;\n}\n\nfunction getReshapedInputCoords(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n  const coords = ['b', 'r', 'c'];\n  const index = 'index';\n  const coordsFromIndexSnippet = strides\n                                     .map((stride, i) => {\n                                       const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n                                       const line2 = i === strides.length - 1 ?\n                                           `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n                                           `index -= ${coords[i]} * ${stride}`;\n                                       return `${line1}; ${line2};`;\n                                     })\n                                     .join('');\n\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getFlattenedIndexFrom3D(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n\n  return `\n  int getFlattenedIndex(ivec3 coords) {\n    // reverse y, z order\n    return coords.x * ${strides[0]} + coords.z * ${strides[1]} + coords.y;\n  }\n`;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const reshape = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const reshapedDims = ShapeUtil.calculateReshapedDims(inputs[0].dims, inputs[1].integerData);\n  if (handler.session.pack) {\n    return [handler.reshapePacked(inputs[0], reshapedDims)];\n  } else {\n    return [handler.reshapeUnpacked(inputs[0], reshapedDims)];\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {unpackFromChannel} from './packing-utils';\nimport {parseUpsampleAttributes, scalesValidation, UpsampleAttributes, validateInputs} from './upsample';\n\nconst resizeProgramMetadata = {\n  name: 'Resize',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const resize: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...resizeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPackedResizeProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseResizeAttributesV10: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 10);\n\nexport const parseResizeAttributesV11: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 11);\n\nconst createPackedResizeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [scales, outputShape] = prepareInputs(inputs, attributes);\n\n      const isSame =\n          scales.every((s: number) => s === 1) && attributes.coordinateTransformMode !== 'tf_crop_and_resize';\n      if (isSame) {\n        return {\n          ...resizeProgramMetadata,\n          output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n          hasMain: true,\n          shaderSource: `void main() {\n                    vec4 v = ${glsl.texture2D}(X, TexCoords);\n                    ${glsl.output} = v;\n                }`\n        };\n      }\n\n      const dim = outputShape.length;\n      if (dim < 2) {\n        throw new Error(`output dimension should be at least 2, but got ${dim}`);\n      }\n\n      const outputHeight = outputShape[dim - 2];\n      const outputWidth = outputShape[dim - 1];\n\n      const inputShape = inputs[0].dims;\n      if (dim !== inputShape.length) {\n        throw new Error(`output dimension should match input ${inputShape.length}, but got ${dim}`);\n      }\n      const inputHeight = inputShape[dim - 2];\n      const inputWidth = inputShape[dim - 1];\n\n      const scalesHeight = scales[dim - 2];\n      const scalesWidth = scales[dim - 1];\n\n      let getSourceFracIndex = '';\n\n      if (attributes.mode !== 'linear') {\n        // TODO: support other modes\n        throw new Error(`resize (packed) does not support mode: '${attributes.mode}'`);\n      }\n      switch (attributes.coordinateTransformMode) {\n        case 'asymmetric':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return vec4(coords) / scaleWHWH;\n                    }\n                `;\n          break;\n        case 'half_pixel':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return (vec4(coords) + 0.5) / scaleWHWH - 0.5;\n                    }\n                `;\n          break;\n        case 'pytorch_half_pixel':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 fcoords = vec4(coords);\n                        return vec4(\n                            ${outputWidth}.0 > 1.0 ? (fcoords.x + 0.5) / scaleWHWH.x - 0.5 : 0.0,\n                            ${outputHeight}.0 > 1.0 ? (fcoords.y + 0.5) / scaleWHWH.y - 0.5 : 0.0,\n                            ${outputWidth}.0 > 1.0 ? (fcoords.z + 0.5) / scaleWHWH.z - 0.5 : 0.0,\n                            ${outputHeight}.0 > 1.0 ? (fcoords.w + 0.5) / scaleWHWH.w - 0.5 : 0.0\n                          );\n                    }\n                `;\n          break;\n        case 'align_corners':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 resized = vec4(${outputWidth}.0 - 1.0, ${outputHeight}.0 - 1.0, ${outputWidth}.0 - 1.0,\n                            ${outputHeight}.0 - 1.0);\n                        vec4 original = vec4(${inputWidth}.0 - 1.0, ${inputHeight}.0 - 1.0, ${inputWidth}.0 - 1.0,\n                            ${inputHeight}.0 - 1.0);\n                        vec4 new_scale = original / resized;\n                        return vec4(coords) * new_scale;\n                    }\n                `;\n          break;\n        default:\n          // TODO:supporting other coordinateTransformModes\n          throw new Error(`resize (packed) does not support coordinateTransformMode: \\\n                                '${attributes.coordinateTransformMode}'`);\n      }\n\n      const coordsDataType = getCoordsDataType(dim);\n      const unpackChannel = unpackFromChannel();\n      const shaderSource = `\n            const vec2 inputWH = vec2(${inputHeight}.0, ${inputWidth}.0);\n            const vec4 scaleWHWH = vec4(float(${scalesHeight}), float(${scalesWidth}), float(${scalesHeight}), float(${\n          scalesWidth}));\n            ${unpackChannel}\n            ${getSourceFracIndex}\n            float getAValue(int x10, int r, int c, int d) {\n                return getChannel(getA(x10, r, c, d), vec2(c, d));\n            }\n            void main() {\n                ${coordsDataType} rc = getOutputCoords();\n\n                int batch = rc[0];\n                int depth = rc[1];\n\n                // retrieve the 4 coordinates that is used in the 4 packed output values.\n                ivec4 coords = ivec4(rc.wz, rc.w + 1, rc.z + 1);\n\n                // calculate the source index in fraction\n                vec4 sourceFrac = getSourceFracIndex(coords);\n\n                // get the lower and upper bound of the 4 values that will be packed into one texel.\n                ivec4 x00 = ivec4(max(sourceFrac.xy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xy)));\n                ivec4 x01 = ivec4(max(sourceFrac.xw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xw)));\n                ivec4 x10 = ivec4(max(sourceFrac.zy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zy)));\n                ivec4 x11 = ivec4(max(sourceFrac.zw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zw)));\n\n                bool hasNextRow = rc.w < ${outputHeight - 1};\n                bool hasNextCol = rc.z < ${outputWidth - 1};\n\n                // pack x00, x01, x10, x11's top-left corner into one vec4 structure\n                vec4 topLeft = vec4(\n                    getAValue(batch, depth, x00.x, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's top-right corner into one vec4 structure\n                vec4 topRight = vec4(\n                    getAValue(batch, depth, x00.x, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.w) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-left corner into one vec4 structure\n                vec4 bottomLeft = vec4(\n                    getAValue(batch, depth, x00.z, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-right corner into one vec4 structure\n                vec4 bottomRight = vec4(\n                    getAValue(batch, depth, x00.z, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.w) : 0.0);\n\n                // calculate the interpolation fraction on u and v direction\n                vec4 frac = vec4(sourceFrac) - floor(sourceFrac);\n                vec4 clampFrac = clamp(frac, vec4(0.0), vec4(1.0));\n\n                vec4 top = mix(topLeft, topRight, clampFrac.ywyw);\n                vec4 bottom = mix(bottomLeft, bottomRight, clampFrac.ywyw);\n                vec4 newValue = mix(top, bottom, clampFrac.xxzz);\n\n                ${glsl.output} = vec4(newValue);\n            }\n        `;\n      return {\n        ...resizeProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\n\nconst prepareInputs = (inputs: Tensor[], attributes: UpsampleAttributes): [readonly number[], readonly number[]] => {\n  const x = inputs[0];\n  const xDims = x.dims;\n\n  let scales = attributes.scales;\n  let outputSizes: number[]|undefined;\n  if (scales.length === 0) {\n    const scalesTensor = inputs[attributes.scalesInputIdx];\n    if (scalesTensor && scalesTensor.size !== 0) {\n      if (inputs[attributes.sizesInputIdx]) {\n        throw new Error('Only one of scales or sizes must be provided as input.');\n      }\n      scales = parseScalesData(scalesTensor, attributes.mode, attributes.isResize);\n    } else {\n      const sizesTensor = inputs[attributes.sizesInputIdx];\n      if (!sizesTensor || sizesTensor.size === 0) {\n        throw new Error('Either scales or sizes MUST be provided as input.');\n      }\n\n      outputSizes = Array.from(sizesTensor.integerData);\n      scales = parseScalesDataFromOutputSize(outputSizes, xDims, attributes.mode, attributes.isResize);\n    }\n  } else {\n    if (inputs[attributes.sizesInputIdx]) {\n      throw new Error('Only one of scales or sizes must be provided as input.');\n    }\n  }\n\n  const yDims = outputSizes || (xDims.map((dim, i) => Math.floor(dim * scales[i])));\n\n  return [scales, yDims];\n};\n\nconst parseScalesData = (scale: Tensor, mode: string, isResize: boolean): number[] => {\n  const scales = Array.from(scale.floatData);\n  scalesValidation(scales, mode, isResize);\n  return scales;\n};\n\nconst parseScalesDataFromOutputSize =\n    (yDims: readonly number[], xDims: readonly number[], mode: string, isResize: boolean): number[] => {\n      const length = xDims.length;\n      const scales = new Array<number>(length);\n\n      for (let i = 0, end = length; i < end; i++) {\n        if (xDims[i] === 0) {\n          if (yDims[i] !== 0) {\n            throw new Error('Input dim is zero but required output dim is non-zero.');\n          }\n          scales[i] = 1;\n        } else {\n          scales[i] = yDims[i] / xDims[i];\n        }\n      }\n      scalesValidation(scales, mode, isResize);\n      return scales;\n    };\n\n// roi data is not used yet. but leave here for future usage.\n// const getRoi = (inputs: Tensor[], attributes: UpsampleAttributes) : number[] => {\n//     let roi: number[] = [];\n//     if (attributes.needRoiInput) {\n//         if (attributes.roiInputIdx <= 0) {\n//             throw new Error('Invalid roi input index.');\n//         }\n//         const roiTensor = inputs[attributes.roiInputIdx];\n//         roi = roiTensor.size > 0 ? Array.from(roiTensor.floatData) : [];\n//     } else {\n//         roi = new Array(inputs[0].dims.length * 2).fill(0);\n//     }\n//     return roi;\n// };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const shape = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  return [new Tensor([inputs[0].dims.length], 'int32', undefined, undefined, new Int32Array(inputs[0].dims))];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Shape requires 1 input.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SliceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly ends: number[];\n  readonly starts: number[];\n}\n\nconst sliceProgramMetadata = {\n  name: 'Slice',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const slice: OperatorImplementation<SliceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SliceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...sliceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseSliceAttributes: OperatorInitialization<SliceAttributes> = (node: Graph.Node): SliceAttributes => {\n  const starts = node.attributes.getInts('starts');\n  const ends = node.attributes.getInts('ends');\n  const axes = node.attributes.getInts('axes', []);\n  return createAttributeWithCacheKey({starts, ends, axes});\n};\n\nconst createSliceProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SliceAttributes): ProgramInfo => {\n      const axes = (attributes.axes.length === 0) ? input.dims.slice(0).map((val, i) => i) : attributes.axes;\n      const normalizedAxes = ShapeUtil.normalizeAxes(axes, input.dims.length);\n      const starts = attributes.starts.map((start, i) => {\n        if (start > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(start, input.dims[normalizedAxes[i]]);\n      });\n      const ends = attributes.ends.map((end, i) => {\n        if (end > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(end, input.dims[normalizedAxes[i]]);\n      });\n\n      const outputShape = input.dims.slice();\n\n      const sliceOps: string[] = [];\n      for (let i = 0; i < normalizedAxes.length; i++) {\n        outputShape[normalizedAxes[i]] = ends[i] - starts[i];\n        if (starts[i] > 0) {\n          sliceOps.push(`outputIdx[${normalizedAxes[i]}] += ${starts[i]};`);\n        }  // else { sliceOps.push(`outputIdx[${normalizedAxes[i]}] += 0;`); }\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        ${sliceOps.join('\\n      ')}\n        return _A(outputIdx);\n      }`;\n      return {\n        ...sliceProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Slice requires 1 input.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const sliceV10 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV10(inputs);\n  const attributes = generateSliceAttributesFromInputs(inferenceHandler, inputs);\n  const output = inferenceHandler.run(\n      {\n        ...sliceProgramMetadata,\n        cacheHint: attributes.cacheKey,\n        get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n      },\n      [inputs[0]]);\n  return [output];\n};\n\nconst generateSliceAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): SliceAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          !inferenceHandler.session.isInitializer(inputs[2].dataId) ||\n          (inputs.length >= 4 && !inferenceHandler.session.isInitializer(inputs[3].dataId)) ||\n          (inputs.length >= 5 && !inferenceHandler.session.isInitializer(inputs[4].dataId))) {\n        throw new Error('dynamic slice attributes are not allowed');\n      }\n\n      if (inputs.length >= 5 && inputs[4].integerData.some((i: number) => i !== 1)) {\n        throw new Error('currently non-1 steps is not supported for Slice');\n      }\n\n      const starts = Array.from(inputs[1].integerData);\n      const ends = Array.from(inputs[2].integerData);\n      const axes = inputs.length >= 4 ? Array.from(inputs[3].integerData) : [];\n      const cacheKey = `${axes};${starts};${ends}`;\n      return {starts, ends, axes, cacheKey};\n    };\n\nconst validateInputsV10 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 3 || inputs.length > 5) {\n    throw new Error('Invalid input number.');\n  }\n  if (inputs[1].type !== 'int32' || inputs[1].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[2].type !== 'int32' || inputs[2].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 4 && (inputs[3].type !== 'int32' || inputs[3].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 5 && (inputs[4].type !== 'int32' || inputs[4].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface SoftmaxAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nconst softmaxComputeMaxProgramMetadata = {\n  name: 'SoftmaxComputeMax',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst softmaxComputeScaleProgramMetadata = {\n  name: 'SoftmaxComputeScale',\n  inputNames: ['A', 'Max'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst softmaxProgramMetadata = {\n  name: 'SoftMax',\n  inputNames: ['A', 'Max', 'Norm'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked],\n};\n\nexport const softmax: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const logicalRowCount = ShapeUtil.sizeToDimension(inputShape, axis);\n      const featureCount = ShapeUtil.sizeFromDimension(inputShape, axis);\n\n      const output = computeSoftmax(inferenceHandler, inputs, attributes, logicalRowCount, featureCount);\n      return output;\n    };\n\nexport const parseSoftmaxAttributes: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 1)});\n\nexport const parseSoftmaxAttributesV13: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', -1)});\n\n// The \"semantic\" meaning of axis has changed in opset-13.\n// Please compare: https://github.com/onnx/onnx/blob/main/docs/Operators.md#Softmax\n// with https://github.com/onnx/onnx/blob/main/docs/Changelog.md#Softmax-11 for detailed explanations\n// To account for the opset-13 behavior, our plan will be to transpose the \"axis\" dim to the innermost dim\n// and perform softmax and then reverse the transpose. We can skip the transposing aspect if the axis is already\n// the innermost dim\nexport const softmaxV13: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const rank = inputShape.length;\n\n      const isTransposeRequired = (axis !== rank - 1) ? true : false;\n      const transposedInputShape: number[] = [];\n      let perm: number[] = [];\n      let transposedInputs: Tensor[] = [];\n      let transposeAttribute: TransposeAttributes;\n\n      if (isTransposeRequired) {\n        perm = Array.from({length: rank}).map((_, i) => i);\n\n        // swap the innermost dim with the dim corresponding to axis\n        perm[axis] = rank - 1;\n        perm[rank - 1] = axis;\n\n        perm.map(p => transposedInputShape.push(inputShape[p]));\n\n        transposeAttribute = createAttributeWithCacheKey({perm});\n        transposedInputs = transpose(inferenceHandler, inputs, transposeAttribute);\n      }\n\n      const logicalRowCount = isTransposeRequired ? ShapeUtil.sizeToDimension(transposedInputShape, rank - 1) :\n                                                    ShapeUtil.sizeToDimension(inputShape, rank - 1);\n      const featureCount = isTransposeRequired ? ShapeUtil.sizeFromDimension(transposedInputShape, rank - 1) :\n                                                 ShapeUtil.sizeFromDimension(inputShape, rank - 1);\n\n      const output = computeSoftmax(\n          inferenceHandler, isTransposeRequired ? transposedInputs : inputs, attributes, logicalRowCount, featureCount);\n\n      if (isTransposeRequired) {\n        const reversedOutput = transpose(inferenceHandler, output, transposeAttribute!);\n        return reversedOutput;\n      } else {\n        return output;\n      }\n    };\n\nconst computeSoftmax =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes, logicalRowCount: number,\n     featureCount: number): Tensor[] => {\n      const computeMaxProgramInfo =\n          createComputeMaxProgramInfo(inferenceHandler, inputs[0], logicalRowCount, featureCount, [logicalRowCount]);\n      const max = inferenceHandler.run(\n          {...softmaxComputeMaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeMaxProgramInfo},\n          inputs);\n\n      const computeScaleProgramInfo = createComputScaleProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          [logicalRowCount]);\n      const scale = inferenceHandler.run(\n          {...softmaxComputeScaleProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeScaleProgramInfo},\n          [inputs[0], max]);\n\n      const softMaxProgramInfo = createSoftMaxProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          computeScaleProgramInfo.output.dims);\n      const output = inferenceHandler.run(\n          {...softmaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => softMaxProgramInfo},\n          [inputs[0], max, scale]);\n      return [output];\n    };\n\n/**\n * Create a texture that contains the maximum value of each of the 'N' rows\n */\nconst createComputeMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float max = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset, ${textureWidth},\n        ${textureHeight} )));\n        for(int i=1; i<${featureCount}; ++i)\n        {\n          float current = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight})));\n          if(current > max)\n          max = current;\n        }\n\n        return max;\n      }`;\n      return {\n        ...softmaxComputeMaxProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\n/**\n * Create a texture that contains the normalization factor for each of the 'N' rows\n */\nconst createComputScaleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float norm_factor = 0.0;\n        float max = _Max(indices);\n        for(int i=0; i<${featureCount}; ++i)\n        {\n          norm_factor += exp(getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight}))) - max);\n        }\n\n        return norm_factor;\n      }`;\n      return {\n        ...softmaxComputeScaleProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createSoftMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], normalizationPerLogicalRow: readonly number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = input.dims.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1 || normalizationPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount || normalizationPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n\n      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)\n      int offset = coordsToOffset(TexCoords, ${textureWidth}, ${textureHeight});\n\n      //determine the logical row for this index\n      int logical_row_index[1];\n      logical_row_index[0] = offset / ${featureCount};\n\n      float norm_factor = _Norm(logical_row_index);\n\n      // avoid possible division by 0\n      // if norm_facor is 0, all elements are zero\n      // if so, return 0\n      if(norm_factor == 0.0)\n        return 0.0;\n\n      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;\n    }`;\n      return {\n        ...softmaxProgramMetadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Softmax requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil, SplitUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SplitAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n  readonly split: number[];\n  readonly numOutputs: number;\n}\n\nconst splitProgramMetadata = {\n  name: 'Split',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const split: OperatorImplementation<SplitAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SplitAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputs[0].dims.length);\n      const count = getProgramCount(inferenceHandler, inputs, axis, attributes);\n      const output: Tensor[] = [];\n      for (let i = 0; i < count; ++i) {\n        output.push(inferenceHandler.run(\n            {\n              ...splitProgramMetadata,\n              cacheHint: `${attributes.cacheKey};${i}`,\n              get: () => createSplitProgramInfo(inferenceHandler, inputs[0], attributes, axis, i)\n            },\n            inputs));\n      }\n\n      return output;\n    };\n\nexport const parseSplitAttributes: OperatorInitialization<SplitAttributes> = (node: Graph.Node): SplitAttributes => {\n  const axis = node.attributes.getInt('axis', 0);\n  const split = node.attributes.getInts('split', []);\n  const numOutputs = node.outputs.length;\n  return createAttributeWithCacheKey({axis, split, numOutputs});\n};\n\nconst getProgramCount =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number, attributes: SplitAttributes): number => {\n      const [, offsets] = SplitUtil.splitShape(inputs[0].dims, axis, attributes.split, attributes.numOutputs);\n      return offsets.length;\n    };\n\nconst createSplitProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SplitAttributes, axis: number, index: number):\n        ProgramInfo => {\n          const [shapes, offsets] = SplitUtil.splitShape(input.dims, axis, attributes.split, attributes.numOutputs);\n          const offset = offsets[index];\n          const outputShape = shapes[index];\n          const rank = outputShape.length;\n          const shaderSource = `\n      float process(int indices[${rank}]) {\n        indices[${axis}] += ${offset};\n        return _A(indices);\n      }\n    `;\n          return {\n            ...splitProgramMetadata,\n            cacheHint: `${attributes.cacheKey}:${index}`,\n            output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Split requires one input.');\n  }\n\n  if (inputs[0].type !== 'int8' && inputs[0].type !== 'uint8' && inputs[0].type !== 'int16' &&\n      inputs[0].type !== 'uint16' && inputs[0].type !== 'int32' && inputs[0].type !== 'uint32' &&\n      inputs[0].type !== 'float32' && inputs[0].type !== 'float64' && inputs[0].type !== 'bool') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const squeeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.squeezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const squeezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return squeeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseSqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Squeeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Squeeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const sum = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const sumProgramMetadata = {\n    name: 'Sum',\n    inputNames: inputs.map((v, i) => `X${i}`),\n    inputTypes: new Array(inputs.length).fill(TextureType.unpacked)\n  };\n\n  const output = inferenceHandler.run(\n      {...sumProgramMetadata, get: () => createSumProgramInfo(inferenceHandler, inputs, sumProgramMetadata)}, inputs);\n  return [output];\n};\n\nconst createSumProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], sumProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const outputShape = inputs[0].dims.slice();\n      const sumLine = inputs.map((v, i) => `${glsl.texture2D}(X${i},TexCoords)`).join(' + ');\n      const shaderSource = `\n      void main() {\n        vec4 result = ${sumLine};\n        ${glsl.output} = result;\n      }\n    `;\n      return {\n        ...sumProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length === 0) {\n    throw new Error('Sum requires inputs.');\n  }\n\n  const length = inputs[0].dims.length;\n  for (let i = 1; i < inputs.length; i++) {\n    if (length !== inputs[i].dims.length) {\n      throw new Error('Input shapes are mismatched.');\n    }\n\n    for (let j = 0; j < length; j++) {\n      if (inputs[0].dims[j] !== inputs[i].dims[j]) {\n        throw new Error('Input shapes are not matched.');\n      }\n    }\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n  for (let i = 1; i < inputs.length; i++) {\n    if (inputs[0].type !== inputs[i].type) {\n      throw new Error('Input types are not matched.');\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {NUMBER_TYPES} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const tile = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const tileProgramMetadata = {\n    name: 'Tile',\n    inputNames: ['A'],\n    inputTypes: [TextureType.unpacked],\n  };\n\n  const output = inferenceHandler.run(\n      {...tileProgramMetadata, get: () => createTileProgramInfo(inferenceHandler, inputs, tileProgramMetadata)},\n      inputs);\n  return [output];\n};\n\nconst createTileProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], tileProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const outputShape = new Array(inputShape.length);\n\n      const tileOps: string[] = [];\n      for (let i = 0; i < inputShape.length; i++) {\n        outputShape[i] = inputShape[i] * inputs[1].numberData[i];\n        tileOps.push(`inputIdx[${i}] = int(mod(float(outputIdx[${i}]), ${inputShape[i]}.));`);\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        int inputIdx[${rank}];\n        ${tileOps.join('\\n')}\n        return _A(inputIdx);\n      }\n    `;\n      return {\n        ...tileProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Tile requires 2 input.');\n  }\n  if (inputs[1].dims.length !== 1) {\n    throw new Error('The second input shape must 1 dimension.');\n  }\n  if (inputs[1].dims[0] !== inputs[0].dims.length) {\n    throw new Error('Invalid input shape.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invalid repeat type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface TransposeAttributes extends AttributeWithCacheKey {\n  readonly perm: number[];\n}\n\nconst transposeProgramMetadata = {\n  name: 'Transpose',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const transpose: OperatorImplementation<TransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: TransposeAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...transposeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createTransposeProgramInfo(inferenceHandler, inputs[0], attributes.perm)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseTransposeAttributes: OperatorInitialization<TransposeAttributes> =\n    (node: Graph.Node): TransposeAttributes => createAttributeWithCacheKey({perm: node.attributes.getInts('perm', [])});\n\nconst createTransposeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, perm: number[]): ProgramInfo => {\n      const inputShape = input.dims;\n      perm = getAdjustedPerm(inputShape, perm);\n      const unpackedOutputShape = getOutputShape(inputShape, perm);\n      const rank = inputShape.length;\n      // A dims=[${inputs[0].dims.toString()}]\n      // out Dims=[${unpackedOutputShape.toString()}]\n      // based on perm=[${perm.toString()}]\n      const shaderSource = `\n      ${getPermFunctionBody('perm', perm, rank)}\n      float process(int indices[${rank}]) {\n        int a[${rank}];\n        perm(a, indices);\n        return _A(a);\n      }`;\n      return {\n        ...transposeProgramMetadata,\n        output: {dims: unpackedOutputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst getAdjustedPerm = (inputShape: readonly number[], perm: number[]): number[] => {\n  if (perm && perm.length !== inputShape.length) {\n    perm = [...(inputShape.keys())].reverse();\n  }\n  return perm;\n};\n\nconst getOutputShape = (inputShape: readonly number[], perm: number[]): readonly number[] => {\n  perm = getAdjustedPerm(inputShape, perm);\n  return ShapeUtil.sortBasedOnPerm(inputShape, perm);\n};\n\nconst getPermFunctionBody = (name: string, perm: number[], rank: number): string => {\n  const reverseFunc = [];\n  reverseFunc.push(`void ${name}(out int a[${rank}], int src[${rank}]) {`);\n  for (let i = 0; i < rank; ++i) {\n    reverseFunc.push(`\\ta[${perm[i]}]=src[${i}];`);\n  }\n  reverseFunc.push('\\t}');\n  return reverseFunc.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Transpose requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('input should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {TextureData, TextureType} from '../types';\n\nexport const encodeAsUint8 = (inferenceHandler: WebGLInferenceHandler, input: TextureData): TextureData => {\n  const outputShape = input.shape;\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  /**\n   * https://github.com/tensorflow/tfjs-core/blob/master/src/kernels/webgl/encode_float_gpu.ts\n   */\n  const shaderSource = `\n    const float FLOAT_MAX = 1.70141184e38;\n    const float FLOAT_MIN = 1.17549435e-38;\n\n    bool isNaN(float val) {\n      return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;\n    }\n\n    highp vec4 encodeAsUint8(highp float v) {\n      if (isNaN(v)) {\n        return vec4(255, 255, 255, 255);\n      }\n\n      highp float av = abs(v);\n\n      if(av < FLOAT_MIN) {\n        return vec4(0.0, 0.0, 0.0, 0.0);\n      } else if(v > FLOAT_MAX) {\n        return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n      } else if(v < -FLOAT_MAX) {\n        return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n      }\n\n      highp vec4 c = vec4(0,0,0,0);\n\n      highp float e = floor(log2(av));\n      highp float m = exp2(fract(log2(av))) - 1.0;\n\n      c[2] = floor(128.0 * m);\n      m -= c[2] / 128.0;\n      c[1] = floor(32768.0 * m);\n      m -= c[1] / 32768.0;\n      c[0] = floor(8388608.0 * m);\n\n      highp float ebias = e + 127.0;\n      c[3] = floor(ebias / 2.0);\n      ebias -= c[3] * 2.0;\n      c[2] += floor(ebias) * 128.0;\n\n      c[3] += 128.0 * step(0.0, -v);\n\n      return c / 255.0;\n    }\n\n    void main() {\n      float value = ${glsl.texture2D}(X,TexCoords).r;\n      ${glsl.output} = encodeAsUint8(value);\n    }`;\n  const programInfo = {\n    name: 'Uint8Encode',\n    inputTypes: [TextureType.unpacked],\n    inputNames: ['X'],\n    output: {dims: outputShape, type: input.tensor.type, textureType: TextureType.downloadUint8AsFloat},\n    shaderSource,\n    hasMain: true\n  };\n  return inferenceHandler.executeProgram(programInfo, [input.tensor]);\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {Tensor} from '../../../tensor';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport function glslAbs(): GlslValueFunction {\n  return glslBuiltinUnary('abs');\n}\nexport function glslAcos(): GlslValueFunction {\n  return glslBuiltinUnary('acos');\n}\nexport function glslAsin(): GlslValueFunction {\n  return glslBuiltinUnary('asin');\n}\nexport function glslAtan(): GlslValueFunction {\n  return glslBuiltinUnary('atan');\n}\nexport function glslCeil(): GlslValueFunction {\n  return glslBuiltinUnary('ceil');\n}\nexport function glslCos(): GlslValueFunction {\n  return glslBuiltinUnary('cos');\n}\nexport function glslElu(alpha: number): GlslValueFunction {\n  const name = 'elu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a >= 0.0 ? a: (exp(a) - 1.0) * alpha;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslExp(): GlslValueFunction {\n  return glslBuiltinUnary('exp');\n}\nexport function glslFloor(): GlslValueFunction {\n  return glslBuiltinUnary('floor');\n}\nexport function glslClip(min: number, max: number): GlslValueFunction {\n  const name = 'clip';\n  const body = `\n  const float min = float(${min});\n  const float max = float(${max});\n\n  float ${name}_(float a) {\n    return clamp(a, min, max);\n  }\n  vec4 ${name}_(vec4 v) {\n    return clamp(v, min, max);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslIdentity(): GlslValueFunction {\n  const name = 'indentity';\n  const body = `\n  float ${name}_(float a) {\n    return a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLeakyRelu(alpha: number): GlslValueFunction {\n  const name = 'leakyRelu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a < 0.0 ? a * alpha : a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLog(): GlslValueFunction {\n  return glslBuiltinUnary('log');\n}\nexport function glslNeg(): GlslValueFunction {\n  const name = 'neg';\n  const body = `\n  float ${name}_(float a) {\n    return -a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return -v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslNot(): GlslValueFunction {\n  const name = 'not';\n  const body = `\n  float ${name}_(float a) {\n    return float( ! bool(a) );\n  }\n  bool ${name}_(bool a) {\n    return !a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));\n  }\n  bvec4 ${name}_(bvec4 v) {\n    return bvec4(!v.x, !v.y, !v.z, !v.w);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSin(): GlslValueFunction {\n  return glslBuiltinUnary('sin');\n}\nexport function glslRelu(): GlslValueFunction {\n  const name = 'relu';\n  const body = `\n  float ${name}_(float a) {\n    return max( a, 0.0 );\n  }\n  vec4 ${name}_(vec4 v) {\n    return max( v, 0.0 );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSigmoid(): GlslValueFunction {\n  const name = 'sigmoid';\n  const body = `\n  float ${name}_(float a) {\n    return 1.0 / (1.0 + exp(-a));\n  }\n  vec4 ${name}_(vec4 v) {\n    return 1.0 / (1.0 + exp(-v));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSqrt(): GlslValueFunction {\n  return glslBuiltinUnary('sqrt');\n}\nexport function glslTan(): GlslValueFunction {\n  return glslBuiltinUnary('tan');\n}\nexport function glslTanh(): GlslValueFunction {\n  const name = 'tanh';\n  const body = `\n  float ${name}_(float a) {\n    a = clamp(a, -10., 10.);\n    a = exp(2.*a);\n    return (a - 1.) / (a + 1.);\n  }\n  vec4 ${name}_(vec4 v) {\n    v = clamp(v, -10., 10.);\n    v = exp(2.*v);\n    return (v - 1.) / (v + 1.);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nfunction glslBuiltinUnary(name: string): GlslValueFunction {\n  const body = `\n  float ${name}_(float a) {\n    return ${name}(a);\n  }\n  vec4 ${name}_(vec4 v) {\n    return ${name}(v);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\n/////\n/////\n/////\n\nconst createElementwiseProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, glslFunc: GlslValueFunction):\n        ProgramInfo => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n          return {\n            ...metadata,\n            output: {dims: input.dims, type: input.type, textureType},\n            shaderSource: `\n     ${glslFunc.body}\n     void main() {\n       vec4 v = ${glsl.texture2D}(A, TexCoords);\n       v = ${glslFunc.name}_(v);\n       ${glsl.output} = v;\n     }\n     `,\n            hasMain: true\n          };\n        };\n\nconst createElementwiseProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input: Tensor, glslFunc: GlslValueFunction, cacheKey?: string):\n        ProgramInfoLoader => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const metadata = {name: glslFunc.name, inputTypes: [textureType], inputNames: ['A'], cacheHint: cacheKey};\n          return {...metadata, get: () => createElementwiseProgramInfo(handler, metadata, input, glslFunc)};\n        };\n\nexport const abs = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAbs()), inputs)];\n\nexport const acos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAcos()), inputs)];\n\nexport const asin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAsin()), inputs)];\n\nexport const atan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAtan()), inputs)];\n\nexport interface ClipAttributes extends AttributeWithCacheKey {\n  readonly min: number;\n  readonly max: number;\n}\n\nexport const clip =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ClipAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(\n            handler, inputs[0], glslClip(attributes.min, attributes.max), attributes.cacheKey),\n        inputs)];\n\nexport const parseClipAttributes = (node: Graph.Node): ClipAttributes => createAttributeWithCacheKey(\n    {min: node.attributes.getFloat('min', MIN_CLIP), max: node.attributes.getFloat('max', MAX_CLIP)});\n\nexport const clipV11 = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const attributes = generateClipAttributesFromInputs(handler, inputs);\n  return clip(handler, [inputs[0]], attributes);\n};\n\nconst generateClipAttributesFromInputs = (handler: WebGLInferenceHandler, inputs: Tensor[]): ClipAttributes => {\n  if (inputs.length >= 3 &&\n      (!handler.session.isInitializer(inputs[1].dataId) || !handler.session.isInitializer(inputs[2].dataId))) {\n    throw new Error('dynamic clip attributes are not allowed');\n  }\n\n  const min = (inputs.length >= 3) ? inputs[1].numberData[0] : MIN_CLIP;\n  const max = (inputs.length >= 3) ? inputs[2].numberData[0] : MAX_CLIP;\n  return createAttributeWithCacheKey({min, max});\n};\n\nexport const ceil = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCeil()), inputs)];\n\nexport const cos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCos()), inputs)];\n\nexport interface EluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const elu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: EluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslElu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseEluAttributes = (node: Graph.Node): EluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 1.0)});\n\nexport const exp = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslExp()), inputs)];\n\nexport const floor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslFloor()), inputs)];\n\nexport const identity = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslIdentity()), inputs)];\n\nexport interface LeakyReluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const leakyRelu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: LeakyReluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslLeakyRelu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseLeakyReluAttributes = (node: Graph.Node): LeakyReluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 0.01)});\n\nexport const log = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslLog()), inputs)];\n\nexport const neg = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNeg()), inputs)];\n\nexport const not = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNot()), inputs)];\n\nexport const relu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslRelu()), inputs)];\n\nexport const sigmoid = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSigmoid()), inputs)];\n\nexport const sin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSin()), inputs)];\n\nexport const sqrt = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSqrt()), inputs)];\n\nexport const tan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTan()), inputs)];\n\nexport const tanh = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTanh()), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst unpackProgramMetadata = {\n  name: 'unpack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const createUnpackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const rank = input.dims.length;\n\n  const channels = getChannels('rc', rank);\n  const innerDims = channels.slice(-2);\n  const coordsDataType = getCoordsDataType(rank);\n  const unpackChannel = unpackFromChannel();\n  const isScalar = (input.dims.length === 0);\n  const sourceCoords = isScalar ? '' : getSourceCoords(rank, channels);\n  const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const shaderSource = `\n    ${unpackChannel}\n    void main() {\n      ${coordsDataType} rc = getOutputCoords();\n\n       // Sample the texture with the coords to get the rgba channel value.\n       vec4 packedInput = getA(${sourceCoords});\n\n       ${glsl.output} = vec4(getChannel(packedInput, ${coords}), 0, 0, 0);\n     }\n   `;\n\n  return {\n    ...unpackProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n    shaderSource\n  };\n};\n\nexport const createUnpackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...unpackProgramMetadata, get: () => createUnpackProgramInfo(handler, input)});\n\nfunction getSourceCoords(rank: number, dims: string[]): string {\n  if (rank === 1) {\n    return 'rc';\n  }\n\n  let coords = '';\n  for (let i = 0; i < rank; i++) {\n    coords += dims[i];\n    if (i < rank - 1) {\n      coords += ',';\n    }\n  }\n  return coords;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const unsqueeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.unsqueezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const unsqueezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return unsqueeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseUnsqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Unsqueeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Unsqueeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface UpsampleAttributes extends AttributeWithCacheKey {\n  readonly opset: number;\n  readonly isResize: boolean;\n  readonly mode: string;\n  readonly scales: number[];\n  readonly extrapolationValue: number;\n  readonly coordinateTransformMode: string;\n  readonly useExtrapolation: boolean;\n  readonly needRoiInput: boolean;\n  readonly nearestMode: string;\n  readonly cubicCoefficientA: number;\n  readonly excludeOutside: boolean;\n  readonly useNearest2xOptimization: boolean;\n  readonly roiInputIdx: number;\n  readonly scalesInputIdx: number;\n  readonly sizesInputIdx: number;\n}\n\nconst upsampleProgramMetadata = {\n  name: 'Upsample',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const upsample: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...upsampleProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createUpsampleProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseUpsampleAttributesV7: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 7);\n\nexport const parseUpsampleAttributesV9: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 9);\n\nexport const parseUpsampleAttributes = (node: Graph.Node, opset: number): UpsampleAttributes => {\n  const isResize = (opset >= 10);\n\n  // processing node attributes\n  const mode = node.attributes.getString('mode', 'nearest');\n  if (mode !== 'nearest' && mode !== 'linear' && (opset < 11 || mode !== 'cubic')) {\n    throw new Error(`unrecognized mode: ${mode}`);\n  }\n\n  let scales: number[] = [];\n  if (opset < 9) {\n    scales = node.attributes.getFloats('scales');\n    scalesValidation(scales, mode, isResize);\n  }\n\n  const extrapolationValue = node.attributes.getFloat('extrapolation_value', 0.0);\n\n  const coordinateTransformMode =\n      opset > 10 ? node.attributes.getString('coordinate_transformation_mode', 'half_pixel') : 'asymmetric';\n  if ([\n        'asymmetric', 'pytorch_half_pixel', 'tf_half_pixel_for_nn', 'align_corners', 'tf_crop_and_resize', 'half_pixel'\n      ].indexOf(coordinateTransformMode) === -1) {\n    throw new Error(`coordinate_transform_mode '${coordinateTransformMode}' is not supported`);\n  }\n  const needRoiInput = (coordinateTransformMode === 'tf_crop_and_resize');\n  const useExtrapolation = needRoiInput;\n\n  const nearestMode =\n      (mode === 'nearest' && opset >= 11) ? node.attributes.getString('nearest_mode', 'round_prefer_floor') : '';\n  if (['round_prefer_floor', 'round_prefer_ceil', 'floor', 'ceil', ''].indexOf(nearestMode) === -1) {\n    throw new Error(`nearest_mode '${nearestMode}' is not supported`);\n  }\n\n  const cubicCoefficientA = node.attributes.getFloat('cubic_coeff_a', -0.75);\n  const excludeOutside = node.attributes.getInt('exclude_outside', 0) !== 0;\n  if (excludeOutside && mode !== 'cubic') {\n    throw new Error('exclude_outside can be set to 1 only when mode is CUBIC.');\n  }\n\n  const useNearest2xOptimization =\n      (opset < 11) ? true : (mode === 'nearest' && coordinateTransformMode === 'asymmetric' && nearestMode === 'floor');\n\n  let roiInputIdx = 0;\n  let scalesInputIdx = 0;\n  let sizesInputIdx = 0;\n\n  if (opset > 10) {\n    // handle when roiInput is not given\n    if (node.inputs.length > 2) {\n      roiInputIdx = 1;\n      scalesInputIdx = 2;\n      sizesInputIdx = 3;\n    } else {\n      scalesInputIdx = 1;\n      sizesInputIdx = 2;\n    }\n  } else if (opset === 9) {\n    scalesInputIdx = 1;\n  }\n\n  return createAttributeWithCacheKey({\n    opset,\n    isResize,\n    mode,\n    scales,\n    extrapolationValue,\n    coordinateTransformMode,\n    useExtrapolation,\n    needRoiInput,\n    nearestMode,\n    cubicCoefficientA,\n    excludeOutside,\n    useNearest2xOptimization,\n    roiInputIdx,\n    scalesInputIdx,\n    sizesInputIdx\n  });\n};\n\nconst createUpsampleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [inputWidth, inputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(inputs[0].dims, TextureType.unpacked);\n\n      const outputShape = inputs[0].dims.map((dim, i) => Math.floor(dim * attributes.scales[i]));\n      const [outputWidth, outputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(outputShape, TextureType.unpacked);\n      const dim = outputShape.length;\n\n      const outputPitches = new Array<number>(dim);\n      const inputPitches = new Array<number>(dim);\n      let precalculatedPitches = `\n      int output_pitches[${dim}];\n      int input_pitches[${dim}];\n      `;\n      for (let d = dim - 1; d >= 0; d--) {\n        outputPitches[d] = (d === dim - 1) ? 1 : outputPitches[d + 1] * outputShape[d + 1];\n        inputPitches[d] = (d === dim - 1) ? 1 : inputPitches[d + 1] * inputs[0].dims[d + 1];\n\n        precalculatedPitches += `\n        output_pitches[${d}] = ${outputPitches[d]};\n        input_pitches[${d}] = ${inputPitches[d]};\n        `;\n      }\n      const getInputFloatFunction = `\n      float getInputFloat(int index) {\n        vec2 coords = offsetToCoords(index, ${inputWidth}, ${inputHeight});\n        float value = getColorAsFloat(${glsl.texture2D}(X, coords));\n        return value;\n      }\n      `;\n\n      const shaderSource = attributes.mode === 'nearest' ?\n          // nearest\n          `\n    ${getInputFloatFunction}\n    float process(int indices[${dim}]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int d, m;\n      for (int dim = 0; dim < ${dim}; ++dim) {\n        d = output_index / output_pitches[dim];\n        m = output_index - d * output_pitches[dim];\n        output_index = m;\n\n        if (scales[dim] != 1 && d > 0) {\n          int d2 = d / scales[dim];\n          m = d - d2 * scales[dim];\n          d = d2;\n        }\n        input_index += input_pitches[dim] * d;\n      }\n\n      return getInputFloat(input_index);\n    }` :\n          dim === 4 ?\n          // bilinear 4D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[4]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1, index_of_dim2, index_of_dim3;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m / output_pitches[1];\n      m = m - index_of_dim1 * output_pitches[1];\n      index_of_dim2 = m / output_pitches[2];\n      m = m - index_of_dim2 * output_pitches[2];\n      index_of_dim3 = m;\n\n      int index_of_input_dim2, index_of_input_dim3, x_offset, y_offset;\n      index_of_input_dim2 = index_of_dim2 / scales[2];\n      y_offset = index_of_dim2 - index_of_input_dim2 * scales[2];\n      index_of_input_dim3 = index_of_dim3 / scales[3];\n      x_offset = index_of_dim3 - index_of_input_dim3 * scales[3];\n\n      input_index = index_of_dim0 * input_pitches[0] +\n            index_of_dim1 * input_pitches[1] +\n            index_of_input_dim2 * input_pitches[2] +\n            index_of_input_dim3;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim2 = false;\n      if (index_of_input_dim2 == (${inputs[0].dims[2]} - 1)) {\n        // It's the end in dimension 2\n        x01 = x00;\n        end_of_dim2 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[2]);\n      }\n\n      if (index_of_input_dim3 == (input_pitches[2] - 1)) {\n        // It's the end in dimension 3\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim2 ? x10 : getInputFloat(input_index + input_pitches[2] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[2]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[2]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[3]);\n    }` :\n              // bilinear 2D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[2]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m;\n\n      int index_of_input_dim0, index_of_input_dim1, x_offset, y_offset;\n      index_of_input_dim0 = index_of_dim0 / scales[0];\n      y_offset = index_of_dim0 - index_of_input_dim0 * scales[0];\n      index_of_input_dim1 = index_of_dim1 / scales[1];\n      x_offset = index_of_dim1 - index_of_input_dim1 * scales[1];\n\n      input_index = index_of_input_dim0 * input_pitches[0] + index_of_input_dim1;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim0 = false;\n      if (index_of_input_dim0 == (${inputs[0].dims[0]} - 1)) {\n        // It's the end in dimension 0\n        x01 = x00;\n        end_of_dim0 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[0]);\n      }\n\n      if (index_of_input_dim1 == (input_pitches[0] - 1)) {\n        // It's the end in dimension 1\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim0 ? x10 : getInputFloat(input_index + input_pitches[0] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[0]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[0]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[1]);\n    }`;\n      return {\n        ...upsampleProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        variables: [{\n          name: 'scales',\n          type: 'int',\n          arrayLength: attributes.scales.length,\n          data: attributes.scales.map(x => Math.ceil(x))\n        }]\n      };\n    };\n\nexport const validateInputs = (inputs: Tensor[], attribute: UpsampleAttributes): void => {\n  if (!inputs || (attribute.opset < 9 && inputs.length !== 1) ||\n      (attribute.opset >= 9 && attribute.opset < 11 && inputs.length !== 2) ||\n      (attribute.opset >= 11 && inputs.length < 2)) {\n    throw new Error('invalid inputs.');\n  }\n\n  if (attribute.scales.length > 0 && inputs[0].dims.length !== attribute.scales.length) {\n    throw new Error('Invalid input shape.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input tensor types.');\n  }\n};\n\nexport const scalesValidation = (scales: number[], mode: string, isResize: boolean): void => {\n  if (!isResize) {\n    for (const scale of scales) {\n      if (scale < 1) {\n        throw new Error('Scale value should be greater than or equal to 1.');\n      }\n    }\n  } else {\n    for (const scale of scales) {\n      if (scale <= 0) {\n        throw new Error('Scale value should be greater than 0.');\n      }\n    }\n  }\n  if (mode === 'linear' || mode === 'cubic') {\n    if (scales.length !== 2 && (scales.length !== 4 || scales[0] !== 1 || scales[1] !== 1)) {\n      throw new Error(`'Linear' mode and 'Cubic' mode only support 2-D inputs ('Bilinear', 'Bicubic') \\\n        or 4-D inputs with the corresponding outermost 2 scale values being 1 \\\n        in the ${isResize ? 'Resize' : 'Upsample'} opeartor.`);\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {Logger, Profiler} from '../../instrument';\n\nimport {GlslPreprocessor} from './glsl-preprocessor';\nimport {getVertexShaderSource} from './glsl-source';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {Artifact, ProgramInfo, ProgramVariable, TextureData, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * ProgramManager is the main class behind running computations\n * It builds ProgramInfo's into Artifacts\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\n * Uses the artifact to run the computation by calling Draw on\n * the WebGL drawing buffer\n * ProgramManager automatically maps (binds) input variables to their\n * corresponding Location's in the binary program\n */\nexport class ProgramManager {\n  repo: Map<unknown, Artifact>;  // this should be per-session object\n  vertexShader: WebGLShader;\n  attributesBound: boolean;\n\n  constructor(\n      public profiler: Readonly<Profiler>, public glContext: WebGLContext,\n      public textureLayoutStrategy: TextureLayoutStrategy) {\n    this.repo = new Map();\n    this.attributesBound = false;\n  }\n  getArtifact(key: unknown): Artifact|undefined {\n    return this.repo.get(key);\n  }\n  setArtifact(key: unknown, artifact: Artifact): void {\n    this.repo.set(key, artifact);\n  }\n  run(buildArtifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    this.profiler.event('op', `ProgramManager.run ${buildArtifact.programInfo.name ?? 'unknown kernel'}`, () => {\n      const gl = this.glContext.gl;\n      const program = buildArtifact.program;\n      gl.useProgram(program);\n      try {\n        this.bindOutput(output);\n        if (!this.attributesBound) {\n          this.bindAttributes(buildArtifact.attribLocations);\n        }\n        this.bindUniforms(buildArtifact.uniformLocations, buildArtifact.programInfo.variables ?? [], inputs);\n      } catch (err) {\n        Logger.error('ProgramManager', buildArtifact.programInfo.shaderSource);\n        throw err;\n      }\n      this.profiler.event('backend', 'GlContext.draw()', () => {\n        this.glContext.draw();\n      });\n    }, this.glContext);\n  }\n  dispose(): void {\n    if (this.vertexShader) {\n      this.glContext.deleteShader(this.vertexShader);\n    }\n    this.repo.forEach(a => this.glContext.deleteProgram(a.program));\n  }\n  build(programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[], outputTextureLayout: TextureLayout): Artifact {\n    return this.profiler.event('backend', 'ProgramManager.build', () => {\n      const preprocessor = new GlslPreprocessor(this.glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n      const fragScript = preprocessor.preprocess();\n      const program = this.compile(fragScript);\n      const artifact = {\n        programInfo,\n        program,\n        uniformLocations: this.getUniformLocations(\n            program, preprocessor.context.programInfo.inputNames, preprocessor.context.programInfo.variables),\n        attribLocations: this.getAttribLocations(program)\n      };\n      return artifact;\n    });\n  }\n  protected compile(fragShaderScript: string): WebGLProgram {\n    if (!this.vertexShader) {\n      Logger.verbose('ProrgramManager', 'Compiling and caching Vertex shader for the first time');\n      const vertexShaderScript = getVertexShaderSource(this.glContext.version);\n      this.vertexShader = this.glContext.compileShader(vertexShaderScript, this.glContext.gl.VERTEX_SHADER);\n    }\n    if (env.debug) {\n      Logger.verbose('ProrgramManager', `FragShader:\n${fragShaderScript}\n`);\n    }\n    const fragShader = this.glContext.compileShader(fragShaderScript, this.glContext.gl.FRAGMENT_SHADER);\n    const program = this.glContext.createProgram(this.vertexShader, fragShader);\n    this.glContext.deleteShader(fragShader);\n    return program;\n  }\n  bindOutput(td: TextureData): void {\n    const width = td.width;\n    const height = td.height;\n    Logger.verbose(\n        'ProrgramManager',\n        `Binding output texture to Framebuffer: w/h=${width}/${height}, shape=${td.shape}, type=${td.tensor.type}`);\n    this.glContext.attachFramebuffer(td.texture, width, height);\n  }\n  bindAttributes(attribLocations: Artifact.AttribLocations): void {\n    const positionHandle = attribLocations.position;\n    const textureCoordHandle = attribLocations.textureCoord;\n    this.glContext.setVertexAttributes(positionHandle, textureCoordHandle);\n    this.attributesBound = true;\n  }\n  bindUniforms(uniformLocations: Artifact.UniformLocations, variables: ProgramVariable[], textures: TextureData[]):\n      void {\n    const gl = this.glContext.gl;\n    let texturePosition = 0;\n    for (const {name, type, location, arrayLength} of uniformLocations) {\n      const value = variables.find(v => v.name === name)?.data;\n      if (type !== 'sampler2D' && !value) {\n        throw new Error(`variable '${name}' does not have data defined in program info`);\n      }\n      switch (type) {\n        case 'sampler2D':\n          this.bindTexture(textures[texturePosition], location, texturePosition);\n          texturePosition++;\n          break;\n        case 'float':\n          if (arrayLength) {\n            gl.uniform1fv(location, value as number[]);\n          } else {\n            gl.uniform1f(location, value as number);\n          }\n          break;\n        case 'int':\n          if (arrayLength) {\n            gl.uniform1iv(location, value as number[]);\n          } else {\n            gl.uniform1i(location, value as number);\n          }\n          break;\n        default:\n          throw new Error(`Uniform not implemented: ${type}`);\n      }\n    }\n  }\n  bindTexture(td: TextureData, uniformHandle: WebGLUniformLocation, position: number): void {\n    this.glContext.bindTextureToUniform(td.texture, position, uniformHandle);\n  }\n  getAttribLocations(program: WebGLProgram): Artifact.AttribLocations {\n    return {\n      position: this.getAttribLocation(program, 'position'),\n      textureCoord: this.getAttribLocation(program, 'textureCoord')\n    };\n  }\n  getUniformLocations(program: WebGLProgram, samplers?: string[], variables?: VariableInfo[]):\n      Artifact.UniformLocations {\n    const uniformLocations: Artifact.UniformLocations = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLocations.push({name: sampler, type: 'sampler2D', location: this.getUniformLocation(program, sampler)});\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLocations.push({...variable, location: this.getUniformLocation(program, variable.name)});\n      }\n    }\n    return uniformLocations;\n  }\n  getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation {\n    const gl = this.glContext.gl;\n    const reference = gl.getUniformLocation(program, name);\n    if (reference === null) {\n      throw new Error(`Uniform ${name} not found.`);\n    }\n    return reference;\n  }\n  getAttribLocation(program: WebGLProgram, name: string): number {\n    const gl = this.glContext.gl;\n    const attributeLocation: number = gl.getAttribLocation(program, name);\n    return attributeLocation;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from '../../backend';\nimport {Graph} from '../../graph';\nimport {Logger} from '../../instrument';\nimport {Operator} from '../../operators';\nimport {OpSet, resolveOperator} from '../../opset';\nimport {Session} from '../../session';\nimport {Tensor} from '../../tensor';\nimport {WebGLBackend} from '../backend-webgl';\n\nimport {WebGLInferenceHandler} from './inference-handler';\nimport {WEBGL_OP_RESOLVE_RULES} from './op-resolve-rules';\nimport {ProgramManager} from './program-manager';\nimport {PreferLogicalStrategy, TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureManager} from './texture-manager';\nimport {TextureData} from './types';\n\nexport class WebGLSessionHandler implements SessionHandler {\n  programManager: ProgramManager;\n  textureManager: TextureManager;\n  layoutStrategy: TextureLayoutStrategy;\n  packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  pack2unpackMap: Map<Tensor.Id, Tensor.Id>;\n  unpack2packMap: Map<Tensor.Id, Tensor.Id>;\n  initializers: Set<Tensor.Id>;\n  pack?: boolean;\n\n  constructor(public readonly backend: WebGLBackend, public readonly context: Session.Context) {\n    this.layoutStrategy = new PreferLogicalStrategy(backend.glContext.maxTextureSize);\n    this.programManager = new ProgramManager(this.context.profiler, backend.glContext, this.layoutStrategy);\n    this.textureManager = new TextureManager(\n        backend.glContext, this.layoutStrategy, this.context.profiler,\n        {reuseTextures: backend.textureCacheMode === 'full'});\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n    this.pack = backend.pack;\n    this.pack2unpackMap = new Map();\n    this.unpack2packMap = new Map();\n  }\n\n  createInferenceHandler() {\n    return new WebGLInferenceHandler(this);\n  }\n  onGraphInitialized(graph: Graph): void {\n    const initializers = graph.getValues().filter(v => v.from === -1 && v.tensor).map(v => v.tensor!.dataId);\n    this.initializers = new Set(initializers);\n  }\n  isInitializer(tensorId: Tensor.Id): boolean {\n    return this.initializers ? this.initializers.has(tensorId) : false;\n  }\n  addInitializer(tensorId: Tensor.Id): void {\n    this.initializers.add(tensorId);\n  }\n  getTextureData(tensorId: Tensor.Id, isPacked: boolean): TextureData|undefined {\n    if (isPacked) {\n      return this.packedTextureDataCache.get(tensorId);\n    } else {\n      return this.unpackedTextureDataCache.get(tensorId);\n    }\n  }\n  setTextureData(tensorId: Tensor.Id, textureData: TextureData, isPacked = false): void {\n    Logger.verbose('WebGLSessionHandler', 'Storing Texture data in cache');\n    if (isPacked) {\n      this.packedTextureDataCache.set(tensorId, textureData);\n    } else {\n      this.unpackedTextureDataCache.set(tensorId, textureData);\n    }\n  }\n  dispose(): void {\n    this.programManager.dispose();\n    this.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.unpackedTextureDataCache = new Map();\n  }\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator {\n    const op = resolveOperator(node, opsets, WEBGL_OP_RESOLVE_RULES);\n    return {impl: op.opImpl, context: op.opInit ? op.opInit(node, graph) : node};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nexport declare namespace Encoder {\n  export interface DataTypeMap {\n    float: Float32Array;\n    byte: Uint8Array;\n    int: Uint32Array;\n  }\n  export type DataType = keyof DataTypeMap;\n  type DataArrayType = DataTypeMap[DataType];\n\n  /* eslint-disable @typescript-eslint/naming-convention */\n  export const enum Usage {\n    Default = 0,\n    UploadOnly,\n    Download4BytesAsFloat32,\n  }\n}\n\n/**\n * Abstraction for mapping data types to texture texlets\n * Encoding means how a Float32 is mapped to 1 or 4 channels for each texlet\n * Decoding means how a texlet's channels are mapped to a resulting Float32\n */\nexport interface DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType;\n  allocate(size: number): Encoder.DataArrayType;\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Encoder.DataArrayType;\n}\n/**\n * WebGL2 data encoder\n * Uses R32F as the format for texlet\n */\nexport class RedFloat32DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGL2RenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.R32F;\n      this.format = gl.RED;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA32F;\n      this.format = gl.RGBA;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType {\n    let result: Float32Array;\n    let source: Float32Array;\n    if (src.constructor !== Float32Array) {\n      Logger.warning('Encoder', 'data was not of type Float32; creating new Float32Array');\n      source = new Float32Array(src);\n    }\n    if (textureSize * this.channelSize > src.length) {\n      Logger.warning('Encoder', 'Source data too small. Allocating larger array');\n      source = src as Float32Array;\n      result = this.allocate(textureSize * this.channelSize) as Float32Array;\n      source.forEach((v, i) => result[i] = v);\n    } else {\n      source = src as Float32Array;\n      result = source;\n    }\n    return result;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n/**\n * Data encoder for WebGL 1 with support for floating point texture\n */\nexport class RGBAFloatDataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGLRenderingContext, channels = 1, textureType?: number) {\n    if (channels !== 1 && channels !== 4) {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n    this.internalFormat = gl.RGBA;\n    this.format = gl.RGBA;\n    this.channelSize = channels;\n    this.textureType = textureType || gl.FLOAT;\n  }\n  encode(src: Float32Array, textureSize: number): Encoder.DataArrayType {\n    let dest = src;\n    if (this.channelSize === 1) {\n      Logger.verbose('Encoder', 'Exploding into a larger array');\n      dest = this.allocate(textureSize) as Float32Array;\n      src.forEach((v, i) => dest[i * 4] = v);\n    }\n    return dest;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n\nexport class Uint8DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize = 4;\n  constructor(gl: WebGLRenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.ALPHA;\n      this.format = gl.ALPHA;  // not tested\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA;\n      this.format = gl.RGBA;\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Uint8Array, _textureSize: number): Encoder.DataArrayType {\n    return new Uint8Array(src.buffer, src.byteOffset, src.byteLength);\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Uint8Array(size * this.channelSize);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Uint8Array {\n    if (buffer instanceof Uint8Array) {\n      return buffer.subarray(0, dataSize);\n    }\n    throw new Error(`Invalid array type: ${buffer.constructor}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\nimport {assert} from '../../util';\n\n/** Layout preferences */\nexport interface WidthHeightPrefs {\n  breakAxis?: number;\n  isPacked?: boolean;\n  reverseWH?: boolean;\n}\n/**\n * TextureLayoutStrategy is an abstraction for different plans\n * for mapping n-dimensional arrays to 2D textures (and back)\n */\nexport interface TextureLayoutStrategy {\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number];\n}\n\n/**\n * This strategy try to find the minimal max(W,H) that fulfills (W * H == totalSize)\n */\nexport class AlwaysKeepOriginalSizeStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    // scalar tensor\n    if (shape.length === 0) {\n      return [1, 1];\n    }\n    const maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    const totalSize = shape.reduce((a, b) => a * b);\n\n    let width = Math.floor(Math.sqrt(totalSize));\n\n    for (; width < maxTextureSize && width < totalSize; width++) {\n      if (totalSize % width === 0) {\n        break;\n      }\n    }\n\n    if (width >= maxTextureSize || totalSize % width !== 0) {\n      throw new Error(`The given dimensions are outside this GPU's boundaries: ${shape}`);\n    }\n    return [width, totalSize / width];\n  }\n}\n\nexport class PreferLogicalStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const wh = this.computeTexture(shape, prefs);\n    if (prefs && prefs.isPacked) {\n      wh[0] /= 2;\n      wh[1] /= 2;\n    }\n    if (prefs && prefs.reverseWH) {\n      return [wh[1], wh[0]];\n    }\n    return wh;\n  }\n\n  computeTexture(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const isPacked = prefs && prefs.isPacked;\n    // scalar tensor\n    if (shape.length === 0) {\n      return isPacked ? [2, 2] : [1, 1];\n    }\n    let maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    let logShape = shape.slice(0);\n    if (isPacked) {\n      maxTextureSize = maxTextureSize * 2;\n\n      // This logic ensures we accurately count the number of packed texels needed\n      // to accommodate the tensor. We can only pack values in the same texel if\n      // they are from adjacent pairs of rows/cols within the same batch. So if a\n      // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n      // fact that the texels containing the third row are half empty.\n      logShape = logShape.map(\n          (d, i) => i >= logShape.length - 2 ? (logShape[i] % 2 === 0 ? logShape[i] : logShape[i] + 1) : logShape[i]);\n\n      // Packed texture height is at least 2 (the channel height of a single\n      // texel).\n      if (logShape.length === 1) {\n        logShape = [2, logShape[0]];\n      }\n    }\n\n    // If logical shape is 2, we don't squeeze, since we want to match physical.\n    if (logShape.length !== 2) {\n      const squeezeResult = squeezeShape(logShape);\n      logShape = squeezeResult.newShape;\n    }\n\n    const size = sizeFromShape(logShape);\n    if (logShape.length <= 1 && size <= maxTextureSize) {\n      return [1, size];\n    } else if (logShape.length === 2 && logShape[0] <= maxTextureSize && logShape[1] <= maxTextureSize) {\n      return logShape as [number, number];\n    } else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTextureSize && logShape[2] <= maxTextureSize) {\n      return [logShape[0] * logShape[1], logShape[2]];\n    } else if (logShape.length === 3 && logShape[0] <= maxTextureSize && logShape[1] * logShape[2] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2]];\n    } else if (\n        logShape.length === 4 && logShape[0] * logShape[1] * logShape[2] <= maxTextureSize &&\n        logShape[3] <= maxTextureSize) {\n      return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n    } else if (\n        logShape.length === 4 && logShape[0] <= maxTextureSize &&\n        logShape[1] * logShape[2] * logShape[3] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n    } else {\n      if (isPacked) {\n        // For packed textures size equals the number of channels required to\n        // accommodate the texture data. However in order to squarify such that\n        // inner dimensions stay even, we rewrite size to equal the number of\n        // texels. Then in the return statement we rehydrate the squarified\n        // dimensions to channel units.\n        return sizeToSquarishShape(size / 4).map(d => d * 2) as [number, number];\n      }\n      return sizeToSquarishShape(size);\n    }\n  }\n}\n\nexport function squeezeShape(shape: number[], axis?: number[]): {newShape: number[]; keptDims: number[]} {\n  const newShape: number[] = [];\n  const keptDims: number[] = [];\n  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\n  const axes = (axis == null || isEmptyArray) ? null : parseAxisParam(axis, shape).sort();\n  let j = 0;\n  for (let i = 0; i < shape.length; ++i) {\n    if (axes != null) {\n      if (axes[j] === i && shape[i] !== 1) {\n        throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\n      }\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\n        newShape.push(shape[i]);\n        keptDims.push(i);\n      }\n      if (axes[j] <= i) {\n        j++;\n      }\n    }\n    if (shape[i] !== 1) {\n      newShape.push(shape[i]);\n      keptDims.push(i);\n    }\n  }\n  return {newShape, keptDims};\n}\n\nexport function parseAxisParam(axis: number|number[], shape: number[]): number[] {\n  const rank = shape.length;\n\n  // Normalize input\n  axis = axis == null ? shape.map((s, i) => i) : ([] as number[]).concat(axis);\n\n  // Check for valid range\n  assert(\n      axis.every(ax => ax >= -rank && ax < rank),\n      () => `All values in axis param must be in range [-${rank}, ${rank}) but ` +\n          `got axis ${axis}`);\n\n  // Check for only integers\n  assert(\n      axis.every(isInt),\n      () => 'All values in axis param must be integers but ' +\n          `got axis ${axis}`);\n\n  // Handle negative axis.\n  return axis.map(a => a < 0 ? rank + a : a);\n}\nexport function isInt(a: number): boolean {\n  return a % 1 === 0;\n}\nexport function sizeFromShape(shape: number[]): number {\n  if (shape.length === 0) {\n    // Scalar.\n    return 1;\n  }\n  let size = shape[0];\n  for (let i = 1; i < shape.length; i++) {\n    size *= shape[i];\n  }\n  return size;\n}\nexport function getRowsCols(shape: number[]): [number, number] {\n  if (shape.length === 0) {\n    throw Error('Cannot get rows and columns of an empty shape array.');\n  }\n\n  return [shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\nexport function sizeToSquarishShape(size: number): [number, number] {\n  const width = Math.ceil(Math.sqrt(size));\n  return [width, Math.ceil(size / width)];\n}\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\n  return sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ShapeUtil} from '../../util';\n\nimport {TextureLayoutStrategy, WidthHeightPrefs} from './texture-layout-strategy';\nimport {TextureLayout, TextureType} from './types';\n\nexport const createTextureLayoutFromTextureType =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[],\n     textureType: TextureType): TextureLayout => {\n      const channel = (textureType === TextureType.unpacked || textureType === TextureType.unpackedReversed) ? 1 : 4;\n      const isPacked = textureType === TextureType.packed;\n      const reverseWH = (textureType === TextureType.unpackedReversed || textureType === TextureType.packed);\n      const breakAxis = textureType === TextureType.packedLastDimension ? shape.length - 1 : undefined;\n      const unpackedShape = textureType === TextureType.packedLastDimension ?\n          shape.map((d, i) => i === shape.length - 1 ? d * 4 : d) :\n          undefined;\n      return createTextureLayoutFromShape(\n          textureLayoutStrategy, shape, channel, unpackedShape, {isPacked, reverseWH, breakAxis});\n    };\n\nexport const calculateTextureWidthAndHeight =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], textureType: TextureType):\n        [number, number] => {\n          const layout = createTextureLayoutFromTextureType(textureLayoutStrategy, shape, textureType);\n          return [layout.width, layout.height];\n        };\n\n/**\n * Create a TextureLayout object from shape.\n */\nexport const createTextureLayoutFromShape =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], channels: 1|4 = 1,\n     unpackedShape?: readonly number[], prefs?: WidthHeightPrefs): TextureLayout => {\n      const isPacked = !!(prefs && prefs.isPacked);\n      const [width, height] = textureLayoutStrategy.computeTextureWH(isPacked ? unpackedShape || shape : shape, prefs);\n      const rank = shape.length;\n      let inferredDims = shape.slice(0);\n      if (rank === 0) {\n        inferredDims = [1];\n      }\n      if (channels === 1) {\n        // unpackedShape will take `shape` and not `inferredDims` so as to create a scalar Tensor if need be\n        unpackedShape = shape;\n      } else if (isPacked) {\n        if (channels !== 4) {\n          throw new Error('a packed texture must be 4-channel');\n        }\n        unpackedShape = shape;\n        if (rank > 0) {\n          inferredDims[rank - 1] = Math.ceil(inferredDims[rank - 1] / 2);\n        }\n        if (rank > 1) {\n          inferredDims[rank - 2] = Math.ceil(inferredDims[rank - 2] / 2);\n        }\n      } else if (!unpackedShape) {\n        throw new Error('Unpacked shape is needed when using channels > 1');\n      }\n      return {\n        width,\n        height,\n        channels,\n        isPacked,\n        shape: inferredDims,\n        strides: ShapeUtil.computeStrides(inferredDims),\n        unpackedShape,\n        reversedWH: (prefs && prefs.reverseWH)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger, Profiler} from '../../instrument';\nimport {Tensor} from '../../tensor';\n\nimport {Encoder} from './texture-data-encoder';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureData, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\nexport interface TextureManagerConfig {\n  reuseTextures?: boolean;\n}\n\n/**\n * TextureManager is the mainly responsible for caching Textures\n * Textures are cached in 2 levels:\n *   1. the texures which are associated with a dataId (from Tensor)\n *    Caching these is crucial to performance. These are In-use Textures\n *   2. textures which are not in use by any current ProgramInfo/Tensor\n *     These are called Free Textures\n * TextureManager is also used to help creating textures. For this it\n * uses WebGLContext and TextureLayoutStrategy\n */\nexport class TextureManager {\n  private readonly inUseTextures: Map<string, WebGLTexture[]>;\n  private readonly idleTextures: Map<string, WebGLTexture[]>;\n  private readonly textureLookup: Map<WebGLTexture, string>;\n  private readonly pendingRead: Map<Tensor.Id, Array<(arr: Tensor.NumberType) => void>> = new Map();\n\n  constructor(\n      public glContext: WebGLContext, public layoutStrategy: TextureLayoutStrategy, public profiler: Readonly<Profiler>,\n      private config: TextureManagerConfig) {\n    if (config.reuseTextures) {\n      this.inUseTextures = new Map();\n      this.idleTextures = new Map();\n      this.textureLookup = new Map();\n    }\n  }\n  createTextureFromLayout(\n      dataType: Tensor.DataType, layout: TextureLayout, data?: Tensor.NumberType, usage?: Encoder.Usage) {\n    const textureDataType = this.toEncoderType(dataType);\n\n    const encoder = this.glContext.getEncoder(textureDataType, layout.channels || 1, usage);\n    if (layout.isPacked && usage === Encoder.Usage.UploadOnly) {\n      throw new Error('not implemented');\n    }\n    const width = layout.width;\n    const height = layout.height;\n\n    let key: string|undefined;\n    let inUseTextures: WebGLTexture[]|undefined;\n    if (this.config.reuseTextures) {\n      key = `${width}x${height}_${encoder.format}_${encoder.internalFormat}_${encoder.textureType}`;\n      inUseTextures = this.inUseTextures.get(key);\n      if (!inUseTextures) {\n        inUseTextures = [];\n        this.inUseTextures.set(key, inUseTextures);\n      }\n\n      const idleTextures = this.idleTextures.get(key);\n      if (idleTextures && idleTextures.length > 0) {\n        const texture = idleTextures.pop()!;\n        inUseTextures.push(texture);\n        if (usage === Encoder.Usage.UploadOnly) {\n          this.glContext.updateTexture(texture, width, height, encoder, this.toTextureData(dataType, data)!);\n        }\n        return texture;\n      }\n    }\n\n    Logger.verbose('TextureManager', `Creating new texture of size ${layout.width}x${layout.height}`);\n    const texture = this.glContext.allocateTexture(width, height, encoder, this.toTextureData(dataType, data));\n\n    if (this.config.reuseTextures) {\n      inUseTextures!.push(texture);\n      this.textureLookup.set(texture, key!);\n    }\n    return texture;\n  }\n  readTexture(td: TextureData, dataType: Tensor.DataType, channels?: number): Tensor.NumberType {\n    if (!channels) {\n      channels = 1;\n    }\n    return this.profiler.event('backend', 'TextureManager.readTexture', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      return this.toTensorData(dataType, data);\n    });\n  }\n  async readTextureAsync(td: TextureData, dataType: Tensor.DataType, channels?: number): Promise<Tensor.NumberType> {\n    const dataId = td.tensor.dataId;\n    if (!channels) {\n      channels = 1;\n    }\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<Tensor.NumberType>(resolve => subscribers?.push(resolve));\n    }\n    return this.profiler.event('backend', 'TextureManager.readTextureAsync', async () => {\n      this.pendingRead.set(dataId, []);\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      // add a fence waiting for the data to be ready\n      await this.glContext.createAndWaitForFence();\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      const tensorData = this.toTensorData(dataType, data);\n      const subscribers = this.pendingRead.get(dataId);\n      this.pendingRead.delete(dataId);\n      subscribers?.forEach(resolve => resolve(tensorData));\n      return tensorData;\n    });\n  }\n  readUint8TextureAsFloat(td: TextureData): Float32Array {\n    return this.profiler.event('backend', 'TextureManager.readUint8TextureAsFloat', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b);\n      const data = this.glContext.readTexture(td.texture, td.width, td.height, dataSize * 4, 'byte', 4);\n      return new Float32Array(data.buffer, data.byteOffset, dataSize);\n    });\n  }\n  releaseTexture(textureData: TextureData, deleteTexture?: boolean): void {\n    let key: string|undefined;\n    if (this.config.reuseTextures) {\n      key = this.textureLookup.get(textureData.texture);\n      if (key) {\n        if (deleteTexture) {\n          this.textureLookup.delete(key);\n        }\n        const inUseTextures = this.inUseTextures.get(key);\n        if (inUseTextures) {\n          const index = inUseTextures.indexOf(textureData.texture);\n          if (index !== -1) {\n            inUseTextures.splice(index, 1);\n            let idleTextures = this.idleTextures.get(key);\n            if (!idleTextures) {\n              idleTextures = [];\n              this.idleTextures.set(key, idleTextures);\n            }\n            idleTextures.push(textureData.texture);\n          }\n        }\n      }\n    }\n\n    if (!key || deleteTexture) {\n      Logger.verbose('TextureManager', `Deleting texture of size ${textureData.width}x${textureData.height}`);\n      this.glContext.deleteTexture(textureData.texture);\n    }\n  }\n  toTensorData(dataType: Tensor.DataType, data: Encoder.DataArrayType): Tensor.NumberType {\n    switch (dataType) {\n      case 'int16':\n        return data instanceof Int16Array ? data : Int16Array.from(data);\n      case 'int32':\n        return data instanceof Int32Array ? data : Int32Array.from(data);\n      case 'int8':\n        return data instanceof Int8Array ? data : Int8Array.from(data);\n      case 'uint16':\n        return data instanceof Uint16Array ? data : Uint16Array.from(data);\n      case 'uint32':\n        return data instanceof Uint32Array ? data : Uint32Array.from(data);\n      case 'uint8':\n      case 'bool':\n        return data instanceof Uint8Array ? data : Uint8Array.from(data);\n      case 'float32':\n        return data instanceof Float32Array ? data : Float32Array.from(data);\n      case 'float64':\n        return data instanceof Float64Array ? data : Float64Array.from(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n  }\n  toTextureData(dataType: Tensor.DataType, data: Tensor.NumberType|undefined): Encoder.DataArrayType|undefined {\n    if (!data) {\n      return undefined;\n    }\n    return (data instanceof Float32Array) ? data : new Float32Array(data);\n    /*\n    switch (dataType) {\n      case 'int16':\n      case 'int32':\n      case 'uint16':\n      case 'uint32':\n        return (data.constructor === Uint32Array) ? data as Uint32Array : new Uint32Array(data);\n      case 'int8':\n      case 'uint8':\n      case 'bool':\n        return (data.constructor === Uint8Array) ? data as Uint8Array : new Uint8Array(data);\n      case 'float32':\n      case 'float64':\n        return (data.constructor === Float32Array) ? data as Float32Array : new Float32Array(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n    */\n  }\n  toEncoderType(_dataType: Tensor.DataType): Encoder.DataType {\n    return 'float';\n    // switch (dataType) {\n    //   case 'int16':\n    //   case 'int32':\n    //   case 'uint16':\n    //   case 'uint32':\n    //     return 'int';\n    //   case 'uint8':\n    //   case 'bool':\n    //     return 'byte';\n    //   case 'float32':\n    //   case 'float64':\n    //     return 'float';\n    //   default:\n    //     throw new Error(`TensorData type ${dataType} is not supported`);\n    // }\n  }\n  clearActiveTextures(): void {\n    this.glContext.clearActiveTextures();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../tensor';\n\n/**\n * Layout info is used for mapping n-dimensional array to 2D textures\n * The layout is created by the TextureLayoutStrategy based on\n * the Tensor's dimensions and strides\n */\nexport interface TextureLayout {\n  width: number;\n  height: number;\n  /**\n   * specify the number of value that encoded in a single pixel\n   */\n  channels: 1|2|3|4;\n  /**\n   * whether in packed mode or not\n   */\n  isPacked?: boolean;\n  /**\n   * the normalized shape\n   */\n  shape: readonly number[];\n  /**\n   * the stride of each dimensions, calculated according to shape\n   */\n  strides: readonly number[];\n  /**\n   * the original shape(dims) of the corresponding tensor\n   */\n  unpackedShape: readonly number[];\n\n  reversedWH?: boolean;\n}\nexport interface TextureData extends TextureLayout {\n  tensor: Tensor;\n  texture: WebGLTexture;\n}\n\nexport enum TextureType {\n  unpacked,              // <-- normal unpacked texture\n  unpackedReversed,      // <-- unpacked texture used in old ONNX.js implementation (deprecated)\n  packed,                // <-- normal packed texture\n  downloadUint8AsFloat,  // <-- ONLY used in texture downloading for iOS devices\n  packedLastDimension    // <-- ONLY used in old ONNX.js Conv implementation for input W (deprecated)\n}\n\nexport interface TensorInfo {\n  id?: Tensor.Id;\n  dims: readonly number[];\n  type: Tensor.DataType;\n  textureType: TextureType;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * A set of metadata of a shader program.\n */\nexport interface ProgramMetadata {\n  /**\n   * the name of the program. used for debugging and profiling\n   */\n  name: string;\n  /**\n   * texture types for each input\n   */\n  inputTypes: TextureType[];\n  /**\n   * names of each input\n   */\n  inputNames: string[];\n  /**\n   * an optional string as a cache hint in the artifact cache\n   */\n  cacheHint?: string;\n}\n\n/**\n * A ProgramInfoLoader allows\n */\nexport interface ProgramInfoLoader extends ProgramMetadata {\n  /**\n   * a function to get the program info\n   */\n  get(): ProgramInfo;\n}\n\n/**\n * A set of data that represent a shader program\n */\nexport interface ProgramInfo extends ProgramMetadata {\n  /**\n   * information of uniform variables\n   */\n  variables?: ProgramVariable[];\n  /**\n   * tensor info for output\n   */\n  output: TensorInfo;\n  /**\n   * the shader's processing source code\n   */\n  shaderSource: string;\n  /**\n   * whether the shader source contains a customized main function implementation\n   */\n  hasMain?: boolean;\n}\n\nexport interface VariableInfo {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * Information of uniforms that shader uses\n */\nexport interface UniformInfo {\n  type: 'sampler2D'|VariableInfo['type'];\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface UniformLocation extends UniformInfo {\n  location: WebGLUniformLocation;\n}\n\n/**\n * Artifact is the result of compilation\n * It does not contain input of output data\n * However anything that could be run as a \"program\"\n */\nexport interface Artifact {\n  programInfo: ProgramInfo;\n  program: WebGLProgram;\n  uniformLocations: UniformLocation[];\n  attribLocations: {position: number; textureCoord: number};\n}\nexport declare namespace Artifact {\n  type UniformLocations = Artifact['uniformLocations'];\n  type AttribLocations = Artifact['attribLocations'];\n}\n\nexport interface UniformData {\n  [name: string]: number|number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {assert} from '../../util';\n/**\n * Given a non RGBA shape calculate the R version\n * It is assumed that the dimensions are multiples of given channels\n * NOTE: it is always the last dim that gets packed.\n * @param unpackedShape original shape to create a packed version from\n */\nexport function getPackedShape(unpackedShape: readonly number[]): readonly number[] {\n  const len = unpackedShape.length;\n  return unpackedShape.slice(0, len - 1).concat(unpackedShape[len - 1] / 4);\n}\n\nexport async function repeatedTry(\n    checkFn: () => boolean, delayFn = (_counter: number) => 0, maxCounter?: number): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    let tryCount = 0;\n\n    const tryFn = () => {\n      if (checkFn()) {\n        resolve();\n        return;\n      }\n\n      tryCount++;\n\n      const nextBackoff = delayFn(tryCount);\n\n      if (maxCounter != null && tryCount >= maxCounter) {\n        reject();\n        return;\n      }\n      setTimeout(tryFn, nextBackoff);\n    };\n\n    tryFn();\n  });\n}\n\n/**\n * Generates the function name from an input sampler name.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerName(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1);\n}\n\n/**\n * Generates the function name from an input sampler name at output coordinates.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1) + 'AtOutCoords';\n}\n\n/** Returns a new input shape (a copy) that has a squeezed logical shape. */\nexport function squeezeInputShape(inputShape: readonly number[], squeezedShape: number[]): number[] {\n  // Deep copy.\n  let newInputShape: number[] = JSON.parse(JSON.stringify(inputShape));\n  newInputShape = squeezedShape;\n  return newInputShape;\n}\n\n/** Returns a list of squeezed parameters for shader functions */\nexport function getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n\n/** Returns the data type for different ranks. */\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\nexport function getGlChannels(rank = 6): string[] {\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nimport {WebGLContext} from './webgl-context';\n\nconst cache: {[contextId: string]: WebGLContext} = {};\n\n/**\n * This factory function creates proper WebGLRenderingContext based on\n * the current browsers capabilities\n * The order is from higher/most recent versions to most basic\n */\nexport function createWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\n  let context: WebGLContext|undefined;\n  if ((!contextId || contextId === 'webgl2') && 'webgl2' in cache) {\n    context = cache.webgl2;\n  } else if ((!contextId || contextId === 'webgl') && 'webgl' in cache) {\n    context = cache.webgl;\n  }\n\n  if (!context) {\n    try {\n      // try to create webgl context from an offscreen canvas\n      const offscreenCanvas = createOffscreenCanvas();\n      context = createNewWebGLContext(offscreenCanvas, contextId);\n    } catch (e) {\n      // if failed, fallback to try to use a normal canvas element\n      const canvas = createCanvas();\n      context = createNewWebGLContext(canvas, contextId);\n    }\n  }\n\n  contextId = contextId || context.version === 1 ? 'webgl' : 'webgl2';\n  const gl = context.gl;\n\n  cache[contextId] = context;\n\n  if (gl.isContextLost()) {\n    delete cache[contextId];\n    return createWebGLContext(contextId);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  return context;\n}\n\nexport function createNewWebGLContext(canvas: HTMLCanvasElement, contextId?: 'webgl'|'webgl2'): WebGLContext {\n  const contextAttributes: WebGLContextAttributes = {\n    alpha: false,\n    depth: false,\n    antialias: false,\n    stencil: false,\n    preserveDrawingBuffer: false,\n    premultipliedAlpha: false,\n    failIfMajorPerformanceCaveat: false\n  };\n  let gl: WebGLRenderingContext|null;\n  const ca = contextAttributes;\n  if (!contextId || contextId === 'webgl2') {\n    gl = canvas.getContext('webgl2', ca);\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 2);\n      } catch (err) {\n        Logger.warning('GlContextFactory', `failed to create WebGLContext using contextId 'webgl2'. Error: ${err}`);\n      }\n    }\n  }\n  if (!contextId || contextId === 'webgl') {\n    gl = canvas.getContext('webgl', ca) || canvas.getContext('experimental-webgl', ca) as WebGLRenderingContext;\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 1);\n      } catch (err) {\n        Logger.warning(\n            'GlContextFactory',\n            `failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: ${err}`);\n      }\n    }\n  }\n\n  throw new Error('WebGL is not supported');\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\ndeclare let OffscreenCanvas: {new (width: number, height: number): HTMLCanvasElement};\n\nfunction createCanvas(): HTMLCanvasElement {\n  if (typeof document === 'undefined') {\n    throw new TypeError('failed to create canvas: document is not supported');\n  }\n  const canvas: HTMLCanvasElement = document.createElement('canvas');\n  canvas.width = 1;\n  canvas.height = 1;\n  return canvas;\n}\n\nfunction createOffscreenCanvas(): HTMLCanvasElement {\n  if (typeof OffscreenCanvas === 'undefined') {\n    throw new TypeError('failed to create offscreen canvas: OffscreenCanvas is not supported');\n  }\n  return new OffscreenCanvas(1, 1);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport * as DataEncoders from './texture-data-encoder';\nimport {DataEncoder, Encoder} from './texture-data-encoder';\nimport {repeatedTry} from './utils';\n\nexport interface FenceContext {\n  query: WebGLSync|null;\n  isFencePassed(): boolean;\n}\n\ntype PollItem = {\n  isDoneFn: () => boolean; resolveFn: () => void;\n};\n\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n\n/**\n * Abstraction and wrapper around WebGLRenderingContext and its operations\n */\nexport class WebGLContext {\n  gl: WebGLRenderingContext;\n  version: 1|2;\n\n  private vertexbuffer: WebGLBuffer;\n  private framebuffer: WebGLFramebuffer;\n\n  // WebGL flags and vital parameters\n  private isFloatTextureAttachableToFrameBuffer: boolean;\n  isFloat32DownloadSupported: boolean;\n  isRenderFloat32Supported: boolean;\n  isBlendSupported: boolean;\n  maxTextureSize: number;\n  // private maxCombinedTextureImageUnits: number;\n  private maxTextureImageUnits: number;\n  // private maxCubeMapTextureSize: number;\n  // private shadingLanguageVersion: string;\n  // private webglVendor: string;\n  // private webglVersion: string;\n\n  // WebGL2 flags and vital parameters\n  // private max3DTextureSize: number;\n  // private maxArrayTextureLayers: number;\n  // private maxColorAttachments: number;\n  // private maxDrawBuffers: number;\n\n  // WebGL extensions\n  // eslint-disable-next-line camelcase\n  textureFloatExtension: OES_texture_float|null;\n  // eslint-disable-next-line camelcase\n  textureHalfFloatExtension: OES_texture_half_float|null;\n\n  // WebGL2 extensions\n  colorBufferFloatExtension: unknown|null;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  disjointTimerQueryWebgl2Extension: {TIME_ELAPSED_EXT: GLenum; GPU_DISJOINT_EXT: GLenum}|null;\n\n  private disposed: boolean;\n  private frameBufferBound = false;\n\n  constructor(gl: WebGLRenderingContext, version: 1|2) {\n    this.gl = gl;\n    this.version = version;\n\n    this.getExtensions();\n    this.vertexbuffer = this.createVertexbuffer();\n    this.framebuffer = this.createFramebuffer();\n    this.queryVitalParameters();\n  }\n\n  allocateTexture(width: number, height: number, encoder: DataEncoder, data?: Encoder.DataArrayType): WebGLTexture {\n    const gl = this.gl;\n    // create the texture\n    const texture = gl.createTexture();\n    // bind the texture so the following methods effect this texture.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    const buffer = data ? encoder.encode(data, width * height) : null;\n    gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,  // Level of detail.\n        encoder.internalFormat, width, height,\n        0,  // Always 0 in OpenGL ES.\n        encoder.format, encoder.textureType, buffer);\n    this.checkError();\n    return texture as WebGLTexture;\n  }\n  updateTexture(\n      texture: WebGLTexture, width: number, height: number, encoder: DataEncoder, data: Encoder.DataArrayType): void {\n    const gl = this.gl;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    const buffer = encoder.encode(data, width * height);\n    gl.texSubImage2D(\n        gl.TEXTURE_2D,\n        0,  // level\n        0,  // xoffset\n        0,  // yoffset\n        width, height, encoder.format, encoder.textureType, buffer);\n    this.checkError();\n  }\n  attachFramebuffer(texture: WebGLTexture, width: number, height: number): void {\n    const gl = this.gl;\n    // Make it the target for framebuffer operations - including rendering.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    this.checkError();\n    gl.viewport(0, 0, width, height);\n    gl.scissor(0, 0, width, height);\n  }\n  readTexture(\n      texture: WebGLTexture, width: number, height: number, dataSize: number, dataType: Encoder.DataType,\n      channels: number): Encoder.DataArrayType {\n    const gl = this.gl;\n    if (!channels) {\n      channels = 1;\n    }\n    if (!this.frameBufferBound) {\n      this.attachFramebuffer(texture, width, height);\n    }\n    const encoder = this.getEncoder(dataType, channels);\n    const buffer = encoder.allocate(width * height);\n    // bind texture to framebuffer\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    // TODO: Check if framebuffer is ready\n    gl.readPixels(0, 0, width, height, gl.RGBA, encoder.textureType, buffer);\n    this.checkError();\n    // unbind FB\n    return encoder.decode(buffer, dataSize);\n  }\n\n  isFramebufferReady(): boolean {\n    // TODO: Implement logic to check if the framebuffer is ready\n    return true;\n  }\n  getActiveTexture(): string {\n    const gl = this.gl;\n    const n = gl.getParameter(this.gl.ACTIVE_TEXTURE);\n    return `TEXTURE${(n - gl.TEXTURE0)}`;\n  }\n  getTextureBinding(): WebGLTexture {\n    return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);\n  }\n  getFramebufferBinding(): WebGLFramebuffer {\n    return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);\n  }\n  setVertexAttributes(positionHandle: number, textureCoordHandle: number): void {\n    const gl = this.gl;\n    gl.vertexAttribPointer(positionHandle, 3, gl.FLOAT, false, 20, 0);\n    gl.enableVertexAttribArray(positionHandle);\n    if (textureCoordHandle !== -1) {\n      gl.vertexAttribPointer(textureCoordHandle, 2, gl.FLOAT, false, 20, 12);\n      gl.enableVertexAttribArray(textureCoordHandle);\n    }\n    this.checkError();\n  }\n  createProgram(\n      vertexShader: WebGLShader,\n      fragShader: WebGLShader,\n      ): WebGLProgram {\n    const gl = this.gl;\n    const program = gl.createProgram()!;\n\n    // the program consists of our shaders\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragShader);\n    gl.linkProgram(program);\n    return program;\n  }\n  compileShader(shaderSource: string, shaderType: number): WebGLShader {\n    const gl = this.gl;\n    const shader = gl.createShader(shaderType);\n    if (!shader) {\n      throw new Error(`createShader() returned null with type ${shaderType}`);\n    }\n\n    gl.shaderSource(shader, shaderSource);\n    gl.compileShader(shader);\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\n      throw new Error(`Failed to compile shader: ${gl.getShaderInfoLog(shader)}\nShader source:\n${shaderSource}`);\n    }\n    return shader;\n  }\n  deleteShader(shader: WebGLShader): void {\n    this.gl.deleteShader(shader);\n  }\n  bindTextureToUniform(texture: WebGLTexture, position: number, uniformHandle: WebGLUniformLocation): void {\n    const gl = this.gl;\n    gl.activeTexture(gl.TEXTURE0 + position);\n    this.checkError();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    this.checkError();\n    gl.uniform1i(uniformHandle, position);\n    this.checkError();\n  }\n  draw(): void {\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\n    this.checkError();\n  }\n  checkError(): void {\n    if (env.debug) {\n      const gl = this.gl;\n      const error = gl.getError();\n      let label = '';\n      switch (error) {\n        case (gl.NO_ERROR):\n          return;\n        case (gl.INVALID_ENUM):\n          label = 'INVALID_ENUM';\n          break;\n        case (gl.INVALID_VALUE):\n          label = 'INVALID_VALUE';\n          break;\n        case (gl.INVALID_OPERATION):\n          label = 'INVALID_OPERATION';\n          break;\n        case (gl.INVALID_FRAMEBUFFER_OPERATION):\n          label = 'INVALID_FRAMEBUFFER_OPERATION';\n          break;\n        case (gl.OUT_OF_MEMORY):\n          label = 'OUT_OF_MEMORY';\n          break;\n        case (gl.CONTEXT_LOST_WEBGL):\n          label = 'CONTEXT_LOST_WEBGL';\n          break;\n        default:\n          label = `Unknown WebGL Error: ${error.toString(16)}`;\n      }\n      throw new Error(label);\n    }\n  }\n  deleteTexture(texture: WebGLTexture): void {\n    this.gl.deleteTexture(texture);\n  }\n  deleteProgram(program: WebGLProgram): void {\n    this.gl.deleteProgram(program);\n  }\n  getEncoder(dataType: Encoder.DataType, channels: number, usage: Encoder.Usage = Encoder.Usage.Default): DataEncoder {\n    if (this.version === 2) {\n      return new DataEncoders.RedFloat32DataEncoder(this.gl as WebGL2RenderingContext, channels);\n    }\n\n    switch (dataType) {\n      case 'float':\n        if (usage === Encoder.Usage.UploadOnly || this.isRenderFloat32Supported) {\n          return new DataEncoders.RGBAFloatDataEncoder(this.gl, channels);\n        } else {\n          return new DataEncoders.RGBAFloatDataEncoder(\n              this.gl, channels, this.textureHalfFloatExtension!.HALF_FLOAT_OES);\n        }\n      case 'int':\n        throw new Error('not implemented');\n      case 'byte':\n        return new DataEncoders.Uint8DataEncoder(this.gl, channels);\n      default:\n        throw new Error(`Invalid dataType: ${dataType}`);\n    }\n  }\n  clearActiveTextures(): void {\n    const gl = this.gl;\n    for (let unit = 0; unit < this.maxTextureImageUnits; ++unit) {\n      gl.activeTexture(gl.TEXTURE0 + unit);\n      gl.bindTexture(gl.TEXTURE_2D, null);\n    }\n  }\n  dispose(): void {\n    if (this.disposed) {\n      return;\n    }\n    const gl = this.gl;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteFramebuffer(this.framebuffer);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    gl.deleteBuffer(this.vertexbuffer);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    gl.finish();\n    this.disposed = true;\n  }\n\n  private createDefaultGeometry(): Float32Array {\n    // Sets of x,y,z(=0),s,t coordinates.\n    return new Float32Array([\n      -1.0, 1.0,  0.0, 0.0, 1.0,  // upper left\n      -1.0, -1.0, 0.0, 0.0, 0.0,  // lower left\n      1.0,  1.0,  0.0, 1.0, 1.0,  // upper right\n      1.0,  -1.0, 0.0, 1.0, 0.0   // lower right\n    ]);\n  }\n  private createVertexbuffer(): WebGLBuffer {\n    const gl = this.gl;\n    const buffer = gl.createBuffer();\n    if (!buffer) {\n      throw new Error('createBuffer() returned null');\n    }\n    const geometry = this.createDefaultGeometry();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, geometry, gl.STATIC_DRAW);\n    this.checkError();\n    return buffer;\n  }\n  private createFramebuffer(): WebGLFramebuffer {\n    const fb = this.gl.createFramebuffer();\n    if (!fb) {\n      throw new Error('createFramebuffer returned null');\n    }\n    return fb;\n  }\n\n  private queryVitalParameters(): void {\n    const gl = this.gl;\n\n    this.isFloatTextureAttachableToFrameBuffer = this.checkFloatTextureAttachableToFrameBuffer();\n    this.isRenderFloat32Supported = this.checkRenderFloat32();\n    this.isFloat32DownloadSupported = this.checkFloat32Download();\n\n    if (this.version === 1 && !this.textureHalfFloatExtension && !this.isRenderFloat32Supported) {\n      throw new Error('both float32 and float16 TextureType are not supported');\n    }\n\n    this.isBlendSupported = !this.isRenderFloat32Supported || this.checkFloat32Blend();\n\n    // this.maxCombinedTextureImageUnits = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n    this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    this.maxTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n    // this.maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n    // this.shadingLanguageVersion = gl.getParameter(gl.SHADING_LANGUAGE_VERSION);\n    // this.webglVendor = gl.getParameter(gl.VENDOR);\n    // this.webglVersion = gl.getParameter(gl.VERSION);\n\n    if (this.version === 2) {\n      // this.max3DTextureSize = gl.getParameter(WebGL2RenderingContext.MAX_3D_TEXTURE_SIZE);\n      // this.maxArrayTextureLayers = gl.getParameter(WebGL2RenderingContext.MAX_ARRAY_TEXTURE_LAYERS);\n      // this.maxColorAttachments = gl.getParameter(WebGL2RenderingContext.MAX_COLOR_ATTACHMENTS);\n      // this.maxDrawBuffers = gl.getParameter(WebGL2RenderingContext.MAX_DRAW_BUFFERS);\n    }\n  }\n  private getExtensions(): void {\n    if (this.version === 2) {\n      this.colorBufferFloatExtension = this.gl.getExtension('EXT_color_buffer_float');\n      this.disjointTimerQueryWebgl2Extension = this.gl.getExtension('EXT_disjoint_timer_query_webgl2');\n    } else {\n      this.textureFloatExtension = this.gl.getExtension('OES_texture_float');\n      this.textureHalfFloatExtension = this.gl.getExtension('OES_texture_half_float');\n    }\n  }\n\n  private checkFloatTextureAttachableToFrameBuffer(): boolean {\n    // test whether Float32 texture is supported:\n    // STEP.1 create a float texture\n    const gl = this.gl;\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n    // STEP.2 bind a frame buffer\n    const frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    // STEP.3 attach texture to framebuffer\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    // STEP.4 test whether framebuffer is complete\n    const isComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteTexture(texture);\n    gl.deleteFramebuffer(frameBuffer);\n    return isComplete;\n  }\n\n  private checkRenderFloat32(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  private checkFloat32Download(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n      if (!this.gl.getExtension('WEBGL_color_buffer_float')) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  /**\n   * Check whether GL_BLEND is supported\n   */\n  private checkFloat32Blend(): boolean {\n    // it looks like currently (2019-05-08) there is no easy way to detect whether BLEND is supported\n    // https://github.com/microsoft/onnxjs/issues/145\n\n    const gl = this.gl;\n\n    let texture: WebGLTexture|null|undefined;\n    let frameBuffer: WebGLFramebuffer|null|undefined;\n    let vertexShader: WebGLShader|null|undefined;\n    let fragmentShader: WebGLShader|null|undefined;\n    let program: WebGLProgram|null|undefined;\n\n    try {\n      texture = gl.createTexture();\n      frameBuffer = gl.createFramebuffer();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n      gl.enable(gl.BLEND);\n\n      vertexShader = gl.createShader(gl.VERTEX_SHADER);\n      if (!vertexShader) {\n        return false;\n      }\n      gl.shaderSource(vertexShader, 'void main(){}');\n      gl.compileShader(vertexShader);\n\n      fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n      if (!fragmentShader) {\n        return false;\n      }\n      gl.shaderSource(fragmentShader, 'precision highp float;void main(){gl_FragColor=vec4(0.5);}');\n      gl.compileShader(fragmentShader);\n\n      program = gl.createProgram();\n      if (!program) {\n        return false;\n      }\n      gl.attachShader(program, vertexShader);\n      gl.attachShader(program, fragmentShader);\n      gl.linkProgram(program);\n      gl.useProgram(program);\n\n      gl.drawArrays(gl.POINTS, 0, 1);\n      return gl.getError() === gl.NO_ERROR;\n\n    } finally {\n      gl.disable(gl.BLEND);\n\n      if (program) {\n        gl.deleteProgram(program);\n      }\n      if (vertexShader) {\n        gl.deleteShader(vertexShader);\n      }\n      if (fragmentShader) {\n        gl.deleteShader(fragmentShader);\n      }\n      if (frameBuffer) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.deleteFramebuffer(frameBuffer);\n      }\n      if (texture) {\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        gl.deleteTexture(texture);\n      }\n    }\n  }\n\n  beginTimer(): WebGLQuery {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      const query = gl2.createQuery() as WebGLQuery;\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported.');\n    }\n  }\n\n  endTimer() {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n  }\n\n  isTimerResultAvailable(query: WebGLQuery): boolean {\n    let available = false, disjoint = false;\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      disjoint = gl2.getParameter(ext.GPU_DISJOINT_EXT);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n\n    return available && !disjoint;\n  }\n\n  getTimerResult(query: WebGLQuery): number {\n    let timeElapsed = 0;\n    if (this.version === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      timeElapsed = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      gl2.deleteQuery(query);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n    // return miliseconds\n    return timeElapsed / 1000000;\n  }\n\n  async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await repeatedTry(() => this.isTimerResultAvailable(query));\n    return this.getTimerResult(query);\n  }\n\n  public async createAndWaitForFence(): Promise<void> {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  private createFence(gl: WebGLRenderingContext): FenceContext {\n    let isFencePassed: () => boolean;\n    const gl2 = gl as WebGL2RenderingContext;\n    const query = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n    gl.flush();\n    if (query === null) {\n      isFencePassed = () => true;\n    } else {\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(query, 0, 0);\n        return status === gl2.ALREADY_SIGNALED || status === gl2.CONDITION_SATISFIED;\n      };\n    }\n    return {query, isFencePassed};\n  }\n\n  async pollFence(fenceContext: FenceContext) {\n    return new Promise<void>(resolve => {\n      void this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n\n  private itemsToPoll: PollItem[] = [];\n\n  pollItems(): void {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {resolveFn} = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  private async addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\n    this.itemsToPoll.push({isDoneFn, resolveFn});\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    await repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    });\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from './backend';\nimport {Graph} from './graph';\nimport {Logger, Profiler} from './instrument';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nclass KernelOp {\n  constructor(public op: Operator, public node: Graph.Node) {}\n}\n\nexport class ExecutionPlan {\n  constructor(private graph: Graph, ops: Operator[], private profiler: Readonly<Profiler>) {\n    this.initialize(ops);\n  }\n\n  initialize(ops: Operator[]) {\n    this.profiler.event('session', 'ExecutionPlan.initialize', () => {\n      const graphNodes = this.graph.getNodes();\n      if (graphNodes.length !== ops.length) {\n        throw new Error('The size of nodes and OPs do not match.');\n      }\n\n      this._ops = ops.map((op, i) => new KernelOp(op, graphNodes[i]));\n      this.reset();\n\n      // look for starter node(s)\n      this._starter = [];\n      this._ops.forEach((op, i) => {\n        let resolved = true;\n        for (const input of op.node.inputs) {\n          if (\n              !this._values[input]                                   // not an initialized input\n              && this.graph.getInputIndices().indexOf(input) === -1  // not model input\n          ) {\n            resolved = false;\n            break;\n          }\n        }\n        if (resolved) {\n          this._starter.push(i);\n        }\n      });\n    });\n  }\n\n  reset() {\n    this._values = this.graph.getValues().map(i => i.tensor);\n  }\n\n  async execute(sessionHandler: SessionHandler, modelInputs: Tensor[]): Promise<Tensor[]> {\n    return this.profiler.event('session', 'ExecutionPlan.execute', async () => {\n      // reset mediem result\n      this.reset();\n\n      // create inference handler\n      const inferenceHandler = sessionHandler.createInferenceHandler();\n\n      // populate inputs value\n      const graphInputs = this.graph.getInputIndices();\n      if (modelInputs.length !== graphInputs.length) {\n        throw new Error(`number of input tensors don't match the number of inputs to the model: actual: ${\n            modelInputs.length} expected: ${graphInputs.length}`);\n      }\n\n      modelInputs.forEach((input, i) => {\n        const index = graphInputs[i];\n        this._values[index] = input;\n      });\n\n      // prepare running sequence\n      const sequence: number[] = this._starter.slice(0);\n\n      // execution iterations\n      const graphValues = this.graph.getValues();\n      const graphNodes = this.graph.getNodes();\n\n      let rear = 0;\n      while (rear < sequence.length) {\n        const thisOpIndex = sequence[rear++];\n        const thisOp = this._ops[thisOpIndex];\n\n        // check input\n        const inputList = thisOp.node.inputs.map(i => this._values[i]);\n        if (inputList.indexOf(undefined) !== -1) {\n          throw new Error(`unresolved input detected: op: ${thisOp.node}`);\n        }\n\n        // run\n        const inputTensors = inputList as Tensor[];\n        Logger.verbose(\n            'ExecPlan',\n            `Runing op:${thisOp.node.name} (${\n                inputTensors.map((t, i) => `'${thisOp.node.inputs[i]}': ${t.type}[${t.dims.join(',')}]`).join(', ')})`);\n\n        const outputList = await this.profiler.event(\n            'node', thisOp.node.name, async () => thisOp.op.impl(inferenceHandler, inputTensors, thisOp.op.context));\n\n        // check output\n        if (outputList.length !== thisOp.node.outputs.length) {\n          throw new Error('the size of output does not match model definition.');\n        }\n\n        // fill value\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          if (this._values[j]) {\n            throw new Error(`output [${j}] already has value: op:${thisOp.node.name}`);\n          }\n          this._values[j] = output;\n        });\n\n        // resolve downstream nodes\n        const downstreamNodes = new Set<number>();\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          for (const currentDownstreamNodeIndex of graphValues[j].to) {\n            const currentDownstreamNode = graphNodes[currentDownstreamNodeIndex];\n            let resolved = true;\n            for (const k of currentDownstreamNode.inputs) {\n              if (!this._values[k]) {\n                resolved = false;\n                break;\n              }\n            }\n            if (resolved) {\n              downstreamNodes.add(currentDownstreamNodeIndex);\n            }\n          }\n        });\n        sequence.push(...downstreamNodes);\n      }\n\n      const output: Tensor[] = [];\n      for (let i = 0; i < this.graph.getOutputIndices().length; i++) {\n        const outputIndex = this.graph.getOutputIndices()[i];\n        const outputTensor = this._values[outputIndex];\n        if (outputTensor === undefined) {\n          throw new Error(`required output [${outputIndex}] does not have value`);\n        }\n        if (outputIndex === 0) {\n          await outputTensor.getData();\n        } else {\n          // eslint-disable-next-line no-unused-expressions\n          outputTensor.data;\n        }\n        output.push(outputTensor);\n      }\n      Logger.verbose('ExecPlan', 'disposing of inferenceHandler');\n      inferenceHandler.dispose();\n      return output;\n    });\n  }\n\n  _values: Array<Tensor|undefined>;\n  _ops: KernelOp[];\n  _starter: number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from './attribute';\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\nimport {onnx} from './ort-schema/protobuf/onnx';\nimport {Tensor} from './tensor';\nimport {LongUtil, MAX_CLIP, MIN_CLIP, ProtoUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Graph {\n  export interface Shape {\n    readonly dims: readonly number[];\n  }\n  export interface ValueType {\n    readonly tensorType: Tensor.DataType;\n    readonly shape: Shape;\n  }\n  export interface Value {\n    // the tensor data. empty for non-initialized inputs\n    readonly tensor?: Tensor;\n\n    // index to the Node where the value comes from. -1 for initializer.\n    readonly from: number;\n\n    // indices to the Nodes where the values go to.\n    readonly to: readonly number[];\n\n    // value type specification. empty for non-input values.\n    readonly type?: ValueType;\n  }\n  export interface Node {\n    // name of the node\n    readonly name: string;\n\n    // the operator type\n    readonly opType: string;\n\n    // indices to the Values where the inputs come from.\n    readonly inputs: readonly number[];\n\n    // indices to the Values where the outpus go to.\n    readonly outputs: readonly number[];\n\n    // the attributes that used by the operator\n    readonly attributes: Attribute;\n  }\n\n  /**\n   * a Transformer is an instance that allows all possible transformation operations that applied to a graph\n   */\n  export interface Transformer {\n    removeAllIdentityNodes(): void;\n    removeAllDropoutNodes(): void;\n    fuseConvActivationNodes(): void;\n    // TODO: add generic functions to manipulate the graph\n  }\n\n  // an initializer can use transformer to transform the graph\n  export interface Initializer {\n    transformGraph(transformer: Transformer): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Graph {\n  getInputIndices(): readonly number[];\n  getInputNames(): readonly string[];\n  getOutputIndices(): readonly number[];\n  getOutputNames(): readonly string[];\n  getValues(): readonly Graph.Value[];\n  getNodes(): readonly Graph.Node[];\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-redeclare\nexport const Graph = {\n  /**\n   * construct a graph from a graph protobuf type\n   */\n  from: (graphProto: onnx.IGraphProto|ortFbs.Graph, initializer?: Graph.Initializer) =>\n      new GraphImpl(graphProto, initializer),\n};\n\nclass Value implements Graph.Value {\n  constructor(valueInfo?: onnx.IValueInfoProto) {\n    this._from = undefined;\n    this._to = [];\n    this.tensor = undefined;\n    this.type = undefined;\n\n    if (valueInfo) {\n      this.type = ProtoUtil.tensorValueTypeFromProto(valueInfo.type!.tensorType!);\n    }\n  }\n\n  _from?: number;  // -1 represent from initializer\n  get from() {\n    return this._from!;\n  }\n  _to: number[];\n  get to() {\n    return this._to;\n  }\n  type?: Graph.ValueType;\n  tensor?: Tensor;\n}\n\nclass Node implements Graph.Node {\n  constructor(_nodeProto: onnx.INodeProto|ortFbs.Node, name?: string) {\n    if (_nodeProto instanceof onnx.NodeProto) {\n      this.name = _nodeProto.name;\n      this.opType = _nodeProto.opType;\n      this.attributes = new Attribute(_nodeProto.attribute);\n    } else if (_nodeProto instanceof ortFbs.Node) {\n      this.name = name ?? _nodeProto.name()!;\n      this.opType = _nodeProto.opType()!;\n      this.attributes = new Attribute(ProtoUtil.tensorAttributesFromORTFormat(_nodeProto));\n    }\n\n    this.inputs = [];\n    this.outputs = [];\n    this.executeNode = true;\n  }\n\n  name: string;\n  opType: string;\n  inputs: number[];\n  outputs: number[];\n  attributes: Attribute;\n  executeNode: boolean;\n}\n\nclass GraphImpl implements Graph, Graph.Transformer {\n  private _allData: Value[];\n\n  private _allInputIndices: number[];\n  private _allInputNames: string[];\n\n  private _allOutputIndices: number[];\n  private _allOutputNames: string[];\n\n  private _nodes: Node[];\n\n  constructor(graph: onnx.IGraphProto|ortFbs.Graph, graphInitializer?: Graph.Initializer) {\n    if (!graph) {\n      throw new TypeError('graph is empty');\n    }\n\n    // build the graph - will throw exceptions if something fatal is detected\n    this.buildGraph(graph);\n\n    // execute any transformation logic for the graph (if applicable)\n    this.transformGraph(graphInitializer);\n\n    // check for cycles and other inconsistencies - will throw exceptions if something fatal is detected\n    this.checkIsAcyclic();\n  }\n\n  getInputIndices(): readonly number[] {\n    return this._allInputIndices;\n  }\n\n  getInputNames(): readonly string[] {\n    return this._allInputNames;\n  }\n\n  getOutputIndices(): readonly number[] {\n    return this._allOutputIndices;\n  }\n\n  getOutputNames(): readonly string[] {\n    return this._allOutputNames;\n  }\n\n  getValues(): readonly Graph.Value[] {\n    return this._allData;\n  }\n\n  getNodes(): readonly Graph.Node[] {\n    return this._nodes;\n  }\n\n  private buildGraph(graph: onnx.IGraphProto|ortFbs.Graph) {\n    // build the graph - will throw exceptions if something fatal is detected\n    if (graph instanceof onnx.GraphProto) {\n      this.buildGraphFromOnnxFormat(graph);\n    } else if (graph instanceof ortFbs.Graph) {\n      this.buildGraphFromOrtFormat(graph);\n    } else {\n      throw new TypeError('Graph type is not supported.');\n    }\n  }\n  private buildGraphFromOnnxFormat(graph: onnx.IGraphProto) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    if (!graph.input) {\n      throw new Error('missing information in graph: input');\n    }\n    const inputValueNames = [];\n    for (const i of graph.input) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated input name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      inputValueNames.push(i.name!);\n    }\n\n    // scan all initializers\n    if (!graph.initializer) {\n      throw new Error('missing information in graph: initializer');\n    }\n    for (const i of graph.initializer) {\n      let index = dataIndices.get(i.name!);\n      if (index === undefined) {\n        const value = new Value();\n        value.type = {\n          shape: {dims: ProtoUtil.tensorDimsFromProto(i.dims!)},\n          tensorType: ProtoUtil.tensorDataTypeFromProto(i.dataType!)\n        };\n        index = this._allData.push(value) - 1;\n        dataIndices.set(i.name!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromProto(i);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    if (!graph.output) {\n      throw new Error('missing information in graph: output');\n    }\n    for (const i of graph.output) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated output name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(i.name!);\n    }\n\n    // scan all nodes\n    if (!graph.node) {\n      throw new Error('missing information in graph: node');\n    }\n    for (const nodeProto of graph.node) {\n      if (!nodeProto.name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          const name = `unnamed_${nodeProto.opType}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            nodeProto.name = name;\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(nodeProto.name)) {\n        throw new Error(`duplicated node name: ${nodeProto.name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto)) - 1;\n      nodesIndices.set(nodeProto.name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n      if (!nodeProto.output) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (const output of nodeProto.output) {\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType === 'Constant') {\n          if (!nodeProto.attribute || nodeProto.attribute.length !== 1 || !nodeProto.attribute[0].t) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (!nodeProto.output || nodeProto.output.length !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromProto(nodeProto.attribute[0].t);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n\n      if (!nodeProto.input) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (const input of nodeProto.input) {\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          // handle exception when opset > 9 and roi not given\n          if (input === '' && nodeProto.input.length === 3 && nodeProto.opType === 'Resize') {\n            continue;\n          }\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto.name}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n\n    return true;\n  }\n\n  private buildGraphFromOrtFormat(graph: ortFbs.Graph) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    const inputValueNames = [];\n    for (let i = 0; i < graph.inputsLength(); i++) {\n      const inputName = graph.inputs(i);\n      if (dataIndices.has(inputName)) {\n        throw new Error(`duplicated input name: ${inputName}`);\n      }\n      // Find the input typeInfo from nodeargs\n      for (let j = 0; j < graph.nodeArgsLength(); j++) {\n        if (graph.nodeArgs(j)?.name() === inputName) {\n          const value = new Value();\n          const valueType = graph.nodeArgs(j)?.type()?.valueType();\n          if (valueType !== ortFbs.TypeInfoValue.tensor_type) {\n            throw new Error('Unexpected value type for the nodeArg.');\n          }\n          const valueInfo = graph.nodeArgs(j)!.type()!.value(new ortFbs.TensorTypeAndShape())!;\n          const type = ProtoUtil.tensorDataTypeFromProto(valueInfo.elemType());\n          const shape = valueInfo.shape()!;\n          const dims = [];\n          for (let k = 0; k < shape.dimLength()!; k++) {\n            dims.push(LongUtil.longToNumber(shape.dim(k)!.value()!.dimValue()!));\n          }\n          value.type = {shape: {dims}, tensorType: type};\n          const currentIndex = this._allData.push(value) - 1;\n          dataIndices.set(inputName, currentIndex);\n          inputValueNames.push(inputName);\n        }\n      }\n    }\n    // check initializers\n    for (let i = 0; i < graph.initializersLength(); i++) {\n      const initializer = graph.initializers(i)!;\n      let index = dataIndices.get(initializer.name()!);\n      if (index === undefined) {\n        const value = new Value();\n        const dims = ProtoUtil.tensorDimsFromORTFormat(initializer);\n        const type = ProtoUtil.tensorDataTypeFromProto(initializer.dataType());\n        value.type = {shape: {dims}, tensorType: type};\n        index = this._allData.push(value) - 1;\n        dataIndices.set(initializer.name()!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromOrtTensor(initializer);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    for (let i = 0; i < graph.outputsLength(); i++) {\n      const outputName = graph.outputs(i);\n      if (dataIndices.has(outputName)) {\n        throw new Error(`duplicated output name: ${outputName}`);\n      }\n      const currentIndex = this._allData.push(new Value()) - 1;\n      dataIndices.set(outputName, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(outputName);\n    }\n\n    // scan all nodes\n    if (!graph.nodes) {\n      throw new Error('missing information in graph: node');\n    }\n    for (let i = 0; i < graph.nodesLength(); i++) {\n      const nodeProto = graph.nodes(i);\n      let name = nodeProto!.name();\n      if (!name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          name = `unnamed_${nodeProto!.opType()}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            // an unique name is found. break.\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(name)) {\n        throw new Error(`duplicated node name: ${name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto!, name)) - 1;\n      nodesIndices.set(name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i);\n      if (nodeProto == null) {\n        throw new Error(`No node exists at index ${i}`);\n      }\n      if (nodeProto?.outputsLength() === 0) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto?.outputsLength(); j++) {\n        const output = nodeProto?.outputs(j);\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType() === 'Constant') {\n          if (nodeProto.attributesLength() !== 1 || !nodeProto.attributes(0)!.t()) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (nodeProto.outputsLength() !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromOrtTensor(nodeProto.attributes(0)!.t()!);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i)!;\n\n      if (nodeProto.inputsLength() === 0) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto.inputsLength()!; j++) {\n        const input = nodeProto.inputs(j)!;\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto!.name()}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n  }\n\n  private checkIsAcyclic() {\n    // go through the graph and check for cycles or other fatal inconsistencies\n    const starters: Set<number> = new Set<number>();\n    this._allInputIndices.forEach(i => {\n      const data = this._allData[i];\n      data._to.forEach(j => {\n        starters.add(j);\n      });\n    });\n\n    // Iterative DFS to check for cycles\n    const nodesStack = Array.from(starters);\n    const nodesState = new Array<string>(this._nodes.length).fill('white');\n\n    while (nodesStack.length > 0) {\n      const nodeIndex = nodesStack.pop()!;\n      // this node has now been processed completely. Mark this node 'black' to denote this.\n      if (nodesState[nodeIndex] === 'gray') {\n        nodesState[nodeIndex] = 'black';\n      } else {\n        // this node is under processing stage. mark this node 'gray' to denote this.\n        nodesStack.push(nodeIndex);\n        nodesState[nodeIndex] = 'gray';\n\n        this._nodes[nodeIndex].outputs.forEach((outgoingEdgeIndex) => {\n          const data = this._allData[outgoingEdgeIndex];\n          if (typeof data.tensor !== 'undefined') {\n            throw new Error('node outputs should not be initialized');\n          }\n          if (data._from !== nodeIndex) {\n            throw new Error('from property of the Value object doesn\\'t match index of Node being processed');\n          }\n          data._to.forEach((downstreamNodeIndex) => {\n            // back edge found - cyclic\n            if (nodesState[downstreamNodeIndex] === 'gray') {\n              throw new Error('model graph is cyclic');\n            }\n            // tree edge found - continue processing by adding it to stack\n            else if (nodesState[downstreamNodeIndex] === 'white') {\n              nodesStack.push(downstreamNodeIndex);\n            }\n          });\n        });\n      }\n    }\n  }\n\n  private transformGraph(graphInitializer?: Graph.Initializer): void {\n    // apply common transform\n    this.removeAllIdentityNodes();\n    this.removeAllDropoutNodes();\n    this.fuseConvActivationNodes();\n    // apply initializer specific transform\n    if (graphInitializer) {\n      graphInitializer.transformGraph(this);\n    }\n\n    // finalize graph\n    this.finalizeGraph();\n  }\n\n  /**\n   * finalize the graph.\n   *\n   * this function should be called after all the transformation completed.\n   * this function removes all unnecessary nodes and values from the graph\n   */\n  finalizeGraph() {\n    let offset = 0;\n    // delete all nodes that are not being executed\n    // The graph is represented using these two arrays\n    // this._nodes - Array holding the kernels to execute - each entry is a kernel pointing to this._allData\n    // this._allData - hold 2 fields - to [] & from - these feileds hold the graph map for inputs and outputs per node\n    // newIndices - remapping the graph after reading the flag 'executeNode'\n    const newIndices = new Array<number>(this._nodes.length, 0);\n    let nodePossition = 0;\n\n    for (let i = 0; i < this._nodes.length; i++) {\n      // giving new indexes to the nodes based on execution flag\n      newIndices[i] = nodePossition;\n      if (this._nodes[i].executeNode) {\n        if (nodePossition !== i) {\n          this._nodes[nodePossition] = this._nodes[i];\n        }\n        nodePossition++;\n\n      } else {\n        // delete all output values\n        this._nodes[i].outputs.forEach(ind => {\n          this._allData[ind]._from = -2;\n        });\n      }\n    }\n\n    // removing the unused nodes\n    this._nodes.splice(nodePossition, this._nodes.length - nodePossition);\n\n    // Updating this._allData according to the new this._nodes\n    for (let i = 0; i < this._allData.length; i++) {\n      const currentData = this._allData[i];\n      if (currentData._from !== undefined && currentData._from !== -1 && currentData._from !== -2) {\n        currentData._from = newIndices[currentData._from];\n      }\n\n      for (let j = 0; j < currentData._to.length; j++) {\n        if (currentData._to[j] >= 0) {\n          currentData._to[j] = newIndices[currentData._to[j]];\n        } else {\n          throw new Error('Trying to update a removed node');\n        }\n      }\n    }\n\n    offset = 0;\n    // delete all values that are not being referenced\n    for (let i = 0; i < this._allData.length; i++) {\n      // if current value is neither linked to next node, nor an output value, remove it.\n      if (this._allData[i].from === -2 && this._allOutputIndices.indexOf(i + offset) === -1) {\n        offset++;\n        this._allData.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (offset > 0) {\n        let ind = -1;\n        // if current value is neither an input value nor an initializer, find the node it's\n        // coming from and update the corresponding node output\n        if (this._allData[i].from !== undefined && this._allData[i].from !== -1) {\n          ind = this._nodes[this._allData[i].from].outputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[this._allData[i].from].outputs[ind] = i;\n          }\n        } else {\n          // if current value is an input value, update its reference in inputIndices\n          ind = this._allInputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allInputIndices[ind] = i;\n          }\n        }\n\n        // find the node that the current value is linking to and update its input reference\n        this._allData[i].to.forEach(node => {\n          ind = this._nodes[node].inputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[node].inputs[ind] = i;\n          }\n        });\n        if (this._allData[i].to.length === 0) {\n          // if current value is a graph output, update its reference in outputIndices\n          ind = this._allOutputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allOutputIndices[ind] = i;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete the specifed node. Assume the node has one incoming input and the first output connected to other nodes.\n   * An input validation must be done before calling this function.\n   * @param nodeIndex The index of node to be deleted\n   */\n  private deleteNode(nodeIndex: number) {\n    const node = this._nodes[nodeIndex];\n    if (node.outputs.length > 1) {\n      for (let i = 1; i < node.outputs.length; i++) {\n        if (this._allData[node.outputs[i]].to.length > 0) {\n          throw new Error('Node deletion with more than one output connected to other nodes is not supported. ');\n        }\n      }\n    }\n\n    // this node wil not be executed\n    node.executeNode = false;\n    const inputValueIndex = node.inputs[0];\n    const outputValueIndex = node.outputs[0];\n    const nodesConsumingOutput = this._allData[outputValueIndex].to;\n\n    // remove this node from the to property of the input Value\n    for (let i = 0; i < node.inputs.length; i++) {\n      const delIndex = this._allData[node.inputs[i]].to.indexOf(nodeIndex);\n      // should not happen\n      if (delIndex === -1) {\n        throw new Error('The Value object doesn\\'t have the current Node in it\\'s \\'to\\' property ');\n      }\n      this._allData[node.inputs[i]].to.splice(delIndex, 1);\n    }\n\n    // clear node indices consuming this output Value\n    this._allData[outputValueIndex]._to = [];\n\n    // if the output of this node is a graph output, adjust the index appropriately\n    const index = this._allOutputIndices.indexOf(outputValueIndex);\n    if (index !== -1) {\n      this._allOutputIndices[index] = inputValueIndex;\n    }\n\n    // override the inputs for nodes consuming this node's output with the input to this node\n    if (nodesConsumingOutput && nodesConsumingOutput.length > 0) {\n      for (const nodeIndex of nodesConsumingOutput) {\n        const replaceIndex = this._nodes[nodeIndex].inputs.indexOf(outputValueIndex);\n        // should not happen\n        if (replaceIndex === -1) {\n          throw new Error('The Node object doesn\\'t have the output Value in it\\'s \\'inputs\\' property ');\n        }\n        this._nodes[nodeIndex].inputs[replaceIndex] = inputValueIndex;\n        this._allData[inputValueIndex].to.push(nodeIndex);\n      }\n    }\n  }\n\n  removeAllDropoutNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Dropout' nodes so that no time is wasted in execution\n      if (node.opType === 'Dropout') {\n        // the node should have exactly 1 input and 1 or 2 outputs\n        if (node.inputs.length !== 1) {\n          throw new Error('Dropout nodes should only contain one input. ');\n        }\n        if (node.outputs.length !== 1 && node.outputs.length !== 2) {\n          throw new Error('Dropout nodes should contain either 1 or 2 output(s)');\n        }\n        // the second output should not be referenced by any other node\n        if (node.outputs.length === 2 && this._allData[node.outputs[1]]._to.length !== 0) {\n          throw new Error('Dropout nodes\\'s second output should not be referenced by other nodes');\n        }\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  removeAllIdentityNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Identity' nodes so that no time is wasted in execution\n      if (node.opType === 'Identity') {\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  isActivation(n: Node): boolean {\n    switch (n.opType) {\n      // TODO: add other activation methods\n      case 'Relu':\n      case 'Sigmoid':\n      case 'Clip':\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  fuseConvActivationNodes() {\n    for (const node of this._nodes) {\n      if (node.opType === 'Conv') {\n        const next = this._allData[node.outputs[0]]._to;\n        if (next.length === 1 && this.isActivation(this._nodes[next[0]])) {\n          const child = this._nodes[next[0]];\n          if (child.opType === 'Clip') {\n            if (child.inputs.length === 1) {\n              try {\n                node.attributes.set(\n                    'activation_params', 'floats',\n                    [child.attributes.getFloat('min'), child.attributes.getFloat('max')]);\n              } catch (e) {\n                node.attributes.set('activation_params', 'floats', [MIN_CLIP, MAX_CLIP]);\n              }\n            } else if (\n                child.inputs.length >= 3 && this._allData[child.inputs[1]].tensor !== undefined &&\n                this._allData[child.inputs[2]].tensor !== undefined) {\n              node.attributes.set('activation_params', 'floats', [\n                this._allData[child.inputs[1]].tensor!.floatData[0], this._allData[child.inputs[2]].tensor!.floatData[0]\n              ]);\n            } else {\n              // Skip fusion with clip node since clip min and clip max are not coming from initializer\n              continue;\n            }\n          }\n          node.attributes.set('activation', 'string', (child.opType));\n          this.deleteNode(next[0]);\n        }\n      }\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\n\nimport {WebGLContext} from './backends/webgl/webgl-context';\n\nexport declare namespace Logger {\n  export interface SeverityTypeMap {\n    verbose: 'v';\n    info: 'i';\n    warning: 'w';\n    error: 'e';\n    fatal: 'f';\n  }\n\n  export type Severity = keyof SeverityTypeMap;\n\n  export type Provider = 'none'|'console';\n\n  /**\n   * Logging config that used to control the behavior of logger\n   */\n  export interface Config {\n    /**\n     * Specify the logging provider. 'console' by default\n     */\n    provider?: Provider;\n    /**\n     * Specify the minimal logger serverity. 'warning' by default\n     */\n    minimalSeverity?: Logger.Severity;\n    /**\n     * Whether to output date time in log. true by default\n     */\n    logDateTime?: boolean;\n    /**\n     * Whether to output source information (Not yet supported). false by default\n     */\n    logSourceLocation?: boolean;\n  }\n\n  export interface CategorizedLogger {\n    verbose(content: string): void;\n    info(content: string): void;\n    warning(content: string): void;\n    error(content: string): void;\n    fatal(content: string): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Logger {\n  (category: string): Logger.CategorizedLogger;\n\n  verbose(content: string): void;\n  verbose(category: string, content: string): void;\n  info(content: string): void;\n  info(category: string, content: string): void;\n  warning(content: string): void;\n  warning(category: string, content: string): void;\n  error(content: string): void;\n  error(category: string, content: string): void;\n  fatal(content: string): void;\n  fatal(category: string, content: string): void;\n\n  /**\n   * Reset the logger configuration.\n   * @param config specify an optional default config\n   */\n  reset(config?: Logger.Config): void;\n  /**\n   * Set the logger's behavior on the given category\n   * @param category specify a category string. If '*' is specified, all previous configuration will be overwritten. If\n   * '' is specified, the default behavior will be updated.\n   * @param config the config object to indicate the logger's behavior\n   */\n  set(category: string, config: Logger.Config): void;\n\n  /**\n   * Set the logger's behavior from ort-common env\n   * @param env the env used to set logger. Currently only setting loglevel is supported through Env.\n   */\n  setWithEnv(env: Env): void;\n}\n\ninterface LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string): void;\n}\nclass NoOpLoggerProvider implements LoggerProvider {\n  log(_severity: Logger.Severity, _content: string, _category?: string) {\n    // do nothing\n  }\n}\nclass ConsoleLoggerProvider implements LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string) {\n    // eslint-disable-next-line no-console\n    console.log(`${this.color(severity)} ${category ? '\\x1b[35m' + category + '\\x1b[0m ' : ''}${content}`);\n  }\n\n  private color(severity: Logger.Severity) {\n    switch (severity) {\n      case 'verbose':\n        return '\\x1b[34;40mv\\x1b[0m';\n      case 'info':\n        return '\\x1b[32mi\\x1b[0m';\n      case 'warning':\n        return '\\x1b[30;43mw\\x1b[0m';\n      case 'error':\n        return '\\x1b[31;40me\\x1b[0m';\n      case 'fatal':\n        return '\\x1b[101mf\\x1b[0m';\n      default:\n        throw new Error(`unsupported severity: ${severity}`);\n    }\n  }\n}\n\nconst SEVERITY_VALUE = {\n  verbose: 1000,\n  info: 2000,\n  warning: 4000,\n  error: 5000,\n  fatal: 6000\n};\n\nconst LOGGER_PROVIDER_MAP: {readonly [provider: string]: Readonly<LoggerProvider>} = {\n  ['none']: new NoOpLoggerProvider(),\n  ['console']: new ConsoleLoggerProvider()\n};\nconst LOGGER_DEFAULT_CONFIG = {\n  provider: 'console',\n  minimalSeverity: 'warning',\n  logDateTime: true,\n  logSourceLocation: false\n};\nlet LOGGER_CONFIG_MAP:\n    {[category: string]: Readonly<Required<Logger.Config>>} = {['']: LOGGER_DEFAULT_CONFIG as Required<Logger.Config>};\n\nfunction log(category: string): Logger.CategorizedLogger;\nfunction log(severity: Logger.Severity, content: string): void;\nfunction log(severity: Logger.Severity, category: string, content: string): void;\nfunction log(severity: Logger.Severity, arg1: string, arg2?: string): void;\nfunction log(\n    arg0: string|Logger.Severity, arg1?: string, arg2?: string|number, arg3?: number): Logger.CategorizedLogger|void {\n  if (arg1 === undefined) {\n    // log(category: string): Logger.CategorizedLogger;\n    return createCategorizedLogger(arg0);\n  } else if (arg2 === undefined) {\n    // log(severity, content);\n    logInternal(arg0 as Logger.Severity, arg1, 1);\n  } else if (typeof arg2 === 'number' && arg3 === undefined) {\n    // log(severity, content, stack)\n    logInternal(arg0 as Logger.Severity, arg1, arg2);\n  } else if (typeof arg2 === 'string' && arg3 === undefined) {\n    // log(severity, category, content)\n    logInternal(arg0 as Logger.Severity, arg2, 1, arg1);\n  } else if (typeof arg2 === 'string' && typeof arg3 === 'number') {\n    // log(severity, category, content, stack)\n    logInternal(arg0 as Logger.Severity, arg2, arg3, arg1);\n  } else {\n    throw new TypeError('input is valid');\n  }\n}\n\nfunction createCategorizedLogger(category: string): Logger.CategorizedLogger {\n  return {\n    verbose: log.verbose.bind(null, category),\n    info: log.info.bind(null, category),\n    warning: log.warning.bind(null, category),\n    error: log.error.bind(null, category),\n    fatal: log.fatal.bind(null, category)\n  };\n}\n\n// NOTE: argument 'category' is put the last parameter beacause typescript\n// doesn't allow optional argument put in front of required argument. This\n// order is different from a usual logging API.\nfunction logInternal(severity: Logger.Severity, content: string, stack: number, category?: string) {\n  const config = LOGGER_CONFIG_MAP[category || ''] || LOGGER_CONFIG_MAP[''];\n  if (SEVERITY_VALUE[severity] < SEVERITY_VALUE[config.minimalSeverity]) {\n    return;\n  }\n\n  if (config.logDateTime) {\n    content = `${new Date().toISOString()}|${content}`;\n  }\n\n  if (config.logSourceLocation) {\n    // TODO: calculate source location from 'stack'\n  }\n\n  LOGGER_PROVIDER_MAP[config.provider].log(severity, content, category);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nnamespace log {\n  export function verbose(content: string): void;\n  export function verbose(category: string, content: string): void;\n  export function verbose(arg0: string, arg1?: string) {\n    log('verbose', arg0, arg1);\n  }\n  export function info(content: string): void;\n  export function info(category: string, content: string): void;\n  export function info(arg0: string, arg1?: string) {\n    log('info', arg0, arg1);\n  }\n  export function warning(content: string): void;\n  export function warning(category: string, content: string): void;\n  export function warning(arg0: string, arg1?: string) {\n    log('warning', arg0, arg1);\n  }\n  export function error(content: string): void;\n  export function error(category: string, content: string): void;\n  export function error(arg0: string, arg1?: string) {\n    log('error', arg0, arg1);\n  }\n  export function fatal(content: string): void;\n  export function fatal(category: string, content: string): void;\n  export function fatal(arg0: string, arg1?: string) {\n    log('fatal', arg0, arg1);\n  }\n\n  export function reset(config?: Logger.Config): void {\n    LOGGER_CONFIG_MAP = {};\n    set('', config || {});\n  }\n  export function set(category: string, config: Logger.Config): void {\n    if (category === '*') {\n      reset(config);\n    } else {\n      const previousConfig = LOGGER_CONFIG_MAP[category] || LOGGER_DEFAULT_CONFIG;\n      LOGGER_CONFIG_MAP[category] = {\n        provider: config.provider || previousConfig.provider,\n        minimalSeverity: config.minimalSeverity || previousConfig.minimalSeverity,\n        logDateTime: (config.logDateTime === undefined) ? previousConfig.logDateTime : config.logDateTime,\n        logSourceLocation: (config.logSourceLocation === undefined) ? previousConfig.logSourceLocation :\n                                                                      config.logSourceLocation\n      };\n    }\n\n    // TODO: we want to support wildcard or regex?\n  }\n\n  export function setWithEnv(env: Env): void {\n    const config: Logger.Config = {};\n    if (env.logLevel) {\n      config.minimalSeverity = env.logLevel as Logger.Severity;\n    }\n    set('', config);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare, @typescript-eslint/naming-convention\nexport const Logger: Logger = log;\n\nexport declare namespace Profiler {\n  export interface Config {\n    maxNumberEvents?: number;\n    flushBatchSize?: number;\n    flushIntervalInMilliseconds?: number;\n  }\n\n  export type EventCategory = 'session'|'node'|'op'|'backend';\n\n  export interface Event {\n    end(): void|Promise<void>;\n  }\n}\n// TODO\n// class WebGLEvent implements Profiler.Event {}\n\nclass Event implements Profiler.Event {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number,\n      private endCallback: (e: Event) => void|Promise<void>, public timer?: WebGLQuery, public ctx?: WebGLContext) {}\n\n  async end() {\n    return this.endCallback(this);\n  }\n\n  async checkTimer(): Promise<number> {\n    if (this.ctx === undefined || this.timer === undefined) {\n      throw new Error('No webgl timer found');\n    } else {\n      this.ctx.endTimer();\n      return this.ctx.waitForQueryAndGetTime(this.timer);\n    }\n  }\n}\n\nclass EventRecord {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number, public endTime: number) {}\n}\n\nexport class Profiler {\n  static create(config?: Profiler.Config): Profiler {\n    if (config === undefined) {\n      return new this();\n    }\n    return new this(config.maxNumberEvents, config.flushBatchSize, config.flushIntervalInMilliseconds);\n  }\n\n  private constructor(maxNumberEvents?: number, flushBatchSize?: number, flushIntervalInMilliseconds?: number) {\n    this._started = false;\n    this._maxNumberEvents = maxNumberEvents === undefined ? 10000 : maxNumberEvents;\n    this._flushBatchSize = flushBatchSize === undefined ? 10 : flushBatchSize;\n    this._flushIntervalInMilliseconds = flushIntervalInMilliseconds === undefined ? 5000 : flushIntervalInMilliseconds;\n  }\n\n  // start profiling\n  start() {\n    this._started = true;\n    this._timingEvents = [];\n    this._flushTime = now();\n    this._flushPointer = 0;\n  }\n\n  // stop profiling\n  stop() {\n    this._started = false;\n    for (; this._flushPointer < this._timingEvents.length; this._flushPointer++) {\n      this.logOneEvent(this._timingEvents[this._flushPointer]);\n    }\n  }\n\n  // create an event scope for the specific function\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T, ctx?: WebGLContext): T;\n  event<T>(category: Profiler.EventCategory, name: string, func: () => Promise<T>, ctx?: WebGLContext): Promise<T>;\n\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T | Promise<T>, ctx?: WebGLContext): T\n      |Promise<T> {\n    const event = this._started ? this.begin(category, name, ctx) : undefined;\n    let isPromise = false;\n\n    const res = func();\n\n    // we consider a then-able object is a promise\n    if (res && typeof (res as Promise<T>).then === 'function') {\n      isPromise = true;\n      return new Promise<T>((resolve, reject) => {\n        (res as Promise<T>)\n            .then(\n                async value => {  // fulfilled\n                  if (event) {\n                    await event.end();\n                  }\n                  resolve(value);\n                },\n                async reason => {  // rejected\n                  if (event) {\n                    await event.end();\n                  }\n                  reject(reason);\n                });\n      });\n    }\n    if (!isPromise && event) {\n      const eventRes = event.end();\n      if (eventRes && typeof eventRes.then === 'function') {\n        return new Promise<T>((resolve, reject) => {\n          (eventRes).then(\n              () => {  // fulfilled\n                resolve(res);\n              },\n              (reason) => {  // rejected\n                reject(reason);\n              });\n        });\n      }\n    }\n    return res;\n  }\n\n  // begin an event\n  begin(category: Profiler.EventCategory, name: string, ctx?: WebGLContext): Event {\n    if (!this._started) {\n      throw new Error('profiler is not started yet');\n    }\n    if (ctx === undefined) {\n      const startTime = now();\n      this.flush(startTime);\n      return new Event(category, name, startTime, e => this.endSync(e));\n    } else {\n      const timer: WebGLQuery = ctx.beginTimer();\n      return new Event(category, name, 0, async e => this.end(e), timer, ctx);\n    }\n  }\n\n  // end the specific event\n  private async end(event: Event): Promise<void> {\n    const endTime: number = await event.checkTimer();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private endSync(event: Event): void {\n    const endTime: number = now();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private logOneEvent(event: EventRecord) {\n    Logger.verbose(\n        `Profiler.${event.category}`,\n        `${(event.endTime - event.startTime).toFixed(2)}ms on event '${event.name}' at ${event.endTime.toFixed(2)}`);\n  }\n\n  private flush(currentTime: number) {\n    if (this._timingEvents.length - this._flushPointer >= this._flushBatchSize ||\n        currentTime - this._flushTime >= this._flushIntervalInMilliseconds) {\n      // should flush when either batch size accumlated or interval elepsed\n\n      for (const previousPointer = this._flushPointer; this._flushPointer < previousPointer + this._flushBatchSize &&\n           this._flushPointer < this._timingEvents.length;\n           this._flushPointer++) {\n        this.logOneEvent(this._timingEvents[this._flushPointer]);\n      }\n\n      this._flushTime = now();\n    }\n  }\n\n  get started() {\n    return this._started;\n  }\n  private _started = false;\n  private _timingEvents: EventRecord[];\n\n  private readonly _maxNumberEvents: number;\n\n  private readonly _flushBatchSize: number;\n  private readonly _flushIntervalInMilliseconds: number;\n\n  private _flushTime: number;\n  private _flushPointer = 0;\n}\n\n/**\n * returns a number to represent the current timestamp in a resolution as high as possible.\n */\nexport const now = (typeof performance !== 'undefined' && performance.now) ? () => performance.now() : Date.now;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\n\nimport {Graph} from './graph';\nimport {OpSet} from './opset';\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\nimport {onnx} from './ort-schema/protobuf/onnx';\nimport {LongUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport class Model {\n  // empty model\n  constructor() {}\n\n  load(buf: Uint8Array, graphInitializer?: Graph.Initializer, isOrtFormat?: boolean): void {\n    if (!isOrtFormat) {\n      // isOrtFormat === false || isOrtFormat === undefined\n      try {\n        this.loadFromOnnxFormat(buf, graphInitializer);\n        return;\n      } catch (e) {\n        if (isOrtFormat !== undefined) {\n          throw e;\n        }\n      }\n    }\n\n    this.loadFromOrtFormat(buf, graphInitializer);\n  }\n\n  private loadFromOnnxFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const modelProto = onnx.ModelProto.decode(buf);\n    const irVersion = LongUtil.longToNumber(modelProto.irVersion);\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n\n    this._opsets =\n        modelProto.opsetImport.map(i => ({domain: i.domain as string, version: LongUtil.longToNumber(i.version!)}));\n\n    this._graph = Graph.from(modelProto.graph!, graphInitializer);\n  }\n\n  private loadFromOrtFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const fb = new flatbuffers.ByteBuffer(buf);\n    const ortModel = ortFbs.InferenceSession.getRootAsInferenceSession(fb).model()!;\n    const irVersion = LongUtil.longToNumber(ortModel.irVersion());\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n    this._opsets = [];\n    for (let i = 0; i < ortModel.opsetImportLength(); i++) {\n      const opsetId = ortModel.opsetImport(i)!;\n      this._opsets.push({domain: opsetId?.domain() as string, version: LongUtil.longToNumber(opsetId.version()!)});\n    }\n\n    this._graph = Graph.from(ortModel.graph()!, graphInitializer);\n  }\n\n  private _graph: Graph;\n  get graph(): Graph {\n    return this._graph;\n  }\n\n  private _opsets: OpSet[];\n  get opsets(): readonly OpSet[] {\n    return this._opsets;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from './backend';\nimport {Graph} from './graph';\nimport {Tensor} from './tensor';\n\nexport type OperatorImplementation<T> = (inferenceHandler: InferenceHandler, inputs: Tensor[], context: T) => Tensor[];\nexport type OperatorInitialization<T> = (node: Graph.Node, graph: Graph) => T;\n\nexport interface Operator {\n  readonly impl: OperatorImplementation<unknown>;\n  readonly context: Graph.Node|unknown;\n}\n\nexport const NUMBER_TYPES: readonly Tensor.DataType[] =\n    ['float32', 'float64', 'int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const INT_TYPES: readonly Tensor.DataType[] = ['int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const FLOAT_TYPES: readonly Tensor.DataType[] = ['float32', 'float64'];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from './graph';\nimport {OperatorImplementation, OperatorInitialization} from './operators';\n\nexport interface OpSet {\n  domain: string;\n  version: number;\n}\nexport declare namespace OpSet {\n  /**\n   * Domain of an opset, it can be an empty string(default value, represent for ai.onnx), or 'ai.onnx.ml'\n   */\n  type Domain = ''|'ai.onnx.ml'|'com.microsoft';\n  /**\n   * A resolve rule consists of 4 or 5 items: opType, opSetDomain, versionSelector, operatorImplementation and\n   * operatorInitialization (optional)\n   */\n  type ResolveRule = [\n    string, Domain, string, OperatorImplementation<Graph.Node>\n  ]|[string, Domain, string, OperatorImplementation<unknown>, OperatorInitialization<unknown>];\n}\n\nexport function resolveOperator(node: Graph.Node, opsets: readonly OpSet[], rules: readonly OpSet.ResolveRule[]) {\n  for (const rule of rules) {\n    const opType = rule[0];\n    const domain = rule[1];\n    const versionSelector = rule[2];\n    const opImpl = rule[3];\n    const opInit = rule[4];\n\n    if (node.opType === opType) {  // operator type matches\n      for (const opset of opsets) {\n        // opset '' and 'ai.onnx' are considered the same.\n        if (opset.domain === domain || (opset.domain === 'ai.onnx' && domain === '')) {  // opset domain found\n          if (matchSelector(opset.version, versionSelector)) {\n            return {opImpl, opInit};\n          }\n        }\n      }\n    }\n  }\n\n  throw new TypeError(`cannot resolve operator '${node.opType}' with opsets: ${\n      opsets.map(set => `${set.domain || 'ai.onnx'} v${set.version}`).join(', ')}`);\n}\n\nfunction matchSelector(version: number, selector: string): boolean {\n  if (selector.endsWith('+')) {\n    // minimum version match ('7+' expects version>=7)\n    const rangeStart = Number.parseInt(selector.substring(0, selector.length - 1), 10);\n    return !isNaN(rangeStart) && rangeStart <= version;\n  } else if (selector.split('-').length === 2) {\n    // range match ('6-8' expects 6<=version<=8)\n    const pair = selector.split('-');\n    const rangeStart = Number.parseInt(pair[0], 10);\n    const rangeEnd = Number.parseInt(pair[1], 10);\n    return !isNaN(rangeStart) && !isNaN(rangeEnd) && rangeStart <= version && version <= rangeEnd;\n  } else {\n    // exact match ('7' expects version===7)\n    return Number.parseInt(selector, 10) === version;\n  }\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n/* eslint-disable */\n\nimport {flatbuffers} from 'flatbuffers';\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum AttributeType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    INT = 2,\n    STRING = 3,\n    TENSOR = 4,\n    GRAPH = 5,\n    FLOATS = 6,\n    INTS = 7,\n    STRINGS = 8,\n    TENSORS = 9,\n    GRAPHS = 10,\n    SPARSE_TENSOR = 11,\n    SPARSE_TENSORS = 12\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum DimensionValueType {UNKNOWN = 0, VALUE = 1, PARAM = 2}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TensorDataType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    UINT8 = 2,\n    INT8 = 3,\n    UINT16 = 4,\n    INT16 = 5,\n    INT32 = 6,\n    INT64 = 7,\n    STRING = 8,\n    BOOL = 9,\n    FLOAT16 = 10,\n    DOUBLE = 11,\n    UINT32 = 12,\n    UINT64 = 13,\n    COMPLEX64 = 14,\n    COMPLEX128 = 15,\n    BFLOAT16 = 16,\n    FLOAT8E4M3FN = 17,\n    FLOAT8E4M3FNUZ = 18,\n    FLOAT8E5M2 = 19,\n    FLOAT8E5M2FNUZ = 20,\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum NodeType {Primitive = 0, Fused = 1}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TypeInfoValue {NONE = 0, tensor_type = 1, sequence_type = 2, map_type = 3}\n}\n\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Shape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Shape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Shape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getSizePrefixedRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Dimension= obj\n     * @returns onnxruntime.experimental.fbs.Dimension\n     */\n    dim(index: number, obj?: onnxruntime.experimental.fbs.Dimension): onnxruntime.experimental.fbs.Dimension|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Dimension())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    dimLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startShape(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimOffset\n     */\n    static addDim(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, dimOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createShape(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Shape.startShape(builder);\n      Shape.addDim(builder, dimOffset);\n      return Shape.endShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Dimension {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Dimension\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Dimension {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getSizePrefixedRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.DimensionValue= obj\n     * @returns onnxruntime.experimental.fbs.DimensionValue|null\n     */\n    value(obj?: onnxruntime.experimental.fbs.DimensionValue): onnxruntime.experimental.fbs.DimensionValue|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.DimensionValue())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimension(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimension(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimension(\n        builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset,\n        denotationOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Dimension.startDimension(builder);\n      Dimension.addValue(builder, valueOffset);\n      Dimension.addDenotation(builder, denotationOffset);\n      return Dimension.endDimension(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class DimensionValue {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns DimensionValue\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DimensionValue {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getSizePrefixedRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.DimensionValueType\n     */\n    dimType(): onnxruntime.experimental.fbs.DimensionValueType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    dimValue(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    dimParam(): string|null;\n    dimParam(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    dimParam(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimensionValue(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.DimensionValueType dimType\n     */\n    static addDimType(builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType) {\n      builder.addFieldInt8(0, dimType, onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long dimValue\n     */\n    static addDimValue(builder: flatbuffers.Builder, dimValue: flatbuffers.Long) {\n      builder.addFieldInt64(1, dimValue, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimParamOffset\n     */\n    static addDimParam(builder: flatbuffers.Builder, dimParamOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimParamOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimensionValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimensionValue(\n        builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType,\n        dimValue: flatbuffers.Long, dimParamOffset: flatbuffers.Offset): flatbuffers.Offset {\n      DimensionValue.startDimensionValue(builder);\n      DimensionValue.addDimType(builder, dimType);\n      DimensionValue.addDimValue(builder, dimValue);\n      DimensionValue.addDimParam(builder, dimParamOffset);\n      return DimensionValue.endDimensionValue(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TensorTypeAndShape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TensorTypeAndShape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TensorTypeAndShape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape): TensorTypeAndShape {\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getSizePrefixedRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape):\n        TensorTypeAndShape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    elemType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Shape= obj\n     * @returns onnxruntime.experimental.fbs.Shape|null\n     */\n    shape(obj?: onnxruntime.experimental.fbs.Shape): onnxruntime.experimental.fbs.Shape|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Shape())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensorTypeAndShape(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType elemType\n     */\n    static addElemType(builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, elemType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset shapeOffset\n     */\n    static addShape(builder: flatbuffers.Builder, shapeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, shapeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensorTypeAndShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensorTypeAndShape(\n        builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType,\n        shapeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TensorTypeAndShape.startTensorTypeAndShape(builder);\n      TensorTypeAndShape.addElemType(builder, elemType);\n      TensorTypeAndShape.addShape(builder, shapeOffset);\n      return TensorTypeAndShape.endTensorTypeAndShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class MapType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns MapType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): MapType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getSizePrefixedRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    keyType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    valueType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startMapType(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType keyType\n     */\n    static addKeyType(builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, keyType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueTypeOffset\n     */\n    static addValueType(builder: flatbuffers.Builder, valueTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, valueTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endMapType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createMapType(\n        builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType,\n        valueTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      MapType.startMapType(builder);\n      MapType.addKeyType(builder, keyType);\n      MapType.addValueType(builder, valueTypeOffset);\n      return MapType.endMapType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SequenceType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SequenceType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SequenceType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getSizePrefixedRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    elemType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSequenceType(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset elemTypeOffset\n     */\n    static addElemType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, elemTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSequenceType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSequenceType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SequenceType.startSequenceType(builder);\n      SequenceType.addElemType(builder, elemTypeOffset);\n      return SequenceType.endSequenceType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class EdgeEnd {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns EdgeEnd\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): EdgeEnd {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      return this.bb!.readUint32(this.bb_pos);\n    }\n\n    /**\n     * @returns number\n     */\n    srcArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 4);\n    }\n\n    /**\n     * @returns number\n     */\n    dstArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number node_index\n     * @param number src_arg_index\n     * @param number dst_arg_index\n     * @returns flatbuffers.Offset\n     */\n    static createEdgeEnd(\n        builder: flatbuffers.Builder, node_index: number, src_arg_index: number,\n        dst_arg_index: number): flatbuffers.Offset {\n      builder.prep(4, 12);\n      builder.writeInt32(dst_arg_index);\n      builder.writeInt32(src_arg_index);\n      builder.writeInt32(node_index);\n      return builder.offset();\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class NodeEdge {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns NodeEdge\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): NodeEdge {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getSizePrefixedRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    inputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    outputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNodeEdge(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number nodeIndex\n     */\n    static addNodeIndex(builder: flatbuffers.Builder, nodeIndex: number) {\n      builder.addFieldInt32(0, nodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputEdgesOffset\n     */\n    static addInputEdges(builder: flatbuffers.Builder, inputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, inputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputEdgesOffset\n     */\n    static addOutputEdges(builder: flatbuffers.Builder, outputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, outputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNodeEdge(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNodeEdge(\n        builder: flatbuffers.Builder, nodeIndex: number, inputEdgesOffset: flatbuffers.Offset,\n        outputEdgesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      NodeEdge.startNodeEdge(builder);\n      NodeEdge.addNodeIndex(builder, nodeIndex);\n      NodeEdge.addInputEdges(builder, inputEdgesOffset);\n      NodeEdge.addOutputEdges(builder, outputEdgesOffset);\n      return NodeEdge.endNodeEdge(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Node {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Node\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Node {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getSizePrefixedRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    sinceVersion(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    index(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    opType(): string|null;\n    opType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    opType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.NodeType\n     */\n    type(): onnxruntime.experimental.fbs.NodeType {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.NodeType.Primitive;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    executionProviderType(): string|null;\n    executionProviderType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    executionProviderType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Attribute= obj\n     * @returns onnxruntime.experimental.fbs.Attribute\n     */\n    attributes(index: number, obj?: onnxruntime.experimental.fbs.Attribute): onnxruntime.experimental.fbs.Attribute\n        |null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Attribute())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    attributesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    inputArgCounts(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    inputArgCountsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Int32Array\n     */\n    inputArgCountsArray(): Int32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ?\n          new Int32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    implicitInputs(index: number): string;\n    implicitInputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    implicitInputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    implicitInputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNode(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number sinceVersion\n     */\n    static addSinceVersion(builder: flatbuffers.Builder, sinceVersion: number) {\n      builder.addFieldInt32(3, sinceVersion, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number index\n     */\n    static addIndex(builder: flatbuffers.Builder, index: number) {\n      builder.addFieldInt32(4, index, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opTypeOffset\n     */\n    static addOpType(builder: flatbuffers.Builder, opTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, opTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.NodeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.NodeType) {\n      builder.addFieldInt32(6, type, onnxruntime.experimental.fbs.NodeType.Primitive);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset executionProviderTypeOffset\n     */\n    static addExecutionProviderType(builder: flatbuffers.Builder, executionProviderTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, executionProviderTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset attributesOffset\n     */\n    static addAttributes(builder: flatbuffers.Builder, attributesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, attributesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createAttributesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startAttributesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputArgCountsOffset\n     */\n    static addInputArgCounts(builder: flatbuffers.Builder, inputArgCountsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, inputArgCountsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputArgCountsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputArgCountsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset implicitInputsOffset\n     */\n    static addImplicitInputs(builder: flatbuffers.Builder, implicitInputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, implicitInputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createImplicitInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startImplicitInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNode(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNode(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, sinceVersion: number, index: number, opTypeOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.NodeType, executionProviderTypeOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset, attributesOffset: flatbuffers.Offset,\n        inputArgCountsOffset: flatbuffers.Offset, implicitInputsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Node.startNode(builder);\n      Node.addName(builder, nameOffset);\n      Node.addDocString(builder, docStringOffset);\n      Node.addDomain(builder, domainOffset);\n      Node.addSinceVersion(builder, sinceVersion);\n      Node.addIndex(builder, index);\n      Node.addOpType(builder, opTypeOffset);\n      Node.addType(builder, type);\n      Node.addExecutionProviderType(builder, executionProviderTypeOffset);\n      Node.addInputs(builder, inputsOffset);\n      Node.addOutputs(builder, outputsOffset);\n      Node.addAttributes(builder, attributesOffset);\n      Node.addInputArgCounts(builder, inputArgCountsOffset);\n      Node.addImplicitInputs(builder, implicitInputsOffset);\n      return Node.endNode(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class ValueInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns ValueInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): ValueInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getSizePrefixedRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    type(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startValueInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset typeOffset\n     */\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, typeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endValueInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createValueInfo(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        typeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      ValueInfo.startValueInfo(builder);\n      ValueInfo.addName(builder, nameOffset);\n      ValueInfo.addDocString(builder, docStringOffset);\n      ValueInfo.addType(builder, typeOffset);\n      return ValueInfo.endValueInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TypeInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TypeInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TypeInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getSizePrefixedRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TypeInfoValue\n     */\n    valueType(): onnxruntime.experimental.fbs.TypeInfoValue {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TypeInfoValue.NONE;\n    }\n\n    /**\n     * @param flatbuffers.Table obj\n     * @returns ?flatbuffers.Table\n     */\n    value<T extends flatbuffers.Table>(obj: T): T|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTypeInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TypeInfoValue valueType\n     */\n    static addValueType(builder: flatbuffers.Builder, valueType: onnxruntime.experimental.fbs.TypeInfoValue) {\n      builder.addFieldInt8(1, valueType, onnxruntime.experimental.fbs.TypeInfoValue.NONE);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTypeInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTypeInfo(\n        builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset,\n        valueType: onnxruntime.experimental.fbs.TypeInfoValue, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TypeInfo.startTypeInfo(builder);\n      TypeInfo.addDenotation(builder, denotationOffset);\n      TypeInfo.addValueType(builder, valueType);\n      TypeInfo.addValue(builder, valueOffset);\n      return TypeInfo.endTypeInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class OperatorSetId {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns OperatorSetId\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): OperatorSetId {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getSizePrefixedRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    version(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startOperatorSetId(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: flatbuffers.Long) {\n      builder.addFieldInt64(1, version, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endOperatorSetId(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createOperatorSetId(\n        builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset, version: flatbuffers.Long): flatbuffers.Offset {\n      OperatorSetId.startOperatorSetId(builder);\n      OperatorSetId.addDomain(builder, domainOffset);\n      OperatorSetId.addVersion(builder, version);\n      return OperatorSetId.endOperatorSetId(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Tensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Tensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Tensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getSizePrefixedRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    dataType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    rawData(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    rawDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint8Array\n     */\n    rawDataArray(): Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ?\n          new Uint8Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    stringData(index: number): string;\n    stringData(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    stringData(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensor(builder: flatbuffers.Builder) {\n      builder.startObject(6);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType dataType\n     */\n    static addDataType(builder: flatbuffers.Builder, dataType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(3, dataType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset rawDataOffset\n     */\n    static addRawData(builder: flatbuffers.Builder, rawDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, rawDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createRawDataVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(1, data.length, 1);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt8(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startRawDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(1, numElems, 1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringDataOffset\n     */\n    static addStringData(builder: flatbuffers.Builder, stringDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, stringDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringDataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensor(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset, dataType: onnxruntime.experimental.fbs.TensorDataType,\n        rawDataOffset: flatbuffers.Offset, stringDataOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Tensor.startTensor(builder);\n      Tensor.addName(builder, nameOffset);\n      Tensor.addDocString(builder, docStringOffset);\n      Tensor.addDims(builder, dimsOffset);\n      Tensor.addDataType(builder, dataType);\n      Tensor.addRawData(builder, rawDataOffset);\n      Tensor.addStringData(builder, stringDataOffset);\n      return Tensor.endTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SparseTensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SparseTensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SparseTensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getSizePrefixedRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    values(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    indices(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSparseTensor(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valuesOffset\n     */\n    static addValues(builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valuesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset indicesOffset\n     */\n    static addIndices(builder: flatbuffers.Builder, indicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, indicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSparseTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSparseTensor(\n        builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset, indicesOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SparseTensor.startSparseTensor(builder);\n      SparseTensor.addValues(builder, valuesOffset);\n      SparseTensor.addIndices(builder, indicesOffset);\n      SparseTensor.addDims(builder, dimsOffset);\n      return SparseTensor.endSparseTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Attribute {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Attribute\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Attribute {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getSizePrefixedRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.AttributeType\n     */\n    type(): onnxruntime.experimental.fbs.AttributeType {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.AttributeType.UNDEFINED;\n    }\n\n    /**\n     * @returns number\n     */\n    f(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    i(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    s(): string|null;\n    s(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    s(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    t(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    g(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    floats(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    floatsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Float32Array\n     */\n    floatsArray(): Float32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ?\n          new Float32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    ints(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    intsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    strings(index: number): string;\n    strings(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    strings(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    tensors(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    tensorsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph\n     */\n    graphs(index: number, obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    graphsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startAttribute(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.AttributeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.AttributeType) {\n      builder.addFieldInt32(2, type, onnxruntime.experimental.fbs.AttributeType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number f\n     */\n    static addF(builder: flatbuffers.Builder, f: number) {\n      builder.addFieldFloat32(3, f, 0.0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long i\n     */\n    static addI(builder: flatbuffers.Builder, i: flatbuffers.Long) {\n      builder.addFieldInt64(4, i, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sOffset\n     */\n    static addS(builder: flatbuffers.Builder, sOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, sOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tOffset\n     */\n    static addT(builder: flatbuffers.Builder, tOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, tOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset gOffset\n     */\n    static addG(builder: flatbuffers.Builder, gOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, gOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset floatsOffset\n     */\n    static addFloats(builder: flatbuffers.Builder, floatsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, floatsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createFloatsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addFloat32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startFloatsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset intsOffset\n     */\n    static addInts(builder: flatbuffers.Builder, intsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, intsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createIntsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startIntsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringsOffset\n     */\n    static addStrings(builder: flatbuffers.Builder, stringsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, stringsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tensorsOffset\n     */\n    static addTensors(builder: flatbuffers.Builder, tensorsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, tensorsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createTensorsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startTensorsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphsOffset\n     */\n    static addGraphs(builder: flatbuffers.Builder, graphsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, graphsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createGraphsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startGraphsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endAttribute(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createAttribute(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.AttributeType, f: number, i: flatbuffers.Long, sOffset: flatbuffers.Offset,\n        tOffset: flatbuffers.Offset, gOffset: flatbuffers.Offset, floatsOffset: flatbuffers.Offset,\n        intsOffset: flatbuffers.Offset, stringsOffset: flatbuffers.Offset, tensorsOffset: flatbuffers.Offset,\n        graphsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Attribute.startAttribute(builder);\n      Attribute.addName(builder, nameOffset);\n      Attribute.addDocString(builder, docStringOffset);\n      Attribute.addType(builder, type);\n      Attribute.addF(builder, f);\n      Attribute.addI(builder, i);\n      Attribute.addS(builder, sOffset);\n      Attribute.addT(builder, tOffset);\n      Attribute.addG(builder, gOffset);\n      Attribute.addFloats(builder, floatsOffset);\n      Attribute.addInts(builder, intsOffset);\n      Attribute.addStrings(builder, stringsOffset);\n      Attribute.addTensors(builder, tensorsOffset);\n      Attribute.addGraphs(builder, graphsOffset);\n      return Attribute.endAttribute(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Graph {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Graph\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Graph {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getSizePrefixedRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    initializers(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    initializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.ValueInfo= obj\n     * @returns onnxruntime.experimental.fbs.ValueInfo\n     */\n    nodeArgs(index: number, obj?: onnxruntime.experimental.fbs.ValueInfo): onnxruntime.experimental.fbs.ValueInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.ValueInfo())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeArgsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Node= obj\n     * @returns onnxruntime.experimental.fbs.Node\n     */\n    nodes(index: number, obj?: onnxruntime.experimental.fbs.Node): onnxruntime.experimental.fbs.Node|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Node())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    maxNodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.NodeEdge= obj\n     * @returns onnxruntime.experimental.fbs.NodeEdge\n     */\n    nodeEdges(index: number, obj?: onnxruntime.experimental.fbs.NodeEdge): onnxruntime.experimental.fbs.NodeEdge|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? (obj || new onnxruntime.experimental.fbs.NodeEdge())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SparseTensor= obj\n     * @returns onnxruntime.experimental.fbs.SparseTensor\n     */\n    sparseInitializers(index: number, obj?: onnxruntime.experimental.fbs.SparseTensor):\n        onnxruntime.experimental.fbs.SparseTensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SparseTensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    sparseInitializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startGraph(builder: flatbuffers.Builder) {\n      builder.startObject(8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset initializersOffset\n     */\n    static addInitializers(builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, initializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeArgsOffset\n     */\n    static addNodeArgs(builder: flatbuffers.Builder, nodeArgsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, nodeArgsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeArgsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeArgsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodesOffset\n     */\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, nodesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number maxNodeIndex\n     */\n    static addMaxNodeIndex(builder: flatbuffers.Builder, maxNodeIndex: number) {\n      builder.addFieldInt32(3, maxNodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeEdgesOffset\n     */\n    static addNodeEdges(builder: flatbuffers.Builder, nodeEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, nodeEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeEdgesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sparseInitializersOffset\n     */\n    static addSparseInitializers(builder: flatbuffers.Builder, sparseInitializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, sparseInitializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSparseInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSparseInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endGraph(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createGraph(\n        builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset, nodeArgsOffset: flatbuffers.Offset,\n        nodesOffset: flatbuffers.Offset, maxNodeIndex: number, nodeEdgesOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset,\n        sparseInitializersOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Graph.startGraph(builder);\n      Graph.addInitializers(builder, initializersOffset);\n      Graph.addNodeArgs(builder, nodeArgsOffset);\n      Graph.addNodes(builder, nodesOffset);\n      Graph.addMaxNodeIndex(builder, maxNodeIndex);\n      Graph.addNodeEdges(builder, nodeEdgesOffset);\n      Graph.addInputs(builder, inputsOffset);\n      Graph.addOutputs(builder, outputsOffset);\n      Graph.addSparseInitializers(builder, sparseInitializersOffset);\n      return Graph.endGraph(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Model {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Model\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Model {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getSizePrefixedRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    irVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.OperatorSetId= obj\n     * @returns onnxruntime.experimental.fbs.OperatorSetId\n     */\n    opsetImport(index: number, obj?: onnxruntime.experimental.fbs.OperatorSetId):\n        onnxruntime.experimental.fbs.OperatorSetId|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.OperatorSetId())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    opsetImportLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerName(): string|null;\n    producerName(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerName(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerVersion(): string|null;\n    producerVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    modelVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    graph(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphDocString(): string|null;\n    graphDocString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphDocString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startModel(builder: flatbuffers.Builder) {\n      builder.startObject(9);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long irVersion\n     */\n    static addIrVersion(builder: flatbuffers.Builder, irVersion: flatbuffers.Long) {\n      builder.addFieldInt64(0, irVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opsetImportOffset\n     */\n    static addOpsetImport(builder: flatbuffers.Builder, opsetImportOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, opsetImportOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOpsetImportVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOpsetImportVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerNameOffset\n     */\n    static addProducerName(builder: flatbuffers.Builder, producerNameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, producerNameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerVersionOffset\n     */\n    static addProducerVersion(builder: flatbuffers.Builder, producerVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, producerVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long modelVersion\n     */\n    static addModelVersion(builder: flatbuffers.Builder, modelVersion: flatbuffers.Long) {\n      builder.addFieldInt64(5, modelVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphOffset\n     */\n    static addGraph(builder: flatbuffers.Builder, graphOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, graphOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphDocStringOffset\n     */\n    static addGraphDocString(builder: flatbuffers.Builder, graphDocStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, graphDocStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endModel(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createModel(\n        builder: flatbuffers.Builder, irVersion: flatbuffers.Long, opsetImportOffset: flatbuffers.Offset,\n        producerNameOffset: flatbuffers.Offset, producerVersionOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, modelVersion: flatbuffers.Long, docStringOffset: flatbuffers.Offset,\n        graphOffset: flatbuffers.Offset, graphDocStringOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Model.startModel(builder);\n      Model.addIrVersion(builder, irVersion);\n      Model.addOpsetImport(builder, opsetImportOffset);\n      Model.addProducerName(builder, producerNameOffset);\n      Model.addProducerVersion(builder, producerVersionOffset);\n      Model.addDomain(builder, domainOffset);\n      Model.addModelVersion(builder, modelVersion);\n      Model.addDocString(builder, docStringOffset);\n      Model.addGraph(builder, graphOffset);\n      Model.addGraphDocString(builder, graphDocStringOffset);\n      return Model.endModel(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class KernelCreateInfos {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns KernelCreateInfos\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): KernelCreateInfos {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos): KernelCreateInfos {\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getSizePrefixedRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos):\n        KernelCreateInfos {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    nodeIndices(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndicesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint32Array\n     */\n    nodeIndicesArray(): Uint32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ?\n          new Uint32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    kernelDefHashes(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readUint64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    kernelDefHashesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startKernelCreateInfos(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeIndicesOffset\n     */\n    static addNodeIndices(builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nodeIndicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeIndicesVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeIndicesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelDefHashesOffset\n     */\n    static addKernelDefHashes(builder: flatbuffers.Builder, kernelDefHashesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, kernelDefHashesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createKernelDefHashesVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startKernelDefHashesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endKernelCreateInfos(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createKernelCreateInfos(\n        builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset,\n        kernelDefHashesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      KernelCreateInfos.startKernelCreateInfos(builder);\n      KernelCreateInfos.addNodeIndices(builder, nodeIndicesOffset);\n      KernelCreateInfos.addKernelDefHashes(builder, kernelDefHashesOffset);\n      return KernelCreateInfos.endKernelCreateInfos(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SubGraphSessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SubGraphSessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SubGraphSessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState): SubGraphSessionState {\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getSizePrefixedRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState):\n        SubGraphSessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphId(): string|null;\n    graphId(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphId(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSubGraphSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphIdOffset\n     */\n    static addGraphId(builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, graphIdOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSubGraphSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      builder.requiredField(offset, 4);  // graph_id\n      return offset;\n    }\n\n    static createSubGraphSessionState(\n        builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SubGraphSessionState.startSubGraphSessionState(builder);\n      SubGraphSessionState.addGraphId(builder, graphIdOffset);\n      SubGraphSessionState.addSessionState(builder, sessionStateOffset);\n      return SubGraphSessionState.endSubGraphSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getSizePrefixedRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.KernelCreateInfos= obj\n     * @returns onnxruntime.experimental.fbs.KernelCreateInfos|null\n     */\n    kernels(obj?: onnxruntime.experimental.fbs.KernelCreateInfos): onnxruntime.experimental.fbs.KernelCreateInfos|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.KernelCreateInfos())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SubGraphSessionState= obj\n     * @returns onnxruntime.experimental.fbs.SubGraphSessionState\n     */\n    subGraphSessionStates(index: number, obj?: onnxruntime.experimental.fbs.SubGraphSessionState):\n        onnxruntime.experimental.fbs.SubGraphSessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SubGraphSessionState())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    subGraphSessionStatesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelsOffset\n     */\n    static addKernels(builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, kernelsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset subGraphSessionStatesOffset\n     */\n    static addSubGraphSessionStates(builder: flatbuffers.Builder, subGraphSessionStatesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, subGraphSessionStatesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSubGraphSessionStatesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSubGraphSessionStatesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSessionState(\n        builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset,\n        subGraphSessionStatesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SessionState.startSessionState(builder);\n      SessionState.addKernels(builder, kernelsOffset);\n      SessionState.addSubGraphSessionStates(builder, subGraphSessionStatesOffset);\n      return SessionState.endSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class InferenceSession {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns InferenceSession\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): InferenceSession {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getSizePrefixedRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @returns boolean\n     */\n    static bufferHasIdentifier(bb: flatbuffers.ByteBuffer): boolean {\n      return bb.__has_identifier('ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    ortVersion(): string|null;\n    ortVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    ortVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Model= obj\n     * @returns onnxruntime.experimental.fbs.Model|null\n     */\n    model(obj?: onnxruntime.experimental.fbs.Model): onnxruntime.experimental.fbs.Model|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Model())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startInferenceSession(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset ortVersionOffset\n     */\n    static addOrtVersion(builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, ortVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset modelOffset\n     */\n    static addModel(builder: flatbuffers.Builder, modelOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, modelOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endInferenceSession(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishSizePrefixedInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM', true);\n    }\n\n    static createInferenceSession(\n        builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset, modelOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      InferenceSession.startInferenceSession(builder);\n      InferenceSession.addOrtVersion(builder, ortVersionOffset);\n      InferenceSession.addModel(builder, modelOffset);\n      InferenceSession.addSessionState(builder, sessionStateOffset);\n      return InferenceSession.endInferenceSession(builder);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\n\nimport {Session} from './session';\nimport {Tensor as OnnxjsTensor} from './tensor';\n\nexport class OnnxjsSessionHandler implements SessionHandler {\n  constructor(private session: Session) {\n    this.inputNames = this.session.inputNames;\n    this.outputNames = this.session.outputNames;\n  }\n\n  async dispose(): Promise<void> {}\n  inputNames: readonly string[];\n  outputNames: readonly string[];\n  async run(\n      feeds: SessionHandler.FeedsType, _fetches: SessionHandler.FetchesType,\n      _options: InferenceSession.RunOptions): Promise<SessionHandler.ReturnType> {\n    const inputMap = new Map<string, OnnxjsTensor>();\n    for (const name in feeds) {\n      if (Object.hasOwnProperty.call(feeds, name)) {\n        const feed = feeds[name];\n        inputMap.set(\n            name,\n            new OnnxjsTensor(\n                feed.dims, feed.type as OnnxjsTensor.DataType, undefined, undefined,\n                feed.data as OnnxjsTensor.NumberType));\n      }\n    }\n    const outputMap = await this.session.run(inputMap);\n    const output: SessionHandler.ReturnType = {};\n    outputMap.forEach((tensor, name) => {\n      output[name] = new Tensor(tensor.type, tensor.data, tensor.dims);\n    });\n    return output;\n  }\n  startProfiling(): void {\n    this.session.startProfiling();\n  }\n  endProfiling(): void {\n    this.session.endProfiling();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {promisify} from 'util';\n\nimport {resolveBackend, SessionHandlerType} from './backend';\nimport {ExecutionPlan} from './execution-plan';\nimport {Graph} from './graph';\nimport {Profiler} from './instrument';\nimport {Model} from './model';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nexport declare namespace Session {\n  export interface Config {\n    backendHint?: string;\n    profiler?: Profiler.Config;\n  }\n\n  export interface Context {\n    profiler: Readonly<Profiler>;\n    graphInputTypes?: Tensor.DataType[];\n    graphInputDims?: Array<readonly number[]>;\n  }\n}\n\nexport class Session {\n  constructor(config: Session.Config = {}) {\n    this._initialized = false;\n    this.backendHint = config.backendHint;\n    this.profiler = Profiler.create(config.profiler);\n    this.context = {profiler: this.profiler, graphInputTypes: [], graphInputDims: []};\n  }\n\n  get inputNames(): readonly string[] {\n    return this._model.graph.getInputNames();\n  }\n  get outputNames(): readonly string[] {\n    return this._model.graph.getOutputNames();\n  }\n\n  startProfiling() {\n    this.profiler.start();\n  }\n\n  endProfiling() {\n    this.profiler.stop();\n  }\n\n  async loadModel(uri: string): Promise<void>;\n  async loadModel(buffer: ArrayBuffer, byteOffset?: number, length?: number): Promise<void>;\n  async loadModel(buffer: Uint8Array): Promise<void>;\n  async loadModel(arg: string|ArrayBuffer|Uint8Array, byteOffset?: number, length?: number): Promise<void> {\n    await this.profiler.event('session', 'Session.loadModel', async () => {\n      // resolve backend and session handler\n      const backend = await resolveBackend(this.backendHint);\n      this.sessionHandler = backend.createSessionHandler(this.context);\n\n      this._model = new Model();\n      if (typeof arg === 'string') {\n        const isOrtFormat = arg.endsWith('.ort');\n        if (typeof process !== 'undefined' && process.versions && process.versions.node) {\n          // node\n          const buf = await promisify(readFile)(arg);\n          this.initialize(buf, isOrtFormat);\n        } else {\n          // browser\n          const response = await fetch(arg);\n          const buf = await response.arrayBuffer();\n          this.initialize(new Uint8Array(buf), isOrtFormat);\n        }\n      } else if (!ArrayBuffer.isView(arg)) {\n        // load model from ArrayBuffer\n        const arr = new Uint8Array(arg, byteOffset || 0, length || arg.byteLength);\n        this.initialize(arr);\n      } else {\n        // load model from Uint8array\n        this.initialize(arg);\n      }\n    });\n  }\n\n  private initialize(modelProtoBlob: Uint8Array, isOrtFormat?: boolean): void {\n    if (this._initialized) {\n      throw new Error('already initialized');\n    }\n\n    this.profiler.event('session', 'Session.initialize', () => {\n      // load graph\n      const graphInitializer =\n          this.sessionHandler.transformGraph ? this.sessionHandler as Graph.Initializer : undefined;\n      this._model.load(modelProtoBlob, graphInitializer, isOrtFormat);\n\n      // graph is completely initialzied at this stage , let the interested handlers know\n      if (this.sessionHandler.onGraphInitialized) {\n        this.sessionHandler.onGraphInitialized(this._model.graph);\n      }\n      // initialize each operator in the graph\n      this.initializeOps(this._model.graph);\n\n      // instantiate an ExecutionPlan object to be used by the Session object\n      this._executionPlan = new ExecutionPlan(this._model.graph, this._ops, this.profiler);\n    });\n\n    this._initialized = true;\n  }\n\n  async run(inputs: Map<string, Tensor>|Tensor[]): Promise<Map<string, Tensor>> {\n    if (!this._initialized) {\n      throw new Error('session not initialized yet');\n    }\n\n    return this.profiler.event('session', 'Session.run', async () => {\n      const inputTensors = this.normalizeAndValidateInputs(inputs);\n\n      const outputTensors = await this._executionPlan.execute(this.sessionHandler, inputTensors);\n\n      return this.createOutput(outputTensors);\n    });\n  }\n\n  private normalizeAndValidateInputs(inputs: Map<string, Tensor>|Tensor[]): Tensor[] {\n    const modelInputNames = this._model.graph.getInputNames();\n\n    // normalize inputs\n    // inputs: Tensor[]\n    if (Array.isArray(inputs)) {\n      if (inputs.length !== modelInputNames.length) {\n        throw new Error(`incorrect input array length: expected ${modelInputNames.length} but got ${inputs.length}`);\n      }\n    }\n    // convert map to array\n    // inputs: Map<string, Tensor>\n    else {\n      if (inputs.size !== modelInputNames.length) {\n        throw new Error(`incorrect input map size: expected ${modelInputNames.length} but got ${inputs.size}`);\n      }\n\n      const sortedInputs = new Array<Tensor>(inputs.size);\n      let sortedInputsIndex = 0;\n      for (let i = 0; i < modelInputNames.length; ++i) {\n        const tensor = inputs.get(modelInputNames[i]);\n        if (!tensor) {\n          throw new Error(`missing input tensor for: '${name}'`);\n        }\n        sortedInputs[sortedInputsIndex++] = tensor;\n      }\n\n      inputs = sortedInputs;\n    }\n\n    // validate dims requirements\n    // First session run - graph input data is not cached for the session\n    if (!this.context.graphInputTypes || this.context.graphInputTypes.length === 0 || !this.context.graphInputDims ||\n        this.context.graphInputDims.length === 0) {\n      const modelInputIndices = this._model.graph.getInputIndices();\n      const modelValues = this._model.graph.getValues();\n\n      const graphInputDims = new Array<readonly number[]>(modelInputIndices.length);\n\n      for (let i = 0; i < modelInputIndices.length; ++i) {\n        const graphInput = modelValues[modelInputIndices[i]];\n        graphInputDims[i] = graphInput.type!.shape.dims;\n\n        // cached for second and subsequent runs.\n        // Some parts of the framework works on the assumption that the graph and types and shapes are static\n        this.context.graphInputTypes!.push(graphInput.type!.tensorType);\n        this.context.graphInputDims!.push(inputs[i].dims);\n      }\n\n      this.validateInputTensorDims(graphInputDims, inputs, true);\n    }\n\n    // Second and subsequent session runs - graph input data is cached for the session\n    else {\n      this.validateInputTensorDims(this.context.graphInputDims, inputs, false);\n    }\n\n    // validate types requirement\n    this.validateInputTensorTypes(this.context.graphInputTypes!, inputs);\n\n    return inputs;\n  }\n\n  private validateInputTensorTypes(graphInputTypes: Tensor.DataType[], givenInputs: Tensor[]) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedType = graphInputTypes[i];\n      const actualType = givenInputs[i].type;\n      if (expectedType !== actualType) {\n        throw new Error(`input tensor[${i}] check failed: expected type '${expectedType}' but got ${actualType}`);\n      }\n    }\n  }\n\n  private validateInputTensorDims(\n      graphInputDims: Array<readonly number[]>, givenInputs: Tensor[], noneDimSupported: boolean) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      let expectedDims = graphInputDims[i];\n      const actualDims = givenInputs[i].dims;\n\n      if (!this.compareTensorDims(expectedDims, actualDims, noneDimSupported)) {\n        throw new Error(`input tensor[${i}] check failed: expected shape '[${expectedDims.join(',')}]' but got [${\n            actualDims.join(',')}]`);\n      }\n    }\n  }\n\n  private compareTensorDims(expectedDims: readonly number[], actualDims: readonly number[], noneDimSupported: boolean):\n      boolean {\n    if (expectedDims.length !== actualDims.length) {\n      return false;\n    }\n\n    for (let i = 0; i < expectedDims.length; ++i) {\n      if (expectedDims[i] !== actualDims[i] && (!noneDimSupported || expectedDims[i] !== 0) && expectedDims[i] !== null) {\n        // data shape mis-match AND not a 'None' dimension.\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private createOutput(outputTensors: Tensor[]): Map<string, Tensor> {\n    const modelOutputNames = this._model.graph.getOutputNames();\n    if (outputTensors.length !== modelOutputNames.length) {\n      throw new Error('expected number of outputs do not match number of generated outputs');\n    }\n\n    const output = new Map<string, Tensor>();\n    for (let i = 0; i < modelOutputNames.length; ++i) {\n      output.set(modelOutputNames[i], outputTensors[i]);\n    }\n\n    return output;\n  }\n\n  private initializeOps(graph: Graph): void {\n    const nodes = graph.getNodes();\n    this._ops = new Array(nodes.length);\n\n    for (let i = 0; i < nodes.length; i++) {\n      this._ops[i] = this.sessionHandler.resolve(nodes[i], this._model.opsets, graph);\n    }\n  }\n\n  private _model: Model;\n  private _initialized: boolean;\n\n  private _ops: Operator[];\n  private _executionPlan: ExecutionPlan;\n\n  private backendHint?: string;\n\n  private sessionHandler: SessionHandlerType;\n  private context: Session.Context;\n  private profiler: Readonly<Profiler>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Guid} from 'guid-typescript';\nimport Long from 'long';\n\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\nimport {onnx} from './ort-schema/protobuf/onnx';\nimport {decodeUtf8String, ProtoUtil, ShapeUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Tensor {\n  export interface DataTypeMap {\n    bool: Uint8Array;\n    float32: Float32Array;\n    float64: Float64Array;\n    string: string[];\n    int8: Int8Array;\n    uint8: Uint8Array;\n    int16: Int16Array;\n    uint16: Uint16Array;\n    int32: Int32Array;\n    uint32: Uint32Array;\n  }\n\n  export type DataType = keyof DataTypeMap;\n\n  export type StringType = Tensor.DataTypeMap['string'];\n  export type BooleanType = Tensor.DataTypeMap['bool'];\n  export type IntegerType = Tensor.DataTypeMap['int8']|Tensor.DataTypeMap['uint8']|Tensor.DataTypeMap['int16']|\n                            Tensor.DataTypeMap['uint16']|Tensor.DataTypeMap['int32']|Tensor.DataTypeMap['uint32'];\n  export type FloatType = Tensor.DataTypeMap['float32']|Tensor.DataTypeMap['float64'];\n  export type NumberType = BooleanType|IntegerType|FloatType;\n\n  export type Id = Guid;\n}\n\ntype TensorData = Tensor.DataTypeMap[Tensor.DataType];\n\ntype DataProvider = (id: Tensor.Id) => TensorData;\ntype AsyncDataProvider = (id: Tensor.Id) => Promise<TensorData>;\n\nexport class Tensor {\n  /**\n   * get the underlying tensor data\n   */\n  get data(): TensorData {\n    if (this.cache === undefined) {\n      const data = this.dataProvider!(this.dataId);\n      if (data.length !== this.size) {\n        throw new Error('Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.');\n      }\n      this.cache = data;\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the underlying string tensor data. Should only use when type is STRING\n   */\n  get stringData() {\n    if (this.type !== 'string') {\n      throw new TypeError('data type is not string');\n    }\n\n    return this.data as Tensor.StringType;\n  }\n\n  /**\n   * get the underlying integer tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL)\n   */\n  get integerData() {\n    switch (this.type) {\n      case 'uint8':\n      case 'int8':\n      case 'uint16':\n      case 'int16':\n      case 'int32':\n      case 'uint32':\n      case 'bool':\n        return this.data as Tensor.IntegerType;\n\n      default:\n        throw new TypeError('data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)');\n    }\n  }\n\n  /**\n   * get the underlying float tensor data. Should only use when type is one of the following: (FLOAT, DOUBLE)\n   */\n  get floatData() {\n    switch (this.type) {\n      case 'float32':\n      case 'float64':\n        return this.data as Tensor.FloatType;\n\n      default:\n        throw new TypeError('data type is not float (float32, float64)');\n    }\n  }\n\n  /**\n   * get the underlying number tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL, FLOAT, DOUBLE)\n   */\n  get numberData() {\n    if (this.type !== 'string') {\n      return this.data as Tensor.NumberType;\n    }\n    throw new TypeError('type cannot be non-number (string)');\n  }\n\n  /**\n   * get value of an element at the given indices\n   */\n  get(indices: readonly number[]): Tensor.DataTypeMap[Tensor.DataType][number] {\n    return this.data[ShapeUtil.indicesToOffset(indices, this.strides)];\n  }\n\n  /**\n   * set value of an element at the given indices\n   */\n  set(indices: readonly number[], value: Tensor.DataTypeMap[Tensor.DataType][number]) {\n    this.data[ShapeUtil.indicesToOffset(indices, this.strides)] = value;\n  }\n\n  /**\n   * get the underlying tensor data asynchronously\n   */\n  async getData(): Promise<TensorData> {\n    if (this.cache === undefined) {\n      this.cache = await this.asyncDataProvider!(this.dataId);\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the number of elements in the tensor\n   */\n  public readonly size: number;\n\n  private _strides: readonly number[];\n  /**\n   * get the strides for each dimension\n   */\n  get strides(): readonly number[] {\n    if (!this._strides) {\n      this._strides = ShapeUtil.computeStrides(this.dims);\n    }\n    return this._strides;\n  }\n\n  constructor(\n      /**\n       * get the dimensions of the tensor\n       */\n      public readonly dims: readonly number[],\n      /**\n       * get the type of the tensor\n       */\n      public readonly type: Tensor.DataType, private dataProvider?: DataProvider,\n      private asyncDataProvider?: AsyncDataProvider, private cache?: TensorData,\n      /**\n       * get the data ID that used to map to a tensor data\n       */\n      public readonly dataId: Guid = Guid.create()) {\n    this.size = ShapeUtil.validateDimsAndCalcSize(dims);\n    const size = this.size;\n    const empty = (dataProvider === undefined && asyncDataProvider === undefined && cache === undefined);\n\n    if (cache !== undefined) {\n      if (cache.length !== size) {\n        throw new RangeError('Input dims doesn\\'t match data length.');\n      }\n    }\n\n    if (type === 'string') {\n      if (cache !== undefined && (!Array.isArray(cache) || !cache.every(i => typeof i === 'string'))) {\n        throw new TypeError('cache should be a string array');\n      }\n\n      if (empty) {\n        this.cache = new Array<string>(size);\n      }\n    } else {\n      if (cache !== undefined) {\n        const constructor = dataviewConstructor(type);\n        if (!(cache instanceof constructor)) {\n          throw new TypeError(`cache should be type ${constructor.name}`);\n        }\n      }\n\n      if (empty) {\n        const buf = new ArrayBuffer(size * sizeof(type));\n        this.cache = createView(buf, type);\n      }\n    }\n  }\n\n  /**\n   * Construct new Tensor from a ONNX Tensor object\n   * @param tensorProto the ONNX Tensor\n   */\n  static fromProto(tensorProto: onnx.ITensorProto): Tensor {\n    if (!tensorProto) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const type = ProtoUtil.tensorDataTypeFromProto(tensorProto.dataType!);\n    const dims = ProtoUtil.tensorDimsFromProto(tensorProto.dims!);\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      tensorProto.stringData!.forEach((str, i) => {\n        value.data[i] = decodeUtf8String(str);\n      });\n\n    } else if (\n        tensorProto.rawData && typeof tensorProto.rawData.byteLength === 'number' &&\n        tensorProto.rawData.byteLength > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource =\n          new DataView(tensorProto.rawData.buffer, tensorProto.rawData.byteOffset, tensorProto.rawData.byteLength);\n      const elementSize = sizeofProto(tensorProto.dataType!);\n      const length = tensorProto.rawData.byteLength / elementSize;\n\n      if (tensorProto.rawData.byteLength % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, tensorProto.dataType!, i * elementSize);\n        dataDest[i] = n;\n      }\n    } else {\n      // populate value from array\n      let array: Array<number|Long>;\n      switch (tensorProto.dataType) {\n        case onnx.TensorProto.DataType.FLOAT:\n          array = tensorProto.floatData!;\n          break;\n        case onnx.TensorProto.DataType.INT32:\n        case onnx.TensorProto.DataType.INT16:\n        case onnx.TensorProto.DataType.UINT16:\n        case onnx.TensorProto.DataType.INT8:\n        case onnx.TensorProto.DataType.UINT8:\n        case onnx.TensorProto.DataType.BOOL:\n          array = tensorProto.int32Data!;\n          break;\n        case onnx.TensorProto.DataType.INT64:\n          array = tensorProto.int64Data!;\n          break;\n        case onnx.TensorProto.DataType.DOUBLE:\n          array = tensorProto.doubleData!;\n          break;\n        case onnx.TensorProto.DataType.UINT32:\n        case onnx.TensorProto.DataType.UINT64:\n          array = tensorProto.uint64Data!;\n          break;\n        default:\n          // should never run here\n          throw new Error('unspecific error');\n      }\n\n      if (array === null || array === undefined) {\n        throw new Error('failed to populate data from a tensorproto value');\n      }\n\n      const data = value.data;\n      if (data.length !== array.length) {\n        throw new Error('array length mismatch');\n      }\n\n      for (let i = 0; i < array.length; i++) {\n        const element = array[i];\n        if (Long.isLong(element)) {\n          data[i] = longToNumber(element, tensorProto.dataType);\n        } else {\n          data[i] = element;\n        }\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Construct new Tensor from raw data\n   * @param data the raw data object. Should be a string array for 'string' tensor, and the corresponding typed array\n   * for other types of tensor.\n   * @param dims the dimensions of the tensor\n   * @param type the type of the tensor\n   */\n  static fromData(data: Tensor.DataTypeMap[Tensor.DataType], dims: readonly number[], type: Tensor.DataType) {\n    return new Tensor(dims, type, undefined, undefined, data);\n  }\n\n  static fromOrtTensor(ortTensor: ortFbs.Tensor) {\n    if (!ortTensor) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const dims = ProtoUtil.tensorDimsFromORTFormat(ortTensor);\n    const type = ProtoUtil.tensorDataTypeFromProto(ortTensor.dataType());\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      for (let i = 0; i < ortTensor.stringDataLength(); i++) {\n        value.data[i] = ortTensor.stringData(i);\n      }\n\n    } else if (\n        ortTensor.rawDataArray() && typeof ortTensor.rawDataLength() === 'number' && ortTensor.rawDataLength() > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource = new DataView(\n          ortTensor.rawDataArray()!.buffer, ortTensor.rawDataArray()!.byteOffset, ortTensor.rawDataLength());\n      const elementSize = sizeofProto(ortTensor.dataType());\n      const length = ortTensor.rawDataLength() / elementSize;\n\n      if (ortTensor.rawDataLength() % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, ortTensor.dataType(), i * elementSize);\n        dataDest[i] = n;\n      }\n    }\n    return value;\n  }\n}\n\nfunction sizeof(type: Tensor.DataType): number {\n  switch (type) {\n    case 'bool':\n    case 'int8':\n    case 'uint8':\n      return 1;\n    case 'int16':\n    case 'uint16':\n      return 2;\n    case 'int32':\n    case 'uint32':\n    case 'float32':\n      return 4;\n    case 'float64':\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${type}`);\n  }\n}\n\nfunction sizeofProto(type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.UINT8:\n    case onnx.TensorProto.DataType.INT8:\n    case onnx.TensorProto.DataType.BOOL:\n      return 1;\n    case onnx.TensorProto.DataType.UINT16:\n    case onnx.TensorProto.DataType.INT16:\n      return 2;\n    case onnx.TensorProto.DataType.FLOAT:\n    case onnx.TensorProto.DataType.INT32:\n    case onnx.TensorProto.DataType.UINT32:\n      return 4;\n    case onnx.TensorProto.DataType.INT64:\n    case onnx.TensorProto.DataType.DOUBLE:\n    case onnx.TensorProto.DataType.UINT64:\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n\nfunction createView(dataBuffer: ArrayBuffer, type: Tensor.DataType) {\n  return new (dataviewConstructor(type))(dataBuffer);\n}\n\nfunction dataviewConstructor(type: Tensor.DataType) {\n  switch (type) {\n    case 'bool':\n    case 'uint8':\n      return Uint8Array;\n    case 'int8':\n      return Int8Array;\n    case 'int16':\n      return Int16Array;\n    case 'uint16':\n      return Uint16Array;\n    case 'int32':\n      return Int32Array;\n    case 'uint32':\n      return Uint32Array;\n    case 'float32':\n      return Float32Array;\n    case 'float64':\n      return Float64Array;\n    default:\n      // should never run to here\n      throw new Error('unspecified error');\n  }\n}\n\n// convert a long number to a 32-bit integer (cast-down)\nfunction longToNumber(i: Long, type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  // INT64, UINT32, UINT64\n  if (type === onnx.TensorProto.DataType.INT64 || type === ortFbs.TensorDataType.INT64) {\n    if (i.greaterThanOrEqual(2147483648) || i.lessThan(-2147483648)) {\n      throw new TypeError('int64 is not supported');\n    }\n  } else if (\n      type === onnx.TensorProto.DataType.UINT32 || type === ortFbs.TensorDataType.UINT32 ||\n      type === onnx.TensorProto.DataType.UINT64 || type === ortFbs.TensorDataType.UINT64) {\n    if (i.greaterThanOrEqual(4294967296) || i.lessThan(0)) {\n      throw new TypeError('uint64 is not supported');\n    }\n  } else {\n    throw new TypeError(`not a LONG type: ${onnx.TensorProto.DataType[type]}`);\n  }\n\n  return i.toNumber();\n}\n\n// read one value from TensorProto\nfunction readProto(view: DataView, type: onnx.TensorProto.DataType|ortFbs.TensorDataType, byteOffset: number): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.BOOL:\n    case onnx.TensorProto.DataType.UINT8:\n      return view.getUint8(byteOffset);\n    case onnx.TensorProto.DataType.INT8:\n      return view.getInt8(byteOffset);\n    case onnx.TensorProto.DataType.UINT16:\n      return view.getUint16(byteOffset, true);\n    case onnx.TensorProto.DataType.INT16:\n      return view.getInt16(byteOffset, true);\n    case onnx.TensorProto.DataType.FLOAT:\n      return view.getFloat32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT32:\n      return view.getInt32(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT32:\n      return view.getUint32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), false), type);\n    case onnx.TensorProto.DataType.DOUBLE:\n      return view.getFloat64(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), true), type);\n    default:\n      throw new Error(`cannot read from DataView for type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\nimport Long from 'long';\n\nimport {Graph} from './graph';\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\nimport {onnx} from './ort-schema/protobuf/onnx';\nimport {Tensor} from './tensor';\n\n// check the inputs shape before running an OP.\n// return true when the inputs pass the check\n// return false when the inputs do not fit the requirement\n// throw exception when fatal error or not implemented\nexport function checkInputsShape(inputs: Tensor[], ...expectedDimensions: number[]): boolean {\n  if (!inputs || inputs.length !== expectedDimensions.length) {\n    return false;\n  }\n  for (let i = 0; i < inputs.length; i++) {\n    if (!inputs[i].dims || inputs[i].dims.length !== expectedDimensions[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Evaluates the given expression and asserts error message if condition is unmet.\nexport function assert(expr: boolean, msg: () => string) {\n  if (!expr) {\n    throw new Error(typeof msg === 'string' ? msg : msg());\n  }\n}\n\nexport class ArrayUtil {\n  /**\n   * Verifies if 2 input arrays contain the same elements.\n   * @param n1 Array 1\n   * @param n2 Array 2\n   * @returns Whether these 2 are equal\n   */\n  static arraysEqual(\n      n1: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array,\n      n2: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array) {\n    if (n1.length !== n2.length) {\n      return false;\n    }\n    for (let i = 0; i < n1.length; i++) {\n      if (n1[i] !== n2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nexport class MatMulUtil {\n  /**\n   * Fix the input shapes for MatMul operation if they need fixing\n   * @param dimsA The shape of tensor A. Should be an array of positive integers\n   * @param dimsB The shape of tensor B. Should be an array of positive integers\n   * @returns A tuple containing the preprocessed input shapes as required by ONNX specifications\n   */\n  static preprocessInputShapes(dimsA: readonly number[], dimsB: readonly number[]):\n      [readonly number[], readonly number[]] {\n    // If the first argument is 1-D, it is promoted to a matrix by prepending\n    // a 1 to its dimensions. After matrix multiplication the prepended 1 is\n    // removed.\n    const a = (dimsA.length === 1) ? [1, dimsA[0]] : dimsA;\n\n    // If the second argument is 1-D, it is promoted to a matrix by appending\n    // a 1 to its dimensions. After matrix multiplication the appended 1 is\n    // removed.\n    const b = (dimsB.length === 1) ? [dimsB[0], 1] : dimsB;\n\n    return [a, b];\n  }\n\n  /**\n   * Fix the output shape computed for MatMul operation if it needs fixing\n   * @param outputShape The computed outputShape. Should be an array (atleast of length 2) of positive integers.\n   * This will be mutated.\n   * @param aRank The rank of tensor A.\n   * @param bRank The rank of tensor B.\n   */\n  static postprocessOutputShape(outputShape: number[], aRank: number, bRank: number) {\n    // Remove prepended dimension if first input is 1d\n    if (aRank === 1) {\n      // outputShape = outputShape.slice(0, outputShape.length - 2).concat(outputShape.slice(outputShape.length - 1));\n      outputShape.splice(outputShape.length - 2, 1);\n    }\n    // Remove appended dimension if second input is 1d\n    if (bRank === 1) {\n      outputShape.pop();\n    }\n  }\n\n  /**\n   * Calculate the expected shape when matrix multiplication\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\n  }\n}\n\nexport class BroadcastUtil {\n  /**\n   * Calculate the expected shape when broadcasting 2 tensors\n   * @param a The shape of tensor A. Should be an array of positive integers\n   * @param b The shape of tensor B. Should be an array of positive integers\n   * @param isMatMul Whether the operation is MatMul\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcShape(adims: readonly number[], bdims: readonly number[], isMatMul = false): readonly number[]|undefined {\n    const arank = adims.length;\n    const brank = bdims.length;\n    if (arank === 0) {\n      return bdims;\n    }\n    if (brank === 0) {\n      return adims;\n    }\n    const crank = Math.max(adims.length, bdims.length);\n    const cdims = new Array<number>(crank);\n\n    // calculate the last 2 dimension if it is MatMul\n    if (isMatMul) {\n      if (arank < 2 || brank < 2) {\n        return undefined;\n      }\n      const cShapeMatMul =\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\n      if (cShapeMatMul === undefined) {\n        return undefined;\n      }\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\n    }\n\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\n\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\n        return undefined;\n      }\n      cdims[crank - i] = Math.max(aLen, bLen);\n    }\n\n    return cdims;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcas\n   * @returns The calculated indices that maps to the original tensor.\n   */\n  static index(broadcastedIndices: readonly number[], originalShape: readonly number[]): number[] {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same\n    // length as the broadcasted shape, and for each dimension the index should\n    // not be out of range.\n    const originalIndices = new Array(originalShape.length);\n    BroadcastUtil.fillIndex(broadcastedIndices, originalShape, originalIndices);\n    return originalIndices;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcast\n   * @param originalIndices The mapping of broadcastedIndices to the originalIndices (output parameter - will be\n   *     mutated).\n   */\n  static fillIndex(broadcastedIndices: readonly number[], originalShape: readonly number[], originalIndices: number[]) {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same length as the\n    // broadcasted shape, and for each dimension the index should not be out of range.\n    // NOTE 2: we assume the parameter originalIndices has the same length as the originalShape\n    const dimOffset = broadcastedIndices.length - originalShape.length;\n    for (let i = 0; i < originalShape.length; i++) {\n      originalIndices[i] = broadcastedIndices[dimOffset + i] % originalShape[i];\n    }\n  }\n\n  /**\n   * Perform the broadcasting operation on the specific operator\n   * @param a The input tensor A\n   * @param b The input tensor B\n   * @param op The operator lambda function\n   * @param inplace Whether to write the result back to A.\n   * @returns The result tensor, or undefined if input not broadcastable.\n   */\n  static calc(\n      a: Tensor, b: Tensor, op: (a: string|number, b: string|number) => (string | number), inplace: boolean,\n      resultType?: Tensor.DataType): Tensor|undefined {\n    const outputShape = BroadcastUtil.calcShape(a.dims, b.dims);\n\n    if (outputShape) {\n      if (inplace && !ShapeUtil.areEqual(outputShape, a.dims)) {\n        // B is not broadcastable to A, failed to calculate inplace.\n        return undefined;\n      }\n\n      const size = ShapeUtil.size(outputShape);\n      const c = inplace ? a : new Tensor(outputShape, resultType || a.type);\n\n      // both inputs are scalars\n      if (outputShape.length === 0) {\n        c.set([], op(a.get([]), b.get([])));\n      }\n\n      // atleast one input is a non-scalar\n      else {\n        const outputIndices = new Array<number>(outputShape.length);\n        const originalIndicesA = new Array(a.dims.length);\n        const originalIndicesB = new Array(b.dims.length);\n        let valA: string|number = 0;\n        let valB: string|number = 0;\n        let isAScalar = false;\n        let isBScalar = false;\n        if (a.dims.length === 0) {\n          valA = a.get([]);\n          isAScalar = true;\n        }\n        if (b.dims.length === 0) {\n          valB = b.get([]);\n          isBScalar = true;\n        }\n        let rest: number;\n        for (let i = 0; i < size; i++) {\n          // traversal indices\n          rest = i;\n          for (let j = outputShape.length - 1; j >= 0; j--) {\n            outputIndices[j] = rest % outputShape[j];\n            rest = Math.floor(rest / outputShape[j]);\n          }\n\n          if (!isAScalar) {\n            // map outputIndices (which is actually broadcasted) to the originalIndices\n            BroadcastUtil.fillIndex(outputIndices, a.dims, originalIndicesA);\n            valA = a.get(originalIndicesA);\n          }\n          if (!isBScalar) {\n            BroadcastUtil.fillIndex(outputIndices, b.dims, originalIndicesB);\n            valB = b.get(originalIndicesB);\n          }\n\n          c.set(outputIndices, op(valA, valB));\n        }\n      }\n\n      return c;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Determine if a shape is unidirectional broadcastable to another shape\n   * @param shape The input shape\n   * @param finalShape The desired shape after broadcasting\n   */\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\n    // align shape to the right\n    const inputRank = shape.length;\n    const finalRank = finalShape.length;\n    if (inputRank > finalRank) {\n      return false;\n    }\n    for (let i = 1; i <= inputRank; i++) {\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determine the broadcasted dims in input shape based on the given output shape.\n   * Note that this function only returns the broadcasted dims.\n   * @param inputShape The input shape\n   * @param outputShape The output shape\n   * @returns The broadcasted dims in input shape.\n   */\n  static getBroadcastDims(inputShape: readonly number[], outputShape: readonly number[]): number[] {\n    const inRank = inputShape.length;\n    const dims: number[] = [];\n    for (let i = 0; i < inRank; i++) {\n      const dim = inRank - 1 - i;\n      const a = inputShape[dim] || 1;\n      const b = outputShape[outputShape.length - 1 - i] || 1;\n      if (b > 1 && a === 1) {\n        dims.unshift(dim);\n      }\n    }\n    return dims;\n  }\n}\n\n// copy array helper\n// mimics memcpy as much as possible\nexport function arrayCopyHelper(\n    target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n    blockSize: number) {\n  if (sourceIndex < 0 || sourceIndex >= source.length) {\n    throw new Error('sourceIndex out of bounds');\n  }\n  if (targetIndex < 0 || targetIndex >= target.length) {\n    throw new Error('targetIndex out of bounds');\n  }\n  if (sourceIndex + blockSize > source.length) {\n    throw new Error('source indices to be copied are outside bounds');\n  }\n  if (targetIndex + blockSize > target.length) {\n    throw new Error('target array is too small to hold result');\n  }\n\n  for (let offset = 0; offset < blockSize; offset++) {\n    target[targetIndex + offset] = source[sourceIndex + offset];\n  }\n}\n\nexport class GemmUtil {\n  // will make sure input shapes are compatible for this op\n  // and return back the shape of the output in the form of a tuple\n  // will throw exception if the input shapes are not compatible\n  static getShapeOfGemmResult(\n      leftShape: readonly number[], transLeft: boolean, rightShape: readonly number[], transRight: boolean,\n      biasShape?: readonly number[]): readonly number[] {\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\n      throw new Error('shape need to be of size 2');\n    }\n\n    let M: number;\n    let K: number;\n    let N: number;\n\n    if (transLeft) {\n      M = leftShape[1];\n      K = leftShape[0];\n    } else {\n      M = leftShape[0];\n      K = leftShape[1];\n    }\n\n    let kDim = -1;\n\n    if (transRight) {\n      N = rightShape[0];\n      kDim = 1;\n    } else {\n      N = rightShape[1];\n      kDim = 0;\n    }\n\n    if (rightShape[kDim] !== K) {\n      throw new Error('dimension mismatch');\n    }\n\n    if (M <= 0 || N <= 0 || K <= 0) {\n      throw new Error('invalid shape specified');\n    }\n\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\n      throw new Error('gemm: invalid bias shape for broadcast');\n    }\n\n    return [M, N, K];\n  }\n}\n\nexport class ProtoUtil {\n  static tensorDataTypeFromProto(typeProto: onnx.TensorProto.DataType|\n                                 onnxruntime.experimental.fbs.TensorDataType): Tensor.DataType {\n    switch (typeProto) {\n      case onnx.TensorProto.DataType.INT8:\n        return 'int8';\n      case onnx.TensorProto.DataType.UINT8:\n        return 'uint8';\n      case onnx.TensorProto.DataType.BOOL:\n        return 'bool';\n      case onnx.TensorProto.DataType.INT16:\n        return 'int16';\n      case onnx.TensorProto.DataType.UINT16:\n        return 'uint16';\n      case onnx.TensorProto.DataType.INT32:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT32:\n        return 'uint32';\n      case onnx.TensorProto.DataType.FLOAT:\n        return 'float32';\n      case onnx.TensorProto.DataType.DOUBLE:\n        return 'float64';\n      case onnx.TensorProto.DataType.STRING:\n        return 'string';\n\n      // For INT64/UINT64, reduce their value to 32-bits.\n      // Should throw exception when overflow\n      case onnx.TensorProto.DataType.INT64:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT64:\n        return 'uint32';\n\n      default:\n        throw new Error(`unsupported data type: ${onnx.TensorProto.DataType[typeProto]}`);\n    }\n  }\n\n  static tensorDataTypeStringToEnum(type: string): onnx.TensorProto.DataType {\n    switch (type) {\n      case 'int8':\n        return onnx.TensorProto.DataType.INT8;\n      case 'uint8':\n        return onnx.TensorProto.DataType.UINT8;\n      case 'bool':\n        return onnx.TensorProto.DataType.BOOL;\n      case 'int16':\n        return onnx.TensorProto.DataType.INT16;\n      case 'uint16':\n        return onnx.TensorProto.DataType.UINT16;\n      case 'int32':\n        return onnx.TensorProto.DataType.INT32;\n      case 'uint32':\n        return onnx.TensorProto.DataType.UINT32;\n      case 'float32':\n        return onnx.TensorProto.DataType.FLOAT;\n      case 'float64':\n        return onnx.TensorProto.DataType.DOUBLE;\n      case 'string':\n        return onnx.TensorProto.DataType.STRING;\n      case 'int64':\n        return onnx.TensorProto.DataType.INT64;\n      case 'uint64':\n        return onnx.TensorProto.DataType.UINT64;\n\n      default:\n        throw new Error(`unsupported data type: ${type}`);\n    }\n  }\n\n  static tensorDimsFromProto(dims: Array<number|Long>): number[] {\n    // get rid of Long type for dims\n    return dims.map(d => Long.isLong(d) ? d.toNumber() : d);\n  }\n\n  static tensorValueTypeFromProto(valueType: onnx.TypeProto.ITensor): Graph.ValueType {\n    return {\n      tensorType: ProtoUtil.tensorDataTypeFromProto(valueType.elemType!),\n      shape: {dims: ProtoUtil.tensorDimsFromProto(valueType.shape!.dim!.map(d => d.dimValue!))}\n    };\n  }\n\n  static tensorDimsFromORTFormat(tensor: onnxruntime.experimental.fbs.Tensor) {\n    const dims = [];\n    for (let i = 0; i < tensor.dimsLength(); i++) {\n      dims.push(LongUtil.longToNumber(tensor.dims(i)!));\n    }\n    return dims;\n  }\n\n  static tensorAttributesFromORTFormat(node: onnxruntime.experimental.fbs.Node) {\n    const attributes = [];\n    for (let i = 0; i < node.attributesLength(); i++) {\n      attributes.push(node.attributes(i)!);\n    }\n    return attributes;\n  }\n}\n\nexport class LongUtil {\n  // This function is called to get a number from long type of data for attribute, dim, and ir version,\n  // which values are signed integers.\n  // To make it more generic, add an optional paramter to convert to a unsigned number.\n  static longToNumber(n: Long|flatbuffers.Long|number, unsigned?: boolean) {\n    if (Long.isLong(n)) {\n      return n.toNumber();\n    } else if (n instanceof flatbuffers.Long) {\n      return Long.fromValue({low: n.low, high: n.high, unsigned: unsigned ?? false}).toNumber();\n    }\n    return n;\n  }\n  static isLong(n: unknown) {\n    return Long.isLong(n) || n instanceof flatbuffers.Long;\n  }\n}\n\nexport class ShapeUtil {\n  static size(dims: readonly number[]): number {\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\n  }\n\n  // `axis` inclusive\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\n  }\n\n  // `axis` exclusive\n  static sizeToDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\n  }\n\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\n    let size = 1;\n    for (let i = start; i < end; i++) {\n      // safety check as this method is called by multiple other methods requiring size.\n      // size cannot be 0 or negative.\n      if (dims[i] <= 0) {\n        throw new Error(\n            // eslint-disable-next-line max-len\n            'cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.');\n      }\n      size *= dims[i];\n    }\n    return size;\n  }\n\n  static computeStrides(dims: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [1];\n    }\n    const strides = new Array(rank);\n    strides[rank - 1] = 1;\n    strides[rank - 2] = dims[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * dims[i + 1];\n    }\n    return strides;\n  }\n\n  static transpose(dims: readonly number[]): readonly number[] {\n    const copy = dims.slice();\n    return copy.reverse();\n  }\n\n  static indicesToOffset(indices: readonly number[], strides: readonly number[], axis?: number): number {\n    if (axis === undefined) {\n      axis = indices.length;\n    }\n    let offset = 0;\n    for (let i = 0; i < axis; ++i) {\n      offset += strides[i] * indices[i];\n    }\n    return offset;\n  }\n\n  static offsetToIndices(offset: number, strides: readonly number[]): readonly number[] {\n    const rank = strides.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [offset * strides[0]];\n    }\n    const indices: number[] = new Array(strides.length);\n    for (let i = 0; i < indices.length - 1; ++i) {\n      indices[i] = Math.floor(offset / strides[i]);\n      offset -= indices[i] * strides[i];\n    }\n    indices[indices.length - 1] = offset;\n    return indices;\n  }\n\n  /**\n   * normailze axis of range [-r, r) into [0, r).\n   */\n  static normalizeAxis(axis: number, tensorRank: number): number {\n    if (axis < -tensorRank && axis >= tensorRank) {\n      throw new Error('unsupported axis for this operation.');\n    }\n    return axis < 0 ? axis + tensorRank : axis;\n  }\n\n  static normalizeAxes(axes: readonly number[], tensorRank: number): number[] {\n    return axes.map(x => this.normalizeAxis(x, tensorRank));\n  }\n\n  // Increment an index into a tensor (in lexicographic\n  // ordering), wrapping around the specified upper_bound.\n  /**\n   * Increment an index into a tensor (in lexicographic ordering), wrapping around the specified upper_bound.\n   * @param index Given index to increment (Will be mutated)\n   * @param dims The dimensions of the tensor for which the given index corresponds to\n   * @param axisToIncrementOn The 1-indexed axis to increment on. If undefined, axisToIncrementOn == rank\n   */\n  static incrementIndex(index: number[], dims: readonly number[], axisToIncrementOn?: number) {\n    if (dims.length === 0 || index.length === 0) {\n      throw new Error('Index incrementing unsupported for scalar Tensor');\n    }\n    if (axisToIncrementOn === undefined) {\n      axisToIncrementOn = dims.length;\n    } else {\n      if (axisToIncrementOn <= 0 || axisToIncrementOn > dims.length) {\n        throw new Error('Incorrect axis to increment on');\n      }\n    }\n\n    for (let k = axisToIncrementOn - 1; k >= 0; --k) {\n      index[k]++;\n      if (index[k] < dims[k]) {\n        break;\n      }\n      index[k] = 0;\n    }\n  }\n\n  /**\n   * Produces a new dimensions array based on the values in the 'originalDimensions' and 'shape' array\n   * Used in Reshape\n   * @param originalDims Original Shape array\n   * @param shapeHints array containing values to compute the new dimensions\n   * For example:\n   * originalDims = [2,2] and shapeHints = [0,-1] will return [2,2]\n   * originalDims = [2,2] and shapeHints = [4] will return [4]\n   * originalDims = [2,2] and shapeHints = [5] will throw an exception\n   * https://github.com/onnx/onnx/blob/main/docs/Operators.md#Reshape\n   */\n\n  static calculateReshapedDims(originalDims: readonly number[], shapeHints: ArrayLike<number>): number[] {\n    // reshape to a Scalar Tensor\n    if (shapeHints.length === 0) {\n      if (originalDims.length === 0 || ShapeUtil.size(originalDims) === 1) {\n        return [];\n      } else {\n        throw new Error('cannot reshape to a scalar Tensor');\n      }\n    }\n\n    const nDims = shapeHints.length;\n    const reshapedDims = new Array<number>(nDims);\n    let unknownDimension = -1;\n    let newTensorSize = 1;\n    for (let i = 0; i < nDims; i++) {\n      if (shapeHints[i] < -1) {\n        throw new Error('a dimension in shape hints cannot be less than -1');\n      }\n      if (shapeHints[i] === -1) {\n        if (unknownDimension !== -1) {\n          throw new Error('at most one dimension in shape hints can be -1');\n        }\n        unknownDimension = i;\n      } else {\n        if (shapeHints[i] === 0) {\n          if (i >= originalDims.length) {\n            throw new Error('the dimension with value zero exceeds the dimension size of the input tensor');\n          }\n          reshapedDims[i] = originalDims[i];\n        } else {\n          reshapedDims[i] = shapeHints[i];\n        }\n        newTensorSize *= reshapedDims[i];\n      }\n    }\n\n    const oldTensorSize = ShapeUtil.size(originalDims);\n    if (unknownDimension !== -1) {\n      if (oldTensorSize % newTensorSize !== 0) {\n        throw new Error(`the input tensor cannot be reshaped to the requested shape. Input shape: [${\n            originalDims}] Output shape: [${shapeHints}]`);\n      }\n      reshapedDims[unknownDimension] = oldTensorSize / newTensorSize;\n    }\n    // validate sizes from originalDims and reshapedDims match\n    else {\n      if (newTensorSize !== oldTensorSize) {\n        throw new Error('reshapedDims and originalDims don\\'t have matching sizes');\n      }\n    }\n    return reshapedDims;\n  }\n\n  /**\n   * Sorts a given array based on the indices in the Perm array\n   * Used in Transpose\n   * @param a Array to be sorted such as dims or strides\n   * @param perm Perm given; if null a will be reversed\n   */\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\n    if (perm) {\n      return perm.map((v) => a[v]);\n    } else {\n      return a.slice().reverse();\n    }\n  }\n\n  /**\n   * Pads a given shape according to the padding values\n   * @param dims shape of the Tensor to be padded\n   * @param pad pad values\n   */\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\n  }\n\n  /**\n   * Determines if the two shapes are identical\n   * @param shape1\n   * @param shape2\n   */\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\n    if (shape1.length !== shape2.length) {\n      return false;\n    }\n    return shape1.every((v, i) => v === shape2[i]);\n  }\n\n  /**\n   * Validates if the given `dims` or `shape` is valid in ONNX.js context and returns data size\n   * @param dims - input `dims` that needs to be checked\n   */\n  static validateDimsAndCalcSize(dims: readonly number[]): number {\n    if (dims.length > 6) {\n      throw new TypeError('Only rank 0 to 6 is supported for tensor shape.');\n    }\n    let size = 1;\n    for (const n of dims) {\n      if (!Number.isInteger(n)) {\n        throw new TypeError(`Invalid shape: ${n} is not an integer`);\n      }\n      if (n < 0 || n > 2147483647) {\n        throw new TypeError(`Invalid shape: length ${n} is not allowed`);\n      }\n      size *= n;\n    }\n    return size;\n  }\n\n  /**\n   * Determines the shape of output tensor y = flatten(x, axis)\n   * @param dims - shape of input tensor\n   * @param axis - flatten axis, in the range [-r, r]\n   */\n  static flattenShape(dims: readonly number[], axis: number): readonly number[] {\n    if (axis < 0) {\n      axis += dims.length;\n    }\n    const total = dims.reduce((x, y) => x * y, 1);\n    const right = dims.slice(axis).reduce((x, y) => x * y, 1);\n    const outputDims = [total / right, right];\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = squeeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - squeeze axes\n   */\n  static squeezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>();\n\n    // sanity check\n    axes = ShapeUtil.normalizeAxes(axes, dims.length);\n\n    for (let i = 0; i < dims.length; i++) {\n      const inSqueezeList = axes.indexOf(i) >= 0;\n      if (inSqueezeList && dims[i] !== 1) {\n        throw new Error('squeeze an axis of size different than 1');\n      }\n\n      if ((axes.length === 0 && dims[i] > 1) || (axes.length > 0 && !inSqueezeList)) {\n        outputDims.push(dims[i]);\n      }\n    }\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = unsqueeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - unsqueeze axes\n   */\n  static unsqueezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>(dims.length + axes.length);\n\n    // initialize the array elements to 0\n    outputDims.fill(0);\n\n    // set all axes indices to 1 in outputDims and check for duplicates\n    for (let i = 0; i < axes.length; i++) {\n      const axis = ShapeUtil.normalizeAxis(axes[i], outputDims.length);\n      if (axis >= outputDims.length) {\n        throw new Error('\\'axes\\' has an out of range axis');\n      }\n      if (outputDims[axis] !== 0) {\n        throw new Error('\\'axes\\' has a duplicate axis');\n      }\n\n      outputDims[axis] = 1;\n    }\n\n    // fill in the zero entries of outputDims with the input tensor's shape\n    let inputDimsIterator = 0;\n    for (let i = 0; i < outputDims.length; i++) {\n      if (outputDims[i] === 0) {\n        outputDims[i] = dims[inputDimsIterator++];\n      }\n    }\n\n    // sanity check assertion. 'inputDimsIterator'\n    // should be equal to the length of 'dims'\n    if (inputDimsIterator !== dims.length) {\n      throw new Error('the unsqueezed dimension could not be established');\n    }\n\n    return outputDims;\n  }\n}\n\n// bunch of helper methods that do a variety of math operations\nexport class MathUtil {\n  // y = (x*x) + y\n  static sqr(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += Math.pow(source[sourceIndex + offset], 2);\n    }\n  }\n\n  // y = ax + y\n  static axpy(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, alpha: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += (alpha * source[sourceIndex + offset]);\n    }\n  }\n\n  // y = pow(x, b)\n  static powx(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, b: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = Math.pow(source[sourceIndex + offset], b);\n    }\n  }\n\n  // y = x * y\n  static mul(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = (source[sourceIndex + offset] * target[targetIndex + offset]);\n    }\n  }\n}\n\nexport class SplitUtil {\n  /**\n   * Calculates new Shapes from existing one and the splits given along the axis provides\n   * @param dims Shape of the Tensor to be splitted into two or more Shapes\n   * @param axis The dimension along which the Tensor will be split\n   * @param splits Offsets for the start of each split\n   */\n  static splitShape(dims: readonly number[], axis: number, split: number[], numOutputs?: number):\n      [number[][], number[]] {\n    if (split.length === 0) {\n      if (!numOutputs) {\n        throw new Error('need to know number of outputs when the \\'split\\' attribute is not specified');\n      }\n      SplitUtil.determineSplit(dims[axis], numOutputs, split);\n    }\n\n    const shapes: number[][] = [];\n    const offsets = [0];\n    for (let i = 0; i < split.length; ++i) {\n      if (i !== 0) {\n        offsets.push(offsets[i - 1] + split[i - 1]);\n      }\n      const shape = dims.slice();\n      shape[axis] = split[i];\n      shapes.push(shape);\n    }\n    return [shapes, offsets];\n  }\n\n  static determineSplit(numElementsAlongAxis: number, numOutputs: number, split: number[]) {\n    // If 'split' is not specified by the user, we need to partition the number of elements equally among the outputs\n    if (numElementsAlongAxis % numOutputs !== 0) {\n      throw new Error('cannot split tensor to equal sized parts');\n    }\n    for (let i = 0; i < numOutputs; ++i) {\n      split.push(numElementsAlongAxis / numOutputs);\n    }\n  }\n}\n\nexport class ReduceUtil {\n  /**\n   * Perform reduce operations on the specific operator\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduce(\n      a: Tensor, axes: number[], keepdims: boolean, op1: (b: number) => number,\n      op2: (a: number, b: number) => number): Tensor {\n    const dims = a.dims.slice(0);\n    // if axes is not set, perform reduce on all axes\n    if (axes.length === 0) {\n      dims.forEach((d, ind) => axes.push(ind));\n    }\n    // get a temporary broadcastable output shape\n    const outputDims = ReduceUtil.calcReduceShape(dims, axes, true);\n\n    // loop through the output and calculate result one by one\n    const size = ShapeUtil.size(outputDims);\n    const y = new Tensor(outputDims, a.type);\n    const strides = ShapeUtil.computeStrides(outputDims);\n    const inputStrides = ShapeUtil.computeStrides(dims);\n    const indicesY = new Array(dims.length);\n    for (let i = 0; i < size; i++) {\n      const indices = ShapeUtil.offsetToIndices(i, strides);\n      // map index\n      BroadcastUtil.fillIndex(indices, dims, indicesY);\n      y.set(\n          indices,\n          ReduceUtil.calcReduceByAxis(\n              a.numberData, axes, dims, 0, ShapeUtil.indicesToOffset(indicesY, inputStrides), op1, op2));\n    }\n\n    if (keepdims) {\n      return y;\n    } else {\n      // keepdims == 0, calculate the expected shape\n      return new Tensor(\n          ReduceUtil.calcReduceShape(dims, axes, keepdims), y.type, undefined, undefined, y.data, y.dataId);\n    }\n  }\n\n  /**\n   * Perform reduce operations on the specific operator on specific axes\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param dims The input dimension.\n   * @param curAxisInd Index in axes specifying the current dimension along\n   *      which the tensor will be reduced\n   * @param pos The current index of element to perform operation\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduceByAxis(\n      input: Tensor.NumberType, axes: number[], dims: number[], curAxisInd: number, pos: number,\n      op1: (b: number) => number, op2: (a: number, b: number) => number): number {\n    let res = 0;\n    if (curAxisInd >= axes.length) {\n      return op1(input[pos]);\n    }\n    const axis = axes[curAxisInd];\n    const step = axis >= dims.length ? 1 : ShapeUtil.size(dims.slice(axis + 1));\n    for (let i = 0; i < dims[axis]; i++) {\n      res = i === 0 ? ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2) :\n                      op2(res, ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2));\n      pos += step;\n    }\n    return res;\n  }\n\n  /**\n   * Calculate the expected shape of a reduce operation\n   * @param dims The input tensor dimension\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   */\n  static calcReduceShape(dims: readonly number[], axes: readonly number[], keepDims: boolean): number[] {\n    const outputDims = dims.slice();\n    for (let i = 0; i < axes.length; i++) {\n      if (keepDims) {\n        outputDims[axes[i]] = 1;\n      } else {\n        outputDims[axes[i]] = 0;\n      }\n    }\n    return outputDims.filter(dim => dim !== 0);\n  }\n}\n\nexport class PoolConvUtil {\n  /**\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   */\n  static adjustPoolAttributes(\n      isGlobalOperator: boolean, inputDims: readonly number[], kernelShape: number[], strides: number[],\n      dilations: number[], pads: number[]) {\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\n    }\n\n    if (isGlobalOperator) {\n      // adjust kernel shape to cover the input dims\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        if (dim >= kernelShape.length) {\n          kernelShape.push(inputDims[dim + 2]);\n        } else {\n          kernelShape[dim] = inputDims[dim + 2];\n        }\n      }\n    }\n\n    // adjust strides length to match kernel shape length\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < strides.length) {\n        if (strides[dim] < 0) {\n          throw new Error('strides should be greater than or equal to 1');\n        }\n      } else {\n        strides.push(1);\n      }\n    }\n\n    // adjust dilation value\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < dilations.length) {\n        if (dilations[dim] < 0) {\n          throw new Error('dilations should be greater than or equal to 1');\n        }\n      } else {\n        dilations.push(1);\n      }\n    }\n\n    // adjust pads length to match 2 * kernel shape length\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\n      if (dim < pads.length) {\n        if (pads[dim] < 0) {\n          throw new Error('pad should be greater than or equal to 1');\n        }\n      } else {\n        pads.push(0);\n      }\n    }\n\n    // sanity checks for values in kernel shapes and pads\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (kernelShape[dim] <= 0) {\n        throw new Error('kernel shapes need to be greater than 0');\n      }\n\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\n        throw new Error('pads should be smaller than kernel');\n      }\n    }\n  }\n\n  // adjust pad values based on 'autoPad' attribute\n  static adjustPadsBasedOnAutoPad(\n      inputDims: readonly number[], strides: readonly number[], dilations: readonly number[],\n      kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (!autoPad) {\n      return;\n    }\n\n    if (pads.length !== 2 * (inputDims.length - 2)) {\n      throw new Error('length of pads should be twice the length of data dimensions');\n    }\n\n    if (strides.length !== (inputDims.length - 2)) {\n      throw new Error('length of strides should be the length of data dimensions');\n    }\n\n    if (kernelShape.length !== (inputDims.length - 2)) {\n      throw new Error('length of kernel shapes should be the length of data dimensions');\n    }\n\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\n      PoolConvUtil.adjustPadAndReturnShape(\n          inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n          autoPad);\n    }\n  }\n\n  /**\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computePoolOutputShape(\n      isGlobalOperator: boolean, inputDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0) {\n      throw new Error('input shape must be of size greater than 0');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], inputDims[1]];\n\n    PoolConvUtil.computeShapeHelper(\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  /**\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\n   * @param strides Stride along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computeConvOutputShape(\n      inputDims: readonly number[], filterDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], filterDims[0]];\n\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\n  // called by computePoolOutputShape() and computeConvOutputShape()\n  // adjust pads based on 'autoPad' attribute prior to shape computation\n  private static computeShapeHelper(\n      isGlobalOperator: boolean, inputDims: readonly number[], outputDims: number[], strides: readonly number[],\n      dilations: readonly number[], kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (isGlobalOperator) {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(1);\n      }\n    } else {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n            autoPad));\n      }\n    }\n  }\n\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\n  private static adjustPadAndReturnShape(\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\n      padTailIndex: number, autoPad?: string): number {\n    const dkernel = dilation * (kernel - 1) + 1;\n    if (autoPad && autoPad !== 'NOTSET') {\n      switch (autoPad) {\n        case 'VALID':\n          pads[padHeadIndex] = 0;\n          pads[padTailIndex] = 0;\n          return Math.floor(((inSize - dkernel) / stride) + 1);\n        case 'SAME_LOWER':\n        case 'SAME_UPPER':\n          if (dilation !== 1) {\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\n          } else {\n            const legacyTargetSize = (inSize + stride - 1) / stride;\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\n            pads[padHeadIndex] =\n                (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\n            return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\n          }\n        default:\n          throw new Error('Unsupported AutoPad type');\n      }\n    } else {\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\n    }\n  }\n}\n\nexport const MIN_CLIP = -3.4028234663852886e+38;\nexport const MAX_CLIP = 3.4028234663852886e+38;\n\nexport function decodeUtf8String(buffer: Uint8Array): string {\n  return new TextDecoder().decode(buffer);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n// This file is generated by /js/scripts/update-version.ts\n// Do not modify file content manually.\n\nexport const version = '1.16.0';\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env, env, InferenceSession} from 'onnxruntime-common';\n\nimport {OrtWasmMessage, SerializableModeldata, SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\nimport * as core from './wasm-core-impl';\nimport {initializeWebAssembly} from './wasm-factory';\n\nconst isProxy = (): boolean => !!env.wasm.proxy && typeof document !== 'undefined';\nlet proxyWorker: Worker|undefined;\nlet initializing = false;\nlet initialized = false;\nlet aborted = false;\n\n// resolve; reject\ntype PromiseCallbacks<T = void> = [(result: T) => void, (reason: unknown) => void];\n\nlet initWasmCallbacks: PromiseCallbacks;\nlet initOrtCallbacks: PromiseCallbacks;\nconst createSessionAllocateCallbacks: Array<PromiseCallbacks<SerializableModeldata>> = [];\nconst createSessionFinalizeCallbacks: Array<PromiseCallbacks<SerializableSessionMetadata>> = [];\nconst createSessionCallbacks: Array<PromiseCallbacks<SerializableSessionMetadata>> = [];\nconst releaseSessionCallbacks: Array<PromiseCallbacks<void>> = [];\nconst runCallbacks: Array<PromiseCallbacks<SerializableTensor[]>> = [];\nconst endProfilingCallbacks: Array<PromiseCallbacks<void>> = [];\n\nconst ensureWorker = (): void => {\n  if (initializing || !initialized || aborted || !proxyWorker) {\n    throw new Error('worker not ready');\n  }\n};\n\nconst onProxyWorkerMessage = (ev: MessageEvent<OrtWasmMessage>): void => {\n  switch (ev.data.type) {\n    case 'init-wasm':\n      initializing = false;\n      if (ev.data.err) {\n        aborted = true;\n        initWasmCallbacks[1](ev.data.err);\n      } else {\n        initialized = true;\n        initWasmCallbacks[0]();\n      }\n      break;\n    case 'init-ort':\n      if (ev.data.err) {\n        initOrtCallbacks[1](ev.data.err);\n      } else {\n        initOrtCallbacks[0]();\n      }\n      break;\n    case 'create_allocate':\n      if (ev.data.err) {\n        createSessionAllocateCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionAllocateCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'create_finalize':\n      if (ev.data.err) {\n        createSessionFinalizeCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionFinalizeCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'create':\n      if (ev.data.err) {\n        createSessionCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'release':\n      if (ev.data.err) {\n        releaseSessionCallbacks.shift()![1](ev.data.err);\n      } else {\n        releaseSessionCallbacks.shift()![0]();\n      }\n      break;\n    case 'run':\n      if (ev.data.err) {\n        runCallbacks.shift()![1](ev.data.err);\n      } else {\n        runCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'end-profiling':\n      if (ev.data.err) {\n        endProfilingCallbacks.shift()![1](ev.data.err);\n      } else {\n        endProfilingCallbacks.shift()![0]();\n      }\n      break;\n    default:\n  }\n};\n\nconst scriptSrc = typeof document !== 'undefined' ? (document?.currentScript as HTMLScriptElement)?.src : undefined;\n\nexport const initializeWebAssemblyInstance = async(): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    if (initialized) {\n      return;\n    }\n    if (initializing) {\n      throw new Error('multiple calls to \\'initWasm()\\' detected.');\n    }\n    if (aborted) {\n      throw new Error('previous call to \\'initWasm()\\' failed.');\n    }\n\n    initializing = true;\n\n    // overwrite wasm filepaths\n    if (env.wasm.wasmPaths === undefined) {\n      if (scriptSrc && scriptSrc.indexOf('blob:') !== 0) {\n        env.wasm.wasmPaths = scriptSrc.substr(0, +(scriptSrc).lastIndexOf('/') + 1);\n      }\n    }\n\n    return new Promise<void>((resolve, reject) => {\n      proxyWorker?.terminate();\n      // eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports\n      proxyWorker = require('worker-loader?inline=no-fallback!./proxy-worker/main').default() as Worker;\n      proxyWorker.onmessage = onProxyWorkerMessage;\n      initWasmCallbacks = [resolve, reject];\n      const message: OrtWasmMessage = {type: 'init-wasm', in : env.wasm};\n      proxyWorker.postMessage(message);\n    });\n\n  } else {\n    return initializeWebAssembly(env.wasm);\n  }\n};\n\nexport const initializeRuntime = async(env: Env): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      initOrtCallbacks = [resolve, reject];\n      const message: OrtWasmMessage = {type: 'init-ort', in : env};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    await core.initRuntime(env);\n  }\n};\n\nexport const createSessionAllocate = async(model: Uint8Array): Promise<SerializableModeldata> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableModeldata>((resolve, reject) => {\n      createSessionAllocateCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'create_allocate', in : {model}};\n      proxyWorker!.postMessage(message, [model.buffer]);\n    });\n  } else {\n    return core.createSessionAllocate(model);\n  }\n};\n\nexport const createSessionFinalize = async(modeldata: SerializableModeldata, options?: InferenceSession.SessionOptions):\n    Promise<SerializableSessionMetadata> => {\n      if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n        ensureWorker();\n        return new Promise<SerializableSessionMetadata>((resolve, reject) => {\n          createSessionFinalizeCallbacks.push([resolve, reject]);\n          const message: OrtWasmMessage = {type: 'create_finalize', in : {modeldata, options}};\n          proxyWorker!.postMessage(message);\n        });\n      } else {\n        return core.createSessionFinalize(modeldata, options);\n      }\n    };\n\nexport const createSession =\n    async(model: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SerializableSessionMetadata> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableSessionMetadata>((resolve, reject) => {\n      createSessionCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'create', in : {model, options}};\n      proxyWorker!.postMessage(message, [model.buffer]);\n    });\n  } else {\n    return core.createSession(model, options);\n  }\n};\n\nexport const releaseSession = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      releaseSessionCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'release', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.releaseSession(sessionId);\n  }\n};\n\nexport const run = async(\n    sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\n    options: InferenceSession.RunOptions): Promise<SerializableTensor[]> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableTensor[]>((resolve, reject) => {\n      runCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'run', in : {sessionId, inputIndices, inputs, outputIndices, options}};\n      proxyWorker!.postMessage(message, core.extractTransferableBuffers(inputs));\n    });\n  } else {\n    return core.run(sessionId, inputIndices, inputs, outputIndices, options);\n  }\n};\n\nexport const endProfiling = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      endProfilingCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'end-profiling', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.endProfiling(sessionId);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {getInstance} from './wasm-factory';\nimport {allocWasmString, checkLastError, iterateExtraOptions} from './wasm-utils';\n\nexport const setRunOptions = (options: InferenceSession.RunOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let runOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const runOptions: InferenceSession.RunOptions = options || {};\n\n  try {\n    if (options?.logSeverityLevel === undefined) {\n      runOptions.logSeverityLevel = 2;  // Default to warning\n    } else if (\n        typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\n        options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n    }\n\n    if (options?.logVerbosityLevel === undefined) {\n      runOptions.logVerbosityLevel = 0;  // Default to 0\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n    }\n\n    if (options?.terminate === undefined) {\n      runOptions.terminate = false;\n    }\n\n    let tagDataOffset = 0;\n    if (options?.tag !== undefined) {\n      tagDataOffset = allocWasmString(options.tag, allocs);\n    }\n\n    runOptionsHandle = wasm._OrtCreateRunOptions(\n        runOptions.logSeverityLevel!, runOptions.logVerbosityLevel!, !!runOptions.terminate!, tagDataOffset);\n    if (runOptionsHandle === 0) {\n      checkLastError('Can\\'t create run options.');\n    }\n\n    if (options?.extra !== undefined) {\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          checkLastError(`Can't set a run config entry: ${key} - ${value}.`);\n        }\n      });\n    }\n\n    return [runOptionsHandle, allocs];\n  } catch (e) {\n    if (runOptionsHandle !== 0) {\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\n    }\n    allocs.forEach(alloc => wasm._free(alloc));\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {env, InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\nimport {promisify} from 'util';\n\nimport {SerializableModeldata} from './proxy-messages';\nimport {createSession, createSessionAllocate, createSessionFinalize, endProfiling, initializeRuntime, releaseSession, run} from './proxy-wrapper';\n\nlet runtimeInitialized: boolean;\n\nexport class OnnxruntimeWebAssemblySessionHandler implements SessionHandler {\n  private sessionId: number;\n\n  inputNames: string[];\n  outputNames: string[];\n\n  async createSessionAllocate(path: string): Promise<SerializableModeldata> {\n    // fetch model from url and move to wasm heap. The arraybufffer that held the http\n    // response is freed once we return\n    const response = await fetch(path);\n    const arrayBuffer = await response.arrayBuffer();\n    return createSessionAllocate(new Uint8Array(arrayBuffer));\n  }\n\n  async loadModel(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions): Promise<void> {\n    if (!runtimeInitialized) {\n      await initializeRuntime(env);\n      runtimeInitialized = true;\n    }\n\n    if (typeof pathOrBuffer === 'string') {\n      if (typeof process !== 'undefined' && process.versions && process.versions.node) {\n        // node\n        const model = await promisify(readFile)(pathOrBuffer);\n        [this.sessionId, this.inputNames, this.outputNames] = await createSession(model, options);\n      } else {\n        // browser\n        // fetch model and move to wasm heap.\n        const modelData: SerializableModeldata = await this.createSessionAllocate(pathOrBuffer);\n        // create the session\n        [this.sessionId, this.inputNames, this.outputNames] = await createSessionFinalize(modelData, options);\n      }\n    } else {\n      [this.sessionId, this.inputNames, this.outputNames] = await createSession(pathOrBuffer, options);\n    }\n  }\n\n  async dispose(): Promise<void> {\n    return releaseSession(this.sessionId);\n  }\n\n  async run(feeds: SessionHandler.FeedsType, fetches: SessionHandler.FetchesType, options: InferenceSession.RunOptions):\n      Promise<SessionHandler.ReturnType> {\n    const inputArray: Tensor[] = [];\n    const inputIndices: number[] = [];\n    Object.entries(feeds).forEach(kvp => {\n      const name = kvp[0];\n      const tensor = kvp[1];\n      const index = this.inputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid input '${name}'`);\n      }\n      inputArray.push(tensor);\n      inputIndices.push(index);\n    });\n\n    const outputIndices: number[] = [];\n    Object.entries(fetches).forEach(kvp => {\n      const name = kvp[0];\n      // TODO: support pre-allocated output\n      const index = this.outputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid output '${name}'`);\n      }\n      outputIndices.push(index);\n    });\n\n    const outputs =\n        await run(this.sessionId, inputIndices, inputArray.map(t => [t.type, t.dims, t.data]), outputIndices, options);\n\n    const result: SessionHandler.ReturnType = {};\n    for (let i = 0; i < outputs.length; i++) {\n      result[this.outputNames[outputIndices[i]]] = new Tensor(outputs[i][0], outputs[i][2], outputs[i][1]);\n    }\n    return result;\n  }\n\n  startProfiling(): void {\n    // TODO: implement profiling\n  }\n\n  endProfiling(): void {\n    void endProfiling(this.sessionId);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {getInstance} from './wasm-factory';\nimport {allocWasmString, checkLastError, iterateExtraOptions} from './wasm-utils';\n\nconst getGraphOptimzationLevel = (graphOptimizationLevel: string|unknown): number => {\n  switch (graphOptimizationLevel) {\n    case 'disabled':\n      return 0;\n    case 'basic':\n      return 1;\n    case 'extended':\n      return 2;\n    case 'all':\n      return 99;\n    default:\n      throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);\n  }\n};\n\nconst getExecutionMode = (executionMode: 'sequential'|'parallel'): number => {\n  switch (executionMode) {\n    case 'sequential':\n      return 0;\n    case 'parallel':\n      return 1;\n    default:\n      throw new Error(`unsupported execution mode: ${executionMode}`);\n  }\n};\n\nconst appendDefaultOptions = (options: InferenceSession.SessionOptions): void => {\n  if (!options.extra) {\n    options.extra = {};\n  }\n  if (!options.extra.session) {\n    options.extra.session = {};\n  }\n  const session = options.extra.session as Record<string, string>;\n  if (!session.use_ort_model_bytes_directly) {\n    // eslint-disable-next-line camelcase\n    session.use_ort_model_bytes_directly = '1';\n  }\n\n  // if using JSEP with WebGPU, always disable memory pattern\n  if (options.executionProviders &&\n      options.executionProviders.some(ep => (typeof ep === 'string' ? ep : ep.name) === 'webgpu')) {\n    options.enableMemPattern = false;\n  }\n};\n\nconst setExecutionProviders =\n    (sessionOptionsHandle: number, executionProviders: readonly InferenceSession.ExecutionProviderConfig[],\n     allocs: number[]): void => {\n      for (const ep of executionProviders) {\n        let epName = typeof ep === 'string' ? ep : ep.name;\n\n        // check EP name\n        switch (epName) {\n          case 'xnnpack':\n            epName = 'XNNPACK';\n            break;\n          case 'webnn':\n            epName = 'WEBNN';\n            if (typeof ep !== 'string') {\n              const webnnOptions = ep as InferenceSession.WebNNExecutionProviderOption;\n              if (webnnOptions?.deviceType) {\n                const keyDataOffset = allocWasmString('deviceType', allocs);\n                const valueDataOffset = allocWasmString(webnnOptions.deviceType, allocs);\n                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !==\n                    0) {\n                  checkLastError(`Can't set a session config entry: 'deviceType' - ${webnnOptions.deviceType}.`);\n                }\n              }\n              if (webnnOptions?.powerPreference) {\n                const keyDataOffset = allocWasmString('powerPreference', allocs);\n                const valueDataOffset = allocWasmString(webnnOptions.powerPreference, allocs);\n                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !==\n                    0) {\n                  checkLastError(\n                      `Can't set a session config entry: 'powerPreference' - ${webnnOptions.powerPreference}.`);\n                }\n              }\n            }\n            break;\n          case 'webgpu':\n            epName = 'JS';\n            break;\n          case 'wasm':\n          case 'cpu':\n            continue;\n          default:\n            throw new Error(`not supported execution provider: ${epName}`);\n        }\n\n        const epNameDataOffset = allocWasmString(epName, allocs);\n        if (getInstance()._OrtAppendExecutionProvider(sessionOptionsHandle, epNameDataOffset) !== 0) {\n          checkLastError(`Can't append execution provider: ${epName}.`);\n        }\n      }\n    };\n\nexport const setSessionOptions = (options?: InferenceSession.SessionOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let sessionOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const sessionOptions: InferenceSession.SessionOptions = options || {};\n  appendDefaultOptions(sessionOptions);\n\n  try {\n    const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel ?? 'all');\n    const executionMode = getExecutionMode(sessionOptions.executionMode ?? 'sequential');\n    const logIdDataOffset =\n        typeof sessionOptions.logId === 'string' ? allocWasmString(sessionOptions.logId, allocs) : 0;\n\n    const logSeverityLevel = sessionOptions.logSeverityLevel ?? 2;  // Default to 2 - warning\n    if (!Number.isInteger(logSeverityLevel) || logSeverityLevel < 0 || logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${logSeverityLevel}`);\n    }\n\n    const logVerbosityLevel = sessionOptions.logVerbosityLevel ?? 0;  // Default to 0 - verbose\n    if (!Number.isInteger(logVerbosityLevel) || logVerbosityLevel < 0 || logVerbosityLevel > 4) {\n      throw new Error(`log verbosity level is not valid: ${logVerbosityLevel}`);\n    }\n\n    const optimizedModelFilePathOffset = typeof sessionOptions.optimizedModelFilePath === 'string' ?\n        allocWasmString(sessionOptions.optimizedModelFilePath, allocs) :\n        0;\n\n    sessionOptionsHandle = wasm._OrtCreateSessionOptions(\n        graphOptimizationLevel, !!sessionOptions.enableCpuMemArena, !!sessionOptions.enableMemPattern, executionMode,\n        !!sessionOptions.enableProfiling, 0, logIdDataOffset, logSeverityLevel, logVerbosityLevel,\n        optimizedModelFilePathOffset);\n    if (sessionOptionsHandle === 0) {\n      checkLastError('Can\\'t create session options.');\n    }\n\n    if (sessionOptions.executionProviders) {\n      setExecutionProviders(sessionOptionsHandle, sessionOptions.executionProviders, allocs);\n    }\n\n    if (sessionOptions.extra !== undefined) {\n      iterateExtraOptions(sessionOptions.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          checkLastError(`Can't set a session config entry: ${key} - ${value}.`);\n        }\n      });\n    }\n\n    return [sessionOptionsHandle, allocs];\n  } catch (e) {\n    if (sessionOptionsHandle !== 0) {\n      wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n    }\n    allocs.forEach(alloc => wasm._free(alloc));\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from 'onnxruntime-common';\n\n// This file includes common definitions. They do NOT have dependency on the WebAssembly instance.\n\n/**\n * Copied from ONNX definition. Use this to drop dependency 'onnx_proto' to decrease compiled .js file size.\n */\nexport const enum DataType {\n  undefined = 0,\n  float = 1,\n  uint8 = 2,\n  int8 = 3,\n  uint16 = 4,\n  int16 = 5,\n  int32 = 6,\n  int64 = 7,\n  string = 8,\n  bool = 9,\n  float16 = 10,\n  double = 11,\n  uint32 = 12,\n  uint64 = 13,\n  complex64 = 14,\n  complex128 = 15,\n  bfloat16 = 16\n}\n\n/**\n * Map string tensor data to enum value\n */\nexport const tensorDataTypeStringToEnum = (type: string): DataType => {\n  switch (type) {\n    case 'int8':\n      return DataType.int8;\n    case 'uint8':\n      return DataType.uint8;\n    case 'bool':\n      return DataType.bool;\n    case 'int16':\n      return DataType.int16;\n    case 'uint16':\n      return DataType.uint16;\n    case 'int32':\n      return DataType.int32;\n    case 'uint32':\n      return DataType.uint32;\n    case 'float16':\n      return DataType.float16;\n    case 'float32':\n      return DataType.float;\n    case 'float64':\n      return DataType.double;\n    case 'string':\n      return DataType.string;\n    case 'int64':\n      return DataType.int64;\n    case 'uint64':\n      return DataType.uint64;\n\n    default:\n      throw new Error(`unsupported data type: ${type}`);\n  }\n};\n\n/**\n * Map enum value to string tensor data\n */\nexport const tensorDataTypeEnumToString = (typeProto: DataType): Tensor.Type => {\n  switch (typeProto) {\n    case DataType.int8:\n      return 'int8';\n    case DataType.uint8:\n      return 'uint8';\n    case DataType.bool:\n      return 'bool';\n    case DataType.int16:\n      return 'int16';\n    case DataType.uint16:\n      return 'uint16';\n    case DataType.int32:\n      return 'int32';\n    case DataType.uint32:\n      return 'uint32';\n    case DataType.float16:\n      return 'float16';\n    case DataType.float:\n      return 'float32';\n    case DataType.double:\n      return 'float64';\n    case DataType.string:\n      return 'string';\n    case DataType.int64:\n      return 'int64';\n    case DataType.uint64:\n      return 'uint64';\n\n    default:\n      throw new Error(`unsupported data type: ${typeProto}`);\n  }\n};\n\n/**\n * get tensor element size in bytes by the given data type\n * @returns size in integer or undefined if the data type is not supported\n */\nexport const getTensorElementSize = (dateType: number): number|\n    undefined => [undefined, 4, 1, 1, 2, 2, 4, 8, undefined, 1, 2, 8, 4, 8, undefined, undefined, undefined][dateType];\n\n/**\n * get typed array constructor by the given tensor type\n */\nexport const tensorTypeToTypedArrayConstructor = (type: Tensor.Type): Float32ArrayConstructor|Uint8ArrayConstructor|\n    Int8ArrayConstructor|Uint16ArrayConstructor|Int16ArrayConstructor|Int32ArrayConstructor|BigInt64ArrayConstructor|\n    Uint8ArrayConstructor|Float64ArrayConstructor|Uint32ArrayConstructor|BigUint64ArrayConstructor => {\n      switch (type) {\n        case 'float16':\n          return Uint16Array;\n        case 'float32':\n          return Float32Array;\n        case 'uint8':\n          return Uint8Array;\n        case 'int8':\n          return Int8Array;\n        case 'uint16':\n          return Uint16Array;\n        case 'int16':\n          return Int16Array;\n        case 'int32':\n          return Int32Array;\n        case 'bool':\n          return Uint8Array;\n        case 'float64':\n          return Float64Array;\n        case 'uint32':\n          return Uint32Array;\n        case 'int64':\n          return BigInt64Array;\n        case 'uint64':\n          return BigUint64Array;\n        default:\n          throw new Error(`unsupported type: ${type}`);\n      }\n    };\n\n/**\n * Map string log level to integer value\n */\nexport const logLevelStringToEnum = (logLevel?: 'verbose'|'info'|'warning'|'error'|'fatal'): number => {\n  switch (logLevel) {\n    case 'verbose':\n      return 0;\n    case 'info':\n      return 1;\n    case 'warning':\n      return 2;\n    case 'error':\n      return 3;\n    case 'fatal':\n      return 4;\n    default:\n      throw new Error(`unsupported logging level: ${logLevel}`);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env, InferenceSession, Tensor} from 'onnxruntime-common';\n\nimport {SerializableModeldata, SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\nimport {setRunOptions} from './run-options';\nimport {setSessionOptions} from './session-options';\nimport {logLevelStringToEnum, tensorDataTypeEnumToString, tensorDataTypeStringToEnum, tensorTypeToTypedArrayConstructor} from './wasm-common';\nimport {getInstance} from './wasm-factory';\nimport {allocWasmString, checkLastError} from './wasm-utils';\n\n/**\n * get the input/output count of the session.\n * @param sessionHandle the handle representing the session. should be non-zero.\n * @returns a tuple including 2 numbers, representing the input count and output count.\n */\nconst getSessionInputOutputCount = (sessionHandle: number): [number, number] => {\n  const wasm = getInstance();\n  const stack = wasm.stackSave();\n  try {\n    const dataOffset = wasm.stackAlloc(8);\n    const errorCode = wasm._OrtGetInputOutputCount(sessionHandle, dataOffset, dataOffset + 4);\n    if (errorCode !== 0) {\n      checkLastError('Can\\'t get session input/output count.');\n    }\n    return [wasm.HEAP32[dataOffset / 4], wasm.HEAP32[dataOffset / 4 + 1]];\n  } finally {\n    wasm.stackRestore(stack);\n  }\n};\n\n/**\n * initialize ORT environment.\n * @param numThreads SetGlobalIntraOpNumThreads(numThreads)\n * @param loggingLevel CreateEnv(static_cast<OrtLoggingLevel>(logging_level))\n */\nconst initOrt = (numThreads: number, loggingLevel: number): void => {\n  const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);\n  if (errorCode !== 0) {\n    checkLastError('Can\\'t initialize onnxruntime.');\n  }\n};\n\n/**\n * intialize runtime environment.\n * @param env passed in the environment config object.\n */\nexport const initRuntime = async(env: Env): Promise<void> => {\n  // init ORT\n  initOrt(env.wasm.numThreads!, logLevelStringToEnum(env.logLevel));\n\n  if (!BUILD_DEFS.DISABLE_WEBGPU) {\n    // init JSEP if available\n\n    // eslint-disable-next-line @typescript-eslint/no-require-imports, @typescript-eslint/no-var-requires\n    const initJsep = require('./jsep/init').init;\n    await initJsep(getInstance(), env);\n  }\n};\n\n/**\n *  tuple elements are: InferenceSession ID; inputNamesUTF8Encoded; outputNamesUTF8Encoded\n */\ntype SessionMetadata = [number, number[], number[]];\n\nconst activeSessions = new Map<number, SessionMetadata>();\n\n/**\n * allocate the memory and memcpy the model bytes, preparing for creating an instance of InferenceSession.\n * @returns a 2-elements tuple - the pointer and size of the allocated buffer\n */\nexport const createSessionAllocate = (model: Uint8Array): [number, number] => {\n  const wasm = getInstance();\n  const modelDataOffset = wasm._malloc(model.byteLength);\n  if (modelDataOffset === 0) {\n    throw new Error(`Can't create a session. failed to allocate a buffer of size ${model.byteLength}.`);\n  }\n  wasm.HEAPU8.set(model, modelDataOffset);\n  return [modelDataOffset, model.byteLength];\n};\n\n/**\n * create an inference session using the prepared buffer containing the model data.\n * @param modelData a 2-elements tuple containing the pointer and size of the model data buffer.\n * @param options an optional session options object.\n * @returns a 3-elements tuple containing [session handle, input names, output names]\n */\nexport const createSessionFinalize =\n    (modelData: SerializableModeldata, options?: InferenceSession.SessionOptions): SerializableSessionMetadata => {\n      const wasm = getInstance();\n\n      let sessionHandle = 0;\n      let sessionOptionsHandle = 0;\n      let allocs: number[] = [];\n      const inputNamesUTF8Encoded = [];\n      const outputNamesUTF8Encoded = [];\n\n      try {\n        [sessionOptionsHandle, allocs] = setSessionOptions(options);\n\n        sessionHandle = wasm._OrtCreateSession(modelData[0], modelData[1], sessionOptionsHandle);\n        if (sessionHandle === 0) {\n          checkLastError('Can\\'t create a session.');\n        }\n\n        const [inputCount, outputCount] = getSessionInputOutputCount(sessionHandle);\n\n        const inputNames = [];\n        const outputNames = [];\n        for (let i = 0; i < inputCount; i++) {\n          const name = wasm._OrtGetInputName(sessionHandle, i);\n          if (name === 0) {\n            checkLastError('Can\\'t get an input name.');\n          }\n          inputNamesUTF8Encoded.push(name);\n          inputNames.push(wasm.UTF8ToString(name));\n        }\n        for (let i = 0; i < outputCount; i++) {\n          const name = wasm._OrtGetOutputName(sessionHandle, i);\n          if (name === 0) {\n            checkLastError('Can\\'t get an output name.');\n          }\n          outputNamesUTF8Encoded.push(name);\n          outputNames.push(wasm.UTF8ToString(name));\n        }\n\n        activeSessions.set(sessionHandle, [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded]);\n        return [sessionHandle, inputNames, outputNames];\n      } catch (e) {\n        inputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\n        outputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\n\n        if (sessionHandle !== 0) {\n          wasm._OrtReleaseSession(sessionHandle);\n        }\n        throw e;\n      } finally {\n        wasm._free(modelData[0]);\n        if (sessionOptionsHandle !== 0) {\n          wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n        }\n        allocs.forEach(alloc => wasm._free(alloc));\n      }\n    };\n\n\n/**\n * create an instance of InferenceSession.\n * @returns the metadata of InferenceSession. 0-value handle for failure.\n */\nexport const createSession =\n    (model: Uint8Array, options?: InferenceSession.SessionOptions): SerializableSessionMetadata => {\n      const modelData: SerializableModeldata = createSessionAllocate(model);\n      return createSessionFinalize(modelData, options);\n    };\n\nexport const releaseSession = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error(`cannot release session. invalid session id: ${sessionId}`);\n  }\n  const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded] = session;\n\n  inputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\n  outputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\n  wasm._OrtReleaseSession(sessionHandle);\n  activeSessions.delete(sessionId);\n};\n\n/**\n * perform inference run\n */\nexport const run = async(\n    sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\n    options: InferenceSession.RunOptions): Promise<SerializableTensor[]> => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error(`cannot run inference. invalid session id: ${sessionId}`);\n  }\n  const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded] = session;\n\n  const inputCount = inputIndices.length;\n  const outputCount = outputIndices.length;\n\n  let runOptionsHandle = 0;\n  let runOptionsAllocs: number[] = [];\n\n  const inputValues: number[] = [];\n  const inputAllocs: number[] = [];\n\n  try {\n    [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);\n\n    // create input tensors\n    for (let i = 0; i < inputCount; i++) {\n      const dataType = inputs[i][0];\n      const dims = inputs[i][1];\n      const data = inputs[i][2];\n\n      let dataOffset: number;\n      let dataByteLength: number;\n\n      if (Array.isArray(data)) {\n        // string tensor\n        dataByteLength = 4 * data.length;\n        dataOffset = wasm._malloc(dataByteLength);\n        inputAllocs.push(dataOffset);\n        let dataIndex = dataOffset / 4;\n        for (let i = 0; i < data.length; i++) {\n          if (typeof data[i] !== 'string') {\n            throw new TypeError(`tensor data at index ${i} is not a string`);\n          }\n          wasm.HEAPU32[dataIndex++] = allocWasmString(data[i], inputAllocs);\n        }\n      } else {\n        dataByteLength = data.byteLength;\n        dataOffset = wasm._malloc(dataByteLength);\n        inputAllocs.push(dataOffset);\n        wasm.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), dataOffset);\n      }\n\n      const stack = wasm.stackSave();\n      const dimsOffset = wasm.stackAlloc(4 * dims.length);\n      try {\n        let dimIndex = dimsOffset / 4;\n        dims.forEach(d => wasm.HEAP32[dimIndex++] = d);\n        const tensor = wasm._OrtCreateTensor(\n            tensorDataTypeStringToEnum(dataType), dataOffset, dataByteLength, dimsOffset, dims.length);\n        if (tensor === 0) {\n          checkLastError(`Can't create tensor for input[${i}].`);\n        }\n        inputValues.push(tensor);\n      } finally {\n        wasm.stackRestore(stack);\n      }\n    }\n\n    const beforeRunStack = wasm.stackSave();\n    const inputValuesOffset = wasm.stackAlloc(inputCount * 4);\n    const inputNamesOffset = wasm.stackAlloc(inputCount * 4);\n    const outputValuesOffset = wasm.stackAlloc(outputCount * 4);\n    const outputNamesOffset = wasm.stackAlloc(outputCount * 4);\n\n    try {\n      let inputValuesIndex = inputValuesOffset / 4;\n      let inputNamesIndex = inputNamesOffset / 4;\n      let outputValuesIndex = outputValuesOffset / 4;\n      let outputNamesIndex = outputNamesOffset / 4;\n      for (let i = 0; i < inputCount; i++) {\n        wasm.HEAPU32[inputValuesIndex++] = inputValues[i];\n        wasm.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];\n      }\n      for (let i = 0; i < outputCount; i++) {\n        wasm.HEAPU32[outputValuesIndex++] = 0;\n        wasm.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];\n      }\n\n      // support RunOptions\n      let errorCode = wasm._OrtRun(\n          sessionHandle, inputNamesOffset, inputValuesOffset, inputCount, outputNamesOffset, outputCount,\n          outputValuesOffset, runOptionsHandle);\n\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const runPromise = wasm.jsepRunPromise;\n      if (runPromise && typeof runPromise.then !== 'undefined') {\n        errorCode = await runPromise;\n      }\n\n      const output: SerializableTensor[] = [];\n\n      if (errorCode !== 0) {\n        checkLastError('failed to call OrtRun().');\n      }\n\n      for (let i = 0; i < outputCount; i++) {\n        const tensor = wasm.HEAPU32[outputValuesOffset / 4 + i];\n\n        const beforeGetTensorDataStack = wasm.stackSave();\n        // stack allocate 4 pointer value\n        const tensorDataOffset = wasm.stackAlloc(4 * 4);\n\n        let type: Tensor.Type|undefined, dataOffset = 0;\n        try {\n          errorCode = wasm._OrtGetTensorData(\n              tensor, tensorDataOffset, tensorDataOffset + 4, tensorDataOffset + 8, tensorDataOffset + 12);\n          if (errorCode !== 0) {\n            checkLastError(`Can't access output tensor data on index ${i}.`);\n          }\n          let tensorDataIndex = tensorDataOffset / 4;\n          const dataType = wasm.HEAPU32[tensorDataIndex++];\n          dataOffset = wasm.HEAPU32[tensorDataIndex++];\n          const dimsOffset = wasm.HEAPU32[tensorDataIndex++];\n          const dimsLength = wasm.HEAPU32[tensorDataIndex++];\n          const dims = [];\n          for (let i = 0; i < dimsLength; i++) {\n            dims.push(wasm.HEAPU32[dimsOffset / 4 + i]);\n          }\n          wasm._OrtFree(dimsOffset);\n\n          const size = dims.length === 0 ? 1 : dims.reduce((a, b) => a * b);\n          type = tensorDataTypeEnumToString(dataType);\n          if (type === 'string') {\n            const stringData: string[] = [];\n            let dataIndex = dataOffset / 4;\n            for (let i = 0; i < size; i++) {\n              const offset = wasm.HEAPU32[dataIndex++];\n              const maxBytesToRead = i === size - 1 ? undefined : wasm.HEAPU32[dataIndex] - offset;\n              stringData.push(wasm.UTF8ToString(offset, maxBytesToRead));\n            }\n            output.push([type, dims, stringData]);\n          } else {\n            const typedArrayConstructor = tensorTypeToTypedArrayConstructor(type);\n            const data = new typedArrayConstructor(size);\n            new Uint8Array(data.buffer, data.byteOffset, data.byteLength)\n                .set(wasm.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));\n            output.push([type, dims, data]);\n          }\n        } finally {\n          wasm.stackRestore(beforeGetTensorDataStack);\n          if (type === 'string' && dataOffset) {\n            wasm._free(dataOffset);\n          }\n          wasm._OrtReleaseTensor(tensor);\n        }\n      }\n\n      return output;\n    } finally {\n      wasm.stackRestore(beforeRunStack);\n    }\n  } finally {\n    inputValues.forEach(v => wasm._OrtReleaseTensor(v));\n    inputAllocs.forEach(p => wasm._free(p));\n\n    if (runOptionsHandle !== 0) {\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\n    }\n    runOptionsAllocs.forEach(p => wasm._free(p));\n  }\n};\n\n/**\n * end profiling\n */\nexport const endProfiling = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error('invalid session id');\n  }\n  const sessionHandle = session[0];\n\n  // profile file name is not used yet, but it must be freed.\n  const profileFileName = wasm._OrtEndProfiling(sessionHandle);\n  if (profileFileName === 0) {\n    checkLastError('Can\\'t get an profile file name.');\n  }\n  wasm._OrtFree(profileFileName);\n};\n\nexport const extractTransferableBuffers = (tensors: readonly SerializableTensor[]): ArrayBufferLike[] => {\n  const buffers: ArrayBufferLike[] = [];\n  for (const tensor of tensors) {\n    const data = tensor[2];\n    if (!Array.isArray(data) && data.buffer) {\n      buffers.push(data.buffer);\n    }\n  }\n  return buffers;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\nimport * as path from 'path';\n\nimport {OrtWasmModule} from './binding/ort-wasm';\nimport {OrtWasmThreadedModule} from './binding/ort-wasm-threaded';\n\n/* eslint-disable @typescript-eslint/no-require-imports */\nconst ortWasmFactory: EmscriptenModuleFactory<OrtWasmModule> =\n    BUILD_DEFS.DISABLE_WEBGPU ? require('./binding/ort-wasm.js') : require('./binding/ort-wasm-simd.jsep.js');\n\nconst ortWasmFactoryThreaded: EmscriptenModuleFactory<OrtWasmModule> = !BUILD_DEFS.DISABLE_WASM_THREAD ?\n    (BUILD_DEFS.DISABLE_WEBGPU ? require('./binding/ort-wasm-threaded.js') :\n                                 require('./binding/ort-wasm-simd-threaded.jsep.js')) :\n    ortWasmFactory;\n/* eslint-enable @typescript-eslint/no-require-imports */\n\nlet wasm: OrtWasmModule|undefined;\nlet initialized = false;\nlet initializing = false;\nlet aborted = false;\n\nconst isMultiThreadSupported = (): boolean => {\n  try {\n    // If 'SharedArrayBuffer' is not available, WebAssembly threads will not work.\n    if (typeof SharedArrayBuffer === 'undefined') {\n      return false;\n    }\n\n    // Test for transferability of SABs (for browsers. needed for Firefox)\n    // https://groups.google.com/forum/#!msg/mozilla.dev.platform/IHkBZlHETpA/dwsMNchWEQAJ\n    if (typeof MessageChannel !== 'undefined') {\n      new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));\n    }\n\n    // Test for WebAssembly threads capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing threaded instructions.\n    return WebAssembly.validate(new Uint8Array([\n      0, 97, 115, 109, 1, 0,  0,  0, 1, 4, 1,  96, 0,   0,  3, 2, 1,  0, 5,\n      4, 1,  3,   1,   1, 10, 11, 1, 9, 0, 65, 0,  254, 16, 2, 0, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst isSimdSupported = (): boolean => {\n  try {\n    // Test for WebAssembly SIMD capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing SIMD instructions.\n\n    // The binary data is generated from the following code by wat2wasm:\n    //\n    // (module\n    //   (type $t0 (func))\n    //   (func $f0 (type $t0)\n    //     (drop\n    //       (i32x4.dot_i16x8_s\n    //         (i8x16.splat\n    //           (i32.const 0))\n    //         (v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000)))))\n\n    return WebAssembly.validate(new Uint8Array([\n      0,   97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 30, 1,   28,  0, 65, 0,\n      253, 15, 253, 12,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  253, 186, 1, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst getWasmFileName = (useSimd: boolean, useThreads: boolean) => {\n  if (useThreads) {\n    return useSimd ? 'ort-wasm-simd-threaded.wasm' : 'ort-wasm-threaded.wasm';\n  } else {\n    return useSimd ? 'ort-wasm-simd.wasm' : 'ort-wasm.wasm';\n  }\n};\n\nexport const initializeWebAssembly = async(flags: Env.WebAssemblyFlags): Promise<void> => {\n  if (initialized) {\n    return Promise.resolve();\n  }\n  if (initializing) {\n    throw new Error('multiple calls to \\'initializeWebAssembly()\\' detected.');\n  }\n  if (aborted) {\n    throw new Error('previous call to \\'initializeWebAssembly()\\' failed.');\n  }\n\n  initializing = true;\n\n  // wasm flags are already initialized\n  const timeout = flags.initTimeout!;\n  const numThreads = flags.numThreads!;\n  const simd = flags.simd!;\n\n  const useThreads = numThreads > 1 && isMultiThreadSupported();\n  const useSimd = simd && isSimdSupported();\n\n  const wasmPaths = flags.wasmPaths;\n  const wasmPrefixOverride = typeof wasmPaths === 'string' ? wasmPaths : undefined;\n  const wasmFileName = getWasmFileName(useSimd, useThreads);\n  const wasmPathOverride = typeof wasmPaths === 'object' ? wasmPaths[wasmFileName] : undefined;\n\n  let isTimeout = false;\n\n  const tasks: Array<Promise<void>> = [];\n\n  // promise for timeout\n  if (timeout > 0) {\n    tasks.push(new Promise((resolve) => {\n      setTimeout(() => {\n        isTimeout = true;\n        resolve();\n      }, timeout);\n    }));\n  }\n\n  // promise for module initialization\n  tasks.push(new Promise((resolve, reject) => {\n    const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;\n    const config: Partial<OrtWasmModule> = {\n      locateFile: (fileName: string, scriptDirectory: string) => {\n        if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads && fileName.endsWith('.worker.js') &&\n            typeof Blob !== 'undefined') {\n          return URL.createObjectURL(new Blob(\n              [\n                // This require() function is handled by webpack to load file content of the corresponding .worker.js\n                // eslint-disable-next-line @typescript-eslint/no-require-imports\n                require('./binding/ort-wasm-threaded.worker.js')\n              ],\n              {type: 'text/javascript'}));\n        }\n\n        if (fileName.endsWith('.wasm')) {\n          if (wasmPathOverride) {\n            return wasmPathOverride;\n          }\n\n          const prefix = wasmPrefixOverride ?? scriptDirectory;\n\n          if (!BUILD_DEFS.DISABLE_WEBGPU) {\n            if (wasmFileName === 'ort-wasm-simd.wasm') {\n              return prefix + 'ort-wasm-simd.jsep.wasm';\n            } else if (wasmFileName === 'ort-wasm-simd-threaded.wasm') {\n              return prefix + 'ort-wasm-simd-threaded.jsep.wasm';\n            }\n          }\n\n          return prefix + wasmFileName;\n        }\n\n        return scriptDirectory + fileName;\n      }\n    };\n\n    if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads) {\n      if (typeof Blob === 'undefined') {\n        config.mainScriptUrlOrBlob = path.join(__dirname, 'ort-wasm-threaded.js');\n      } else {\n        const scriptSourceCode = `var ortWasmThreaded=(function(){var _scriptDir;return ${factory.toString()}})();`;\n        config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], {type: 'text/javascript'});\n      }\n    }\n\n    factory(config).then(\n        // wasm module initialized successfully\n        module => {\n          initializing = false;\n          initialized = true;\n          wasm = module;\n          resolve();\n        },\n        // wasm module failed to initialize\n        (what) => {\n          initializing = false;\n          aborted = true;\n          reject(what);\n        });\n  }));\n\n  await Promise.race(tasks);\n\n  if (isTimeout) {\n    throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);\n  }\n};\n\nexport const getInstance = (): OrtWasmModule => {\n  if (initialized && wasm) {\n    return wasm;\n  }\n\n  throw new Error('WebAssembly is not initialized yet.');\n};\n\nexport const dispose = (): void => {\n  if (initialized && !initializing && !aborted) {\n    initializing = true;\n\n    (wasm as OrtWasmThreadedModule).PThread?.terminateAllThreads();\n    wasm = undefined;\n\n    initializing = false;\n    initialized = false;\n    aborted = true;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getInstance} from './wasm-factory';\n\nexport const allocWasmString = (data: string, allocs: number[]): number => {\n  const wasm = getInstance();\n\n  const dataLength = wasm.lengthBytesUTF8(data) + 1;\n  const dataOffset = wasm._malloc(dataLength);\n  wasm.stringToUTF8(data, dataOffset, dataLength);\n  allocs.push(dataOffset);\n\n  return dataOffset;\n};\n\ninterface ExtraOptionsHandler {\n  (name: string, value: string): void;\n}\n\nexport const iterateExtraOptions =\n    (options: Record<string, unknown>, prefix: string, seen: WeakSet<Record<string, unknown>>,\n     handler: ExtraOptionsHandler): void => {\n      if (typeof options == 'object' && options !== null) {\n        if (seen.has(options)) {\n          throw new Error('Circular reference in options');\n        } else {\n          seen.add(options);\n        }\n      }\n\n      Object.entries(options).forEach(([key, value]) => {\n        const name = (prefix) ? prefix + key : key;\n        if (typeof value === 'object') {\n          iterateExtraOptions(value as Record<string, unknown>, name + '.', seen, handler);\n        } else if (typeof value === 'string' || typeof value === 'number') {\n          handler(name, value.toString());\n        } else if (typeof value === 'boolean') {\n          handler(name, (value) ? '1' : '0');\n        } else {\n          throw new Error(`Can't handle extra config type: ${typeof value}`);\n        }\n      });\n    };\n\n/**\n * check web assembly API's last error and throw error if any error occurred.\n * @param message a message used when an error occurred.\n */\nexport const checkLastError = (message: string): void => {\n  const wasm = getInstance();\n\n  const stack = wasm.stackSave();\n  try {\n    const paramsOffset = wasm.stackAlloc(8);\n    wasm._OrtGetLastError(paramsOffset, paramsOffset + 4);\n    const errorCode = wasm.HEAP32[paramsOffset / 4];\n    const errorMessagePointer = wasm.HEAPU32[paramsOffset / 4 + 1];\n    const errorMessage = errorMessagePointer ? wasm.UTF8ToString(errorMessagePointer) : '';\n    throw new Error(`${message} ERROR_CODE: ${errorCode}, ERROR_MESSAGE: ${errorMessage}`);\n  } finally {\n    wasm.stackRestore(stack);\n  }\n};\n","\nimport worker from \"!!../../../../node_modules/worker-loader/dist/runtime/inline.js\";\n\nexport default function Worker_fn() {\n  return worker(\"/*!\\n* ONNX Runtime Web v1.16.0\\n* Copyright (c) Microsoft Corporation. All rights reserved.\\n* Licensed under the MIT License.\\n*/\\n(()=>{var e={918:(e,t,r)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.setRunOptions=void 0;const n=r(263),a=r(497);t.setRunOptions=e=>{const t=(0,n.getInstance)();let r=0;const o=[],i=e||{};try{if(void 0===(null==e?void 0:e.logSeverityLevel))i.logSeverityLevel=2;else if(\\\"number\\\"!=typeof e.logSeverityLevel||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(void 0===(null==e?void 0:e.logVerbosityLevel))i.logVerbosityLevel=0;else if(\\\"number\\\"!=typeof e.logVerbosityLevel||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);void 0===(null==e?void 0:e.terminate)&&(i.terminate=!1);let n=0;return void 0!==(null==e?void 0:e.tag)&&(n=(0,a.allocWasmString)(e.tag,o)),r=t._OrtCreateRunOptions(i.logSeverityLevel,i.logVerbosityLevel,!!i.terminate,n),0===r&&(0,a.checkLastError)(\\\"Can't create run options.\\\"),void 0!==(null==e?void 0:e.extra)&&(0,a.iterateExtraOptions)(e.extra,\\\"\\\",new WeakSet,((e,n)=>{const i=(0,a.allocWasmString)(e,o),u=(0,a.allocWasmString)(n,o);0!==t._OrtAddRunConfigEntry(r,i,u)&&(0,a.checkLastError)(`Can't set a run config entry: ${e} - ${n}.`)})),[r,o]}catch(e){throw 0!==r&&t._OrtReleaseRunOptions(r),o.forEach((e=>t._free(e))),e}}},622:(e,t,r)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.setSessionOptions=void 0;const n=r(263),a=r(497);t.setSessionOptions=e=>{var t,r,o,i;const u=(0,n.getInstance)();let s=0;const c=[],f=e||{};(e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});const t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly=\\\"1\\\"),e.executionProviders&&e.executionProviders.some((e=>\\\"webgpu\\\"===(\\\"string\\\"==typeof e?e:e.name)))&&(e.enableMemPattern=!1)})(f);try{const e=(e=>{switch(e){case\\\"disabled\\\":return 0;case\\\"basic\\\":return 1;case\\\"extended\\\":return 2;case\\\"all\\\":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}})(null!==(t=f.graphOptimizationLevel)&&void 0!==t?t:\\\"all\\\"),l=(e=>{switch(e){case\\\"sequential\\\":return 0;case\\\"parallel\\\":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}})(null!==(r=f.executionMode)&&void 0!==r?r:\\\"sequential\\\"),p=\\\"string\\\"==typeof f.logId?(0,a.allocWasmString)(f.logId,c):0,d=null!==(o=f.logSeverityLevel)&&void 0!==o?o:2;if(!Number.isInteger(d)||d<0||d>4)throw new Error(`log serverity level is not valid: ${d}`);const g=null!==(i=f.logVerbosityLevel)&&void 0!==i?i:0;if(!Number.isInteger(g)||g<0||g>4)throw new Error(`log verbosity level is not valid: ${g}`);const h=\\\"string\\\"==typeof f.optimizedModelFilePath?(0,a.allocWasmString)(f.optimizedModelFilePath,c):0;return s=u._OrtCreateSessionOptions(e,!!f.enableCpuMemArena,!!f.enableMemPattern,l,!!f.enableProfiling,0,p,d,g,h),0===s&&(0,a.checkLastError)(\\\"Can't create session options.\\\"),f.executionProviders&&((e,t,r)=>{for(const o of t){let t=\\\"string\\\"==typeof o?o:o.name;switch(t){case\\\"xnnpack\\\":t=\\\"XNNPACK\\\";break;case\\\"webnn\\\":if(t=\\\"WEBNN\\\",\\\"string\\\"!=typeof o){const t=o;if(null==t?void 0:t.deviceType){const o=(0,a.allocWasmString)(\\\"deviceType\\\",r),i=(0,a.allocWasmString)(t.deviceType,r);0!==(0,n.getInstance)()._OrtAddSessionConfigEntry(e,o,i)&&(0,a.checkLastError)(`Can't set a session config entry: 'deviceType' - ${t.deviceType}.`)}if(null==t?void 0:t.powerPreference){const o=(0,a.allocWasmString)(\\\"powerPreference\\\",r),i=(0,a.allocWasmString)(t.powerPreference,r);0!==(0,n.getInstance)()._OrtAddSessionConfigEntry(e,o,i)&&(0,a.checkLastError)(`Can't set a session config entry: 'powerPreference' - ${t.powerPreference}.`)}}break;case\\\"webgpu\\\":t=\\\"JS\\\";break;case\\\"wasm\\\":case\\\"cpu\\\":continue;default:throw new Error(`not supported execution provider: ${t}`)}const i=(0,a.allocWasmString)(t,r);0!==(0,n.getInstance)()._OrtAppendExecutionProvider(e,i)&&(0,a.checkLastError)(`Can't append execution provider: ${t}.`)}})(s,f.executionProviders,c),void 0!==f.extra&&(0,a.iterateExtraOptions)(f.extra,\\\"\\\",new WeakSet,((e,t)=>{const r=(0,a.allocWasmString)(e,c),n=(0,a.allocWasmString)(t,c);0!==u._OrtAddSessionConfigEntry(s,r,n)&&(0,a.checkLastError)(`Can't set a session config entry: ${e} - ${t}.`)})),[s,c]}catch(e){throw 0!==s&&u._OrtReleaseSessionOptions(s),c.forEach((e=>u._free(e))),e}}},917:(e,t)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.logLevelStringToEnum=t.tensorTypeToTypedArrayConstructor=t.getTensorElementSize=t.tensorDataTypeEnumToString=t.tensorDataTypeStringToEnum=void 0,t.tensorDataTypeStringToEnum=e=>{switch(e){case\\\"int8\\\":return 3;case\\\"uint8\\\":return 2;case\\\"bool\\\":return 9;case\\\"int16\\\":return 5;case\\\"uint16\\\":return 4;case\\\"int32\\\":return 6;case\\\"uint32\\\":return 12;case\\\"float16\\\":return 10;case\\\"float32\\\":return 1;case\\\"float64\\\":return 11;case\\\"string\\\":return 8;case\\\"int64\\\":return 7;case\\\"uint64\\\":return 13;default:throw new Error(`unsupported data type: ${e}`)}},t.tensorDataTypeEnumToString=e=>{switch(e){case 3:return\\\"int8\\\";case 2:return\\\"uint8\\\";case 9:return\\\"bool\\\";case 5:return\\\"int16\\\";case 4:return\\\"uint16\\\";case 6:return\\\"int32\\\";case 12:return\\\"uint32\\\";case 10:return\\\"float16\\\";case 1:return\\\"float32\\\";case 11:return\\\"float64\\\";case 8:return\\\"string\\\";case 7:return\\\"int64\\\";case 13:return\\\"uint64\\\";default:throw new Error(`unsupported data type: ${e}`)}},t.getTensorElementSize=e=>[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][e],t.tensorTypeToTypedArrayConstructor=e=>{switch(e){case\\\"float16\\\":case\\\"uint16\\\":return Uint16Array;case\\\"float32\\\":return Float32Array;case\\\"uint8\\\":case\\\"bool\\\":return Uint8Array;case\\\"int8\\\":return Int8Array;case\\\"int16\\\":return Int16Array;case\\\"int32\\\":return Int32Array;case\\\"float64\\\":return Float64Array;case\\\"uint32\\\":return Uint32Array;case\\\"int64\\\":return BigInt64Array;case\\\"uint64\\\":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},t.logLevelStringToEnum=e=>{switch(e){case\\\"verbose\\\":return 0;case\\\"info\\\":return 1;case\\\"warning\\\":return 2;case\\\"error\\\":return 3;case\\\"fatal\\\":return 4;default:throw new Error(`unsupported logging level: ${e}`)}}},259:(e,t,r)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.extractTransferableBuffers=t.endProfiling=t.run=t.releaseSession=t.createSession=t.createSessionFinalize=t.createSessionAllocate=t.initRuntime=void 0;const n=r(918),a=r(622),o=r(917),i=r(263),u=r(497);t.initRuntime=async e=>{var t,r;t=e.wasm.numThreads,r=(0,o.logLevelStringToEnum)(e.logLevel),0!==(0,i.getInstance)()._OrtInit(t,r)&&(0,u.checkLastError)(\\\"Can't initialize onnxruntime.\\\")};const s=new Map;t.createSessionAllocate=e=>{const t=(0,i.getInstance)(),r=t._malloc(e.byteLength);if(0===r)throw new Error(`Can't create a session. failed to allocate a buffer of size ${e.byteLength}.`);return t.HEAPU8.set(e,r),[r,e.byteLength]},t.createSessionFinalize=(e,t)=>{const r=(0,i.getInstance)();let n=0,o=0,c=[];const f=[],l=[];try{[o,c]=(0,a.setSessionOptions)(t),n=r._OrtCreateSession(e[0],e[1],o),0===n&&(0,u.checkLastError)(\\\"Can't create a session.\\\");const[p,d]=(e=>{const t=(0,i.getInstance)(),r=t.stackSave();try{const r=t.stackAlloc(8);return 0!==t._OrtGetInputOutputCount(e,r,r+4)&&(0,u.checkLastError)(\\\"Can't get session input/output count.\\\"),[t.HEAP32[r/4],t.HEAP32[r/4+1]]}finally{t.stackRestore(r)}})(n),g=[],h=[];for(let e=0;e<p;e++){const t=r._OrtGetInputName(n,e);0===t&&(0,u.checkLastError)(\\\"Can't get an input name.\\\"),f.push(t),g.push(r.UTF8ToString(t))}for(let e=0;e<d;e++){const t=r._OrtGetOutputName(n,e);0===t&&(0,u.checkLastError)(\\\"Can't get an output name.\\\"),l.push(t),h.push(r.UTF8ToString(t))}return s.set(n,[n,f,l]),[n,g,h]}catch(e){throw f.forEach((e=>r._OrtFree(e))),l.forEach((e=>r._OrtFree(e))),0!==n&&r._OrtReleaseSession(n),e}finally{r._free(e[0]),0!==o&&r._OrtReleaseSessionOptions(o),c.forEach((e=>r._free(e)))}},t.createSession=(e,r)=>{const n=(0,t.createSessionAllocate)(e);return(0,t.createSessionFinalize)(n,r)},t.releaseSession=e=>{const t=(0,i.getInstance)(),r=s.get(e);if(!r)throw new Error(`cannot release session. invalid session id: ${e}`);const[n,a,o]=r;a.forEach((e=>t._OrtFree(e))),o.forEach((e=>t._OrtFree(e))),t._OrtReleaseSession(n),s.delete(e)},t.run=async(e,t,r,a,c)=>{const f=(0,i.getInstance)(),l=s.get(e);if(!l)throw new Error(`cannot run inference. invalid session id: ${e}`);const[p,d,g]=l,h=t.length,m=a.length;let y=0,v=[];const b=[],w=[];try{[y,v]=(0,n.setRunOptions)(c);for(let e=0;e<h;e++){const t=r[e][0],n=r[e][1],a=r[e][2];let i,s;if(Array.isArray(a)){s=4*a.length,i=f._malloc(s),w.push(i);let e=i/4;for(let t=0;t<a.length;t++){if(\\\"string\\\"!=typeof a[t])throw new TypeError(`tensor data at index ${t} is not a string`);f.HEAPU32[e++]=(0,u.allocWasmString)(a[t],w)}}else s=a.byteLength,i=f._malloc(s),w.push(i),f.HEAPU8.set(new Uint8Array(a.buffer,a.byteOffset,s),i);const c=f.stackSave(),l=f.stackAlloc(4*n.length);try{let r=l/4;n.forEach((e=>f.HEAP32[r++]=e));const a=f._OrtCreateTensor((0,o.tensorDataTypeStringToEnum)(t),i,s,l,n.length);0===a&&(0,u.checkLastError)(`Can't create tensor for input[${e}].`),b.push(a)}finally{f.stackRestore(c)}}const e=f.stackSave(),i=f.stackAlloc(4*h),s=f.stackAlloc(4*h),l=f.stackAlloc(4*m),_=f.stackAlloc(4*m);try{let e=i/4,r=s/4,n=l/4,c=_/4;for(let n=0;n<h;n++)f.HEAPU32[e++]=b[n],f.HEAPU32[r++]=d[t[n]];for(let e=0;e<m;e++)f.HEAPU32[n++]=0,f.HEAPU32[c++]=g[a[e]];let v=f._OrtRun(p,s,i,h,_,m,l,y);const w=f.jsepRunPromise;w&&void 0!==w.then&&(v=await w);const T=[];0!==v&&(0,u.checkLastError)(\\\"failed to call OrtRun().\\\");for(let e=0;e<m;e++){const t=f.HEAPU32[l/4+e],r=f.stackSave(),n=f.stackAlloc(16);let a,i=0;try{v=f._OrtGetTensorData(t,n,n+4,n+8,n+12),0!==v&&(0,u.checkLastError)(`Can't access output tensor data on index ${e}.`);let r=n/4;const s=f.HEAPU32[r++];i=f.HEAPU32[r++];const c=f.HEAPU32[r++],l=f.HEAPU32[r++],p=[];for(let e=0;e<l;e++)p.push(f.HEAPU32[c/4+e]);f._OrtFree(c);const d=0===p.length?1:p.reduce(((e,t)=>e*t));if(a=(0,o.tensorDataTypeEnumToString)(s),\\\"string\\\"===a){const e=[];let t=i/4;for(let r=0;r<d;r++){const n=f.HEAPU32[t++],a=r===d-1?void 0:f.HEAPU32[t]-n;e.push(f.UTF8ToString(n,a))}T.push([a,p,e])}else{const e=new((0,o.tensorTypeToTypedArrayConstructor)(a))(d);new Uint8Array(e.buffer,e.byteOffset,e.byteLength).set(f.HEAPU8.subarray(i,i+e.byteLength)),T.push([a,p,e])}}finally{f.stackRestore(r),\\\"string\\\"===a&&i&&f._free(i),f._OrtReleaseTensor(t)}}return T}finally{f.stackRestore(e)}}finally{b.forEach((e=>f._OrtReleaseTensor(e))),w.forEach((e=>f._free(e))),0!==y&&f._OrtReleaseRunOptions(y),v.forEach((e=>f._free(e)))}},t.endProfiling=e=>{const t=(0,i.getInstance)(),r=s.get(e);if(!r)throw new Error(\\\"invalid session id\\\");const n=r[0],a=t._OrtEndProfiling(n);0===a&&(0,u.checkLastError)(\\\"Can't get an profile file name.\\\"),t._OrtFree(a)},t.extractTransferableBuffers=e=>{const t=[];for(const r of e){const e=r[2];!Array.isArray(e)&&e.buffer&&t.push(e.buffer)}return t}},263:function(e,t,r){\\\"use strict\\\";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var a=Object.getOwnPropertyDescriptor(t,r);a&&!(\\\"get\\\"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,a)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,\\\"default\\\",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)\\\"default\\\"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&n(t,e,r);return a(t,e),t};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.dispose=t.getInstance=t.initializeWebAssembly=void 0;const i=o(r(17)),u=r(932),s=r(474);let c,f=!1,l=!1,p=!1;t.initializeWebAssembly=async e=>{if(f)return Promise.resolve();if(l)throw new Error(\\\"multiple calls to 'initializeWebAssembly()' detected.\\\");if(p)throw new Error(\\\"previous call to 'initializeWebAssembly()' failed.\\\");l=!0;const t=e.initTimeout,n=e.numThreads,a=e.simd,o=n>1&&(()=>{try{return\\\"undefined\\\"!=typeof SharedArrayBuffer&&(\\\"undefined\\\"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])))}catch(e){return!1}})(),d=a&&(()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch(e){return!1}})(),g=e.wasmPaths,h=\\\"string\\\"==typeof g?g:void 0,m=((e,t)=>t?e?\\\"ort-wasm-simd-threaded.wasm\\\":\\\"ort-wasm-threaded.wasm\\\":e?\\\"ort-wasm-simd.wasm\\\":\\\"ort-wasm.wasm\\\")(d,o),y=\\\"object\\\"==typeof g?g[m]:void 0;let v=!1;const b=[];if(t>0&&b.push(new Promise((e=>{setTimeout((()=>{v=!0,e()}),t)}))),b.push(new Promise(((e,t)=>{const n=o?s:u,a={locateFile:(e,t)=>o&&e.endsWith(\\\".worker.js\\\")&&\\\"undefined\\\"!=typeof Blob?URL.createObjectURL(new Blob([r(154)],{type:\\\"text/javascript\\\"})):e.endsWith(\\\".wasm\\\")?y||(null!=h?h:t)+m:t+e};if(o)if(\\\"undefined\\\"==typeof Blob)a.mainScriptUrlOrBlob=i.join(__dirname,\\\"ort-wasm-threaded.js\\\");else{const e=`var ortWasmThreaded=(function(){var _scriptDir;return ${n.toString()}})();`;a.mainScriptUrlOrBlob=new Blob([e],{type:\\\"text/javascript\\\"})}n(a).then((t=>{l=!1,f=!0,c=t,e()}),(e=>{l=!1,p=!0,t(e)}))}))),await Promise.race(b),v)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)},t.getInstance=()=>{if(f&&c)return c;throw new Error(\\\"WebAssembly is not initialized yet.\\\")},t.dispose=()=>{var e;!f||l||p||(l=!0,null===(e=c.PThread)||void 0===e||e.terminateAllThreads(),c=void 0,l=!1,f=!1,p=!0)}},497:(e,t,r)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.checkLastError=t.iterateExtraOptions=t.allocWasmString=void 0;const n=r(263);t.allocWasmString=(e,t)=>{const r=(0,n.getInstance)(),a=r.lengthBytesUTF8(e)+1,o=r._malloc(a);return r.stringToUTF8(e,o,a),t.push(o),o},t.iterateExtraOptions=(e,r,n,a)=>{if(\\\"object\\\"==typeof e&&null!==e){if(n.has(e))throw new Error(\\\"Circular reference in options\\\");n.add(e)}Object.entries(e).forEach((([e,o])=>{const i=r?r+e:e;if(\\\"object\\\"==typeof o)(0,t.iterateExtraOptions)(o,i+\\\".\\\",n,a);else if(\\\"string\\\"==typeof o||\\\"number\\\"==typeof o)a(i,o.toString());else{if(\\\"boolean\\\"!=typeof o)throw new Error(\\\"Can't handle extra config type: \\\"+typeof o);a(i,o?\\\"1\\\":\\\"0\\\")}}))},t.checkLastError=e=>{const t=(0,n.getInstance)(),r=t.stackSave();try{const r=t.stackAlloc(8);t._OrtGetLastError(r,r+4);const n=t.HEAP32[r/4],a=t.HEAPU32[r/4+1],o=a?t.UTF8ToString(a):\\\"\\\";throw new Error(`${e} ERROR_CODE: ${n}, ERROR_MESSAGE: ${o}`)}finally{t.stackRestore(r)}}},474:(e,t,r)=>{var _scriptDir,n=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\\\"undefined\\\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(e={}){function t(){return F.buffer!=D.buffer&&V(),D}function n(){return F.buffer!=D.buffer&&V(),I}function a(){return F.buffer!=D.buffer&&V(),x}function o(){return F.buffer!=D.buffer&&V(),H}function i(){return F.buffer!=D.buffer&&V(),j}function u(){return F.buffer!=D.buffer&&V(),L}function s(){return F.buffer!=D.buffer&&V(),N}var c,f,l;c||(c=void 0!==e?e:{}),c.ready=new Promise(((e,t)=>{f=e,l=t}));var p,d,g,h=Object.assign({},c),m=\\\"./this.program\\\",y=(e,t)=>{throw t},v=\\\"object\\\"==typeof window,b=\\\"function\\\"==typeof importScripts,w=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,_=c.ENVIRONMENT_IS_PTHREAD||!1,T=\\\"\\\";function A(e){return c.locateFile?c.locateFile(e,T):T+e}if(w){var O=r(147),E=r(17);let t;T=b?E.dirname(T)+\\\"/\\\":__dirname+\\\"/\\\",p=(e,t)=>(e=e.startsWith(\\\"file://\\\")?new URL(e):E.normalize(e),O.readFileSync(e,t?void 0:\\\"utf8\\\")),g=e=>((e=p(e,!0)).buffer||(e=new Uint8Array(e)),e),d=(e,t,r,n=!0)=>{e=e.startsWith(\\\"file://\\\")?new URL(e):E.normalize(e),O.readFile(e,n?void 0:\\\"utf8\\\",((e,a)=>{e?r(e):t(n?a.buffer:a)}))},!c.thisProgram&&1<process.argv.length&&(m=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),y=(e,t)=>{throw process.exitCode=e,t},c.inspect=()=>\\\"[Emscripten Module object]\\\";try{t=r(267)}catch(e){throw console.error('The \\\"worker_threads\\\" module is not supported in this node.js build - perhaps a newer version is needed?'),e}global.Worker=t.Worker}else(v||b)&&(b?T=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(T=document.currentScript.src),_scriptDir&&(T=_scriptDir),T=0!==T.indexOf(\\\"blob:\\\")?T.substr(0,T.replace(/[?#].*/,\\\"\\\").lastIndexOf(\\\"/\\\")+1):\\\"\\\",w||(p=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.send(null),t.responseText},b&&(g=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.responseType=\\\"arraybuffer\\\",t.send(null),new Uint8Array(t.response)}),d=(e,t,r)=>{var n=new XMLHttpRequest;n.open(\\\"GET\\\",e,!0),n.responseType=\\\"arraybuffer\\\",n.onload=()=>{200==n.status||0==n.status&&n.response?t(n.response):r()},n.onerror=r,n.send(null)}));w&&\\\"undefined\\\"==typeof performance&&(global.performance=r(74).performance);var S=console.log.bind(console),P=console.warn.bind(console);w&&(S=(...e)=>O.writeSync(1,e.join(\\\" \\\")+\\\"\\\\n\\\"),P=(...e)=>O.writeSync(2,e.join(\\\" \\\")+\\\"\\\\n\\\"));var M,C=c.print||S,k=c.printErr||P;Object.assign(c,h),h=null,c.thisProgram&&(m=c.thisProgram),c.quit&&(y=c.quit),c.wasmBinary&&(M=c.wasmBinary);var R=c.noExitRuntime||!0;\\\"object\\\"!=typeof WebAssembly&&oe(\\\"no native wasm support detected\\\");var F,U,W,D,I,x,H,j,L,Y,z,B,N,G=!1;function V(){var e=F.buffer;c.HEAP8=D=new Int8Array(e),c.HEAP16=x=new Int16Array(e),c.HEAP32=j=new Int32Array(e),c.HEAPU8=I=new Uint8Array(e),c.HEAPU16=H=new Uint16Array(e),c.HEAPU32=L=new Uint32Array(e),c.HEAPF32=Y=new Float32Array(e),c.HEAPF64=N=new Float64Array(e),c.HEAP64=z=new BigInt64Array(e),c.HEAPU64=B=new BigUint64Array(e)}var $=c.INITIAL_MEMORY||16777216;if(5242880<=$||oe(\\\"INITIAL_MEMORY should be larger than STACK_SIZE, was \\\"+$+\\\"! (STACK_SIZE=5242880)\\\"),_)F=c.wasmMemory;else if(c.wasmMemory)F=c.wasmMemory;else if(!((F=new WebAssembly.Memory({initial:$/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw k(\\\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\\\"),w&&k(\\\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)\\\"),Error(\\\"bad memory\\\");V(),$=F.buffer.byteLength;var q,J=[],X=[],Z=[],Q=0;function K(){return R||0<Q}function ee(){var e=c.preRun.shift();J.unshift(e)}var te,re=0,ne=null,ae=null;function oe(e){throw c.onAbort&&c.onAbort(e),k(e=\\\"Aborted(\\\"+e+\\\")\\\"),G=!0,W=1,e=new WebAssembly.RuntimeError(e+\\\". Build with -sASSERTIONS for more info.\\\"),l(e),e}function ie(e){return e.startsWith(\\\"data:application/octet-stream;base64,\\\")}function ue(e){try{if(e==te&&M)return new Uint8Array(M);if(g)return g(e);throw\\\"both async and sync fetching of the wasm failed\\\"}catch(e){oe(e)}}function se(e,t,r){return function(e){if(!M&&(v||b)){if(\\\"function\\\"==typeof fetch&&!e.startsWith(\\\"file://\\\"))return fetch(e,{credentials:\\\"same-origin\\\"}).then((t=>{if(!t.ok)throw\\\"failed to load wasm binary file at '\\\"+e+\\\"'\\\";return t.arrayBuffer()})).catch((()=>ue(e)));if(d)return new Promise(((t,r)=>{d(e,(e=>t(new Uint8Array(e))),r)}))}return Promise.resolve().then((()=>ue(e)))}(e).then((e=>WebAssembly.instantiate(e,t))).then((e=>e)).then(r,(e=>{k(\\\"failed to asynchronously prepare wasm: \\\"+e),oe(e)}))}function ce(e){this.name=\\\"ExitStatus\\\",this.message=\\\"Program terminated with exit(\\\"+e+\\\")\\\",this.status=e}function fe(e){e.terminate(),e.onmessage=()=>{}}function le(e){(e=be.hb[e])||oe(),be.Lb(e)}function pe(e){var t=be.Db();if(!t)return 6;be.kb.push(t),be.hb[e.jb]=t,t.jb=e.jb;var r={cmd:\\\"run\\\",start_routine:e.Mb,arg:e.Bb,pthread_ptr:e.jb};return w&&t.unref(),t.postMessage(r,e.Sb),0}ie(te=\\\"ort-wasm-threaded.wasm\\\")||(te=A(te));var de=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf8\\\"):void 0;function ge(e,t,r){var n=(t>>>=0)+r;for(r=t;e[r]&&!(r>=n);)++r;if(16<r-t&&e.buffer&&de)return de.decode(e.buffer instanceof SharedArrayBuffer?e.slice(t,r):e.subarray(t,r));for(n=\\\"\\\";t<r;){var a=e[t++];if(128&a){var o=63&e[t++];if(192==(224&a))n+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[t++])?n+=String.fromCharCode(a):(a-=65536,n+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else n+=String.fromCharCode(a)}return n}function he(e,t){return(e>>>=0)?ge(n(),e,t):\\\"\\\"}function me(e){if(_)return Ut(1,1,e);W=e,K()||(be.Nb(),c.onExit&&c.onExit(e),G=!0),y(e,new ce(e))}function ye(e){if(W=e,_)throw _e(e),\\\"unwind\\\";me(e)}function ve(e){e instanceof ce||\\\"unwind\\\"==e||y(1,e)}var be={nb:[],kb:[],zb:[],hb:{},tb:function(){_&&be.Fb()},Vb:function(){},Fb:function(){be.receiveObjectTransfer=be.Kb,be.threadInitTLS=be.yb,be.setExitStatus=be.xb,R=!1},xb:function(e){W=e},Xb:[\\\"$terminateWorker\\\"],Nb:function(){for(var e of be.kb)fe(e);for(e of be.nb)fe(e);be.nb=[],be.kb=[],be.hb=[]},Lb:function(e){var t=e.jb;delete be.hb[t],be.nb.push(e),be.kb.splice(be.kb.indexOf(e),1),e.jb=0,ar(t)},Kb:function(){},yb:function(){be.zb.forEach((e=>e()))},Jb:e=>new Promise((t=>{e.onmessage=r=>{var n=(r=r.data).cmd;if(e.jb&&(be.Cb=e.jb),r.targetThread&&r.targetThread!=Qt()){var a=be.hb[r.Wb];a?a.postMessage(r,r.transferList):k('Internal error! Worker sent a message \\\"'+n+'\\\" to target pthread '+r.targetThread+\\\", but that thread no longer exists!\\\")}else\\\"checkMailbox\\\"===n?mt():\\\"spawnThread\\\"===n?pe(r):\\\"cleanupThread\\\"===n?le(r.thread):\\\"killThread\\\"===n?(r=r.thread,n=be.hb[r],delete be.hb[r],fe(n),ar(r),be.kb.splice(be.kb.indexOf(n),1),n.jb=0):\\\"cancelThread\\\"===n?be.hb[r.thread].postMessage({cmd:\\\"cancel\\\"}):\\\"loaded\\\"===n?(e.loaded=!0,t(e)):\\\"print\\\"===n?C(\\\"Thread \\\"+r.threadId+\\\": \\\"+r.text):\\\"printErr\\\"===n?k(\\\"Thread \\\"+r.threadId+\\\": \\\"+r.text):\\\"alert\\\"===n?alert(\\\"Thread \\\"+r.threadId+\\\": \\\"+r.text):\\\"setimmediate\\\"===r.target?e.postMessage(r):\\\"callHandler\\\"===n?c[r.handler](...r.args):n&&k(\\\"worker sent an unknown command \\\"+n);be.Cb=void 0},e.onerror=e=>{throw k(\\\"worker sent an error! \\\"+e.filename+\\\":\\\"+e.lineno+\\\": \\\"+e.message),e},w&&(e.on(\\\"message\\\",(function(t){e.onmessage({data:t})})),e.on(\\\"error\\\",(function(t){e.onerror(t)})));var r,n=[];for(r of[\\\"onExit\\\",\\\"onAbort\\\",\\\"print\\\",\\\"printErr\\\"])c.hasOwnProperty(r)&&n.push(r);e.postMessage({cmd:\\\"load\\\",handlers:n,urlOrBlob:c.mainScriptUrlOrBlob||_scriptDir,wasmMemory:F,wasmModule:U})})),Ib:function(e){e()},Ab:function(){var e=A(\\\"ort-wasm-threaded.worker.js\\\");e=new Worker(e),be.nb.push(e)},Db:function(){return 0==be.nb.length&&(be.Ab(),be.Jb(be.nb[0])),be.nb.pop()}};function we(e){for(;0<e.length;)e.shift()(c)}function _e(e){if(_)return Ut(2,0,e);ye(e)}c.PThread=be,c.establishStackSpace=function(){var e=Qt(),t=i()[e+52>>2>>>0];sr(t,t-(e=i()[e+56>>2>>>0])),fr(t)};var Te=[];function Ae(e){this.gb=e-24,this.ub=function(e){u()[this.gb+4>>2>>>0]=e},this.qb=function(e){u()[this.gb+8>>2>>>0]=e},this.tb=function(e,t){this.pb(),this.ub(e),this.qb(t)},this.pb=function(){u()[this.gb+16>>2>>>0]=0}}function Oe(e,t,r,n){return _?Ut(3,1,e,t,r,n):Ee(e,t,r,n)}function Ee(e,t,r,n){if(\\\"undefined\\\"==typeof SharedArrayBuffer)return k(\\\"Current environment does not support SharedArrayBuffer, pthreads are not available!\\\"),6;var a=[];return _&&0===a.length?Oe(e,t,r,n):(e={Mb:r,jb:e,Bb:n,Sb:a},_?(e.Ub=\\\"spawnThread\\\",postMessage(e,a),0):pe(e))}function Se(e,t,r){return _?Ut(4,1,e,t,r):0}function Pe(e,t){if(_)return Ut(5,1,e,t)}function Me(e){for(var t=0,r=0;r<e.length;++r){var n=e.charCodeAt(r);127>=n?t++:2047>=n?t+=2:55296<=n&&57343>=n?(t+=4,++r):t+=3}return t}function Ce(e,t,r,n){if(!(0<n))return 0;var a=r>>>=0;n=r+n-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(r>=n)break;t[r++>>>0]=i}else{if(2047>=i){if(r+1>=n)break;t[r++>>>0]=192|i>>6}else{if(65535>=i){if(r+2>=n)break;t[r++>>>0]=224|i>>12}else{if(r+3>=n)break;t[r++>>>0]=240|i>>18,t[r++>>>0]=128|i>>12&63}t[r++>>>0]=128|i>>6&63}t[r++>>>0]=128|63&i}}return t[r>>>0]=0,r-a}function ke(e,t,r){return Ce(e,n(),t,r)}function Re(e,t){if(_)return Ut(6,1,e,t)}function Fe(e,t,r){if(_)return Ut(7,1,e,t,r)}function Ue(e,t,r){return _?Ut(8,1,e,t,r):0}function We(e,t){if(_)return Ut(9,1,e,t)}function De(e,t,r){if(_)return Ut(10,1,e,t,r)}function Ie(e,t,r,n){if(_)return Ut(11,1,e,t,r,n)}function xe(e,t,r,n){if(_)return Ut(12,1,e,t,r,n)}function He(e,t,r,n){if(_)return Ut(13,1,e,t,r,n)}function je(e){if(_)return Ut(14,1,e)}function Le(e,t){if(_)return Ut(15,1,e,t)}function Ye(e,t,r){if(_)return Ut(16,1,e,t,r)}function ze(e){if(null===e)return\\\"null\\\";var t=typeof e;return\\\"object\\\"===t||\\\"array\\\"===t||\\\"function\\\"===t?e.toString():\\\"\\\"+e}c.invokeEntryPoint=function(e,t){var r=Te[e];r||(e>=Te.length&&(Te.length=e+1),Te[e]=r=q.get(e)),e=r(t),K()?be.xb(e):ir(e)};var Be=void 0;function Ne(e){for(var t=\\\"\\\";n()[e>>>0];)t+=Be[n()[e++>>>0]];return t}var Ge={},Ve={},$e={};function qe(e){if(void 0===e)return\\\"_unknown\\\";var t=(e=e.replace(/[^a-zA-Z0-9_]/g,\\\"$\\\")).charCodeAt(0);return 48<=t&&57>=t?\\\"_\\\"+e:e}function Je(e,t){return{[e=qe(e)]:function(){return t.apply(this,arguments)}}[e]}function Xe(e){var t=Error,r=Je(e,(function(t){this.name=e,this.message=t,void 0!==(t=Error(t).stack)&&(this.stack=this.toString()+\\\"\\\\n\\\"+t.replace(/^Error(:[^\\\\n]*)?\\\\n/,\\\"\\\"))}));return r.prototype=Object.create(t.prototype),r.prototype.constructor=r,r.prototype.toString=function(){return void 0===this.message?this.name:this.name+\\\": \\\"+this.message},r}var Ze=void 0;function Qe(e){throw new Ze(e)}function Ke(e,t,r={}){if(!(\\\"argPackAdvance\\\"in t))throw new TypeError(\\\"registerType registeredInstance requires argPackAdvance\\\");var n=t.name;if(e||Qe('type \\\"'+n+'\\\" must have a positive integer typeid pointer'),Ve.hasOwnProperty(e)){if(r.Eb)return;Qe(\\\"Cannot register type '\\\"+n+\\\"' twice\\\")}Ve[e]=t,delete $e[e],Ge.hasOwnProperty(e)&&(t=Ge[e],delete Ge[e],t.forEach((e=>e())))}function et(e,r,s){switch(r){case 0:return s?function(e){return t()[e>>>0]}:function(e){return n()[e>>>0]};case 1:return s?function(e){return a()[e>>>1]}:function(e){return o()[e>>>1]};case 2:return s?function(e){return i()[e>>>2]}:function(e){return u()[e>>>2]};case 3:return s?function(e){return z[e>>3]}:function(e){return B[e>>3]};default:throw new TypeError(\\\"Unknown integer type: \\\"+e)}}function tt(e){switch(e){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError(\\\"Unknown type size: \\\"+e)}}var rt=new function(){this.gb=[void 0],this.pb=[],this.get=function(e){return this.gb[e]},this.ub=function(e){let t=this.pb.pop()||this.gb.length;return this.gb[t]=e,t},this.Hb=function(e){this.gb[e]=void 0,this.pb.push(e)}};function nt(e){e>=rt.qb&&0==--rt.get(e).wb&&rt.Hb(e)}var at=e=>(e||Qe(\\\"Cannot use deleted val. handle = \\\"+e),rt.get(e).value),ot=e=>{switch(e){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:return rt.ub({wb:1,value:e})}};function it(e){return this.fromWireType(i()[e>>2>>>0])}function ut(e,t){switch(t){case 2:return function(e){var t=this.fromWireType;return F.buffer!=D.buffer&&V(),t.call(this,Y[e>>>2])};case 3:return function(e){return this.fromWireType(s()[e>>>3])};default:throw new TypeError(\\\"Unknown float type: \\\"+e)}}var st=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf-16le\\\"):void 0;function ct(e,t){for(var r=e>>1,i=r+t/2;!(r>=i)&&o()[r>>>0];)++r;if(32<(r<<=1)-e&&st)return st.decode(n().slice(e,r));for(r=\\\"\\\",i=0;!(i>=t/2);++i){var u=a()[e+2*i>>1>>>0];if(0==u)break;r+=String.fromCharCode(u)}return r}function ft(e,t,r){if(void 0===r&&(r=2147483647),2>r)return 0;var n=t;r=(r-=2)<2*e.length?r/2:e.length;for(var o=0;o<r;++o){var i=e.charCodeAt(o);a()[t>>1>>>0]=i,t+=2}return a()[t>>1>>>0]=0,t-n}function lt(e){return 2*e.length}function pt(e,t){for(var r=0,n=\\\"\\\";!(r>=t/4);){var a=i()[e+4*r>>2>>>0];if(0==a)break;++r,65536<=a?(a-=65536,n+=String.fromCharCode(55296|a>>10,56320|1023&a)):n+=String.fromCharCode(a)}return n}function dt(e,t,r){if(void 0===r&&(r=2147483647),4>r)return 0;var n=t>>>=0;r=n+r-4;for(var a=0;a<e.length;++a){var o=e.charCodeAt(a);if(55296<=o&&57343>=o&&(o=65536+((1023&o)<<10)|1023&e.charCodeAt(++a)),i()[t>>2>>>0]=o,(t+=4)+4>r)break}return i()[t>>2>>>0]=0,t-n}function gt(e){for(var t=0,r=0;r<e.length;++r){var n=e.charCodeAt(r);55296<=n&&57343>=n&&++r,t+=4}return t}function ht(e){\\\"function\\\"==typeof Atomics.Tb&&(Atomics.Tb(i(),e>>2,e).value.then(mt),e+=128,Atomics.store(i(),e>>2,1))}function mt(){var e=Qt();e&&(ht(e),function(e){if(!G)try{if(ur(),!K())try{_?ir(W):ye(W)}catch(e){ve(e)}}catch(e){ve(e)}}())}function yt(e,t){var r=Ve[e];if(void 0===r){var n=Ne(e=tr(e));er(e),Qe(t+\\\" has unknown type \\\"+n)}return r}c.__emscripten_thread_mailbox_await=ht,c.checkMailbox=mt;var vt={};function bt(e){var t=vt[e];return void 0===t?Ne(e):t}var wt=[];function _t(){return\\\"object\\\"==typeof globalThis?globalThis:Function(\\\"return this\\\")()}var Tt=[],At={};function Ot(e){return u()[e>>>2]+4294967296*i()[e+4>>>2]}function Et(e){return 0==e%4&&(0!=e%100||0==e%400)}var St,Pt=[0,31,60,91,121,152,182,213,244,274,305,335],Mt=[0,31,59,90,120,151,181,212,243,273,304,334];function Ct(e){return(Et(e.getFullYear())?Pt:Mt)[e.getMonth()]+e.getDate()-1}function kt(e,t,r,n,a,o,i){return _?Ut(17,1,e,t,r,n,a,o,i):-52}function Rt(e,t,r,n,a,o){if(_)return Ut(18,1,e,t,r,n,a,o)}function Ft(e){var t=Me(e)+1,r=Kt(t);return r&&ke(e,r,t),r}function Ut(e,t){var r=arguments.length-2,n=arguments;return function(e){var t=cr();return e=e(),fr(t),e}((()=>{for(var a=2*r,o=lr(8*a),i=o>>3,u=0;u<r;u++){var c=n[2+u];\\\"bigint\\\"==typeof c?(z[i+2*u]=1n,z[i+2*u+1]=c):(z[i+2*u]=0n,s()[i+2*u+1>>>0]=c)}return nr(e,a,o,t)}))}St=w?()=>{var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:()=>performance.timeOrigin+performance.now();var Wt,Dt=[],It={};function xt(){if(!Wt){var e,t={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:m||\\\"./this.program\\\"};for(e in It)void 0===It[e]?delete t[e]:t[e]=It[e];var r=[];for(e in t)r.push(e+\\\"=\\\"+t[e]);Wt=r}return Wt}function Ht(e,r){if(_)return Ut(19,1,e,r);var n=0;return xt().forEach((function(a,o){var i=r+n;for(o=u()[e+4*o>>2>>>0]=i,i=0;i<a.length;++i)t()[o++>>0>>>0]=a.charCodeAt(i);t()[o>>0>>>0]=0,n+=a.length+1})),0}function jt(e,t){if(_)return Ut(20,1,e,t);var r=xt();u()[e>>2>>>0]=r.length;var n=0;return r.forEach((function(e){n+=e.length+1})),u()[t>>2>>>0]=n,0}function Lt(e){return _?Ut(21,1,e):52}function Yt(e,t,r,n){return _?Ut(22,1,e,t,r,n):52}function zt(e,t,r,n){return _?Ut(23,1,e,t,r,n):70}var Bt=[null,[],[]];function Nt(e,t,r,a){if(_)return Ut(24,1,e,t,r,a);for(var o=0,i=0;i<r;i++){var s=u()[t>>2>>>0],c=u()[t+4>>2>>>0];t+=8;for(var f=0;f<c;f++){var l=n()[s+f>>>0],p=Bt[e];0===l||10===l?((1===e?C:k)(ge(p,0)),p.length=0):p.push(l)}o+=c}return u()[a>>2>>>0]=o,0}var Gt=[31,29,31,30,31,30,31,31,30,31,30,31],Vt=[31,28,31,30,31,30,31,31,30,31,30,31];function $t(e,r,n,a){function o(e,t,r){for(e=\\\"number\\\"==typeof e?e.toString():e||\\\"\\\";e.length<t;)e=r[0]+e;return e}function u(e,t){return o(e,t,\\\"0\\\")}function s(e,t){function r(e){return 0>e?-1:0<e?1:0}var n;return 0===(n=r(e.getFullYear()-t.getFullYear()))&&0===(n=r(e.getMonth()-t.getMonth()))&&(n=r(e.getDate()-t.getDate())),n}function c(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function f(e){var t=e.lb;for(e=new Date(new Date(e.mb+1900,0,1).getTime());0<t;){var r=e.getMonth(),n=(Et(e.getFullYear())?Gt:Vt)[r];if(!(t>n-e.getDate())){e.setDate(e.getDate()+t);break}t-=n-e.getDate()+1,e.setDate(1),11>r?e.setMonth(r+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return r=new Date(e.getFullYear()+1,0,4),t=c(new Date(e.getFullYear(),0,4)),r=c(r),0>=s(t,e)?0>=s(r,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var l=i()[a+40>>2>>>0];for(var p in a={Qb:i()[a>>2>>>0],Pb:i()[a+4>>2>>>0],rb:i()[a+8>>2>>>0],vb:i()[a+12>>2>>>0],sb:i()[a+16>>2>>>0],mb:i()[a+20>>2>>>0],ib:i()[a+24>>2>>>0],lb:i()[a+28>>2>>>0],Yb:i()[a+32>>2>>>0],Ob:i()[a+36>>2>>>0],Rb:l?he(l):\\\"\\\"},n=he(n),l={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})n=n.replace(new RegExp(p,\\\"g\\\"),l[p]);var d=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),g=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(p in l={\\\"%a\\\":function(e){return d[e.ib].substring(0,3)},\\\"%A\\\":function(e){return d[e.ib]},\\\"%b\\\":function(e){return g[e.sb].substring(0,3)},\\\"%B\\\":function(e){return g[e.sb]},\\\"%C\\\":function(e){return u((e.mb+1900)/100|0,2)},\\\"%d\\\":function(e){return u(e.vb,2)},\\\"%e\\\":function(e){return o(e.vb,2,\\\" \\\")},\\\"%g\\\":function(e){return f(e).toString().substring(2)},\\\"%G\\\":function(e){return f(e)},\\\"%H\\\":function(e){return u(e.rb,2)},\\\"%I\\\":function(e){return 0==(e=e.rb)?e=12:12<e&&(e-=12),u(e,2)},\\\"%j\\\":function(e){for(var t=0,r=0;r<=e.sb-1;t+=(Et(e.mb+1900)?Gt:Vt)[r++]);return u(e.vb+t,3)},\\\"%m\\\":function(e){return u(e.sb+1,2)},\\\"%M\\\":function(e){return u(e.Pb,2)},\\\"%n\\\":function(){return\\\"\\\\n\\\"},\\\"%p\\\":function(e){return 0<=e.rb&&12>e.rb?\\\"AM\\\":\\\"PM\\\"},\\\"%S\\\":function(e){return u(e.Qb,2)},\\\"%t\\\":function(){return\\\"\\\\t\\\"},\\\"%u\\\":function(e){return e.ib||7},\\\"%U\\\":function(e){return u(Math.floor((e.lb+7-e.ib)/7),2)},\\\"%V\\\":function(e){var t=Math.floor((e.lb+7-(e.ib+6)%7)/7);if(2>=(e.ib+371-e.lb-2)%7&&t++,t)53==t&&(4==(r=(e.ib+371-e.lb)%7)||3==r&&Et(e.mb)||(t=1));else{t=52;var r=(e.ib+7-e.lb-1)%7;(4==r||5==r&&Et(e.mb%400-1))&&t++}return u(t,2)},\\\"%w\\\":function(e){return e.ib},\\\"%W\\\":function(e){return u(Math.floor((e.lb+7-(e.ib+6)%7)/7),2)},\\\"%y\\\":function(e){return(e.mb+1900).toString().substring(2)},\\\"%Y\\\":function(e){return e.mb+1900},\\\"%z\\\":function(e){var t=0<=(e=e.Ob);return e=Math.abs(e)/60,(t?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(e/60*100+e%60)).slice(-4)},\\\"%Z\\\":function(e){return e.Rb},\\\"%%\\\":function(){return\\\"%\\\"}},n=n.replace(/%%/g,\\\"\\\\0\\\\0\\\"),l)n.includes(p)&&(n=n.replace(new RegExp(p,\\\"g\\\"),l[p](a)));return p=function(e){var t=Array(Me(e)+1);return Ce(e,t,0,t.length),t}(n=n.replace(/\\\\0\\\\0/g,\\\"%\\\")),p.length>r?0:(function(e,r){t().set(e,r>>>0)}(p,e),p.length-1)}be.tb();for(var qt=Array(256),Jt=0;256>Jt;++Jt)qt[Jt]=String.fromCharCode(Jt);Be=qt,Ze=c.BindingError=Xe(\\\"BindingError\\\"),c.InternalError=Xe(\\\"InternalError\\\"),rt.gb.push({value:void 0},{value:null},{value:!0},{value:!1}),rt.qb=rt.gb.length,c.count_emval_handles=function(){for(var e=0,t=rt.qb;t<rt.gb.length;++t)void 0!==rt.gb[t]&&++e;return e};var Xt=[null,me,_e,Oe,Se,Pe,Re,Fe,Ue,We,De,Ie,xe,He,je,Le,Ye,kt,Rt,Ht,jt,Lt,Yt,zt,Nt],Zt={b:function(e,t,r){throw new Ae(e).tb(t,r),e},ra:function(){oe(\\\"To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html\\\")},ga:function(e){rr(e,!b,1,!v),be.yb()},D:function(e){_?postMessage({cmd:\\\"cleanupThread\\\",thread:e}):le(e)},W:Ee,y:Se,na:Pe,S:Re,U:Fe,L:Ue,ka:We,ba:De,ja:Ie,F:xe,T:He,Q:je,la:Le,R:Ye,I:function(e,t,r,n,a){t=Ne(t),r=tt(r);var o=-1!=t.indexOf(\\\"u\\\");o&&(a=(1n<<64n)-1n),Ke(e,{name:t,fromWireType:function(e){return e},toWireType:function(e,r){if(\\\"bigint\\\"!=typeof r&&\\\"number\\\"!=typeof r)throw new TypeError('Cannot convert \\\"'+ze(r)+'\\\" to '+this.name);if(r<n||r>a)throw new TypeError('Passing a number \\\"'+ze(r)+'\\\" from JS side to C/C++ side to an argument of type \\\"'+t+'\\\", which is outside the valid range ['+n+\\\", \\\"+a+\\\"]!\\\");return r},argPackAdvance:8,readValueFromPointer:et(t,r,!o),ob:null})},ta:function(e,r,n,o,u){var s=tt(n);Ke(e,{name:r=Ne(r),fromWireType:function(e){return!!e},toWireType:function(e,t){return t?o:u},argPackAdvance:8,readValueFromPointer:function(e){if(1===n)var o=t();else if(2===n)o=a();else{if(4!==n)throw new TypeError(\\\"Unknown boolean type size: \\\"+r);o=i()}return this.fromWireType(o[e>>>s])},ob:null})},sa:function(e,t){Ke(e,{name:t=Ne(t),fromWireType:function(e){var t=at(e);return nt(e),t},toWireType:function(e,t){return ot(t)},argPackAdvance:8,readValueFromPointer:it,ob:null})},H:function(e,t,r){r=tt(r),Ke(e,{name:t=Ne(t),fromWireType:function(e){return e},toWireType:function(e,t){return t},argPackAdvance:8,readValueFromPointer:ut(t,r),ob:null})},u:function(e,t,r,n,a){t=Ne(t),-1===a&&(a=4294967295),a=tt(r);var o=e=>e;if(0===n){var i=32-8*r;o=e=>e<<i>>>i}r=t.includes(\\\"unsigned\\\")?function(e,t){return t>>>0}:function(e,t){return t},Ke(e,{name:t,fromWireType:o,toWireType:r,argPackAdvance:8,readValueFromPointer:et(t,a,0!==n),ob:null})},m:function(e,t,r){function n(e){e>>=2;var t=u();return new a(t.buffer,t[e+1>>>0],t[e>>>0])}var a=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array][t];Ke(e,{name:r=Ne(r),fromWireType:n,argPackAdvance:8,readValueFromPointer:n},{Eb:!0})},J:function(e,t){var r=\\\"std::string\\\"===(t=Ne(t));Ke(e,{name:t,fromWireType:function(e){var t=u()[e>>2>>>0],a=e+4;if(r)for(var o=a,i=0;i<=t;++i){var s=a+i;if(i==t||0==n()[s>>>0]){if(o=he(o,s-o),void 0===c)var c=o;else c+=String.fromCharCode(0),c+=o;o=s+1}}else{for(c=Array(t),i=0;i<t;++i)c[i]=String.fromCharCode(n()[a+i>>>0]);c=c.join(\\\"\\\")}return er(e),c},toWireType:function(e,t){t instanceof ArrayBuffer&&(t=new Uint8Array(t));var a=\\\"string\\\"==typeof t;a||t instanceof Uint8Array||t instanceof Uint8ClampedArray||t instanceof Int8Array||Qe(\\\"Cannot pass non-string to std::string\\\");var o=r&&a?Me(t):t.length,i=Kt(4+o+1),s=i+4>>>0;if(u()[i>>2>>>0]=o,r&&a)ke(t,s,o+1);else if(a)for(a=0;a<o;++a){var c=t.charCodeAt(a);255<c&&(er(s),Qe(\\\"String has UTF-16 code units that do not fit in 8 bits\\\")),n()[s+a>>>0]=c}else for(a=0;a<o;++a)n()[s+a>>>0]=t[a];return null!==e&&e.push(er,i),i},argPackAdvance:8,readValueFromPointer:it,ob:function(e){er(e)}})},A:function(e,t,r){if(r=Ne(r),2===t)var n=ct,a=ft,i=lt,s=()=>o(),c=1;else 4===t&&(n=pt,a=dt,i=gt,s=()=>u(),c=2);Ke(e,{name:r,fromWireType:function(e){for(var r,a=u()[e>>>2],o=s(),i=e+4,f=0;f<=a;++f){var l=e+4+f*t;f!=a&&0!=o[l>>>c]||(i=n(i,l-i),void 0===r?r=i:(r+=String.fromCharCode(0),r+=i),i=l+t)}return er(e),r},toWireType:function(e,n){\\\"string\\\"!=typeof n&&Qe(\\\"Cannot pass non-string to C++ string type \\\"+r);var o=i(n),s=Kt(4+o+t);return s>>>=0,u()[s>>>2]=o>>c,a(n,s+4,o+t),null!==e&&e.push(er,s),s},argPackAdvance:8,readValueFromPointer:it,ob:function(e){er(e)}})},ua:function(e,t){Ke(e,{Gb:!0,name:t=Ne(t),argPackAdvance:0,fromWireType:function(){},toWireType:function(){}})},X:function(){return 131072},qa:function(){return!0},O:function(e,t){e==t?setTimeout((()=>mt())):_?postMessage({targetThread:e,cmd:\\\"checkMailbox\\\"}):(e=be.hb[e])&&e.postMessage({cmd:\\\"checkMailbox\\\"})},ea:function(){return-1},fa:ht,pa:function(e){w&&be.hb[e].ref()},r:function(e,t,r){e=at(e),t=yt(t,\\\"emval::as\\\");var n=[],a=ot(n);return u()[r>>2>>>0]=a,t.toWireType(n,e)},i:function(e,t,r,n,a){e=wt[e],t=at(t),r=bt(r);var o=[];return u()[n>>2>>>0]=ot(o),e(t,r,o,a)},s:function(e,t,r,n){(e=wt[e])(t=at(t),r=bt(r),null,n)},c:nt,K:function(e,t){return(e=at(e))==at(t)},o:function(e){return 0===e?ot(_t()):(e=bt(e),ot(_t()[e]))},g:function(e,t){var r=function(e,t){for(var r=Array(e),n=0;n<e;++n)r[n]=yt(u()[t+4*n>>2>>>0],\\\"parameter \\\"+n);return r}(e,t),n=r[0];t=n.name+\\\"_$\\\"+r.slice(1).map((function(e){return e.name})).join(\\\"_\\\")+\\\"$\\\";var a=Tt[t];if(void 0!==a)return a;a=[\\\"retType\\\"];for(var o=[n],i=\\\"\\\",s=0;s<e-1;++s)i+=(0!==s?\\\", \\\":\\\"\\\")+\\\"arg\\\"+s,a.push(\\\"argType\\\"+s),o.push(r[1+s]);var c=\\\"return function \\\"+qe(\\\"methodCaller_\\\"+t)+\\\"(handle, name, destructors, args) {\\\\n\\\",f=0;for(s=0;s<e-1;++s)c+=\\\"    var arg\\\"+s+\\\" = argType\\\"+s+\\\".readValueFromPointer(args\\\"+(f?\\\"+\\\"+f:\\\"\\\")+\\\");\\\\n\\\",f+=r[s+1].argPackAdvance;for(c+=\\\"    var rv = handle[name](\\\"+i+\\\");\\\\n\\\",s=0;s<e-1;++s)r[s+1].deleteObject&&(c+=\\\"    argType\\\"+s+\\\".deleteObject(arg\\\"+s+\\\");\\\\n\\\");return n.Gb||(c+=\\\"    return retType.toWireType(destructors, rv);\\\\n\\\"),a.push(c+\\\"};\\\\n\\\"),e=function(e){var t=Function;if(!(t instanceof Function))throw new TypeError(\\\"new_ called with constructor type \\\"+typeof t+\\\" which is not a function\\\");var r=Je(t.name||\\\"unknownFunctionName\\\",(function(){}));return r.prototype=t.prototype,r=new r,(e=t.apply(r,e))instanceof Object?e:r}(a).apply(null,o),a=function(e){var t=wt.length;return wt.push(e),t}(e),Tt[t]=a},t:function(e,t){return e=at(e),t=at(t),ot(e[t])},d:function(e){4<e&&(rt.get(e).wb+=1)},x:function(e,t,r,n){e=at(e);var a=At[t];return a||(a=function(e){for(var t=\\\"\\\",r=0;r<e;++r)t+=(0!==r?\\\", \\\":\\\"\\\")+\\\"arg\\\"+r;var n=\\\"return function emval_allocator_\\\"+e+\\\"(constructor, argTypes, args) {\\\\n  var HEAPU32 = getMemory();\\\\n\\\";for(r=0;r<e;++r)n+=\\\"var argType\\\"+r+\\\" = requireRegisteredType(HEAPU32[((argTypes)>>2)], 'parameter \\\"+r+\\\"');\\\\nvar arg\\\"+r+\\\" = argType\\\"+r+\\\".readValueFromPointer(args);\\\\nargs += argType\\\"+r+\\\"['argPackAdvance'];\\\\nargTypes += 4;\\\\n\\\";return new Function(\\\"requireRegisteredType\\\",\\\"Module\\\",\\\"valueToHandle\\\",\\\"getMemory\\\",n+\\\"var obj = new constructor(\\\"+t+\\\");\\\\nreturn valueToHandle(obj);\\\\n}\\\\n\\\")(yt,c,ot,(()=>u()))}(t),At[t]=a),a(e,r,n)},v:function(){return ot([])},l:function(e){e=at(e);for(var t=Array(e.length),r=0;r<e.length;r++)t[r]=e[r];return ot(t)},e:function(e){return ot(bt(e))},k:function(){return ot({})},h:function(e){for(var t=at(e);t.length;){var r=t.pop();t.pop()(r)}nt(e)},j:function(e,t,r){e=at(e),t=at(t),r=at(r),e[t]=r},f:function(e,t){return e=(e=yt(e,\\\"_emval_take_value\\\")).readValueFromPointer(t),ot(e)},_:function(e,t){e=new Date(1e3*Ot(e)),i()[t>>2>>>0]=e.getUTCSeconds(),i()[t+4>>2>>>0]=e.getUTCMinutes(),i()[t+8>>2>>>0]=e.getUTCHours(),i()[t+12>>2>>>0]=e.getUTCDate(),i()[t+16>>2>>>0]=e.getUTCMonth(),i()[t+20>>2>>>0]=e.getUTCFullYear()-1900,i()[t+24>>2>>>0]=e.getUTCDay(),e=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,i()[t+28>>2>>>0]=e},$:function(e,t){e=new Date(1e3*Ot(e)),i()[t>>2>>>0]=e.getSeconds(),i()[t+4>>2>>>0]=e.getMinutes(),i()[t+8>>2>>>0]=e.getHours(),i()[t+12>>2>>>0]=e.getDate(),i()[t+16>>2>>>0]=e.getMonth(),i()[t+20>>2>>>0]=e.getFullYear()-1900,i()[t+24>>2>>>0]=e.getDay();var r=0|Ct(e);i()[t+28>>2>>>0]=r,i()[t+36>>2>>>0]=-60*e.getTimezoneOffset(),r=new Date(e.getFullYear(),6,1).getTimezoneOffset();var n=new Date(e.getFullYear(),0,1).getTimezoneOffset();e=0|(r!=n&&e.getTimezoneOffset()==Math.min(n,r)),i()[t+32>>2>>>0]=e},aa:function(e){var t=new Date(i()[e+20>>2>>>0]+1900,i()[e+16>>2>>>0],i()[e+12>>2>>>0],i()[e+8>>2>>>0],i()[e+4>>2>>>0],i()[e>>2>>>0],0),r=i()[e+32>>2>>>0],n=t.getTimezoneOffset(),a=new Date(t.getFullYear(),6,1).getTimezoneOffset(),o=new Date(t.getFullYear(),0,1).getTimezoneOffset(),u=Math.min(o,a);return 0>r?i()[e+32>>2>>>0]=Number(a!=o&&u==n):0<r!=(u==n)&&(a=Math.max(o,a),t.setTime(t.getTime()+6e4*((0<r?u:a)-n))),i()[e+24>>2>>>0]=t.getDay(),r=0|Ct(t),i()[e+28>>2>>>0]=r,i()[e>>2>>>0]=t.getSeconds(),i()[e+4>>2>>>0]=t.getMinutes(),i()[e+8>>2>>>0]=t.getHours(),i()[e+12>>2>>>0]=t.getDate(),i()[e+16>>2>>>0]=t.getMonth(),i()[e+20>>2>>>0]=t.getYear(),t.getTime()/1e3|0},Y:kt,Z:Rt,N:function(e,t,r){function n(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\\\"GMT\\\"}var a=(new Date).getFullYear(),o=new Date(a,0,1),s=new Date(a,6,1);a=o.getTimezoneOffset();var c=s.getTimezoneOffset(),f=Math.max(a,c);u()[e>>2>>>0]=60*f,i()[t>>2>>>0]=Number(a!=c),e=n(o),t=n(s),e=Ft(e),t=Ft(t),c<a?(u()[r>>2>>>0]=e,u()[r+4>>2>>>0]=t):(u()[r>>2>>>0]=t,u()[r+4>>2>>>0]=e)},n:function(){oe(\\\"\\\")},va:function(){oe(\\\"To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html\\\")},E:function(){},G:function(){return Date.now()},oa:function(){throw Q+=1,\\\"unwind\\\"},P:function(){return 4294901760},q:St,w:function(){return w?r(37).cpus().length:navigator.hardwareConcurrency},da:function(e,t,r){t/=2,Dt.length=t,r>>=3;for(var n=0;n<t;n++)Dt[n]=z[r+2*n]?z[r+2*n+1]:s()[r+2*n+1>>>0];return Xt[e].apply(null,Dt)},M:function(e){var t=n().length;if((e>>>=0)<=t||4294901760<e)return!1;for(var r=1;4>=r;r*=2){var a=t*(1+.2/r);a=Math.min(a,e+100663296);var o=Math,i=o.min;a=Math.max(e,a),a+=(65536-a%65536)%65536;e:{var u=F.buffer;try{F.grow(i.call(o,4294901760,a)-u.byteLength+65535>>>16),V();var s=1;break e}catch(e){}s=void 0}if(s)return!0}return!1},ha:Ht,ia:jt,V:ye,z:Lt,C:Yt,ca:zt,B:Nt,a:F||c.wasmMemory,ma:$t,p:function(e,t,r,n){return $t(e,t,r,n)}};!function(){function e(e,t){return e=e.exports,c.asm=e,be.zb.push(c.asm.Ua),q=c.asm.Xa,X.unshift(c.asm.wa),U=t,be.Ib((()=>{if(re--,c.monitorRunDependencies&&c.monitorRunDependencies(re),0==re&&(null!==ne&&(clearInterval(ne),ne=null),ae)){var e=ae;ae=null,e()}})),e}var t={a:Zt};if(re++,c.monitorRunDependencies&&c.monitorRunDependencies(re),c.instantiateWasm)try{return c.instantiateWasm(t,e)}catch(e){k(\\\"Module.instantiateWasm callback failed with error: \\\"+e),l(e)}(function(e,t){var r=te;return M||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||ie(r)||r.startsWith(\\\"file://\\\")||w||\\\"function\\\"!=typeof fetch?se(r,e,t):fetch(r,{credentials:\\\"same-origin\\\"}).then((n=>WebAssembly.instantiateStreaming(n,e).then(t,(function(n){return k(\\\"wasm streaming compile failed: \\\"+n),k(\\\"falling back to ArrayBuffer instantiation\\\"),se(r,e,t)}))))})(t,(function(t){e(t.instance,t.module)})).catch(l)}(),c._OrtInit=function(){return(c._OrtInit=c.asm.xa).apply(null,arguments)},c._OrtGetLastError=function(){return(c._OrtGetLastError=c.asm.ya).apply(null,arguments)},c._OrtCreateSessionOptions=function(){return(c._OrtCreateSessionOptions=c.asm.za).apply(null,arguments)},c._OrtAppendExecutionProvider=function(){return(c._OrtAppendExecutionProvider=c.asm.Aa).apply(null,arguments)},c._OrtAddSessionConfigEntry=function(){return(c._OrtAddSessionConfigEntry=c.asm.Ba).apply(null,arguments)},c._OrtReleaseSessionOptions=function(){return(c._OrtReleaseSessionOptions=c.asm.Ca).apply(null,arguments)},c._OrtCreateSession=function(){return(c._OrtCreateSession=c.asm.Da).apply(null,arguments)},c._OrtReleaseSession=function(){return(c._OrtReleaseSession=c.asm.Ea).apply(null,arguments)},c._OrtGetInputOutputCount=function(){return(c._OrtGetInputOutputCount=c.asm.Fa).apply(null,arguments)},c._OrtGetInputName=function(){return(c._OrtGetInputName=c.asm.Ga).apply(null,arguments)},c._OrtGetOutputName=function(){return(c._OrtGetOutputName=c.asm.Ha).apply(null,arguments)},c._OrtFree=function(){return(c._OrtFree=c.asm.Ia).apply(null,arguments)},c._OrtCreateTensor=function(){return(c._OrtCreateTensor=c.asm.Ja).apply(null,arguments)},c._OrtGetTensorData=function(){return(c._OrtGetTensorData=c.asm.Ka).apply(null,arguments)},c._OrtReleaseTensor=function(){return(c._OrtReleaseTensor=c.asm.La).apply(null,arguments)},c._OrtCreateRunOptions=function(){return(c._OrtCreateRunOptions=c.asm.Ma).apply(null,arguments)},c._OrtAddRunConfigEntry=function(){return(c._OrtAddRunConfigEntry=c.asm.Na).apply(null,arguments)},c._OrtReleaseRunOptions=function(){return(c._OrtReleaseRunOptions=c.asm.Oa).apply(null,arguments)},c._OrtRun=function(){return(c._OrtRun=c.asm.Pa).apply(null,arguments)},c._OrtEndProfiling=function(){return(c._OrtEndProfiling=c.asm.Qa).apply(null,arguments)};var Qt=c._pthread_self=function(){return(Qt=c._pthread_self=c.asm.Ra).apply(null,arguments)},Kt=c._malloc=function(){return(Kt=c._malloc=c.asm.Sa).apply(null,arguments)},er=c._free=function(){return(er=c._free=c.asm.Ta).apply(null,arguments)};function tr(){return(tr=c.asm.Va).apply(null,arguments)}c.__emscripten_tls_init=function(){return(c.__emscripten_tls_init=c.asm.Ua).apply(null,arguments)},c.__embind_initialize_bindings=function(){return(c.__embind_initialize_bindings=c.asm.Wa).apply(null,arguments)};var rr=c.__emscripten_thread_init=function(){return(rr=c.__emscripten_thread_init=c.asm.Ya).apply(null,arguments)};function nr(){return(nr=c.asm._a).apply(null,arguments)}function ar(){return(ar=c.asm.$a).apply(null,arguments)}c.__emscripten_thread_crashed=function(){return(c.__emscripten_thread_crashed=c.asm.Za).apply(null,arguments)};var or,ir=c.__emscripten_thread_exit=function(){return(ir=c.__emscripten_thread_exit=c.asm.ab).apply(null,arguments)},ur=c.__emscripten_check_mailbox=function(){return(ur=c.__emscripten_check_mailbox=c.asm.bb).apply(null,arguments)};function sr(){return(sr=c.asm.cb).apply(null,arguments)}function cr(){return(cr=c.asm.db).apply(null,arguments)}function fr(){return(fr=c.asm.eb).apply(null,arguments)}function lr(){return(lr=c.asm.fb).apply(null,arguments)}function pr(){function e(){if(!or&&(or=!0,c.calledRun=!0,!G)&&(_||we(X),f(c),c.onRuntimeInitialized&&c.onRuntimeInitialized(),!_)){if(c.postRun)for(\\\"function\\\"==typeof c.postRun&&(c.postRun=[c.postRun]);c.postRun.length;){var e=c.postRun.shift();Z.unshift(e)}we(Z)}}if(!(0<re))if(_)f(c),_||we(X),startWorker(c);else{if(c.preRun)for(\\\"function\\\"==typeof c.preRun&&(c.preRun=[c.preRun]);c.preRun.length;)ee();we(J),0<re||(c.setStatus?(c.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){c.setStatus(\\\"\\\")}),1),e()}),1)):e())}}if(c.keepRuntimeAlive=K,c.wasmMemory=F,c.stackAlloc=lr,c.stackSave=cr,c.stackRestore=fr,c.UTF8ToString=he,c.stringToUTF8=ke,c.lengthBytesUTF8=Me,c.ExitStatus=ce,c.PThread=be,ae=function e(){or||pr(),or||(ae=e)},c.preInit)for(\\\"function\\\"==typeof c.preInit&&(c.preInit=[c.preInit]);0<c.preInit.length;)c.preInit.pop()();return pr(),e.ready});e.exports=n},932:(e,t,r)=>{var _scriptDir,n=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\\\"undefined\\\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(e={}){var t,n,a;t||(t=void 0!==e?e:{}),t.ready=new Promise(((e,t)=>{n=e,a=t}));var o,i,u,s=Object.assign({},t),c=\\\"./this.program\\\",f=\\\"object\\\"==typeof window,l=\\\"function\\\"==typeof importScripts,p=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,d=\\\"\\\";if(p){var g=r(147),h=r(17);d=l?h.dirname(d)+\\\"/\\\":__dirname+\\\"/\\\",o=(e,t)=>(e=e.startsWith(\\\"file://\\\")?new URL(e):h.normalize(e),g.readFileSync(e,t?void 0:\\\"utf8\\\")),u=e=>((e=o(e,!0)).buffer||(e=new Uint8Array(e)),e),i=(e,t,r,n=!0)=>{e=e.startsWith(\\\"file://\\\")?new URL(e):h.normalize(e),g.readFile(e,n?void 0:\\\"utf8\\\",((e,a)=>{e?r(e):t(n?a.buffer:a)}))},!t.thisProgram&&1<process.argv.length&&(c=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),t.inspect=()=>\\\"[Emscripten Module object]\\\"}else(f||l)&&(l?d=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(d=document.currentScript.src),_scriptDir&&(d=_scriptDir),d=0!==d.indexOf(\\\"blob:\\\")?d.substr(0,d.replace(/[?#].*/,\\\"\\\").lastIndexOf(\\\"/\\\")+1):\\\"\\\",o=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.send(null),t.responseText},l&&(u=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.responseType=\\\"arraybuffer\\\",t.send(null),new Uint8Array(t.response)}),i=(e,t,r)=>{var n=new XMLHttpRequest;n.open(\\\"GET\\\",e,!0),n.responseType=\\\"arraybuffer\\\",n.onload=()=>{200==n.status||0==n.status&&n.response?t(n.response):r()},n.onerror=r,n.send(null)});var m,y=t.print||console.log.bind(console),v=t.printErr||console.warn.bind(console);Object.assign(t,s),s=null,t.thisProgram&&(c=t.thisProgram),t.wasmBinary&&(m=t.wasmBinary),t.noExitRuntime,\\\"object\\\"!=typeof WebAssembly&&L(\\\"no native wasm support detected\\\");var b,w,_,T,A,O,E,S,P,M,C,k=!1;function R(){var e=b.buffer;t.HEAP8=w=new Int8Array(e),t.HEAP16=T=new Int16Array(e),t.HEAP32=O=new Int32Array(e),t.HEAPU8=_=new Uint8Array(e),t.HEAPU16=A=new Uint16Array(e),t.HEAPU32=E=new Uint32Array(e),t.HEAPF32=S=new Float32Array(e),t.HEAPF64=C=new Float64Array(e),t.HEAP64=P=new BigInt64Array(e),t.HEAPU64=M=new BigUint64Array(e)}var F=[],U=[],W=[];function D(){var e=t.preRun.shift();F.unshift(e)}var I,x=0,H=null,j=null;function L(e){throw t.onAbort&&t.onAbort(e),v(e=\\\"Aborted(\\\"+e+\\\")\\\"),k=!0,e=new WebAssembly.RuntimeError(e+\\\". Build with -sASSERTIONS for more info.\\\"),a(e),e}function Y(e){return e.startsWith(\\\"data:application/octet-stream;base64,\\\")}if(!Y(I=\\\"ort-wasm.wasm\\\")){var z=I;I=t.locateFile?t.locateFile(z,d):d+z}function B(e){try{if(e==I&&m)return new Uint8Array(m);if(u)return u(e);throw\\\"both async and sync fetching of the wasm failed\\\"}catch(e){L(e)}}function N(e,t,r){return function(e){if(!m&&(f||l)){if(\\\"function\\\"==typeof fetch&&!e.startsWith(\\\"file://\\\"))return fetch(e,{credentials:\\\"same-origin\\\"}).then((t=>{if(!t.ok)throw\\\"failed to load wasm binary file at '\\\"+e+\\\"'\\\";return t.arrayBuffer()})).catch((()=>B(e)));if(i)return new Promise(((t,r)=>{i(e,(e=>t(new Uint8Array(e))),r)}))}return Promise.resolve().then((()=>B(e)))}(e).then((e=>WebAssembly.instantiate(e,t))).then((e=>e)).then(r,(e=>{v(\\\"failed to asynchronously prepare wasm: \\\"+e),L(e)}))}function G(e){for(;0<e.length;)e.shift()(t)}function V(e){this.Ja=e-24,this.Wa=function(e){E[this.Ja+4>>2>>>0]=e},this.Va=function(e){E[this.Ja+8>>2>>>0]=e},this.Ra=function(e,t){this.Sa(),this.Wa(e),this.Va(t)},this.Sa=function(){E[this.Ja+16>>2>>>0]=0}}var $=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf8\\\"):void 0;function q(e,t,r){var n=(t>>>=0)+r;for(r=t;e[r]&&!(r>=n);)++r;if(16<r-t&&e.buffer&&$)return $.decode(e.subarray(t,r));for(n=\\\"\\\";t<r;){var a=e[t++];if(128&a){var o=63&e[t++];if(192==(224&a))n+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[t++])?n+=String.fromCharCode(a):(a-=65536,n+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else n+=String.fromCharCode(a)}return n}function J(e,t){return(e>>>=0)?q(_,e,t):\\\"\\\"}function X(e){for(var t=0,r=0;r<e.length;++r){var n=e.charCodeAt(r);127>=n?t++:2047>=n?t+=2:55296<=n&&57343>=n?(t+=4,++r):t+=3}return t}function Z(e,t,r,n){if(!(0<n))return 0;var a=r>>>=0;n=r+n-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(r>=n)break;t[r++>>>0]=i}else{if(2047>=i){if(r+1>=n)break;t[r++>>>0]=192|i>>6}else{if(65535>=i){if(r+2>=n)break;t[r++>>>0]=224|i>>12}else{if(r+3>=n)break;t[r++>>>0]=240|i>>18,t[r++>>>0]=128|i>>12&63}t[r++>>>0]=128|i>>6&63}t[r++>>>0]=128|63&i}}return t[r>>>0]=0,r-a}function Q(e,t,r){return Z(e,_,t,r)}function K(e){if(null===e)return\\\"null\\\";var t=typeof e;return\\\"object\\\"===t||\\\"array\\\"===t||\\\"function\\\"===t?e.toString():\\\"\\\"+e}var ee=void 0;function te(e){for(var t=\\\"\\\";_[e>>>0];)t+=ee[_[e++>>>0]];return t}var re={},ne={},ae={};function oe(e){if(void 0===e)return\\\"_unknown\\\";var t=(e=e.replace(/[^a-zA-Z0-9_]/g,\\\"$\\\")).charCodeAt(0);return 48<=t&&57>=t?\\\"_\\\"+e:e}function ie(e,t){return{[e=oe(e)]:function(){return t.apply(this,arguments)}}[e]}function ue(e){var t=Error,r=ie(e,(function(t){this.name=e,this.message=t,void 0!==(t=Error(t).stack)&&(this.stack=this.toString()+\\\"\\\\n\\\"+t.replace(/^Error(:[^\\\\n]*)?\\\\n/,\\\"\\\"))}));return r.prototype=Object.create(t.prototype),r.prototype.constructor=r,r.prototype.toString=function(){return void 0===this.message?this.name:this.name+\\\": \\\"+this.message},r}var se=void 0;function ce(e){throw new se(e)}function fe(e,t,r={}){if(!(\\\"argPackAdvance\\\"in t))throw new TypeError(\\\"registerType registeredInstance requires argPackAdvance\\\");var n=t.name;if(e||ce('type \\\"'+n+'\\\" must have a positive integer typeid pointer'),ne.hasOwnProperty(e)){if(r.Za)return;ce(\\\"Cannot register type '\\\"+n+\\\"' twice\\\")}ne[e]=t,delete ae[e],re.hasOwnProperty(e)&&(t=re[e],delete re[e],t.forEach((e=>e())))}function le(e,t,r){switch(t){case 0:return r?function(e){return w[e>>>0]}:function(e){return _[e>>>0]};case 1:return r?function(e){return T[e>>>1]}:function(e){return A[e>>>1]};case 2:return r?function(e){return O[e>>>2]}:function(e){return E[e>>>2]};case 3:return r?function(e){return P[e>>3]}:function(e){return M[e>>3]};default:throw new TypeError(\\\"Unknown integer type: \\\"+e)}}function pe(e){switch(e){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError(\\\"Unknown type size: \\\"+e)}}var de=new function(){this.Ja=[void 0],this.Ra=[],this.get=function(e){return this.Ja[e]},this.Va=function(e){let t=this.Ra.pop()||this.Ja.length;return this.Ja[t]=e,t},this.Wa=function(e){this.Ja[e]=void 0,this.Ra.push(e)}};function ge(e){e>=de.Sa&&0==--de.get(e).Ya&&de.Wa(e)}var he=e=>(e||ce(\\\"Cannot use deleted val. handle = \\\"+e),de.get(e).value),me=e=>{switch(e){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:return de.Va({Ya:1,value:e})}};function ye(e){return this.fromWireType(O[e>>2>>>0])}function ve(e,t){switch(t){case 2:return function(e){return this.fromWireType(S[e>>>2])};case 3:return function(e){return this.fromWireType(C[e>>>3])};default:throw new TypeError(\\\"Unknown float type: \\\"+e)}}var be=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf-16le\\\"):void 0;function we(e,t){for(var r=e>>1,n=r+t/2;!(r>=n)&&A[r>>>0];)++r;if(32<(r<<=1)-e&&be)return be.decode(_.subarray(e>>>0,r>>>0));for(r=\\\"\\\",n=0;!(n>=t/2);++n){var a=T[e+2*n>>1>>>0];if(0==a)break;r+=String.fromCharCode(a)}return r}function _e(e,t,r){if(void 0===r&&(r=2147483647),2>r)return 0;var n=t;r=(r-=2)<2*e.length?r/2:e.length;for(var a=0;a<r;++a)T[t>>1>>>0]=e.charCodeAt(a),t+=2;return T[t>>1>>>0]=0,t-n}function Te(e){return 2*e.length}function Ae(e,t){for(var r=0,n=\\\"\\\";!(r>=t/4);){var a=O[e+4*r>>2>>>0];if(0==a)break;++r,65536<=a?(a-=65536,n+=String.fromCharCode(55296|a>>10,56320|1023&a)):n+=String.fromCharCode(a)}return n}function Oe(e,t,r){if(void 0===r&&(r=2147483647),4>r)return 0;var n=t>>>=0;r=n+r-4;for(var a=0;a<e.length;++a){var o=e.charCodeAt(a);if(55296<=o&&57343>=o&&(o=65536+((1023&o)<<10)|1023&e.charCodeAt(++a)),O[t>>2>>>0]=o,(t+=4)+4>r)break}return O[t>>2>>>0]=0,t-n}function Ee(e){for(var t=0,r=0;r<e.length;++r){var n=e.charCodeAt(r);55296<=n&&57343>=n&&++r,t+=4}return t}function Se(e,t){var r=ne[e];if(void 0===r){var n=te(e=Qe(e));Ze(e),ce(t+\\\" has unknown type \\\"+n)}return r}var Pe={};function Me(e){var t=Pe[e];return void 0===t?te(e):t}var Ce=[];function ke(){return\\\"object\\\"==typeof globalThis?globalThis:Function(\\\"return this\\\")()}var Re=[],Fe={};function Ue(e){return 0==e%4&&(0!=e%100||0==e%400)}var We,De=[0,31,60,91,121,152,182,213,244,274,305,335],Ie=[0,31,59,90,120,151,181,212,243,273,304,334];function xe(e){return(Ue(e.getFullYear())?De:Ie)[e.getMonth()]+e.getDate()-1}function He(e){var t=X(e)+1,r=Xe(t);return r&&Q(e,r,t),r}We=p?()=>{var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:()=>performance.now();var je={};function Le(){if(!Ye){var e,t={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:c||\\\"./this.program\\\"};for(e in je)void 0===je[e]?delete t[e]:t[e]=je[e];var r=[];for(e in t)r.push(e+\\\"=\\\"+t[e]);Ye=r}return Ye}var Ye,ze=[null,[],[]],Be=[31,29,31,30,31,30,31,31,30,31,30,31],Ne=[31,28,31,30,31,30,31,31,30,31,30,31];function Ge(e,t,r,n){function a(e,t,r){for(e=\\\"number\\\"==typeof e?e.toString():e||\\\"\\\";e.length<t;)e=r[0]+e;return e}function o(e,t){return a(e,t,\\\"0\\\")}function i(e,t){function r(e){return 0>e?-1:0<e?1:0}var n;return 0===(n=r(e.getFullYear()-t.getFullYear()))&&0===(n=r(e.getMonth()-t.getMonth()))&&(n=r(e.getDate()-t.getDate())),n}function u(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function s(e){var t=e.Oa;for(e=new Date(new Date(e.Pa+1900,0,1).getTime());0<t;){var r=e.getMonth(),n=(Ue(e.getFullYear())?Be:Ne)[r];if(!(t>n-e.getDate())){e.setDate(e.getDate()+t);break}t-=n-e.getDate()+1,e.setDate(1),11>r?e.setMonth(r+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return r=new Date(e.getFullYear()+1,0,4),t=u(new Date(e.getFullYear(),0,4)),r=u(r),0>=i(t,e)?0>=i(r,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var c=O[n+40>>2>>>0];for(var f in n={cb:O[n>>2>>>0],bb:O[n+4>>2>>>0],Ta:O[n+8>>2>>>0],Xa:O[n+12>>2>>>0],Ua:O[n+16>>2>>>0],Pa:O[n+20>>2>>>0],Na:O[n+24>>2>>>0],Oa:O[n+28>>2>>>0],fb:O[n+32>>2>>>0],ab:O[n+36>>2>>>0],eb:c?J(c):\\\"\\\"},r=J(r),c={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})r=r.replace(new RegExp(f,\\\"g\\\"),c[f]);var l=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),p=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(f in c={\\\"%a\\\":function(e){return l[e.Na].substring(0,3)},\\\"%A\\\":function(e){return l[e.Na]},\\\"%b\\\":function(e){return p[e.Ua].substring(0,3)},\\\"%B\\\":function(e){return p[e.Ua]},\\\"%C\\\":function(e){return o((e.Pa+1900)/100|0,2)},\\\"%d\\\":function(e){return o(e.Xa,2)},\\\"%e\\\":function(e){return a(e.Xa,2,\\\" \\\")},\\\"%g\\\":function(e){return s(e).toString().substring(2)},\\\"%G\\\":function(e){return s(e)},\\\"%H\\\":function(e){return o(e.Ta,2)},\\\"%I\\\":function(e){return 0==(e=e.Ta)?e=12:12<e&&(e-=12),o(e,2)},\\\"%j\\\":function(e){for(var t=0,r=0;r<=e.Ua-1;t+=(Ue(e.Pa+1900)?Be:Ne)[r++]);return o(e.Xa+t,3)},\\\"%m\\\":function(e){return o(e.Ua+1,2)},\\\"%M\\\":function(e){return o(e.bb,2)},\\\"%n\\\":function(){return\\\"\\\\n\\\"},\\\"%p\\\":function(e){return 0<=e.Ta&&12>e.Ta?\\\"AM\\\":\\\"PM\\\"},\\\"%S\\\":function(e){return o(e.cb,2)},\\\"%t\\\":function(){return\\\"\\\\t\\\"},\\\"%u\\\":function(e){return e.Na||7},\\\"%U\\\":function(e){return o(Math.floor((e.Oa+7-e.Na)/7),2)},\\\"%V\\\":function(e){var t=Math.floor((e.Oa+7-(e.Na+6)%7)/7);if(2>=(e.Na+371-e.Oa-2)%7&&t++,t)53==t&&(4==(r=(e.Na+371-e.Oa)%7)||3==r&&Ue(e.Pa)||(t=1));else{t=52;var r=(e.Na+7-e.Oa-1)%7;(4==r||5==r&&Ue(e.Pa%400-1))&&t++}return o(t,2)},\\\"%w\\\":function(e){return e.Na},\\\"%W\\\":function(e){return o(Math.floor((e.Oa+7-(e.Na+6)%7)/7),2)},\\\"%y\\\":function(e){return(e.Pa+1900).toString().substring(2)},\\\"%Y\\\":function(e){return e.Pa+1900},\\\"%z\\\":function(e){var t=0<=(e=e.ab);return e=Math.abs(e)/60,(t?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(e/60*100+e%60)).slice(-4)},\\\"%Z\\\":function(e){return e.eb},\\\"%%\\\":function(){return\\\"%\\\"}},r=r.replace(/%%/g,\\\"\\\\0\\\\0\\\"),c)r.includes(f)&&(r=r.replace(new RegExp(f,\\\"g\\\"),c[f](n)));return f=function(e){var t=Array(X(e)+1);return Z(e,t,0,t.length),t}(r=r.replace(/\\\\0\\\\0/g,\\\"%\\\")),f.length>t?0:(w.set(f,e>>>0),f.length-1)}for(var Ve=Array(256),$e=0;256>$e;++$e)Ve[$e]=String.fromCharCode($e);ee=Ve,se=t.BindingError=ue(\\\"BindingError\\\"),t.InternalError=ue(\\\"InternalError\\\"),de.Ja.push({value:void 0},{value:null},{value:!0},{value:!1}),de.Sa=de.Ja.length,t.count_emval_handles=function(){for(var e=0,t=de.Sa;t<de.Ja.length;++t)void 0!==de.Ja[t]&&++e;return e};var qe={a:function(e,t,r){throw new V(e).Ra(t,r),e},da:function(){L(\\\"To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html\\\")},v:function(){return 0},ba:function(){},N:function(){},P:function(){},H:function(){return 0},$:function(){},V:function(){},_:function(){},A:function(){},O:function(){},L:function(){},aa:function(){},M:function(){},D:function(e,t,r,n,a){t=te(t),r=pe(r);var o=-1!=t.indexOf(\\\"u\\\");o&&(a=(1n<<64n)-1n),fe(e,{name:t,fromWireType:function(e){return e},toWireType:function(e,r){if(\\\"bigint\\\"!=typeof r&&\\\"number\\\"!=typeof r)throw new TypeError('Cannot convert \\\"'+K(r)+'\\\" to '+this.name);if(r<n||r>a)throw new TypeError('Passing a number \\\"'+K(r)+'\\\" from JS side to C/C++ side to an argument of type \\\"'+t+'\\\", which is outside the valid range ['+n+\\\", \\\"+a+\\\"]!\\\");return r},argPackAdvance:8,readValueFromPointer:le(t,r,!o),Qa:null})},ga:function(e,t,r,n,a){var o=pe(r);fe(e,{name:t=te(t),fromWireType:function(e){return!!e},toWireType:function(e,t){return t?n:a},argPackAdvance:8,readValueFromPointer:function(e){if(1===r)var n=w;else if(2===r)n=T;else{if(4!==r)throw new TypeError(\\\"Unknown boolean type size: \\\"+t);n=O}return this.fromWireType(n[e>>>o])},Qa:null})},fa:function(e,t){fe(e,{name:t=te(t),fromWireType:function(e){var t=he(e);return ge(e),t},toWireType:function(e,t){return me(t)},argPackAdvance:8,readValueFromPointer:ye,Qa:null})},C:function(e,t,r){r=pe(r),fe(e,{name:t=te(t),fromWireType:function(e){return e},toWireType:function(e,t){return t},argPackAdvance:8,readValueFromPointer:ve(t,r),Qa:null})},p:function(e,t,r,n,a){t=te(t),-1===a&&(a=4294967295),a=pe(r);var o=e=>e;if(0===n){var i=32-8*r;o=e=>e<<i>>>i}r=t.includes(\\\"unsigned\\\")?function(e,t){return t>>>0}:function(e,t){return t},fe(e,{name:t,fromWireType:o,toWireType:r,argPackAdvance:8,readValueFromPointer:le(t,a,0!==n),Qa:null})},l:function(e,t,r){function n(e){e>>=2;var t=E;return new a(t.buffer,t[e+1>>>0],t[e>>>0])}var a=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array][t];fe(e,{name:r=te(r),fromWireType:n,argPackAdvance:8,readValueFromPointer:n},{Za:!0})},E:function(e,t){var r=\\\"std::string\\\"===(t=te(t));fe(e,{name:t,fromWireType:function(e){var t=E[e>>2>>>0],n=e+4;if(r)for(var a=n,o=0;o<=t;++o){var i=n+o;if(o==t||0==_[i>>>0]){if(a=J(a,i-a),void 0===u)var u=a;else u+=String.fromCharCode(0),u+=a;a=i+1}}else{for(u=Array(t),o=0;o<t;++o)u[o]=String.fromCharCode(_[n+o>>>0]);u=u.join(\\\"\\\")}return Ze(e),u},toWireType:function(e,t){t instanceof ArrayBuffer&&(t=new Uint8Array(t));var n=\\\"string\\\"==typeof t;n||t instanceof Uint8Array||t instanceof Uint8ClampedArray||t instanceof Int8Array||ce(\\\"Cannot pass non-string to std::string\\\");var a=r&&n?X(t):t.length,o=Xe(4+a+1),i=o+4>>>0;if(E[o>>2>>>0]=a,r&&n)Q(t,i,a+1);else if(n)for(n=0;n<a;++n){var u=t.charCodeAt(n);255<u&&(Ze(i),ce(\\\"String has UTF-16 code units that do not fit in 8 bits\\\")),_[i+n>>>0]=u}else for(n=0;n<a;++n)_[i+n>>>0]=t[n];return null!==e&&e.push(Ze,o),o},argPackAdvance:8,readValueFromPointer:ye,Qa:function(e){Ze(e)}})},x:function(e,t,r){if(r=te(r),2===t)var n=we,a=_e,o=Te,i=()=>A,u=1;else 4===t&&(n=Ae,a=Oe,o=Ee,i=()=>E,u=2);fe(e,{name:r,fromWireType:function(e){for(var r,a=E[e>>>2],o=i(),s=e+4,c=0;c<=a;++c){var f=e+4+c*t;c!=a&&0!=o[f>>>u]||(s=n(s,f-s),void 0===r?r=s:(r+=String.fromCharCode(0),r+=s),s=f+t)}return Ze(e),r},toWireType:function(e,n){\\\"string\\\"!=typeof n&&ce(\\\"Cannot pass non-string to C++ string type \\\"+r);var i=o(n),s=Xe(4+i+t);return E[(s>>>=0)>>>2]=i>>u,a(n,s+4,i+t),null!==e&&e.push(Ze,s),s},argPackAdvance:8,readValueFromPointer:ye,Qa:function(e){Ze(e)}})},ha:function(e,t){fe(e,{$a:!0,name:t=te(t),argPackAdvance:0,fromWireType:function(){},toWireType:function(){}})},ca:function(){return!0},o:function(e,t,r){e=he(e),t=Se(t,\\\"emval::as\\\");var n=[],a=me(n);return E[r>>2>>>0]=a,t.toWireType(n,e)},h:function(e,t,r,n,a){e=Ce[e],t=he(t),r=Me(r);var o=[];return E[n>>2>>>0]=me(o),e(t,r,o,a)},q:function(e,t,r,n){(e=Ce[e])(t=he(t),r=Me(r),null,n)},b:ge,F:function(e,t){return(e=he(e))==he(t)},u:function(e){return 0===e?me(ke()):(e=Me(e),me(ke()[e]))},g:function(e,t){var r=function(e,t){for(var r=Array(e),n=0;n<e;++n)r[n]=Se(E[t+4*n>>2>>>0],\\\"parameter \\\"+n);return r}(e,t),n=r[0];t=n.name+\\\"_$\\\"+r.slice(1).map((function(e){return e.name})).join(\\\"_\\\")+\\\"$\\\";var a=Re[t];if(void 0!==a)return a;a=[\\\"retType\\\"];for(var o=[n],i=\\\"\\\",u=0;u<e-1;++u)i+=(0!==u?\\\", \\\":\\\"\\\")+\\\"arg\\\"+u,a.push(\\\"argType\\\"+u),o.push(r[1+u]);var s=\\\"return function \\\"+oe(\\\"methodCaller_\\\"+t)+\\\"(handle, name, destructors, args) {\\\\n\\\",c=0;for(u=0;u<e-1;++u)s+=\\\"    var arg\\\"+u+\\\" = argType\\\"+u+\\\".readValueFromPointer(args\\\"+(c?\\\"+\\\"+c:\\\"\\\")+\\\");\\\\n\\\",c+=r[u+1].argPackAdvance;for(s+=\\\"    var rv = handle[name](\\\"+i+\\\");\\\\n\\\",u=0;u<e-1;++u)r[u+1].deleteObject&&(s+=\\\"    argType\\\"+u+\\\".deleteObject(arg\\\"+u+\\\");\\\\n\\\");return n.$a||(s+=\\\"    return retType.toWireType(destructors, rv);\\\\n\\\"),a.push(s+\\\"};\\\\n\\\"),e=function(e){var t=Function;if(!(t instanceof Function))throw new TypeError(\\\"new_ called with constructor type \\\"+typeof t+\\\" which is not a function\\\");var r=ie(t.name||\\\"unknownFunctionName\\\",(function(){}));return r.prototype=t.prototype,r=new r,(e=t.apply(r,e))instanceof Object?e:r}(a).apply(null,o),a=function(e){var t=Ce.length;return Ce.push(e),t}(e),Re[t]=a},r:function(e,t){return e=he(e),t=he(t),me(e[t])},c:function(e){4<e&&(de.get(e).Ya+=1)},G:function(e,r,n,a){e=he(e);var o=Fe[r];return o||(o=function(e){for(var r=\\\"\\\",n=0;n<e;++n)r+=(0!==n?\\\", \\\":\\\"\\\")+\\\"arg\\\"+n;var a=\\\"return function emval_allocator_\\\"+e+\\\"(constructor, argTypes, args) {\\\\n  var HEAPU32 = getMemory();\\\\n\\\";for(n=0;n<e;++n)a+=\\\"var argType\\\"+n+\\\" = requireRegisteredType(HEAPU32[((argTypes)>>2)], 'parameter \\\"+n+\\\"');\\\\nvar arg\\\"+n+\\\" = argType\\\"+n+\\\".readValueFromPointer(args);\\\\nargs += argType\\\"+n+\\\"['argPackAdvance'];\\\\nargTypes += 4;\\\\n\\\";return new Function(\\\"requireRegisteredType\\\",\\\"Module\\\",\\\"valueToHandle\\\",\\\"getMemory\\\",a+\\\"var obj = new constructor(\\\"+r+\\\");\\\\nreturn valueToHandle(obj);\\\\n}\\\\n\\\")(Se,t,me,(()=>E))}(r),Fe[r]=o),o(e,n,a)},s:function(){return me([])},k:function(e){e=he(e);for(var t=Array(e.length),r=0;r<e.length;r++)t[r]=e[r];return me(t)},d:function(e){return me(Me(e))},j:function(){return me({})},f:function(e){for(var t=he(e);t.length;){var r=t.pop();t.pop()(r)}ge(e)},i:function(e,t,r){e=he(e),t=he(t),r=he(r),e[t]=r},e:function(e,t){return e=(e=Se(e,\\\"_emval_take_value\\\")).readValueFromPointer(t),me(e)},S:function(e,t){e=new Date(1e3*(E[e>>>2]+4294967296*O[e+4>>>2])),O[t>>2>>>0]=e.getUTCSeconds(),O[t+4>>2>>>0]=e.getUTCMinutes(),O[t+8>>2>>>0]=e.getUTCHours(),O[t+12>>2>>>0]=e.getUTCDate(),O[t+16>>2>>>0]=e.getUTCMonth(),O[t+20>>2>>>0]=e.getUTCFullYear()-1900,O[t+24>>2>>>0]=e.getUTCDay(),O[t+28>>2>>>0]=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},T:function(e,t){e=new Date(1e3*(E[e>>>2]+4294967296*O[e+4>>>2])),O[t>>2>>>0]=e.getSeconds(),O[t+4>>2>>>0]=e.getMinutes(),O[t+8>>2>>>0]=e.getHours(),O[t+12>>2>>>0]=e.getDate(),O[t+16>>2>>>0]=e.getMonth(),O[t+20>>2>>>0]=e.getFullYear()-1900,O[t+24>>2>>>0]=e.getDay(),O[t+28>>2>>>0]=0|xe(e),O[t+36>>2>>>0]=-60*e.getTimezoneOffset();var r=new Date(e.getFullYear(),6,1).getTimezoneOffset(),n=new Date(e.getFullYear(),0,1).getTimezoneOffset();O[t+32>>2>>>0]=0|(r!=n&&e.getTimezoneOffset()==Math.min(n,r))},U:function(e){var t=new Date(O[e+20>>2>>>0]+1900,O[e+16>>2>>>0],O[e+12>>2>>>0],O[e+8>>2>>>0],O[e+4>>2>>>0],O[e>>2>>>0],0),r=O[e+32>>2>>>0],n=t.getTimezoneOffset(),a=new Date(t.getFullYear(),6,1).getTimezoneOffset(),o=new Date(t.getFullYear(),0,1).getTimezoneOffset(),i=Math.min(o,a);return 0>r?O[e+32>>2>>>0]=Number(a!=o&&i==n):0<r!=(i==n)&&(a=Math.max(o,a),t.setTime(t.getTime()+6e4*((0<r?i:a)-n))),O[e+24>>2>>>0]=t.getDay(),O[e+28>>2>>>0]=0|xe(t),O[e>>2>>>0]=t.getSeconds(),O[e+4>>2>>>0]=t.getMinutes(),O[e+8>>2>>>0]=t.getHours(),O[e+12>>2>>>0]=t.getDate(),O[e+16>>2>>>0]=t.getMonth(),O[e+20>>2>>>0]=t.getYear(),t.getTime()/1e3|0},Q:function(){return-52},R:function(){},J:function(e,t,r){function n(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\\\"GMT\\\"}var a=(new Date).getFullYear(),o=new Date(a,0,1),i=new Date(a,6,1);a=o.getTimezoneOffset();var u=i.getTimezoneOffset();E[e>>2>>>0]=60*Math.max(a,u),O[t>>2>>>0]=Number(a!=u),e=n(o),t=n(i),e=He(e),t=He(t),u<a?(E[r>>2>>>0]=e,E[r+4>>2>>>0]=t):(E[r>>2>>>0]=t,E[r+4>>2>>>0]=e)},t:function(){L(\\\"\\\")},ia:function(){L(\\\"To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html\\\")},B:function(){return Date.now()},K:function(){return 4294901760},n:We,Z:function(e,t,r){_.copyWithin(e>>>0,t>>>0,t+r>>>0)},I:function(e){var t=_.length;if(4294901760<(e>>>=0))return!1;for(var r=1;4>=r;r*=2){var n=t*(1+.2/r);n=Math.min(n,e+100663296);var a=Math,o=a.min;n=Math.max(e,n),n+=(65536-n%65536)%65536;e:{var i=b.buffer;try{b.grow(o.call(a,4294901760,n)-i.byteLength+65535>>>16),R();var u=1;break e}catch(e){}u=void 0}if(u)return!0}return!1},X:function(e,t){var r=0;return Le().forEach((function(n,a){var o=t+r;for(a=E[e+4*a>>2>>>0]=o,o=0;o<n.length;++o)w[a++>>0>>>0]=n.charCodeAt(o);w[a>>0>>>0]=0,r+=n.length+1})),0},Y:function(e,t){var r=Le();E[e>>2>>>0]=r.length;var n=0;return r.forEach((function(e){n+=e.length+1})),E[t>>2>>>0]=n,0},w:function(){return 52},z:function(){return 52},W:function(){return 70},y:function(e,t,r,n){for(var a=0,o=0;o<r;o++){var i=E[t>>2>>>0],u=E[t+4>>2>>>0];t+=8;for(var s=0;s<u;s++){var c=_[i+s>>>0],f=ze[e];0===c||10===c?((1===e?y:v)(q(f,0)),f.length=0):f.push(c)}a+=u}return E[n>>2>>>0]=a,0},ea:Ge,m:function(e,t,r,n){return Ge(e,t,r,n)}};!function(){function e(e){if(e=e.exports,t.asm=e,b=t.asm.ja,R(),U.unshift(t.asm.ka),x--,t.monitorRunDependencies&&t.monitorRunDependencies(x),0==x&&(null!==H&&(clearInterval(H),H=null),j)){var r=j;j=null,r()}return e}var r={a:qe};if(x++,t.monitorRunDependencies&&t.monitorRunDependencies(x),t.instantiateWasm)try{return t.instantiateWasm(r,e)}catch(e){v(\\\"Module.instantiateWasm callback failed with error: \\\"+e),a(e)}(function(e,t){var r=I;return m||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||Y(r)||r.startsWith(\\\"file://\\\")||p||\\\"function\\\"!=typeof fetch?N(r,e,t):fetch(r,{credentials:\\\"same-origin\\\"}).then((n=>WebAssembly.instantiateStreaming(n,e).then(t,(function(n){return v(\\\"wasm streaming compile failed: \\\"+n),v(\\\"falling back to ArrayBuffer instantiation\\\"),N(r,e,t)}))))})(r,(function(t){e(t.instance)})).catch(a)}(),t._OrtInit=function(){return(t._OrtInit=t.asm.la).apply(null,arguments)},t._OrtGetLastError=function(){return(t._OrtGetLastError=t.asm.ma).apply(null,arguments)},t._OrtCreateSessionOptions=function(){return(t._OrtCreateSessionOptions=t.asm.na).apply(null,arguments)},t._OrtAppendExecutionProvider=function(){return(t._OrtAppendExecutionProvider=t.asm.oa).apply(null,arguments)},t._OrtAddSessionConfigEntry=function(){return(t._OrtAddSessionConfigEntry=t.asm.pa).apply(null,arguments)},t._OrtReleaseSessionOptions=function(){return(t._OrtReleaseSessionOptions=t.asm.qa).apply(null,arguments)},t._OrtCreateSession=function(){return(t._OrtCreateSession=t.asm.ra).apply(null,arguments)},t._OrtReleaseSession=function(){return(t._OrtReleaseSession=t.asm.sa).apply(null,arguments)},t._OrtGetInputOutputCount=function(){return(t._OrtGetInputOutputCount=t.asm.ta).apply(null,arguments)},t._OrtGetInputName=function(){return(t._OrtGetInputName=t.asm.ua).apply(null,arguments)},t._OrtGetOutputName=function(){return(t._OrtGetOutputName=t.asm.va).apply(null,arguments)},t._OrtFree=function(){return(t._OrtFree=t.asm.wa).apply(null,arguments)},t._OrtCreateTensor=function(){return(t._OrtCreateTensor=t.asm.xa).apply(null,arguments)},t._OrtGetTensorData=function(){return(t._OrtGetTensorData=t.asm.ya).apply(null,arguments)},t._OrtReleaseTensor=function(){return(t._OrtReleaseTensor=t.asm.za).apply(null,arguments)},t._OrtCreateRunOptions=function(){return(t._OrtCreateRunOptions=t.asm.Aa).apply(null,arguments)},t._OrtAddRunConfigEntry=function(){return(t._OrtAddRunConfigEntry=t.asm.Ba).apply(null,arguments)},t._OrtReleaseRunOptions=function(){return(t._OrtReleaseRunOptions=t.asm.Ca).apply(null,arguments)},t._OrtRun=function(){return(t._OrtRun=t.asm.Da).apply(null,arguments)},t._OrtEndProfiling=function(){return(t._OrtEndProfiling=t.asm.Ea).apply(null,arguments)};var Je,Xe=t._malloc=function(){return(Xe=t._malloc=t.asm.Fa).apply(null,arguments)},Ze=t._free=function(){return(Ze=t._free=t.asm.Ga).apply(null,arguments)};function Qe(){return(Qe=t.asm.Ha).apply(null,arguments)}function Ke(){return(Ke=t.asm.Ka).apply(null,arguments)}function et(){return(et=t.asm.La).apply(null,arguments)}function tt(){return(tt=t.asm.Ma).apply(null,arguments)}function rt(){function e(){if(!Je&&(Je=!0,t.calledRun=!0,!k)){if(G(U),n(t),t.onRuntimeInitialized&&t.onRuntimeInitialized(),t.postRun)for(\\\"function\\\"==typeof t.postRun&&(t.postRun=[t.postRun]);t.postRun.length;){var e=t.postRun.shift();W.unshift(e)}G(W)}}if(!(0<x)){if(t.preRun)for(\\\"function\\\"==typeof t.preRun&&(t.preRun=[t.preRun]);t.preRun.length;)D();G(F),0<x||(t.setStatus?(t.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){t.setStatus(\\\"\\\")}),1),e()}),1)):e())}}if(t.__embind_initialize_bindings=function(){return(t.__embind_initialize_bindings=t.asm.Ia).apply(null,arguments)},t.stackAlloc=tt,t.stackSave=Ke,t.stackRestore=et,t.UTF8ToString=J,t.stringToUTF8=Q,t.lengthBytesUTF8=X,j=function e(){Je||rt(),Je||(j=e)},t.preInit)for(\\\"function\\\"==typeof t.preInit&&(t.preInit=[t.preInit]);0<t.preInit.length;)t.preInit.pop()();return rt(),e.ready});e.exports=n},154:e=>{\\\"use strict\\\";e.exports='\\\"use strict\\\";var e={},a=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node;if(a){var r=require(\\\"worker_threads\\\"),t=r.parentPort;t.on(\\\"message\\\",(e=>onmessage({data:e})));var s=require(\\\"fs\\\");Object.assign(global,{self:global,require:require,Module:e,location:{href:__filename},Worker:r.Worker,importScripts:function(e){(0,eval)(s.readFileSync(e,\\\"utf8\\\")+\\\"//# sourceURL=\\\"+e)},postMessage:function(e){t.postMessage(e)},performance:global.performance||{now:function(){return Date.now()}}})}var o=!1,n=function(){var e=Array.prototype.slice.call(arguments).join(\\\" \\\");a?s.writeSync(2,e+\\\"\\\\\\\\n\\\"):console.error(e)};self.alert=function(){var a=Array.prototype.slice.call(arguments).join(\\\" \\\");postMessage({cmd:\\\"alert\\\",text:a,threadId:e._pthread_self()})},e.instantiateWasm=(a,r)=>{var t=e.wasmModule;return e.wasmModule=null,r(new WebAssembly.Instance(t,a))},self.onunhandledrejection=e=>{throw e.reason??e},self.onmessage=function a(r){try{if(\\\"load\\\"===r.data.cmd){let s=[];self.onmessage=e=>s.push(e),self.startWorker=r=>{e=r,postMessage({cmd:\\\"loaded\\\"});for(let e of s)a(e);self.onmessage=a},e.wasmModule=r.data.wasmModule;for(const a of r.data.handlers)e[a]=function(){postMessage({cmd:\\\"callHandler\\\",handler:a,args:[...arguments]})};if(e.wasmMemory=r.data.wasmMemory,e.buffer=e.wasmMemory.buffer,e.ENVIRONMENT_IS_PTHREAD=!0,\\\"string\\\"==typeof r.data.urlOrBlob)importScripts(r.data.urlOrBlob);else{var t=URL.createObjectURL(r.data.urlOrBlob);importScripts(t),URL.revokeObjectURL(t)}ortWasmThreaded(e)}else if(\\\"run\\\"===r.data.cmd){e.__emscripten_thread_init(r.data.pthread_ptr,0,0,1),e.__emscripten_thread_mailbox_await(r.data.pthread_ptr),e.establishStackSpace(),e.PThread.receiveObjectTransfer(r.data),e.PThread.threadInitTLS(),o||(e.__embind_initialize_bindings(),o=!0);try{e.invokeEntryPoint(r.data.start_routine,r.data.arg)}catch(e){if(\\\"unwind\\\"!=e)throw e}}else\\\"cancel\\\"===r.data.cmd?e._pthread_self()&&e.__emscripten_thread_exit(-1):\\\"setimmediate\\\"===r.data.target||(\\\"checkMailbox\\\"===r.data.cmd?o&&e.checkMailbox():r.data.cmd&&(n(\\\"worker.js received unknown command \\\"+r.data.cmd),n(r.data)))}catch(a){throw e.__emscripten_thread_crashed&&e.__emscripten_thread_crashed(),a}};\\\\n'},147:e=>{\\\"use strict\\\";e.exports=require(\\\"fs\\\")},37:e=>{\\\"use strict\\\";e.exports=require(\\\"os\\\")},17:e=>{\\\"use strict\\\";e.exports=require(\\\"path\\\")},74:e=>{\\\"use strict\\\";e.exports=require(\\\"perf_hooks\\\")},267:e=>{\\\"use strict\\\";e.exports=require(\\\"worker_threads\\\")}},t={};function r(n){var a=t[n];if(void 0!==a)return a.exports;var o=t[n]={exports:{}};return e[n].call(o.exports,o,o.exports,r),o.exports}(()=>{\\\"use strict\\\";const e=r(259),t=r(263);self.onmessage=r=>{switch(r.data.type){case\\\"init-wasm\\\":try{(0,t.initializeWebAssembly)(r.data.in).then((()=>postMessage({type:\\\"init-wasm\\\"})),(e=>postMessage({type:\\\"init-wasm\\\",err:e})))}catch(e){postMessage({type:\\\"init-wasm\\\",err:e})}break;case\\\"init-ort\\\":try{(0,e.initRuntime)(r.data.in).then((()=>postMessage({type:\\\"init-ort\\\"})),(e=>postMessage({type:\\\"init-ort\\\",err:e}))),postMessage({type:\\\"init-ort\\\"})}catch(e){postMessage({type:\\\"init-ort\\\",err:e})}break;case\\\"create_allocate\\\":try{const{model:t}=r.data.in,n=(0,e.createSessionAllocate)(t);postMessage({type:\\\"create_allocate\\\",out:n})}catch(e){postMessage({type:\\\"create_allocate\\\",err:e})}break;case\\\"create_finalize\\\":try{const{modeldata:t,options:n}=r.data.in,a=(0,e.createSessionFinalize)(t,n);postMessage({type:\\\"create_finalize\\\",out:a})}catch(e){postMessage({type:\\\"create_finalize\\\",err:e})}break;case\\\"create\\\":try{const{model:t,options:n}=r.data.in,a=(0,e.createSession)(t,n);postMessage({type:\\\"create\\\",out:a})}catch(e){postMessage({type:\\\"create\\\",err:e})}break;case\\\"release\\\":try{const t=r.data.in;(0,e.releaseSession)(t),postMessage({type:\\\"release\\\"})}catch(e){postMessage({type:\\\"release\\\",err:e})}break;case\\\"run\\\":try{const{sessionId:t,inputIndices:n,inputs:a,outputIndices:o,options:i}=r.data.in;(0,e.run)(t,n,a,o,i).then((t=>{postMessage({type:\\\"run\\\",out:t},(0,e.extractTransferableBuffers)(t))}),(e=>{postMessage({type:\\\"run\\\",err:e})}))}catch(e){postMessage({type:\\\"run\\\",err:e})}break;case\\\"end-profiling\\\":try{const t=r.data.in;(0,e.endProfiling)(t),postMessage({type:\\\"end-profiling\\\"})}catch(e){postMessage({type:\\\"end-profiling\\\",err:e})}}}})()})();\\n\", \"Worker\", undefined, undefined);\n}\n","\"use strict\";\n\n/* eslint-env browser */\n\n/* eslint-disable no-undef, no-use-before-define, new-cap */\nmodule.exports = function (content, workerConstructor, workerOptions, url) {\n  var globalScope = self || window;\n\n  try {\n    try {\n      var blob;\n\n      try {\n        // New API\n        blob = new globalScope.Blob([content]);\n      } catch (e) {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = globalScope.BlobBuilder || globalScope.WebKitBlobBuilder || globalScope.MozBlobBuilder || globalScope.MSBlobBuilder;\n        blob = new BlobBuilder();\n        blob.append(content);\n        blob = blob.getBlob();\n      }\n\n      var URL = globalScope.URL || globalScope.webkitURL;\n      var objectURL = URL.createObjectURL(blob);\n      var worker = new globalScope[workerConstructor](objectURL, workerOptions);\n      URL.revokeObjectURL(objectURL);\n      return worker;\n    } catch (e) {\n      return new globalScope[workerConstructor](\"data:application/javascript,\".concat(encodeURIComponent(content)), workerOptions);\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error(\"Inline worker is not supported\");\n    }\n\n    return new globalScope[workerConstructor](url, workerOptions);\n  }\n};","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.onnx = (function() {\n\n    /**\n     * Namespace onnx.\n     * @exports onnx\n     * @namespace\n     */\n    var onnx = {};\n\n    /**\n     * Version enum.\n     * @name onnx.Version\n     * @enum {number}\n     * @property {number} _START_VERSION=0 _START_VERSION value\n     * @property {number} IR_VERSION_2017_10_10=1 IR_VERSION_2017_10_10 value\n     * @property {number} IR_VERSION_2017_10_30=2 IR_VERSION_2017_10_30 value\n     * @property {number} IR_VERSION_2017_11_3=3 IR_VERSION_2017_11_3 value\n     * @property {number} IR_VERSION_2019_1_22=4 IR_VERSION_2019_1_22 value\n     * @property {number} IR_VERSION_2019_3_18=5 IR_VERSION_2019_3_18 value\n     * @property {number} IR_VERSION_2019_9_19=6 IR_VERSION_2019_9_19 value\n     * @property {number} IR_VERSION_2020_5_8=7 IR_VERSION_2020_5_8 value\n     * @property {number} IR_VERSION_2021_7_30=8 IR_VERSION_2021_7_30 value\n     * @property {number} IR_VERSION=9 IR_VERSION value\n     */\n    onnx.Version = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"_START_VERSION\"] = 0;\n        values[valuesById[1] = \"IR_VERSION_2017_10_10\"] = 1;\n        values[valuesById[2] = \"IR_VERSION_2017_10_30\"] = 2;\n        values[valuesById[3] = \"IR_VERSION_2017_11_3\"] = 3;\n        values[valuesById[4] = \"IR_VERSION_2019_1_22\"] = 4;\n        values[valuesById[5] = \"IR_VERSION_2019_3_18\"] = 5;\n        values[valuesById[6] = \"IR_VERSION_2019_9_19\"] = 6;\n        values[valuesById[7] = \"IR_VERSION_2020_5_8\"] = 7;\n        values[valuesById[8] = \"IR_VERSION_2021_7_30\"] = 8;\n        values[valuesById[9] = \"IR_VERSION\"] = 9;\n        return values;\n    })();\n\n    onnx.AttributeProto = (function() {\n\n        /**\n         * Properties of an AttributeProto.\n         * @memberof onnx\n         * @interface IAttributeProto\n         * @property {string|null} [name] AttributeProto name\n         * @property {string|null} [refAttrName] AttributeProto refAttrName\n         * @property {string|null} [docString] AttributeProto docString\n         * @property {onnx.AttributeProto.AttributeType|null} [type] AttributeProto type\n         * @property {number|null} [f] AttributeProto f\n         * @property {number|Long|null} [i] AttributeProto i\n         * @property {Uint8Array|null} [s] AttributeProto s\n         * @property {onnx.ITensorProto|null} [t] AttributeProto t\n         * @property {onnx.IGraphProto|null} [g] AttributeProto g\n         * @property {onnx.ISparseTensorProto|null} [sparseTensor] AttributeProto sparseTensor\n         * @property {onnx.ITypeProto|null} [tp] AttributeProto tp\n         * @property {Array.<number>|null} [floats] AttributeProto floats\n         * @property {Array.<number|Long>|null} [ints] AttributeProto ints\n         * @property {Array.<Uint8Array>|null} [strings] AttributeProto strings\n         * @property {Array.<onnx.ITensorProto>|null} [tensors] AttributeProto tensors\n         * @property {Array.<onnx.IGraphProto>|null} [graphs] AttributeProto graphs\n         * @property {Array.<onnx.ISparseTensorProto>|null} [sparseTensors] AttributeProto sparseTensors\n         * @property {Array.<onnx.ITypeProto>|null} [typeProtos] AttributeProto typeProtos\n         */\n\n        /**\n         * Constructs a new AttributeProto.\n         * @memberof onnx\n         * @classdesc Represents an AttributeProto.\n         * @implements IAttributeProto\n         * @constructor\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         */\n        function AttributeProto(properties) {\n            this.floats = [];\n            this.ints = [];\n            this.strings = [];\n            this.tensors = [];\n            this.graphs = [];\n            this.sparseTensors = [];\n            this.typeProtos = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * AttributeProto name.\n         * @member {string} name\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.name = \"\";\n\n        /**\n         * AttributeProto refAttrName.\n         * @member {string} refAttrName\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.refAttrName = \"\";\n\n        /**\n         * AttributeProto docString.\n         * @member {string} docString\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.docString = \"\";\n\n        /**\n         * AttributeProto type.\n         * @member {onnx.AttributeProto.AttributeType} type\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.type = 0;\n\n        /**\n         * AttributeProto f.\n         * @member {number} f\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.f = 0;\n\n        /**\n         * AttributeProto i.\n         * @member {number|Long} i\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.i = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * AttributeProto s.\n         * @member {Uint8Array} s\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.s = $util.newBuffer([]);\n\n        /**\n         * AttributeProto t.\n         * @member {onnx.ITensorProto|null|undefined} t\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.t = null;\n\n        /**\n         * AttributeProto g.\n         * @member {onnx.IGraphProto|null|undefined} g\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.g = null;\n\n        /**\n         * AttributeProto sparseTensor.\n         * @member {onnx.ISparseTensorProto|null|undefined} sparseTensor\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.sparseTensor = null;\n\n        /**\n         * AttributeProto tp.\n         * @member {onnx.ITypeProto|null|undefined} tp\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.tp = null;\n\n        /**\n         * AttributeProto floats.\n         * @member {Array.<number>} floats\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.floats = $util.emptyArray;\n\n        /**\n         * AttributeProto ints.\n         * @member {Array.<number|Long>} ints\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.ints = $util.emptyArray;\n\n        /**\n         * AttributeProto strings.\n         * @member {Array.<Uint8Array>} strings\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.strings = $util.emptyArray;\n\n        /**\n         * AttributeProto tensors.\n         * @member {Array.<onnx.ITensorProto>} tensors\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.tensors = $util.emptyArray;\n\n        /**\n         * AttributeProto graphs.\n         * @member {Array.<onnx.IGraphProto>} graphs\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.graphs = $util.emptyArray;\n\n        /**\n         * AttributeProto sparseTensors.\n         * @member {Array.<onnx.ISparseTensorProto>} sparseTensors\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.sparseTensors = $util.emptyArray;\n\n        /**\n         * AttributeProto typeProtos.\n         * @member {Array.<onnx.ITypeProto>} typeProtos\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.typeProtos = $util.emptyArray;\n\n        /**\n         * Creates a new AttributeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         * @returns {onnx.AttributeProto} AttributeProto instance\n         */\n        AttributeProto.create = function create(properties) {\n            return new AttributeProto(properties);\n        };\n\n        /**\n         * Encodes the specified AttributeProto message. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.f != null && Object.hasOwnProperty.call(message, \"f\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.f);\n            if (message.i != null && Object.hasOwnProperty.call(message, \"i\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.i);\n            if (message.s != null && Object.hasOwnProperty.call(message, \"s\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.s);\n            if (message.t != null && Object.hasOwnProperty.call(message, \"t\"))\n                $root.onnx.TensorProto.encode(message.t, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.g != null && Object.hasOwnProperty.call(message, \"g\"))\n                $root.onnx.GraphProto.encode(message.g, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.floats != null && message.floats.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.floats.length; ++i)\n                    writer.float(message.floats[i]);\n                writer.ldelim();\n            }\n            if (message.ints != null && message.ints.length) {\n                writer.uint32(/* id 8, wireType 2 =*/66).fork();\n                for (var i = 0; i < message.ints.length; ++i)\n                    writer.int64(message.ints[i]);\n                writer.ldelim();\n            }\n            if (message.strings != null && message.strings.length)\n                for (var i = 0; i < message.strings.length; ++i)\n                    writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.strings[i]);\n            if (message.tensors != null && message.tensors.length)\n                for (var i = 0; i < message.tensors.length; ++i)\n                    $root.onnx.TensorProto.encode(message.tensors[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.graphs != null && message.graphs.length)\n                for (var i = 0; i < message.graphs.length; ++i)\n                    $root.onnx.GraphProto.encode(message.graphs[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 13, wireType 2 =*/106).string(message.docString);\n            if (message.tp != null && Object.hasOwnProperty.call(message, \"tp\"))\n                $root.onnx.TypeProto.encode(message.tp, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            if (message.typeProtos != null && message.typeProtos.length)\n                for (var i = 0; i < message.typeProtos.length; ++i)\n                    $root.onnx.TypeProto.encode(message.typeProtos[i], writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();\n            if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\n                writer.uint32(/* id 20, wireType 0 =*/160).int32(message.type);\n            if (message.refAttrName != null && Object.hasOwnProperty.call(message, \"refAttrName\"))\n                writer.uint32(/* id 21, wireType 2 =*/170).string(message.refAttrName);\n            if (message.sparseTensor != null && Object.hasOwnProperty.call(message, \"sparseTensor\"))\n                $root.onnx.SparseTensorProto.encode(message.sparseTensor, writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();\n            if (message.sparseTensors != null && message.sparseTensors.length)\n                for (var i = 0; i < message.sparseTensors.length; ++i)\n                    $root.onnx.SparseTensorProto.encode(message.sparseTensors[i], writer.uint32(/* id 23, wireType 2 =*/186).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified AttributeProto message, length delimited. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.AttributeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 21: {\n                        message.refAttrName = reader.string();\n                        break;\n                    }\n                case 13: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                case 20: {\n                        message.type = reader.int32();\n                        break;\n                    }\n                case 2: {\n                        message.f = reader.float();\n                        break;\n                    }\n                case 3: {\n                        message.i = reader.int64();\n                        break;\n                    }\n                case 4: {\n                        message.s = reader.bytes();\n                        break;\n                    }\n                case 5: {\n                        message.t = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 6: {\n                        message.g = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 22: {\n                        message.sparseTensor = $root.onnx.SparseTensorProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 14: {\n                        message.tp = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 7: {\n                        if (!(message.floats && message.floats.length))\n                            message.floats = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.floats.push(reader.float());\n                        } else\n                            message.floats.push(reader.float());\n                        break;\n                    }\n                case 8: {\n                        if (!(message.ints && message.ints.length))\n                            message.ints = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.ints.push(reader.int64());\n                        } else\n                            message.ints.push(reader.int64());\n                        break;\n                    }\n                case 9: {\n                        if (!(message.strings && message.strings.length))\n                            message.strings = [];\n                        message.strings.push(reader.bytes());\n                        break;\n                    }\n                case 10: {\n                        if (!(message.tensors && message.tensors.length))\n                            message.tensors = [];\n                        message.tensors.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 11: {\n                        if (!(message.graphs && message.graphs.length))\n                            message.graphs = [];\n                        message.graphs.push($root.onnx.GraphProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 23: {\n                        if (!(message.sparseTensors && message.sparseTensors.length))\n                            message.sparseTensors = [];\n                        message.sparseTensors.push($root.onnx.SparseTensorProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 15: {\n                        if (!(message.typeProtos && message.typeProtos.length))\n                            message.typeProtos = [];\n                        message.typeProtos.push($root.onnx.TypeProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an AttributeProto message.\n         * @function verify\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        AttributeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                if (!$util.isString(message.refAttrName))\n                    return \"refAttrName: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                switch (message.type) {\n                default:\n                    return \"type: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 11:\n                case 13:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                case 12:\n                case 14:\n                    break;\n                }\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                if (typeof message.f !== \"number\")\n                    return \"f: number expected\";\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (!$util.isInteger(message.i) && !(message.i && $util.isInteger(message.i.low) && $util.isInteger(message.i.high)))\n                    return \"i: integer|Long expected\";\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                if (!(message.s && typeof message.s.length === \"number\" || $util.isString(message.s)))\n                    return \"s: buffer expected\";\n            if (message.t != null && message.hasOwnProperty(\"t\")) {\n                var error = $root.onnx.TensorProto.verify(message.t);\n                if (error)\n                    return \"t.\" + error;\n            }\n            if (message.g != null && message.hasOwnProperty(\"g\")) {\n                var error = $root.onnx.GraphProto.verify(message.g);\n                if (error)\n                    return \"g.\" + error;\n            }\n            if (message.sparseTensor != null && message.hasOwnProperty(\"sparseTensor\")) {\n                var error = $root.onnx.SparseTensorProto.verify(message.sparseTensor);\n                if (error)\n                    return \"sparseTensor.\" + error;\n            }\n            if (message.tp != null && message.hasOwnProperty(\"tp\")) {\n                var error = $root.onnx.TypeProto.verify(message.tp);\n                if (error)\n                    return \"tp.\" + error;\n            }\n            if (message.floats != null && message.hasOwnProperty(\"floats\")) {\n                if (!Array.isArray(message.floats))\n                    return \"floats: array expected\";\n                for (var i = 0; i < message.floats.length; ++i)\n                    if (typeof message.floats[i] !== \"number\")\n                        return \"floats: number[] expected\";\n            }\n            if (message.ints != null && message.hasOwnProperty(\"ints\")) {\n                if (!Array.isArray(message.ints))\n                    return \"ints: array expected\";\n                for (var i = 0; i < message.ints.length; ++i)\n                    if (!$util.isInteger(message.ints[i]) && !(message.ints[i] && $util.isInteger(message.ints[i].low) && $util.isInteger(message.ints[i].high)))\n                        return \"ints: integer|Long[] expected\";\n            }\n            if (message.strings != null && message.hasOwnProperty(\"strings\")) {\n                if (!Array.isArray(message.strings))\n                    return \"strings: array expected\";\n                for (var i = 0; i < message.strings.length; ++i)\n                    if (!(message.strings[i] && typeof message.strings[i].length === \"number\" || $util.isString(message.strings[i])))\n                        return \"strings: buffer[] expected\";\n            }\n            if (message.tensors != null && message.hasOwnProperty(\"tensors\")) {\n                if (!Array.isArray(message.tensors))\n                    return \"tensors: array expected\";\n                for (var i = 0; i < message.tensors.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.tensors[i]);\n                    if (error)\n                        return \"tensors.\" + error;\n                }\n            }\n            if (message.graphs != null && message.hasOwnProperty(\"graphs\")) {\n                if (!Array.isArray(message.graphs))\n                    return \"graphs: array expected\";\n                for (var i = 0; i < message.graphs.length; ++i) {\n                    var error = $root.onnx.GraphProto.verify(message.graphs[i]);\n                    if (error)\n                        return \"graphs.\" + error;\n                }\n            }\n            if (message.sparseTensors != null && message.hasOwnProperty(\"sparseTensors\")) {\n                if (!Array.isArray(message.sparseTensors))\n                    return \"sparseTensors: array expected\";\n                for (var i = 0; i < message.sparseTensors.length; ++i) {\n                    var error = $root.onnx.SparseTensorProto.verify(message.sparseTensors[i]);\n                    if (error)\n                        return \"sparseTensors.\" + error;\n                }\n            }\n            if (message.typeProtos != null && message.hasOwnProperty(\"typeProtos\")) {\n                if (!Array.isArray(message.typeProtos))\n                    return \"typeProtos: array expected\";\n                for (var i = 0; i < message.typeProtos.length; ++i) {\n                    var error = $root.onnx.TypeProto.verify(message.typeProtos[i]);\n                    if (error)\n                        return \"typeProtos.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an AttributeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.AttributeProto} AttributeProto\n         */\n        AttributeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.AttributeProto)\n                return object;\n            var message = new $root.onnx.AttributeProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.refAttrName != null)\n                message.refAttrName = String(object.refAttrName);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            switch (object.type) {\n            default:\n                if (typeof object.type === \"number\") {\n                    message.type = object.type;\n                    break;\n                }\n                break;\n            case \"UNDEFINED\":\n            case 0:\n                message.type = 0;\n                break;\n            case \"FLOAT\":\n            case 1:\n                message.type = 1;\n                break;\n            case \"INT\":\n            case 2:\n                message.type = 2;\n                break;\n            case \"STRING\":\n            case 3:\n                message.type = 3;\n                break;\n            case \"TENSOR\":\n            case 4:\n                message.type = 4;\n                break;\n            case \"GRAPH\":\n            case 5:\n                message.type = 5;\n                break;\n            case \"SPARSE_TENSOR\":\n            case 11:\n                message.type = 11;\n                break;\n            case \"TYPE_PROTO\":\n            case 13:\n                message.type = 13;\n                break;\n            case \"FLOATS\":\n            case 6:\n                message.type = 6;\n                break;\n            case \"INTS\":\n            case 7:\n                message.type = 7;\n                break;\n            case \"STRINGS\":\n            case 8:\n                message.type = 8;\n                break;\n            case \"TENSORS\":\n            case 9:\n                message.type = 9;\n                break;\n            case \"GRAPHS\":\n            case 10:\n                message.type = 10;\n                break;\n            case \"SPARSE_TENSORS\":\n            case 12:\n                message.type = 12;\n                break;\n            case \"TYPE_PROTOS\":\n            case 14:\n                message.type = 14;\n                break;\n            }\n            if (object.f != null)\n                message.f = Number(object.f);\n            if (object.i != null)\n                if ($util.Long)\n                    (message.i = $util.Long.fromValue(object.i)).unsigned = false;\n                else if (typeof object.i === \"string\")\n                    message.i = parseInt(object.i, 10);\n                else if (typeof object.i === \"number\")\n                    message.i = object.i;\n                else if (typeof object.i === \"object\")\n                    message.i = new $util.LongBits(object.i.low >>> 0, object.i.high >>> 0).toNumber();\n            if (object.s != null)\n                if (typeof object.s === \"string\")\n                    $util.base64.decode(object.s, message.s = $util.newBuffer($util.base64.length(object.s)), 0);\n                else if (object.s.length >= 0)\n                    message.s = object.s;\n            if (object.t != null) {\n                if (typeof object.t !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.t: object expected\");\n                message.t = $root.onnx.TensorProto.fromObject(object.t);\n            }\n            if (object.g != null) {\n                if (typeof object.g !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.g: object expected\");\n                message.g = $root.onnx.GraphProto.fromObject(object.g);\n            }\n            if (object.sparseTensor != null) {\n                if (typeof object.sparseTensor !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.sparseTensor: object expected\");\n                message.sparseTensor = $root.onnx.SparseTensorProto.fromObject(object.sparseTensor);\n            }\n            if (object.tp != null) {\n                if (typeof object.tp !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.tp: object expected\");\n                message.tp = $root.onnx.TypeProto.fromObject(object.tp);\n            }\n            if (object.floats) {\n                if (!Array.isArray(object.floats))\n                    throw TypeError(\".onnx.AttributeProto.floats: array expected\");\n                message.floats = [];\n                for (var i = 0; i < object.floats.length; ++i)\n                    message.floats[i] = Number(object.floats[i]);\n            }\n            if (object.ints) {\n                if (!Array.isArray(object.ints))\n                    throw TypeError(\".onnx.AttributeProto.ints: array expected\");\n                message.ints = [];\n                for (var i = 0; i < object.ints.length; ++i)\n                    if ($util.Long)\n                        (message.ints[i] = $util.Long.fromValue(object.ints[i])).unsigned = false;\n                    else if (typeof object.ints[i] === \"string\")\n                        message.ints[i] = parseInt(object.ints[i], 10);\n                    else if (typeof object.ints[i] === \"number\")\n                        message.ints[i] = object.ints[i];\n                    else if (typeof object.ints[i] === \"object\")\n                        message.ints[i] = new $util.LongBits(object.ints[i].low >>> 0, object.ints[i].high >>> 0).toNumber();\n            }\n            if (object.strings) {\n                if (!Array.isArray(object.strings))\n                    throw TypeError(\".onnx.AttributeProto.strings: array expected\");\n                message.strings = [];\n                for (var i = 0; i < object.strings.length; ++i)\n                    if (typeof object.strings[i] === \"string\")\n                        $util.base64.decode(object.strings[i], message.strings[i] = $util.newBuffer($util.base64.length(object.strings[i])), 0);\n                    else if (object.strings[i].length >= 0)\n                        message.strings[i] = object.strings[i];\n            }\n            if (object.tensors) {\n                if (!Array.isArray(object.tensors))\n                    throw TypeError(\".onnx.AttributeProto.tensors: array expected\");\n                message.tensors = [];\n                for (var i = 0; i < object.tensors.length; ++i) {\n                    if (typeof object.tensors[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.tensors: object expected\");\n                    message.tensors[i] = $root.onnx.TensorProto.fromObject(object.tensors[i]);\n                }\n            }\n            if (object.graphs) {\n                if (!Array.isArray(object.graphs))\n                    throw TypeError(\".onnx.AttributeProto.graphs: array expected\");\n                message.graphs = [];\n                for (var i = 0; i < object.graphs.length; ++i) {\n                    if (typeof object.graphs[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.graphs: object expected\");\n                    message.graphs[i] = $root.onnx.GraphProto.fromObject(object.graphs[i]);\n                }\n            }\n            if (object.sparseTensors) {\n                if (!Array.isArray(object.sparseTensors))\n                    throw TypeError(\".onnx.AttributeProto.sparseTensors: array expected\");\n                message.sparseTensors = [];\n                for (var i = 0; i < object.sparseTensors.length; ++i) {\n                    if (typeof object.sparseTensors[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.sparseTensors: object expected\");\n                    message.sparseTensors[i] = $root.onnx.SparseTensorProto.fromObject(object.sparseTensors[i]);\n                }\n            }\n            if (object.typeProtos) {\n                if (!Array.isArray(object.typeProtos))\n                    throw TypeError(\".onnx.AttributeProto.typeProtos: array expected\");\n                message.typeProtos = [];\n                for (var i = 0; i < object.typeProtos.length; ++i) {\n                    if (typeof object.typeProtos[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.typeProtos: object expected\");\n                    message.typeProtos[i] = $root.onnx.TypeProto.fromObject(object.typeProtos[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an AttributeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.AttributeProto} message AttributeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AttributeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.floats = [];\n                object.ints = [];\n                object.strings = [];\n                object.tensors = [];\n                object.graphs = [];\n                object.typeProtos = [];\n                object.sparseTensors = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.f = 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.i = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.i = options.longs === String ? \"0\" : 0;\n                if (options.bytes === String)\n                    object.s = \"\";\n                else {\n                    object.s = [];\n                    if (options.bytes !== Array)\n                        object.s = $util.newBuffer(object.s);\n                }\n                object.t = null;\n                object.g = null;\n                object.docString = \"\";\n                object.tp = null;\n                object.type = options.enums === String ? \"UNDEFINED\" : 0;\n                object.refAttrName = \"\";\n                object.sparseTensor = null;\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                object.f = options.json && !isFinite(message.f) ? String(message.f) : message.f;\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (typeof message.i === \"number\")\n                    object.i = options.longs === String ? String(message.i) : message.i;\n                else\n                    object.i = options.longs === String ? $util.Long.prototype.toString.call(message.i) : options.longs === Number ? new $util.LongBits(message.i.low >>> 0, message.i.high >>> 0).toNumber() : message.i;\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                object.s = options.bytes === String ? $util.base64.encode(message.s, 0, message.s.length) : options.bytes === Array ? Array.prototype.slice.call(message.s) : message.s;\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                object.t = $root.onnx.TensorProto.toObject(message.t, options);\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                object.g = $root.onnx.GraphProto.toObject(message.g, options);\n            if (message.floats && message.floats.length) {\n                object.floats = [];\n                for (var j = 0; j < message.floats.length; ++j)\n                    object.floats[j] = options.json && !isFinite(message.floats[j]) ? String(message.floats[j]) : message.floats[j];\n            }\n            if (message.ints && message.ints.length) {\n                object.ints = [];\n                for (var j = 0; j < message.ints.length; ++j)\n                    if (typeof message.ints[j] === \"number\")\n                        object.ints[j] = options.longs === String ? String(message.ints[j]) : message.ints[j];\n                    else\n                        object.ints[j] = options.longs === String ? $util.Long.prototype.toString.call(message.ints[j]) : options.longs === Number ? new $util.LongBits(message.ints[j].low >>> 0, message.ints[j].high >>> 0).toNumber() : message.ints[j];\n            }\n            if (message.strings && message.strings.length) {\n                object.strings = [];\n                for (var j = 0; j < message.strings.length; ++j)\n                    object.strings[j] = options.bytes === String ? $util.base64.encode(message.strings[j], 0, message.strings[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.strings[j]) : message.strings[j];\n            }\n            if (message.tensors && message.tensors.length) {\n                object.tensors = [];\n                for (var j = 0; j < message.tensors.length; ++j)\n                    object.tensors[j] = $root.onnx.TensorProto.toObject(message.tensors[j], options);\n            }\n            if (message.graphs && message.graphs.length) {\n                object.graphs = [];\n                for (var j = 0; j < message.graphs.length; ++j)\n                    object.graphs[j] = $root.onnx.GraphProto.toObject(message.graphs[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.tp != null && message.hasOwnProperty(\"tp\"))\n                object.tp = $root.onnx.TypeProto.toObject(message.tp, options);\n            if (message.typeProtos && message.typeProtos.length) {\n                object.typeProtos = [];\n                for (var j = 0; j < message.typeProtos.length; ++j)\n                    object.typeProtos[j] = $root.onnx.TypeProto.toObject(message.typeProtos[j], options);\n            }\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = options.enums === String ? $root.onnx.AttributeProto.AttributeType[message.type] === undefined ? message.type : $root.onnx.AttributeProto.AttributeType[message.type] : message.type;\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                object.refAttrName = message.refAttrName;\n            if (message.sparseTensor != null && message.hasOwnProperty(\"sparseTensor\"))\n                object.sparseTensor = $root.onnx.SparseTensorProto.toObject(message.sparseTensor, options);\n            if (message.sparseTensors && message.sparseTensors.length) {\n                object.sparseTensors = [];\n                for (var j = 0; j < message.sparseTensors.length; ++j)\n                    object.sparseTensors[j] = $root.onnx.SparseTensorProto.toObject(message.sparseTensors[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this AttributeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.AttributeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AttributeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for AttributeProto\n         * @function getTypeUrl\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        AttributeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.AttributeProto\";\n        };\n\n        /**\n         * AttributeType enum.\n         * @name onnx.AttributeProto.AttributeType\n         * @enum {number}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} INT=2 INT value\n         * @property {number} STRING=3 STRING value\n         * @property {number} TENSOR=4 TENSOR value\n         * @property {number} GRAPH=5 GRAPH value\n         * @property {number} SPARSE_TENSOR=11 SPARSE_TENSOR value\n         * @property {number} TYPE_PROTO=13 TYPE_PROTO value\n         * @property {number} FLOATS=6 FLOATS value\n         * @property {number} INTS=7 INTS value\n         * @property {number} STRINGS=8 STRINGS value\n         * @property {number} TENSORS=9 TENSORS value\n         * @property {number} GRAPHS=10 GRAPHS value\n         * @property {number} SPARSE_TENSORS=12 SPARSE_TENSORS value\n         * @property {number} TYPE_PROTOS=14 TYPE_PROTOS value\n         */\n        AttributeProto.AttributeType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"INT\"] = 2;\n            values[valuesById[3] = \"STRING\"] = 3;\n            values[valuesById[4] = \"TENSOR\"] = 4;\n            values[valuesById[5] = \"GRAPH\"] = 5;\n            values[valuesById[11] = \"SPARSE_TENSOR\"] = 11;\n            values[valuesById[13] = \"TYPE_PROTO\"] = 13;\n            values[valuesById[6] = \"FLOATS\"] = 6;\n            values[valuesById[7] = \"INTS\"] = 7;\n            values[valuesById[8] = \"STRINGS\"] = 8;\n            values[valuesById[9] = \"TENSORS\"] = 9;\n            values[valuesById[10] = \"GRAPHS\"] = 10;\n            values[valuesById[12] = \"SPARSE_TENSORS\"] = 12;\n            values[valuesById[14] = \"TYPE_PROTOS\"] = 14;\n            return values;\n        })();\n\n        return AttributeProto;\n    })();\n\n    onnx.ValueInfoProto = (function() {\n\n        /**\n         * Properties of a ValueInfoProto.\n         * @memberof onnx\n         * @interface IValueInfoProto\n         * @property {string|null} [name] ValueInfoProto name\n         * @property {onnx.ITypeProto|null} [type] ValueInfoProto type\n         * @property {string|null} [docString] ValueInfoProto docString\n         */\n\n        /**\n         * Constructs a new ValueInfoProto.\n         * @memberof onnx\n         * @classdesc Represents a ValueInfoProto.\n         * @implements IValueInfoProto\n         * @constructor\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         */\n        function ValueInfoProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ValueInfoProto name.\n         * @member {string} name\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.name = \"\";\n\n        /**\n         * ValueInfoProto type.\n         * @member {onnx.ITypeProto|null|undefined} type\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.type = null;\n\n        /**\n         * ValueInfoProto docString.\n         * @member {string} docString\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new ValueInfoProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         * @returns {onnx.ValueInfoProto} ValueInfoProto instance\n         */\n        ValueInfoProto.create = function create(properties) {\n            return new ValueInfoProto(properties);\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\n                $root.onnx.TypeProto.encode(message.type, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.docString);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message, length delimited. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ValueInfoProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.type = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 3: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ValueInfoProto message.\n         * @function verify\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ValueInfoProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\")) {\n                var error = $root.onnx.TypeProto.verify(message.type);\n                if (error)\n                    return \"type.\" + error;\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ValueInfoProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         */\n        ValueInfoProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ValueInfoProto)\n                return object;\n            var message = new $root.onnx.ValueInfoProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.type != null) {\n                if (typeof object.type !== \"object\")\n                    throw TypeError(\".onnx.ValueInfoProto.type: object expected\");\n                message.type = $root.onnx.TypeProto.fromObject(object.type);\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ValueInfoProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.ValueInfoProto} message ValueInfoProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ValueInfoProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.name = \"\";\n                object.type = null;\n                object.docString = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = $root.onnx.TypeProto.toObject(message.type, options);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            return object;\n        };\n\n        /**\n         * Converts this ValueInfoProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ValueInfoProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ValueInfoProto\n         * @function getTypeUrl\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ValueInfoProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.ValueInfoProto\";\n        };\n\n        return ValueInfoProto;\n    })();\n\n    onnx.NodeProto = (function() {\n\n        /**\n         * Properties of a NodeProto.\n         * @memberof onnx\n         * @interface INodeProto\n         * @property {Array.<string>|null} [input] NodeProto input\n         * @property {Array.<string>|null} [output] NodeProto output\n         * @property {string|null} [name] NodeProto name\n         * @property {string|null} [opType] NodeProto opType\n         * @property {string|null} [domain] NodeProto domain\n         * @property {Array.<onnx.IAttributeProto>|null} [attribute] NodeProto attribute\n         * @property {string|null} [docString] NodeProto docString\n         */\n\n        /**\n         * Constructs a new NodeProto.\n         * @memberof onnx\n         * @classdesc Represents a NodeProto.\n         * @implements INodeProto\n         * @constructor\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         */\n        function NodeProto(properties) {\n            this.input = [];\n            this.output = [];\n            this.attribute = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * NodeProto input.\n         * @member {Array.<string>} input\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.input = $util.emptyArray;\n\n        /**\n         * NodeProto output.\n         * @member {Array.<string>} output\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.output = $util.emptyArray;\n\n        /**\n         * NodeProto name.\n         * @member {string} name\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.name = \"\";\n\n        /**\n         * NodeProto opType.\n         * @member {string} opType\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.opType = \"\";\n\n        /**\n         * NodeProto domain.\n         * @member {string} domain\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.domain = \"\";\n\n        /**\n         * NodeProto attribute.\n         * @member {Array.<onnx.IAttributeProto>} attribute\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.attribute = $util.emptyArray;\n\n        /**\n         * NodeProto docString.\n         * @member {string} docString\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new NodeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         * @returns {onnx.NodeProto} NodeProto instance\n         */\n        NodeProto.create = function create(properties) {\n            return new NodeProto(properties);\n        };\n\n        /**\n         * Encodes the specified NodeProto message. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.input[i]);\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.output[i]);\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);\n            if (message.opType != null && Object.hasOwnProperty.call(message, \"opType\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.opType);\n            if (message.attribute != null && message.attribute.length)\n                for (var i = 0; i < message.attribute.length; ++i)\n                    $root.onnx.AttributeProto.encode(message.attribute[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.domain);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified NodeProto message, length delimited. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.NodeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        if (!(message.input && message.input.length))\n                            message.input = [];\n                        message.input.push(reader.string());\n                        break;\n                    }\n                case 2: {\n                        if (!(message.output && message.output.length))\n                            message.output = [];\n                        message.output.push(reader.string());\n                        break;\n                    }\n                case 3: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 4: {\n                        message.opType = reader.string();\n                        break;\n                    }\n                case 7: {\n                        message.domain = reader.string();\n                        break;\n                    }\n                case 5: {\n                        if (!(message.attribute && message.attribute.length))\n                            message.attribute = [];\n                        message.attribute.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 6: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a NodeProto message.\n         * @function verify\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        NodeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i)\n                    if (!$util.isString(message.input[i]))\n                        return \"input: string[] expected\";\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i)\n                    if (!$util.isString(message.output[i]))\n                        return \"output: string[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                if (!$util.isString(message.opType))\n                    return \"opType: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\n                if (!Array.isArray(message.attribute))\n                    return \"attribute: array expected\";\n                for (var i = 0; i < message.attribute.length; ++i) {\n                    var error = $root.onnx.AttributeProto.verify(message.attribute[i]);\n                    if (error)\n                        return \"attribute.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a NodeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.NodeProto} NodeProto\n         */\n        NodeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.NodeProto)\n                return object;\n            var message = new $root.onnx.NodeProto();\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.NodeProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i)\n                    message.input[i] = String(object.input[i]);\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.NodeProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i)\n                    message.output[i] = String(object.output[i]);\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.opType != null)\n                message.opType = String(object.opType);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.attribute) {\n                if (!Array.isArray(object.attribute))\n                    throw TypeError(\".onnx.NodeProto.attribute: array expected\");\n                message.attribute = [];\n                for (var i = 0; i < object.attribute.length; ++i) {\n                    if (typeof object.attribute[i] !== \"object\")\n                        throw TypeError(\".onnx.NodeProto.attribute: object expected\");\n                    message.attribute[i] = $root.onnx.AttributeProto.fromObject(object.attribute[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a NodeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.NodeProto} message NodeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        NodeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.input = [];\n                object.output = [];\n                object.attribute = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.opType = \"\";\n                object.docString = \"\";\n                object.domain = \"\";\n            }\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = message.input[j];\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = message.output[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                object.opType = message.opType;\n            if (message.attribute && message.attribute.length) {\n                object.attribute = [];\n                for (var j = 0; j < message.attribute.length; ++j)\n                    object.attribute[j] = $root.onnx.AttributeProto.toObject(message.attribute[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            return object;\n        };\n\n        /**\n         * Converts this NodeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.NodeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        NodeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for NodeProto\n         * @function getTypeUrl\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        NodeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.NodeProto\";\n        };\n\n        return NodeProto;\n    })();\n\n    onnx.TrainingInfoProto = (function() {\n\n        /**\n         * Properties of a TrainingInfoProto.\n         * @memberof onnx\n         * @interface ITrainingInfoProto\n         * @property {onnx.IGraphProto|null} [initialization] TrainingInfoProto initialization\n         * @property {onnx.IGraphProto|null} [algorithm] TrainingInfoProto algorithm\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [initializationBinding] TrainingInfoProto initializationBinding\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [updateBinding] TrainingInfoProto updateBinding\n         */\n\n        /**\n         * Constructs a new TrainingInfoProto.\n         * @memberof onnx\n         * @classdesc Represents a TrainingInfoProto.\n         * @implements ITrainingInfoProto\n         * @constructor\n         * @param {onnx.ITrainingInfoProto=} [properties] Properties to set\n         */\n        function TrainingInfoProto(properties) {\n            this.initializationBinding = [];\n            this.updateBinding = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TrainingInfoProto initialization.\n         * @member {onnx.IGraphProto|null|undefined} initialization\n         * @memberof onnx.TrainingInfoProto\n         * @instance\n         */\n        TrainingInfoProto.prototype.initialization = null;\n\n        /**\n         * TrainingInfoProto algorithm.\n         * @member {onnx.IGraphProto|null|undefined} algorithm\n         * @memberof onnx.TrainingInfoProto\n         * @instance\n         */\n        TrainingInfoProto.prototype.algorithm = null;\n\n        /**\n         * TrainingInfoProto initializationBinding.\n         * @member {Array.<onnx.IStringStringEntryProto>} initializationBinding\n         * @memberof onnx.TrainingInfoProto\n         * @instance\n         */\n        TrainingInfoProto.prototype.initializationBinding = $util.emptyArray;\n\n        /**\n         * TrainingInfoProto updateBinding.\n         * @member {Array.<onnx.IStringStringEntryProto>} updateBinding\n         * @memberof onnx.TrainingInfoProto\n         * @instance\n         */\n        TrainingInfoProto.prototype.updateBinding = $util.emptyArray;\n\n        /**\n         * Creates a new TrainingInfoProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {onnx.ITrainingInfoProto=} [properties] Properties to set\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto instance\n         */\n        TrainingInfoProto.create = function create(properties) {\n            return new TrainingInfoProto(properties);\n        };\n\n        /**\n         * Encodes the specified TrainingInfoProto message. Does not implicitly {@link onnx.TrainingInfoProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {onnx.ITrainingInfoProto} message TrainingInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TrainingInfoProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.initialization != null && Object.hasOwnProperty.call(message, \"initialization\"))\n                $root.onnx.GraphProto.encode(message.initialization, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.algorithm != null && Object.hasOwnProperty.call(message, \"algorithm\"))\n                $root.onnx.GraphProto.encode(message.algorithm, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.initializationBinding != null && message.initializationBinding.length)\n                for (var i = 0; i < message.initializationBinding.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.initializationBinding[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.updateBinding != null && message.updateBinding.length)\n                for (var i = 0; i < message.updateBinding.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.updateBinding[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TrainingInfoProto message, length delimited. Does not implicitly {@link onnx.TrainingInfoProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {onnx.ITrainingInfoProto} message TrainingInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TrainingInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TrainingInfoProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TrainingInfoProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TrainingInfoProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.initialization = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 2: {\n                        message.algorithm = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 3: {\n                        if (!(message.initializationBinding && message.initializationBinding.length))\n                            message.initializationBinding = [];\n                        message.initializationBinding.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 4: {\n                        if (!(message.updateBinding && message.updateBinding.length))\n                            message.updateBinding = [];\n                        message.updateBinding.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TrainingInfoProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TrainingInfoProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TrainingInfoProto message.\n         * @function verify\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TrainingInfoProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.initialization != null && message.hasOwnProperty(\"initialization\")) {\n                var error = $root.onnx.GraphProto.verify(message.initialization);\n                if (error)\n                    return \"initialization.\" + error;\n            }\n            if (message.algorithm != null && message.hasOwnProperty(\"algorithm\")) {\n                var error = $root.onnx.GraphProto.verify(message.algorithm);\n                if (error)\n                    return \"algorithm.\" + error;\n            }\n            if (message.initializationBinding != null && message.hasOwnProperty(\"initializationBinding\")) {\n                if (!Array.isArray(message.initializationBinding))\n                    return \"initializationBinding: array expected\";\n                for (var i = 0; i < message.initializationBinding.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.initializationBinding[i]);\n                    if (error)\n                        return \"initializationBinding.\" + error;\n                }\n            }\n            if (message.updateBinding != null && message.hasOwnProperty(\"updateBinding\")) {\n                if (!Array.isArray(message.updateBinding))\n                    return \"updateBinding: array expected\";\n                for (var i = 0; i < message.updateBinding.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.updateBinding[i]);\n                    if (error)\n                        return \"updateBinding.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TrainingInfoProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto\n         */\n        TrainingInfoProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TrainingInfoProto)\n                return object;\n            var message = new $root.onnx.TrainingInfoProto();\n            if (object.initialization != null) {\n                if (typeof object.initialization !== \"object\")\n                    throw TypeError(\".onnx.TrainingInfoProto.initialization: object expected\");\n                message.initialization = $root.onnx.GraphProto.fromObject(object.initialization);\n            }\n            if (object.algorithm != null) {\n                if (typeof object.algorithm !== \"object\")\n                    throw TypeError(\".onnx.TrainingInfoProto.algorithm: object expected\");\n                message.algorithm = $root.onnx.GraphProto.fromObject(object.algorithm);\n            }\n            if (object.initializationBinding) {\n                if (!Array.isArray(object.initializationBinding))\n                    throw TypeError(\".onnx.TrainingInfoProto.initializationBinding: array expected\");\n                message.initializationBinding = [];\n                for (var i = 0; i < object.initializationBinding.length; ++i) {\n                    if (typeof object.initializationBinding[i] !== \"object\")\n                        throw TypeError(\".onnx.TrainingInfoProto.initializationBinding: object expected\");\n                    message.initializationBinding[i] = $root.onnx.StringStringEntryProto.fromObject(object.initializationBinding[i]);\n                }\n            }\n            if (object.updateBinding) {\n                if (!Array.isArray(object.updateBinding))\n                    throw TypeError(\".onnx.TrainingInfoProto.updateBinding: array expected\");\n                message.updateBinding = [];\n                for (var i = 0; i < object.updateBinding.length; ++i) {\n                    if (typeof object.updateBinding[i] !== \"object\")\n                        throw TypeError(\".onnx.TrainingInfoProto.updateBinding: object expected\");\n                    message.updateBinding[i] = $root.onnx.StringStringEntryProto.fromObject(object.updateBinding[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TrainingInfoProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {onnx.TrainingInfoProto} message TrainingInfoProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TrainingInfoProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.initializationBinding = [];\n                object.updateBinding = [];\n            }\n            if (options.defaults) {\n                object.initialization = null;\n                object.algorithm = null;\n            }\n            if (message.initialization != null && message.hasOwnProperty(\"initialization\"))\n                object.initialization = $root.onnx.GraphProto.toObject(message.initialization, options);\n            if (message.algorithm != null && message.hasOwnProperty(\"algorithm\"))\n                object.algorithm = $root.onnx.GraphProto.toObject(message.algorithm, options);\n            if (message.initializationBinding && message.initializationBinding.length) {\n                object.initializationBinding = [];\n                for (var j = 0; j < message.initializationBinding.length; ++j)\n                    object.initializationBinding[j] = $root.onnx.StringStringEntryProto.toObject(message.initializationBinding[j], options);\n            }\n            if (message.updateBinding && message.updateBinding.length) {\n                object.updateBinding = [];\n                for (var j = 0; j < message.updateBinding.length; ++j)\n                    object.updateBinding[j] = $root.onnx.StringStringEntryProto.toObject(message.updateBinding[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TrainingInfoProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TrainingInfoProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TrainingInfoProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TrainingInfoProto\n         * @function getTypeUrl\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TrainingInfoProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.TrainingInfoProto\";\n        };\n\n        return TrainingInfoProto;\n    })();\n\n    onnx.ModelProto = (function() {\n\n        /**\n         * Properties of a ModelProto.\n         * @memberof onnx\n         * @interface IModelProto\n         * @property {number|Long|null} [irVersion] ModelProto irVersion\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] ModelProto opsetImport\n         * @property {string|null} [producerName] ModelProto producerName\n         * @property {string|null} [producerVersion] ModelProto producerVersion\n         * @property {string|null} [domain] ModelProto domain\n         * @property {number|Long|null} [modelVersion] ModelProto modelVersion\n         * @property {string|null} [docString] ModelProto docString\n         * @property {onnx.IGraphProto|null} [graph] ModelProto graph\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [metadataProps] ModelProto metadataProps\n         * @property {Array.<onnx.ITrainingInfoProto>|null} [trainingInfo] ModelProto trainingInfo\n         * @property {Array.<onnx.IFunctionProto>|null} [functions] ModelProto functions\n         */\n\n        /**\n         * Constructs a new ModelProto.\n         * @memberof onnx\n         * @classdesc Represents a ModelProto.\n         * @implements IModelProto\n         * @constructor\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         */\n        function ModelProto(properties) {\n            this.opsetImport = [];\n            this.metadataProps = [];\n            this.trainingInfo = [];\n            this.functions = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ModelProto irVersion.\n         * @member {number|Long} irVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.irVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto opsetImport.\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.opsetImport = $util.emptyArray;\n\n        /**\n         * ModelProto producerName.\n         * @member {string} producerName\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerName = \"\";\n\n        /**\n         * ModelProto producerVersion.\n         * @member {string} producerVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerVersion = \"\";\n\n        /**\n         * ModelProto domain.\n         * @member {string} domain\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.domain = \"\";\n\n        /**\n         * ModelProto modelVersion.\n         * @member {number|Long} modelVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.modelVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto docString.\n         * @member {string} docString\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.docString = \"\";\n\n        /**\n         * ModelProto graph.\n         * @member {onnx.IGraphProto|null|undefined} graph\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.graph = null;\n\n        /**\n         * ModelProto metadataProps.\n         * @member {Array.<onnx.IStringStringEntryProto>} metadataProps\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.metadataProps = $util.emptyArray;\n\n        /**\n         * ModelProto trainingInfo.\n         * @member {Array.<onnx.ITrainingInfoProto>} trainingInfo\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.trainingInfo = $util.emptyArray;\n\n        /**\n         * ModelProto functions.\n         * @member {Array.<onnx.IFunctionProto>} functions\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.functions = $util.emptyArray;\n\n        /**\n         * Creates a new ModelProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         * @returns {onnx.ModelProto} ModelProto instance\n         */\n        ModelProto.create = function create(properties) {\n            return new ModelProto(properties);\n        };\n\n        /**\n         * Encodes the specified ModelProto message. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.irVersion != null && Object.hasOwnProperty.call(message, \"irVersion\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.irVersion);\n            if (message.producerName != null && Object.hasOwnProperty.call(message, \"producerName\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.producerName);\n            if (message.producerVersion != null && Object.hasOwnProperty.call(message, \"producerVersion\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.producerVersion);\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.domain);\n            if (message.modelVersion != null && Object.hasOwnProperty.call(message, \"modelVersion\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.modelVersion);\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.graph != null && Object.hasOwnProperty.call(message, \"graph\"))\n                $root.onnx.GraphProto.encode(message.graph, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.opsetImport != null && message.opsetImport.length)\n                for (var i = 0; i < message.opsetImport.length; ++i)\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.metadataProps != null && message.metadataProps.length)\n                for (var i = 0; i < message.metadataProps.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.metadataProps[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            if (message.trainingInfo != null && message.trainingInfo.length)\n                for (var i = 0; i < message.trainingInfo.length; ++i)\n                    $root.onnx.TrainingInfoProto.encode(message.trainingInfo[i], writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();\n            if (message.functions != null && message.functions.length)\n                for (var i = 0; i < message.functions.length; ++i)\n                    $root.onnx.FunctionProto.encode(message.functions[i], writer.uint32(/* id 25, wireType 2 =*/202).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ModelProto message, length delimited. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ModelProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.irVersion = reader.int64();\n                        break;\n                    }\n                case 8: {\n                        if (!(message.opsetImport && message.opsetImport.length))\n                            message.opsetImport = [];\n                        message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 2: {\n                        message.producerName = reader.string();\n                        break;\n                    }\n                case 3: {\n                        message.producerVersion = reader.string();\n                        break;\n                    }\n                case 4: {\n                        message.domain = reader.string();\n                        break;\n                    }\n                case 5: {\n                        message.modelVersion = reader.int64();\n                        break;\n                    }\n                case 6: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                case 7: {\n                        message.graph = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 14: {\n                        if (!(message.metadataProps && message.metadataProps.length))\n                            message.metadataProps = [];\n                        message.metadataProps.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 20: {\n                        if (!(message.trainingInfo && message.trainingInfo.length))\n                            message.trainingInfo = [];\n                        message.trainingInfo.push($root.onnx.TrainingInfoProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 25: {\n                        if (!(message.functions && message.functions.length))\n                            message.functions = [];\n                        message.functions.push($root.onnx.FunctionProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ModelProto message.\n         * @function verify\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ModelProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (!$util.isInteger(message.irVersion) && !(message.irVersion && $util.isInteger(message.irVersion.low) && $util.isInteger(message.irVersion.high)))\n                    return \"irVersion: integer|Long expected\";\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\n                if (!Array.isArray(message.opsetImport))\n                    return \"opsetImport: array expected\";\n                for (var i = 0; i < message.opsetImport.length; ++i) {\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n                    if (error)\n                        return \"opsetImport.\" + error;\n                }\n            }\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                if (!$util.isString(message.producerName))\n                    return \"producerName: string expected\";\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                if (!$util.isString(message.producerVersion))\n                    return \"producerVersion: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (!$util.isInteger(message.modelVersion) && !(message.modelVersion && $util.isInteger(message.modelVersion.low) && $util.isInteger(message.modelVersion.high)))\n                    return \"modelVersion: integer|Long expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.graph != null && message.hasOwnProperty(\"graph\")) {\n                var error = $root.onnx.GraphProto.verify(message.graph);\n                if (error)\n                    return \"graph.\" + error;\n            }\n            if (message.metadataProps != null && message.hasOwnProperty(\"metadataProps\")) {\n                if (!Array.isArray(message.metadataProps))\n                    return \"metadataProps: array expected\";\n                for (var i = 0; i < message.metadataProps.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.metadataProps[i]);\n                    if (error)\n                        return \"metadataProps.\" + error;\n                }\n            }\n            if (message.trainingInfo != null && message.hasOwnProperty(\"trainingInfo\")) {\n                if (!Array.isArray(message.trainingInfo))\n                    return \"trainingInfo: array expected\";\n                for (var i = 0; i < message.trainingInfo.length; ++i) {\n                    var error = $root.onnx.TrainingInfoProto.verify(message.trainingInfo[i]);\n                    if (error)\n                        return \"trainingInfo.\" + error;\n                }\n            }\n            if (message.functions != null && message.hasOwnProperty(\"functions\")) {\n                if (!Array.isArray(message.functions))\n                    return \"functions: array expected\";\n                for (var i = 0; i < message.functions.length; ++i) {\n                    var error = $root.onnx.FunctionProto.verify(message.functions[i]);\n                    if (error)\n                        return \"functions.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ModelProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ModelProto} ModelProto\n         */\n        ModelProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ModelProto)\n                return object;\n            var message = new $root.onnx.ModelProto();\n            if (object.irVersion != null)\n                if ($util.Long)\n                    (message.irVersion = $util.Long.fromValue(object.irVersion)).unsigned = false;\n                else if (typeof object.irVersion === \"string\")\n                    message.irVersion = parseInt(object.irVersion, 10);\n                else if (typeof object.irVersion === \"number\")\n                    message.irVersion = object.irVersion;\n                else if (typeof object.irVersion === \"object\")\n                    message.irVersion = new $util.LongBits(object.irVersion.low >>> 0, object.irVersion.high >>> 0).toNumber();\n            if (object.opsetImport) {\n                if (!Array.isArray(object.opsetImport))\n                    throw TypeError(\".onnx.ModelProto.opsetImport: array expected\");\n                message.opsetImport = [];\n                for (var i = 0; i < object.opsetImport.length; ++i) {\n                    if (typeof object.opsetImport[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.opsetImport: object expected\");\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n                }\n            }\n            if (object.producerName != null)\n                message.producerName = String(object.producerName);\n            if (object.producerVersion != null)\n                message.producerVersion = String(object.producerVersion);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.modelVersion != null)\n                if ($util.Long)\n                    (message.modelVersion = $util.Long.fromValue(object.modelVersion)).unsigned = false;\n                else if (typeof object.modelVersion === \"string\")\n                    message.modelVersion = parseInt(object.modelVersion, 10);\n                else if (typeof object.modelVersion === \"number\")\n                    message.modelVersion = object.modelVersion;\n                else if (typeof object.modelVersion === \"object\")\n                    message.modelVersion = new $util.LongBits(object.modelVersion.low >>> 0, object.modelVersion.high >>> 0).toNumber();\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.graph != null) {\n                if (typeof object.graph !== \"object\")\n                    throw TypeError(\".onnx.ModelProto.graph: object expected\");\n                message.graph = $root.onnx.GraphProto.fromObject(object.graph);\n            }\n            if (object.metadataProps) {\n                if (!Array.isArray(object.metadataProps))\n                    throw TypeError(\".onnx.ModelProto.metadataProps: array expected\");\n                message.metadataProps = [];\n                for (var i = 0; i < object.metadataProps.length; ++i) {\n                    if (typeof object.metadataProps[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.metadataProps: object expected\");\n                    message.metadataProps[i] = $root.onnx.StringStringEntryProto.fromObject(object.metadataProps[i]);\n                }\n            }\n            if (object.trainingInfo) {\n                if (!Array.isArray(object.trainingInfo))\n                    throw TypeError(\".onnx.ModelProto.trainingInfo: array expected\");\n                message.trainingInfo = [];\n                for (var i = 0; i < object.trainingInfo.length; ++i) {\n                    if (typeof object.trainingInfo[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.trainingInfo: object expected\");\n                    message.trainingInfo[i] = $root.onnx.TrainingInfoProto.fromObject(object.trainingInfo[i]);\n                }\n            }\n            if (object.functions) {\n                if (!Array.isArray(object.functions))\n                    throw TypeError(\".onnx.ModelProto.functions: array expected\");\n                message.functions = [];\n                for (var i = 0; i < object.functions.length; ++i) {\n                    if (typeof object.functions[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.functions: object expected\");\n                    message.functions[i] = $root.onnx.FunctionProto.fromObject(object.functions[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ModelProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.ModelProto} message ModelProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ModelProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.opsetImport = [];\n                object.metadataProps = [];\n                object.trainingInfo = [];\n                object.functions = [];\n            }\n            if (options.defaults) {\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.irVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.irVersion = options.longs === String ? \"0\" : 0;\n                object.producerName = \"\";\n                object.producerVersion = \"\";\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.modelVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.modelVersion = options.longs === String ? \"0\" : 0;\n                object.docString = \"\";\n                object.graph = null;\n            }\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (typeof message.irVersion === \"number\")\n                    object.irVersion = options.longs === String ? String(message.irVersion) : message.irVersion;\n                else\n                    object.irVersion = options.longs === String ? $util.Long.prototype.toString.call(message.irVersion) : options.longs === Number ? new $util.LongBits(message.irVersion.low >>> 0, message.irVersion.high >>> 0).toNumber() : message.irVersion;\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                object.producerName = message.producerName;\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                object.producerVersion = message.producerVersion;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (typeof message.modelVersion === \"number\")\n                    object.modelVersion = options.longs === String ? String(message.modelVersion) : message.modelVersion;\n                else\n                    object.modelVersion = options.longs === String ? $util.Long.prototype.toString.call(message.modelVersion) : options.longs === Number ? new $util.LongBits(message.modelVersion.low >>> 0, message.modelVersion.high >>> 0).toNumber() : message.modelVersion;\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                object.graph = $root.onnx.GraphProto.toObject(message.graph, options);\n            if (message.opsetImport && message.opsetImport.length) {\n                object.opsetImport = [];\n                for (var j = 0; j < message.opsetImport.length; ++j)\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n            }\n            if (message.metadataProps && message.metadataProps.length) {\n                object.metadataProps = [];\n                for (var j = 0; j < message.metadataProps.length; ++j)\n                    object.metadataProps[j] = $root.onnx.StringStringEntryProto.toObject(message.metadataProps[j], options);\n            }\n            if (message.trainingInfo && message.trainingInfo.length) {\n                object.trainingInfo = [];\n                for (var j = 0; j < message.trainingInfo.length; ++j)\n                    object.trainingInfo[j] = $root.onnx.TrainingInfoProto.toObject(message.trainingInfo[j], options);\n            }\n            if (message.functions && message.functions.length) {\n                object.functions = [];\n                for (var j = 0; j < message.functions.length; ++j)\n                    object.functions[j] = $root.onnx.FunctionProto.toObject(message.functions[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ModelProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ModelProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ModelProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ModelProto\n         * @function getTypeUrl\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ModelProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.ModelProto\";\n        };\n\n        return ModelProto;\n    })();\n\n    onnx.StringStringEntryProto = (function() {\n\n        /**\n         * Properties of a StringStringEntryProto.\n         * @memberof onnx\n         * @interface IStringStringEntryProto\n         * @property {string|null} [key] StringStringEntryProto key\n         * @property {string|null} [value] StringStringEntryProto value\n         */\n\n        /**\n         * Constructs a new StringStringEntryProto.\n         * @memberof onnx\n         * @classdesc Represents a StringStringEntryProto.\n         * @implements IStringStringEntryProto\n         * @constructor\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         */\n        function StringStringEntryProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * StringStringEntryProto key.\n         * @member {string} key\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.key = \"\";\n\n        /**\n         * StringStringEntryProto value.\n         * @member {string} value\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.value = \"\";\n\n        /**\n         * Creates a new StringStringEntryProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto instance\n         */\n        StringStringEntryProto.create = function create(properties) {\n            return new StringStringEntryProto(properties);\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && Object.hasOwnProperty.call(message, \"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);\n            if (message.value != null && Object.hasOwnProperty.call(message, \"value\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message, length delimited. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.StringStringEntryProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.key = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.value = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a StringStringEntryProto message.\n         * @function verify\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        StringStringEntryProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!$util.isString(message.key))\n                    return \"key: string expected\";\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                if (!$util.isString(message.value))\n                    return \"value: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a StringStringEntryProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         */\n        StringStringEntryProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.StringStringEntryProto)\n                return object;\n            var message = new $root.onnx.StringStringEntryProto();\n            if (object.key != null)\n                message.key = String(object.key);\n            if (object.value != null)\n                message.value = String(object.value);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a StringStringEntryProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.StringStringEntryProto} message StringStringEntryProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        StringStringEntryProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.key = \"\";\n                object.value = \"\";\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = message.key;\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                object.value = message.value;\n            return object;\n        };\n\n        /**\n         * Converts this StringStringEntryProto to JSON.\n         * @function toJSON\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        StringStringEntryProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for StringStringEntryProto\n         * @function getTypeUrl\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        StringStringEntryProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.StringStringEntryProto\";\n        };\n\n        return StringStringEntryProto;\n    })();\n\n    onnx.TensorAnnotation = (function() {\n\n        /**\n         * Properties of a TensorAnnotation.\n         * @memberof onnx\n         * @interface ITensorAnnotation\n         * @property {string|null} [tensorName] TensorAnnotation tensorName\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [quantParameterTensorNames] TensorAnnotation quantParameterTensorNames\n         */\n\n        /**\n         * Constructs a new TensorAnnotation.\n         * @memberof onnx\n         * @classdesc Represents a TensorAnnotation.\n         * @implements ITensorAnnotation\n         * @constructor\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         */\n        function TensorAnnotation(properties) {\n            this.quantParameterTensorNames = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorAnnotation tensorName.\n         * @member {string} tensorName\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.tensorName = \"\";\n\n        /**\n         * TensorAnnotation quantParameterTensorNames.\n         * @member {Array.<onnx.IStringStringEntryProto>} quantParameterTensorNames\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.quantParameterTensorNames = $util.emptyArray;\n\n        /**\n         * Creates a new TensorAnnotation instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         * @returns {onnx.TensorAnnotation} TensorAnnotation instance\n         */\n        TensorAnnotation.create = function create(properties) {\n            return new TensorAnnotation(properties);\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorName != null && Object.hasOwnProperty.call(message, \"tensorName\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.tensorName);\n            if (message.quantParameterTensorNames != null && message.quantParameterTensorNames.length)\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.quantParameterTensorNames[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message, length delimited. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorAnnotation();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.tensorName = reader.string();\n                        break;\n                    }\n                case 2: {\n                        if (!(message.quantParameterTensorNames && message.quantParameterTensorNames.length))\n                            message.quantParameterTensorNames = [];\n                        message.quantParameterTensorNames.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorAnnotation message.\n         * @function verify\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorAnnotation.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                if (!$util.isString(message.tensorName))\n                    return \"tensorName: string expected\";\n            if (message.quantParameterTensorNames != null && message.hasOwnProperty(\"quantParameterTensorNames\")) {\n                if (!Array.isArray(message.quantParameterTensorNames))\n                    return \"quantParameterTensorNames: array expected\";\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.quantParameterTensorNames[i]);\n                    if (error)\n                        return \"quantParameterTensorNames.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorAnnotation message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         */\n        TensorAnnotation.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorAnnotation)\n                return object;\n            var message = new $root.onnx.TensorAnnotation();\n            if (object.tensorName != null)\n                message.tensorName = String(object.tensorName);\n            if (object.quantParameterTensorNames) {\n                if (!Array.isArray(object.quantParameterTensorNames))\n                    throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: array expected\");\n                message.quantParameterTensorNames = [];\n                for (var i = 0; i < object.quantParameterTensorNames.length; ++i) {\n                    if (typeof object.quantParameterTensorNames[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: object expected\");\n                    message.quantParameterTensorNames[i] = $root.onnx.StringStringEntryProto.fromObject(object.quantParameterTensorNames[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorAnnotation message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.TensorAnnotation} message TensorAnnotation\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorAnnotation.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.quantParameterTensorNames = [];\n            if (options.defaults)\n                object.tensorName = \"\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                object.tensorName = message.tensorName;\n            if (message.quantParameterTensorNames && message.quantParameterTensorNames.length) {\n                object.quantParameterTensorNames = [];\n                for (var j = 0; j < message.quantParameterTensorNames.length; ++j)\n                    object.quantParameterTensorNames[j] = $root.onnx.StringStringEntryProto.toObject(message.quantParameterTensorNames[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorAnnotation to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorAnnotation.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TensorAnnotation\n         * @function getTypeUrl\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TensorAnnotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.TensorAnnotation\";\n        };\n\n        return TensorAnnotation;\n    })();\n\n    onnx.GraphProto = (function() {\n\n        /**\n         * Properties of a GraphProto.\n         * @memberof onnx\n         * @interface IGraphProto\n         * @property {Array.<onnx.INodeProto>|null} [node] GraphProto node\n         * @property {string|null} [name] GraphProto name\n         * @property {Array.<onnx.ITensorProto>|null} [initializer] GraphProto initializer\n         * @property {Array.<onnx.ISparseTensorProto>|null} [sparseInitializer] GraphProto sparseInitializer\n         * @property {string|null} [docString] GraphProto docString\n         * @property {Array.<onnx.IValueInfoProto>|null} [input] GraphProto input\n         * @property {Array.<onnx.IValueInfoProto>|null} [output] GraphProto output\n         * @property {Array.<onnx.IValueInfoProto>|null} [valueInfo] GraphProto valueInfo\n         * @property {Array.<onnx.ITensorAnnotation>|null} [quantizationAnnotation] GraphProto quantizationAnnotation\n         */\n\n        /**\n         * Constructs a new GraphProto.\n         * @memberof onnx\n         * @classdesc Represents a GraphProto.\n         * @implements IGraphProto\n         * @constructor\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         */\n        function GraphProto(properties) {\n            this.node = [];\n            this.initializer = [];\n            this.sparseInitializer = [];\n            this.input = [];\n            this.output = [];\n            this.valueInfo = [];\n            this.quantizationAnnotation = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * GraphProto node.\n         * @member {Array.<onnx.INodeProto>} node\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.node = $util.emptyArray;\n\n        /**\n         * GraphProto name.\n         * @member {string} name\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.name = \"\";\n\n        /**\n         * GraphProto initializer.\n         * @member {Array.<onnx.ITensorProto>} initializer\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.initializer = $util.emptyArray;\n\n        /**\n         * GraphProto sparseInitializer.\n         * @member {Array.<onnx.ISparseTensorProto>} sparseInitializer\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.sparseInitializer = $util.emptyArray;\n\n        /**\n         * GraphProto docString.\n         * @member {string} docString\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.docString = \"\";\n\n        /**\n         * GraphProto input.\n         * @member {Array.<onnx.IValueInfoProto>} input\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.input = $util.emptyArray;\n\n        /**\n         * GraphProto output.\n         * @member {Array.<onnx.IValueInfoProto>} output\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.output = $util.emptyArray;\n\n        /**\n         * GraphProto valueInfo.\n         * @member {Array.<onnx.IValueInfoProto>} valueInfo\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.valueInfo = $util.emptyArray;\n\n        /**\n         * GraphProto quantizationAnnotation.\n         * @member {Array.<onnx.ITensorAnnotation>} quantizationAnnotation\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.quantizationAnnotation = $util.emptyArray;\n\n        /**\n         * Creates a new GraphProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         * @returns {onnx.GraphProto} GraphProto instance\n         */\n        GraphProto.create = function create(properties) {\n            return new GraphProto(properties);\n        };\n\n        /**\n         * Encodes the specified GraphProto message. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.node != null && message.node.length)\n                for (var i = 0; i < message.node.length; ++i)\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n            if (message.initializer != null && message.initializer.length)\n                for (var i = 0; i < message.initializer.length; ++i)\n                    $root.onnx.TensorProto.encode(message.initializer[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.docString);\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.input[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.output[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.valueInfo != null && message.valueInfo.length)\n                for (var i = 0; i < message.valueInfo.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.valueInfo[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.quantizationAnnotation != null && message.quantizationAnnotation.length)\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i)\n                    $root.onnx.TensorAnnotation.encode(message.quantizationAnnotation[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            if (message.sparseInitializer != null && message.sparseInitializer.length)\n                for (var i = 0; i < message.sparseInitializer.length; ++i)\n                    $root.onnx.SparseTensorProto.encode(message.sparseInitializer[i], writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified GraphProto message, length delimited. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.GraphProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        if (!(message.node && message.node.length))\n                            message.node = [];\n                        message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 2: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 5: {\n                        if (!(message.initializer && message.initializer.length))\n                            message.initializer = [];\n                        message.initializer.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 15: {\n                        if (!(message.sparseInitializer && message.sparseInitializer.length))\n                            message.sparseInitializer = [];\n                        message.sparseInitializer.push($root.onnx.SparseTensorProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 10: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                case 11: {\n                        if (!(message.input && message.input.length))\n                            message.input = [];\n                        message.input.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 12: {\n                        if (!(message.output && message.output.length))\n                            message.output = [];\n                        message.output.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 13: {\n                        if (!(message.valueInfo && message.valueInfo.length))\n                            message.valueInfo = [];\n                        message.valueInfo.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 14: {\n                        if (!(message.quantizationAnnotation && message.quantizationAnnotation.length))\n                            message.quantizationAnnotation = [];\n                        message.quantizationAnnotation.push($root.onnx.TensorAnnotation.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a GraphProto message.\n         * @function verify\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        GraphProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\n                if (!Array.isArray(message.node))\n                    return \"node: array expected\";\n                for (var i = 0; i < message.node.length; ++i) {\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\n                    if (error)\n                        return \"node.\" + error;\n                }\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.initializer != null && message.hasOwnProperty(\"initializer\")) {\n                if (!Array.isArray(message.initializer))\n                    return \"initializer: array expected\";\n                for (var i = 0; i < message.initializer.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.initializer[i]);\n                    if (error)\n                        return \"initializer.\" + error;\n                }\n            }\n            if (message.sparseInitializer != null && message.hasOwnProperty(\"sparseInitializer\")) {\n                if (!Array.isArray(message.sparseInitializer))\n                    return \"sparseInitializer: array expected\";\n                for (var i = 0; i < message.sparseInitializer.length; ++i) {\n                    var error = $root.onnx.SparseTensorProto.verify(message.sparseInitializer[i]);\n                    if (error)\n                        return \"sparseInitializer.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.input[i]);\n                    if (error)\n                        return \"input.\" + error;\n                }\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.output[i]);\n                    if (error)\n                        return \"output.\" + error;\n                }\n            }\n            if (message.valueInfo != null && message.hasOwnProperty(\"valueInfo\")) {\n                if (!Array.isArray(message.valueInfo))\n                    return \"valueInfo: array expected\";\n                for (var i = 0; i < message.valueInfo.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.valueInfo[i]);\n                    if (error)\n                        return \"valueInfo.\" + error;\n                }\n            }\n            if (message.quantizationAnnotation != null && message.hasOwnProperty(\"quantizationAnnotation\")) {\n                if (!Array.isArray(message.quantizationAnnotation))\n                    return \"quantizationAnnotation: array expected\";\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i) {\n                    var error = $root.onnx.TensorAnnotation.verify(message.quantizationAnnotation[i]);\n                    if (error)\n                        return \"quantizationAnnotation.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a GraphProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.GraphProto} GraphProto\n         */\n        GraphProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.GraphProto)\n                return object;\n            var message = new $root.onnx.GraphProto();\n            if (object.node) {\n                if (!Array.isArray(object.node))\n                    throw TypeError(\".onnx.GraphProto.node: array expected\");\n                message.node = [];\n                for (var i = 0; i < object.node.length; ++i) {\n                    if (typeof object.node[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.node: object expected\");\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n                }\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.initializer) {\n                if (!Array.isArray(object.initializer))\n                    throw TypeError(\".onnx.GraphProto.initializer: array expected\");\n                message.initializer = [];\n                for (var i = 0; i < object.initializer.length; ++i) {\n                    if (typeof object.initializer[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.initializer: object expected\");\n                    message.initializer[i] = $root.onnx.TensorProto.fromObject(object.initializer[i]);\n                }\n            }\n            if (object.sparseInitializer) {\n                if (!Array.isArray(object.sparseInitializer))\n                    throw TypeError(\".onnx.GraphProto.sparseInitializer: array expected\");\n                message.sparseInitializer = [];\n                for (var i = 0; i < object.sparseInitializer.length; ++i) {\n                    if (typeof object.sparseInitializer[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.sparseInitializer: object expected\");\n                    message.sparseInitializer[i] = $root.onnx.SparseTensorProto.fromObject(object.sparseInitializer[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.GraphProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i) {\n                    if (typeof object.input[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.input: object expected\");\n                    message.input[i] = $root.onnx.ValueInfoProto.fromObject(object.input[i]);\n                }\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.GraphProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i) {\n                    if (typeof object.output[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.output: object expected\");\n                    message.output[i] = $root.onnx.ValueInfoProto.fromObject(object.output[i]);\n                }\n            }\n            if (object.valueInfo) {\n                if (!Array.isArray(object.valueInfo))\n                    throw TypeError(\".onnx.GraphProto.valueInfo: array expected\");\n                message.valueInfo = [];\n                for (var i = 0; i < object.valueInfo.length; ++i) {\n                    if (typeof object.valueInfo[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.valueInfo: object expected\");\n                    message.valueInfo[i] = $root.onnx.ValueInfoProto.fromObject(object.valueInfo[i]);\n                }\n            }\n            if (object.quantizationAnnotation) {\n                if (!Array.isArray(object.quantizationAnnotation))\n                    throw TypeError(\".onnx.GraphProto.quantizationAnnotation: array expected\");\n                message.quantizationAnnotation = [];\n                for (var i = 0; i < object.quantizationAnnotation.length; ++i) {\n                    if (typeof object.quantizationAnnotation[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.quantizationAnnotation: object expected\");\n                    message.quantizationAnnotation[i] = $root.onnx.TensorAnnotation.fromObject(object.quantizationAnnotation[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a GraphProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.GraphProto} message GraphProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        GraphProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.node = [];\n                object.initializer = [];\n                object.input = [];\n                object.output = [];\n                object.valueInfo = [];\n                object.quantizationAnnotation = [];\n                object.sparseInitializer = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.docString = \"\";\n            }\n            if (message.node && message.node.length) {\n                object.node = [];\n                for (var j = 0; j < message.node.length; ++j)\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.initializer && message.initializer.length) {\n                object.initializer = [];\n                for (var j = 0; j < message.initializer.length; ++j)\n                    object.initializer[j] = $root.onnx.TensorProto.toObject(message.initializer[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = $root.onnx.ValueInfoProto.toObject(message.input[j], options);\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = $root.onnx.ValueInfoProto.toObject(message.output[j], options);\n            }\n            if (message.valueInfo && message.valueInfo.length) {\n                object.valueInfo = [];\n                for (var j = 0; j < message.valueInfo.length; ++j)\n                    object.valueInfo[j] = $root.onnx.ValueInfoProto.toObject(message.valueInfo[j], options);\n            }\n            if (message.quantizationAnnotation && message.quantizationAnnotation.length) {\n                object.quantizationAnnotation = [];\n                for (var j = 0; j < message.quantizationAnnotation.length; ++j)\n                    object.quantizationAnnotation[j] = $root.onnx.TensorAnnotation.toObject(message.quantizationAnnotation[j], options);\n            }\n            if (message.sparseInitializer && message.sparseInitializer.length) {\n                object.sparseInitializer = [];\n                for (var j = 0; j < message.sparseInitializer.length; ++j)\n                    object.sparseInitializer[j] = $root.onnx.SparseTensorProto.toObject(message.sparseInitializer[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this GraphProto to JSON.\n         * @function toJSON\n         * @memberof onnx.GraphProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        GraphProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for GraphProto\n         * @function getTypeUrl\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        GraphProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.GraphProto\";\n        };\n\n        return GraphProto;\n    })();\n\n    onnx.TensorProto = (function() {\n\n        /**\n         * Properties of a TensorProto.\n         * @memberof onnx\n         * @interface ITensorProto\n         * @property {Array.<number|Long>|null} [dims] TensorProto dims\n         * @property {number|null} [dataType] TensorProto dataType\n         * @property {onnx.TensorProto.ISegment|null} [segment] TensorProto segment\n         * @property {Array.<number>|null} [floatData] TensorProto floatData\n         * @property {Array.<number>|null} [int32Data] TensorProto int32Data\n         * @property {Array.<Uint8Array>|null} [stringData] TensorProto stringData\n         * @property {Array.<number|Long>|null} [int64Data] TensorProto int64Data\n         * @property {string|null} [name] TensorProto name\n         * @property {string|null} [docString] TensorProto docString\n         * @property {Uint8Array|null} [rawData] TensorProto rawData\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [externalData] TensorProto externalData\n         * @property {onnx.TensorProto.DataLocation|null} [dataLocation] TensorProto dataLocation\n         * @property {Array.<number>|null} [doubleData] TensorProto doubleData\n         * @property {Array.<number|Long>|null} [uint64Data] TensorProto uint64Data\n         */\n\n        /**\n         * Constructs a new TensorProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorProto.\n         * @implements ITensorProto\n         * @constructor\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         */\n        function TensorProto(properties) {\n            this.dims = [];\n            this.floatData = [];\n            this.int32Data = [];\n            this.stringData = [];\n            this.int64Data = [];\n            this.externalData = [];\n            this.doubleData = [];\n            this.uint64Data = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorProto dims.\n         * @member {Array.<number|Long>} dims\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dims = $util.emptyArray;\n\n        /**\n         * TensorProto dataType.\n         * @member {number} dataType\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataType = 0;\n\n        /**\n         * TensorProto segment.\n         * @member {onnx.TensorProto.ISegment|null|undefined} segment\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.segment = null;\n\n        /**\n         * TensorProto floatData.\n         * @member {Array.<number>} floatData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.floatData = $util.emptyArray;\n\n        /**\n         * TensorProto int32Data.\n         * @member {Array.<number>} int32Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int32Data = $util.emptyArray;\n\n        /**\n         * TensorProto stringData.\n         * @member {Array.<Uint8Array>} stringData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.stringData = $util.emptyArray;\n\n        /**\n         * TensorProto int64Data.\n         * @member {Array.<number|Long>} int64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int64Data = $util.emptyArray;\n\n        /**\n         * TensorProto name.\n         * @member {string} name\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.name = \"\";\n\n        /**\n         * TensorProto docString.\n         * @member {string} docString\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.docString = \"\";\n\n        /**\n         * TensorProto rawData.\n         * @member {Uint8Array} rawData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.rawData = $util.newBuffer([]);\n\n        /**\n         * TensorProto externalData.\n         * @member {Array.<onnx.IStringStringEntryProto>} externalData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.externalData = $util.emptyArray;\n\n        /**\n         * TensorProto dataLocation.\n         * @member {onnx.TensorProto.DataLocation} dataLocation\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataLocation = 0;\n\n        /**\n         * TensorProto doubleData.\n         * @member {Array.<number>} doubleData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.doubleData = $util.emptyArray;\n\n        /**\n         * TensorProto uint64Data.\n         * @member {Array.<number|Long>} uint64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.uint64Data = $util.emptyArray;\n\n        /**\n         * Creates a new TensorProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         * @returns {onnx.TensorProto} TensorProto instance\n         */\n        TensorProto.create = function create(properties) {\n            return new TensorProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorProto message. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dims != null && message.dims.length) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork();\n                for (var i = 0; i < message.dims.length; ++i)\n                    writer.int64(message.dims[i]);\n                writer.ldelim();\n            }\n            if (message.dataType != null && Object.hasOwnProperty.call(message, \"dataType\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.dataType);\n            if (message.segment != null && Object.hasOwnProperty.call(message, \"segment\"))\n                $root.onnx.TensorProto.Segment.encode(message.segment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.floatData != null && message.floatData.length) {\n                writer.uint32(/* id 4, wireType 2 =*/34).fork();\n                for (var i = 0; i < message.floatData.length; ++i)\n                    writer.float(message.floatData[i]);\n                writer.ldelim();\n            }\n            if (message.int32Data != null && message.int32Data.length) {\n                writer.uint32(/* id 5, wireType 2 =*/42).fork();\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    writer.int32(message.int32Data[i]);\n                writer.ldelim();\n            }\n            if (message.stringData != null && message.stringData.length)\n                for (var i = 0; i < message.stringData.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.stringData[i]);\n            if (message.int64Data != null && message.int64Data.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    writer.int64(message.int64Data[i]);\n                writer.ldelim();\n            }\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.name);\n            if (message.rawData != null && Object.hasOwnProperty.call(message, \"rawData\"))\n                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.rawData);\n            if (message.doubleData != null && message.doubleData.length) {\n                writer.uint32(/* id 10, wireType 2 =*/82).fork();\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    writer.double(message.doubleData[i]);\n                writer.ldelim();\n            }\n            if (message.uint64Data != null && message.uint64Data.length) {\n                writer.uint32(/* id 11, wireType 2 =*/90).fork();\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    writer.uint64(message.uint64Data[i]);\n                writer.ldelim();\n            }\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 12, wireType 2 =*/98).string(message.docString);\n            if (message.externalData != null && message.externalData.length)\n                for (var i = 0; i < message.externalData.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.externalData[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.dataLocation != null && Object.hasOwnProperty.call(message, \"dataLocation\"))\n                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.dataLocation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorProto message, length delimited. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        if (!(message.dims && message.dims.length))\n                            message.dims = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.dims.push(reader.int64());\n                        } else\n                            message.dims.push(reader.int64());\n                        break;\n                    }\n                case 2: {\n                        message.dataType = reader.int32();\n                        break;\n                    }\n                case 3: {\n                        message.segment = $root.onnx.TensorProto.Segment.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 4: {\n                        if (!(message.floatData && message.floatData.length))\n                            message.floatData = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.floatData.push(reader.float());\n                        } else\n                            message.floatData.push(reader.float());\n                        break;\n                    }\n                case 5: {\n                        if (!(message.int32Data && message.int32Data.length))\n                            message.int32Data = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.int32Data.push(reader.int32());\n                        } else\n                            message.int32Data.push(reader.int32());\n                        break;\n                    }\n                case 6: {\n                        if (!(message.stringData && message.stringData.length))\n                            message.stringData = [];\n                        message.stringData.push(reader.bytes());\n                        break;\n                    }\n                case 7: {\n                        if (!(message.int64Data && message.int64Data.length))\n                            message.int64Data = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.int64Data.push(reader.int64());\n                        } else\n                            message.int64Data.push(reader.int64());\n                        break;\n                    }\n                case 8: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 12: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                case 9: {\n                        message.rawData = reader.bytes();\n                        break;\n                    }\n                case 13: {\n                        if (!(message.externalData && message.externalData.length))\n                            message.externalData = [];\n                        message.externalData.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 14: {\n                        message.dataLocation = reader.int32();\n                        break;\n                    }\n                case 10: {\n                        if (!(message.doubleData && message.doubleData.length))\n                            message.doubleData = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.doubleData.push(reader.double());\n                        } else\n                            message.doubleData.push(reader.double());\n                        break;\n                    }\n                case 11: {\n                        if (!(message.uint64Data && message.uint64Data.length))\n                            message.uint64Data = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.uint64Data.push(reader.uint64());\n                        } else\n                            message.uint64Data.push(reader.uint64());\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorProto message.\n         * @function verify\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                if (!Array.isArray(message.dims))\n                    return \"dims: array expected\";\n                for (var i = 0; i < message.dims.length; ++i)\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\n                        return \"dims: integer|Long[] expected\";\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                if (!$util.isInteger(message.dataType))\n                    return \"dataType: integer expected\";\n            if (message.segment != null && message.hasOwnProperty(\"segment\")) {\n                var error = $root.onnx.TensorProto.Segment.verify(message.segment);\n                if (error)\n                    return \"segment.\" + error;\n            }\n            if (message.floatData != null && message.hasOwnProperty(\"floatData\")) {\n                if (!Array.isArray(message.floatData))\n                    return \"floatData: array expected\";\n                for (var i = 0; i < message.floatData.length; ++i)\n                    if (typeof message.floatData[i] !== \"number\")\n                        return \"floatData: number[] expected\";\n            }\n            if (message.int32Data != null && message.hasOwnProperty(\"int32Data\")) {\n                if (!Array.isArray(message.int32Data))\n                    return \"int32Data: array expected\";\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    if (!$util.isInteger(message.int32Data[i]))\n                        return \"int32Data: integer[] expected\";\n            }\n            if (message.stringData != null && message.hasOwnProperty(\"stringData\")) {\n                if (!Array.isArray(message.stringData))\n                    return \"stringData: array expected\";\n                for (var i = 0; i < message.stringData.length; ++i)\n                    if (!(message.stringData[i] && typeof message.stringData[i].length === \"number\" || $util.isString(message.stringData[i])))\n                        return \"stringData: buffer[] expected\";\n            }\n            if (message.int64Data != null && message.hasOwnProperty(\"int64Data\")) {\n                if (!Array.isArray(message.int64Data))\n                    return \"int64Data: array expected\";\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    if (!$util.isInteger(message.int64Data[i]) && !(message.int64Data[i] && $util.isInteger(message.int64Data[i].low) && $util.isInteger(message.int64Data[i].high)))\n                        return \"int64Data: integer|Long[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                if (!(message.rawData && typeof message.rawData.length === \"number\" || $util.isString(message.rawData)))\n                    return \"rawData: buffer expected\";\n            if (message.externalData != null && message.hasOwnProperty(\"externalData\")) {\n                if (!Array.isArray(message.externalData))\n                    return \"externalData: array expected\";\n                for (var i = 0; i < message.externalData.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.externalData[i]);\n                    if (error)\n                        return \"externalData.\" + error;\n                }\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                switch (message.dataLocation) {\n                default:\n                    return \"dataLocation: enum value expected\";\n                case 0:\n                case 1:\n                    break;\n                }\n            if (message.doubleData != null && message.hasOwnProperty(\"doubleData\")) {\n                if (!Array.isArray(message.doubleData))\n                    return \"doubleData: array expected\";\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    if (typeof message.doubleData[i] !== \"number\")\n                        return \"doubleData: number[] expected\";\n            }\n            if (message.uint64Data != null && message.hasOwnProperty(\"uint64Data\")) {\n                if (!Array.isArray(message.uint64Data))\n                    return \"uint64Data: array expected\";\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    if (!$util.isInteger(message.uint64Data[i]) && !(message.uint64Data[i] && $util.isInteger(message.uint64Data[i].low) && $util.isInteger(message.uint64Data[i].high)))\n                        return \"uint64Data: integer|Long[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorProto} TensorProto\n         */\n        TensorProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorProto)\n                return object;\n            var message = new $root.onnx.TensorProto();\n            if (object.dims) {\n                if (!Array.isArray(object.dims))\n                    throw TypeError(\".onnx.TensorProto.dims: array expected\");\n                message.dims = [];\n                for (var i = 0; i < object.dims.length; ++i)\n                    if ($util.Long)\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n                    else if (typeof object.dims[i] === \"string\")\n                        message.dims[i] = parseInt(object.dims[i], 10);\n                    else if (typeof object.dims[i] === \"number\")\n                        message.dims[i] = object.dims[i];\n                    else if (typeof object.dims[i] === \"object\")\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n            }\n            if (object.dataType != null)\n                message.dataType = object.dataType | 0;\n            if (object.segment != null) {\n                if (typeof object.segment !== \"object\")\n                    throw TypeError(\".onnx.TensorProto.segment: object expected\");\n                message.segment = $root.onnx.TensorProto.Segment.fromObject(object.segment);\n            }\n            if (object.floatData) {\n                if (!Array.isArray(object.floatData))\n                    throw TypeError(\".onnx.TensorProto.floatData: array expected\");\n                message.floatData = [];\n                for (var i = 0; i < object.floatData.length; ++i)\n                    message.floatData[i] = Number(object.floatData[i]);\n            }\n            if (object.int32Data) {\n                if (!Array.isArray(object.int32Data))\n                    throw TypeError(\".onnx.TensorProto.int32Data: array expected\");\n                message.int32Data = [];\n                for (var i = 0; i < object.int32Data.length; ++i)\n                    message.int32Data[i] = object.int32Data[i] | 0;\n            }\n            if (object.stringData) {\n                if (!Array.isArray(object.stringData))\n                    throw TypeError(\".onnx.TensorProto.stringData: array expected\");\n                message.stringData = [];\n                for (var i = 0; i < object.stringData.length; ++i)\n                    if (typeof object.stringData[i] === \"string\")\n                        $util.base64.decode(object.stringData[i], message.stringData[i] = $util.newBuffer($util.base64.length(object.stringData[i])), 0);\n                    else if (object.stringData[i].length >= 0)\n                        message.stringData[i] = object.stringData[i];\n            }\n            if (object.int64Data) {\n                if (!Array.isArray(object.int64Data))\n                    throw TypeError(\".onnx.TensorProto.int64Data: array expected\");\n                message.int64Data = [];\n                for (var i = 0; i < object.int64Data.length; ++i)\n                    if ($util.Long)\n                        (message.int64Data[i] = $util.Long.fromValue(object.int64Data[i])).unsigned = false;\n                    else if (typeof object.int64Data[i] === \"string\")\n                        message.int64Data[i] = parseInt(object.int64Data[i], 10);\n                    else if (typeof object.int64Data[i] === \"number\")\n                        message.int64Data[i] = object.int64Data[i];\n                    else if (typeof object.int64Data[i] === \"object\")\n                        message.int64Data[i] = new $util.LongBits(object.int64Data[i].low >>> 0, object.int64Data[i].high >>> 0).toNumber();\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.rawData != null)\n                if (typeof object.rawData === \"string\")\n                    $util.base64.decode(object.rawData, message.rawData = $util.newBuffer($util.base64.length(object.rawData)), 0);\n                else if (object.rawData.length >= 0)\n                    message.rawData = object.rawData;\n            if (object.externalData) {\n                if (!Array.isArray(object.externalData))\n                    throw TypeError(\".onnx.TensorProto.externalData: array expected\");\n                message.externalData = [];\n                for (var i = 0; i < object.externalData.length; ++i) {\n                    if (typeof object.externalData[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorProto.externalData: object expected\");\n                    message.externalData[i] = $root.onnx.StringStringEntryProto.fromObject(object.externalData[i]);\n                }\n            }\n            switch (object.dataLocation) {\n            default:\n                if (typeof object.dataLocation === \"number\") {\n                    message.dataLocation = object.dataLocation;\n                    break;\n                }\n                break;\n            case \"DEFAULT\":\n            case 0:\n                message.dataLocation = 0;\n                break;\n            case \"EXTERNAL\":\n            case 1:\n                message.dataLocation = 1;\n                break;\n            }\n            if (object.doubleData) {\n                if (!Array.isArray(object.doubleData))\n                    throw TypeError(\".onnx.TensorProto.doubleData: array expected\");\n                message.doubleData = [];\n                for (var i = 0; i < object.doubleData.length; ++i)\n                    message.doubleData[i] = Number(object.doubleData[i]);\n            }\n            if (object.uint64Data) {\n                if (!Array.isArray(object.uint64Data))\n                    throw TypeError(\".onnx.TensorProto.uint64Data: array expected\");\n                message.uint64Data = [];\n                for (var i = 0; i < object.uint64Data.length; ++i)\n                    if ($util.Long)\n                        (message.uint64Data[i] = $util.Long.fromValue(object.uint64Data[i])).unsigned = true;\n                    else if (typeof object.uint64Data[i] === \"string\")\n                        message.uint64Data[i] = parseInt(object.uint64Data[i], 10);\n                    else if (typeof object.uint64Data[i] === \"number\")\n                        message.uint64Data[i] = object.uint64Data[i];\n                    else if (typeof object.uint64Data[i] === \"object\")\n                        message.uint64Data[i] = new $util.LongBits(object.uint64Data[i].low >>> 0, object.uint64Data[i].high >>> 0).toNumber(true);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.TensorProto} message TensorProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.dims = [];\n                object.floatData = [];\n                object.int32Data = [];\n                object.stringData = [];\n                object.int64Data = [];\n                object.doubleData = [];\n                object.uint64Data = [];\n                object.externalData = [];\n            }\n            if (options.defaults) {\n                object.dataType = 0;\n                object.segment = null;\n                object.name = \"\";\n                if (options.bytes === String)\n                    object.rawData = \"\";\n                else {\n                    object.rawData = [];\n                    if (options.bytes !== Array)\n                        object.rawData = $util.newBuffer(object.rawData);\n                }\n                object.docString = \"\";\n                object.dataLocation = options.enums === String ? \"DEFAULT\" : 0;\n            }\n            if (message.dims && message.dims.length) {\n                object.dims = [];\n                for (var j = 0; j < message.dims.length; ++j)\n                    if (typeof message.dims[j] === \"number\")\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n                    else\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                object.dataType = message.dataType;\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                object.segment = $root.onnx.TensorProto.Segment.toObject(message.segment, options);\n            if (message.floatData && message.floatData.length) {\n                object.floatData = [];\n                for (var j = 0; j < message.floatData.length; ++j)\n                    object.floatData[j] = options.json && !isFinite(message.floatData[j]) ? String(message.floatData[j]) : message.floatData[j];\n            }\n            if (message.int32Data && message.int32Data.length) {\n                object.int32Data = [];\n                for (var j = 0; j < message.int32Data.length; ++j)\n                    object.int32Data[j] = message.int32Data[j];\n            }\n            if (message.stringData && message.stringData.length) {\n                object.stringData = [];\n                for (var j = 0; j < message.stringData.length; ++j)\n                    object.stringData[j] = options.bytes === String ? $util.base64.encode(message.stringData[j], 0, message.stringData[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.stringData[j]) : message.stringData[j];\n            }\n            if (message.int64Data && message.int64Data.length) {\n                object.int64Data = [];\n                for (var j = 0; j < message.int64Data.length; ++j)\n                    if (typeof message.int64Data[j] === \"number\")\n                        object.int64Data[j] = options.longs === String ? String(message.int64Data[j]) : message.int64Data[j];\n                    else\n                        object.int64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.int64Data[j]) : options.longs === Number ? new $util.LongBits(message.int64Data[j].low >>> 0, message.int64Data[j].high >>> 0).toNumber() : message.int64Data[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                object.rawData = options.bytes === String ? $util.base64.encode(message.rawData, 0, message.rawData.length) : options.bytes === Array ? Array.prototype.slice.call(message.rawData) : message.rawData;\n            if (message.doubleData && message.doubleData.length) {\n                object.doubleData = [];\n                for (var j = 0; j < message.doubleData.length; ++j)\n                    object.doubleData[j] = options.json && !isFinite(message.doubleData[j]) ? String(message.doubleData[j]) : message.doubleData[j];\n            }\n            if (message.uint64Data && message.uint64Data.length) {\n                object.uint64Data = [];\n                for (var j = 0; j < message.uint64Data.length; ++j)\n                    if (typeof message.uint64Data[j] === \"number\")\n                        object.uint64Data[j] = options.longs === String ? String(message.uint64Data[j]) : message.uint64Data[j];\n                    else\n                        object.uint64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.uint64Data[j]) : options.longs === Number ? new $util.LongBits(message.uint64Data[j].low >>> 0, message.uint64Data[j].high >>> 0).toNumber(true) : message.uint64Data[j];\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.externalData && message.externalData.length) {\n                object.externalData = [];\n                for (var j = 0; j < message.externalData.length; ++j)\n                    object.externalData[j] = $root.onnx.StringStringEntryProto.toObject(message.externalData[j], options);\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                object.dataLocation = options.enums === String ? $root.onnx.TensorProto.DataLocation[message.dataLocation] === undefined ? message.dataLocation : $root.onnx.TensorProto.DataLocation[message.dataLocation] : message.dataLocation;\n            return object;\n        };\n\n        /**\n         * Converts this TensorProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TensorProto\n         * @function getTypeUrl\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TensorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.TensorProto\";\n        };\n\n        /**\n         * DataType enum.\n         * @name onnx.TensorProto.DataType\n         * @enum {number}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} UINT8=2 UINT8 value\n         * @property {number} INT8=3 INT8 value\n         * @property {number} UINT16=4 UINT16 value\n         * @property {number} INT16=5 INT16 value\n         * @property {number} INT32=6 INT32 value\n         * @property {number} INT64=7 INT64 value\n         * @property {number} STRING=8 STRING value\n         * @property {number} BOOL=9 BOOL value\n         * @property {number} FLOAT16=10 FLOAT16 value\n         * @property {number} DOUBLE=11 DOUBLE value\n         * @property {number} UINT32=12 UINT32 value\n         * @property {number} UINT64=13 UINT64 value\n         * @property {number} COMPLEX64=14 COMPLEX64 value\n         * @property {number} COMPLEX128=15 COMPLEX128 value\n         * @property {number} BFLOAT16=16 BFLOAT16 value\n         * @property {number} FLOAT8E4M3FN=17 FLOAT8E4M3FN value\n         * @property {number} FLOAT8E4M3FNUZ=18 FLOAT8E4M3FNUZ value\n         * @property {number} FLOAT8E5M2=19 FLOAT8E5M2 value\n         * @property {number} FLOAT8E5M2FNUZ=20 FLOAT8E5M2FNUZ value\n         */\n        TensorProto.DataType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"UINT8\"] = 2;\n            values[valuesById[3] = \"INT8\"] = 3;\n            values[valuesById[4] = \"UINT16\"] = 4;\n            values[valuesById[5] = \"INT16\"] = 5;\n            values[valuesById[6] = \"INT32\"] = 6;\n            values[valuesById[7] = \"INT64\"] = 7;\n            values[valuesById[8] = \"STRING\"] = 8;\n            values[valuesById[9] = \"BOOL\"] = 9;\n            values[valuesById[10] = \"FLOAT16\"] = 10;\n            values[valuesById[11] = \"DOUBLE\"] = 11;\n            values[valuesById[12] = \"UINT32\"] = 12;\n            values[valuesById[13] = \"UINT64\"] = 13;\n            values[valuesById[14] = \"COMPLEX64\"] = 14;\n            values[valuesById[15] = \"COMPLEX128\"] = 15;\n            values[valuesById[16] = \"BFLOAT16\"] = 16;\n            values[valuesById[17] = \"FLOAT8E4M3FN\"] = 17;\n            values[valuesById[18] = \"FLOAT8E4M3FNUZ\"] = 18;\n            values[valuesById[19] = \"FLOAT8E5M2\"] = 19;\n            values[valuesById[20] = \"FLOAT8E5M2FNUZ\"] = 20;\n            return values;\n        })();\n\n        TensorProto.Segment = (function() {\n\n            /**\n             * Properties of a Segment.\n             * @memberof onnx.TensorProto\n             * @interface ISegment\n             * @property {number|Long|null} [begin] Segment begin\n             * @property {number|Long|null} [end] Segment end\n             */\n\n            /**\n             * Constructs a new Segment.\n             * @memberof onnx.TensorProto\n             * @classdesc Represents a Segment.\n             * @implements ISegment\n             * @constructor\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             */\n            function Segment(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Segment begin.\n             * @member {number|Long} begin\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.begin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Segment end.\n             * @member {number|Long} end\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.end = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Creates a new Segment instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             * @returns {onnx.TensorProto.Segment} Segment instance\n             */\n            Segment.create = function create(properties) {\n                return new Segment(properties);\n            };\n\n            /**\n             * Encodes the specified Segment message. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.begin != null && Object.hasOwnProperty.call(message, \"begin\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.begin);\n                if (message.end != null && Object.hasOwnProperty.call(message, \"end\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.end);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Segment message, length delimited. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto.Segment();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.begin = reader.int64();\n                            break;\n                        }\n                    case 2: {\n                            message.end = reader.int64();\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Segment message.\n             * @function verify\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Segment.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (!$util.isInteger(message.begin) && !(message.begin && $util.isInteger(message.begin.low) && $util.isInteger(message.begin.high)))\n                        return \"begin: integer|Long expected\";\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (!$util.isInteger(message.end) && !(message.end && $util.isInteger(message.end.low) && $util.isInteger(message.end.high)))\n                        return \"end: integer|Long expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Segment message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorProto.Segment} Segment\n             */\n            Segment.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorProto.Segment)\n                    return object;\n                var message = new $root.onnx.TensorProto.Segment();\n                if (object.begin != null)\n                    if ($util.Long)\n                        (message.begin = $util.Long.fromValue(object.begin)).unsigned = false;\n                    else if (typeof object.begin === \"string\")\n                        message.begin = parseInt(object.begin, 10);\n                    else if (typeof object.begin === \"number\")\n                        message.begin = object.begin;\n                    else if (typeof object.begin === \"object\")\n                        message.begin = new $util.LongBits(object.begin.low >>> 0, object.begin.high >>> 0).toNumber();\n                if (object.end != null)\n                    if ($util.Long)\n                        (message.end = $util.Long.fromValue(object.end)).unsigned = false;\n                    else if (typeof object.end === \"string\")\n                        message.end = parseInt(object.end, 10);\n                    else if (typeof object.end === \"number\")\n                        message.end = object.end;\n                    else if (typeof object.end === \"object\")\n                        message.end = new $util.LongBits(object.end.low >>> 0, object.end.high >>> 0).toNumber();\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Segment message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.Segment} message Segment\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Segment.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.begin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.begin = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.end = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.end = options.longs === String ? \"0\" : 0;\n                }\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (typeof message.begin === \"number\")\n                        object.begin = options.longs === String ? String(message.begin) : message.begin;\n                    else\n                        object.begin = options.longs === String ? $util.Long.prototype.toString.call(message.begin) : options.longs === Number ? new $util.LongBits(message.begin.low >>> 0, message.begin.high >>> 0).toNumber() : message.begin;\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (typeof message.end === \"number\")\n                        object.end = options.longs === String ? String(message.end) : message.end;\n                    else\n                        object.end = options.longs === String ? $util.Long.prototype.toString.call(message.end) : options.longs === Number ? new $util.LongBits(message.end.low >>> 0, message.end.high >>> 0).toNumber() : message.end;\n                return object;\n            };\n\n            /**\n             * Converts this Segment to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Segment.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Segment\n             * @function getTypeUrl\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Segment.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TensorProto.Segment\";\n            };\n\n            return Segment;\n        })();\n\n        /**\n         * DataLocation enum.\n         * @name onnx.TensorProto.DataLocation\n         * @enum {number}\n         * @property {number} DEFAULT=0 DEFAULT value\n         * @property {number} EXTERNAL=1 EXTERNAL value\n         */\n        TensorProto.DataLocation = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"DEFAULT\"] = 0;\n            values[valuesById[1] = \"EXTERNAL\"] = 1;\n            return values;\n        })();\n\n        return TensorProto;\n    })();\n\n    onnx.SparseTensorProto = (function() {\n\n        /**\n         * Properties of a SparseTensorProto.\n         * @memberof onnx\n         * @interface ISparseTensorProto\n         * @property {onnx.ITensorProto|null} [values] SparseTensorProto values\n         * @property {onnx.ITensorProto|null} [indices] SparseTensorProto indices\n         * @property {Array.<number|Long>|null} [dims] SparseTensorProto dims\n         */\n\n        /**\n         * Constructs a new SparseTensorProto.\n         * @memberof onnx\n         * @classdesc Represents a SparseTensorProto.\n         * @implements ISparseTensorProto\n         * @constructor\n         * @param {onnx.ISparseTensorProto=} [properties] Properties to set\n         */\n        function SparseTensorProto(properties) {\n            this.dims = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * SparseTensorProto values.\n         * @member {onnx.ITensorProto|null|undefined} values\n         * @memberof onnx.SparseTensorProto\n         * @instance\n         */\n        SparseTensorProto.prototype.values = null;\n\n        /**\n         * SparseTensorProto indices.\n         * @member {onnx.ITensorProto|null|undefined} indices\n         * @memberof onnx.SparseTensorProto\n         * @instance\n         */\n        SparseTensorProto.prototype.indices = null;\n\n        /**\n         * SparseTensorProto dims.\n         * @member {Array.<number|Long>} dims\n         * @memberof onnx.SparseTensorProto\n         * @instance\n         */\n        SparseTensorProto.prototype.dims = $util.emptyArray;\n\n        /**\n         * Creates a new SparseTensorProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {onnx.ISparseTensorProto=} [properties] Properties to set\n         * @returns {onnx.SparseTensorProto} SparseTensorProto instance\n         */\n        SparseTensorProto.create = function create(properties) {\n            return new SparseTensorProto(properties);\n        };\n\n        /**\n         * Encodes the specified SparseTensorProto message. Does not implicitly {@link onnx.SparseTensorProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {onnx.ISparseTensorProto} message SparseTensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SparseTensorProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.values != null && Object.hasOwnProperty.call(message, \"values\"))\n                $root.onnx.TensorProto.encode(message.values, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.indices != null && Object.hasOwnProperty.call(message, \"indices\"))\n                $root.onnx.TensorProto.encode(message.indices, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.dims != null && message.dims.length) {\n                writer.uint32(/* id 3, wireType 2 =*/26).fork();\n                for (var i = 0; i < message.dims.length; ++i)\n                    writer.int64(message.dims[i]);\n                writer.ldelim();\n            }\n            return writer;\n        };\n\n        /**\n         * Encodes the specified SparseTensorProto message, length delimited. Does not implicitly {@link onnx.SparseTensorProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {onnx.ISparseTensorProto} message SparseTensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SparseTensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a SparseTensorProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.SparseTensorProto} SparseTensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SparseTensorProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.SparseTensorProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.values = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 2: {\n                        message.indices = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 3: {\n                        if (!(message.dims && message.dims.length))\n                            message.dims = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.dims.push(reader.int64());\n                        } else\n                            message.dims.push(reader.int64());\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a SparseTensorProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.SparseTensorProto} SparseTensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SparseTensorProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a SparseTensorProto message.\n         * @function verify\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        SparseTensorProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.values != null && message.hasOwnProperty(\"values\")) {\n                var error = $root.onnx.TensorProto.verify(message.values);\n                if (error)\n                    return \"values.\" + error;\n            }\n            if (message.indices != null && message.hasOwnProperty(\"indices\")) {\n                var error = $root.onnx.TensorProto.verify(message.indices);\n                if (error)\n                    return \"indices.\" + error;\n            }\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                if (!Array.isArray(message.dims))\n                    return \"dims: array expected\";\n                for (var i = 0; i < message.dims.length; ++i)\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\n                        return \"dims: integer|Long[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a SparseTensorProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.SparseTensorProto} SparseTensorProto\n         */\n        SparseTensorProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.SparseTensorProto)\n                return object;\n            var message = new $root.onnx.SparseTensorProto();\n            if (object.values != null) {\n                if (typeof object.values !== \"object\")\n                    throw TypeError(\".onnx.SparseTensorProto.values: object expected\");\n                message.values = $root.onnx.TensorProto.fromObject(object.values);\n            }\n            if (object.indices != null) {\n                if (typeof object.indices !== \"object\")\n                    throw TypeError(\".onnx.SparseTensorProto.indices: object expected\");\n                message.indices = $root.onnx.TensorProto.fromObject(object.indices);\n            }\n            if (object.dims) {\n                if (!Array.isArray(object.dims))\n                    throw TypeError(\".onnx.SparseTensorProto.dims: array expected\");\n                message.dims = [];\n                for (var i = 0; i < object.dims.length; ++i)\n                    if ($util.Long)\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n                    else if (typeof object.dims[i] === \"string\")\n                        message.dims[i] = parseInt(object.dims[i], 10);\n                    else if (typeof object.dims[i] === \"number\")\n                        message.dims[i] = object.dims[i];\n                    else if (typeof object.dims[i] === \"object\")\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a SparseTensorProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {onnx.SparseTensorProto} message SparseTensorProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        SparseTensorProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.dims = [];\n            if (options.defaults) {\n                object.values = null;\n                object.indices = null;\n            }\n            if (message.values != null && message.hasOwnProperty(\"values\"))\n                object.values = $root.onnx.TensorProto.toObject(message.values, options);\n            if (message.indices != null && message.hasOwnProperty(\"indices\"))\n                object.indices = $root.onnx.TensorProto.toObject(message.indices, options);\n            if (message.dims && message.dims.length) {\n                object.dims = [];\n                for (var j = 0; j < message.dims.length; ++j)\n                    if (typeof message.dims[j] === \"number\")\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n                    else\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\n            }\n            return object;\n        };\n\n        /**\n         * Converts this SparseTensorProto to JSON.\n         * @function toJSON\n         * @memberof onnx.SparseTensorProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        SparseTensorProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for SparseTensorProto\n         * @function getTypeUrl\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        SparseTensorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.SparseTensorProto\";\n        };\n\n        return SparseTensorProto;\n    })();\n\n    onnx.TensorShapeProto = (function() {\n\n        /**\n         * Properties of a TensorShapeProto.\n         * @memberof onnx\n         * @interface ITensorShapeProto\n         * @property {Array.<onnx.TensorShapeProto.IDimension>|null} [dim] TensorShapeProto dim\n         */\n\n        /**\n         * Constructs a new TensorShapeProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorShapeProto.\n         * @implements ITensorShapeProto\n         * @constructor\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         */\n        function TensorShapeProto(properties) {\n            this.dim = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorShapeProto dim.\n         * @member {Array.<onnx.TensorShapeProto.IDimension>} dim\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         */\n        TensorShapeProto.prototype.dim = $util.emptyArray;\n\n        /**\n         * Creates a new TensorShapeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         * @returns {onnx.TensorShapeProto} TensorShapeProto instance\n         */\n        TensorShapeProto.create = function create(properties) {\n            return new TensorShapeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dim != null && message.dim.length)\n                for (var i = 0; i < message.dim.length; ++i)\n                    $root.onnx.TensorShapeProto.Dimension.encode(message.dim[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        if (!(message.dim && message.dim.length))\n                            message.dim = [];\n                        message.dim.push($root.onnx.TensorShapeProto.Dimension.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorShapeProto message.\n         * @function verify\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorShapeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dim != null && message.hasOwnProperty(\"dim\")) {\n                if (!Array.isArray(message.dim))\n                    return \"dim: array expected\";\n                for (var i = 0; i < message.dim.length; ++i) {\n                    var error = $root.onnx.TensorShapeProto.Dimension.verify(message.dim[i]);\n                    if (error)\n                        return \"dim.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorShapeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         */\n        TensorShapeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorShapeProto)\n                return object;\n            var message = new $root.onnx.TensorShapeProto();\n            if (object.dim) {\n                if (!Array.isArray(object.dim))\n                    throw TypeError(\".onnx.TensorShapeProto.dim: array expected\");\n                message.dim = [];\n                for (var i = 0; i < object.dim.length; ++i) {\n                    if (typeof object.dim[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorShapeProto.dim: object expected\");\n                    message.dim[i] = $root.onnx.TensorShapeProto.Dimension.fromObject(object.dim[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorShapeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.TensorShapeProto} message TensorShapeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorShapeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.dim = [];\n            if (message.dim && message.dim.length) {\n                object.dim = [];\n                for (var j = 0; j < message.dim.length; ++j)\n                    object.dim[j] = $root.onnx.TensorShapeProto.Dimension.toObject(message.dim[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorShapeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorShapeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TensorShapeProto\n         * @function getTypeUrl\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TensorShapeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.TensorShapeProto\";\n        };\n\n        TensorShapeProto.Dimension = (function() {\n\n            /**\n             * Properties of a Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @interface IDimension\n             * @property {number|Long|null} [dimValue] Dimension dimValue\n             * @property {string|null} [dimParam] Dimension dimParam\n             * @property {string|null} [denotation] Dimension denotation\n             */\n\n            /**\n             * Constructs a new Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @classdesc Represents a Dimension.\n             * @implements IDimension\n             * @constructor\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             */\n            function Dimension(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Dimension dimValue.\n             * @member {number|Long|null|undefined} dimValue\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimValue = null;\n\n            /**\n             * Dimension dimParam.\n             * @member {string|null|undefined} dimParam\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimParam = null;\n\n            /**\n             * Dimension denotation.\n             * @member {string} denotation\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.denotation = \"\";\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * Dimension value.\n             * @member {\"dimValue\"|\"dimParam\"|undefined} value\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Object.defineProperty(Dimension.prototype, \"value\", {\n                get: $util.oneOfGetter($oneOfFields = [\"dimValue\", \"dimParam\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new Dimension instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension instance\n             */\n            Dimension.create = function create(properties) {\n                return new Dimension(properties);\n            };\n\n            /**\n             * Encodes the specified Dimension message. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.dimValue != null && Object.hasOwnProperty.call(message, \"dimValue\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.dimValue);\n                if (message.dimParam != null && Object.hasOwnProperty.call(message, \"dimParam\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.dimParam);\n                if (message.denotation != null && Object.hasOwnProperty.call(message, \"denotation\"))\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.denotation);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Dimension message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto.Dimension();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.dimValue = reader.int64();\n                            break;\n                        }\n                    case 2: {\n                            message.dimParam = reader.string();\n                            break;\n                        }\n                    case 3: {\n                            message.denotation = reader.string();\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Dimension message.\n             * @function verify\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Dimension.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    properties.value = 1;\n                    if (!$util.isInteger(message.dimValue) && !(message.dimValue && $util.isInteger(message.dimValue.low) && $util.isInteger(message.dimValue.high)))\n                        return \"dimValue: integer|Long expected\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    if (properties.value === 1)\n                        return \"value: multiple values\";\n                    properties.value = 1;\n                    if (!$util.isString(message.dimParam))\n                        return \"dimParam: string expected\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    if (!$util.isString(message.denotation))\n                        return \"denotation: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Dimension message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             */\n            Dimension.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorShapeProto.Dimension)\n                    return object;\n                var message = new $root.onnx.TensorShapeProto.Dimension();\n                if (object.dimValue != null)\n                    if ($util.Long)\n                        (message.dimValue = $util.Long.fromValue(object.dimValue)).unsigned = false;\n                    else if (typeof object.dimValue === \"string\")\n                        message.dimValue = parseInt(object.dimValue, 10);\n                    else if (typeof object.dimValue === \"number\")\n                        message.dimValue = object.dimValue;\n                    else if (typeof object.dimValue === \"object\")\n                        message.dimValue = new $util.LongBits(object.dimValue.low >>> 0, object.dimValue.high >>> 0).toNumber();\n                if (object.dimParam != null)\n                    message.dimParam = String(object.dimParam);\n                if (object.denotation != null)\n                    message.denotation = String(object.denotation);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Dimension message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.Dimension} message Dimension\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Dimension.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.denotation = \"\";\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    if (typeof message.dimValue === \"number\")\n                        object.dimValue = options.longs === String ? String(message.dimValue) : message.dimValue;\n                    else\n                        object.dimValue = options.longs === String ? $util.Long.prototype.toString.call(message.dimValue) : options.longs === Number ? new $util.LongBits(message.dimValue.low >>> 0, message.dimValue.high >>> 0).toNumber() : message.dimValue;\n                    if (options.oneofs)\n                        object.value = \"dimValue\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    object.dimParam = message.dimParam;\n                    if (options.oneofs)\n                        object.value = \"dimParam\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    object.denotation = message.denotation;\n                return object;\n            };\n\n            /**\n             * Converts this Dimension to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Dimension.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Dimension\n             * @function getTypeUrl\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Dimension.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TensorShapeProto.Dimension\";\n            };\n\n            return Dimension;\n        })();\n\n        return TensorShapeProto;\n    })();\n\n    onnx.TypeProto = (function() {\n\n        /**\n         * Properties of a TypeProto.\n         * @memberof onnx\n         * @interface ITypeProto\n         * @property {onnx.TypeProto.ITensor|null} [tensorType] TypeProto tensorType\n         * @property {onnx.TypeProto.ISequence|null} [sequenceType] TypeProto sequenceType\n         * @property {onnx.TypeProto.IMap|null} [mapType] TypeProto mapType\n         * @property {onnx.TypeProto.IOptional|null} [optionalType] TypeProto optionalType\n         * @property {onnx.TypeProto.ISparseTensor|null} [sparseTensorType] TypeProto sparseTensorType\n         * @property {string|null} [denotation] TypeProto denotation\n         */\n\n        /**\n         * Constructs a new TypeProto.\n         * @memberof onnx\n         * @classdesc Represents a TypeProto.\n         * @implements ITypeProto\n         * @constructor\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         */\n        function TypeProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TypeProto tensorType.\n         * @member {onnx.TypeProto.ITensor|null|undefined} tensorType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.tensorType = null;\n\n        /**\n         * TypeProto sequenceType.\n         * @member {onnx.TypeProto.ISequence|null|undefined} sequenceType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.sequenceType = null;\n\n        /**\n         * TypeProto mapType.\n         * @member {onnx.TypeProto.IMap|null|undefined} mapType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.mapType = null;\n\n        /**\n         * TypeProto optionalType.\n         * @member {onnx.TypeProto.IOptional|null|undefined} optionalType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.optionalType = null;\n\n        /**\n         * TypeProto sparseTensorType.\n         * @member {onnx.TypeProto.ISparseTensor|null|undefined} sparseTensorType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.sparseTensorType = null;\n\n        /**\n         * TypeProto denotation.\n         * @member {string} denotation\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.denotation = \"\";\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * TypeProto value.\n         * @member {\"tensorType\"|\"sequenceType\"|\"mapType\"|\"optionalType\"|\"sparseTensorType\"|undefined} value\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        Object.defineProperty(TypeProto.prototype, \"value\", {\n            get: $util.oneOfGetter($oneOfFields = [\"tensorType\", \"sequenceType\", \"mapType\", \"optionalType\", \"sparseTensorType\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new TypeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         * @returns {onnx.TypeProto} TypeProto instance\n         */\n        TypeProto.create = function create(properties) {\n            return new TypeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TypeProto message. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorType != null && Object.hasOwnProperty.call(message, \"tensorType\"))\n                $root.onnx.TypeProto.Tensor.encode(message.tensorType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.sequenceType != null && Object.hasOwnProperty.call(message, \"sequenceType\"))\n                $root.onnx.TypeProto.Sequence.encode(message.sequenceType, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            if (message.mapType != null && Object.hasOwnProperty.call(message, \"mapType\"))\n                $root.onnx.TypeProto.Map.encode(message.mapType, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.denotation != null && Object.hasOwnProperty.call(message, \"denotation\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.denotation);\n            if (message.sparseTensorType != null && Object.hasOwnProperty.call(message, \"sparseTensorType\"))\n                $root.onnx.TypeProto.SparseTensor.encode(message.sparseTensorType, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.optionalType != null && Object.hasOwnProperty.call(message, \"optionalType\"))\n                $root.onnx.TypeProto.Optional.encode(message.optionalType, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TypeProto message, length delimited. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.tensorType = $root.onnx.TypeProto.Tensor.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 4: {\n                        message.sequenceType = $root.onnx.TypeProto.Sequence.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 5: {\n                        message.mapType = $root.onnx.TypeProto.Map.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 9: {\n                        message.optionalType = $root.onnx.TypeProto.Optional.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 8: {\n                        message.sparseTensorType = $root.onnx.TypeProto.SparseTensor.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 6: {\n                        message.denotation = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TypeProto message.\n         * @function verify\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TypeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Tensor.verify(message.tensorType);\n                    if (error)\n                        return \"tensorType.\" + error;\n                }\n            }\n            if (message.sequenceType != null && message.hasOwnProperty(\"sequenceType\")) {\n                if (properties.value === 1)\n                    return \"value: multiple values\";\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Sequence.verify(message.sequenceType);\n                    if (error)\n                        return \"sequenceType.\" + error;\n                }\n            }\n            if (message.mapType != null && message.hasOwnProperty(\"mapType\")) {\n                if (properties.value === 1)\n                    return \"value: multiple values\";\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Map.verify(message.mapType);\n                    if (error)\n                        return \"mapType.\" + error;\n                }\n            }\n            if (message.optionalType != null && message.hasOwnProperty(\"optionalType\")) {\n                if (properties.value === 1)\n                    return \"value: multiple values\";\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Optional.verify(message.optionalType);\n                    if (error)\n                        return \"optionalType.\" + error;\n                }\n            }\n            if (message.sparseTensorType != null && message.hasOwnProperty(\"sparseTensorType\")) {\n                if (properties.value === 1)\n                    return \"value: multiple values\";\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.SparseTensor.verify(message.sparseTensorType);\n                    if (error)\n                        return \"sparseTensorType.\" + error;\n                }\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                if (!$util.isString(message.denotation))\n                    return \"denotation: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a TypeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TypeProto} TypeProto\n         */\n        TypeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TypeProto)\n                return object;\n            var message = new $root.onnx.TypeProto();\n            if (object.tensorType != null) {\n                if (typeof object.tensorType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.tensorType: object expected\");\n                message.tensorType = $root.onnx.TypeProto.Tensor.fromObject(object.tensorType);\n            }\n            if (object.sequenceType != null) {\n                if (typeof object.sequenceType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.sequenceType: object expected\");\n                message.sequenceType = $root.onnx.TypeProto.Sequence.fromObject(object.sequenceType);\n            }\n            if (object.mapType != null) {\n                if (typeof object.mapType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.mapType: object expected\");\n                message.mapType = $root.onnx.TypeProto.Map.fromObject(object.mapType);\n            }\n            if (object.optionalType != null) {\n                if (typeof object.optionalType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.optionalType: object expected\");\n                message.optionalType = $root.onnx.TypeProto.Optional.fromObject(object.optionalType);\n            }\n            if (object.sparseTensorType != null) {\n                if (typeof object.sparseTensorType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.sparseTensorType: object expected\");\n                message.sparseTensorType = $root.onnx.TypeProto.SparseTensor.fromObject(object.sparseTensorType);\n            }\n            if (object.denotation != null)\n                message.denotation = String(object.denotation);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TypeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.TypeProto} message TypeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TypeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.denotation = \"\";\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                object.tensorType = $root.onnx.TypeProto.Tensor.toObject(message.tensorType, options);\n                if (options.oneofs)\n                    object.value = \"tensorType\";\n            }\n            if (message.sequenceType != null && message.hasOwnProperty(\"sequenceType\")) {\n                object.sequenceType = $root.onnx.TypeProto.Sequence.toObject(message.sequenceType, options);\n                if (options.oneofs)\n                    object.value = \"sequenceType\";\n            }\n            if (message.mapType != null && message.hasOwnProperty(\"mapType\")) {\n                object.mapType = $root.onnx.TypeProto.Map.toObject(message.mapType, options);\n                if (options.oneofs)\n                    object.value = \"mapType\";\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                object.denotation = message.denotation;\n            if (message.sparseTensorType != null && message.hasOwnProperty(\"sparseTensorType\")) {\n                object.sparseTensorType = $root.onnx.TypeProto.SparseTensor.toObject(message.sparseTensorType, options);\n                if (options.oneofs)\n                    object.value = \"sparseTensorType\";\n            }\n            if (message.optionalType != null && message.hasOwnProperty(\"optionalType\")) {\n                object.optionalType = $root.onnx.TypeProto.Optional.toObject(message.optionalType, options);\n                if (options.oneofs)\n                    object.value = \"optionalType\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TypeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TypeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TypeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TypeProto\n         * @function getTypeUrl\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TypeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.TypeProto\";\n        };\n\n        TypeProto.Tensor = (function() {\n\n            /**\n             * Properties of a Tensor.\n             * @memberof onnx.TypeProto\n             * @interface ITensor\n             * @property {number|null} [elemType] Tensor elemType\n             * @property {onnx.ITensorShapeProto|null} [shape] Tensor shape\n             */\n\n            /**\n             * Constructs a new Tensor.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Tensor.\n             * @implements ITensor\n             * @constructor\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             */\n            function Tensor(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Tensor elemType.\n             * @member {number} elemType\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.elemType = 0;\n\n            /**\n             * Tensor shape.\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.shape = null;\n\n            /**\n             * Creates a new Tensor instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Tensor} Tensor instance\n             */\n            Tensor.create = function create(properties) {\n                return new Tensor(properties);\n            };\n\n            /**\n             * Encodes the specified Tensor message. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\n                if (message.shape != null && Object.hasOwnProperty.call(message, \"shape\"))\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Tensor message, length delimited. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Tensor();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.elemType = reader.int32();\n                            break;\n                        }\n                    case 2: {\n                            message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Tensor message.\n             * @function verify\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Tensor.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    if (!$util.isInteger(message.elemType))\n                        return \"elemType: integer expected\";\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\n                    if (error)\n                        return \"shape.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Tensor message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             */\n            Tensor.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Tensor)\n                    return object;\n                var message = new $root.onnx.TypeProto.Tensor();\n                if (object.elemType != null)\n                    message.elemType = object.elemType | 0;\n                if (object.shape != null) {\n                    if (typeof object.shape !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Tensor.shape: object expected\");\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Tensor message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.Tensor} message Tensor\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Tensor.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.elemType = 0;\n                    object.shape = null;\n                }\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = message.elemType;\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n                return object;\n            };\n\n            /**\n             * Converts this Tensor to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Tensor.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Tensor\n             * @function getTypeUrl\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Tensor.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TypeProto.Tensor\";\n            };\n\n            return Tensor;\n        })();\n\n        TypeProto.Sequence = (function() {\n\n            /**\n             * Properties of a Sequence.\n             * @memberof onnx.TypeProto\n             * @interface ISequence\n             * @property {onnx.ITypeProto|null} [elemType] Sequence elemType\n             */\n\n            /**\n             * Constructs a new Sequence.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Sequence.\n             * @implements ISequence\n             * @constructor\n             * @param {onnx.TypeProto.ISequence=} [properties] Properties to set\n             */\n            function Sequence(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Sequence elemType.\n             * @member {onnx.ITypeProto|null|undefined} elemType\n             * @memberof onnx.TypeProto.Sequence\n             * @instance\n             */\n            Sequence.prototype.elemType = null;\n\n            /**\n             * Creates a new Sequence instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {onnx.TypeProto.ISequence=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Sequence} Sequence instance\n             */\n            Sequence.create = function create(properties) {\n                return new Sequence(properties);\n            };\n\n            /**\n             * Encodes the specified Sequence message. Does not implicitly {@link onnx.TypeProto.Sequence.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {onnx.TypeProto.ISequence} message Sequence message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Sequence.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\n                    $root.onnx.TypeProto.encode(message.elemType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Sequence message, length delimited. Does not implicitly {@link onnx.TypeProto.Sequence.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {onnx.TypeProto.ISequence} message Sequence message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Sequence.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Sequence message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Sequence} Sequence\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Sequence.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Sequence();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.elemType = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Sequence message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Sequence} Sequence\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Sequence.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Sequence message.\n             * @function verify\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Sequence.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\")) {\n                    var error = $root.onnx.TypeProto.verify(message.elemType);\n                    if (error)\n                        return \"elemType.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Sequence message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Sequence} Sequence\n             */\n            Sequence.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Sequence)\n                    return object;\n                var message = new $root.onnx.TypeProto.Sequence();\n                if (object.elemType != null) {\n                    if (typeof object.elemType !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Sequence.elemType: object expected\");\n                    message.elemType = $root.onnx.TypeProto.fromObject(object.elemType);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Sequence message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {onnx.TypeProto.Sequence} message Sequence\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Sequence.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.elemType = null;\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = $root.onnx.TypeProto.toObject(message.elemType, options);\n                return object;\n            };\n\n            /**\n             * Converts this Sequence to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Sequence\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Sequence.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Sequence\n             * @function getTypeUrl\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Sequence.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TypeProto.Sequence\";\n            };\n\n            return Sequence;\n        })();\n\n        TypeProto.Map = (function() {\n\n            /**\n             * Properties of a Map.\n             * @memberof onnx.TypeProto\n             * @interface IMap\n             * @property {number|null} [keyType] Map keyType\n             * @property {onnx.ITypeProto|null} [valueType] Map valueType\n             */\n\n            /**\n             * Constructs a new Map.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Map.\n             * @implements IMap\n             * @constructor\n             * @param {onnx.TypeProto.IMap=} [properties] Properties to set\n             */\n            function Map(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Map keyType.\n             * @member {number} keyType\n             * @memberof onnx.TypeProto.Map\n             * @instance\n             */\n            Map.prototype.keyType = 0;\n\n            /**\n             * Map valueType.\n             * @member {onnx.ITypeProto|null|undefined} valueType\n             * @memberof onnx.TypeProto.Map\n             * @instance\n             */\n            Map.prototype.valueType = null;\n\n            /**\n             * Creates a new Map instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {onnx.TypeProto.IMap=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Map} Map instance\n             */\n            Map.create = function create(properties) {\n                return new Map(properties);\n            };\n\n            /**\n             * Encodes the specified Map message. Does not implicitly {@link onnx.TypeProto.Map.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {onnx.TypeProto.IMap} message Map message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Map.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.keyType != null && Object.hasOwnProperty.call(message, \"keyType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.keyType);\n                if (message.valueType != null && Object.hasOwnProperty.call(message, \"valueType\"))\n                    $root.onnx.TypeProto.encode(message.valueType, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Map message, length delimited. Does not implicitly {@link onnx.TypeProto.Map.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {onnx.TypeProto.IMap} message Map message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Map.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Map message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Map} Map\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Map.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Map();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.keyType = reader.int32();\n                            break;\n                        }\n                    case 2: {\n                            message.valueType = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Map message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Map} Map\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Map.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Map message.\n             * @function verify\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Map.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.keyType != null && message.hasOwnProperty(\"keyType\"))\n                    if (!$util.isInteger(message.keyType))\n                        return \"keyType: integer expected\";\n                if (message.valueType != null && message.hasOwnProperty(\"valueType\")) {\n                    var error = $root.onnx.TypeProto.verify(message.valueType);\n                    if (error)\n                        return \"valueType.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Map message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Map} Map\n             */\n            Map.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Map)\n                    return object;\n                var message = new $root.onnx.TypeProto.Map();\n                if (object.keyType != null)\n                    message.keyType = object.keyType | 0;\n                if (object.valueType != null) {\n                    if (typeof object.valueType !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Map.valueType: object expected\");\n                    message.valueType = $root.onnx.TypeProto.fromObject(object.valueType);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Map message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {onnx.TypeProto.Map} message Map\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Map.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.keyType = 0;\n                    object.valueType = null;\n                }\n                if (message.keyType != null && message.hasOwnProperty(\"keyType\"))\n                    object.keyType = message.keyType;\n                if (message.valueType != null && message.hasOwnProperty(\"valueType\"))\n                    object.valueType = $root.onnx.TypeProto.toObject(message.valueType, options);\n                return object;\n            };\n\n            /**\n             * Converts this Map to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Map\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Map.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Map\n             * @function getTypeUrl\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Map.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TypeProto.Map\";\n            };\n\n            return Map;\n        })();\n\n        TypeProto.Optional = (function() {\n\n            /**\n             * Properties of an Optional.\n             * @memberof onnx.TypeProto\n             * @interface IOptional\n             * @property {onnx.ITypeProto|null} [elemType] Optional elemType\n             */\n\n            /**\n             * Constructs a new Optional.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents an Optional.\n             * @implements IOptional\n             * @constructor\n             * @param {onnx.TypeProto.IOptional=} [properties] Properties to set\n             */\n            function Optional(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Optional elemType.\n             * @member {onnx.ITypeProto|null|undefined} elemType\n             * @memberof onnx.TypeProto.Optional\n             * @instance\n             */\n            Optional.prototype.elemType = null;\n\n            /**\n             * Creates a new Optional instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {onnx.TypeProto.IOptional=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Optional} Optional instance\n             */\n            Optional.create = function create(properties) {\n                return new Optional(properties);\n            };\n\n            /**\n             * Encodes the specified Optional message. Does not implicitly {@link onnx.TypeProto.Optional.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {onnx.TypeProto.IOptional} message Optional message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Optional.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\n                    $root.onnx.TypeProto.encode(message.elemType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Optional message, length delimited. Does not implicitly {@link onnx.TypeProto.Optional.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {onnx.TypeProto.IOptional} message Optional message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Optional.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes an Optional message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Optional} Optional\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Optional.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Optional();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.elemType = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes an Optional message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Optional} Optional\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Optional.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies an Optional message.\n             * @function verify\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Optional.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\")) {\n                    var error = $root.onnx.TypeProto.verify(message.elemType);\n                    if (error)\n                        return \"elemType.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates an Optional message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Optional} Optional\n             */\n            Optional.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Optional)\n                    return object;\n                var message = new $root.onnx.TypeProto.Optional();\n                if (object.elemType != null) {\n                    if (typeof object.elemType !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Optional.elemType: object expected\");\n                    message.elemType = $root.onnx.TypeProto.fromObject(object.elemType);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from an Optional message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {onnx.TypeProto.Optional} message Optional\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Optional.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.elemType = null;\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = $root.onnx.TypeProto.toObject(message.elemType, options);\n                return object;\n            };\n\n            /**\n             * Converts this Optional to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Optional\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Optional.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Optional\n             * @function getTypeUrl\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Optional.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TypeProto.Optional\";\n            };\n\n            return Optional;\n        })();\n\n        TypeProto.SparseTensor = (function() {\n\n            /**\n             * Properties of a SparseTensor.\n             * @memberof onnx.TypeProto\n             * @interface ISparseTensor\n             * @property {number|null} [elemType] SparseTensor elemType\n             * @property {onnx.ITensorShapeProto|null} [shape] SparseTensor shape\n             */\n\n            /**\n             * Constructs a new SparseTensor.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a SparseTensor.\n             * @implements ISparseTensor\n             * @constructor\n             * @param {onnx.TypeProto.ISparseTensor=} [properties] Properties to set\n             */\n            function SparseTensor(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * SparseTensor elemType.\n             * @member {number} elemType\n             * @memberof onnx.TypeProto.SparseTensor\n             * @instance\n             */\n            SparseTensor.prototype.elemType = 0;\n\n            /**\n             * SparseTensor shape.\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\n             * @memberof onnx.TypeProto.SparseTensor\n             * @instance\n             */\n            SparseTensor.prototype.shape = null;\n\n            /**\n             * Creates a new SparseTensor instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {onnx.TypeProto.ISparseTensor=} [properties] Properties to set\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor instance\n             */\n            SparseTensor.create = function create(properties) {\n                return new SparseTensor(properties);\n            };\n\n            /**\n             * Encodes the specified SparseTensor message. Does not implicitly {@link onnx.TypeProto.SparseTensor.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {onnx.TypeProto.ISparseTensor} message SparseTensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            SparseTensor.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\n                if (message.shape != null && Object.hasOwnProperty.call(message, \"shape\"))\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified SparseTensor message, length delimited. Does not implicitly {@link onnx.TypeProto.SparseTensor.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {onnx.TypeProto.ISparseTensor} message SparseTensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            SparseTensor.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a SparseTensor message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            SparseTensor.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.SparseTensor();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.elemType = reader.int32();\n                            break;\n                        }\n                    case 2: {\n                            message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a SparseTensor message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            SparseTensor.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a SparseTensor message.\n             * @function verify\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            SparseTensor.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    if (!$util.isInteger(message.elemType))\n                        return \"elemType: integer expected\";\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\n                    if (error)\n                        return \"shape.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a SparseTensor message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor\n             */\n            SparseTensor.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.SparseTensor)\n                    return object;\n                var message = new $root.onnx.TypeProto.SparseTensor();\n                if (object.elemType != null)\n                    message.elemType = object.elemType | 0;\n                if (object.shape != null) {\n                    if (typeof object.shape !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.SparseTensor.shape: object expected\");\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a SparseTensor message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {onnx.TypeProto.SparseTensor} message SparseTensor\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            SparseTensor.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.elemType = 0;\n                    object.shape = null;\n                }\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = message.elemType;\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n                return object;\n            };\n\n            /**\n             * Converts this SparseTensor to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.SparseTensor\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            SparseTensor.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for SparseTensor\n             * @function getTypeUrl\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            SparseTensor.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TypeProto.SparseTensor\";\n            };\n\n            return SparseTensor;\n        })();\n\n        return TypeProto;\n    })();\n\n    onnx.OperatorSetIdProto = (function() {\n\n        /**\n         * Properties of an OperatorSetIdProto.\n         * @memberof onnx\n         * @interface IOperatorSetIdProto\n         * @property {string|null} [domain] OperatorSetIdProto domain\n         * @property {number|Long|null} [version] OperatorSetIdProto version\n         */\n\n        /**\n         * Constructs a new OperatorSetIdProto.\n         * @memberof onnx\n         * @classdesc Represents an OperatorSetIdProto.\n         * @implements IOperatorSetIdProto\n         * @constructor\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         */\n        function OperatorSetIdProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * OperatorSetIdProto domain.\n         * @member {string} domain\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.domain = \"\";\n\n        /**\n         * OperatorSetIdProto version.\n         * @member {number|Long} version\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new OperatorSetIdProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto instance\n         */\n        OperatorSetIdProto.create = function create(properties) {\n            return new OperatorSetIdProto(properties);\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.domain);\n            if (message.version != null && Object.hasOwnProperty.call(message, \"version\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.version);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message, length delimited. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.OperatorSetIdProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.domain = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.version = reader.int64();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an OperatorSetIdProto message.\n         * @function verify\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        OperatorSetIdProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))\n                    return \"version: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates an OperatorSetIdProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         */\n        OperatorSetIdProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.OperatorSetIdProto)\n                return object;\n            var message = new $root.onnx.OperatorSetIdProto();\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.version != null)\n                if ($util.Long)\n                    (message.version = $util.Long.fromValue(object.version)).unsigned = false;\n                else if (typeof object.version === \"string\")\n                    message.version = parseInt(object.version, 10);\n                else if (typeof object.version === \"number\")\n                    message.version = object.version;\n                else if (typeof object.version === \"object\")\n                    message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an OperatorSetIdProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.OperatorSetIdProto} message OperatorSetIdProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        OperatorSetIdProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.version = options.longs === String ? \"0\" : 0;\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (typeof message.version === \"number\")\n                    object.version = options.longs === String ? String(message.version) : message.version;\n                else\n                    object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;\n            return object;\n        };\n\n        /**\n         * Converts this OperatorSetIdProto to JSON.\n         * @function toJSON\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        OperatorSetIdProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for OperatorSetIdProto\n         * @function getTypeUrl\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        OperatorSetIdProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.OperatorSetIdProto\";\n        };\n\n        return OperatorSetIdProto;\n    })();\n\n    /**\n     * OperatorStatus enum.\n     * @name onnx.OperatorStatus\n     * @enum {number}\n     * @property {number} EXPERIMENTAL=0 EXPERIMENTAL value\n     * @property {number} STABLE=1 STABLE value\n     */\n    onnx.OperatorStatus = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"EXPERIMENTAL\"] = 0;\n        values[valuesById[1] = \"STABLE\"] = 1;\n        return values;\n    })();\n\n    onnx.FunctionProto = (function() {\n\n        /**\n         * Properties of a FunctionProto.\n         * @memberof onnx\n         * @interface IFunctionProto\n         * @property {string|null} [name] FunctionProto name\n         * @property {Array.<string>|null} [input] FunctionProto input\n         * @property {Array.<string>|null} [output] FunctionProto output\n         * @property {Array.<string>|null} [attribute] FunctionProto attribute\n         * @property {Array.<onnx.IAttributeProto>|null} [attributeProto] FunctionProto attributeProto\n         * @property {Array.<onnx.INodeProto>|null} [node] FunctionProto node\n         * @property {string|null} [docString] FunctionProto docString\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] FunctionProto opsetImport\n         * @property {string|null} [domain] FunctionProto domain\n         */\n\n        /**\n         * Constructs a new FunctionProto.\n         * @memberof onnx\n         * @classdesc Represents a FunctionProto.\n         * @implements IFunctionProto\n         * @constructor\n         * @param {onnx.IFunctionProto=} [properties] Properties to set\n         */\n        function FunctionProto(properties) {\n            this.input = [];\n            this.output = [];\n            this.attribute = [];\n            this.attributeProto = [];\n            this.node = [];\n            this.opsetImport = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * FunctionProto name.\n         * @member {string} name\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.name = \"\";\n\n        /**\n         * FunctionProto input.\n         * @member {Array.<string>} input\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.input = $util.emptyArray;\n\n        /**\n         * FunctionProto output.\n         * @member {Array.<string>} output\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.output = $util.emptyArray;\n\n        /**\n         * FunctionProto attribute.\n         * @member {Array.<string>} attribute\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.attribute = $util.emptyArray;\n\n        /**\n         * FunctionProto attributeProto.\n         * @member {Array.<onnx.IAttributeProto>} attributeProto\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.attributeProto = $util.emptyArray;\n\n        /**\n         * FunctionProto node.\n         * @member {Array.<onnx.INodeProto>} node\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.node = $util.emptyArray;\n\n        /**\n         * FunctionProto docString.\n         * @member {string} docString\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.docString = \"\";\n\n        /**\n         * FunctionProto opsetImport.\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.opsetImport = $util.emptyArray;\n\n        /**\n         * FunctionProto domain.\n         * @member {string} domain\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.domain = \"\";\n\n        /**\n         * Creates a new FunctionProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {onnx.IFunctionProto=} [properties] Properties to set\n         * @returns {onnx.FunctionProto} FunctionProto instance\n         */\n        FunctionProto.create = function create(properties) {\n            return new FunctionProto(properties);\n        };\n\n        /**\n         * Encodes the specified FunctionProto message. Does not implicitly {@link onnx.FunctionProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {onnx.IFunctionProto} message FunctionProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FunctionProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.input[i]);\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.output[i]);\n            if (message.attribute != null && message.attribute.length)\n                for (var i = 0; i < message.attribute.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.attribute[i]);\n            if (message.node != null && message.node.length)\n                for (var i = 0; i < message.node.length; ++i)\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.docString);\n            if (message.opsetImport != null && message.opsetImport.length)\n                for (var i = 0; i < message.opsetImport.length; ++i)\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.domain);\n            if (message.attributeProto != null && message.attributeProto.length)\n                for (var i = 0; i < message.attributeProto.length; ++i)\n                    $root.onnx.AttributeProto.encode(message.attributeProto[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified FunctionProto message, length delimited. Does not implicitly {@link onnx.FunctionProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {onnx.IFunctionProto} message FunctionProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FunctionProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a FunctionProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.FunctionProto} FunctionProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FunctionProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.FunctionProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 4: {\n                        if (!(message.input && message.input.length))\n                            message.input = [];\n                        message.input.push(reader.string());\n                        break;\n                    }\n                case 5: {\n                        if (!(message.output && message.output.length))\n                            message.output = [];\n                        message.output.push(reader.string());\n                        break;\n                    }\n                case 6: {\n                        if (!(message.attribute && message.attribute.length))\n                            message.attribute = [];\n                        message.attribute.push(reader.string());\n                        break;\n                    }\n                case 11: {\n                        if (!(message.attributeProto && message.attributeProto.length))\n                            message.attributeProto = [];\n                        message.attributeProto.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 7: {\n                        if (!(message.node && message.node.length))\n                            message.node = [];\n                        message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 8: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                case 9: {\n                        if (!(message.opsetImport && message.opsetImport.length))\n                            message.opsetImport = [];\n                        message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 10: {\n                        message.domain = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a FunctionProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.FunctionProto} FunctionProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FunctionProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a FunctionProto message.\n         * @function verify\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        FunctionProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i)\n                    if (!$util.isString(message.input[i]))\n                        return \"input: string[] expected\";\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i)\n                    if (!$util.isString(message.output[i]))\n                        return \"output: string[] expected\";\n            }\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\n                if (!Array.isArray(message.attribute))\n                    return \"attribute: array expected\";\n                for (var i = 0; i < message.attribute.length; ++i)\n                    if (!$util.isString(message.attribute[i]))\n                        return \"attribute: string[] expected\";\n            }\n            if (message.attributeProto != null && message.hasOwnProperty(\"attributeProto\")) {\n                if (!Array.isArray(message.attributeProto))\n                    return \"attributeProto: array expected\";\n                for (var i = 0; i < message.attributeProto.length; ++i) {\n                    var error = $root.onnx.AttributeProto.verify(message.attributeProto[i]);\n                    if (error)\n                        return \"attributeProto.\" + error;\n                }\n            }\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\n                if (!Array.isArray(message.node))\n                    return \"node: array expected\";\n                for (var i = 0; i < message.node.length; ++i) {\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\n                    if (error)\n                        return \"node.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\n                if (!Array.isArray(message.opsetImport))\n                    return \"opsetImport: array expected\";\n                for (var i = 0; i < message.opsetImport.length; ++i) {\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n                    if (error)\n                        return \"opsetImport.\" + error;\n                }\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a FunctionProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.FunctionProto} FunctionProto\n         */\n        FunctionProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.FunctionProto)\n                return object;\n            var message = new $root.onnx.FunctionProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.FunctionProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i)\n                    message.input[i] = String(object.input[i]);\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.FunctionProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i)\n                    message.output[i] = String(object.output[i]);\n            }\n            if (object.attribute) {\n                if (!Array.isArray(object.attribute))\n                    throw TypeError(\".onnx.FunctionProto.attribute: array expected\");\n                message.attribute = [];\n                for (var i = 0; i < object.attribute.length; ++i)\n                    message.attribute[i] = String(object.attribute[i]);\n            }\n            if (object.attributeProto) {\n                if (!Array.isArray(object.attributeProto))\n                    throw TypeError(\".onnx.FunctionProto.attributeProto: array expected\");\n                message.attributeProto = [];\n                for (var i = 0; i < object.attributeProto.length; ++i) {\n                    if (typeof object.attributeProto[i] !== \"object\")\n                        throw TypeError(\".onnx.FunctionProto.attributeProto: object expected\");\n                    message.attributeProto[i] = $root.onnx.AttributeProto.fromObject(object.attributeProto[i]);\n                }\n            }\n            if (object.node) {\n                if (!Array.isArray(object.node))\n                    throw TypeError(\".onnx.FunctionProto.node: array expected\");\n                message.node = [];\n                for (var i = 0; i < object.node.length; ++i) {\n                    if (typeof object.node[i] !== \"object\")\n                        throw TypeError(\".onnx.FunctionProto.node: object expected\");\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.opsetImport) {\n                if (!Array.isArray(object.opsetImport))\n                    throw TypeError(\".onnx.FunctionProto.opsetImport: array expected\");\n                message.opsetImport = [];\n                for (var i = 0; i < object.opsetImport.length; ++i) {\n                    if (typeof object.opsetImport[i] !== \"object\")\n                        throw TypeError(\".onnx.FunctionProto.opsetImport: object expected\");\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n                }\n            }\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a FunctionProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {onnx.FunctionProto} message FunctionProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        FunctionProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.input = [];\n                object.output = [];\n                object.attribute = [];\n                object.node = [];\n                object.opsetImport = [];\n                object.attributeProto = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.docString = \"\";\n                object.domain = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = message.input[j];\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = message.output[j];\n            }\n            if (message.attribute && message.attribute.length) {\n                object.attribute = [];\n                for (var j = 0; j < message.attribute.length; ++j)\n                    object.attribute[j] = message.attribute[j];\n            }\n            if (message.node && message.node.length) {\n                object.node = [];\n                for (var j = 0; j < message.node.length; ++j)\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.opsetImport && message.opsetImport.length) {\n                object.opsetImport = [];\n                for (var j = 0; j < message.opsetImport.length; ++j)\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.attributeProto && message.attributeProto.length) {\n                object.attributeProto = [];\n                for (var j = 0; j < message.attributeProto.length; ++j)\n                    object.attributeProto[j] = $root.onnx.AttributeProto.toObject(message.attributeProto[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this FunctionProto to JSON.\n         * @function toJSON\n         * @memberof onnx.FunctionProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        FunctionProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for FunctionProto\n         * @function getTypeUrl\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        FunctionProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.FunctionProto\";\n        };\n\n        return FunctionProto;\n    })();\n\n    return onnx;\n})();\n\nmodule.exports = $root;\n","var _scriptDir,e=(_scriptDir=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\"undefined\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(e={}){function n(){return P.buffer!=x.buffer&&L(),x}function r(){return P.buffer!=x.buffer&&L(),W}function t(){return P.buffer!=x.buffer&&L(),I}function a(){return P.buffer!=x.buffer&&L(),U}function o(){return P.buffer!=x.buffer&&L(),j}function i(){return P.buffer!=x.buffer&&L(),H}function u(){return P.buffer!=x.buffer&&L(),q}var f,s,c;f||(f=void 0!==e?e:{}),f.ready=new Promise(((e,n)=>{s=e,c=n}));var l,p,d,h=Object.assign({},f),m=\"./this.program\",b=(e,n)=>{throw n},g=\"object\"==typeof window,y=\"function\"==typeof importScripts,v=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,w=f.ENVIRONMENT_IS_PTHREAD||!1,_=\"\";function T(e){return f.locateFile?f.locateFile(e,_):_+e}if(v){var A=require(\"fs\"),O=require(\"path\");let e;_=y?O.dirname(_)+\"/\":__dirname+\"/\",l=(e,n)=>(e=e.startsWith(\"file://\")?new URL(e):O.normalize(e),A.readFileSync(e,n?void 0:\"utf8\")),d=e=>((e=l(e,!0)).buffer||(e=new Uint8Array(e)),e),p=(e,n,r,t=!0)=>{e=e.startsWith(\"file://\")?new URL(e):O.normalize(e),A.readFile(e,t?void 0:\"utf8\",((e,a)=>{e?r(e):n(t?a.buffer:a)}))},!f.thisProgram&&1<process.argv.length&&(m=process.argv[1].replace(/\\\\/g,\"/\")),process.argv.slice(2),b=(e,n)=>{throw process.exitCode=e,n},f.inspect=()=>\"[Emscripten Module object]\";try{e=require(\"worker_threads\")}catch(e){throw console.error('The \"worker_threads\" module is not supported in this node.js build - perhaps a newer version is needed?'),e}global.Worker=e.Worker}else(g||y)&&(y?_=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(_=document.currentScript.src),_scriptDir&&(_=_scriptDir),_=0!==_.indexOf(\"blob:\")?_.substr(0,_.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):\"\",v||(l=e=>{var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.send(null),n.responseText},y&&(d=e=>{var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.responseType=\"arraybuffer\",n.send(null),new Uint8Array(n.response)}),p=(e,n,r)=>{var t=new XMLHttpRequest;t.open(\"GET\",e,!0),t.responseType=\"arraybuffer\",t.onload=()=>{200==t.status||0==t.status&&t.response?n(t.response):r()},t.onerror=r,t.send(null)}));v&&\"undefined\"==typeof performance&&(global.performance=require(\"perf_hooks\").performance);var S=console.log.bind(console),E=console.warn.bind(console);v&&(S=(...e)=>A.writeSync(1,e.join(\" \")+\"\\n\"),E=(...e)=>A.writeSync(2,e.join(\" \")+\"\\n\"));var M,C=f.print||S,k=f.printErr||E;Object.assign(f,h),h=null,f.thisProgram&&(m=f.thisProgram),f.quit&&(b=f.quit),f.wasmBinary&&(M=f.wasmBinary);var F=f.noExitRuntime||!0;\"object\"!=typeof WebAssembly&&ae(\"no native wasm support detected\");var P,R,D,x,W,I,U,j,H,Y,B,z,q,G=!1;function L(){var e=P.buffer;f.HEAP8=x=new Int8Array(e),f.HEAP16=I=new Int16Array(e),f.HEAP32=j=new Int32Array(e),f.HEAPU8=W=new Uint8Array(e),f.HEAPU16=U=new Uint16Array(e),f.HEAPU32=H=new Uint32Array(e),f.HEAPF32=Y=new Float32Array(e),f.HEAPF64=q=new Float64Array(e),f.HEAP64=B=new BigInt64Array(e),f.HEAPU64=z=new BigUint64Array(e)}var N=f.INITIAL_MEMORY||16777216;if(5242880<=N||ae(\"INITIAL_MEMORY should be larger than STACK_SIZE, was \"+N+\"! (STACK_SIZE=5242880)\"),w)P=f.wasmMemory;else if(f.wasmMemory)P=f.wasmMemory;else if(!((P=new WebAssembly.Memory({initial:N/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw k(\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\"),v&&k(\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)\"),Error(\"bad memory\");L(),N=P.buffer.byteLength;var V,J=[],X=[],Z=[],$=0;function K(){return F||0<$}function Q(){var e=f.preRun.shift();J.unshift(e)}var ee,ne=0,re=null,te=null;function ae(e){throw f.onAbort&&f.onAbort(e),k(e=\"Aborted(\"+e+\")\"),G=!0,D=1,e=new WebAssembly.RuntimeError(e+\". Build with -sASSERTIONS for more info.\"),c(e),e}function oe(e){return e.startsWith(\"data:application/octet-stream;base64,\")}function ie(e){try{if(e==ee&&M)return new Uint8Array(M);if(d)return d(e);throw\"both async and sync fetching of the wasm failed\"}catch(e){ae(e)}}function ue(e,n,r){return function(e){if(!M&&(g||y)){if(\"function\"==typeof fetch&&!e.startsWith(\"file://\"))return fetch(e,{credentials:\"same-origin\"}).then((n=>{if(!n.ok)throw\"failed to load wasm binary file at '\"+e+\"'\";return n.arrayBuffer()})).catch((()=>ie(e)));if(p)return new Promise(((n,r)=>{p(e,(e=>n(new Uint8Array(e))),r)}))}return Promise.resolve().then((()=>ie(e)))}(e).then((e=>WebAssembly.instantiate(e,n))).then((e=>e)).then(r,(e=>{k(\"failed to asynchronously prepare wasm: \"+e),ae(e)}))}function fe(e){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+e+\")\",this.status=e}function se(e){e.terminate(),e.onmessage=()=>{}}function ce(e){(e=ye.hb[e])||ae(),ye.Lb(e)}function le(e){var n=ye.Db();if(!n)return 6;ye.kb.push(n),ye.hb[e.jb]=n,n.jb=e.jb;var r={cmd:\"run\",start_routine:e.Mb,arg:e.Bb,pthread_ptr:e.jb};return v&&n.unref(),n.postMessage(r,e.Sb),0}oe(ee=\"ort-wasm-threaded.wasm\")||(ee=T(ee));var pe=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;function de(e,n,r){var t=(n>>>=0)+r;for(r=n;e[r]&&!(r>=t);)++r;if(16<r-n&&e.buffer&&pe)return pe.decode(e.buffer instanceof SharedArrayBuffer?e.slice(n,r):e.subarray(n,r));for(t=\"\";n<r;){var a=e[n++];if(128&a){var o=63&e[n++];if(192==(224&a))t+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[n++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[n++])?t+=String.fromCharCode(a):(a-=65536,t+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else t+=String.fromCharCode(a)}return t}function he(e,n){return(e>>>=0)?de(r(),e,n):\"\"}function me(e){if(w)return Dn(1,1,e);D=e,K()||(ye.Nb(),f.onExit&&f.onExit(e),G=!0),b(e,new fe(e))}function be(e){if(D=e,w)throw we(e),\"unwind\";me(e)}function ge(e){e instanceof fe||\"unwind\"==e||b(1,e)}var ye={nb:[],kb:[],zb:[],hb:{},tb:function(){w&&ye.Fb()},Vb:function(){},Fb:function(){ye.receiveObjectTransfer=ye.Kb,ye.threadInitTLS=ye.yb,ye.setExitStatus=ye.xb,F=!1},xb:function(e){D=e},Xb:[\"$terminateWorker\"],Nb:function(){for(var e of ye.kb)se(e);for(e of ye.nb)se(e);ye.nb=[],ye.kb=[],ye.hb=[]},Lb:function(e){var n=e.jb;delete ye.hb[n],ye.nb.push(e),ye.kb.splice(ye.kb.indexOf(e),1),e.jb=0,ar(n)},Kb:function(){},yb:function(){ye.zb.forEach((e=>e()))},Jb:e=>new Promise((n=>{e.onmessage=r=>{var t=(r=r.data).cmd;if(e.jb&&(ye.Cb=e.jb),r.targetThread&&r.targetThread!=Kn()){var a=ye.hb[r.Wb];a?a.postMessage(r,r.transferList):k('Internal error! Worker sent a message \"'+t+'\" to target pthread '+r.targetThread+\", but that thread no longer exists!\")}else\"checkMailbox\"===t?bn():\"spawnThread\"===t?le(r):\"cleanupThread\"===t?ce(r.thread):\"killThread\"===t?(r=r.thread,t=ye.hb[r],delete ye.hb[r],se(t),ar(r),ye.kb.splice(ye.kb.indexOf(t),1),t.jb=0):\"cancelThread\"===t?ye.hb[r.thread].postMessage({cmd:\"cancel\"}):\"loaded\"===t?(e.loaded=!0,n(e)):\"print\"===t?C(\"Thread \"+r.threadId+\": \"+r.text):\"printErr\"===t?k(\"Thread \"+r.threadId+\": \"+r.text):\"alert\"===t?alert(\"Thread \"+r.threadId+\": \"+r.text):\"setimmediate\"===r.target?e.postMessage(r):\"callHandler\"===t?f[r.handler](...r.args):t&&k(\"worker sent an unknown command \"+t);ye.Cb=void 0},e.onerror=e=>{throw k(\"worker sent an error! \"+e.filename+\":\"+e.lineno+\": \"+e.message),e},v&&(e.on(\"message\",(function(n){e.onmessage({data:n})})),e.on(\"error\",(function(n){e.onerror(n)})));var r,t=[];for(r of[\"onExit\",\"onAbort\",\"print\",\"printErr\"])f.hasOwnProperty(r)&&t.push(r);e.postMessage({cmd:\"load\",handlers:t,urlOrBlob:f.mainScriptUrlOrBlob||_scriptDir,wasmMemory:P,wasmModule:R})})),Ib:function(e){e()},Ab:function(){var e=T(\"ort-wasm-threaded.worker.js\");e=new Worker(e),ye.nb.push(e)},Db:function(){return 0==ye.nb.length&&(ye.Ab(),ye.Jb(ye.nb[0])),ye.nb.pop()}};function ve(e){for(;0<e.length;)e.shift()(f)}function we(e){if(w)return Dn(2,0,e);be(e)}f.PThread=ye,f.establishStackSpace=function(){var e=Kn(),n=o()[e+52>>2>>>0];fr(n,n-(e=o()[e+56>>2>>>0])),cr(n)};var _e=[];function Te(e){this.gb=e-24,this.ub=function(e){i()[this.gb+4>>2>>>0]=e},this.qb=function(e){i()[this.gb+8>>2>>>0]=e},this.tb=function(e,n){this.pb(),this.ub(e),this.qb(n)},this.pb=function(){i()[this.gb+16>>2>>>0]=0}}function Ae(e,n,r,t){return w?Dn(3,1,e,n,r,t):Oe(e,n,r,t)}function Oe(e,n,r,t){if(\"undefined\"==typeof SharedArrayBuffer)return k(\"Current environment does not support SharedArrayBuffer, pthreads are not available!\"),6;var a=[];return w&&0===a.length?Ae(e,n,r,t):(e={Mb:r,jb:e,Bb:t,Sb:a},w?(e.Ub=\"spawnThread\",postMessage(e,a),0):le(e))}function Se(e,n,r){return w?Dn(4,1,e,n,r):0}function Ee(e,n){if(w)return Dn(5,1,e,n)}function Me(e){for(var n=0,r=0;r<e.length;++r){var t=e.charCodeAt(r);127>=t?n++:2047>=t?n+=2:55296<=t&&57343>=t?(n+=4,++r):n+=3}return n}function Ce(e,n,r,t){if(!(0<t))return 0;var a=r>>>=0;t=r+t-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(r>=t)break;n[r++>>>0]=i}else{if(2047>=i){if(r+1>=t)break;n[r++>>>0]=192|i>>6}else{if(65535>=i){if(r+2>=t)break;n[r++>>>0]=224|i>>12}else{if(r+3>=t)break;n[r++>>>0]=240|i>>18,n[r++>>>0]=128|i>>12&63}n[r++>>>0]=128|i>>6&63}n[r++>>>0]=128|63&i}}return n[r>>>0]=0,r-a}function ke(e,n,t){return Ce(e,r(),n,t)}function Fe(e,n){if(w)return Dn(6,1,e,n)}function Pe(e,n,r){if(w)return Dn(7,1,e,n,r)}function Re(e,n,r){return w?Dn(8,1,e,n,r):0}function De(e,n){if(w)return Dn(9,1,e,n)}function xe(e,n,r){if(w)return Dn(10,1,e,n,r)}function We(e,n,r,t){if(w)return Dn(11,1,e,n,r,t)}function Ie(e,n,r,t){if(w)return Dn(12,1,e,n,r,t)}function Ue(e,n,r,t){if(w)return Dn(13,1,e,n,r,t)}function je(e){if(w)return Dn(14,1,e)}function He(e,n){if(w)return Dn(15,1,e,n)}function Ye(e,n,r){if(w)return Dn(16,1,e,n,r)}function Be(e){if(null===e)return\"null\";var n=typeof e;return\"object\"===n||\"array\"===n||\"function\"===n?e.toString():\"\"+e}f.invokeEntryPoint=function(e,n){var r=_e[e];r||(e>=_e.length&&(_e.length=e+1),_e[e]=r=V.get(e)),e=r(n),K()?ye.xb(e):ir(e)};var ze=void 0;function qe(e){for(var n=\"\";r()[e>>>0];)n+=ze[r()[e++>>>0]];return n}var Ge={},Le={},Ne={};function Ve(e){if(void 0===e)return\"_unknown\";var n=(e=e.replace(/[^a-zA-Z0-9_]/g,\"$\")).charCodeAt(0);return 48<=n&&57>=n?\"_\"+e:e}function Je(e,n){return{[e=Ve(e)]:function(){return n.apply(this,arguments)}}[e]}function Xe(e){var n=Error,r=Je(e,(function(n){this.name=e,this.message=n,void 0!==(n=Error(n).stack)&&(this.stack=this.toString()+\"\\n\"+n.replace(/^Error(:[^\\n]*)?\\n/,\"\"))}));return r.prototype=Object.create(n.prototype),r.prototype.constructor=r,r.prototype.toString=function(){return void 0===this.message?this.name:this.name+\": \"+this.message},r}var Ze=void 0;function $e(e){throw new Ze(e)}function Ke(e,n,r={}){if(!(\"argPackAdvance\"in n))throw new TypeError(\"registerType registeredInstance requires argPackAdvance\");var t=n.name;if(e||$e('type \"'+t+'\" must have a positive integer typeid pointer'),Le.hasOwnProperty(e)){if(r.Eb)return;$e(\"Cannot register type '\"+t+\"' twice\")}Le[e]=n,delete Ne[e],Ge.hasOwnProperty(e)&&(n=Ge[e],delete Ge[e],n.forEach((e=>e())))}function Qe(e,u,f){switch(u){case 0:return f?function(e){return n()[e>>>0]}:function(e){return r()[e>>>0]};case 1:return f?function(e){return t()[e>>>1]}:function(e){return a()[e>>>1]};case 2:return f?function(e){return o()[e>>>2]}:function(e){return i()[e>>>2]};case 3:return f?function(e){return B[e>>3]}:function(e){return z[e>>3]};default:throw new TypeError(\"Unknown integer type: \"+e)}}function en(e){switch(e){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError(\"Unknown type size: \"+e)}}var nn=new function(){this.gb=[void 0],this.pb=[],this.get=function(e){return this.gb[e]},this.ub=function(e){let n=this.pb.pop()||this.gb.length;return this.gb[n]=e,n},this.Hb=function(e){this.gb[e]=void 0,this.pb.push(e)}};function rn(e){e>=nn.qb&&0==--nn.get(e).wb&&nn.Hb(e)}var tn=e=>(e||$e(\"Cannot use deleted val. handle = \"+e),nn.get(e).value),an=e=>{switch(e){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:return nn.ub({wb:1,value:e})}};function on(e){return this.fromWireType(o()[e>>2>>>0])}function un(e,n){switch(n){case 2:return function(e){var n=this.fromWireType;return P.buffer!=x.buffer&&L(),n.call(this,Y[e>>>2])};case 3:return function(e){return this.fromWireType(u()[e>>>3])};default:throw new TypeError(\"Unknown float type: \"+e)}}var fn=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf-16le\"):void 0;function sn(e,n){for(var o=e>>1,i=o+n/2;!(o>=i)&&a()[o>>>0];)++o;if(32<(o<<=1)-e&&fn)return fn.decode(r().slice(e,o));for(o=\"\",i=0;!(i>=n/2);++i){var u=t()[e+2*i>>1>>>0];if(0==u)break;o+=String.fromCharCode(u)}return o}function cn(e,n,r){if(void 0===r&&(r=2147483647),2>r)return 0;var a=n;r=(r-=2)<2*e.length?r/2:e.length;for(var o=0;o<r;++o){var i=e.charCodeAt(o);t()[n>>1>>>0]=i,n+=2}return t()[n>>1>>>0]=0,n-a}function ln(e){return 2*e.length}function pn(e,n){for(var r=0,t=\"\";!(r>=n/4);){var a=o()[e+4*r>>2>>>0];if(0==a)break;++r,65536<=a?(a-=65536,t+=String.fromCharCode(55296|a>>10,56320|1023&a)):t+=String.fromCharCode(a)}return t}function dn(e,n,r){if(void 0===r&&(r=2147483647),4>r)return 0;var t=n>>>=0;r=t+r-4;for(var a=0;a<e.length;++a){var i=e.charCodeAt(a);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++a)),o()[n>>2>>>0]=i,(n+=4)+4>r)break}return o()[n>>2>>>0]=0,n-t}function hn(e){for(var n=0,r=0;r<e.length;++r){var t=e.charCodeAt(r);55296<=t&&57343>=t&&++r,n+=4}return n}function mn(e){\"function\"==typeof Atomics.Tb&&(Atomics.Tb(o(),e>>2,e).value.then(bn),e+=128,Atomics.store(o(),e>>2,1))}function bn(){var e=Kn();e&&(mn(e),function(e){if(!G)try{if(ur(),!K())try{w?ir(D):be(D)}catch(e){ge(e)}}catch(e){ge(e)}}())}function gn(e,n){var r=Le[e];if(void 0===r){var t=qe(e=nr(e));er(e),$e(n+\" has unknown type \"+t)}return r}f.__emscripten_thread_mailbox_await=mn,f.checkMailbox=bn;var yn={};function vn(e){var n=yn[e];return void 0===n?qe(e):n}var wn=[];function _n(){return\"object\"==typeof globalThis?globalThis:Function(\"return this\")()}var Tn=[],An={};function On(e){return i()[e>>>2]+4294967296*o()[e+4>>>2]}function Sn(e){return 0==e%4&&(0!=e%100||0==e%400)}var En,Mn=[0,31,60,91,121,152,182,213,244,274,305,335],Cn=[0,31,59,90,120,151,181,212,243,273,304,334];function kn(e){return(Sn(e.getFullYear())?Mn:Cn)[e.getMonth()]+e.getDate()-1}function Fn(e,n,r,t,a,o,i){return w?Dn(17,1,e,n,r,t,a,o,i):-52}function Pn(e,n,r,t,a,o){if(w)return Dn(18,1,e,n,r,t,a,o)}function Rn(e){var n=Me(e)+1,r=Qn(n);return r&&ke(e,r,n),r}function Dn(e,n){var r=arguments.length-2,t=arguments;return function(e){var n=sr();return e=e(),cr(n),e}((()=>{for(var a=2*r,o=lr(8*a),i=o>>3,f=0;f<r;f++){var s=t[2+f];\"bigint\"==typeof s?(B[i+2*f]=1n,B[i+2*f+1]=s):(B[i+2*f]=0n,u()[i+2*f+1>>>0]=s)}return tr(e,a,o,n)}))}En=v?()=>{var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:()=>performance.timeOrigin+performance.now();var xn,Wn=[],In={};function Un(){if(!xn){var e,n={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:m||\"./this.program\"};for(e in In)void 0===In[e]?delete n[e]:n[e]=In[e];var r=[];for(e in n)r.push(e+\"=\"+n[e]);xn=r}return xn}function jn(e,r){if(w)return Dn(19,1,e,r);var t=0;return Un().forEach((function(a,o){var u=r+t;for(o=i()[e+4*o>>2>>>0]=u,u=0;u<a.length;++u)n()[o++>>0>>>0]=a.charCodeAt(u);n()[o>>0>>>0]=0,t+=a.length+1})),0}function Hn(e,n){if(w)return Dn(20,1,e,n);var r=Un();i()[e>>2>>>0]=r.length;var t=0;return r.forEach((function(e){t+=e.length+1})),i()[n>>2>>>0]=t,0}function Yn(e){return w?Dn(21,1,e):52}function Bn(e,n,r,t){return w?Dn(22,1,e,n,r,t):52}function zn(e,n,r,t){return w?Dn(23,1,e,n,r,t):70}var qn=[null,[],[]];function Gn(e,n,t,a){if(w)return Dn(24,1,e,n,t,a);for(var o=0,u=0;u<t;u++){var f=i()[n>>2>>>0],s=i()[n+4>>2>>>0];n+=8;for(var c=0;c<s;c++){var l=r()[f+c>>>0],p=qn[e];0===l||10===l?((1===e?C:k)(de(p,0)),p.length=0):p.push(l)}o+=s}return i()[a>>2>>>0]=o,0}var Ln=[31,29,31,30,31,30,31,31,30,31,30,31],Nn=[31,28,31,30,31,30,31,31,30,31,30,31];function Vn(e,r,t,a){function i(e,n,r){for(e=\"number\"==typeof e?e.toString():e||\"\";e.length<n;)e=r[0]+e;return e}function u(e,n){return i(e,n,\"0\")}function f(e,n){function r(e){return 0>e?-1:0<e?1:0}var t;return 0===(t=r(e.getFullYear()-n.getFullYear()))&&0===(t=r(e.getMonth()-n.getMonth()))&&(t=r(e.getDate()-n.getDate())),t}function s(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function c(e){var n=e.lb;for(e=new Date(new Date(e.mb+1900,0,1).getTime());0<n;){var r=e.getMonth(),t=(Sn(e.getFullYear())?Ln:Nn)[r];if(!(n>t-e.getDate())){e.setDate(e.getDate()+n);break}n-=t-e.getDate()+1,e.setDate(1),11>r?e.setMonth(r+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return r=new Date(e.getFullYear()+1,0,4),n=s(new Date(e.getFullYear(),0,4)),r=s(r),0>=f(n,e)?0>=f(r,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var l=o()[a+40>>2>>>0];for(var p in a={Qb:o()[a>>2>>>0],Pb:o()[a+4>>2>>>0],rb:o()[a+8>>2>>>0],vb:o()[a+12>>2>>>0],sb:o()[a+16>>2>>>0],mb:o()[a+20>>2>>>0],ib:o()[a+24>>2>>>0],lb:o()[a+28>>2>>>0],Yb:o()[a+32>>2>>>0],Ob:o()[a+36>>2>>>0],Rb:l?he(l):\"\"},t=he(t),l={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"})t=t.replace(new RegExp(p,\"g\"),l[p]);var d=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),h=\"January February March April May June July August September October November December\".split(\" \");for(p in l={\"%a\":function(e){return d[e.ib].substring(0,3)},\"%A\":function(e){return d[e.ib]},\"%b\":function(e){return h[e.sb].substring(0,3)},\"%B\":function(e){return h[e.sb]},\"%C\":function(e){return u((e.mb+1900)/100|0,2)},\"%d\":function(e){return u(e.vb,2)},\"%e\":function(e){return i(e.vb,2,\" \")},\"%g\":function(e){return c(e).toString().substring(2)},\"%G\":function(e){return c(e)},\"%H\":function(e){return u(e.rb,2)},\"%I\":function(e){return 0==(e=e.rb)?e=12:12<e&&(e-=12),u(e,2)},\"%j\":function(e){for(var n=0,r=0;r<=e.sb-1;n+=(Sn(e.mb+1900)?Ln:Nn)[r++]);return u(e.vb+n,3)},\"%m\":function(e){return u(e.sb+1,2)},\"%M\":function(e){return u(e.Pb,2)},\"%n\":function(){return\"\\n\"},\"%p\":function(e){return 0<=e.rb&&12>e.rb?\"AM\":\"PM\"},\"%S\":function(e){return u(e.Qb,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(e){return e.ib||7},\"%U\":function(e){return u(Math.floor((e.lb+7-e.ib)/7),2)},\"%V\":function(e){var n=Math.floor((e.lb+7-(e.ib+6)%7)/7);if(2>=(e.ib+371-e.lb-2)%7&&n++,n)53==n&&(4==(r=(e.ib+371-e.lb)%7)||3==r&&Sn(e.mb)||(n=1));else{n=52;var r=(e.ib+7-e.lb-1)%7;(4==r||5==r&&Sn(e.mb%400-1))&&n++}return u(n,2)},\"%w\":function(e){return e.ib},\"%W\":function(e){return u(Math.floor((e.lb+7-(e.ib+6)%7)/7),2)},\"%y\":function(e){return(e.mb+1900).toString().substring(2)},\"%Y\":function(e){return e.mb+1900},\"%z\":function(e){var n=0<=(e=e.Ob);return e=Math.abs(e)/60,(n?\"+\":\"-\")+String(\"0000\"+(e/60*100+e%60)).slice(-4)},\"%Z\":function(e){return e.Rb},\"%%\":function(){return\"%\"}},t=t.replace(/%%/g,\"\\0\\0\"),l)t.includes(p)&&(t=t.replace(new RegExp(p,\"g\"),l[p](a)));return p=function(e){var n=Array(Me(e)+1);return Ce(e,n,0,n.length),n}(t=t.replace(/\\0\\0/g,\"%\")),p.length>r?0:(function(e,r){n().set(e,r>>>0)}(p,e),p.length-1)}ye.tb();for(var Jn=Array(256),Xn=0;256>Xn;++Xn)Jn[Xn]=String.fromCharCode(Xn);ze=Jn,Ze=f.BindingError=Xe(\"BindingError\"),f.InternalError=Xe(\"InternalError\"),nn.gb.push({value:void 0},{value:null},{value:!0},{value:!1}),nn.qb=nn.gb.length,f.count_emval_handles=function(){for(var e=0,n=nn.qb;n<nn.gb.length;++n)void 0!==nn.gb[n]&&++e;return e};var Zn=[null,me,we,Ae,Se,Ee,Fe,Pe,Re,De,xe,We,Ie,Ue,je,He,Ye,Fn,Pn,jn,Hn,Yn,Bn,zn,Gn],$n={b:function(e,n,r){throw new Te(e).tb(n,r),e},ra:function(){ae(\"To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html\")},ga:function(e){rr(e,!y,1,!g),ye.yb()},D:function(e){w?postMessage({cmd:\"cleanupThread\",thread:e}):ce(e)},W:Oe,y:Se,na:Ee,S:Fe,U:Pe,L:Re,ka:De,ba:xe,ja:We,F:Ie,T:Ue,Q:je,la:He,R:Ye,I:function(e,n,r,t,a){n=qe(n),r=en(r);var o=-1!=n.indexOf(\"u\");o&&(a=(1n<<64n)-1n),Ke(e,{name:n,fromWireType:function(e){return e},toWireType:function(e,r){if(\"bigint\"!=typeof r&&\"number\"!=typeof r)throw new TypeError('Cannot convert \"'+Be(r)+'\" to '+this.name);if(r<t||r>a)throw new TypeError('Passing a number \"'+Be(r)+'\" from JS side to C/C++ side to an argument of type \"'+n+'\", which is outside the valid range ['+t+\", \"+a+\"]!\");return r},argPackAdvance:8,readValueFromPointer:Qe(n,r,!o),ob:null})},ta:function(e,r,a,i,u){var f=en(a);Ke(e,{name:r=qe(r),fromWireType:function(e){return!!e},toWireType:function(e,n){return n?i:u},argPackAdvance:8,readValueFromPointer:function(e){if(1===a)var i=n();else if(2===a)i=t();else{if(4!==a)throw new TypeError(\"Unknown boolean type size: \"+r);i=o()}return this.fromWireType(i[e>>>f])},ob:null})},sa:function(e,n){Ke(e,{name:n=qe(n),fromWireType:function(e){var n=tn(e);return rn(e),n},toWireType:function(e,n){return an(n)},argPackAdvance:8,readValueFromPointer:on,ob:null})},H:function(e,n,r){r=en(r),Ke(e,{name:n=qe(n),fromWireType:function(e){return e},toWireType:function(e,n){return n},argPackAdvance:8,readValueFromPointer:un(n,r),ob:null})},u:function(e,n,r,t,a){n=qe(n),-1===a&&(a=4294967295),a=en(r);var o=e=>e;if(0===t){var i=32-8*r;o=e=>e<<i>>>i}r=n.includes(\"unsigned\")?function(e,n){return n>>>0}:function(e,n){return n},Ke(e,{name:n,fromWireType:o,toWireType:r,argPackAdvance:8,readValueFromPointer:Qe(n,a,0!==t),ob:null})},m:function(e,n,r){function t(e){e>>=2;var n=i();return new a(n.buffer,n[e+1>>>0],n[e>>>0])}var a=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array][n];Ke(e,{name:r=qe(r),fromWireType:t,argPackAdvance:8,readValueFromPointer:t},{Eb:!0})},J:function(e,n){var t=\"std::string\"===(n=qe(n));Ke(e,{name:n,fromWireType:function(e){var n=i()[e>>2>>>0],a=e+4;if(t)for(var o=a,u=0;u<=n;++u){var f=a+u;if(u==n||0==r()[f>>>0]){if(o=he(o,f-o),void 0===s)var s=o;else s+=String.fromCharCode(0),s+=o;o=f+1}}else{for(s=Array(n),u=0;u<n;++u)s[u]=String.fromCharCode(r()[a+u>>>0]);s=s.join(\"\")}return er(e),s},toWireType:function(e,n){n instanceof ArrayBuffer&&(n=new Uint8Array(n));var a=\"string\"==typeof n;a||n instanceof Uint8Array||n instanceof Uint8ClampedArray||n instanceof Int8Array||$e(\"Cannot pass non-string to std::string\");var o=t&&a?Me(n):n.length,u=Qn(4+o+1),f=u+4>>>0;if(i()[u>>2>>>0]=o,t&&a)ke(n,f,o+1);else if(a)for(a=0;a<o;++a){var s=n.charCodeAt(a);255<s&&(er(f),$e(\"String has UTF-16 code units that do not fit in 8 bits\")),r()[f+a>>>0]=s}else for(a=0;a<o;++a)r()[f+a>>>0]=n[a];return null!==e&&e.push(er,u),u},argPackAdvance:8,readValueFromPointer:on,ob:function(e){er(e)}})},A:function(e,n,r){if(r=qe(r),2===n)var t=sn,o=cn,u=ln,f=()=>a(),s=1;else 4===n&&(t=pn,o=dn,u=hn,f=()=>i(),s=2);Ke(e,{name:r,fromWireType:function(e){for(var r,a=i()[e>>>2],o=f(),u=e+4,c=0;c<=a;++c){var l=e+4+c*n;c!=a&&0!=o[l>>>s]||(u=t(u,l-u),void 0===r?r=u:(r+=String.fromCharCode(0),r+=u),u=l+n)}return er(e),r},toWireType:function(e,t){\"string\"!=typeof t&&$e(\"Cannot pass non-string to C++ string type \"+r);var a=u(t),f=Qn(4+a+n);return f>>>=0,i()[f>>>2]=a>>s,o(t,f+4,a+n),null!==e&&e.push(er,f),f},argPackAdvance:8,readValueFromPointer:on,ob:function(e){er(e)}})},ua:function(e,n){Ke(e,{Gb:!0,name:n=qe(n),argPackAdvance:0,fromWireType:function(){},toWireType:function(){}})},X:function(){return 131072},qa:function(){return!0},O:function(e,n){e==n?setTimeout((()=>bn())):w?postMessage({targetThread:e,cmd:\"checkMailbox\"}):(e=ye.hb[e])&&e.postMessage({cmd:\"checkMailbox\"})},ea:function(){return-1},fa:mn,pa:function(e){v&&ye.hb[e].ref()},r:function(e,n,r){e=tn(e),n=gn(n,\"emval::as\");var t=[],a=an(t);return i()[r>>2>>>0]=a,n.toWireType(t,e)},i:function(e,n,r,t,a){e=wn[e],n=tn(n),r=vn(r);var o=[];return i()[t>>2>>>0]=an(o),e(n,r,o,a)},s:function(e,n,r,t){(e=wn[e])(n=tn(n),r=vn(r),null,t)},c:rn,K:function(e,n){return(e=tn(e))==tn(n)},o:function(e){return 0===e?an(_n()):(e=vn(e),an(_n()[e]))},g:function(e,n){var r=function(e,n){for(var r=Array(e),t=0;t<e;++t)r[t]=gn(i()[n+4*t>>2>>>0],\"parameter \"+t);return r}(e,n),t=r[0];n=t.name+\"_$\"+r.slice(1).map((function(e){return e.name})).join(\"_\")+\"$\";var a=Tn[n];if(void 0!==a)return a;a=[\"retType\"];for(var o=[t],u=\"\",f=0;f<e-1;++f)u+=(0!==f?\", \":\"\")+\"arg\"+f,a.push(\"argType\"+f),o.push(r[1+f]);var s=\"return function \"+Ve(\"methodCaller_\"+n)+\"(handle, name, destructors, args) {\\n\",c=0;for(f=0;f<e-1;++f)s+=\"    var arg\"+f+\" = argType\"+f+\".readValueFromPointer(args\"+(c?\"+\"+c:\"\")+\");\\n\",c+=r[f+1].argPackAdvance;for(s+=\"    var rv = handle[name](\"+u+\");\\n\",f=0;f<e-1;++f)r[f+1].deleteObject&&(s+=\"    argType\"+f+\".deleteObject(arg\"+f+\");\\n\");return t.Gb||(s+=\"    return retType.toWireType(destructors, rv);\\n\"),a.push(s+\"};\\n\"),e=function(e){var n=Function;if(!(n instanceof Function))throw new TypeError(\"new_ called with constructor type \"+typeof n+\" which is not a function\");var r=Je(n.name||\"unknownFunctionName\",(function(){}));return r.prototype=n.prototype,r=new r,(e=n.apply(r,e))instanceof Object?e:r}(a).apply(null,o),a=function(e){var n=wn.length;return wn.push(e),n}(e),Tn[n]=a},t:function(e,n){return e=tn(e),n=tn(n),an(e[n])},d:function(e){4<e&&(nn.get(e).wb+=1)},x:function(e,n,r,t){e=tn(e);var a=An[n];return a||(a=function(e){for(var n=\"\",r=0;r<e;++r)n+=(0!==r?\", \":\"\")+\"arg\"+r;var t=\"return function emval_allocator_\"+e+\"(constructor, argTypes, args) {\\n  var HEAPU32 = getMemory();\\n\";for(r=0;r<e;++r)t+=\"var argType\"+r+\" = requireRegisteredType(HEAPU32[((argTypes)>>2)], 'parameter \"+r+\"');\\nvar arg\"+r+\" = argType\"+r+\".readValueFromPointer(args);\\nargs += argType\"+r+\"['argPackAdvance'];\\nargTypes += 4;\\n\";return new Function(\"requireRegisteredType\",\"Module\",\"valueToHandle\",\"getMemory\",t+\"var obj = new constructor(\"+n+\");\\nreturn valueToHandle(obj);\\n}\\n\")(gn,f,an,(()=>i()))}(n),An[n]=a),a(e,r,t)},v:function(){return an([])},l:function(e){e=tn(e);for(var n=Array(e.length),r=0;r<e.length;r++)n[r]=e[r];return an(n)},e:function(e){return an(vn(e))},k:function(){return an({})},h:function(e){for(var n=tn(e);n.length;){var r=n.pop();n.pop()(r)}rn(e)},j:function(e,n,r){e=tn(e),n=tn(n),r=tn(r),e[n]=r},f:function(e,n){return e=(e=gn(e,\"_emval_take_value\")).readValueFromPointer(n),an(e)},_:function(e,n){e=new Date(1e3*On(e)),o()[n>>2>>>0]=e.getUTCSeconds(),o()[n+4>>2>>>0]=e.getUTCMinutes(),o()[n+8>>2>>>0]=e.getUTCHours(),o()[n+12>>2>>>0]=e.getUTCDate(),o()[n+16>>2>>>0]=e.getUTCMonth(),o()[n+20>>2>>>0]=e.getUTCFullYear()-1900,o()[n+24>>2>>>0]=e.getUTCDay(),e=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,o()[n+28>>2>>>0]=e},$:function(e,n){e=new Date(1e3*On(e)),o()[n>>2>>>0]=e.getSeconds(),o()[n+4>>2>>>0]=e.getMinutes(),o()[n+8>>2>>>0]=e.getHours(),o()[n+12>>2>>>0]=e.getDate(),o()[n+16>>2>>>0]=e.getMonth(),o()[n+20>>2>>>0]=e.getFullYear()-1900,o()[n+24>>2>>>0]=e.getDay();var r=0|kn(e);o()[n+28>>2>>>0]=r,o()[n+36>>2>>>0]=-60*e.getTimezoneOffset(),r=new Date(e.getFullYear(),6,1).getTimezoneOffset();var t=new Date(e.getFullYear(),0,1).getTimezoneOffset();e=0|(r!=t&&e.getTimezoneOffset()==Math.min(t,r)),o()[n+32>>2>>>0]=e},aa:function(e){var n=new Date(o()[e+20>>2>>>0]+1900,o()[e+16>>2>>>0],o()[e+12>>2>>>0],o()[e+8>>2>>>0],o()[e+4>>2>>>0],o()[e>>2>>>0],0),r=o()[e+32>>2>>>0],t=n.getTimezoneOffset(),a=new Date(n.getFullYear(),6,1).getTimezoneOffset(),i=new Date(n.getFullYear(),0,1).getTimezoneOffset(),u=Math.min(i,a);return 0>r?o()[e+32>>2>>>0]=Number(a!=i&&u==t):0<r!=(u==t)&&(a=Math.max(i,a),n.setTime(n.getTime()+6e4*((0<r?u:a)-t))),o()[e+24>>2>>>0]=n.getDay(),r=0|kn(n),o()[e+28>>2>>>0]=r,o()[e>>2>>>0]=n.getSeconds(),o()[e+4>>2>>>0]=n.getMinutes(),o()[e+8>>2>>>0]=n.getHours(),o()[e+12>>2>>>0]=n.getDate(),o()[e+16>>2>>>0]=n.getMonth(),o()[e+20>>2>>>0]=n.getYear(),n.getTime()/1e3|0},Y:Fn,Z:Pn,N:function(e,n,r){function t(e){return(e=e.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?e[1]:\"GMT\"}var a=(new Date).getFullYear(),u=new Date(a,0,1),f=new Date(a,6,1);a=u.getTimezoneOffset();var s=f.getTimezoneOffset(),c=Math.max(a,s);i()[e>>2>>>0]=60*c,o()[n>>2>>>0]=Number(a!=s),e=t(u),n=t(f),e=Rn(e),n=Rn(n),s<a?(i()[r>>2>>>0]=e,i()[r+4>>2>>>0]=n):(i()[r>>2>>>0]=n,i()[r+4>>2>>>0]=e)},n:function(){ae(\"\")},va:function(){ae(\"To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html\")},E:function(){},G:function(){return Date.now()},oa:function(){throw $+=1,\"unwind\"},P:function(){return 4294901760},q:En,w:function(){return v?require(\"os\").cpus().length:navigator.hardwareConcurrency},da:function(e,n,r){n/=2,Wn.length=n,r>>=3;for(var t=0;t<n;t++)Wn[t]=B[r+2*t]?B[r+2*t+1]:u()[r+2*t+1>>>0];return Zn[e].apply(null,Wn)},M:function(e){var n=r().length;if((e>>>=0)<=n||4294901760<e)return!1;for(var t=1;4>=t;t*=2){var a=n*(1+.2/t);a=Math.min(a,e+100663296);var o=Math,i=o.min;a=Math.max(e,a),a+=(65536-a%65536)%65536;e:{var u=P.buffer;try{P.grow(i.call(o,4294901760,a)-u.byteLength+65535>>>16),L();var f=1;break e}catch(e){}f=void 0}if(f)return!0}return!1},ha:jn,ia:Hn,V:be,z:Yn,C:Bn,ca:zn,B:Gn,a:P||f.wasmMemory,ma:Vn,p:function(e,n,r,t){return Vn(e,n,r,t)}};!function(){function e(e,n){return e=e.exports,f.asm=e,ye.zb.push(f.asm.Ua),V=f.asm.Xa,X.unshift(f.asm.wa),R=n,ye.Ib((()=>{if(ne--,f.monitorRunDependencies&&f.monitorRunDependencies(ne),0==ne&&(null!==re&&(clearInterval(re),re=null),te)){var e=te;te=null,e()}})),e}var n={a:$n};if(ne++,f.monitorRunDependencies&&f.monitorRunDependencies(ne),f.instantiateWasm)try{return f.instantiateWasm(n,e)}catch(e){k(\"Module.instantiateWasm callback failed with error: \"+e),c(e)}(function(e,n){var r=ee;return M||\"function\"!=typeof WebAssembly.instantiateStreaming||oe(r)||r.startsWith(\"file://\")||v||\"function\"!=typeof fetch?ue(r,e,n):fetch(r,{credentials:\"same-origin\"}).then((t=>WebAssembly.instantiateStreaming(t,e).then(n,(function(t){return k(\"wasm streaming compile failed: \"+t),k(\"falling back to ArrayBuffer instantiation\"),ue(r,e,n)}))))})(n,(function(n){e(n.instance,n.module)})).catch(c)}(),f._OrtInit=function(){return(f._OrtInit=f.asm.xa).apply(null,arguments)},f._OrtGetLastError=function(){return(f._OrtGetLastError=f.asm.ya).apply(null,arguments)},f._OrtCreateSessionOptions=function(){return(f._OrtCreateSessionOptions=f.asm.za).apply(null,arguments)},f._OrtAppendExecutionProvider=function(){return(f._OrtAppendExecutionProvider=f.asm.Aa).apply(null,arguments)},f._OrtAddSessionConfigEntry=function(){return(f._OrtAddSessionConfigEntry=f.asm.Ba).apply(null,arguments)},f._OrtReleaseSessionOptions=function(){return(f._OrtReleaseSessionOptions=f.asm.Ca).apply(null,arguments)},f._OrtCreateSession=function(){return(f._OrtCreateSession=f.asm.Da).apply(null,arguments)},f._OrtReleaseSession=function(){return(f._OrtReleaseSession=f.asm.Ea).apply(null,arguments)},f._OrtGetInputOutputCount=function(){return(f._OrtGetInputOutputCount=f.asm.Fa).apply(null,arguments)},f._OrtGetInputName=function(){return(f._OrtGetInputName=f.asm.Ga).apply(null,arguments)},f._OrtGetOutputName=function(){return(f._OrtGetOutputName=f.asm.Ha).apply(null,arguments)},f._OrtFree=function(){return(f._OrtFree=f.asm.Ia).apply(null,arguments)},f._OrtCreateTensor=function(){return(f._OrtCreateTensor=f.asm.Ja).apply(null,arguments)},f._OrtGetTensorData=function(){return(f._OrtGetTensorData=f.asm.Ka).apply(null,arguments)},f._OrtReleaseTensor=function(){return(f._OrtReleaseTensor=f.asm.La).apply(null,arguments)},f._OrtCreateRunOptions=function(){return(f._OrtCreateRunOptions=f.asm.Ma).apply(null,arguments)},f._OrtAddRunConfigEntry=function(){return(f._OrtAddRunConfigEntry=f.asm.Na).apply(null,arguments)},f._OrtReleaseRunOptions=function(){return(f._OrtReleaseRunOptions=f.asm.Oa).apply(null,arguments)},f._OrtRun=function(){return(f._OrtRun=f.asm.Pa).apply(null,arguments)},f._OrtEndProfiling=function(){return(f._OrtEndProfiling=f.asm.Qa).apply(null,arguments)};var Kn=f._pthread_self=function(){return(Kn=f._pthread_self=f.asm.Ra).apply(null,arguments)},Qn=f._malloc=function(){return(Qn=f._malloc=f.asm.Sa).apply(null,arguments)},er=f._free=function(){return(er=f._free=f.asm.Ta).apply(null,arguments)};function nr(){return(nr=f.asm.Va).apply(null,arguments)}f.__emscripten_tls_init=function(){return(f.__emscripten_tls_init=f.asm.Ua).apply(null,arguments)},f.__embind_initialize_bindings=function(){return(f.__embind_initialize_bindings=f.asm.Wa).apply(null,arguments)};var rr=f.__emscripten_thread_init=function(){return(rr=f.__emscripten_thread_init=f.asm.Ya).apply(null,arguments)};function tr(){return(tr=f.asm._a).apply(null,arguments)}function ar(){return(ar=f.asm.$a).apply(null,arguments)}f.__emscripten_thread_crashed=function(){return(f.__emscripten_thread_crashed=f.asm.Za).apply(null,arguments)};var or,ir=f.__emscripten_thread_exit=function(){return(ir=f.__emscripten_thread_exit=f.asm.ab).apply(null,arguments)},ur=f.__emscripten_check_mailbox=function(){return(ur=f.__emscripten_check_mailbox=f.asm.bb).apply(null,arguments)};function fr(){return(fr=f.asm.cb).apply(null,arguments)}function sr(){return(sr=f.asm.db).apply(null,arguments)}function cr(){return(cr=f.asm.eb).apply(null,arguments)}function lr(){return(lr=f.asm.fb).apply(null,arguments)}function pr(){function e(){if(!or&&(or=!0,f.calledRun=!0,!G)&&(w||ve(X),s(f),f.onRuntimeInitialized&&f.onRuntimeInitialized(),!w)){if(f.postRun)for(\"function\"==typeof f.postRun&&(f.postRun=[f.postRun]);f.postRun.length;){var e=f.postRun.shift();Z.unshift(e)}ve(Z)}}if(!(0<ne))if(w)s(f),w||ve(X),startWorker(f);else{if(f.preRun)for(\"function\"==typeof f.preRun&&(f.preRun=[f.preRun]);f.preRun.length;)Q();ve(J),0<ne||(f.setStatus?(f.setStatus(\"Running...\"),setTimeout((function(){setTimeout((function(){f.setStatus(\"\")}),1),e()}),1)):e())}}if(f.keepRuntimeAlive=K,f.wasmMemory=P,f.stackAlloc=lr,f.stackSave=sr,f.stackRestore=cr,f.UTF8ToString=he,f.stringToUTF8=ke,f.lengthBytesUTF8=Me,f.ExitStatus=fe,f.PThread=ye,te=function e(){or||pr(),or||(te=e)},f.preInit)for(\"function\"==typeof f.preInit&&(f.preInit=[f.preInit]);0<f.preInit.length;)f.preInit.pop()();return pr(),e.ready});\"object\"==typeof exports&&\"object\"==typeof module?module.exports=e:\"function\"==typeof define&&define.amd?define([],(function(){return e})):\"object\"==typeof exports&&(exports.ortWasmThreaded=e);\n","\nvar ortWasm = (() => {\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\n  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;\n  return (\nfunction(ortWasm = {})  {\n\nvar e;e||(e=typeof ortWasm !== 'undefined' ? ortWasm : {});var aa,m;e.ready=new Promise((a,b)=>{aa=a;m=b});var ba=Object.assign({},e),ca=\"./this.program\",da=\"object\"==typeof window,r=\"function\"==typeof importScripts,ea=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,v=\"\",fa,w,y;\nif(ea){var fs=require(\"fs\"),ha=require(\"path\");v=r?ha.dirname(v)+\"/\":__dirname+\"/\";fa=(a,b)=>{a=a.startsWith(\"file://\")?new URL(a):ha.normalize(a);return fs.readFileSync(a,b?void 0:\"utf8\")};y=a=>{a=fa(a,!0);a.buffer||(a=new Uint8Array(a));return a};w=(a,b,c,d=!0)=>{a=a.startsWith(\"file://\")?new URL(a):ha.normalize(a);fs.readFile(a,d?void 0:\"utf8\",(g,h)=>{g?c(g):b(d?h.buffer:h)})};!e.thisProgram&&1<process.argv.length&&(ca=process.argv[1].replace(/\\\\/g,\"/\"));process.argv.slice(2);e.inspect=()=>\"[Emscripten Module object]\"}else if(da||\nr)r?v=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(v=document.currentScript.src),_scriptDir&&(v=_scriptDir),0!==v.indexOf(\"blob:\")?v=v.substr(0,v.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):v=\"\",fa=a=>{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.send(null);return b.responseText},r&&(y=a=>{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.responseType=\"arraybuffer\";b.send(null);return new Uint8Array(b.response)}),w=(a,b,c)=>{var d=new XMLHttpRequest;d.open(\"GET\",a,!0);d.responseType=\n\"arraybuffer\";d.onload=()=>{200==d.status||0==d.status&&d.response?b(d.response):c()};d.onerror=c;d.send(null)};var ia=e.print||console.log.bind(console),z=e.printErr||console.warn.bind(console);Object.assign(e,ba);ba=null;e.thisProgram&&(ca=e.thisProgram);var A;e.wasmBinary&&(A=e.wasmBinary);var noExitRuntime=e.noExitRuntime||!0;\"object\"!=typeof WebAssembly&&B(\"no native wasm support detected\");var C,ja=!1,D,F,G,I,J,K,ka,la,ma,na;\nfunction oa(){var a=C.buffer;e.HEAP8=D=new Int8Array(a);e.HEAP16=G=new Int16Array(a);e.HEAP32=J=new Int32Array(a);e.HEAPU8=F=new Uint8Array(a);e.HEAPU16=I=new Uint16Array(a);e.HEAPU32=K=new Uint32Array(a);e.HEAPF32=ka=new Float32Array(a);e.HEAPF64=na=new Float64Array(a);e.HEAP64=la=new BigInt64Array(a);e.HEAPU64=ma=new BigUint64Array(a)}var pa=[],qa=[],ra=[];function sa(){var a=e.preRun.shift();pa.unshift(a)}var L=0,ta=null,M=null;\nfunction B(a){if(e.onAbort)e.onAbort(a);a=\"Aborted(\"+a+\")\";z(a);ja=!0;a=new WebAssembly.RuntimeError(a+\". Build with -sASSERTIONS for more info.\");m(a);throw a;}function ua(a){return a.startsWith(\"data:application/octet-stream;base64,\")}var N;N=\"ort-wasm.wasm\";if(!ua(N)){var va=N;N=e.locateFile?e.locateFile(va,v):v+va}function wa(a){try{if(a==N&&A)return new Uint8Array(A);if(y)return y(a);throw\"both async and sync fetching of the wasm failed\";}catch(b){B(b)}}\nfunction xa(a){if(!A&&(da||r)){if(\"function\"==typeof fetch&&!a.startsWith(\"file://\"))return fetch(a,{credentials:\"same-origin\"}).then(b=>{if(!b.ok)throw\"failed to load wasm binary file at '\"+a+\"'\";return b.arrayBuffer()}).catch(()=>wa(a));if(w)return new Promise((b,c)=>{w(a,d=>b(new Uint8Array(d)),c)})}return Promise.resolve().then(()=>wa(a))}function ya(a,b,c){return xa(a).then(d=>WebAssembly.instantiate(d,b)).then(d=>d).then(c,d=>{z(\"failed to asynchronously prepare wasm: \"+d);B(d)})}\nfunction za(a,b){var c=N;return A||\"function\"!=typeof WebAssembly.instantiateStreaming||ua(c)||c.startsWith(\"file://\")||ea||\"function\"!=typeof fetch?ya(c,a,b):fetch(c,{credentials:\"same-origin\"}).then(d=>WebAssembly.instantiateStreaming(d,a).then(b,function(g){z(\"wasm streaming compile failed: \"+g);z(\"falling back to ArrayBuffer instantiation\");return ya(c,a,b)}))}function Aa(a){for(;0<a.length;)a.shift()(e)}\nfunction Ba(a){this.Ja=a-24;this.Wa=function(b){K[this.Ja+4>>2>>>0]=b};this.Va=function(b){K[this.Ja+8>>2>>>0]=b};this.Ra=function(b,c){this.Sa();this.Wa(b);this.Va(c)};this.Sa=function(){K[this.Ja+16>>2>>>0]=0}}var Ca=0,Da=0,Ea=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;\nfunction Fa(a,b,c){b>>>=0;var d=b+c;for(c=b;a[c]&&!(c>=d);)++c;if(16<c-b&&a.buffer&&Ea)return Ea.decode(a.subarray(b,c));for(d=\"\";b<c;){var g=a[b++];if(g&128){var h=a[b++]&63;if(192==(g&224))d+=String.fromCharCode((g&31)<<6|h);else{var l=a[b++]&63;g=224==(g&240)?(g&15)<<12|h<<6|l:(g&7)<<18|h<<12|l<<6|a[b++]&63;65536>g?d+=String.fromCharCode(g):(g-=65536,d+=String.fromCharCode(55296|g>>10,56320|g&1023))}}else d+=String.fromCharCode(g)}return d}function O(a,b){return(a>>>=0)?Fa(F,a,b):\"\"}\nfunction P(a){for(var b=0,c=0;c<a.length;++c){var d=a.charCodeAt(c);127>=d?b++:2047>=d?b+=2:55296<=d&&57343>=d?(b+=4,++c):b+=3}return b}\nfunction Ga(a,b,c,d){c>>>=0;if(!(0<d))return 0;var g=c;d=c+d-1;for(var h=0;h<a.length;++h){var l=a.charCodeAt(h);if(55296<=l&&57343>=l){var k=a.charCodeAt(++h);l=65536+((l&1023)<<10)|k&1023}if(127>=l){if(c>=d)break;b[c++>>>0]=l}else{if(2047>=l){if(c+1>=d)break;b[c++>>>0]=192|l>>6}else{if(65535>=l){if(c+2>=d)break;b[c++>>>0]=224|l>>12}else{if(c+3>=d)break;b[c++>>>0]=240|l>>18;b[c++>>>0]=128|l>>12&63}b[c++>>>0]=128|l>>6&63}b[c++>>>0]=128|l&63}}b[c>>>0]=0;return c-g}\nfunction Ha(a,b,c){return Ga(a,F,b,c)}function Ia(a){if(null===a)return\"null\";var b=typeof a;return\"object\"===b||\"array\"===b||\"function\"===b?a.toString():\"\"+a}var Ja=void 0;function Q(a){for(var b=\"\";F[a>>>0];)b+=Ja[F[a++>>>0]];return b}var Ka={},La={},Ma={};function Na(a){if(void 0===a)return\"_unknown\";a=a.replace(/[^a-zA-Z0-9_]/g,\"$\");var b=a.charCodeAt(0);return 48<=b&&57>=b?\"_\"+a:a}function Oa(a,b){a=Na(a);return{[a]:function(){return b.apply(this,arguments)}}[a]}\nfunction Pa(a){var b=Error,c=Oa(a,function(d){this.name=a;this.message=d;d=Error(d).stack;void 0!==d&&(this.stack=this.toString()+\"\\n\"+d.replace(/^Error(:[^\\n]*)?\\n/,\"\"))});c.prototype=Object.create(b.prototype);c.prototype.constructor=c;c.prototype.toString=function(){return void 0===this.message?this.name:this.name+\": \"+this.message};return c}var Qa=void 0;function R(a){throw new Qa(a);}\nfunction S(a,b,c={}){if(!(\"argPackAdvance\"in b))throw new TypeError(\"registerType registeredInstance requires argPackAdvance\");var d=b.name;a||R('type \"'+d+'\" must have a positive integer typeid pointer');if(La.hasOwnProperty(a)){if(c.Za)return;R(\"Cannot register type '\"+d+\"' twice\")}La[a]=b;delete Ma[a];Ka.hasOwnProperty(a)&&(b=Ka[a],delete Ka[a],b.forEach(g=>g()))}\nfunction Ra(a,b,c){switch(b){case 0:return c?function(d){return D[d>>>0]}:function(d){return F[d>>>0]};case 1:return c?function(d){return G[d>>>1]}:function(d){return I[d>>>1]};case 2:return c?function(d){return J[d>>>2]}:function(d){return K[d>>>2]};case 3:return c?function(d){return la[d>>3]}:function(d){return ma[d>>3]};default:throw new TypeError(\"Unknown integer type: \"+a);}}\nfunction T(a){switch(a){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError(\"Unknown type size: \"+a);}}var U=new function(){this.Ja=[void 0];this.Ra=[];this.get=function(a){return this.Ja[a]};this.Va=function(a){let b=this.Ra.pop()||this.Ja.length;this.Ja[b]=a;return b};this.Wa=function(a){this.Ja[a]=void 0;this.Ra.push(a)}};function Sa(a){a>=U.Sa&&0===--U.get(a).Ya&&U.Wa(a)}\nvar V=a=>{a||R(\"Cannot use deleted val. handle = \"+a);return U.get(a).value},W=a=>{switch(a){case void 0:return 1;case null:return 2;case !0:return 3;case !1:return 4;default:return U.Va({Ya:1,value:a})}};function Ta(a){return this.fromWireType(J[a>>2>>>0])}function Ua(a,b){switch(b){case 2:return function(c){return this.fromWireType(ka[c>>>2])};case 3:return function(c){return this.fromWireType(na[c>>>3])};default:throw new TypeError(\"Unknown float type: \"+a);}}\nvar Va=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf-16le\"):void 0;function Wa(a,b){var c=a>>1;for(var d=c+b/2;!(c>=d)&&I[c>>>0];)++c;c<<=1;if(32<c-a&&Va)return Va.decode(F.subarray(a>>>0,c>>>0));c=\"\";for(d=0;!(d>=b/2);++d){var g=G[a+2*d>>1>>>0];if(0==g)break;c+=String.fromCharCode(g)}return c}function Xa(a,b,c){void 0===c&&(c=2147483647);if(2>c)return 0;c-=2;var d=b;c=c<2*a.length?c/2:a.length;for(var g=0;g<c;++g)G[b>>1>>>0]=a.charCodeAt(g),b+=2;G[b>>1>>>0]=0;return b-d}\nfunction Ya(a){return 2*a.length}function Za(a,b){for(var c=0,d=\"\";!(c>=b/4);){var g=J[a+4*c>>2>>>0];if(0==g)break;++c;65536<=g?(g-=65536,d+=String.fromCharCode(55296|g>>10,56320|g&1023)):d+=String.fromCharCode(g)}return d}function $a(a,b,c){b>>>=0;void 0===c&&(c=2147483647);if(4>c)return 0;var d=b;c=d+c-4;for(var g=0;g<a.length;++g){var h=a.charCodeAt(g);if(55296<=h&&57343>=h){var l=a.charCodeAt(++g);h=65536+((h&1023)<<10)|l&1023}J[b>>2>>>0]=h;b+=4;if(b+4>c)break}J[b>>2>>>0]=0;return b-d}\nfunction ab(a){for(var b=0,c=0;c<a.length;++c){var d=a.charCodeAt(c);55296<=d&&57343>=d&&++c;b+=4}return b}function X(a,b){var c=La[a];if(void 0===c){a=bb(a);var d=Q(a);Y(a);R(b+\" has unknown type \"+d)}return c}var cb={};function db(a){var b=cb[a];return void 0===b?Q(a):b}var eb=[];function gb(){return\"object\"==typeof globalThis?globalThis:Function(\"return this\")()}function hb(a){var b=eb.length;eb.push(a);return b}\nfunction ib(a,b){for(var c=Array(a),d=0;d<a;++d)c[d]=X(K[b+4*d>>2>>>0],\"parameter \"+d);return c}var jb=[];function kb(a){var b=Function;if(!(b instanceof Function))throw new TypeError(\"new_ called with constructor type \"+typeof b+\" which is not a function\");var c=Oa(b.name||\"unknownFunctionName\",function(){});c.prototype=b.prototype;c=new c;a=b.apply(c,a);return a instanceof Object?a:c}\nfunction lb(a){for(var b=\"\",c=0;c<a;++c)b+=(0!==c?\", \":\"\")+\"arg\"+c;var d=\"return function emval_allocator_\"+a+\"(constructor, argTypes, args) {\\n  var HEAPU32 = getMemory();\\n\";for(c=0;c<a;++c)d+=\"var argType\"+c+\" = requireRegisteredType(HEAPU32[((argTypes)>>2)], 'parameter \"+c+\"');\\nvar arg\"+c+\" = argType\"+c+\".readValueFromPointer(args);\\nargs += argType\"+c+\"['argPackAdvance'];\\nargTypes += 4;\\n\";return(new Function(\"requireRegisteredType\",\"Module\",\"valueToHandle\",\"getMemory\",d+(\"var obj = new constructor(\"+\nb+\");\\nreturn valueToHandle(obj);\\n}\\n\")))(X,e,W,()=>K)}var mb={};function Z(a){return 0===a%4&&(0!==a%100||0===a%400)}var nb=[0,31,60,91,121,152,182,213,244,274,305,335],ob=[0,31,59,90,120,151,181,212,243,273,304,334];function pb(a){return(Z(a.getFullYear())?nb:ob)[a.getMonth()]+a.getDate()-1}function qb(a){var b=P(a)+1,c=rb(b);c&&Ha(a,c,b);return c}var sb;sb=ea?()=>{var a=process.hrtime();return 1E3*a[0]+a[1]/1E6}:()=>performance.now();var tb={};\nfunction ub(){if(!vb){var a={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:ca||\"./this.program\"},b;for(b in tb)void 0===tb[b]?delete a[b]:a[b]=tb[b];var c=[];for(b in a)c.push(b+\"=\"+a[b]);vb=c}return vb}var vb,wb=[null,[],[]],xb=[31,29,31,30,31,30,31,31,30,31,30,31],yb=[31,28,31,30,31,30,31,31,30,31,30,31];\nfunction zb(a){var b=Array(P(a)+1);Ga(a,b,0,b.length);return b}\nfunction Ab(a,b,c,d){function g(f,q,t){for(f=\"number\"==typeof f?f.toString():f||\"\";f.length<q;)f=t[0]+f;return f}function h(f,q){return g(f,q,\"0\")}function l(f,q){function t(fb){return 0>fb?-1:0<fb?1:0}var H;0===(H=t(f.getFullYear()-q.getFullYear()))&&0===(H=t(f.getMonth()-q.getMonth()))&&(H=t(f.getDate()-q.getDate()));return H}function k(f){switch(f.getDay()){case 0:return new Date(f.getFullYear()-1,11,29);case 1:return f;case 2:return new Date(f.getFullYear(),0,3);case 3:return new Date(f.getFullYear(),\n0,2);case 4:return new Date(f.getFullYear(),0,1);case 5:return new Date(f.getFullYear()-1,11,31);case 6:return new Date(f.getFullYear()-1,11,30)}}function n(f){var q=f.Oa;for(f=new Date((new Date(f.Pa+1900,0,1)).getTime());0<q;){var t=f.getMonth(),H=(Z(f.getFullYear())?xb:yb)[t];if(q>H-f.getDate())q-=H-f.getDate()+1,f.setDate(1),11>t?f.setMonth(t+1):(f.setMonth(0),f.setFullYear(f.getFullYear()+1));else{f.setDate(f.getDate()+q);break}}t=new Date(f.getFullYear()+1,0,4);q=k(new Date(f.getFullYear(),\n0,4));t=k(t);return 0>=l(q,f)?0>=l(t,f)?f.getFullYear()+1:f.getFullYear():f.getFullYear()-1}var p=J[d+40>>2>>>0];d={cb:J[d>>2>>>0],bb:J[d+4>>2>>>0],Ta:J[d+8>>2>>>0],Xa:J[d+12>>2>>>0],Ua:J[d+16>>2>>>0],Pa:J[d+20>>2>>>0],Na:J[d+24>>2>>>0],Oa:J[d+28>>2>>>0],fb:J[d+32>>2>>>0],ab:J[d+36>>2>>>0],eb:p?O(p):\"\"};c=O(c);p={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\n\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var u in p)c=c.replace(new RegExp(u,\"g\"),p[u]);var x=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),E=\"January February March April May June July August September October November December\".split(\" \");p={\"%a\":function(f){return x[f.Na].substring(0,3)},\"%A\":function(f){return x[f.Na]},\"%b\":function(f){return E[f.Ua].substring(0,\n3)},\"%B\":function(f){return E[f.Ua]},\"%C\":function(f){return h((f.Pa+1900)/100|0,2)},\"%d\":function(f){return h(f.Xa,2)},\"%e\":function(f){return g(f.Xa,2,\" \")},\"%g\":function(f){return n(f).toString().substring(2)},\"%G\":function(f){return n(f)},\"%H\":function(f){return h(f.Ta,2)},\"%I\":function(f){f=f.Ta;0==f?f=12:12<f&&(f-=12);return h(f,2)},\"%j\":function(f){for(var q=0,t=0;t<=f.Ua-1;q+=(Z(f.Pa+1900)?xb:yb)[t++]);return h(f.Xa+q,3)},\"%m\":function(f){return h(f.Ua+1,2)},\"%M\":function(f){return h(f.bb,\n2)},\"%n\":function(){return\"\\n\"},\"%p\":function(f){return 0<=f.Ta&&12>f.Ta?\"AM\":\"PM\"},\"%S\":function(f){return h(f.cb,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(f){return f.Na||7},\"%U\":function(f){return h(Math.floor((f.Oa+7-f.Na)/7),2)},\"%V\":function(f){var q=Math.floor((f.Oa+7-(f.Na+6)%7)/7);2>=(f.Na+371-f.Oa-2)%7&&q++;if(q)53==q&&(t=(f.Na+371-f.Oa)%7,4==t||3==t&&Z(f.Pa)||(q=1));else{q=52;var t=(f.Na+7-f.Oa-1)%7;(4==t||5==t&&Z(f.Pa%400-1))&&q++}return h(q,2)},\"%w\":function(f){return f.Na},\"%W\":function(f){return h(Math.floor((f.Oa+\n7-(f.Na+6)%7)/7),2)},\"%y\":function(f){return(f.Pa+1900).toString().substring(2)},\"%Y\":function(f){return f.Pa+1900},\"%z\":function(f){f=f.ab;var q=0<=f;f=Math.abs(f)/60;return(q?\"+\":\"-\")+String(\"0000\"+(f/60*100+f%60)).slice(-4)},\"%Z\":function(f){return f.eb},\"%%\":function(){return\"%\"}};c=c.replace(/%%/g,\"\\x00\\x00\");for(u in p)c.includes(u)&&(c=c.replace(new RegExp(u,\"g\"),p[u](d)));c=c.replace(/\\0\\0/g,\"%\");u=zb(c);if(u.length>b)return 0;D.set(u,a>>>0);return u.length-1}\nfor(var Bb=Array(256),Cb=0;256>Cb;++Cb)Bb[Cb]=String.fromCharCode(Cb);Ja=Bb;Qa=e.BindingError=Pa(\"BindingError\");e.InternalError=Pa(\"InternalError\");U.Ja.push({value:void 0},{value:null},{value:!0},{value:!1});U.Sa=U.Ja.length;e.count_emval_handles=function(){for(var a=0,b=U.Sa;b<U.Ja.length;++b)void 0!==U.Ja[b]&&++a;return a};\nvar Db={a:function(a,b,c){(new Ba(a)).Ra(b,c);Ca=a;Da++;throw Ca;},da:function(){B(\"To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html\")},v:function(){return 0},ba:function(){},N:function(){},P:function(){},H:function(){return 0},$:function(){},V:function(){},_:function(){},A:function(){},O:function(){},L:function(){},aa:function(){},M:function(){},D:function(a,b,c,d,g){b=Q(b);c=T(c);var h=-1!=b.indexOf(\"u\");h&&(g=(1n<<64n)-1n);S(a,{name:b,\nfromWireType:function(l){return l},toWireType:function(l,k){if(\"bigint\"!=typeof k&&\"number\"!=typeof k)throw new TypeError('Cannot convert \"'+Ia(k)+'\" to '+this.name);if(k<d||k>g)throw new TypeError('Passing a number \"'+Ia(k)+'\" from JS side to C/C++ side to an argument of type \"'+b+'\", which is outside the valid range ['+d+\", \"+g+\"]!\");return k},argPackAdvance:8,readValueFromPointer:Ra(b,c,!h),Qa:null})},ga:function(a,b,c,d,g){var h=T(c);b=Q(b);S(a,{name:b,fromWireType:function(l){return!!l},toWireType:function(l,\nk){return k?d:g},argPackAdvance:8,readValueFromPointer:function(l){if(1===c)var k=D;else if(2===c)k=G;else if(4===c)k=J;else throw new TypeError(\"Unknown boolean type size: \"+b);return this.fromWireType(k[l>>>h])},Qa:null})},fa:function(a,b){b=Q(b);S(a,{name:b,fromWireType:function(c){var d=V(c);Sa(c);return d},toWireType:function(c,d){return W(d)},argPackAdvance:8,readValueFromPointer:Ta,Qa:null})},C:function(a,b,c){c=T(c);b=Q(b);S(a,{name:b,fromWireType:function(d){return d},toWireType:function(d,\ng){return g},argPackAdvance:8,readValueFromPointer:Ua(b,c),Qa:null})},p:function(a,b,c,d,g){b=Q(b);-1===g&&(g=4294967295);g=T(c);var h=k=>k;if(0===d){var l=32-8*c;h=k=>k<<l>>>l}c=b.includes(\"unsigned\")?function(k,n){return n>>>0}:function(k,n){return n};S(a,{name:b,fromWireType:h,toWireType:c,argPackAdvance:8,readValueFromPointer:Ra(b,g,0!==d),Qa:null})},l:function(a,b,c){function d(h){h>>=2;var l=K;return new g(l.buffer,l[h+1>>>0],l[h>>>0])}var g=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,\nUint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array][b];c=Q(c);S(a,{name:c,fromWireType:d,argPackAdvance:8,readValueFromPointer:d},{Za:!0})},E:function(a,b){b=Q(b);var c=\"std::string\"===b;S(a,{name:b,fromWireType:function(d){var g=K[d>>2>>>0],h=d+4;if(c)for(var l=h,k=0;k<=g;++k){var n=h+k;if(k==g||0==F[n>>>0]){l=O(l,n-l);if(void 0===p)var p=l;else p+=String.fromCharCode(0),p+=l;l=n+1}}else{p=Array(g);for(k=0;k<g;++k)p[k]=String.fromCharCode(F[h+k>>>0]);p=p.join(\"\")}Y(d);return p},toWireType:function(d,\ng){g instanceof ArrayBuffer&&(g=new Uint8Array(g));var h=\"string\"==typeof g;h||g instanceof Uint8Array||g instanceof Uint8ClampedArray||g instanceof Int8Array||R(\"Cannot pass non-string to std::string\");var l=c&&h?P(g):g.length;var k=rb(4+l+1);var n=k+4>>>0;K[k>>2>>>0]=l;if(c&&h)Ha(g,n,l+1);else if(h)for(h=0;h<l;++h){var p=g.charCodeAt(h);255<p&&(Y(n),R(\"String has UTF-16 code units that do not fit in 8 bits\"));F[n+h>>>0]=p}else for(h=0;h<l;++h)F[n+h>>>0]=g[h];null!==d&&d.push(Y,k);return k},argPackAdvance:8,\nreadValueFromPointer:Ta,Qa:function(d){Y(d)}})},x:function(a,b,c){c=Q(c);if(2===b){var d=Wa;var g=Xa;var h=Ya;var l=()=>I;var k=1}else 4===b&&(d=Za,g=$a,h=ab,l=()=>K,k=2);S(a,{name:c,fromWireType:function(n){for(var p=K[n>>>2],u=l(),x,E=n+4,f=0;f<=p;++f){var q=n+4+f*b;if(f==p||0==u[q>>>k])E=d(E,q-E),void 0===x?x=E:(x+=String.fromCharCode(0),x+=E),E=q+b}Y(n);return x},toWireType:function(n,p){\"string\"!=typeof p&&R(\"Cannot pass non-string to C++ string type \"+c);var u=h(p),x=rb(4+u+b);x>>>=0;K[x>>>\n2]=u>>k;g(p,x+4,u+b);null!==n&&n.push(Y,x);return x},argPackAdvance:8,readValueFromPointer:Ta,Qa:function(n){Y(n)}})},ha:function(a,b){b=Q(b);S(a,{$a:!0,name:b,argPackAdvance:0,fromWireType:function(){},toWireType:function(){}})},ca:function(){return!0},o:function(a,b,c){a=V(a);b=X(b,\"emval::as\");var d=[],g=W(d);K[c>>2>>>0]=g;return b.toWireType(d,a)},h:function(a,b,c,d,g){a=eb[a];b=V(b);c=db(c);var h=[];K[d>>2>>>0]=W(h);return a(b,c,h,g)},q:function(a,b,c,d){a=eb[a];b=V(b);c=db(c);a(b,c,null,d)},\nb:Sa,F:function(a,b){a=V(a);b=V(b);return a==b},u:function(a){if(0===a)return W(gb());a=db(a);return W(gb()[a])},g:function(a,b){var c=ib(a,b),d=c[0];b=d.name+\"_$\"+c.slice(1).map(function(u){return u.name}).join(\"_\")+\"$\";var g=jb[b];if(void 0!==g)return g;g=[\"retType\"];for(var h=[d],l=\"\",k=0;k<a-1;++k)l+=(0!==k?\", \":\"\")+\"arg\"+k,g.push(\"argType\"+k),h.push(c[1+k]);var n=\"return function \"+Na(\"methodCaller_\"+b)+\"(handle, name, destructors, args) {\\n\",p=0;for(k=0;k<a-1;++k)n+=\"    var arg\"+k+\" = argType\"+\nk+\".readValueFromPointer(args\"+(p?\"+\"+p:\"\")+\");\\n\",p+=c[k+1].argPackAdvance;n+=\"    var rv = handle[name](\"+l+\");\\n\";for(k=0;k<a-1;++k)c[k+1].deleteObject&&(n+=\"    argType\"+k+\".deleteObject(arg\"+k+\");\\n\");d.$a||(n+=\"    return retType.toWireType(destructors, rv);\\n\");g.push(n+\"};\\n\");a=kb(g).apply(null,h);g=hb(a);return jb[b]=g},r:function(a,b){a=V(a);b=V(b);return W(a[b])},c:function(a){4<a&&(U.get(a).Ya+=1)},G:function(a,b,c,d){a=V(a);var g=mb[b];g||(g=lb(b),mb[b]=g);return g(a,c,d)},s:function(){return W([])},\nk:function(a){a=V(a);for(var b=Array(a.length),c=0;c<a.length;c++)b[c]=a[c];return W(b)},d:function(a){return W(db(a))},j:function(){return W({})},f:function(a){for(var b=V(a);b.length;){var c=b.pop();b.pop()(c)}Sa(a)},i:function(a,b,c){a=V(a);b=V(b);c=V(c);a[b]=c},e:function(a,b){a=X(a,\"_emval_take_value\");a=a.readValueFromPointer(b);return W(a)},S:function(a,b){a=new Date(1E3*(K[a>>>2]+4294967296*J[a+4>>>2]));J[b>>2>>>0]=a.getUTCSeconds();J[b+4>>2>>>0]=a.getUTCMinutes();J[b+8>>2>>>0]=a.getUTCHours();\nJ[b+12>>2>>>0]=a.getUTCDate();J[b+16>>2>>>0]=a.getUTCMonth();J[b+20>>2>>>0]=a.getUTCFullYear()-1900;J[b+24>>2>>>0]=a.getUTCDay();J[b+28>>2>>>0]=(a.getTime()-Date.UTC(a.getUTCFullYear(),0,1,0,0,0,0))/864E5|0},T:function(a,b){a=new Date(1E3*(K[a>>>2]+4294967296*J[a+4>>>2]));J[b>>2>>>0]=a.getSeconds();J[b+4>>2>>>0]=a.getMinutes();J[b+8>>2>>>0]=a.getHours();J[b+12>>2>>>0]=a.getDate();J[b+16>>2>>>0]=a.getMonth();J[b+20>>2>>>0]=a.getFullYear()-1900;J[b+24>>2>>>0]=a.getDay();J[b+28>>2>>>0]=pb(a)|0;J[b+36>>\n2>>>0]=-(60*a.getTimezoneOffset());var c=(new Date(a.getFullYear(),6,1)).getTimezoneOffset(),d=(new Date(a.getFullYear(),0,1)).getTimezoneOffset();J[b+32>>2>>>0]=(c!=d&&a.getTimezoneOffset()==Math.min(d,c))|0},U:function(a){var b=new Date(J[a+20>>2>>>0]+1900,J[a+16>>2>>>0],J[a+12>>2>>>0],J[a+8>>2>>>0],J[a+4>>2>>>0],J[a>>2>>>0],0),c=J[a+32>>2>>>0],d=b.getTimezoneOffset(),g=(new Date(b.getFullYear(),6,1)).getTimezoneOffset(),h=(new Date(b.getFullYear(),0,1)).getTimezoneOffset(),l=Math.min(h,g);0>c?\nJ[a+32>>2>>>0]=Number(g!=h&&l==d):0<c!=(l==d)&&(g=Math.max(h,g),b.setTime(b.getTime()+6E4*((0<c?l:g)-d)));J[a+24>>2>>>0]=b.getDay();J[a+28>>2>>>0]=pb(b)|0;J[a>>2>>>0]=b.getSeconds();J[a+4>>2>>>0]=b.getMinutes();J[a+8>>2>>>0]=b.getHours();J[a+12>>2>>>0]=b.getDate();J[a+16>>2>>>0]=b.getMonth();J[a+20>>2>>>0]=b.getYear();return b.getTime()/1E3|0},Q:function(){return-52},R:function(){},J:function(a,b,c){function d(n){return(n=n.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?n[1]:\"GMT\"}var g=(new Date).getFullYear(),\nh=new Date(g,0,1),l=new Date(g,6,1);g=h.getTimezoneOffset();var k=l.getTimezoneOffset();K[a>>2>>>0]=60*Math.max(g,k);J[b>>2>>>0]=Number(g!=k);a=d(h);b=d(l);a=qb(a);b=qb(b);k<g?(K[c>>2>>>0]=a,K[c+4>>2>>>0]=b):(K[c>>2>>>0]=b,K[c+4>>2>>>0]=a)},t:function(){B(\"\")},ia:function(){B(\"To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html\")},B:function(){return Date.now()},K:function(){return 4294901760},n:sb,Z:function(a,b,c){F.copyWithin(a>>>0,b>>>\n0,b+c>>>0)},I:function(a){var b=F.length;a>>>=0;if(4294901760<a)return!1;for(var c=1;4>=c;c*=2){var d=b*(1+.2/c);d=Math.min(d,a+100663296);var g=Math,h=g.min;d=Math.max(a,d);d+=(65536-d%65536)%65536;a:{var l=C.buffer;try{C.grow(h.call(g,4294901760,d)-l.byteLength+65535>>>16);oa();var k=1;break a}catch(n){}k=void 0}if(k)return!0}return!1},X:function(a,b){var c=0;ub().forEach(function(d,g){var h=b+c;g=K[a+4*g>>2>>>0]=h;for(h=0;h<d.length;++h)D[g++>>0>>>0]=d.charCodeAt(h);D[g>>0>>>0]=0;c+=d.length+1});\nreturn 0},Y:function(a,b){var c=ub();K[a>>2>>>0]=c.length;var d=0;c.forEach(function(g){d+=g.length+1});K[b>>2>>>0]=d;return 0},w:function(){return 52},z:function(){return 52},W:function(){return 70},y:function(a,b,c,d){for(var g=0,h=0;h<c;h++){var l=K[b>>2>>>0],k=K[b+4>>2>>>0];b+=8;for(var n=0;n<k;n++){var p=F[l+n>>>0],u=wb[a];0===p||10===p?((1===a?ia:z)(Fa(u,0)),u.length=0):u.push(p)}g+=k}K[d>>2>>>0]=g;return 0},ea:Ab,m:function(a,b,c,d){return Ab(a,b,c,d)}};\n(function(){function a(c){c=c.exports;e.asm=c;C=e.asm.ja;oa();qa.unshift(e.asm.ka);L--;e.monitorRunDependencies&&e.monitorRunDependencies(L);if(0==L&&(null!==ta&&(clearInterval(ta),ta=null),M)){var d=M;M=null;d()}return c}var b={a:Db};L++;e.monitorRunDependencies&&e.monitorRunDependencies(L);if(e.instantiateWasm)try{return e.instantiateWasm(b,a)}catch(c){z(\"Module.instantiateWasm callback failed with error: \"+c),m(c)}za(b,function(c){a(c.instance)}).catch(m);return{}})();\ne._OrtInit=function(){return(e._OrtInit=e.asm.la).apply(null,arguments)};e._OrtGetLastError=function(){return(e._OrtGetLastError=e.asm.ma).apply(null,arguments)};e._OrtCreateSessionOptions=function(){return(e._OrtCreateSessionOptions=e.asm.na).apply(null,arguments)};e._OrtAppendExecutionProvider=function(){return(e._OrtAppendExecutionProvider=e.asm.oa).apply(null,arguments)};e._OrtAddSessionConfigEntry=function(){return(e._OrtAddSessionConfigEntry=e.asm.pa).apply(null,arguments)};\ne._OrtReleaseSessionOptions=function(){return(e._OrtReleaseSessionOptions=e.asm.qa).apply(null,arguments)};e._OrtCreateSession=function(){return(e._OrtCreateSession=e.asm.ra).apply(null,arguments)};e._OrtReleaseSession=function(){return(e._OrtReleaseSession=e.asm.sa).apply(null,arguments)};e._OrtGetInputOutputCount=function(){return(e._OrtGetInputOutputCount=e.asm.ta).apply(null,arguments)};e._OrtGetInputName=function(){return(e._OrtGetInputName=e.asm.ua).apply(null,arguments)};\ne._OrtGetOutputName=function(){return(e._OrtGetOutputName=e.asm.va).apply(null,arguments)};e._OrtFree=function(){return(e._OrtFree=e.asm.wa).apply(null,arguments)};e._OrtCreateTensor=function(){return(e._OrtCreateTensor=e.asm.xa).apply(null,arguments)};e._OrtGetTensorData=function(){return(e._OrtGetTensorData=e.asm.ya).apply(null,arguments)};e._OrtReleaseTensor=function(){return(e._OrtReleaseTensor=e.asm.za).apply(null,arguments)};\ne._OrtCreateRunOptions=function(){return(e._OrtCreateRunOptions=e.asm.Aa).apply(null,arguments)};e._OrtAddRunConfigEntry=function(){return(e._OrtAddRunConfigEntry=e.asm.Ba).apply(null,arguments)};e._OrtReleaseRunOptions=function(){return(e._OrtReleaseRunOptions=e.asm.Ca).apply(null,arguments)};e._OrtRun=function(){return(e._OrtRun=e.asm.Da).apply(null,arguments)};e._OrtEndProfiling=function(){return(e._OrtEndProfiling=e.asm.Ea).apply(null,arguments)};\nvar rb=e._malloc=function(){return(rb=e._malloc=e.asm.Fa).apply(null,arguments)},Y=e._free=function(){return(Y=e._free=e.asm.Ga).apply(null,arguments)};function bb(){return(bb=e.asm.Ha).apply(null,arguments)}e.__embind_initialize_bindings=function(){return(e.__embind_initialize_bindings=e.asm.Ia).apply(null,arguments)};function Eb(){return(Eb=e.asm.Ka).apply(null,arguments)}function Fb(){return(Fb=e.asm.La).apply(null,arguments)}function Gb(){return(Gb=e.asm.Ma).apply(null,arguments)}\ne.stackAlloc=Gb;e.stackSave=Eb;e.stackRestore=Fb;e.UTF8ToString=O;e.stringToUTF8=Ha;e.lengthBytesUTF8=P;var Hb;M=function Ib(){Hb||Jb();Hb||(M=Ib)};\nfunction Jb(){function a(){if(!Hb&&(Hb=!0,e.calledRun=!0,!ja)){Aa(qa);aa(e);if(e.onRuntimeInitialized)e.onRuntimeInitialized();if(e.postRun)for(\"function\"==typeof e.postRun&&(e.postRun=[e.postRun]);e.postRun.length;){var b=e.postRun.shift();ra.unshift(b)}Aa(ra)}}if(!(0<L)){if(e.preRun)for(\"function\"==typeof e.preRun&&(e.preRun=[e.preRun]);e.preRun.length;)sa();Aa(pa);0<L||(e.setStatus?(e.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){e.setStatus(\"\")},1);a()},1)):a())}}\nif(e.preInit)for(\"function\"==typeof e.preInit&&(e.preInit=[e.preInit]);0<e.preInit.length;)e.preInit.pop()();Jb();\n\n\n  return ortWasm.ready\n}\n\n);\n})();\nif (typeof exports === 'object' && typeof module === 'object')\n  module.exports = ortWasm;\nelse if (typeof define === 'function' && define['amd'])\n  define([], function() { return ortWasm; });\nelse if (typeof exports === 'object')\n  exports[\"ortWasm\"] = ortWasm;\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nexports.__esModule = true;\r\nvar Guid = /** @class */ (function () {\r\n    function Guid(guid) {\r\n        if (!guid) {\r\n            throw new TypeError(\"Invalid argument; `value` has no value.\");\r\n        }\r\n        this.value = Guid.EMPTY;\r\n        if (guid && Guid.isGuid(guid)) {\r\n            this.value = guid;\r\n        }\r\n    }\r\n    Guid.isGuid = function (guid) {\r\n        var value = guid.toString();\r\n        return guid && (guid instanceof Guid || Guid.validator.test(value));\r\n    };\r\n    Guid.create = function () {\r\n        return new Guid([Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\"));\r\n    };\r\n    Guid.createEmpty = function () {\r\n        return new Guid(\"emptyguid\");\r\n    };\r\n    Guid.parse = function (guid) {\r\n        return new Guid(guid);\r\n    };\r\n    Guid.raw = function () {\r\n        return [Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\");\r\n    };\r\n    Guid.gen = function (count) {\r\n        var out = \"\";\r\n        for (var i = 0; i < count; i++) {\r\n            // tslint:disable-next-line:no-bitwise\r\n            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n        }\r\n        return out;\r\n    };\r\n    Guid.prototype.equals = function (other) {\r\n        // Comparing string `value` against provided `guid` will auto-call\r\n        // toString on `guid` for comparison\r\n        return Guid.isGuid(other) && this.value === other.toString();\r\n    };\r\n    Guid.prototype.isEmpty = function () {\r\n        return this.value === Guid.EMPTY;\r\n    };\r\n    Guid.prototype.toString = function () {\r\n        return this.value;\r\n    };\r\n    Guid.prototype.toJSON = function () {\r\n        return {\r\n            value: this.value\r\n        };\r\n    };\r\n    Guid.validator = new RegExp(\"^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$\", \"i\");\r\n    Guid.EMPTY = \"00000000-0000-0000-0000-000000000000\";\r\n    return Guid;\r\n}());\r\nexports.Guid = Guid;\r\n","// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available across modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    CustomError.prototype = Object.create(Error.prototype, {\n        constructor: {\n            value: CustomError,\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n        name: {\n            get: function get() { return name; },\n            set: undefined,\n            enumerable: false,\n            // configurable: false would accurately preserve the behavior of\n            // the original, but I'm guessing that was not intentional.\n            // For an actual error subclass, this property would\n            // be configurable.\n            configurable: true,\n        },\n        toString: {\n            value: function value() { return this.name + \": \" + this.message; },\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n    });\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","module.exports = require(\"fs\");","module.exports = require(\"os\");","module.exports = require(\"path\");","module.exports = require(\"perf_hooks\");","module.exports = require(\"util\");","module.exports = require(\"worker_threads\");","module.exports = require(\"onnxruntime-common\");","// GENERATED FILE. DO NOT EDIT.\nvar Long = (function(exports) {\n  \"use strict\";\n  \n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  \n  /**\n   * @license\n   * Copyright 2009 The Closure Library Authors\n   * Copyright 2020 Daniel Wirtz / The long.js Authors.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *\n   * SPDX-License-Identifier: Apache-2.0\n   */\n  // WebAssembly optimizations to do native i64 multiplication and divide\n  var wasm = null;\n  \n  try {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;\n  } catch (e) {// no wasm support :(\n  }\n  /**\n   * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n   *  See the from* functions below for more convenient ways of constructing Longs.\n   * @exports Long\n   * @class A Long class for representing a 64 bit two's-complement integer value.\n   * @param {number} low The low (signed) 32 bits of the long\n   * @param {number} high The high (signed) 32 bits of the long\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @constructor\n   */\n  \n  \n  function Long(low, high, unsigned) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     */\n    this.low = low | 0;\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     */\n  \n    this.high = high | 0;\n    /**\n     * Whether unsigned or not.\n     * @type {boolean}\n     */\n  \n    this.unsigned = !!unsigned;\n  } // The internal representation of a long is the two given signed, 32-bit values.\n  // We use 32-bit pieces because these are the size of integers on which\n  // Javascript performs bit-operations.  For operations like addition and\n  // multiplication, we split each number into 16 bit pieces, which can easily be\n  // multiplied within Javascript's floating-point representation without overflow\n  // or change in sign.\n  //\n  // In the algorithms below, we frequently reduce the negative case to the\n  // positive case by negating the input(s) and then post-processing the result.\n  // Note that we must ALWAYS check specially whether those values are MIN_VALUE\n  // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n  // a positive number, it overflows back into a negative).  Not handling this\n  // case would often result in infinite recursion.\n  //\n  // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n  // methods on which they depend.\n  \n  /**\n   * An indicator used to reliably determine if an object is a Long or not.\n   * @type {boolean}\n   * @const\n   * @private\n   */\n  \n  \n  Long.prototype.__isLong__;\n  Object.defineProperty(Long.prototype, \"__isLong__\", {\n    value: true\n  });\n  /**\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   * @inner\n   */\n  \n  function isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n  }\n  /**\n   * @function\n   * @param {*} value number\n   * @returns {number}\n   * @inner\n   */\n  \n  \n  function ctz32(value) {\n    var c = Math.clz32(value & -value);\n    return value ? 31 - c : c;\n  }\n  /**\n   * Tests if the specified object is a Long.\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   */\n  \n  \n  Long.isLong = isLong;\n  /**\n   * A cache of the Long representations of small integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var INT_CACHE = {};\n  /**\n   * A cache of the Long representations of small unsigned integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var UINT_CACHE = {};\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromInt(value, unsigned) {\n    var obj, cachedObj, cache;\n  \n    if (unsigned) {\n      value >>>= 0;\n  \n      if (cache = 0 <= value && value < 256) {\n        cachedObj = UINT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, 0, true);\n      if (cache) UINT_CACHE[value] = obj;\n      return obj;\n    } else {\n      value |= 0;\n  \n      if (cache = -128 <= value && value < 128) {\n        cachedObj = INT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, value < 0 ? -1 : 0, false);\n      if (cache) INT_CACHE[value] = obj;\n      return obj;\n    }\n  }\n  /**\n   * Returns a Long representing the given 32 bit integer value.\n   * @function\n   * @param {number} value The 32 bit integer in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromInt = fromInt;\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromNumber(value, unsigned) {\n    if (isNaN(value)) return unsigned ? UZERO : ZERO;\n  \n    if (unsigned) {\n      if (value < 0) return UZERO;\n      if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;\n    } else {\n      if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;\n      if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;\n    }\n  \n    if (value < 0) return fromNumber(-value, unsigned).neg();\n    return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);\n  }\n  /**\n   * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n   * @function\n   * @param {number} value The number in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromNumber = fromNumber;\n  /**\n   * @param {number} lowBits\n   * @param {number} highBits\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n  }\n  /**\n   * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n   *  assumed to use 32 bits.\n   * @function\n   * @param {number} lowBits The low 32 bits\n   * @param {number} highBits The high 32 bits\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBits = fromBits;\n  /**\n   * @function\n   * @param {number} base\n   * @param {number} exponent\n   * @returns {number}\n   * @inner\n   */\n  \n  var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n  \n  /**\n   * @param {string} str\n   * @param {(boolean|number)=} unsigned\n   * @param {number=} radix\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromString(str, unsigned, radix) {\n    if (str.length === 0) throw Error('empty string');\n  \n    if (typeof unsigned === 'number') {\n      // For goog.math.long compatibility\n      radix = unsigned;\n      unsigned = false;\n    } else {\n      unsigned = !!unsigned;\n    }\n  \n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\") return unsigned ? UZERO : ZERO;\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    var p;\n    if ((p = str.indexOf('-')) > 0) throw Error('interior hyphen');else if (p === 0) {\n      return fromString(str.substring(1), unsigned, radix).neg();\n    } // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n  \n    for (var i = 0; i < str.length; i += 8) {\n      var size = Math.min(8, str.length - i),\n          value = parseInt(str.substring(i, i + size), radix);\n  \n      if (size < 8) {\n        var power = fromNumber(pow_dbl(radix, size));\n        result = result.mul(power).add(fromNumber(value));\n      } else {\n        result = result.mul(radixToPower);\n        result = result.add(fromNumber(value));\n      }\n    }\n  \n    result.unsigned = unsigned;\n    return result;\n  }\n  /**\n   * Returns a Long representation of the given string, written using the specified radix.\n   * @function\n   * @param {string} str The textual representation of the Long\n   * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n   * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromString = fromString;\n  /**\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromValue(val, unsigned) {\n    if (typeof val === 'number') return fromNumber(val, unsigned);\n    if (typeof val === 'string') return fromString(val, unsigned); // Throws for non-objects, converts non-instanceof Long:\n  \n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n  }\n  /**\n   * Converts the specified value to a Long using the appropriate from* function for its type.\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long}\n   */\n  \n  \n  Long.fromValue = fromValue; // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n  // no runtime penalty for these.\n  \n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_16_DBL = 1 << 16;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24_DBL = 1 << 24;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n  /**\n   * @type {!Long}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ZERO = fromInt(0);\n  /**\n   * Signed zero.\n   * @type {!Long}\n   */\n  \n  Long.ZERO = ZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UZERO = fromInt(0, true);\n  /**\n   * Unsigned zero.\n   * @type {!Long}\n   */\n  \n  Long.UZERO = UZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ONE = fromInt(1);\n  /**\n   * Signed one.\n   * @type {!Long}\n   */\n  \n  Long.ONE = ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UONE = fromInt(1, true);\n  /**\n   * Unsigned one.\n   * @type {!Long}\n   */\n  \n  Long.UONE = UONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var NEG_ONE = fromInt(-1);\n  /**\n   * Signed negative one.\n   * @type {!Long}\n   */\n  \n  Long.NEG_ONE = NEG_ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n  /**\n   * Maximum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_VALUE = MAX_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n  /**\n   * Maximum unsigned value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n  /**\n   * Minimum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MIN_VALUE = MIN_VALUE;\n  /**\n   * @alias Long.prototype\n   * @inner\n   */\n  \n  var LongPrototype = Long.prototype;\n  /**\n   * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  LongPrototype.toInt = function toInt() {\n    return this.unsigned ? this.low >>> 0 : this.low;\n  };\n  /**\n   * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.toNumber = function toNumber() {\n    if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n  };\n  /**\n   * Converts the Long to a string written in the specified radix.\n   * @this {!Long}\n   * @param {number=} radix Radix (2-36), defaults to 10\n   * @returns {string}\n   * @override\n   * @throws {RangeError} If `radix` is out of range\n   */\n  \n  \n  LongPrototype.toString = function toString(radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    if (this.isZero()) return '0';\n  \n    if (this.isNegative()) {\n      // Unsigned Longs are never negative\n      if (this.eq(MIN_VALUE)) {\n        // We need to change the Long value before it can be negated, so we remove\n        // the bottom-most digit in this base and then recurse to do the rest.\n        var radixLong = fromNumber(radix),\n            div = this.div(radixLong),\n            rem1 = div.mul(radixLong).sub(this);\n        return div.toString(radix) + rem1.toInt().toString(radix);\n      } else return '-' + this.neg().toString(radix);\n    } // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n  \n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n        rem = this;\n    var result = '';\n  \n    while (true) {\n      var remDiv = rem.div(radixToPower),\n          intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n          digits = intval.toString(radix);\n      rem = remDiv;\n      if (rem.isZero()) return digits + result;else {\n        while (digits.length < 6) digits = '0' + digits;\n  \n        result = '' + digits + result;\n      }\n    }\n  };\n  /**\n   * Gets the high 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed high bits\n   */\n  \n  \n  LongPrototype.getHighBits = function getHighBits() {\n    return this.high;\n  };\n  /**\n   * Gets the high 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned high bits\n   */\n  \n  \n  LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n    return this.high >>> 0;\n  };\n  /**\n   * Gets the low 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed low bits\n   */\n  \n  \n  LongPrototype.getLowBits = function getLowBits() {\n    return this.low;\n  };\n  /**\n   * Gets the low 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned low bits\n   */\n  \n  \n  LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n    return this.low >>> 0;\n  };\n  /**\n   * Gets the number of bits needed to represent the absolute value of this Long.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n    if (this.isNegative()) // Unsigned Longs are never negative\n      return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n    var val = this.high != 0 ? this.high : this.low;\n  \n    for (var bit = 31; bit > 0; bit--) if ((val & 1 << bit) != 0) break;\n  \n    return this.high != 0 ? bit + 33 : bit + 1;\n  };\n  /**\n   * Tests if this Long's value equals zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isZero = function isZero() {\n    return this.high === 0 && this.low === 0;\n  };\n  /**\n   * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eqz = LongPrototype.isZero;\n  /**\n   * Tests if this Long's value is negative.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  LongPrototype.isNegative = function isNegative() {\n    return !this.unsigned && this.high < 0;\n  };\n  /**\n   * Tests if this Long's value is positive or zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isPositive = function isPositive() {\n    return this.unsigned || this.high >= 0;\n  };\n  /**\n   * Tests if this Long's value is odd.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isOdd = function isOdd() {\n    return (this.low & 1) === 1;\n  };\n  /**\n   * Tests if this Long's value is even.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isEven = function isEven() {\n    return (this.low & 1) === 0;\n  };\n  /**\n   * Tests if this Long's value equals the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.equals = function equals(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\n    return this.high === other.high && this.low === other.low;\n  };\n  /**\n   * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eq = LongPrototype.equals;\n  /**\n   * Tests if this Long's value differs from the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.notEquals = function notEquals(other) {\n    return !this.eq(\n    /* validates */\n    other);\n  };\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.neq = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ne = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value is less than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThan = function lessThan(other) {\n    return this.comp(\n    /* validates */\n    other) < 0;\n  };\n  /**\n   * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lt = LongPrototype.lessThan;\n  /**\n   * Tests if this Long's value is less than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) <= 0;\n  };\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lte = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.le = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThan = function greaterThan(other) {\n    return this.comp(\n    /* validates */\n    other) > 0;\n  };\n  /**\n   * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gt = LongPrototype.greaterThan;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) >= 0;\n  };\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ge = LongPrototype.greaterThanOrEqual;\n  /**\n   * Compares this Long's value with the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  LongPrototype.compare = function compare(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.eq(other)) return 0;\n    var thisNeg = this.isNegative(),\n        otherNeg = other.isNegative();\n    if (thisNeg && !otherNeg) return -1;\n    if (!thisNeg && otherNeg) return 1; // At this point the sign bits are the same\n  \n    if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1; // Both are positive if at least one is unsigned\n  \n    return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n  };\n  /**\n   * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  \n  LongPrototype.comp = LongPrototype.compare;\n  /**\n   * Negates this Long's value.\n   * @this {!Long}\n   * @returns {!Long} Negated Long\n   */\n  \n  LongPrototype.negate = function negate() {\n    if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;\n    return this.not().add(ONE);\n  };\n  /**\n   * Negates this Long's value. This is an alias of {@link Long#negate}.\n   * @function\n   * @returns {!Long} Negated Long\n   */\n  \n  \n  LongPrototype.neg = LongPrototype.negate;\n  /**\n   * Returns the sum of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} addend Addend\n   * @returns {!Long} Sum\n   */\n  \n  LongPrototype.add = function add(addend) {\n    if (!isLong(addend)) addend = fromValue(addend); // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the difference of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.subtract = function subtract(subtrahend) {\n    if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);\n    return this.add(subtrahend.neg());\n  };\n  /**\n   * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n   * @function\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.sub = LongPrototype.subtract;\n  /**\n   * Returns the product of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  LongPrototype.multiply = function multiply(multiplier) {\n    if (this.isZero()) return this;\n    if (!isLong(multiplier)) multiplier = fromValue(multiplier); // use wasm support if present\n  \n    if (wasm) {\n      var low = wasm[\"mul\"](this.low, this.high, multiplier.low, multiplier.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (multiplier.isZero()) return this.unsigned ? UZERO : ZERO;\n    if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;\n    if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;\n  \n    if (this.isNegative()) {\n      if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());else return this.neg().mul(multiplier).neg();\n    } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg(); // If both longs are small, use float multiplication\n  \n  \n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24)) return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned); // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n   * @function\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  \n  LongPrototype.mul = LongPrototype.multiply;\n  /**\n   * Returns this Long divided by the specified. The result is signed if this Long is signed or\n   *  unsigned if this Long is unsigned.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  LongPrototype.divide = function divide(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor);\n    if (divisor.isZero()) throw Error('division by zero'); // use wasm support if present\n  \n    if (wasm) {\n      // guard against signed division overflow: the largest\n      // negative number / -1 would be 1 larger than the largest\n      // positive number, due to two's complement.\n      if (!this.unsigned && this.high === -0x80000000 && divisor.low === -1 && divisor.high === -1) {\n        // be consistent with non-wasm code path\n        return this;\n      }\n  \n      var low = (this.unsigned ? wasm[\"div_u\"] : wasm[\"div_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (this.isZero()) return this.unsigned ? UZERO : ZERO;\n    var approx, rem, res;\n  \n    if (!this.unsigned) {\n      // This section is only relevant for signed longs and is derived from the\n      // closure library as a whole.\n      if (this.eq(MIN_VALUE)) {\n        if (divisor.eq(ONE) || divisor.eq(NEG_ONE)) return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n        else if (divisor.eq(MIN_VALUE)) return ONE;else {\n          // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n          var halfThis = this.shr(1);\n          approx = halfThis.div(divisor).shl(1);\n  \n          if (approx.eq(ZERO)) {\n            return divisor.isNegative() ? ONE : NEG_ONE;\n          } else {\n            rem = this.sub(divisor.mul(approx));\n            res = approx.add(rem.div(divisor));\n            return res;\n          }\n        }\n      } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;\n  \n      if (this.isNegative()) {\n        if (divisor.isNegative()) return this.neg().div(divisor.neg());\n        return this.neg().div(divisor).neg();\n      } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();\n  \n      res = ZERO;\n    } else {\n      // The algorithm below has not been made for unsigned longs. It's therefore\n      // required to take special care of the MSB prior to running it.\n      if (!divisor.unsigned) divisor = divisor.toUnsigned();\n      if (divisor.gt(this)) return UZERO;\n      if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n        return UONE;\n      res = UZERO;\n    } // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n  \n  \n    rem = this;\n  \n    while (rem.gte(divisor)) {\n      // Approximate the result of division. This may be a little greater or\n      // smaller than the actual value.\n      approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber())); // We will tweak the approximate result by changing it in the 48-th digit or\n      // the smallest non-fractional digit, whichever is larger.\n  \n      var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n          delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),\n          // Decrease the approximation until it is smaller than the remainder.  Note\n      // that if it is too large, the product overflows and is negative.\n      approxRes = fromNumber(approx),\n          approxRem = approxRes.mul(divisor);\n  \n      while (approxRem.isNegative() || approxRem.gt(rem)) {\n        approx -= delta;\n        approxRes = fromNumber(approx, this.unsigned);\n        approxRem = approxRes.mul(divisor);\n      } // We know the answer can't be zero... and actually, zero would cause\n      // infinite recursion since we would make no progress.\n  \n  \n      if (approxRes.isZero()) approxRes = ONE;\n      res = res.add(approxRes);\n      rem = rem.sub(approxRem);\n    }\n  \n    return res;\n  };\n  /**\n   * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  \n  LongPrototype.div = LongPrototype.divide;\n  /**\n   * Returns this Long modulo the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.modulo = function modulo(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor); // use wasm support if present\n  \n    if (wasm) {\n      var low = (this.unsigned ? wasm[\"rem_u\"] : wasm[\"rem_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    return this.sub(this.div(divisor).mul(divisor));\n  };\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  \n  LongPrototype.mod = LongPrototype.modulo;\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.rem = LongPrototype.modulo;\n  /**\n   * Returns the bitwise NOT of this Long.\n   * @this {!Long}\n   * @returns {!Long}\n   */\n  \n  LongPrototype.not = function not() {\n    return fromBits(~this.low, ~this.high, this.unsigned);\n  };\n  /**\n   * Returns count leading zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.countLeadingZeros = function countLeadingZeros() {\n    return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;\n  };\n  /**\n   * Returns count leading zeros. This is an alias of {@link Long#countLeadingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.clz = LongPrototype.countLeadingZeros;\n  /**\n   * Returns count trailing zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  LongPrototype.countTrailingZeros = function countTrailingZeros() {\n    return this.low ? ctz32(this.low) : ctz32(this.high) + 32;\n  };\n  /**\n   * Returns count trailing zeros. This is an alias of {@link Long#countTrailingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.ctz = LongPrototype.countTrailingZeros;\n  /**\n   * Returns the bitwise AND of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  LongPrototype.and = function and(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise OR of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.or = function or(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise XOR of this Long and the given one.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.xor = function xor(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shiftLeft = function shiftLeft(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);else return fromBits(0, this.low << numBits - 32, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shl = LongPrototype.shiftLeft;\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRight = function shiftRight(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);else return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shr = LongPrototype.shiftRight;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >>> numBits, this.unsigned);\n    if (numBits === 32) return fromBits(this.high, 0, this.unsigned);\n    return fromBits(this.high >>> numBits - 32, 0, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits rotated to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateLeft = function rotateLeft(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.low << numBits | this.high >>> b, this.high << numBits | this.low >>> b, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.high << numBits | this.low >>> b, this.low << numBits | this.high >>> b, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotl = LongPrototype.rotateLeft;\n  /**\n   * Returns this Long with bits rotated to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateRight = function rotateRight(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.high << b | this.low >>> numBits, this.low << b | this.high >>> numBits, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.low << b | this.high >>> numBits, this.high << b | this.low >>> numBits, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotr = LongPrototype.rotateRight;\n  /**\n   * Converts this Long to signed.\n   * @this {!Long}\n   * @returns {!Long} Signed long\n   */\n  \n  LongPrototype.toSigned = function toSigned() {\n    if (!this.unsigned) return this;\n    return fromBits(this.low, this.high, false);\n  };\n  /**\n   * Converts this Long to unsigned.\n   * @this {!Long}\n   * @returns {!Long} Unsigned long\n   */\n  \n  \n  LongPrototype.toUnsigned = function toUnsigned() {\n    if (this.unsigned) return this;\n    return fromBits(this.low, this.high, true);\n  };\n  /**\n   * Converts this Long to its byte representation.\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @this {!Long}\n   * @returns {!Array.<number>} Byte representation\n   */\n  \n  \n  LongPrototype.toBytes = function toBytes(le) {\n    return le ? this.toBytesLE() : this.toBytesBE();\n  };\n  /**\n   * Converts this Long to its little endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Little endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesLE = function toBytesLE() {\n    var hi = this.high,\n        lo = this.low;\n    return [lo & 0xff, lo >>> 8 & 0xff, lo >>> 16 & 0xff, lo >>> 24, hi & 0xff, hi >>> 8 & 0xff, hi >>> 16 & 0xff, hi >>> 24];\n  };\n  /**\n   * Converts this Long to its big endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Big endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesBE = function toBytesBE() {\n    var hi = this.high,\n        lo = this.low;\n    return [hi >>> 24, hi >>> 16 & 0xff, hi >>> 8 & 0xff, hi & 0xff, lo >>> 24, lo >>> 16 & 0xff, lo >>> 8 & 0xff, lo & 0xff];\n  };\n  /**\n   * Creates a Long from its byte representation.\n   * @param {!Array.<number>} bytes Byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytes = function fromBytes(bytes, unsigned, le) {\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\n  };\n  /**\n   * Creates a Long from its little endian byte representation.\n   * @param {!Array.<number>} bytes Little endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {\n    return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);\n  };\n  /**\n   * Creates a Long from its big endian byte representation.\n   * @param {!Array.<number>} bytes Big endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {\n    return new Long(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);\n  };\n  \n  var _default = Long;\n  exports.default = _default;\n  return \"default\" in exports ? exports.default : exports;\n})({});\nif (typeof define === 'function' && define.amd) define([], function() { return Long; });\nelse if (typeof module === 'object' && typeof exports === 'object') module.exports = Long;\n","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZE_PREFIX_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {!flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {!Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {!flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n * @param {boolean=} opt_size_prefix\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier, opt_size_prefix) {\n  var size_prefix = opt_size_prefix ? flatbuffers.SIZE_PREFIX_LENGTH : 0;\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH + size_prefix);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT + size_prefix);\n  this.addOffset(root_table);\n  if (size_prefix) {\n    this.addInt32(this.bb.capacity() - this.space);\n  }\n  this.bb.setPosition(this.space);\n};\n\n/**\n * Finalize a size prefixed buffer, pointing to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finishSizePrefixed = function (root_table, opt_file_identifier) {\n  this.finish(root_table, opt_file_identifier, true);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {!flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|!Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(1057);\n"],"names":["async","pathOrBuffer","options","session","Session","loadModel","OnnxjsSessionHandler","env","wasm","initTimeout","simd","proxy","numThreads","Number","isInteger","numCpuLogicalCores","navigator","cpus","length","hardwareConcurrency","Math","min","ceil","initializeWebAssemblyInstance","handler","OnnxruntimeWebAssemblySessionHandler","Promise","resolve","onnxjsBackend","registerBackend","wasmBackend","versions","web","version","AttributeWithCacheKeyImpl","constructor","attribute","Object","assign","this","cacheKey","_cacheKey","getOwnPropertyNames","sort","map","name","join","createAttributeWithCacheKey","ortFbs","onnxruntime","experimental","fbs","Attribute","attributes","_attributes","Map","attr","onnx","AttributeProto","set","getValue","getType","size","Error","key","type","value","delete","getFloat","defaultValue","get","getInt","getString","getTensor","getFloats","getInts","getStrings","getTensors","valueAndType","undefined","static","AttributeType","FLOAT","INT","STRING","TENSOR","FLOATS","INTS","STRINGS","TENSORS","attrType","GRAPH","GRAPHS","getValueNoCheck","LongUtil","isLong","longToNumber","arr","numberValue","Array","i","maybeLong","Tensor","fromProto","fromOrtTensor","utf8String","decodeUtf8String","getValueNoCheckFromOnnxFormat","getValueNoCheckFromOrtFormat","f","s","t","g","floats","ints","strings","tensors","graphs","floatsArray","intsLength","push","stringsLength","tensorsLength","backendsCache","tryLoadBackend","backendHint","backendObj","backend","obj","o","initialize","createSessionHandler","dispose","isBackend","init","webgl","WebGLBackend","resolveBackend","hint","hints","cache","contextId","matmulMaxBatchSize","textureCacheMode","pack","glContext","createWebGLContext","Logger","setWithEnv","verbose","e","warning","context","WebGLSessionHandler","CoordsGlslLib","GlslLib","super","getFunctions","offsetToCoords","coordsToOffset","toVec","valueFrom","getCommonUtilFuncs","getInputsSamplingSnippets","getOutputSamplingSnippet","getCustomTypes","GlslLibRoutine","outputLayout","outputTextureLayout","isPacked","getPackedOutputSamplingSnippet","getUnpackedOutputSamplingSnippet","outShape","unpackedShape","outTexShape","width","height","result","funcName","getOutputScalarCoords","getOutputPacked1DCoords","getOutputPacked2DCoords","getOutputPacked3DCoords","getOutputPackedNDCoords","floatTextureSetRGBASource","getGlsl","output","getOutputUnpacked1DCoords","getOutputUnpacked2DCoords","getOutputUnpacked3DCoords","getOutputUnpacked4DCoords","getOutputUnpacked5DCoords","getOutputUnpacked6DCoords","floatTextureSetRSource","shape","texShape","packedTexShape","source","ArrayUtil","arraysEqual","texelsInLogicalRow","texelsInBatch","texelsInBatchN","batches","coords","b","rank","strides","coordsToCompute","coordsFromIndexSnippet","stride","glsl","texture2D","programInfo","inputNames","forEach","samplerName","inputLayout","inputTextureLayouts","generateShaderFuncNameFromInputSamplerName","getPackedSamplerFromInput","getUnpackedSamplerFromInput","outCoordFuncName","generateShaderFuncNameFromInputSamplerNameAtOutCoords","getPackedSamplerAtOutputCoords","getUnpackedSamplerAtOutputCoords","inShape","texName","texFuncSnippet","inRank","outRank","broadcastDims","BroadcastUtil","getBroadcastDims","getCoordsDataType","rankDiff","coordsSnippet","fields","getGlChannels","d","unpackedCoordsSnippet","isInputScalar","ShapeUtil","isOutputScalar","rows","cols","indexOf","inTexShape","getPackedSamplerScalar","getPackedSampler1D","getPackedSampler2D","getPackedSampler3D","getPackedSamplerND","getUnpackedSamplerScalar","getUnpackedSampler1D","getUnpackedSampler2D","getUnpackedSampler3D","getUnpackedSampler4D","getUnpackedSampler5D","getUnpackedSampler6D","texNumR","texNumC","packedSampler","valuesPerRow","squeezedShape","slice","keptDims","newInputShape","squeezeInputShape","params","newInputLayout","JSON","parse","stringify","samplerRoutine","routineBody","getSqueezedParams","dependencies","index","tNumR","tNumC","newShape","squeezeShape","stride0","stride1","routine","revDims","reverse","stride2","stride3","stride4","xScale","yScale","stridesBlock","body","layout","getValueFromSingle","varName","transpose","getPackedValueFrom","FunctionType","addDependency","node","nodes","cycleCheck","Set","alreadyTraversed","createOrderedNodes","graphNodes","dfsTraverse","root","has","add","EncodingGlslLib","encodeFloat32","decodeFloat32","encode","decode","encodeUint8","endianness","isLittleEndian","decodeUint8","ArrayBuffer","a","Uint32Array","c","Uint8Array","FragColorGlslLib","setFragColor","getColorAsFloat","INLINE_FUNC_DEF_REGEX","script","inlineDefs","match","exec","split","tokens","trim","filter","v","regexString","replace","regex","RegExp","variable","declLine","newBody","paramRedecLine","replacement","libs","glslLibRoutineDependencyGraph","GlslContext","keys","glslRegistry","lib","libName","routinesInLib","currentNode","GlslLibRoutineNode","preprocess","shaderSource","hasMain","getDefaultFragShaderMain","replaceInlines","getFragShaderPreamble","getUniforms","variables","getImports","routinesIncluded","selectGlslLibRoutinesToBeIncluded","routines","classAndRoutine","TopologicalSortGlslRoutines","returnOrderedNodes","samplers","uniformLines","sampler","arrayLength","VecGlslLib","ShapeUtilsGlslLib","bcastIndex","bcastMatmulIndex","offsetToIndices","indicesToOffset","incrementIndices","outputRank","dimOffset","block","indexToOffsetSingle","offsetToIndicesSingle","shapeInit","GLSL_ES_2_0","varyingVertex","varyingFrag","outputDeclaration","GLSL_ES_3_0","outputShapeLength","binaryVecFunctions","copyVec","setVecItem","getVecItem","nameOp","sub","mul","div","fname","assignmentBlock","packedTextureDataCache","unpackedTextureDataCache","calculateTextureWidthAndHeight","textureType","layoutStrategy","executeProgram","program","inputs","inputTypes","inputTextureDatas","getOrCreateTextureData","texture","cacheHint","getProgramInfoUniqueKey","artifact","programManager","getArtifact","createTextureLayoutFromTextureType","dims","outputTextureData","createTextureData","build","setArtifact","runProgram","run","tensor","TextureType","packed","td","getTextureData","dataId","unpack","packedLastDimension","group","channels","adjustedKernelShape","adjustedLayout","buffer","numberData","numFeatureMaps","oldRowSize","newRowSize","Float32Array","oldOffset","newOffset","subarray","unpackedTextureLayout","createTextureLayoutFromShape","reverseWH","unpackedTextureData","createTextureDataFromLayoutBindTensor","dataType","data","usage","textureManager","createTextureFromLayout","createTextureDataFromTexture","reshapeUnpacked","input","reshapedDims","inputTD","unpacked","newTextureLayout","computeStrides","reshapePacked","isReshapeCheap","squeezedInputShape","processDims3D","squeezedOutputShape","squeezedInputTensor","squeezedOutputTensor","createPackedReshape3DProgramInfoLoader","cast","tensorId","textureData","_id","readTexture","readTextureAsync","setTextureData","isInitializer","isTextureLayoutCached","clearActiveTextures","releaseTexture","isFloat32DownloadSupported","readUint8TextureAsFloat","encodeAsUint8","createPackProgramInfoLoader","createUnpackProgramInfoLoader","WEBGL_OP_RESOLVE_RULES","unaryOps","abs","acos","binaryOps","and","asin","atan","averagePool","parseAveragePoolAttributes","batchNormalization","parseBatchNormalizationAttributes","parseCastAttributes","clip","parseClipAttributes","clipV11","concat","parseConcatAttributes","conv","parseConvAttributes","convTranspose","parseConvTransposeAttributes","cos","identity","depthToSpace","parseDepthToSpaceAttributes","equal","elu","parseEluAttributes","exp","flatten","parseFlattenAttributes","floor","gather","parseGatherAttributes","gemm","parseGemmAttributesV7","parseGemmAttributesV11","globalAveragePool","parseGlobalAveragePoolAttributes","globalMaxPool","greater","imageScaler","parseImageScalerAttributes","instanceNormalization","parseInstanceNormalizationAttributes","leakyRelu","parseLeakyReluAttributes","less","lrn","parseLrnAttributes","log","matMul","parseMatMulAttributes","maxPool","parseMaxPoolAttributes","neg","not","or","padV2","parsePadAttributesV2","padV11","parsePadAttributesV11","pow","pRelu","reduceLogSum","parseReduceAttributes","reduceMax","reduceMean","reduceMin","reduceProd","reduceSum","reduceLogSumSquare","relu","reshape","resize","parseResizeAttributesV10","parseResizeAttributesV11","sigmoid","sin","sliceV10","parseSliceAttributes","softmax","parseSoftmaxAttributes","softmaxV13","parseSoftmaxAttributesV13","parseSplitAttributes","sqrt","squeeze","parseSqueezeAttributes","squeezeV13","sum","tan","tanh","tile","parseTransposeAttributes","upsample","parseUpsampleAttributesV7","parseUpsampleAttributesV9","unsqueeze","parseUnsqueezeAttributes","unsqueezeV13","xor","batchNormalizationProgramMetadata","inferenceHandler","validateInputs","createBatchNormalizationProgramInfo","epsilon","momentum","spatial","scaleWidth","scaleHeight","X","scale","B","mean","var_","glslAdd","ValueBased","glslDiv","glslMul","glslSub","glslEqual","glslGreater","glslLess","glslAnd","glslOr","glslXor","glslPow","glslBuiltinBinary","glslPRelu","createBinaryProgramInfoLoader","glslFunc","outputTensorType","createBinaryProgramInfo","isBroadcast","areEqual","outputShape","usePackedTexture","calculatedShape","calcShape","aRank","bRank","aBcast","bBcast","to","ProtoUtil","tensorDataTypeFromProto","createPackedConcatProgramInfoLoader","metadata","inputCount","from","fill","axis","inputShape","dataNShape","axisIndex","getChannels","dtype","unpackChannel","unpackFromChannel","shapes","offsets","channel","lastChannels","allChannels","getValueSnippet","shift","getShiftedChannelsSnippet","lastIndex","x","createPackedConcatProgramInfo","channelIdx","idx","createUnpackedConcatProgramInfoLoader","sizeInConcatAxis","previousSum","getTextureIndexWhereDataResidesMethod","getTextureIndexWhereDataResidesLinearSearch","getTextureIndexWhereDataResidesBinarySearch","getFetchDataFromCorrectTextureMethod","getGetSizeInConcatAxisValueFromIndexMethod","createUnpackedConcatProgramInfo","searchAxis","numberOfTensors","tensorRank","codeLines","inputType","inputDimensionality","createUnpackedGroupedConvProgramInfoLoader","hasBias","processBias","xShape","wShape","outputChannelsPerGroup","autoPad","dilations","kernelShape","pads","calculateOutputShape","activationFunction","applyActivation","getActivationSnippet","createUnpackedGroupedConvProgramInfo","conv2DPackedPointwise","xshape","kshape","reshapedX","reshapedK","matmulInputs","matmulOutput","createPackedMatmulProgramInfoLoader","conv2DPacked","im2colOutput","createPackedIm2ColProgramInfoLoader","kernelReshaped","computeTotalPad","inDim","adj","kernel","dilation","outSize","distributePadding","totalPad","head","tail","smallPad","convTranspose2d","adjustedAttributes","getAdjustedConvTransposeAttributes","convTranspose2DUnpacked","valueInit","inputChannelsPerGroup","createUnpackedConvTransposeProgramInfo","createUnpackedConvTransposeProgramInfoLoader","outputPadding","spatialRank","updateShape","calculateOutputShapeAndPads","newAttributes","activationAttributes","parseInternalActivationAttributes","featureMaps","adjustPads","batchSize","inputSpatialShape","outChannels","dilatedKernelShape","inputSpatialShapeWithPad","outputSpatialShape","conv2d","getAdjustedConvAttributes","packMode","isPointwise","conv2DUnpackedPointwise","conv2DUnpacked","createMatmulProgramInfoLoader","xIm2Col","createIm2ColProgramInfoLoader","dotProductInputs","createDotProductProgramInfoLoader","PoolConvUtil","adjustPadsBasedOnAutoPad","blocksize","blocksizeSqr","transposePerm","mode","firstReshapeShape","firstReshapedTensor","transposeAttributes","perm","transposeOutput","secondReshapeShape","TypeError","activationCacheKey","createDotProductProgramMetadata","im2colShape","calculateIm2ColDims","kWidth","kHeight","im2colStrides","im2colWidth","im2colHeight","initValue","sharedDim","createDotProductProgramInfo","outputDims","flattenShape","r","func","activation","glslRelu","glslSigmoid","glslClip","clipMin","clipMax","activationName","MIN_CLIP","MAX_CLIP","createGatherProgramInfoLoader","gatherProgramMetadata","indexDataShape","normalizeAxis","indexCopyOps","createGatherProgramInfo","NUMBER_TYPES","createGemmProgramInfoLoader","parseGemmAttributes","isOptionalC","transA","transB","alpha","beta","createGemmProgramInfo","aShape","bShape","M","N","GemmUtil","getShapeOfGemmResult","line","w","wshape","kernelSize","unrolled","row","col","createPackedIm2ColProgramInfo","im2colDims","createIm2ColProgramInfo","createImageScalerProgramInfoLoader","bias","imageScalerProgramMetadata","createGetBiasMethod","createImageScalerProgramInfo","numChannels","meanAndVariance","createMeanAndVarianceProgramInfoLoader","createComputeOutputProgramInfoLoader","meanAndVarianceProgramMetadata","xDims","channelSize","createMeanAndVarianceProgramInfo","computeOutputProgramMetadata","meanAndVarianceShape","textureWidth","textureHeight","meanAndVarianceWidth","meanAndVarianceHeight","createComputeOutputProgramInfo","createLrnProgramInfoLoader","lrnProgramMetadata","C","createLrnProgramInfo","sharedDimIndex","coordsDataType","allGlChannels","getBiasForMatmulSnippet","getBiasForMatmul","getBcastedSamplerForMatmulSnippet","unpackedACoordsSnippet","unpackedBCoordsSnippet","inAShape","inBShape","inARank","inBRank","rankADiff","rankBDiff","broadcastADims","broadcastBDims","coordsASnippet","coordsBSnippet","swapDimSnippet","getBcastSamplerForMatmul","getSamplerAInLoopSnippet","res","getA","getSamplerBInLoopSnippet","getB","createPackedMatmulProgramInfo","createMatmulProgramMetadata","arank","brank","createMatmulProgramInfo","packProgramMetadata","unpackedReversed","inputRank","setup","reversedInputWH","outOfBoundsCondition","cond","getOutOfBoundsCondition","D","getOutput","createPackProgramInfo","getVecChannels","padProgramMetadata","validateInputsV2","createPadProgramInfo","validateInputsV11","attrubutes","generatePadAttributesFromInputs","integerData","floatData","padShape","getPadFunction","getPadConstant","getPadReflect","getPadEdge","createAveragePoolProgramInfo","ceilMode","countIncludePad","isGlobalOperator","getAdjustedPoolAttributesAndOutputShape","op2","generatePoolingCode","createMaxPoolProgramInfo","storageOrder","hasDilations","hasOwnProperty","call","adjustPoolAttributes","computePoolOutputShape","globalMaxPoolAttributes","globalMaxPoolMetadata","inputDims","op1","start","kw","sw","pwStart","pwEnd","dimW","codeW","codeH","codeHEnd","kh","sh","phStart","phEnd","dimH","kernelStrides","stridesRank","padsRank","offsetToIndicesFunction","copyInputDims","copyArray","copyPads","copyKernelStrides","copyStrides","padCode","reduce","cur","array","arrayName","reduceOp","reduceProgramMetadata","createReduceProgramInfo","axes","keepDims","iRank","idxCopy","normalizeAxes","ops","reduceOps","k","idxZero","input3D","outputShape3D","createPackedReshape3DProgramMetadata","inputShape3D","mainLoop","outputCoords","getReshapedInputCoords","getFlattenedIndexFrom3D","createPackedReshape3DProgramInfo","batch","isCheapReshape","calculateReshapedDims","resizeProgramMetadata","createPackedResizeProgramInfo","parseUpsampleAttributes","scales","prepareInputs","every","coordinateTransformMode","dim","outputHeight","outputWidth","inputHeight","inputWidth","scalesHeight","scalesWidth","getSourceFracIndex","outputSizes","scalesTensor","scalesInputIdx","sizesInputIdx","parseScalesData","isResize","sizesTensor","parseScalesDataFromOutputSize","yDims","scalesValidation","end","Int32Array","sliceProgramMetadata","createSliceProgramInfo","starts","ends","val","normalizedAxes","sliceOps","validateInputsV10","generateSliceAttributesFromInputs","some","softmaxComputeMaxProgramMetadata","softmaxComputeScaleProgramMetadata","softmaxProgramMetadata","logicalRowCount","sizeToDimension","featureCount","sizeFromDimension","computeSoftmax","isTransposeRequired","transposedInputShape","transposeAttribute","transposedInputs","_","p","computeMaxProgramInfo","createComputeMaxProgramInfo","max","computeScaleProgramInfo","createComputScaleProgramInfo","softMaxProgramInfo","createSoftMaxProgramInfo","maxElementPerLogicalRow","normalizationPerLogicalRow","splitProgramMetadata","count","getProgramCount","createSplitProgramInfo","numOutputs","outputs","SplitUtil","splitShape","offset","validateInputsV13","sumProgramMetadata","createSumProgramInfo","sumLine","j","tileProgramMetadata","createTileProgramInfo","tileOps","transposeProgramMetadata","createTransposeProgramInfo","getAdjustedPerm","unpackedOutputShape","getOutputShape","getPermFunctionBody","sortBasedOnPerm","reverseFunc","downloadUint8AsFloat","glslAbs","glslBuiltinUnary","glslAcos","glslAsin","glslAtan","glslCeil","glslCos","glslElu","glslExp","glslFloor","glslIdentity","glslLeakyRelu","glslLog","glslNeg","glslNot","glslSin","glslSqrt","glslTan","glslTanh","createElementwiseProgramInfoLoader","createElementwiseProgramInfo","generateClipAttributesFromInputs","unpackProgramMetadata","createUnpackProgramInfo","innerDims","sourceCoords","getSourceCoords","unsqueezeShape","upsampleProgramMetadata","createUpsampleProgramInfo","opset","extrapolationValue","needRoiInput","useExtrapolation","nearestMode","cubicCoefficientA","excludeOutside","useNearest2xOptimization","roiInputIdx","outputPitches","inputPitches","precalculatedPitches","getInputFloatFunction","profiler","textureLayoutStrategy","repo","attributesBound","buildArtifact","event","gl","useProgram","bindOutput","bindAttributes","attribLocations","bindUniforms","uniformLocations","err","error","draw","vertexShader","deleteShader","deleteProgram","preprocessor","GlslPreprocessor","fragScript","compile","getUniformLocations","getAttribLocations","fragShaderScript","vertexShaderScript","getVertexShaderSource","compileShader","VERTEX_SHADER","debug","fragShader","FRAGMENT_SHADER","createProgram","attachFramebuffer","positionHandle","position","textureCoordHandle","textureCoord","setVertexAttributes","textures","texturePosition","location","find","bindTexture","uniform1fv","uniform1f","uniform1iv","uniform1i","uniformHandle","bindTextureToUniform","getAttribLocation","getUniformLocation","reference","PreferLogicalStrategy","maxTextureSize","ProgramManager","TextureManager","reuseTextures","pack2unpackMap","unpack2packMap","createInferenceHandler","WebGLInferenceHandler","onGraphInitialized","graph","initializers","getValues","addInitializer","opsets","op","resolveOperator","impl","opImpl","opInit","internalFormat","R32F","format","RED","RGBA32F","RGBA","src","textureSize","allocate","dataSize","dest","ALPHA","UNSIGNED_BYTE","_textureSize","byteOffset","byteLength","isEmptyArray","isArray","parseAxisParam","assert","ax","isInt","sizeFromShape","sizeToSquarishShape","computeTextureWH","prefs","breakAxis","wsize","hsize","totalSize","wh","computeTexture","logShape","squeezeResult","dimsToSkip","inferredDims","reversedWH","config","pendingRead","inUseTextures","idleTextures","textureLookup","textureDataType","toEncoderType","encoder","getEncoder","pop","updateTexture","toTextureData","allocateTexture","toTensorData","subscribers","createAndWaitForFence","tensorData","deleteTexture","splice","Int16Array","Int8Array","Uint16Array","Float64Array","_dataType","len","checkFn","delayFn","_counter","maxCounter","reject","tryCount","tryFn","nextBackoff","setTimeout","charAt","toUpperCase","createNewWebGLContext","canvas","ca","depth","antialias","stencil","preserveDrawingBuffer","premultipliedAlpha","failIfMajorPerformanceCaveat","getContext","WebGLContext","webgl2","OffscreenCanvas","createOffscreenCanvas","document","createElement","createCanvas","isContextLost","disable","DEPTH_TEST","STENCIL_TEST","BLEND","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","enable","SCISSOR_TEST","CULL_FACE","cullFace","BACK","linearSearchLastTrue","frameBufferBound","itemsToPoll","getExtensions","vertexbuffer","createVertexbuffer","framebuffer","createFramebuffer","queryVitalParameters","createTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","checkError","texSubImage2D","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","viewport","scissor","readPixels","isFramebufferReady","getActiveTexture","getParameter","ACTIVE_TEXTURE","TEXTURE0","getTextureBinding","TEXTURE_BINDING_2D","getFramebufferBinding","FRAMEBUFFER_BINDING","vertexAttribPointer","enableVertexAttribArray","attachShader","linkProgram","shaderType","shader","createShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","activeTexture","drawArrays","TRIANGLE_STRIP","getError","label","toString","DataEncoders","RedFloat32DataEncoder","isRenderFloat32Supported","RGBAFloatDataEncoder","textureHalfFloatExtension","HALF_FLOAT_OES","Uint8DataEncoder","unit","maxTextureImageUnits","disposed","deleteFramebuffer","bindBuffer","ARRAY_BUFFER","deleteBuffer","ELEMENT_ARRAY_BUFFER","finish","createDefaultGeometry","createBuffer","geometry","bufferData","STATIC_DRAW","fb","isFloatTextureAttachableToFrameBuffer","checkFloatTextureAttachableToFrameBuffer","checkRenderFloat32","checkFloat32Download","isBlendSupported","checkFloat32Blend","MAX_TEXTURE_SIZE","MAX_TEXTURE_IMAGE_UNITS","colorBufferFloatExtension","getExtension","disjointTimerQueryWebgl2Extension","textureFloatExtension","frameBuffer","isComplete","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","fragmentShader","POINTS","NO_ERROR","beginTimer","gl2","ext","query","createQuery","beginQuery","TIME_ELAPSED_EXT","endTimer","endQuery","isTimerResultAvailable","available","disjoint","getQueryParameter","QUERY_RESULT_AVAILABLE","GPU_DISJOINT_EXT","getTimerResult","timeElapsed","QUERY_RESULT","deleteQuery","repeatedTry","fenceContext","createFence","pollFence","isFencePassed","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","status","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","addItemToPoll","pollItems","isDoneFn","resolveFn","KernelOp","getNodes","_ops","reset","_starter","resolved","_values","getInputIndices","sessionHandler","modelInputs","graphInputs","sequence","graphValues","rear","thisOpIndex","thisOp","inputList","inputTensors","outputList","downstreamNodes","currentDownstreamNodeIndex","currentDownstreamNode","getOutputIndices","outputIndex","outputTensor","getData","Graph","graphProto","initializer","GraphImpl","Value","valueInfo","_from","_to","tensorValueTypeFromProto","tensorType","Node","_nodeProto","NodeProto","opType","tensorAttributesFromORTFormat","executeNode","graphInitializer","buildGraph","transformGraph","checkIsAcyclic","_allInputIndices","getInputNames","_allInputNames","_allOutputIndices","getOutputNames","_allOutputNames","_allData","_nodes","GraphProto","buildGraphFromOnnxFormat","buildGraphFromOrtFormat","dataIndices","nodesIndices","inputValueNames","currentIndex","tensorDimsFromProto","nodeProto","pick","dataIndex","inputsLength","inputName","nodeArgsLength","nodeArgs","valueType","TypeInfoValue","tensor_type","TensorTypeAndShape","elemType","dimLength","dimValue","initializersLength","tensorDimsFromORTFormat","outputsLength","outputName","nodesLength","attributesLength","starters","nodesStack","nodesState","nodeIndex","outgoingEdgeIndex","downstreamNodeIndex","removeAllIdentityNodes","removeAllDropoutNodes","fuseConvActivationNodes","finalizeGraph","newIndices","nodePossition","ind","currentData","deleteNode","inputValueIndex","outputValueIndex","nodesConsumingOutput","delIndex","replaceIndex","isActivation","n","next","child","SEVERITY_VALUE","info","fatal","LOGGER_PROVIDER_MAP","_severity","_content","_category","severity","content","category","console","color","LOGGER_DEFAULT_CONFIG","provider","minimalSeverity","logDateTime","logSourceLocation","LOGGER_CONFIG_MAP","arg0","arg1","arg2","arg3","bind","logInternal","stack","Date","toISOString","previousConfig","logLevel","Event","startTime","endCallback","timer","ctx","waitForQueryAndGetTime","EventRecord","endTime","maxNumberEvents","flushBatchSize","flushIntervalInMilliseconds","_started","_flushPointer","_maxNumberEvents","_flushBatchSize","_flushIntervalInMilliseconds","_timingEvents","_flushTime","now","stop","logOneEvent","begin","isPromise","then","reason","eventRes","endSync","checkTimer","toFixed","currentTime","previousPointer","started","performance","load","buf","isOrtFormat","loadFromOnnxFormat","loadFromOrtFormat","modelProto","ModelProto","irVersion","_opsets","opsetImport","domain","_graph","flatbuffers","ByteBuffer","ortModel","InferenceSession","getRootAsInferenceSession","model","opsetImportLength","opsetId","INT_TYPES","FLOAT_TYPES","matchSelector","selector","endsWith","rangeStart","parseInt","substring","isNaN","pair","rangeEnd","rules","rule","versionSelector","DimensionValueType","TensorDataType","NodeType","Shape","bb","bb_pos","__init","readInt32","setPosition","SIZE_PREFIX_LENGTH","__offset","Dimension","__indirect","__vector","__vector_len","builder","startObject","addFieldOffset","startVector","addOffset","endVector","numElems","endObject","startShape","addDim","endShape","DimensionValue","denotation","optionalEncoding","__string","valueOffset","denotationOffset","startDimension","addValue","addDenotation","endDimension","dimType","readInt8","UNKNOWN","readInt64","createLong","dimParam","addFieldInt8","addFieldInt64","dimParamOffset","startDimensionValue","addDimType","addDimValue","addDimParam","endDimensionValue","UNDEFINED","addFieldInt32","shapeOffset","startTensorTypeAndShape","addElemType","addShape","endTensorTypeAndShape","MapType","keyType","TypeInfo","valueTypeOffset","startMapType","addKeyType","addValueType","endMapType","SequenceType","elemTypeOffset","startSequenceType","endSequenceType","EdgeEnd","readUint32","srcArgIndex","dstArgIndex","node_index","src_arg_index","dst_arg_index","prep","writeInt32","NodeEdge","inputEdges","inputEdgesLength","outputEdges","outputEdgesLength","inputEdgesOffset","outputEdgesOffset","startNodeEdge","addNodeIndex","addInputEdges","addOutputEdges","endNodeEdge","docString","sinceVersion","Primitive","executionProviderType","inputArgCounts","inputArgCountsLength","inputArgCountsArray","bytes","implicitInputs","implicitInputsLength","nameOffset","docStringOffset","domainOffset","opTypeOffset","executionProviderTypeOffset","inputsOffset","outputsOffset","attributesOffset","inputArgCountsOffset","addInt32","implicitInputsOffset","startNode","addName","addDocString","addDomain","addSinceVersion","addIndex","addOpType","addType","addExecutionProviderType","addInputs","addOutputs","addAttributes","addInputArgCounts","addImplicitInputs","endNode","ValueInfo","typeOffset","startValueInfo","endValueInfo","readUint8","NONE","__union","startTypeInfo","endTypeInfo","OperatorSetId","startOperatorSetId","addVersion","endOperatorSetId","dimsLength","rawData","rawDataLength","rawDataArray","stringData","stringDataLength","dimsOffset","addInt64","rawDataOffset","addInt8","stringDataOffset","startTensor","addDims","addDataType","addRawData","addStringData","endTensor","SparseTensor","values","indices","valuesOffset","indicesOffset","startSparseTensor","addValues","addIndices","endSparseTensor","readFloat32","floatsLength","graphsLength","addFieldFloat32","sOffset","tOffset","gOffset","floatsOffset","addFloat32","intsOffset","stringsOffset","tensorsOffset","graphsOffset","startAttribute","addF","addI","addS","addT","addG","addFloats","addInts","addStrings","addTensors","addGraphs","endAttribute","maxNodeIndex","nodeEdges","nodeEdgesLength","sparseInitializers","sparseInitializersLength","initializersOffset","nodeArgsOffset","nodesOffset","nodeEdgesOffset","sparseInitializersOffset","startGraph","addInitializers","addNodeArgs","addNodes","addMaxNodeIndex","addNodeEdges","addSparseInitializers","endGraph","Model","producerName","producerVersion","modelVersion","graphDocString","opsetImportOffset","producerNameOffset","producerVersionOffset","graphOffset","graphDocStringOffset","startModel","addIrVersion","addOpsetImport","addProducerName","addProducerVersion","addModelVersion","addGraph","addGraphDocString","endModel","KernelCreateInfos","nodeIndices","nodeIndicesLength","nodeIndicesArray","kernelDefHashes","readUint64","kernelDefHashesLength","nodeIndicesOffset","kernelDefHashesOffset","startKernelCreateInfos","addNodeIndices","addKernelDefHashes","endKernelCreateInfos","SubGraphSessionState","graphId","sessionState","SessionState","graphIdOffset","sessionStateOffset","requiredField","startSubGraphSessionState","addGraphId","addSessionState","endSubGraphSessionState","kernels","subGraphSessionStates","subGraphSessionStatesLength","kernelsOffset","subGraphSessionStatesOffset","startSessionState","addKernels","addSubGraphSessionStates","endSessionState","__has_identifier","ortVersion","ortVersionOffset","modelOffset","startInferenceSession","addOrtVersion","addModel","endInferenceSession","outputNames","feeds","_fetches","_options","inputMap","feed","outputMap","startProfiling","endProfiling","_initialized","Profiler","create","graphInputTypes","graphInputDims","_model","arg","process","promisify","readFile","response","fetch","arrayBuffer","isView","modelProtoBlob","initializeOps","_executionPlan","ExecutionPlan","normalizeAndValidateInputs","outputTensors","execute","createOutput","modelInputNames","sortedInputs","sortedInputsIndex","validateInputTensorDims","modelInputIndices","modelValues","graphInput","validateInputTensorTypes","givenInputs","expectedType","actualType","noneDimSupported","expectedDims","actualDims","compareTensorDims","modelOutputNames","dataProvider","asyncDataProvider","_strides","Guid","validateDimsAndCalcSize","empty","RangeError","dataviewConstructor","sizeof","dataBuffer","createView","tensorProto","str","dataDest","dataSource","DataView","elementSize","sizeofProto","readProto","TensorProto","DataType","INT32","INT16","UINT16","INT8","UINT8","BOOL","int32Data","INT64","int64Data","DOUBLE","doubleData","UINT32","UINT64","uint64Data","element","ortTensor","greaterThanOrEqual","lessThan","toNumber","view","getUint8","getInt8","getUint16","getInt16","getFloat32","getInt32","getUint32","fromBits","getFloat64","expectedDimensions","expr","msg","n1","n2","MatMulUtil","dimsA","dimsB","adims","bdims","isMatMul","crank","cdims","cShapeMatMul","calcMatMulShape","aLen","bLen","broadcastedIndices","originalShape","originalIndices","fillIndex","inplace","resultType","outputIndices","originalIndicesA","originalIndicesB","rest","valA","valB","isAScalar","isBScalar","finalShape","finalRank","unshift","target","targetIndex","sourceIndex","blockSize","leftShape","transLeft","rightShape","transRight","biasShape","K","kDim","isValidBroadcast","typeProto","unsigned","Long","fromValue","low","high","getSizeFromDimensionRange","axisToIncrementOn","originalDims","shapeHints","nDims","unknownDimension","newTensorSize","oldTensorSize","pad","shape1","shape2","total","y","right","inSqueezeList","inputDimsIterator","determineSplit","numElementsAlongAxis","ReduceUtil","keepdims","calcReduceShape","inputStrides","indicesY","calcReduceByAxis","curAxisInd","pos","step","adjustPadAndReturnShape","computeShapeHelper","filterDims","inSize","padHeadIndex","padTailIndex","dkernel","padNeeded","TextDecoder","isProxy","proxyWorker","initWasmCallbacks","initOrtCallbacks","initializing","initialized","aborted","createSessionAllocateCallbacks","createSessionFinalizeCallbacks","createSessionCallbacks","releaseSessionCallbacks","runCallbacks","endProfilingCallbacks","ensureWorker","onProxyWorkerMessage","ev","out","scriptSrc","currentScript","wasmPaths","substr","lastIndexOf","terminate","onmessage","message","in","postMessage","initializeWebAssembly","initializeRuntime","core","initRuntime","createSessionAllocate","createSessionFinalize","modeldata","createSession","releaseSession","sessionId","inputIndices","extractTransferableBuffers","setRunOptions","getInstance","runOptionsHandle","allocs","runOptions","logSeverityLevel","logVerbosityLevel","tagDataOffset","tag","allocWasmString","_OrtCreateRunOptions","checkLastError","extra","iterateExtraOptions","WeakSet","keyDataOffset","valueDataOffset","_OrtAddRunConfigEntry","_OrtReleaseRunOptions","alloc","_free","runtimeInitialized","path","modelData","fetches","inputArray","entries","kvp","setSessionOptions","sessionOptionsHandle","sessionOptions","use_ort_model_bytes_directly","executionProviders","ep","enableMemPattern","appendDefaultOptions","graphOptimizationLevel","getGraphOptimzationLevel","executionMode","getExecutionMode","logIdDataOffset","logId","optimizedModelFilePathOffset","optimizedModelFilePath","_OrtCreateSessionOptions","enableCpuMemArena","enableProfiling","epName","webnnOptions","deviceType","_OrtAddSessionConfigEntry","powerPreference","epNameDataOffset","_OrtAppendExecutionProvider","setExecutionProviders","_OrtReleaseSessionOptions","tensorDataTypeStringToEnum","tensorDataTypeEnumToString","getTensorElementSize","dateType","tensorTypeToTypedArrayConstructor","BigInt64Array","BigUint64Array","logLevelStringToEnum","loggingLevel","_OrtInit","activeSessions","modelDataOffset","_malloc","HEAPU8","sessionHandle","inputNamesUTF8Encoded","outputNamesUTF8Encoded","_OrtCreateSession","outputCount","stackSave","dataOffset","stackAlloc","_OrtGetInputOutputCount","HEAP32","stackRestore","getSessionInputOutputCount","_OrtGetInputName","UTF8ToString","_OrtGetOutputName","_OrtFree","_OrtReleaseSession","runOptionsAllocs","inputValues","inputAllocs","dataByteLength","HEAPU32","dimIndex","_OrtCreateTensor","beforeRunStack","inputValuesOffset","inputNamesOffset","outputValuesOffset","outputNamesOffset","inputValuesIndex","inputNamesIndex","outputValuesIndex","outputNamesIndex","errorCode","_OrtRun","runPromise","jsepRunPromise","beforeGetTensorDataStack","tensorDataOffset","_OrtGetTensorData","tensorDataIndex","maxBytesToRead","_OrtReleaseTensor","profileFileName","_OrtEndProfiling","buffers","ortWasmFactory","ortWasmFactoryThreaded","flags","timeout","useThreads","SharedArrayBuffer","MessageChannel","port1","WebAssembly","validate","isMultiThreadSupported","useSimd","isSimdSupported","wasmPrefixOverride","wasmFileName","getWasmFileName","wasmPathOverride","isTimeout","tasks","factory","locateFile","fileName","scriptDirectory","Blob","URL","createObjectURL","mainScriptUrlOrBlob","__dirname","scriptSourceCode","module","what","race","PThread","terminateAllThreads","dataLength","lengthBytesUTF8","stringToUTF8","prefix","seen","paramsOffset","_OrtGetLastError","errorMessagePointer","errorMessage","Worker_fn","exports","workerConstructor","workerOptions","url","globalScope","self","window","blob","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","append","getBlob","webkitURL","objectURL","worker","revokeObjectURL","encodeURIComponent","valuesById","$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Version","properties","sparseTensors","typeProtos","prototype","refAttrName","newBuffer","sparseTensor","tp","emptyArray","writer","uint32","string","float","int64","fork","ldelim","TypeProto","int32","SparseTensorProto","encodeDelimited","reader","end2","skipType","decodeDelimited","verify","isString","fromObject","object","String","LongBits","base64","toObject","arrays","defaults","long","longs","enums","json","isFinite","toJSON","toJSONOptions","getTypeUrl","typeUrlPrefix","ValueInfoProto","TrainingInfoProto","initializationBinding","updateBinding","initialization","algorithm","StringStringEntryProto","metadataProps","trainingInfo","functions","OperatorSetIdProto","FunctionProto","TensorAnnotation","quantParameterTensorNames","tensorName","sparseInitializer","quantizationAnnotation","externalData","segment","dataLocation","Segment","double","uint64","DataLocation","TensorShapeProto","$oneOfFields","defineProperty","oneOfGetter","oneOfSetter","oneofs","sequenceType","mapType","optionalType","sparseTensorType","Sequence","Optional","OperatorStatus","attributeProto","_scriptDir","__filename","P","L","W","I","U","H","u","q","ready","l","h","m","importScripts","ENVIRONMENT_IS_PTHREAD","T","A","O","dirname","startsWith","normalize","readFileSync","thisProgram","argv","exitCode","inspect","global","Worker","href","XMLHttpRequest","open","send","responseText","responseType","onload","onerror","S","E","warn","writeSync","print","printErr","quit","wasmBinary","F","noExitRuntime","ae","R","Y","z","G","HEAP8","HEAP16","HEAPU16","HEAPF32","HEAPF64","HEAP64","HEAPU64","INITIAL_MEMORY","wasmMemory","Memory","initial","maximum","shared","V","J","Z","$","Q","preRun","ee","ne","re","te","onAbort","RuntimeError","oe","ie","ue","credentials","ok","catch","instantiate","fe","se","ce","ye","hb","Lb","le","Db","kb","jb","cmd","start_routine","Mb","Bb","pthread_ptr","unref","Sb","pe","de","fromCharCode","he","me","Dn","Nb","onExit","be","we","ge","nb","zb","tb","Fb","Vb","receiveObjectTransfer","Kb","threadInitTLS","yb","setExitStatus","xb","Xb","ar","Jb","Cb","targetThread","Kn","Wb","transferList","bn","thread","loaded","threadId","text","alert","args","filename","lineno","on","handlers","urlOrBlob","wasmModule","Ib","Ab","ve","establishStackSpace","fr","cr","_e","Te","gb","ub","qb","pb","Ae","Oe","Ub","Se","Ee","Me","charCodeAt","Ce","ke","Fe","Pe","Re","De","xe","We","Ie","Ue","je","He","Ye","Be","invokeEntryPoint","ir","ze","qe","Ge","Le","Ne","Ve","Je","apply","arguments","Xe","Ze","$e","Ke","Eb","Qe","en","nn","Hb","rn","wb","tn","an","fromWireType","un","fn","sn","cn","ln","pn","dn","hn","mn","Atomics","Tb","store","ur","gn","nr","er","__emscripten_thread_mailbox_await","checkMailbox","yn","vn","wn","_n","globalThis","Function","Tn","An","On","Sn","En","Mn","Cn","kn","getFullYear","getMonth","getDate","Fn","Pn","Rn","Qn","sr","lr","tr","hrtime","timeOrigin","xn","Wn","In","Un","USER","LOGNAME","PATH","PWD","HOME","LANG","languages","jn","Hn","Yn","Bn","zn","qn","Gn","Ln","Nn","Vn","getDay","lb","mb","getTime","setDate","setMonth","setFullYear","Qb","Pb","rb","vb","sb","ib","Yb","Ob","Rb","includes","Jn","Xn","BindingError","InternalError","count_emval_handles","Zn","$n","ra","ga","rr","na","ka","ba","ja","la","toWireType","argPackAdvance","readValueFromPointer","ob","ta","sa","Uint8ClampedArray","ua","Gb","qa","ea","fa","pa","ref","deleteObject","getUTCSeconds","getUTCMinutes","getUTCHours","getUTCDate","getUTCMonth","getUTCFullYear","getUTCDay","UTC","getSeconds","getMinutes","getHours","getTimezoneOffset","aa","setTime","getYear","toTimeString","va","oa","da","grow","ha","ia","ma","asm","Ua","Xa","wa","monitorRunDependencies","clearInterval","instantiateWasm","instantiateStreaming","instance","xa","ya","za","Aa","Ba","Ca","Da","Ea","Fa","Ga","Ha","Ia","Ja","Ka","La","Ma","Na","Oa","Pa","Qa","_pthread_self","Ra","Sa","Ta","Va","__emscripten_tls_init","__embind_initialize_bindings","Wa","__emscripten_thread_init","Ya","_a","$a","__emscripten_thread_crashed","Za","__emscripten_thread_exit","ab","__emscripten_check_mailbox","cb","db","eb","pr","calledRun","onRuntimeInitialized","postRun","startWorker","setStatus","keepRuntimeAlive","ExitStatus","preInit","ortWasm","fs","copyWithin","pending","b64","s64","parts","chunk","invalidEncoding","test","EventEmitter","_listeners","evt","off","listeners","emit","f32","f8b","writeFloat_f32_cpy","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","round","exponent","LN2","readFloat_ieee754","readUint","uint","mantissa","NaN","Infinity","writeUintLE","writeUintBE","readUintLE","readUintBE","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","inquire","moduleName","mod","eval","SIZE","MAX","slab","utf8","read","write","c1","c2","__esModule","guid","EMPTY","isGuid","validator","gen","createEmpty","raw","random","equals","other","isEmpty","protobuf","configure","_configure","BufferWriter","BufferReader","rpc","indexOutOfRange","writeLength","create_array","Buffer","isBuffer","readLongVarint","bits","readFixed32_end","readFixed64","_slice","sint32","bool","fixed32","sfixed32","skip","wireType","BufferReader_","merge","sint64","zzDecode","fixed64","sfixed64","utf8Slice","Service","rpcImpl","requestDelimited","responseDelimited","Boolean","rpcCall","method","requestCtor","responseCtor","request","callback","asPromise","endedByRPC","zero","zzEncode","zeroHash","fromNumber","fromString","toLong","fromHash","hash","toHash","mask","part0","part1","part2","dst","ifNotSet","newError","CustomError","captureStackTrace","writable","enumerable","configurable","pool","isNode","freeze","emptyObject","isObject","isset","isSet","prop","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","lcFirst","toLowerCase","ProtocolError","fieldNames","fieldMap","encoding","allocUnsafe","Op","noop","State","states","writeByte","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","require","default","Instance","Module","ctz32","clz32","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","radix","radixToPower","power","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","eq","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","comp","lt","lessThanOrEqual","lte","greaterThan","gt","gte","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","b00","divide","divisor","approx","toUnsigned","shru","shr","shl","log2","delta","approxRes","approxRem","modulo","countLeadingZeros","clz","countTrailingZeros","ctz","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","rotateLeft","rotl","rotateRight","rotr","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","_default","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","float32","float64","toFloat64","Builder","opt_initial_size","initial_size","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","clear","capacity","forceDefaults","asUint8Array","additional_bytes","align_size","old_buf_size","growByteBuffer","byte_size","writeInt8","writeInt16","writeInt64","writeFloat32","writeFloat64","addInt16","addFloat64","voffset","slot","addFieldInt16","addFieldFloat64","addFieldStruct","nested","notNested","new_buf_size","nbb","numfields","vtableloc","trimmed_size","existing_vtable","vt1","outer_loop","vt2","readInt16","root_table","opt_file_identifier","opt_size_prefix","size_prefix","file_identifier","finishSizePrefixed","table","field","table_start","vtable_start","elem_size","num_elems","alignment","createString","codePoint","bytes_","position_","readUint16","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","vtable_offset","opt_encoding","ident","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","definition","Symbol","toStringTag","__webpack_exports__"],"sourceRoot":""}