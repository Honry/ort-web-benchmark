{"version":3,"file":"ort-web.es5.min.js","mappings":"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","sources":["webpack://onnxruntime-web/webpack/universalModuleDefinition","webpack://onnxruntime-web/./lib/backend-onnxjs.ts","webpack://onnxruntime-web/./lib/backend-wasm.ts","webpack://onnxruntime-web/./lib/index.ts","webpack://onnxruntime-web/./lib/onnxjs/attribute-with-cache-key.ts","webpack://onnxruntime-web/./lib/onnxjs/attribute.ts","webpack://onnxruntime-web/./lib/onnxjs/backend.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/backend-webgl.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-coordinate-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-definitions.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-encoding-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-fragcolor-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-function-inliner.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-preprocessor.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-registered-libs.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-shape-utils-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-source.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-vec-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/inference-handler.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/op-resolve-rules.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/batch-normalization.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/binary-op.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/cast.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/concat-packed.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/concat.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/conv-grouped.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/conv-pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/conv-transpose.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/conv.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/depth-to-space.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/dot-product.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/flatten.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/fuse-utils.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/gather.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/gemm.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/im2col-pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/im2col.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/image-scaler.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/instance-normalization.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/lrn.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/matmul-pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/matmul.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/packing-utils.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/pad.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/pool.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/reduce.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/reshape-packed.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/reshape.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/resize-packed.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/shape.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/slice.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/softmax.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/split.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/squeeze.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/sum.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/tile.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/transpose.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/uint8-encode.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/unary-op.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/unpack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/unsqueeze.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/upsample.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/program-manager.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/session-handler.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/texture-data-encoder.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/texture-layout-strategy.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/texture-layout.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/texture-manager.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/types.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/utils.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/webgl-context-factory.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/webgl-context.ts","webpack://onnxruntime-web/./lib/onnxjs/execution-plan.ts","webpack://onnxruntime-web/./lib/onnxjs/graph.ts","webpack://onnxruntime-web/./lib/onnxjs/instrument.ts","webpack://onnxruntime-web/./lib/onnxjs/model.ts","webpack://onnxruntime-web/./lib/onnxjs/operators.ts","webpack://onnxruntime-web/./lib/onnxjs/opset.ts","webpack://onnxruntime-web/./lib/onnxjs/ort-schema/flatbuffers/ort-generated.ts","webpack://onnxruntime-web/./lib/onnxjs/session-handler.ts","webpack://onnxruntime-web/./lib/onnxjs/session.ts","webpack://onnxruntime-web/./lib/onnxjs/tensor.ts","webpack://onnxruntime-web/./lib/onnxjs/util.ts","webpack://onnxruntime-web/./lib/version.ts","webpack://onnxruntime-web/./lib/wasm/jsep/backend-webgpu.ts","webpack://onnxruntime-web/./lib/wasm/jsep/init.ts","webpack://onnxruntime-web/./lib/wasm/jsep/log.ts","webpack://onnxruntime-web/./lib/wasm/jsep/util.ts","webpack://onnxruntime-web/./lib/wasm/jsep/webgpu/attribute-with-cache-key.ts","webpack://onnxruntime-web/./lib/wasm/jsep/webgpu/gpu-data-manager.ts","webpack://onnxruntime-web/./lib/wasm/jsep/webgpu/op-resolve-rules.ts","webpack://onnxruntime-web/./lib/wasm/jsep/webgpu/ops/3rd-party/activation_util.ts","webpack://onnxruntime-web/./lib/wasm/jsep/webgpu/ops/3rd-party/conv2d_mm_webgpu.ts","webpack://onnxruntime-web/./lib/wasm/jsep/webgpu/ops/3rd-party/conv_backprop_webgpu.ts","webpack://onnxruntime-web/./lib/wasm/jsep/webgpu/ops/3rd-party/conv_util.ts","webpack://onnxruntime-web/./lib/wasm/jsep/webgpu/ops/3rd-party/matmul_packed_webgpu.ts","webpack://onnxruntime-web/./lib/wasm/jsep/webgpu/ops/binary-op.ts","webpack://onnxruntime-web/./lib/wasm/jsep/webgpu/ops/common.ts","webpack://onnxruntime-web/./lib/wasm/jsep/webgpu/ops/concat.ts","webpack://onnxruntime-web/./lib/wasm/jsep/webgpu/ops/conv-grouped.ts","webpack://onnxruntime-web/./lib/wasm/jsep/webgpu/ops/conv-transpose.ts","webpack://onnxruntime-web/./lib/wasm/jsep/webgpu/ops/conv.ts","webpack://onnxruntime-web/./lib/wasm/jsep/webgpu/ops/conv2d-mm.ts","webpack://onnxruntime-web/./lib/wasm/jsep/webgpu/ops/expand.ts","webpack://onnxruntime-web/./lib/wasm/jsep/webgpu/ops/fuse-utils.ts","webpack://onnxruntime-web/./lib/wasm/jsep/webgpu/ops/gemm.ts","webpack://onnxruntime-web/./lib/wasm/jsep/webgpu/ops/matmul.ts","webpack://onnxruntime-web/./lib/wasm/jsep/webgpu/ops/pool.ts","webpack://onnxruntime-web/./lib/wasm/jsep/webgpu/ops/reduce.ts","webpack://onnxruntime-web/./lib/wasm/jsep/webgpu/ops/slice.ts","webpack://onnxruntime-web/./lib/wasm/jsep/webgpu/ops/split.ts","webpack://onnxruntime-web/./lib/wasm/jsep/webgpu/ops/transpose.ts","webpack://onnxruntime-web/./lib/wasm/jsep/webgpu/ops/unary-op.ts","webpack://onnxruntime-web/./lib/wasm/jsep/webgpu/program-manager.ts","webpack://onnxruntime-web/./lib/wasm/jsep/webgpu/types.ts","webpack://onnxruntime-web/./lib/wasm/proxy-wrapper.ts","webpack://onnxruntime-web/./lib/wasm/run-options.ts","webpack://onnxruntime-web/./lib/wasm/session-handler.ts","webpack://onnxruntime-web/./lib/wasm/session-options.ts","webpack://onnxruntime-web/./lib/wasm/wasm-common.ts","webpack://onnxruntime-web/./lib/wasm/wasm-core-impl.ts","webpack://onnxruntime-web/./lib/wasm/wasm-factory.ts","webpack://onnxruntime-web/./lib/wasm/wasm-utils.ts","webpack://onnxruntime-web/./lib/wasm/proxy-worker/main.ts","webpack://onnxruntime-web/../node_modules/worker-loader/dist/runtime/inline.js","webpack://onnxruntime-web/./lib/onnxjs/ort-schema/protobuf/onnx.js","webpack://onnxruntime-web/./lib/wasm/binding/ort-wasm-threaded.min.js","webpack://onnxruntime-web/./lib/wasm/binding/ort-wasm.js","webpack://onnxruntime-web/./node_modules/@protobufjs/aspromise/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/base64/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/eventemitter/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/float/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/inquire/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/pool/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/utf8/index.js","webpack://onnxruntime-web/./node_modules/guid-typescript/dist/guid.js","webpack://onnxruntime-web/./node_modules/protobufjs/minimal.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/index-minimal.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/reader.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/reader_buffer.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/roots.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/rpc.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/rpc/service.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/util/longbits.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/util/minimal.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/writer.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/writer_buffer.js","webpack://onnxruntime-web/external umd {\"commonjs\":\"onnxruntime-common\",\"commonjs2\":\"onnxruntime-common\",\"root\":\"ort\"}","webpack://onnxruntime-web/./node_modules/long/umd/index.js","webpack://onnxruntime-web/./node_modules/flatbuffers/js/flatbuffers.mjs","webpack://onnxruntime-web/webpack/bootstrap","webpack://onnxruntime-web/webpack/runtime/compat get default export","webpack://onnxruntime-web/webpack/runtime/define property getters","webpack://onnxruntime-web/webpack/runtime/hasOwnProperty shorthand","webpack://onnxruntime-web/webpack/runtime/make namespace object","webpack://onnxruntime-web/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"onnxruntime-common\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"onnxruntime-common\")) : factory(root[\"ort\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, function(__WEBPACK_EXTERNAL_MODULE__1670__) {\nreturn ","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable import/no-internal-modules */\nimport {Backend, InferenceSession, SessionHandler} from 'onnxruntime-common';\n\nimport {Session} from './onnxjs/session';\nimport {OnnxjsSessionHandler} from './onnxjs/session-handler';\n\nclass OnnxjsBackend implements Backend {\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  async init(): Promise<void> {}\n\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    // NOTE: Session.Config(from onnx.js) is not compatible with InferenceSession.SessionOptions(from\n    // onnxruntime-common).\n    //       In future we should remove Session.Config and use InferenceSession.SessionOptions.\n    //       Currently we allow this to happen to make test runner work.\n    const session = new Session(options as unknown as Session.Config);\n\n    // typescript cannot merge method override correctly (so far in 4.2.3). need if-else to call the method.\n    if (typeof pathOrBuffer === 'string') {\n      await session.loadModel(pathOrBuffer);\n    } else {\n      await session.loadModel(pathOrBuffer);\n    }\n\n    return new OnnxjsSessionHandler(session);\n  }\n}\n\nexport const onnxjsBackend = new OnnxjsBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Backend, env, InferenceSession, SessionHandler} from 'onnxruntime-common';\nimport {cpus} from 'os';\n\nimport {initializeWebAssemblyInstance} from './wasm/proxy-wrapper';\nimport {OnnxruntimeWebAssemblySessionHandler} from './wasm/session-handler';\n\n/**\n * This function initializes all flags for WebAssembly.\n *\n * Those flags are accessible from `ort.env.wasm`. Users are allow to set those flags before the first inference session\n * being created, to override default value.\n */\nexport const initializeFlags = (): void => {\n  if (typeof env.wasm.initTimeout !== 'number' || env.wasm.initTimeout < 0) {\n    env.wasm.initTimeout = 0;\n  }\n\n  if (typeof env.wasm.simd !== 'boolean') {\n    env.wasm.simd = true;\n  }\n\n  if (typeof env.wasm.proxy !== 'boolean') {\n    env.wasm.proxy = false;\n  }\n\n  if (typeof env.wasm.numThreads !== 'number' || !Number.isInteger(env.wasm.numThreads) || env.wasm.numThreads <= 0) {\n    const numCpuLogicalCores = typeof navigator === 'undefined' ? cpus().length : navigator.hardwareConcurrency;\n    env.wasm.numThreads = Math.min(4, Math.ceil((numCpuLogicalCores || 1) / 2));\n  }\n};\n\nclass OnnxruntimeWebAssemblyBackend implements Backend {\n  async init(): Promise<void> {\n    // populate wasm flags\n    initializeFlags();\n\n    // init wasm\n    await initializeWebAssemblyInstance();\n  }\n  createSessionHandler(path: string, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\n  createSessionHandler(buffer: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    const handler = new OnnxruntimeWebAssemblySessionHandler();\n    await handler.loadModel(pathOrBuffer, options);\n    return Promise.resolve(handler);\n  }\n}\n\nexport const wasmBackend = new OnnxruntimeWebAssemblyBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports */\n// We use \"require\" instead of \"import\" here because import statement must be put in top level. Our current code does\n// not allow terser to tree-shaking code as expected because some codes are treated as having side effects.\n// So we import code inside the if-clause to allow terser remove the code safely.\n\nexport * from 'onnxruntime-common';\nimport {registerBackend, env} from 'onnxruntime-common';\nimport {version} from './version';\n\nif (!BUILD_DEFS.DISABLE_WEBGL) {\n  const onnxjsBackend = require('./backend-onnxjs').onnxjsBackend;\n  registerBackend('webgl', onnxjsBackend, -10);\n}\n\nif (!BUILD_DEFS.DISABLE_WASM) {\n  const wasmBackend = require('./backend-wasm').wasmBackend;\n  if (!BUILD_DEFS.DISABLE_WEBGPU && typeof navigator !== 'undefined' && navigator.gpu) {\n    registerBackend('webgpu', wasmBackend, 5);\n  }\n  registerBackend('cpu', wasmBackend, 10);\n  registerBackend('wasm', wasmBackend, 10);\n  registerBackend('xnnpack', wasmBackend, 9);\n  registerBackend('webnn', wasmBackend, 9);\n}\n\nenv.versions.web = version;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nclass AttributeWithCacheKeyImpl {\n  constructor(attribute: Record<string, unknown>) {\n    Object.assign(this, attribute);\n  }\n\n  private _cacheKey: string;\n  public get cacheKey(): string {\n    if (!this._cacheKey) {\n      this._cacheKey =\n          Object.getOwnPropertyNames(this).sort().map(name => `${(this as Record<string, unknown>)[name]}`).join(';');\n    }\n    return this._cacheKey;\n  }\n}\n\nexport interface AttributeWithCacheKey {\n  readonly cacheKey: string;\n}\n\nexport const createAttributeWithCacheKey = <T extends Record<string, unknown>>(attribute: T): T&AttributeWithCacheKey =>\n    new AttributeWithCacheKeyImpl(attribute) as unknown as T & AttributeWithCacheKey;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport Long from 'long';\n\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\nimport {onnx} from './ort-schema/protobuf/onnx';\nimport {Tensor} from './tensor';\nimport {decodeUtf8String, LongUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Attribute {\n  export interface DataTypeMap {\n    float: number;\n    int: number;\n    string: string;\n    tensor: Tensor;\n    floats: number[];\n    ints: number[];\n    strings: string[];\n    tensors: Tensor[];\n  }\n\n  export type DataType = keyof DataTypeMap;\n}\n\ntype ValueTypes = Attribute.DataTypeMap[Attribute.DataType];\n\ntype Value = [ValueTypes, Attribute.DataType];\n\nexport class Attribute {\n  constructor(attributes: onnx.IAttributeProto[]|ortFbs.Attribute[]|null|undefined) {\n    this._attributes = new Map();\n    if (attributes !== null && attributes !== undefined) {\n      for (const attr of attributes) {\n        if (attr instanceof onnx.AttributeProto) {\n          this._attributes.set(attr.name, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        } else if (attr instanceof ortFbs.Attribute) {\n          this._attributes.set(attr.name()!, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        }\n      }\n      if (this._attributes.size < attributes.length) {\n        throw new Error('duplicated attribute names');\n      }\n    }\n  }\n\n  set(key: string, type: Attribute.DataType, value: ValueTypes): void {\n    this._attributes.set(key, [value, type]);\n  }\n  delete(key: string): void {\n    this._attributes.delete(key);\n  }\n  getFloat(key: string, defaultValue?: Attribute.DataTypeMap['float']) {\n    return this.get(key, 'float', defaultValue);\n  }\n\n  getInt(key: string, defaultValue?: Attribute.DataTypeMap['int']) {\n    return this.get(key, 'int', defaultValue);\n  }\n\n  getString(key: string, defaultValue?: Attribute.DataTypeMap['string']) {\n    return this.get(key, 'string', defaultValue);\n  }\n\n  getTensor(key: string, defaultValue?: Attribute.DataTypeMap['tensor']) {\n    return this.get(key, 'tensor', defaultValue);\n  }\n\n  getFloats(key: string, defaultValue?: Attribute.DataTypeMap['floats']) {\n    return this.get(key, 'floats', defaultValue);\n  }\n\n  getInts(key: string, defaultValue?: Attribute.DataTypeMap['ints']) {\n    return this.get(key, 'ints', defaultValue);\n  }\n\n  getStrings(key: string, defaultValue?: Attribute.DataTypeMap['strings']) {\n    return this.get(key, 'strings', defaultValue);\n  }\n\n  getTensors(key: string, defaultValue?: Attribute.DataTypeMap['tensors']) {\n    return this.get(key, 'tensors', defaultValue);\n  }\n\n  private get<V extends Attribute.DataTypeMap[Attribute.DataType]>(\n      key: string, type: Attribute.DataType, defaultValue?: V): V {\n    const valueAndType = this._attributes.get(key);\n    if (valueAndType === undefined) {\n      if (defaultValue !== undefined) {\n        return defaultValue;\n      }\n      throw new Error(`required attribute not found: ${key}`);\n    }\n    if (valueAndType[1] !== type) {\n      throw new Error(`type mismatch: expected ${type} but got ${valueAndType[1]}`);\n    }\n    return valueAndType[0] as V;\n  }\n\n  private static getType(attr: onnx.IAttributeProto|ortFbs.Attribute): Attribute.DataType {\n    const type = attr instanceof onnx.AttributeProto ? (attr).type : (attr as ortFbs.Attribute).type();\n    switch (type) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return 'float';\n      case onnx.AttributeProto.AttributeType.INT:\n        return 'int';\n      case onnx.AttributeProto.AttributeType.STRING:\n        return 'string';\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return 'tensor';\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return 'floats';\n      case onnx.AttributeProto.AttributeType.INTS:\n        return 'ints';\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return 'strings';\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return 'tensors';\n      default:\n        throw new Error(`attribute type is not supported yet: ${onnx.AttributeProto.AttributeType[type]}`);\n    }\n  }\n\n  private static getValue(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    const attrType = attr instanceof onnx.AttributeProto ? attr.type : (attr as ortFbs.Attribute).type();\n    if (attrType === onnx.AttributeProto.AttributeType.GRAPH || attrType === onnx.AttributeProto.AttributeType.GRAPHS) {\n      throw new Error('graph attribute is not supported yet');\n    }\n\n    const value = this.getValueNoCheck(attr);\n\n    // cast LONG to number\n    if (attrType === onnx.AttributeProto.AttributeType.INT && LongUtil.isLong(value)) {\n      return LongUtil.longToNumber(value as Long | flatbuffers.Long);\n    }\n\n    // cast LONG[] to number[]\n    if (attrType === onnx.AttributeProto.AttributeType.INTS) {\n      const arr = (value as Array<number|Long|flatbuffers.Long>);\n      const numberValue: number[] = new Array<number>(arr.length);\n\n      for (let i = 0; i < arr.length; i++) {\n        const maybeLong = arr[i];\n        numberValue[i] = LongUtil.longToNumber(maybeLong);\n      }\n\n      return numberValue;\n    }\n\n    // cast onnx.TensorProto to onnxjs.Tensor\n    if (attrType === onnx.AttributeProto.AttributeType.TENSOR) {\n      return attr instanceof onnx.AttributeProto ? Tensor.fromProto(value as onnx.ITensorProto) :\n                                                   Tensor.fromOrtTensor(value as ortFbs.Tensor);\n    }\n\n    // cast onnx.TensorProto[] to onnxjs.Tensor[]\n    if (attrType === onnx.AttributeProto.AttributeType.TENSORS) {\n      if (attr instanceof onnx.AttributeProto) {\n        const tensorProtos = value as onnx.ITensorProto[];\n        return tensorProtos.map(value => Tensor.fromProto(value));\n      } else if (attr instanceof ortFbs.Attribute) {\n        const tensorProtos = value as ortFbs.Tensor[];\n        return tensorProtos.map(value => Tensor.fromOrtTensor(value));\n      }\n    }\n\n    // cast Uint8Array to string\n    if (attrType === onnx.AttributeProto.AttributeType.STRING) {\n      // string in onnx attribute is of uint8array type, so we need to convert it to string below. While in ort format,\n      // string attributes are returned as string, so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8String = value as Uint8Array;\n        return decodeUtf8String(utf8String);\n      }\n    }\n\n    // cast Uint8Array[] to string[]\n    if (attrType === onnx.AttributeProto.AttributeType.STRINGS) {\n      // strings in onnx attribute is returned as uint8array[], so we need to convert it to string[] below. While in ort\n      // format strings attributes are returned as string[], so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8Strings = value as Uint8Array[];\n        return utf8Strings.map(decodeUtf8String);\n      }\n    }\n\n    return value as ValueTypes;\n  }\n\n  private static getValueNoCheck(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    return attr instanceof (onnx.AttributeProto) ? this.getValueNoCheckFromOnnxFormat(attr) :\n                                                   this.getValueNoCheckFromOrtFormat(attr as ortFbs.Attribute);\n  }\n\n  private static getValueNoCheckFromOnnxFormat(attr: onnx.IAttributeProto) {\n    switch (attr.type!) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return attr.f;\n      case onnx.AttributeProto.AttributeType.INT:\n        return attr.i;\n      case onnx.AttributeProto.AttributeType.STRING:\n        return attr.s;\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return attr.t;\n      case onnx.AttributeProto.AttributeType.GRAPH:\n        return attr.g;\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return attr.floats;\n      case onnx.AttributeProto.AttributeType.INTS:\n        return attr.ints;\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return attr.strings;\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return attr.tensors;\n      case onnx.AttributeProto.AttributeType.GRAPHS:\n        return attr.graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${onnx.AttributeProto.AttributeType[attr.type!]}`);\n    }\n  }\n\n  private static getValueNoCheckFromOrtFormat(attr: ortFbs.Attribute) {\n    switch (attr.type()) {\n      case ortFbs.AttributeType.FLOAT:\n        return attr.f();\n      case ortFbs.AttributeType.INT:\n        return attr.i();\n      case ortFbs.AttributeType.STRING:\n        return attr.s();\n      case ortFbs.AttributeType.TENSOR:\n        return attr.t();\n      case ortFbs.AttributeType.GRAPH:\n        return attr.g();\n      case ortFbs.AttributeType.FLOATS:\n        return attr.floatsArray();\n      case ortFbs.AttributeType.INTS: {\n        const ints = [];\n        for (let i = 0; i < attr.intsLength(); i++) {\n          ints.push(attr.ints(i)!);\n        }\n        return ints;\n      }\n      case ortFbs.AttributeType.STRINGS: {\n        const strings = [];\n        for (let i = 0; i < attr.stringsLength(); i++) {\n          strings.push(attr.strings(i));\n        }\n        return strings;\n      }\n      case ortFbs.AttributeType.TENSORS: {\n        const tensors = [];\n        for (let i = 0; i < attr.tensorsLength(); i++) {\n          tensors.push(attr.tensors(i)!);\n        }\n        return tensors;\n      }\n      // case ortFbs.AttributeType.GRAPHS:\n      // TODO: Subgraph not supported yet.\n      // const graphs = [];\n      // for (let i = 0; i < attr.graphsLength(); i++) {\n      //   graphs.push(attr.graphs(i)!);\n      // }\n      // return graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${ortFbs.AttributeType[attr.type()]}`);\n    }\n  }\n\n  protected _attributes: Map<string, Value>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {WebGLBackend} from './backends/backend-webgl';\nimport {Graph} from './graph';\nimport {Operator} from './operators';\nimport {OpSet} from './opset';\nimport {Session} from './session';\n\nexport interface InferenceHandler {\n  /**\n   * dispose the inference handler. it will be called as the last step in Session.run()\n   */\n  dispose(): void;\n}\n\nexport interface SessionHandler {\n  /**\n   * transform the graph at initialization time\n   * @param graphTransformer the graph transformer to manipulate the model graph\n   */\n  transformGraph?(graphTransformer: Graph.Transformer): void;\n\n  /**\n   * create an instance of InferenceHandler to use in a Session.run() call\n   */\n  createInferenceHandler(): InferenceHandler;\n\n  /**\n   * dispose the session handler. it will be called when a session is being disposed explicitly\n   */\n  dispose(): void;\n\n  /**\n   * Resolves the operator from the name and opset version; backend specific\n   * @param node the node to resolve\n   * @param opsets a list of opsets that exported from the model\n   * @param graph the completely initialized graph\n   */\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator;\n\n  /**\n   * This method let's the sessionHandler know that the graph initialization is complete\n   * @param graph the completely initialized graph\n   */\n  onGraphInitialized?(graph: Graph): void;\n\n  /**\n   * a reference to the corresponding backend\n   */\n  readonly backend: Backend;\n\n  /**\n   * a reference to the session context\n   */\n  readonly context: Session.Context;\n}\n\nexport interface Backend {\n  /**\n   * initialize the backend. will be called only once, when the first time the\n   * backend it to be used\n   */\n  initialize(): boolean|Promise<boolean>;\n\n  /**\n   * create an instance of SessionHandler to use in a Session object's lifecycle\n   */\n  createSessionHandler(context: Session.Context): SessionHandler;\n\n  /**\n   * dispose the backend. currently this will not be called\n   */\n  dispose(): void;\n}\n\n// caches all initialized backend instances\nconst backendsCache: Map<string, Backend> = new Map();\n\nexport const backend: {[name: string]: Backend} = {\n  webgl: new WebGLBackend()\n};\n\n/**\n * Resolve a reference to the backend. If a hint is specified, the corresponding\n * backend will be used.\n */\nexport async function resolveBackend(hint?: string|readonly string[]): Promise<Backend> {\n  if (!hint) {\n    return resolveBackend(['webgl']);\n  } else {\n    const hints = typeof hint === 'string' ? [hint] : hint;\n\n    for (const backendHint of hints) {\n      const cache = backendsCache.get(backendHint);\n      if (cache) {\n        return cache;\n      }\n\n      const backend = await tryLoadBackend(backendHint);\n      if (backend) {\n        return backend;\n      }\n    }\n  }\n\n  throw new Error('no available backend to use');\n}\n\nasync function tryLoadBackend(backendHint: string): Promise<Backend|undefined> {\n  const backendObj = backend;\n\n  if (typeof backendObj[backendHint] !== 'undefined' && isBackend(backendObj[backendHint])) {\n    const backend = backendObj[backendHint];\n    let init = backend.initialize();\n    if (typeof init === 'object' && 'then' in init) {\n      init = await init;\n    }\n    if (init) {\n      backendsCache.set(backendHint, backend);\n      return backend;\n    }\n  }\n\n  return undefined;\n}\n\nfunction isBackend(obj: unknown) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const o = obj as any;\n\n  // check if an object is a Backend instance\n  if (\n      'initialize' in o && typeof o.initialize === 'function' &&                      // initialize()\n      'createSessionHandler' in o && typeof o.createSessionHandler === 'function' &&  // createSessionHandler()\n      'dispose' in o && typeof o.dispose === 'function'                               // dispose()\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nexport type BackendType = Backend;\nexport type SessionHandlerType = ReturnType<BackendType['createSessionHandler']>;\nexport type InferenceHandlerType = ReturnType<SessionHandlerType['createInferenceHandler']>;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {Backend, SessionHandler} from '../backend';\nimport {Logger} from '../instrument';\nimport {Session} from '../session';\n\nimport {WebGLSessionHandler} from './webgl/session-handler';\nimport {WebGLContext} from './webgl/webgl-context';\nimport {createWebGLContext} from './webgl/webgl-context-factory';\n\n/**\n * WebGLBackend is the entry point for all WebGL opeartions\n * When it starts it created the WebGLRenderingContext\n * and other main framework components such as Program and Texture Managers\n */\nexport class WebGLBackend implements Backend {\n  glContext: WebGLContext;\n\n  get contextId(): 'webgl'|'webgl2'|undefined {\n    return env.webgl.contextId;\n  }\n  set contextId(value: 'webgl'|'webgl2'|undefined) {\n    env.webgl.contextId = value;\n  }\n\n  get matmulMaxBatchSize(): number|undefined {\n    return env.webgl.matmulMaxBatchSize;\n  }\n  set matmulMaxBatchSize(value: number|undefined) {\n    env.webgl.matmulMaxBatchSize = value;\n  }\n\n  get textureCacheMode(): 'initializerOnly'|'full'|undefined {\n    return env.webgl.textureCacheMode;\n  }\n  set textureCacheMode(value: 'initializerOnly'|'full'|undefined) {\n    env.webgl.textureCacheMode = value;\n  }\n\n  get pack(): boolean|undefined {\n    return env.webgl.pack;\n  }\n  set pack(value: boolean|undefined) {\n    env.webgl.pack = value;\n  }\n\n  get async(): boolean|undefined {\n    return env.webgl.async;\n  }\n  set async(value: boolean|undefined) {\n    env.webgl.async = value;\n  }\n\n  initialize(): boolean {\n    try {\n      this.glContext = createWebGLContext(this.contextId);\n      if (typeof this.matmulMaxBatchSize !== 'number') {\n        this.matmulMaxBatchSize = 16;\n      }\n      if (typeof this.textureCacheMode !== 'string') {\n        this.textureCacheMode = 'full';\n      }\n      if (typeof this.pack !== 'boolean') {\n        this.pack = false;\n      }\n      if (typeof this.async !== 'boolean') {\n        this.async = false;\n      }\n\n      Logger.setWithEnv(env);\n\n      Logger.verbose(\n          'WebGLBackend',\n          `Created WebGLContext: ${typeof this.glContext} with matmulMaxBatchSize: ${\n              this.matmulMaxBatchSize}; textureCacheMode: ${this.textureCacheMode}; pack: ${this.pack}; async: ${\n              this.async}.`);\n      return true;\n    } catch (e) {\n      Logger.warning('WebGLBackend', `Unable to initialize WebGLBackend. ${e}`);\n      return false;\n    }\n  }\n  createSessionHandler(context: Session.Context): SessionHandler {\n    return new WebGLSessionHandler(this, context);\n  }\n  dispose(): void {\n    this.glContext.dispose();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ArrayUtil, BroadcastUtil, ShapeUtil} from '../../util';\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\nimport {squeezeShape} from './texture-layout-strategy';\nimport {TextureLayout} from './types';\nimport {generateShaderFuncNameFromInputSamplerName, generateShaderFuncNameFromInputSamplerNameAtOutCoords, getCoordsDataType, getGlChannels, getSqueezedParams, squeezeInputShape} from './utils';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class CoordsGlslLib extends GlslLib {\n  returnType: string;\n\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.offsetToCoords(),\n      ...this.coordsToOffset(),\n      ...this.toVec(),\n      ...this.valueFrom(),\n      // TODO return these only when packing is enabled.\n      ...this.getCommonUtilFuncs(),\n      ...this.getInputsSamplingSnippets(),\n      ...this.getOutputSamplingSnippet()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected offsetToCoords(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'offsetToCoords';\n    return {\n      offsetToCoords: new GlslLibRoutine(`\n      vec2 ${funcName}(int offset, int width, int height) {\n        int t = offset / width;\n        int s = offset - t*width;\n        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);\n        return coords;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected coordsToOffset(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'coordsToOffset';\n    return {\n      coordsToOffset: new GlslLibRoutine(`\n      int ${funcName}(vec2 coords, int width, int height) {\n        float s = coords.s * float(width);\n        float t = coords.t * float(height);\n        int offset = int(t) * width + int(s);\n        return offset;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Generates code for output sampler.\n   */\n\n  protected getOutputSamplingSnippet(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    if (outputLayout.isPacked) {\n      return this.getPackedOutputSamplingSnippet(outputLayout);\n    } else {\n      return this.getUnpackedOutputSamplingSnippet(outputLayout);\n    }\n  }\n\n  /**\n   * Generates code for packed output sampler.\n   */\n  protected getPackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputPacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] = this.getOutputPacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputPacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        result[funcName] = this.getOutputPackedNDCoords(outShape, outTexShape as [number, number]);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRGBASource = `\n      void setOutput(vec4 val) {\n        ${glsl.output} = val;\n      }\n    `;\n    const floatTextureSetRGBAFuncName = 'floatTextureSetRGBA';\n    result[floatTextureSetRGBAFuncName] = new GlslLibRoutine(floatTextureSetRGBASource);\n    return result;\n  }\n\n  /**\n   * Generates code for unpacked output sampler.\n   */\n  protected getUnpackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputUnpacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] =\n            this.getOutputUnpacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputUnpacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      case 4:\n        result[funcName] = this.getOutputUnpacked4DCoords(\n            outShape as [number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 5:\n        result[funcName] = this.getOutputUnpacked5DCoords(\n            outShape as [number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 6:\n        result[funcName] = this.getOutputUnpacked6DCoords(\n            outShape as [number, number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        throw new Error(`Unsupported output dimensionality: ${outShape.length}`);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRSource = `\n        void setOutput(float val) {\n          ${glsl.output} = vec4(val, 0, 0, 0);\n        }\n    `;\n    const floatTextureSetRFuncName = 'floatTextureSetR';\n    result[floatTextureSetRFuncName] = new GlslLibRoutine(floatTextureSetRSource);\n    return result;\n  }\n\n  /**\n   * Scalar output coordinates.\n   */\n  protected getOutputScalarCoords(): GlslLibRoutine {\n    return new GlslLibRoutine(`\n      int getOutputCoords() {\n        return 0;\n      }\n    `);\n  }\n\n  /**\n   * 1D packed output coordinates.\n   */\n  protected getOutputPacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = texShape;\n    let source = '';\n    if (packedTexShape[0] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.y * ${packedTexShape[1]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    if (packedTexShape[1] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.x * ${packedTexShape[0]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                 vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          return 2 * (resTexRC.y * ${packedTexShape[0]} + resTexRC.x);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 2D packed output coordinates.\n   */\n  protected getOutputPacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    if (ArrayUtil.arraysEqual(shape, texShape)) {\n      source = `\n        ivec2 getOutputCoords() {\n          return 2 * ivec2(TexCoords.xy * vec2(${texShape[0]}, ${texShape[1]}));\n        }\n      `;\n      return new GlslLibRoutine(source);\n    }\n\n    const packedTexShape = texShape;\n    // texels needed to accommodate a logical row\n    const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n    /**\n     * getOutputCoords\n     *\n     * resTexRC: The rows and columns of the texels. If you move over one\n     * texel to the right in the packed texture, you are moving over one column\n     * (not two).\n     *\n     * index: The texel index\n     */\n    source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 3D packed output coordinates.\n   */\n  protected getOutputPacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n    const source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          int b = index / ${texelsInBatch};\n          index -= b * ${texelsInBatch};\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec3(b, r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * ND packed output coordinates.\n   */\n  protected getOutputPackedNDCoords(shape: readonly number[], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n\n    const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n    let texelsInBatchN = texelsInBatch;\n    let batches = '';\n    let coords = 'b, r, c';\n\n    for (let b = 2; b < shape.length - 1; b++) {\n      texelsInBatchN *= shape[shape.length - b - 1];\n      batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n      coords = `b${b}, ` + coords;\n    }\n    const source = `\n      ivec${shape.length} getOutputCoords() {\n        ivec2 resTexRC = ivec2(TexCoords.xy *\n                              vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n        int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n        ${batches}\n\n        int b = index / ${texelsInBatch};\n        index -= b * ${texelsInBatch};\n\n        // reverse r and c order for packed texture\n        int r = imod(index, ${texelsInLogicalRow}) * 2;\n        int c = 2 * (index / ${texelsInLogicalRow});\n\n        return ivec${shape.length}(${coords});\n      }\n    `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 1D output coordinates.\n   */\n  protected getOutputUnpacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          return resTexRC.y * ${texShape[0]} + resTexRC.x;\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 2D output coordinates.\n   */\n  protected getOutputUnpacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          int r = index / ${shape[1]};\n          int c = index - r * ${shape[1]};\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 3D output coordinates.\n   */\n  protected getOutputUnpacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec3(r, c, d);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 4D output coordinates.\n   */\n  protected getOutputUnpacked4DCoords(shape: [number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec4 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec4(r, c, d, d2);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 5D output coordinates.\n   */\n  protected getOutputUnpacked5DCoords(shape: [number, number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec5 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec5(r, c, d, d2, d3);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 6D output coordinates.\n   */\n  protected getOutputUnpacked6DCoords(shape: [number, number, number, number, number, number], texShape: [\n    number, number\n  ]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3', 'd4'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n     ivec6 getOutputCoords() {\n         ivec2 resTexRC = ivec2(TexCoords.xy *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n         int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n         ${coordsFromIndexSnippet}\n         return ivec6(r, c, d, d2, d3, d4);\n       }\n     `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Generates code for common UV coords computation utility functions.\n   */\n  protected getCommonUtilFuncs(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    let funcName = 'uvFromFlat';\n    result[funcName] = new GlslLibRoutine(`\n    vec2 uvFromFlat(int texNumR, int texNumC, int index) {\n      int texC = index / texNumR;\n      int texR = index - texC * texNumR;\n      // TODO: swap texR, texC order in following function so row is corresponding to u and column is corresponding to\n      //       v.\n      return (vec2(texR, texC) + halfCR) / vec2(texNumR, texNumC);\n    }\n    `);\n    funcName = 'packedUVfrom1D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n        int texelIndex = index / 2;\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom2D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom2D(int texNumR, int texNumC, int texelsInLogicalRow, int row, int col) {\n        int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom3D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom3D(int texNumR, int texNumC,\n          int texelsInBatch, int texelsInLogicalRow, int b,\n          int row, int col) {\n        int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = index / texNumC;\n        int texC = index - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'sampleTexture';\n    const glsl = getGlsl(this.context.glContext.version);\n    result[funcName] = new GlslLibRoutine(`\n        float sampleTexture(sampler2D textureSampler, vec2 uv) {\n            return ${glsl.texture2D}(textureSampler, uv).r;\n        }`);\n    return result;\n  }\n\n  /**\n   * Constructing snippets for inputs\n   */\n  protected getInputsSamplingSnippets(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const outputLayout = this.context.outputTextureLayout;\n    this.context.programInfo.inputNames.forEach((samplerName, i) => {\n      const inputLayout = this.context.inputTextureLayouts[i];\n      const funcName = generateShaderFuncNameFromInputSamplerName(samplerName);\n      if (inputLayout.isPacked) {\n        result[funcName] = this.getPackedSamplerFromInput(funcName, samplerName, inputLayout);\n      } else {\n        result[funcName] = this.getUnpackedSamplerFromInput(funcName, samplerName, inputLayout);\n      }\n\n      const outCoordFuncName = generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName);\n      if (inputLayout.unpackedShape.length <= outputLayout.unpackedShape.length) {\n        if (inputLayout.isPacked) {\n          result[outCoordFuncName] =\n              this.getPackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        } else {\n          result[outCoordFuncName] =\n              this.getUnpackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        }\n      }\n    });\n\n    return result;\n  }\n\n  /**\n   * Constructing snippets for output coordinates of samplers\n   */\n  protected getPackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texName = name;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(texName);\n\n    const inRank = inShape.length;\n    const outRank = outShape.length;\n\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n\n    const type = getCoordsDataType(outRank);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n\n    let output = 'return outputValue;';\n    const inSize = ShapeUtil.size(inShape);\n    const isInputScalar = inSize === 1;\n    const outSize = ShapeUtil.size(outShape);\n    const isOutputScalar = outSize === 1;\n\n    if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n      output = `\n        return vec4(outputValue.xy, outputValue.xy);\n      `;\n    } else if (isInputScalar && !isOutputScalar) {\n      if (outRank === 1) {\n        output = `\n          return vec4(outputValue.x, outputValue.x, 0., 0.);\n        `;\n      } else {\n        output = `\n          return vec4(outputValue.x);\n        `;\n      }\n    } else if (broadcastDims.length) {\n      const rows = inRank - 2;\n      const cols = inRank - 1;\n\n      if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.x);';\n      } else if (broadcastDims.indexOf(rows) > -1) {\n        output = 'return vec4(outputValue.x, outputValue.y, ' +\n            'outputValue.x, outputValue.y);';\n      } else if (broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.xx, outputValue.zz);';\n      }\n    }\n\n    const swapLastDimsSnippet = `\n        int lastDim = coords.${fields[outRank - 1]};\n        coords.${fields[outRank - 1]} = coords.${fields[outRank - 2]};\n        coords.${fields[outRank - 2]} = lastDim;\n      `;\n    const source = `\n      vec4 ${funcName}() {\n        ${type} coords = getOutputCoords();\n        ${swapLastDimsSnippet}\n        ${coordsSnippet}\n        vec4 outputValue = ${texFuncSnippet}(${unpackedCoordsSnippet});\n        ${output}\n      }\n    `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for unpacked output coordinates of samplers\n   */\n  protected getUnpackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const inTexShape = [inputLayout.width, inputLayout.height];\n    const inRank = inputLayout.unpackedShape.length;\n    const outRank = outputLayout.unpackedShape.length;\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(name);\n\n    if (inRank === outRank && ArrayUtil.arraysEqual(inTexShape, outTexShape)) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, TexCoords);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const type = getCoordsDataType(outRank);\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inputLayout.unpackedShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n    const source = `\n        float ${funcName}() {\n          ${type} coords = getOutputCoords();\n          ${coordsSnippet}\n          return ${texFuncSnippet}(${unpackedCoordsSnippet});\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for packed operations.\n   */\n  protected getPackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    switch (inputLayout.unpackedShape.length) {\n      case 0:\n        return this.getPackedSamplerScalar(funcName, name);\n      case 1:\n        return this.getPackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getPackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getPackedSampler3D(funcName, name, inputLayout);\n      default:\n        return this.getPackedSamplerND(funcName, name, inputLayout);\n    }\n  }\n\n  /**\n   * Constructing snippets for unpacked operations.\n   */\n  protected getUnpackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    switch (shape.length) {\n      case 0:\n        return this.getUnpackedSamplerScalar(funcName, name, inputLayout);\n      case 1:\n        return this.getUnpackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getUnpackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getUnpackedSampler3D(funcName, name, inputLayout);\n      case 4:\n        return this.getUnpackedSampler4D(funcName, name, inputLayout);\n      case 5:\n        return this.getUnpackedSampler5D(funcName, name, inputLayout);\n      case 6:\n        return this.getUnpackedSampler6D(funcName, name, inputLayout);\n      default:\n        // TODO support more dimensionalities\n        throw new Error(`Unsupported dimension ${shape.length}-D`);\n    }\n  }\n\n  /**\n   * Packed scalar snippet.\n   */\n  protected getPackedSamplerScalar(funcName: string, name: string): GlslLibRoutine {\n    const glsl = getGlsl(this.context.glContext.version);\n    const source = `\n          vec4 ${funcName}() {\n            return ${glsl.texture2D}(${name}, halfCR);\n          }\n        `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Packed 1D snippet.\n   */\n  protected getPackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[1], texShape[0]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedSampler = `vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n      ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom1D']);\n  }\n\n  /**\n   * Packed 2D snippet.\n   */\n  protected getPackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const packedSampler = `vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n        return ${glsl.texture2D}(${name}, uv);\n      }`;\n\n      return new GlslLibRoutine(packedSampler);\n    }\n    const packedTexShape = texShape;\n    const valuesPerRow = Math.ceil(shape[1] / 2);\n    const packedSampler = `vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${packedTexShape[1]}, ${packedTexShape[0]}, ${valuesPerRow}, row, col);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom2D']);\n  }\n\n  /**\n   * Packed 3D snippet.\n   */\n  protected getPackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[0], texShape[1]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    if (shape[0] === 1) {\n      const squeezedShape = shape.slice(1);\n      const keptDims = [1, 2];\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['b', 'row', 'col'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const samplerRoutine = this.getPackedSamplerFromInput(funcName, name, newInputLayout);\n      const packedSampler = `${samplerRoutine.routineBody}\n      vec4 ${funcName}(int b, int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      } `;\n      const source = packedSampler;\n      return new GlslLibRoutine(source, samplerRoutine.dependencies);\n    }\n    const texNumR = packedTexShape[0];\n    const texNumC = packedTexShape[1];\n\n    const valuesPerRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n\n    const packedSampler = `vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumC}, ${texNumR}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${name}, uv);}`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom3D']);\n  }\n  /*\n   * Packed ND snippet.\n   */\n  protected getPackedSamplerND(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const rank = shape.length;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texNumR = packedTexShape[1];\n    const texNumC = packedTexShape[0];\n    const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n    let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n    let params = 'int b, int row, int col';\n    let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n    for (let b = 2; b < rank - 1; b++) {\n      params = `int b${b}, ` + params;\n      texelsInBatch *= shape[rank - b - 1];\n      index = `b${b} * ${texelsInBatch} + ` + index;\n    }\n    const packedSampler = `vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked scalar snippet.\n   */\n  protected getUnpackedSamplerScalar(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const [texNumR, texNumC] = [inputLayout.width, inputLayout.height];\n    if (texNumR === 1 && texNumC === 1) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, halfCR);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const source = `\n        float ${funcName}() {\n          int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, offset_${name});\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 1D snippet.\n   */\n  protected getUnpackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const tNumR = inputLayout.width;\n    const tNumC = inputLayout.height;\n\n    if (tNumC === 1 && tNumR === 1) {\n      const source = `\n        float ${funcName}(int index) {\n          return sampleTexture(${name}, halfCR);\n        }\n      `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    if (tNumC === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2((float(index) + 0.5) / ${tNumR}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    if (tNumR === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2(0.5, (float(index) + 0.5) / ${tNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    const source = `\n        float ${funcName}(int index) {\n          vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 2D snippet.\n   */\n\n  protected getUnpackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n\n    // TODO: modify row/col order for other dimensions.\n    const texShape = [inputLayout.height, inputLayout.width];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const texNumR = texShape[1];\n      const texNumC = texShape[0];\n      const source = `\n          float ${funcName}(int row, int col) {\n            vec2 uv = (vec2(row, col) + halfCR) / vec2(${texNumR}.0, ${texNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const params = ['col', 'row'];\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const texNumR = texShape[1];\n    const texNumC = texShape[0];\n    if (texNumC === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    if (texNumR === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    const source = `\n        float ${funcName}(int row, int col) {\n          int index = col * ${shape[1]} + row;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 3D snippet.\n   */\n\n  protected getUnpackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride0 = shape[1] * shape[2];\n    const stride1 = shape[2];\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['batch', 'col', 'row'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const routine = this.getUnpackedSamplerFromInput(funcName, name, newInputLayout);\n      // TODO: revisit the logic here to make it simpler\n      const revDims = keptDims.reverse();\n      const source = `\n          ${routine.routineBody}\n          float ${funcName}(int batch, int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, revDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, routine.dependencies);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int depth, int row, int col) {\n            // Explicitly use integer operations as dot() only works on floats.\n            int index = depth * ${stride0} + col * ${stride1} + row;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 4D snippet.\n   */\n\n  protected getUnpackedSampler4D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride2 = shape[3];\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    //\n    // TODO: re-enable this shortcut once the index calculation bug is fixed.\n    //\n    // const {newShape, keptDims} = squeezeShape(shape as number[]);\n    // if (newShape.length < shape.length) {\n    //   const newInputShape = squeezeInputShape(shape, newShape);\n    //   const params = ['row', 'col', 'depth', 'depth2'];\n    //   // Deep copy of input texture layout.\n    //   const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n    //   newInputLayout.unpackedShape = newInputShape;\n    //   const source = `\n    //       ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n    //       float ${funcName}(int row, int col, int depth, int depth2) {\n    //         return ${funcName}(${getSqueezedParams(params, keptDims)});\n    //       }\n    //     `;\n    //   return new GlslLibRoutine(\n    //       source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    // }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2) {\n          int index = row * ${stride0} + col * ${stride1} +\n              depth2 * ${stride2} + depth;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 5D snippet.\n   */\n  protected getUnpackedSampler5D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride3 = shape[4];\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n          int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth3 * ${stride3} + depth2;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n  }\n\n  /**\n   * Unpacked 6D snippet.\n   */\n  protected getUnpackedSampler6D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride4 = shape[5];\n    const stride3 = shape[4] * stride4;\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n            ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n            float ${funcName}(int row, int col, int depth,\n              int depth2, int depth3, int depth4) {\n              return ${funcName}(${getSqueezedParams(params, keptDims)});\n            }\n          `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int row, int col, int depth,\n            int depth2, int depth3, int depth4) {\n            int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n            depth2 * ${stride3} + depth3 * ${stride4} + depth4;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * This is the main function to map from the given texture coordiantes (s,t)\n   * to logical indices for the output\n   * There will only be one single variation of this\n   * Also see coordsToOffset and offsetToIndices for input-specific versions\n   */\n  protected toVec(): {[name: string]: GlslLibRoutine} {\n    const output = this.context.outputTextureLayout;\n    const rank = output.shape.length;\n    const strides = output.strides;\n    const xScale = output.width;\n    const yScale = output.height;\n\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n        c[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= c[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n        c[${rank - 1}] = offset;`);\n    const body = `\n      void toVec(vec2 texCoords, out int c[${rank}]) {\n        int offset = coordsToOffset(texCoords, ${xScale}, ${yScale});\n        ${stridesBlock.join('')}\n      }\n      void toVec(int offset, out int c[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n    `;\n    return {toVec: new GlslLibRoutine(body, ['coordinates.coordsToOffset'])};\n  }\n  /**\n   * These are value getter functions generated for each input\n   * Each function is hardwired to the name and dimensions of the input\n   * An '_T' variation is also produced which accesses values as if the\n   * input was transposed\n   */\n  protected valueFrom(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const layout = this.context.inputTextureLayouts[i];\n      const shape = layout.unpackedShape.length > 0 ? layout.unpackedShape : layout.shape;\n      const rank = shape.length;\n      let funcName = `_${name}`;\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, false),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n      funcName = funcName + '_T';\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, true),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n    });\n    return result;\n  }\n  /**\n   * Produces one value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getValueFromSingle(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        float ${name}(int m[${rank}]) {\n          int offset = indicesToOffset${name}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          float value = getColorAsFloat(${glsl.texture2D}(${varName}, coords));\n          return value;\n        }\n        `;\n  }\n\n  /**\n   * Produces a packed value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getPackedValueFrom(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}_Pack`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        vec4 ${name}(int m[${rank}]) {\n          int offset = indicesToOffset_${varName}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          return ${glsl.texture2D}(${varName}, coords);\n        }\n        `;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ProgramInfo, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport enum FunctionType {\n  ValueBased,\n  Positional\n}\nexport interface GlslFunction<T extends FunctionType> {\n  body: string;\n  name: string;\n  type: T;\n}\nexport type GlslValueFunction = GlslFunction<FunctionType.ValueBased>;\nexport interface GlslPositionalFunction extends GlslFunction<FunctionType.Positional> {\n  inputShape: readonly number[];\n  outputShape: readonly number[];\n}\n\nexport class GlslContext {\n  constructor(\n      public glContext: WebGLContext, public programInfo: ProgramInfo, public inputTextureLayouts: TextureLayout[],\n      public outputTextureLayout: TextureLayout) {}\n}\nexport abstract class GlslLib {\n  constructor(public context: GlslContext) {}\n  abstract getFunctions(): {[name: string]: GlslLibRoutine};\n  abstract getCustomTypes(): {[name: string]: string};\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies\nexport class GlslLibRoutine {\n  constructor(public routineBody: string, public dependencies?: string[]) {}\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies AS GRAPH Nodes\n// this level of abstraction is used to topologically sort routines before fragment shade inclusion\nexport class GlslLibRoutineNode {\n  dependencies: GlslLibRoutineNode[];\n  routineBody: string;\n  constructor(public name: string, routineBody?: string, dependencies?: GlslLibRoutineNode[]) {\n    if (dependencies) {\n      this.dependencies = dependencies;\n    } else {\n      this.dependencies = [];\n    }\n\n    if (routineBody) {\n      this.routineBody = routineBody;\n    }\n  }\n  addDependency(node: GlslLibRoutineNode) {\n    if (node) {\n      this.dependencies.push(node);\n    }\n  }\n}\n\n// topologically sort GLSL library routines (graph nodes abstraction) before shader script inclusion\nexport class TopologicalSortGlslRoutines {\n  static returnOrderedNodes(nodes: GlslLibRoutineNode[]): GlslLibRoutineNode[] {\n    if (!nodes || nodes.length === 0) {\n      return [];\n    }\n\n    if (nodes.length === 1) {\n      return nodes;\n    }\n\n    const cycleCheck = new Set<string>();\n    const alreadyTraversed = new Set<string>();\n    const result = new Array<GlslLibRoutineNode>();\n\n    this.createOrderedNodes(nodes, cycleCheck, alreadyTraversed, result);\n    return result;\n  }\n\n  private static createOrderedNodes(\n      graphNodes: GlslLibRoutineNode[], cycleCheck: Set<string>, alreadyTraversed: Set<string>,\n      result: GlslLibRoutineNode[]) {\n    for (let i = 0; i < graphNodes.length; ++i) {\n      this.dfsTraverse(graphNodes[i], cycleCheck, alreadyTraversed, result);\n    }\n  }\n\n  private static dfsTraverse(\n      root: GlslLibRoutineNode, cycleCheck: Set<string>, alreadyTraversed: Set<string>, result: GlslLibRoutineNode[]) {\n    // if this root has already been traversed return\n    if (!root || alreadyTraversed.has(root.name)) {\n      return;\n    }\n\n    // cyclic dependency has been detected\n    if (cycleCheck.has(root.name)) {\n      throw new Error('Cyclic dependency detected. Can\\'t topologically sort routines needed for shader.');\n    }\n\n    // hold this node to detect cycles if any\n    cycleCheck.add(root.name);\n\n    // traverse children in a dfs fashion\n    const dependencies = root.dependencies;\n    if (dependencies && dependencies.length > 0) {\n      for (let i = 0; i < dependencies.length; ++i) {\n        this.dfsTraverse(dependencies[i], cycleCheck, alreadyTraversed, result);\n      }\n    }\n\n    // add to result holder\n    result.push(root);\n\n    // mark this node as traversed so that we don't traverse from this again\n    alreadyTraversed.add(root.name);\n\n    // release the hold\n    cycleCheck.delete(root.name);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * This GLSL library handles routines converting\n * float32 to/from Unsigned byte or float 16\n */\nexport class EncodingGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.encodeFloat32(), ...this.decodeFloat32()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected encodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      encode: new GlslLibRoutine(`highp vec4 encode(highp float f) {\n        return vec4(f, 0.0, 0.0, 0.0);\n      }\n        `)\n    };\n  }\n  protected decodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      decode: new GlslLibRoutine(`highp float decode(highp vec4 rgba) {\n        return rgba.r;\n      }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode encode a 32bit float to a vec4 (of unsigned bytes)\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected encodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      encode: new GlslLibRoutine(`\n      highp vec4 encode(highp float f) {\n        highp float F = abs(f);\n        highp float Sign = step(0.0,-f);\n        highp float Exponent = floor(log2(F));\n        highp float Mantissa = (exp2(- Exponent) * F);\n        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));\n        highp vec4 rgba;\n        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));\n        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);\n        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));\n        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));\n        ${endianness}\n        rgba = rgba / 255.0; // values need to be normalized to [0,1]\n        return rgba;\n    }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode a vec4 of unsigned bytes to float32\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected decodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      decode: new GlslLibRoutine(`\n        highp float decode(highp vec4 rgba) {\n          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]\n          ${endianness}\n          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;\n          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;\n          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);\n          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));\n          return Result;\n      }\n        `)\n    };\n  }\n  /**\n   * Determines if the machine is little endian or not\n   * @credit: https://gist.github.com/TooTallNate/4750953\n   */\n  static isLittleEndian(): boolean {\n    const b = new ArrayBuffer(4);\n    const a = new Uint32Array(b);\n    const c = new Uint8Array(b);\n    a[0] = 0xdeadbeef;\n    if (c[0] === 0xef) {\n      return true;\n    }\n    if (c[0] === 0xde) {\n      return false;\n    }\n    throw new Error('unknown endianness');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\n\n/**\n * This GLSL library handles routines around reading a texlet and writing to it\n * Reading and writing could be more than just dealing with one channel\n * It may require encoding/decoding to/from 4 channels into one\n */\nexport class FragColorGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.setFragColor(), ...this.getColorAsFloat()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected setFragColor(): {[name: string]: GlslLibRoutine} {\n    const glsl = getGlsl(this.context.glContext.version);\n    return {\n      setFragColor: new GlslLibRoutine(\n          `\n        void setFragColor(float value) {\n            ${glsl.output} = encode(value);\n        }\n        `,\n          ['encoding.encode'])\n    };\n  }\n  protected getColorAsFloat(): {[name: string]: GlslLibRoutine} {\n    return {\n      getColorAsFloat: new GlslLibRoutine(\n          `\n        float getColorAsFloat(vec4 color) {\n            return decode(color);\n        }\n        `,\n          ['encoding.decode'])\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nconst INLINE_FUNC_DEF_REGEX = /@inline[\\s\\n\\r]+(\\w+)[\\s\\n\\r]+([0-9a-zA-Z_]+)\\s*\\(([^)]*)\\)\\s*{(([^}]|[\\n\\r])*)}/gm;\nconst FUNC_CALL_REGEX = '(\\\\w+)?\\\\s+([_0-9a-zA-Z]+)\\\\s+=\\\\s+__FUNC__\\\\((.*)\\\\)\\\\s*;';\n/**\n * GLSL preprocessor responsible for resolving @inline directives\n */\nexport function replaceInlines(script: string): string {\n  const inlineDefs: {[name: string]: {params: Array<{type: string; name: string}|null>; body: string}} = {};\n  let match;\n  while ((match = INLINE_FUNC_DEF_REGEX.exec(script)) !== null) {\n    const params = match[3]\n                       .split(',')\n                       .map(s => {\n                         const tokens = s.trim().split(' ');\n                         if (tokens && tokens.length === 2) {\n                           return {type: tokens[0], name: tokens[1]};\n                         }\n                         return null;\n                       })\n                       .filter(v => v !== null);\n    inlineDefs[match[2]] = {params, body: match[4]};\n  }\n  for (const name in inlineDefs) {\n    const regexString = FUNC_CALL_REGEX.replace('__FUNC__', name);\n    const regex = new RegExp(regexString, 'gm');\n    while ((match = regex.exec(script)) !== null) {\n      const type = match[1];\n      const variable = match[2];\n      const params = match[3].split(',');\n      const declLine = (type) ? `${type} ${variable};` : '';\n      let newBody: string = inlineDefs[name].body;\n      let paramRedecLine = '';\n      inlineDefs[name].params.forEach((v, i) => {\n        if (v) {\n          paramRedecLine += `${v.type} ${v.name} = ${params[i]};\\n`;\n        }\n      });\n      newBody = `${paramRedecLine}\\n ${newBody}`;\n      newBody = newBody.replace('return', `${variable} = `);\n      const replacement = `\n      ${declLine}\n      {\n        ${newBody}\n      }\n      `;\n      script = script.replace(match[0], replacement);\n    }\n  }\n  script = script.replace(INLINE_FUNC_DEF_REGEX, '');\n  return script;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutineNode, TopologicalSortGlslRoutines} from './glsl-definitions';\nimport {replaceInlines} from './glsl-function-inliner';\nimport {glslRegistry} from './glsl-registered-libs';\nimport {getDefaultFragShaderMain, getFragShaderPreamble} from './glsl-source';\nimport {ProgramInfo, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * Preprocessor for the additions to the GLSL language\n * It deals with:\n *  @include directives\n *  @inline\n *  Loop unrolling (not implemented)\n *  Macro resolution (not implemented)\n */\nexport class GlslPreprocessor {\n  readonly context: GlslContext;\n  readonly libs: {[name: string]: GlslLib} = {};\n  readonly glslLibRoutineDependencyGraph: {[routineName: string]: GlslLibRoutineNode} = {};\n\n  constructor(\n      glContext: WebGLContext, programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[],\n      outputTextureLayout: TextureLayout) {\n    this.context = new GlslContext(glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n\n    // construct GlslLibs\n    Object.keys(glslRegistry).forEach((name: string) => {\n      const lib = new glslRegistry[name](this.context);\n      this.libs[name] = lib;\n    });\n\n    // construct GlslRoutineDependencyGraph\n    const map = this.glslLibRoutineDependencyGraph;\n    for (const libName in this.libs) {\n      const lib = this.libs[libName];\n      const routinesInLib = lib.getFunctions();\n      for (const routine in routinesInLib) {\n        const key = libName + '.' + routine;\n        let currentNode: GlslLibRoutineNode;\n        if (map[key]) {\n          currentNode = map[key];\n          currentNode.routineBody = routinesInLib[routine].routineBody;\n        } else {\n          currentNode = new GlslLibRoutineNode(key, routinesInLib[routine].routineBody);\n          map[key] = currentNode;\n        }\n        const dependencies = routinesInLib[routine].dependencies;\n        if (dependencies) {\n          for (let i = 0; i < dependencies.length; ++i) {\n            if (!map[dependencies[i]]) {\n              const node = new GlslLibRoutineNode(dependencies[i]);\n              map[dependencies[i]] = node;\n              currentNode.addDependency(node);\n            } else {\n              currentNode.addDependency(map[dependencies[i]]);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  preprocess(): string {\n    const programInfo = this.context.programInfo;\n    let source = programInfo.shaderSource;\n\n    // append main() function\n    if (!this.context.programInfo.hasMain) {\n      source = `${source}\n      ${getDefaultFragShaderMain(this.context.glContext.version, this.context.outputTextureLayout.shape.length)}`;\n    }\n    // replace inlines\n    source = replaceInlines(source);\n\n    // concat final source string\n    return `${getFragShaderPreamble(this.context.glContext.version)}\n    ${this.getUniforms(programInfo.inputNames, programInfo.variables)}\n    ${this.getImports(source)}\n    ${source}`;\n  }\n\n  protected getImports(script: string): string {\n    const routinesIncluded = this.selectGlslLibRoutinesToBeIncluded(script);\n\n    if (routinesIncluded.length === 0) {\n      return '';\n    }\n\n    let routines = '';\n    for (let i = 0; i < routinesIncluded.length; ++i) {\n      if (routinesIncluded[i].routineBody) {\n        routines += routinesIncluded[i].routineBody + '\\n';\n      } else {\n        throw new Error(`Missing body for the Glsl Library routine: ${routinesIncluded[i].name}`);\n      }\n    }\n\n    return routines;\n  }\n  private selectGlslLibRoutinesToBeIncluded(script: string): GlslLibRoutineNode[] {\n    const nodes: GlslLibRoutineNode[] = [];\n\n    Object.keys(this.glslLibRoutineDependencyGraph).forEach(classAndRoutine => {\n      const routine = classAndRoutine.split('.')[1];\n      if (script.indexOf(routine) !== -1) {\n        nodes.push(this.glslLibRoutineDependencyGraph[classAndRoutine]);\n      }\n    });\n\n    return TopologicalSortGlslRoutines.returnOrderedNodes(nodes);\n  }\n\n  protected getUniforms(samplers?: string[], variables?: VariableInfo[]): string {\n    const uniformLines: string[] = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLines.push(`uniform sampler2D ${sampler};`);\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLines.push(\n            `uniform ${variable.type} ${variable.name}${variable.arrayLength ? `[${variable.arrayLength}]` : ''};`);\n      }\n    }\n    return uniformLines.join('\\n');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {CoordsGlslLib} from './glsl-coordinate-lib';\nimport {GlslContext, GlslLib} from './glsl-definitions';\nimport {EncodingGlslLib} from './glsl-encoding-lib';\nimport {FragColorGlslLib} from './glsl-fragcolor-lib';\nimport {ShapeUtilsGlslLib} from './glsl-shape-utils-lib';\nimport {VecGlslLib} from './glsl-vec-lib';\n\nexport const glslRegistry: {[name: string]: new (context: GlslContext) => GlslLib} = {\n  'encoding': EncodingGlslLib,\n  'fragcolor': FragColorGlslLib,\n  'vec': VecGlslLib,\n  'shapeUtils': ShapeUtilsGlslLib,\n  'coordinates': CoordsGlslLib,\n  //  'arrays': ArrayGlslSLib\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class ShapeUtilsGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.bcastIndex(),\n      ...this.bcastMatmulIndex(),\n      ...this.offsetToIndices(),\n      ...this.indicesToOffset(),\n      ...this.incrementIndices()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  protected bcastIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].unpackedShape;\n      if (shape.length <= outputRank) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName} (int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected bcastMatmulIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      if (!(shape.length < 2 || shape.length > outputRank)) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastMatmulIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank - 2; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName}(int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n          realIndices[${rank - 1}] = bcastedIndices[${outputRank - 1}];\n          realIndices[${rank - 2}] = bcastedIndices[${outputRank - 2}];\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected indicesToOffset(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `indicesToOffset_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides));\n      funcName = `indicesToOffset_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static indexToOffsetSingle(name: string, rank: number, strides: readonly number[]): string {\n    let block = '';\n    for (let i = rank - 1; i >= 0; --i) {\n      block += `\n        offset += indices[${i}] * ${strides[i]};\n        `;\n    }\n    return `\n      int ${name}(int indices[${rank}]) {\n        int offset = 0;\n        ${block}\n        return offset;\n      }\n      `;\n  }\n  protected offsetToIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `offsetToIndices_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides));\n      funcName = `offsetToIndices_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static offsetToIndicesSingle(name: string, rank: number, strides: readonly number[]): string {\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n      indices[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= indices[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n      indices[${rank - 1}] = offset;`);\n    return `\n      void ${name}(int offset, out int indices[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n      `;\n  }\n  protected incrementIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const rank = shape.length;\n      const funcName = `incrementIndices_${name}`;\n      let shapeInit = '';\n      for (let i = 0; i < rank; ++i) {\n        shapeInit += `\n        shape[${i}] = ${shape[i]};`;\n      }\n      const body = `\n        void ${funcName}(int axis, out int indices[${rank}]) {\n          int shape[${rank}];\n          ${shapeInit};\n          for(int i = ${rank} -1 ; i >= 0; --i) {\n            if(i > axis) continue;\n            indices[i] += 1;\n            if(indices[i] < shape[i]) {\n              break;\n            }\n            indices[i] = 0;\n          }\n        }\n        `;\n      result[funcName] = new GlslLibRoutine(body);\n    });\n    return result;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/**\n * represent a version irrelevant abstraction of for GLSL source code\n */\nexport interface Glsl {\n  readonly version: string;\n  readonly attribute: string;\n  readonly varyingVertex: string;\n  readonly varyingFrag: string;\n  readonly texture2D: string;\n  readonly output: string;\n  readonly outputDeclaration: string;\n}\n\nconst GLSL_ES_2_0: Glsl = {\n  version: '',\n  attribute: 'attribute',\n  varyingVertex: 'varying',\n  varyingFrag: 'varying',\n  texture2D: 'texture2D',\n  output: 'gl_FragColor',\n  outputDeclaration: '',\n};\nconst GLSL_ES_3_0: Glsl = {\n  version: '#version 300 es',\n  attribute: 'in',\n  varyingVertex: 'out',\n  varyingFrag: 'in',\n  texture2D: 'texture',\n  output: 'outputColor',\n  outputDeclaration: 'out vec4 outputColor;',\n};\n\nexport function getGlsl(version: 1|2) {\n  return version === 1 ? GLSL_ES_2_0 : GLSL_ES_3_0;\n}\n\nexport function getVertexShaderSource(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n      precision highp float;\n      ${glsl.attribute} vec3 position;\n      ${glsl.attribute} vec2 textureCoord;\n\n      ${glsl.varyingVertex} vec2 TexCoords;\n\n      void main()\n      {\n          gl_Position = vec4(position, 1.0);\n          TexCoords = textureCoord;\n      }`;\n}\n\nexport function getFragShaderPreamble(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFrag} vec2 TexCoords;\n    ${glsl.outputDeclaration}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    // Custom vector types to handle higher dimenalities.\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    `;\n}\n\nexport function getDefaultFragShaderMain(version: 1|2, outputShapeLength: number): string {\n  const glsl = getGlsl(version);\n  return `\n  void main() {\n    int indices[${outputShapeLength}];\n    toVec(TexCoords, indices);\n    vec4 result = vec4(process(indices));\n    ${glsl.output} = result;\n  }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for vec routines\n * Vec is an varible length int array. The length is fixed at the time of\n * generating the library functions from the dimensions of the output.\n */\nexport class VecGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.binaryVecFunctions(), ...this.copyVec(), ...this.setVecItem(), ...this.getVecItem()};\n  }\n  protected binaryVecFunctions(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    const nameOp: {[name: string]: string} = {add: '+=', sub: '-=', mul: '*=', div: '/='};\n    const result: {[name: string]: GlslLibRoutine} = {};\n    for (const name in nameOp) {\n      const fname = `${name}Vec`;\n      let assignmentBlock = '';\n      for (let i = 0; i < rank; ++i) {\n        assignmentBlock += `\n          dest[${i}] ${nameOp[name]} src[${i}];\n          `;\n      }\n      const body = `\n        void ${fname}(int src[${rank}], out int dest[${rank}]) {\n          ${assignmentBlock}\n        }\n        `;\n      result[fname] = new GlslLibRoutine(body);\n    }\n\n    return result;\n  }\n  protected copyVec(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let assignmentBlock = '';\n    for (let i = 0; i < rank; ++i) {\n      assignmentBlock += `\n        dest[${i}] = src[${i}];\n        `;\n    }\n    const body = `\n      void copyVec(int src[${rank}], out int dest[${rank}]) {\n        ${assignmentBlock}\n      }\n      `;\n    return {copyVec: new GlslLibRoutine(body)};\n  }\n\n  protected setVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index =${rank} + index;\n        if (index == 0)\n            m[0] = value;\n        `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            m[${i}] = value;\n            `;\n    }\n    block += `\n        else\n            m[${rank - 1}] = value;\n        `;\n    const body = `\n      void setVecItem(out int m[${rank}], int index, int value) {\n        ${block}\n      }\n        `;\n    return {setVecItem: new GlslLibRoutine(body)};\n  }\n  protected getVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index = ${rank} + index;\n        if (index == 0)\n            return m[0];\n      `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            return m[${i}];\n      `;\n    }\n    block += `\n        else\n            return m[${rank - 1}];\n        `;\n    const body = `\n      int getVecItem(int m[${rank}], int index) {\n        ${block}\n      }\n    `;\n    return {getVecItem: new GlslLibRoutine(body)};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from '../../backend';\nimport {Logger} from '../../instrument';\nimport {Tensor} from '../../tensor';\nimport {ShapeUtil} from '../../util';\n\nimport {createPackProgramInfoLoader} from './ops/pack';\nimport {createPackedReshape3DProgramInfoLoader, isReshapeCheap, processDims3D} from './ops/reshape-packed';\nimport {encodeAsUint8} from './ops/uint8-encode';\nimport {createUnpackProgramInfoLoader} from './ops/unpack';\nimport {WebGLSessionHandler} from './session-handler';\nimport {Encoder} from './texture-data-encoder';\nimport {calculateTextureWidthAndHeight, createTextureLayoutFromShape, createTextureLayoutFromTextureType} from './texture-layout';\nimport {Artifact, ProgramInfo, ProgramInfoLoader, TextureData, TextureLayout, TextureType} from './types';\n\nconst getProgramInfoUniqueKey =\n    (programInfo: ProgramInfo|ProgramInfoLoader, inputTextureDatas: TextureData[]): string => {\n      const inputs =\n          inputTextureDatas.map(texture => `${texture.unpackedShape.join(',')};${texture.width}x${texture.height}`)\n              .join('_');\n      let key = programInfo.name;\n      if (programInfo.cacheHint) {\n        key += '[' + programInfo.cacheHint + ']';\n      }\n      key += ':' + inputs;\n      return key;\n    };\n\nexport class WebGLInferenceHandler implements InferenceHandler {\n  private packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  private unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  constructor(public session: WebGLSessionHandler) {\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  /**\n   * @returns [width, height]\n   */\n  calculateTextureWidthAndHeight(shape: readonly number[], textureType: TextureType): [number, number] {\n    return calculateTextureWidthAndHeight(this.session.layoutStrategy, shape, textureType);\n  }\n\n  executeProgram(program: ProgramInfo|ProgramInfoLoader, inputs: readonly Tensor[]): TextureData {\n    if (inputs.length < program.inputNames.length) {\n      throw new Error(`Input size mustn't be less than ${program.inputNames.length}.`);\n    }\n    if (program.inputNames.length !== program.inputTypes.length) {\n      throw new Error('input names size does not match input types');\n    }\n\n    // create texture info for input\n    const inputTextureDatas: TextureData[] = [];\n    for (let i = 0; i < program.inputNames.length; ++i) {\n      inputTextureDatas[i] = this.getOrCreateTextureData(inputs[i], program.inputTypes[i]);\n    }\n\n    const key = getProgramInfoUniqueKey(program, inputTextureDatas);\n    let artifact = this.session.programManager.getArtifact(key);\n    const programInfo = artifact ?\n        artifact.programInfo :\n        (typeof (program as ProgramInfoLoader).get === 'function' ? (program as ProgramInfoLoader).get() :\n                                                                    (program as ProgramInfo));\n\n    // create texture info for output\n    const outputTextureLayout = createTextureLayoutFromTextureType(\n        this.session.layoutStrategy, programInfo.output.dims, programInfo.output.textureType);\n    const outputTextureData = this.createTextureData(outputTextureLayout, programInfo.output.type);\n\n    if (!artifact) {\n      artifact = this.session.programManager.build(programInfo, inputTextureDatas, outputTextureData);\n      this.session.programManager.setArtifact(key, artifact);\n    }\n\n    this.runProgram(artifact, inputTextureDatas, outputTextureData);\n    return outputTextureData;\n  }\n\n  run(program: ProgramInfoLoader, inputs: readonly Tensor[]): Tensor {\n    const outputTextureData = this.executeProgram(program, inputs);\n    return outputTextureData.tensor;\n  }\n\n  private runProgram(artifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    // input should match\n    for (let i = 0; i < inputs.length; ++i) {\n      if (!!inputs[i].isPacked !== (artifact.programInfo.inputTypes[i] === TextureType.packed)) {\n        throw new Error(`input[${i}] property packed inconsistent`);\n      }\n    }\n\n    // output should match\n    if (!!output.isPacked !== (artifact.programInfo.output.textureType === TextureType.packed)) {\n      throw new Error('output property packed inconsistent');\n    }\n\n    this.session.programManager.run(artifact, inputs, output);\n  }\n\n  /**\n   * Create a TextureData object from a tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * If a related texture data is found in cache, returns it;\n   * Otherwise:\n   *   Creates a new texture layout if not provided;\n   *   Creates WebGLTexture with the layout;\n   *   Upload tensor data to the texture;\n   *   Creates a texture data object associated with the given tensor.\n   * @param tensor the tensor with data to upload\n   */\n  private getOrCreateTextureData(tensor: Tensor, textureType: TextureType) {\n    let td = this.getTextureData(tensor.dataId, textureType === TextureType.packed);\n\n    if (!td) {\n      // check if we have texture data in different type\n      td = this.getTextureData(tensor.dataId, textureType !== TextureType.packed);\n      if (td) {\n        if (textureType === TextureType.packed) {\n          return this.pack(td);\n        } else {\n          return this.unpack(td);\n        }\n      }\n    }\n\n    if (!td) {\n      const layout = createTextureLayoutFromTextureType(this.session.layoutStrategy, tensor.dims, textureType);\n\n      if (textureType === TextureType.packedLastDimension) {\n        const group = 1;\n        const channels = 4;\n        const shape = tensor.dims;\n        if (shape.length === 4) {\n          // pre-processing for kernel data of Conv.\n          //\n          // TODO: currently this is a hacking to overwrite Conv's weight. The correct way to do this should be:\n          // 1. implement texture based const-folding\n          // 2. create a WebGL program \"preprocessConvWeight\" to do the same work as below\n          // 3. run the program before dotProduct.\n          //\n          const adjustedKernelShape = [shape[0], Math.ceil((shape[1] * shape[2] * shape[3]) / channels)];\n          const adjustedLayout =\n              createTextureLayoutFromTextureType(this.session.layoutStrategy, adjustedKernelShape, textureType);\n          let buffer = tensor.numberData;\n          if (shape[1] * shape[2] * shape[3] % channels !== 0) {\n            const numFeatureMaps = shape[0];\n            const oldRowSize = shape[1] * shape[2] * shape[3];\n            const newRowSize = Math.ceil(oldRowSize * group / channels) * channels;\n            const newSize = numFeatureMaps * newRowSize;\n            buffer = new Float32Array(newSize);\n            for (let f = 0; f < numFeatureMaps; ++f) {\n              const oldOffset = f * oldRowSize;\n              const newOffset = f * newRowSize + f % group * oldRowSize;\n              buffer.set(tensor.numberData.subarray(oldOffset, oldOffset + oldRowSize), newOffset);\n            }\n          }\n          return this.createTextureData(adjustedLayout, tensor.type, buffer, tensor, Encoder.Usage.UploadOnly);\n        }\n      }\n\n      if (textureType === TextureType.packed) {\n        const unpackedTextureLayout =\n            createTextureLayoutFromShape(this.session.layoutStrategy, tensor.dims, 1, [], {reverseWH: true});\n        const unpackedTextureData = this.createTextureData(\n            unpackedTextureLayout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n        td = this.pack(unpackedTextureData);\n      } else {\n        td = this.createTextureData(layout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n      }\n    }\n    return td;\n  }\n\n  /**\n   * Create a TextureData object using the given data and bind to the given tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * NOTE: this function is a hack for Conv implementation. should remove this function, after rewriting Conv\n   * implementation by Graph.Transformer\n   * @param dataType the tensor data type\n   * @param data the actual data to upload\n   * @param tensor the tensor to bind. tensor's data is ignored.\n   */\n  createTextureDataFromLayoutBindTensor(\n      layout: TextureLayout, dataType: Tensor.DataType, data: Tensor.NumberType, tensor: Tensor): TextureData {\n    return this.createTextureData(layout, dataType, data, tensor, Encoder.Usage.UploadOnly);\n  }\n\n  private createTextureData(\n      layout: TextureLayout, dataType: Tensor.DataType, data?: Tensor.NumberType, tensor?: Tensor,\n      usage?: Encoder.Usage): TextureData {\n    Logger.verbose('InferenceHandler', `Creating TextureData: layout:[${JSON.stringify(layout)}]`);\n    const texture = this.session.textureManager.createTextureFromLayout(dataType, layout, data, usage);\n    return this.createTextureDataFromTexture(layout, dataType, texture, tensor);\n  }\n\n  reshapeUnpacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureLayout: TextureLayout = {\n      channels: inputTD.channels,\n      height: inputTD.height,\n      width: inputTD.width,\n      // handle reshaping into scalar Tensors\n      shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n      strides: ShapeUtil.computeStrides(reshapedDims),\n      unpackedShape: reshapedDims,\n    };\n    const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  reshapePacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.packed);\n\n    // check if the reshape is 'cheap'\n    if (isReshapeCheap(input.dims, reshapedDims)) {\n      const newTextureLayout: TextureLayout = {\n        channels: inputTD.channels,\n        height: inputTD.height,\n        width: inputTD.width,\n        // handle reshaping into scalar Tensors\n        shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n        strides: ShapeUtil.computeStrides(reshapedDims),\n        unpackedShape: reshapedDims,\n        isPacked: true\n      };\n      const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n      return newTextureData.tensor;\n    }\n\n    const squeezedInputShape = processDims3D(input.dims);\n    const squeezedOutputShape = processDims3D(reshapedDims);\n\n    const squeezedInputTensor = this.reshapePacked(input, squeezedInputShape);\n    const squeezedOutputTensor = this.run(\n        createPackedReshape3DProgramInfoLoader(this, squeezedInputTensor, squeezedOutputShape), [squeezedInputTensor]);\n    const outputTensor = this.reshapePacked(squeezedOutputTensor, reshapedDims);\n    return outputTensor;\n  }\n\n  cast(input: Tensor, type: Tensor.DataType): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureData = this.createTextureDataFromTexture(inputTD as TextureLayout, type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  private createTextureDataFromTexture(\n      layout: TextureLayout, dataType: Tensor.DataType, texture: WebGLTexture, tensor?: Tensor, tensorId?: Tensor.Id) {\n    const textureData: TextureData = {\n      ...layout,\n      tensor: tensor ||\n          new Tensor(\n                  layout.unpackedShape, dataType, (_id: Tensor.Id) => this.readTexture(textureData),\n                  async (_id: Tensor.Id) => this.readTextureAsync(textureData), undefined, tensorId),\n      texture\n    };\n    this.setTextureData(textureData.tensor.dataId, textureData, layout.isPacked);\n    return textureData;\n  }\n\n  private getTextureData(tensorId: Tensor.Id, isPacked = false): TextureData|undefined {\n    return this.session.isInitializer(tensorId) ? this.session.getTextureData(tensorId, isPacked) :\n        isPacked                                ? this.packedTextureDataCache.get(tensorId) :\n                                                  this.unpackedTextureDataCache.get(tensorId);\n  }\n  setTextureData(tensorId: Tensor.Id, td: TextureData, isPacked = false): void {\n    if (this.session.isInitializer(tensorId)) {\n      this.session.setTextureData(tensorId, td, isPacked);\n    } else {\n      (isPacked ? this.packedTextureDataCache : this.unpackedTextureDataCache).set(tensorId, td);\n    }\n  }\n  isTextureLayoutCached(tensor: Tensor, isPacked = false): boolean {\n    return !!this.getTextureData(tensor.dataId, isPacked);\n  }\n\n  dispose(): void {\n    this.session.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  readTexture(textureData: TextureData): Tensor.NumberType {\n    if (textureData.isPacked) {\n      return this.readTexture(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTexture(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  async readTextureAsync(textureData: TextureData): Promise<Tensor.NumberType> {\n    if (textureData.isPacked) {\n      return this.readTextureAsync(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTextureAsync(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  pack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createPackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n\n  unpack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createUnpackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {OpSet} from '../../opset';\n\nimport {batchNormalization, parseBatchNormalizationAttributes} from './ops/batch-normalization';\nimport * as binaryOps from './ops/binary-op';\nimport {cast, parseCastAttributes} from './ops/cast';\nimport {concat, parseConcatAttributes} from './ops/concat';\nimport {conv, parseConvAttributes} from './ops/conv';\nimport {convTranspose, parseConvTransposeAttributes} from './ops/conv-transpose';\nimport {depthToSpace, parseDepthToSpaceAttributes} from './ops/depth-to-space';\nimport {flatten, parseFlattenAttributes} from './ops/flatten';\nimport {gather, parseGatherAttributes} from './ops/gather';\nimport {gemm, parseGemmAttributesV11, parseGemmAttributesV7} from './ops/gemm';\nimport {imageScaler, parseImageScalerAttributes} from './ops/image-scaler';\nimport {instanceNormalization, parseInstanceNormalizationAttributes} from './ops/instance-normalization';\nimport {lrn, parseLrnAttributes} from './ops/lrn';\nimport {matMul, parseMatMulAttributes} from './ops/matmul';\nimport {padV11, padV2, parsePadAttributesV11, parsePadAttributesV2} from './ops/pad';\nimport {averagePool, globalAveragePool, globalMaxPool, maxPool, parseAveragePoolAttributes, parseGlobalAveragePoolAttributes, parseMaxPoolAttributes} from './ops/pool';\nimport {parseReduceAttributes, reduceLogSum, reduceLogSumSquare, reduceMax, reduceMean, reduceMin, reduceProd, reduceSum} from './ops/reduce';\nimport {reshape} from './ops/reshape';\nimport {parseResizeAttributesV10, parseResizeAttributesV11, resize} from './ops/resize-packed';\nimport {shape} from './ops/shape';\nimport {parseSliceAttributes, slice, sliceV10} from './ops/slice';\nimport {parseSoftmaxAttributes, parseSoftmaxAttributesV13, softmax, softmaxV13} from './ops/softmax';\nimport {parseSplitAttributes, split} from './ops/split';\nimport {parseSqueezeAttributes, squeeze, squeezeV13} from './ops/squeeze';\nimport {sum} from './ops/sum';\nimport {tile} from './ops/tile';\nimport {parseTransposeAttributes, transpose} from './ops/transpose';\nimport * as unaryOps from './ops/unary-op';\nimport {parseUnsqueezeAttributes, unsqueeze, unsqueezeV13} from './ops/unsqueeze';\nimport {parseUpsampleAttributesV7, parseUpsampleAttributesV9, upsample} from './ops/upsample';\n\nexport const WEBGL_OP_RESOLVE_RULES: readonly OpSet.ResolveRule[] = [\n  ['Abs', '', '6+', unaryOps.abs],\n  ['Acos', '', '7+', unaryOps.acos],\n  ['Add', '', '7+', binaryOps.add],\n  ['And', '', '7+', binaryOps.and],\n  ['Asin', '', '7+', unaryOps.asin],\n  ['Atan', '', '7+', unaryOps.atan],\n  // TODO: support new attributes for AveragePool-10\n  ['AveragePool', '', '7+', averagePool, parseAveragePoolAttributes],\n  ['BatchNormalization', '', '7+', batchNormalization, parseBatchNormalizationAttributes],\n  ['Cast', '', '6+', cast, parseCastAttributes],\n  ['Ceil', '', '6+', unaryOps.ceil],\n  ['Clip', '', '6-10', unaryOps.clip, unaryOps.parseClipAttributes],\n  ['Clip', '', '11+', unaryOps.clipV11],\n  ['Concat', '', '4+', concat, parseConcatAttributes],\n  ['Conv', '', '1+', conv, parseConvAttributes],\n  ['ConvTranspose', '', '1+', convTranspose, parseConvTransposeAttributes],\n  ['Cos', '', '7+', unaryOps.cos],\n  ['Div', '', '7+', binaryOps.div],\n  ['Dropout', '', '7+', unaryOps.identity],\n  ['DepthToSpace', '', '1+', depthToSpace, parseDepthToSpaceAttributes],\n  ['Equal', '', '7+', binaryOps.equal],\n  ['Elu', '', '6+', unaryOps.elu, unaryOps.parseEluAttributes],\n  ['Exp', '', '6+', unaryOps.exp],\n  ['Flatten', '', '1+', flatten, parseFlattenAttributes],\n  ['Floor', '', '6+', unaryOps.floor],\n  ['FusedConv', 'com.microsoft', '1+', conv, parseConvAttributes],\n  ['Gather', '', '1+', gather, parseGatherAttributes],\n  ['Gemm', '', '7-10', gemm, parseGemmAttributesV7],\n  ['Gemm', '', '11+', gemm, parseGemmAttributesV11],\n  ['GlobalAveragePool', '', '1+', globalAveragePool, parseGlobalAveragePoolAttributes],\n  ['GlobalMaxPool', '', '1+', globalMaxPool],\n  ['Greater', '', '7+', binaryOps.greater],\n  ['Identity', '', '1+', unaryOps.identity],\n  ['ImageScaler', '', '1+', imageScaler, parseImageScalerAttributes],\n  ['InstanceNormalization', '', '6+', instanceNormalization, parseInstanceNormalizationAttributes],\n  ['LeakyRelu', '', '6+', unaryOps.leakyRelu, unaryOps.parseLeakyReluAttributes],\n  ['Less', '', '7+', binaryOps.less],\n  ['LRN', '', '1+', lrn, parseLrnAttributes],\n  ['Log', '', '6+', unaryOps.log],\n  ['MatMul', '', '1+', matMul, parseMatMulAttributes],\n  // TODO: support new attributes for MaxPool-8 and MaxPool-10\n  ['MaxPool', '', '1+', maxPool, parseMaxPoolAttributes],\n  ['Mul', '', '7+', binaryOps.mul],\n  ['Neg', '', '6+', unaryOps.neg],\n  ['Not', '', '1+', unaryOps.not],\n  ['Or', '', '7+', binaryOps.or],\n  ['Pad', '', '2-10', padV2, parsePadAttributesV2],\n  ['Pad', '', '11+', padV11, parsePadAttributesV11],\n  ['Pow', '', '7+', binaryOps.pow],\n  ['PRelu', '', '7+', binaryOps.pRelu],\n  ['ReduceLogSum', '', '1+', reduceLogSum, parseReduceAttributes],\n  ['ReduceMax', '', '1+', reduceMax, parseReduceAttributes],\n  ['ReduceMean', '', '1+', reduceMean, parseReduceAttributes],\n  ['ReduceMin', '', '1+', reduceMin, parseReduceAttributes],\n  ['ReduceProd', '', '1+', reduceProd, parseReduceAttributes],\n  ['ReduceSum', '', '1-12', reduceSum, parseReduceAttributes],\n  ['ReduceSumSquare', '', '1+', reduceLogSumSquare, parseReduceAttributes],\n  ['Relu', '', '6+', unaryOps.relu],\n  ['Reshape', '', '5+', reshape],\n  ['Resize', '', '10', resize, parseResizeAttributesV10],\n  ['Resize', '', '11+', resize, parseResizeAttributesV11],\n  ['Shape', '', '1+', shape],\n  ['Sigmoid', '', '6+', unaryOps.sigmoid],\n  ['Sin', '', '7+', unaryOps.sin],\n  ['Slice', '', '10+', sliceV10],  // TODO: support 'steps' for Slice-10\n  ['Slice', '', '1-9', slice, parseSliceAttributes],\n  // The \"semantic\" meaning of axis has changed in opset-13.\n  ['Softmax', '', '1-12', softmax, parseSoftmaxAttributes],\n  ['Softmax', '', '13+', softmaxV13, parseSoftmaxAttributesV13],\n  // 'Split' operator has an optional attribute 'split'\n  // this attribute determines how the specified axis of input data is split.\n  // When the attribute is missing, we need the count of number of outputs\n  // so that we can determine the 'split' attribute from the runtime input to the Operator\n  ['Split', '', '2-12', split, parseSplitAttributes],\n  ['Sqrt', '', '6+', unaryOps.sqrt],\n  ['Squeeze', '', '1-12', squeeze, parseSqueezeAttributes],\n  ['Squeeze', '', '13+', squeezeV13],\n  ['Sub', '', '7+', binaryOps.sub],\n  ['Sum', '', '6+', sum],\n  ['Tan', '', '7+', unaryOps.tan],\n  ['Tanh', '', '6+', unaryOps.tanh],\n  ['Tile', '', '6+', tile],\n  ['Transpose', '', '1+', transpose, parseTransposeAttributes],\n  ['Upsample', '', '7-8', upsample, parseUpsampleAttributesV7],\n  ['Upsample', '', '9', upsample, parseUpsampleAttributesV9],\n  ['Unsqueeze', '', '1-12', unsqueeze, parseUnsqueezeAttributes],\n  ['Unsqueeze', '', '13+', unsqueezeV13],\n  ['Xor', '', '7+', binaryOps.xor],\n];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface BatchNormalizationAttributes extends AttributeWithCacheKey {\n  epsilon: number;\n  momentum: number;\n  spatial: number;\n}\n\nconst batchNormalizationProgramMetadata = {\n  name: 'BatchNormalization',\n  inputNames: ['A', 'Scale', 'B', 'Mean', 'Variance'],\n  inputTypes:\n      [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked]\n};\n\nexport const batchNormalization: OperatorImplementation<BatchNormalizationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...batchNormalizationProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createBatchNormalizationProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseBatchNormalizationAttributes: OperatorInitialization<BatchNormalizationAttributes> =\n    (node: Graph.Node): BatchNormalizationAttributes => {\n      const epsilon = node.attributes.getFloat('epsilon', 1e-5);\n      const momentum = node.attributes.getFloat('momentum', 0.9);\n      const spatial = node.attributes.getInt('spatial', 1);\n      return createAttributeWithCacheKey({epsilon, momentum, spatial});\n    };\n\nconst createBatchNormalizationProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes):\n        ProgramInfo => {\n          const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n          const rank = inputs[0].dims.length;\n          const [scaleWidth, scaleHeight] =\n              inferenceHandler.calculateTextureWidthAndHeight(inputs[1].dims, TextureType.unpacked);\n          const shaderSource = `\n  float process(int[${rank}] indices) {\n    vec2 position = offsetToCoords(indices[1], ${scaleWidth}, ${scaleHeight});\n    float scale = getColorAsFloat(${glsl.texture2D}(Scale, position));\n    float mean = getColorAsFloat(${glsl.texture2D}(Mean, position));\n    float variance = getColorAsFloat(${glsl.texture2D}(Variance, position));\n    float b = getColorAsFloat(${glsl.texture2D}(B, position));\n\n    return scale * ( (_A(indices) - mean) / sqrt(variance + float(${attributes.epsilon})) ) + b;\n  }`;\n          return {\n            ...batchNormalizationProgramMetadata,\n            output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 5) {\n    throw new Error('BatchNormalization requires 5 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n  const mean = inputs[3];\n  const var_ = inputs[4];\n\n  // input should atleast have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1 || mean.dims.length !== 1 ||\n      var_.dims.length !== 1) {\n    throw new Error('invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1] || mean.dims[0] !== X.dims[1] ||\n      var_.dims[0] !== X.dims[1]) {\n    throw new Error('invalid input shape.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64') || (mean.type !== 'float32' && mean.type !== 'float64') ||\n      (var_.type !== 'float32' && var_.type !== 'float64')) {\n    throw new Error('invalid input tensor types.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\n\nexport function glslAdd(): GlslValueFunction {\n  const name = 'add_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a + b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 + v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslDiv(): GlslValueFunction {\n  const name = 'div_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a / b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 / v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslMul(): GlslValueFunction {\n  const name = 'mul_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a * b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 * v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSub(): GlslValueFunction {\n  const name = 'sub_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a - b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 - v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslEqual(): GlslValueFunction {\n  const name = 'equal_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a == b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(equal(v1, v2));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslGreater(): GlslValueFunction {\n  const name = 'greater_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a > b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r > v2.r ,\n      v1.g > v2.g,\n      v1.b > v2.b,\n      v1.a > v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLess(): GlslValueFunction {\n  const name = 'less_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a < b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r < v2.r ,\n                v1.g < v2.g,\n                v1.b < v2.b,\n                v1.a < v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslAnd(): GlslValueFunction {\n  const name = 'and_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) && bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r && b2.r ,\n                b1.g && b2.g,\n                b1.b && b2.b,\n                b1.a && b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslOr(): GlslValueFunction {\n  const name = 'or_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) || bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r || b2.r ,\n                b1.g || b2.g,\n                b1.b || b2.b,\n                b1.a || b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslXor(): GlslValueFunction {\n  const name = 'xor_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) ^^ bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r ^^ b2.r ,\n                b1.g ^^ b2.g,\n                b1.b ^^ b2.b,\n                b1.a ^^ b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslPow(): GlslValueFunction {\n  return glslBuiltinBinary('pow');\n}\nexport function glslPRelu(): GlslValueFunction {\n  const name = 'prelu_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a < 0.0 ? a * b: a;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(\n      v1.r < 0.0 ? v1.r * v2.r: v1.r,\n      v1.g < 0.0 ? v1.g * v2.g: v1.g,\n      v1.b < 0.0 ? v1.b * v2.b: v1.b,\n      v1.a < 0.0 ? v1.a * v2.a: v1.a\n      );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nfunction glslBuiltinBinary(fname: string): GlslValueFunction {\n  const name = `${fname}_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return ${fname}(a, b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return ${fname}(v1, v2);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nconst createBinaryProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type, cacheKey?: string): ProgramInfoLoader => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        cacheHint: cacheKey,\n        get: () => createBinaryProgramInfo(handler, inputs, glslFunc, outputTensorType)\n      };\n    };\n\nconst createBinaryProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type): ProgramInfo => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n      let outputShape = inputs[0].dims;\n\n      const usePackedTexture = handler.session.pack;\n\n      if (isBroadcast) {\n        const calculatedShape = BroadcastUtil.calcShape(inputs[0].dims, inputs[1].dims, false);\n        if (!calculatedShape) {\n          throw new Error('Can\\'t perform binary op on the given tensors');\n        }\n        outputShape = calculatedShape;\n        const outputRank = outputShape.length;\n        const aRank = inputs[0].dims.length !== 0 ? inputs[0].dims.length : 1;\n        const bRank = inputs[1].dims.length !== 0 ? inputs[1].dims.length : 1;\n        const aBcast = inputs[0].dims.length !== 0 ? 'bcastIndices_A(indices, aindices);' : 'aindices[0] = 0;';\n        const bBcast = inputs[1].dims.length !== 0 ? 'bcastIndices_B(indices, bindices);' : 'bindices[0] = 0;';\n\n        const glsl = getGlsl(handler.session.backend.glContext.version);\n        const shaderSource = usePackedTexture ? `\n      ${glslFunc.body}\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n        vec4 result = ${glslFunc.name}(a, b);\n        ${glsl.output} = result;\n      }` :\n                                                `\n      ${glslFunc.body}\n      float process(int indices[${outputRank}]) {\n        int aindices[${aRank}];\n        int bindices[${bRank}];\n        ${aBcast}\n        ${bBcast}\n        return ${glslFunc.name}(_A(aindices), _B(bindices));\n      }`;\n\n        return {\n          name: glslFunc.name,\n          inputNames: ['A', 'B'],\n          inputTypes: [textureType, textureType],\n          output: {dims: outputShape, type: outputTensorType, textureType},\n          shaderSource,\n          hasMain: usePackedTexture\n        };\n      }\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n      const shaderSource = `\n    ${glslFunc.body}\n    void main() {\n      vec4 v1 = ${glsl.texture2D}(A, TexCoords);\n      vec4 v2 = ${glsl.texture2D}(B, TexCoords);\n      vec4 result = ${glslFunc.name}(v1, v2);\n      ${glsl.output} = result;\n    }\n    `;\n\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        output: {dims: inputs[0].dims, type: outputTensorType, textureType},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const add = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAdd()), inputs)];\n\nexport const and = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAnd(), 'bool'), inputs)];\n\nexport const div = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslDiv()), inputs)];\n\nexport const equal = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslEqual(), 'bool'), inputs)];\n\nexport const greater = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslGreater(), 'bool'), inputs)];\n\nexport const less = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslLess(), 'bool'), inputs)];\n\nexport const mul = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslMul()), inputs)];\n\nexport const or = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslOr(), 'bool'), inputs)];\n\nexport const pow = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPow()), inputs)];\n\nexport const pRelu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPRelu()), inputs)];\n\nexport const sub = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslSub()), inputs)];\n\nexport const xor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslXor(), 'bool'), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ProtoUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const cast: OperatorImplementation<Tensor.DataType> =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], to: Tensor.DataType): Tensor[] => {\n      validateInputs(inputs);\n      return [handler.cast(inputs[0], to)];\n    };\n\nexport const parseCastAttributes: OperatorInitialization<Tensor.DataType> = (node: Graph.Node): Tensor.DataType =>\n    ProtoUtil.tensorDataTypeFromProto(node.attributes.getInt('to'));\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Cast requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {ConcatAttributes} from './concat';\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst createPackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat (packed)',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.packed),\n  cacheHint\n});\n\nconst createPackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n      const coords = getChannels('coords', rank);\n      const dtype = getCoordsDataType(rank);\n      const unpackChannel = unpackFromChannel();\n\n      const shapes = inputs.map(i => i.dims);\n      const channels = getGlChannels(rank);\n      const offsets: number[] = new Array(shapes.length - 1);\n\n      offsets[0] = shapes[0][axis];\n      for (let i = 1; i < offsets.length; i++) {\n        offsets[i] = offsets[i - 1] + shapes[i][axis];\n      }\n\n      const channel = channels[axis];\n      const lastChannels = channels.slice(-2);\n      const allChannels = channels.join();\n\n      let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getX0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n      for (let i = 1; i < offsets.length; i++) {\n        const shift = offsets[i - 1];\n        getValueSnippet += `\n            if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n              return getChannel(\n                getX${i}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n                vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));\n            }`;\n      }\n      const lastIndex = offsets.length;\n      const shift = offsets[offsets.length - 1];\n      getValueSnippet += `\n            return getChannel(\n              getX${lastIndex}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n              vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));`;\n\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n\n      const shaderSource = `\n          ${unpackChannel}\n          float getValue(${channels.map(x => 'int ' + x)}) {\n            ${getValueSnippet}\n          }\n\n          void main() {\n            ${dtype} coords = getOutputCoords();\n            int lastDim = coords.${channels[rank - 1]};\n            coords.${channels[rank - 1]} = coords.${channels[rank - 2]};\n            coords.${channels[rank - 2]} = lastDim;\n\n            vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n            if (${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.g = getValue(${coords});\n            }\n\n            ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]}) {\n              result.a = getValue(${coords});\n            }\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]} &&\n                ${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.b = getValue(${coords});\n            }\n            ${glsl.output} = result;\n          }\n        `;\n\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createPackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createPackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createPackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getShiftedChannelsSnippet = (channels: string[], channel: string, shift: number): string => {\n  const channelIdx = channels.indexOf(channel);\n  const res = channels.map((c, idx) => {\n    if (idx === channelIdx) {\n      return `${c} - ${shift}`;\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {createPackedConcatProgramInfoLoader} from './concat-packed';\n\nexport interface ConcatAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const concat: OperatorImplementation<ConcatAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): Tensor[] => {\n      validateInputs(inputs);\n      if (inferenceHandler.session.pack && inputs[0].dims.length > 1) {\n        const output =\n            inferenceHandler.run(createPackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      } else {\n        const output =\n            inferenceHandler.run(createUnpackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      }\n    };\n\nconst createUnpackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.unpacked),\n  cacheHint\n});\n\nconst createUnpackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n\n      const sizeInConcatAxis = new Array<number>(inputs.length);\n      let previousSum = 0;\n      for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n        previousSum += inputs[i].dims[axis];\n        sizeInConcatAxis[i] = previousSum;\n      }\n\n      let getTextureIndexWhereDataResidesMethod = '';\n      // in most cases linear search is sufficient, as in most scenarios, only 2 tensors are concatenated\n      if (inputs.length < 5) {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n      } else {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesBinarySearch(sizeInConcatAxis);\n      }\n\n      const fetchDataFromCorrectTextureMethod = getFetchDataFromCorrectTextureMethod(inputs.length, rank);\n      const getSizeInConcatAxisValueFromIndexMethod = getGetSizeInConcatAxisValueFromIndexMethod(sizeInConcatAxis);\n      const shaderSource = `\n        ${fetchDataFromCorrectTextureMethod}\n        ${getSizeInConcatAxisValueFromIndexMethod}\n        ${getTextureIndexWhereDataResidesMethod}\n        float process(int indices[${rank}]) {\n          int textureIndex = getTextureWhereDataResides (indices[${axis}]);\n\n          if(textureIndex != 0) {\n            indices[${axis}] = indices[${axis}] - int(getSizeInConcatAxisValueFromIndex(textureIndex-int(1)));\n          }\n\n          return fetchDataFromCorrectTexture(textureIndex, indices);\n        }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n      };\n    };\n\nconst createUnpackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createUnpackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createUnpackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getTextureIndexWhereDataResidesLinearSearch = (sizeInConcatAxis: number[]): string => {\n  const searchAxis = sizeInConcatAxis.map((size, i) => `if(index<${size}) {return ${i};}\n`);\n  return `int getTextureWhereDataResides(int index) {\n      ${searchAxis.join('')}\n    }`;\n};\n\n// TODO: Implement BinarySearch in GLSL\nconst getTextureIndexWhereDataResidesBinarySearch = (sizeInConcatAxis: number[]): string =>\n    getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n\nconst getFetchDataFromCorrectTextureMethod = (numberOfTensors: number, tensorRank: number) => {\n  const codeLines: string[] = [`float fetchDataFromCorrectTexture(int textureIndex, int indices[${tensorRank}]) {`];\n  for (let i = 0; i < numberOfTensors; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    } else if (i === numberOfTensors - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return _X${i}(indices); }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst getGetSizeInConcatAxisValueFromIndexMethod = (sizeInConcatAxis: number[]): string => {\n  const codeLines: string[] = ['int getSizeInConcatAxisValueFromIndex(int index) {'];\n  for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    } else if (i === sizeInConcatAxis.length - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return ${sizeInConcatAxis[i]}; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n\n  return codeLines.join('\\n');\n};\n\nexport const parseConcatAttributes: OperatorInitialization<ConcatAttributes> = (node: Graph.Node): ConcatAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis')});\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 1) {\n    throw new Error('too few inputs');\n  }\n\n  const inputType = inputs[0].type;\n  const inputDimensionality = inputs[0].dims.length;\n\n  // TODO: Support string concat\n  if (inputType === 'string') {\n    throw new Error('string tensor is not supported yet');\n  }\n\n  for (const input of inputs) {\n    // make sure types of all inputs match\n    if (input.type !== inputType) {\n      throw new Error('input tensors should be one type');\n    }\n\n    // make sure the dimensionality of all inputs are the same\n    if (input.dims.length !== inputDimensionality) {\n      throw new Error('input tensors should have the same shape');\n    }\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../../instrument';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {getActivationSnippet} from './fuse-utils';\n\nconst createUnpackedGroupedConvProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'GroupedConv',\n  inputNames: hasBias ? ['X', 'W', 'Bias'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedGroupedConvProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBias(output_channel);' : '';\n      const xShape = inputs[0].dims.slice();\n      const wShape = inputs[1].dims.slice();\n      const outputChannelsPerGroup = wShape[0] / attributes.group;\n      Logger.verbose(\n          'GroupedConv',\n          `autpPad:${attributes.autoPad}, dilations:${attributes.dilations}, group:${attributes.group}, kernelShape:${\n              attributes.kernelShape}, pads:${attributes.pads}, strides:${attributes.strides}`);\n      const outputShape =\n          calculateOutputShape(xShape, wShape, attributes.dilations, attributes.pads, attributes.strides);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n    ivec2 xRCCorner = coords.zw * strides - pads;\n    int group_id = output_channel / ${outputChannelsPerGroup};\n\n    float value = 0.0;\n    for (int wInChannel = 0; wInChannel < ${wShape[1]}; wInChannel++) {\n      int input_channel = group_id * ${wShape[1]} + wInChannel;\n      for (int wHeight = 0; wHeight < ${wShape[2]}; wHeight++) {\n        int xHeight = xRCCorner.x + wHeight * ${attributes.dilations[0]};\n\n        if (xHeight < 0 || xHeight >= ${xShape[2]}) {\n          continue;\n        }\n\n        for (int wWidth = 0; wWidth < ${wShape[3]}; wWidth++) {\n          int xWidth = xRCCorner.y + wWidth * ${attributes.dilations[1]};\n          if (xWidth < 0 || xWidth >= ${xShape[3]}) {\n            continue;\n          }\n\n          float xVal = getX(batch, input_channel, xWidth, xHeight);\n          float wVal = getW(output_channel, wInChannel, wWidth, wHeight);\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${processBias}\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createUnpackedGroupedConvProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes):\n        ProgramInfoLoader => {\n          const metadata = createUnpackedGroupedConvProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedGroupedConvProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {createPackedIm2ColProgramInfoLoader} from './im2col-pack';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const conv2DPackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapePacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapePacked(matmulOutput, outputShape);\n    };\n\nexport const conv2DPacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n\n      // run im2col\n      const im2colOutput = inferenceHandler.run(\n          createPackedIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes),\n          [inputs[0]]);\n\n      // reshape kernel\n      const kernelReshaped = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1] * kshape[2] * kshape[3]]);\n\n      // run matmul\n      const matmulInputs =\n          (inputs.length === 3) ? [kernelReshaped, im2colOutput, inputs[2]] : [kernelReshaped, im2colOutput];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n\n      // reshape output\n      const outputReshaped = inferenceHandler.reshapePacked(matmulOutput, outputShape);\n      return outputReshaped;\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\nimport {getActivationSnippet, parseInternalActivationAttributes} from './fuse-utils';\n\nconst computeTotalPad =\n    (inDim: number, stride: number, adj: number, kernel: number, dilation: number, outSize: number) =>\n        (inDim - 1) * stride + adj + (kernel - 1) * dilation + 1 - outSize;\n\nconst distributePadding = (totalPad: number, autoPad: string, pads: number[], head: number, tail: number) => {\n  const smallPad = Math.floor(totalPad / 2);\n  if (autoPad === 'SAME_UPPER') {\n    pads[head] = smallPad;\n    pads[tail] = totalPad - smallPad;\n  } else if (autoPad === 'SAME_LOWER') {\n    pads[head] = totalPad - smallPad;\n    pads[tail] = smallPad;\n  }\n};\n\nconst calculateOutputShapeAndPads =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[], autoPad: string,\n     pads: number[], strides: readonly number[], outputPadding: readonly number[], outputShape: number[]) => {\n      const spatialRank = inputShape.length - 2;\n      const updateShape = outputShape.length === 0;\n      for (let i = 0; i < spatialRank; ++i) {\n        const outSize = updateShape ? inputShape[i + 2] * strides[i] : outputShape[i];\n        const totalPad = computeTotalPad(inputShape[i + 2], strides[i], pads[i], kernelShape[i], dilations[i], outSize);\n        distributePadding(totalPad, autoPad, pads, i, i + spatialRank);\n        if (updateShape) {\n          outputShape.push(\n              strides[i] * (inputShape[i + 2] - 1) + outputPadding[i] + (kernelShape[i] - 1) * dilations[i] + 1 -\n              pads[i] - pads[i + spatialRank]);\n        }\n      }\n    };\n\nexport interface ConvTransposeAttributes extends ConvAttributes {\n  readonly outputPadding: readonly number[];\n  readonly outputShape: readonly number[];\n}\n\nexport const convTranspose: OperatorImplementation<ConvTransposeAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not convTranspose2D\n      return convTranspose2d(inferenceHandler, inputs, attributes);\n    };\n\nconst convTranspose2d: OperatorImplementation<ConvTransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvTransposeAttributes(attributes, inputs);\n      return [convTranspose2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n    };\n\nconst createConvTransposeProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'ConvTranspose',\n  inputNames: hasBias ? ['X', 'W', 'B'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedConvTransposeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvTransposeAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const valueInit = hasBias ? 'getB(output_channel)' : '0.0';\n      const xShape = inputs[0].dims;\n      const wShape = inputs[1].dims;\n      const outputChannelsPerGroup = wShape[1];\n      const inputChannelsPerGroup = wShape[0] / attributes.group;\n      const outputShape = [inputs[0].dims[0], inputs[1].dims[1] * attributes.group, ...attributes.outputShape];\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n\n    ivec2 loc = coords.zw + pads;\n\n    int group_id = output_channel / ${outputChannelsPerGroup};\n    int wOutChannel = output_channel - group_id * ${outputChannelsPerGroup};\n\n    float value = ${valueInit};\n    for (int inChannelOffset = 0; inChannelOffset < ${inputChannelsPerGroup}; inChannelOffset++) {\n      int input_channel = group_id * ${inputChannelsPerGroup} + inChannelOffset;\n      for (int wWOff = 0; wWOff < ${wShape[2]}; wWOff++) {\n        for (int wHOff = 0; wHOff < ${wShape[3]}; wHOff++) {\n          ivec2 wOff = ivec2(wWOff * ${attributes.dilations[0]}, wHOff * ${attributes.dilations[1]});\n          ivec2 wLoc = loc - wOff;\n          ivec2 wLocIn = wLoc / strides;\n          if (\n            wLocIn * strides == wLoc &&\n            wLocIn.x >= 0 && wLocIn.x < ${xShape[2]} &&\n            wLocIn.y >= 0 && wLocIn.y < ${xShape[3]}\n          ) {\n            float xVal = getX(batch, input_channel, wLocIn.y, wLocIn.x);\n            float wVal = getW(input_channel, wOutChannel, wHOff, wWOff);\n            value += xVal * wVal;\n          }\n        }\n      }\n    }\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nconst createUnpackedConvTransposeProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\n        ProgramInfoLoader => {\n          const metadata = createConvTransposeProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedConvTransposeProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n\n\nconst convTranspose2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\n        Tensor => {\n          const result = inferenceHandler.run(\n              createUnpackedConvTransposeProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n          return result;\n        };\n\nconst getAdjustedConvTransposeAttributes = <T extends ConvTransposeAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n\n  const pads = attributes.pads.slice();\n  const outputShape = attributes.outputShape.slice();\n  const inputShape = inputs[0].dims;\n  // If outputShape is not specified in the attributes of this op, infer it from the parameters\n  // Similarly, automatically infer pads if not specified\n  calculateOutputShapeAndPads(\n      inputShape, kernelShape, attributes.dilations, attributes.autoPad, pads, attributes.strides,\n      attributes.outputPadding, outputShape);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, outputShape, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvTransposeAttributes: OperatorInitialization<ConvTransposeAttributes> =\n    (node: Graph.Node): ConvTransposeAttributes => {\n      const attributes = node.attributes;\n      const activationAttributes = parseInternalActivationAttributes(attributes);\n      // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n      const autoPad = attributes.getString('auto_pad', 'NOTSET');\n      const dilations = attributes.getInts('dilations', [1, 1]);\n      const group = attributes.getInt('group', 1);\n      const kernelShape = attributes.getInts('kernel_shape', []);\n      const outputPadding = attributes.getInts('output_padding', [0, 0]);\n      const outputShape = attributes.getInts('output_shape', []);\n      const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n      const strides = attributes.getInts('strides', [1, 1]);\n\n      return createAttributeWithCacheKey(\n          {autoPad, dilations, group, kernelShape, outputPadding, outputShape, pads, strides, ...activationAttributes});\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvTransposeAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[0];\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  const featureMaps = inputs[1].dims[1] * attributes.group;\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[2].dims[0] !== featureMaps)) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // Wrong output padding dimension\n  if (attributes.outputPadding.length !== spatialRank) {\n    throw new Error(`output_padding should be ${spatialRank}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // as with kernelShape, must have same number of spatial dims as input\n  if (attributes.outputShape.length !== 0 && attributes.outputShape.length !== inputs[0].dims.length - 2) {\n    throw new Error('invalid output shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('ConvTranspose input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('ConvTranspose input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {createUnpackedGroupedConvProgramInfoLoader} from './conv-grouped';\nimport {conv2DPacked} from './conv-pack';\nimport {createDotProductProgramInfoLoader} from './dot-product';\nimport {InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createIm2ColProgramInfoLoader} from './im2col';\nimport {createMatmulProgramInfoLoader} from './matmul';\n\n\nexport const calculateOutputShape =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[],\n     adjustPads: readonly number[], strides: readonly number[]): number[] => {\n      const batchSize = inputShape[0];\n      const inputSpatialShape = inputShape.slice(2);\n      const spatialRank = inputSpatialShape.length;\n      const outChannels = kernelShape[0];\n      const kernelSpatialShape = kernelShape.slice(2);\n      const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\n      const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\n      const outputSpatialShape =\n          inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\n      const outputShape = [batchSize, outChannels].concat(...outputSpatialShape);\n      return outputShape;\n    };\n\nexport interface ConvAttributes extends InternalActivationAttributes, AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly dilations: readonly number[];\n  readonly group: number;\n  readonly kernelShape: readonly number[];\n  readonly pads: readonly number[];\n  readonly strides: readonly number[];\n}\n\nexport const conv: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not conv2D\n      return conv2d(inferenceHandler, inputs, attributes);\n    };\n\nconst conv2d: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvAttributes(attributes, inputs);\n      const packMode = inferenceHandler.session.pack;\n      const isPointwise = adjustedAttributes.kernelShape[0] === 1 && adjustedAttributes.kernelShape[1] === 1;\n      if (adjustedAttributes.group > 1) {\n        const result = inferenceHandler.run(\n            createUnpackedGroupedConvProgramInfoLoader(inferenceHandler, inputs, adjustedAttributes), inputs);\n        return [result];\n      } else if (isPointwise && packMode) {\n        return [conv2DUnpackedPointwise(inferenceHandler, inputs, adjustedAttributes)];\n      } else if (packMode && inputs[0].dims.length === 4 && inputs[0].dims[0] === 1 && !isPointwise) {\n        return [conv2DPacked(inferenceHandler, inputs, adjustedAttributes)];\n      } else {\n        return [conv2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n      }\n    };\n\nconst conv2DUnpackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapeUnpacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapeUnpacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(createMatmulProgramInfoLoader(matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapeUnpacked(matmulOutput, outputShape);\n    };\n\nconst conv2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const xIm2Col = inferenceHandler.run(\n          createIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes), [inputs[0]]);\n\n      const dotProductInputs = inputs.length === 3 ? [xIm2Col, inputs[1], inputs[2]] : [xIm2Col, inputs[1]];\n      const output = inferenceHandler.run(\n          createDotProductProgramInfoLoader(inferenceHandler, inputs, outputShape, attributes), dotProductInputs);\n      return output;\n    };\n\nconst getAdjustedConvAttributes = <T extends ConvAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPadsBasedOnAutoPad(\n      inputs[0].dims, attributes.strides, attributes.dilations, kernelShape, pads, attributes.autoPad);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvAttributes: OperatorInitialization<ConvAttributes> = (node: Graph.Node): ConvAttributes => {\n  const attributes = node.attributes;\n  const activationAttributes = parseInternalActivationAttributes(attributes);\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n  const autoPad = attributes.getString('auto_pad', 'NOTSET');\n  const dilations = attributes.getInts('dilations', [1, 1]);\n  const group = attributes.getInt('group', 1);\n  const kernelShape = attributes.getInts('kernel_shape', []);\n  const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n  const strides = attributes.getInts('strides', [1, 1]);\n\n  return createAttributeWithCacheKey({autoPad, dilations, group, kernelShape, pads, strides, ...activationAttributes});\n};\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[1] * attributes.group;\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('Conv input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('Conv input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface DepthToSpaceAttributes {\n  mode: 'DCR'|'CRD';\n  blocksize: number;\n}\n\nexport const depthToSpace: OperatorImplementation<DepthToSpaceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: DepthToSpaceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const blocksize = attributes.blocksize;\n      const blocksizeSqr = blocksize * blocksize;\n      const transposePerm = attributes.mode === 'DCR' ? [0, 3, 4, 1, 5, 2] : [0, 1, 4, 2, 5, 3];\n      const firstReshapeShape = attributes.mode === 'DCR' ?\n          [\n            inputs[0].dims[0], blocksize, blocksize, inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ] :\n          [\n            inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, blocksize, blocksize, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ];\n\n      // const transpose = new WebGLTranspose();\n      // const attributes = new Attribute(undefined);\n      // attributes.set('perm', 'ints', transposePerm);\n      // transpose.initialize(attributes);\n\n      // First reshape\n      const firstReshapedTensor = inferenceHandler.reshapeUnpacked(inputs[0], firstReshapeShape);\n\n      // transpose\n      const transposeAttributes: TransposeAttributes = {perm: transposePerm, cacheKey: `${transposePerm}`};\n      const [transposeOutput] = transpose(inferenceHandler, [firstReshapedTensor], transposeAttributes);\n\n      // Second reshape\n      const secondReshapeShape = [\n        inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2] * blocksize,\n        inputs[0].dims[3] * blocksize\n      ];\n      const result = inferenceHandler.reshapeUnpacked(transposeOutput, secondReshapeShape);\n      return [result];\n    };\n\nexport const parseDepthToSpaceAttributes: OperatorInitialization<DepthToSpaceAttributes> =\n    (node: Graph.Node): DepthToSpaceAttributes => {\n      // processing node attributes\n      const blocksize = node.attributes.getInt('blocksize');\n      if (blocksize < 1) {\n        throw new Error(`blocksize must be >= 1, but got : ${blocksize} for DepthToSpace`);\n      }\n      const mode = node.attributes.getString('mode', 'DCR');\n      if (mode !== 'DCR' && mode !== 'CRD') {\n        throw new Error(`unrecognized mode: ${mode} for DepthToSpace`);\n      }\n      return {mode, blocksize};\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (inputs.length !== 1) {\n    throw new Error(`DepthToSpace expect 1 inputs, but got ${inputs.length}`);\n  }\n\n  // Input has to be a 4-D tensor\n  // TODO: Support string depth-to-space.\n  if (inputs[0].type === 'string' || inputs[0].dims.length !== 4) {\n    throw new TypeError('DepthToSpace input should be a 4-D numeric tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {calculateIm2ColDims} from './im2col';\n\nconst createDotProductProgramMetadata = (hasBias: boolean, attributes: InternalActivationAttributes) => ({\n  name: 'ConvDotProduct',\n  inputNames: hasBias ? ['Im2Col', 'K', 'B'] : ['Im2Col', 'K'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.packedLastDimension],\n  cacheKey: attributes.activationCacheKey\n});\n\nconst createDotProductProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: readonly Tensor[],\n     outputShape: number[], attributes: InternalActivationAttributes): ProgramInfo => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const adjustedKernelShape = [kshape[0], Math.ceil((xshape[1] * kshape[2] * kshape[3]) / 4)];\n      const im2colShape = calculateIm2ColDims(xshape, kshape, outputShape);\n      const [kWidth, kHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(adjustedKernelShape, TextureType.packedLastDimension);\n\n      const im2colStrides = ShapeUtil.computeStrides(im2colShape);\n      const [im2colWidth, im2colHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(im2colShape, TextureType.packedLastDimension);\n      const rank = outputShape.length;\n\n      const initValue = (inputs.length < 3) ? '0.0' : '_B(b)';\n      const sharedDim = Math.ceil(xshape[1] * kshape[2] * kshape[3] / 4);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n${activationFunction}\nfloat process(int indices[${rank}]) {\n  int b[1];\n  b[0] = indices[1];\n  int im2col[4];\n  im2col[0] = indices[0];\n  im2col[1] = indices[2];\n  im2col[2] = indices[3];\n  int im2colOffset = im2col[0] * ${im2colStrides[0]} + im2col[1] * ${im2colStrides[1]} + im2col[2] * ${\n          im2colStrides[2]};\n  int kernelOffset = indices[1] * ${adjustedKernelShape[1]};\n  float value = ${initValue};\n  for (int i = 0; i < ${sharedDim}; ++i) {\n    vec2 im2colCoords = offsetToCoords(im2colOffset, ${im2colWidth}, ${im2colHeight});\n    vec2 kernelCoords = offsetToCoords(kernelOffset, ${kWidth}, ${kHeight});\n    value += dot(${glsl.texture2D}(Im2Col, im2colCoords), ${glsl.texture2D}(K, kernelCoords));\n    ++im2colOffset;\n    ++kernelOffset;\n  }\n  ${applyActivation}\n  return value;\n}`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nexport const createDotProductProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], outputShape: number[],\n     attributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createDotProductProgramMetadata(inputs.length > 2, attributes);\n      return {\n        ...metadata,\n        get: () => createDotProductProgramInfo(inferenceHandler, metadata, inputs, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const flatten: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number): Tensor[] => {\n      validateInputs(inputs, axis);\n\n      const outputDims = ShapeUtil.flattenShape(inputs[0].dims, axis);\n      return [inferenceHandler.reshapeUnpacked(inputs[0], outputDims)];\n    };\n\nexport const parseFlattenAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getInt('axis', 1);  // default axis is 1\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Flatten requires 1 input.');\n  }\n\n  const r = inputs[0].dims.length;\n  if (r === 0) {\n    throw new Error('scalar tensor is not supported.');\n  }\n\n  if (axis < -r || axis > r) {\n    throw new Error('Invalid axis');\n  }\n\n  // TODO: Support string type\n  if (inputs[0].type === 'string') {\n    throw new Error('string tensor is not supported.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../../../attribute';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {GlslValueFunction} from '../glsl-definitions';\n\nimport {glslClip, glslRelu, glslSigmoid} from './unary-op';\n\nexport interface InternalActivationAttributes {\n  readonly activation: string;\n  readonly clipMin?: number;\n  readonly clipMax?: number;\n  readonly activationCacheKey: string;\n}\n\nexport function getActivationSnippet(attributes: InternalActivationAttributes) {\n  let func: GlslValueFunction;\n  switch (attributes.activation) {\n    case 'Relu':\n      func = glslRelu();\n      break;\n    case 'Sigmoid':\n      func = glslSigmoid();\n      break;\n    case 'Clip':\n      func = glslClip(attributes.clipMin!, attributes.clipMax!);\n      break;\n    // TODO: adding other activations that can be fused.\n    default:\n      return {activationFunction: '', applyActivation: ''};\n  }\n\n  const activationName = func.name;\n  const activationFunction = func.body;\n  const applyActivation = `value = ${activationName}_(value);`;\n  return {activationFunction, applyActivation};\n}\n\nexport const parseInternalActivationAttributes = (attributes: Attribute): InternalActivationAttributes => {\n  const activation = attributes.getString('activation', '');\n\n  if (activation === 'Clip') {\n    const [clipMin, clipMax] = attributes.getFloats('activation_params', [MIN_CLIP, MAX_CLIP]);\n    return {activation, clipMax, clipMin, activationCacheKey: `${activation}:${clipMin},${clipMax}`};\n  }\n  return {activation, activationCacheKey: activation};\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\ninterface GatherAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const gather: OperatorImplementation<GatherAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): Tensor[] => {\n      validateInputs(inputs, attributes.axis);\n      const output = inferenceHandler.run(createGatherProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseGatherAttributes: OperatorInitialization<GatherAttributes> = (node: Graph.Node): GatherAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 0)});\n\nconst gatherProgramMetadata = {\n  name: 'Gather',\n  inputNames: ['A', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createGatherProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const indexDataShape = inputs[1].dims.slice();\n      const outputShape = new Array(inputShape.length + indexDataShape.length - 1);\n\n      axis = ShapeUtil.normalizeAxis(axis, inputShape.length);\n      const indexCopyOps: string[] = [];\n      for (let i = 0; i < outputShape.length; i++) {\n        // outputShape is divided into three parts: A, B, C\n        // |0        axis|  axis + indexDataShape.length |          end|\n        // |     A       |             B                 |      C      |\n        //\n        // inputIdx: [A, inputs[1][B], C]\n        if (i < axis) {  // A\n          outputShape[i] = inputShape[i];\n          indexCopyOps.push(`inputIdx[${i}] = outputIdx[${i}];`);\n        } else {\n          if (i < axis + indexDataShape.length) {  // B\n            outputShape[i] = indexDataShape[i - axis];\n            indexCopyOps.push(`indexDataIdx[${i - axis}] = outputIdx[${i}];`);\n          } else {                                                       // C\n            outputShape[i] = inputShape[i - indexDataShape.length + 1];  // skip 1 for axis\n            indexCopyOps.push(`inputIdx[${i - indexDataShape.length + 1}] = outputIdx[${i}];`);\n          }\n        }\n      }\n\n      const orank = outputShape.length || 1;\n      const irank = inputShape.length;\n      const iDrank = indexDataShape.length || 1;\n      const shaderSource = `\n      float process(int outputIdx[${orank}]) {\n        int inputIdx[${irank}];\n        int indexDataIdx[${iDrank}];\n        indexDataIdx[0] = 0;\n        ${indexCopyOps.join('\\n        ')}\n        int idx = int(_B(indexDataIdx));\n        inputIdx[${axis}] = idx < 0 ? idx + ${inputShape[axis]} : idx;\n        return _A(inputIdx);\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createGatherProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): ProgramInfoLoader => {\n      const metadata = {...gatherProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createGatherProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Gather requires 2 inputs.');\n  }\n  const tensorRank = inputs[0].dims.length;\n  if (tensorRank < 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (axis < -tensorRank || axis > tensorRank - 1) {\n    throw new Error('Invalid axis.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invaid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invaid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {GemmUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface GemmAttributes extends AttributeWithCacheKey {\n  transA: boolean;\n  transB: boolean;\n  alpha: number;\n  beta: number;\n  isOptionalC: boolean;  // in opset 11, C becomes optional\n}\n\nexport const gemm: OperatorImplementation<GemmAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GemmAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(createGemmProgramInfoLoader(inputs, attributes), inputs);\n      return [output];\n    };\n\nconst parseGemmAttributes = (node: Graph.Node, isOptionalC: boolean): GemmAttributes => {\n  const transA = node.attributes.getInt('transA', 0) !== 0;\n  const transB = node.attributes.getInt('transB', 0) !== 0;\n  const alpha = node.attributes.getFloat('alpha', 1.0);\n  const beta = node.attributes.getFloat('beta', 1.0);\n  return createAttributeWithCacheKey({transA, transB, alpha, beta, isOptionalC});\n};\n\nexport const parseGemmAttributesV7: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, false);\n\nexport const parseGemmAttributesV11: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, true);\n\nconst createGemmProgramInfoLoader = (inputs: Tensor[], attributes: GemmAttributes): ProgramInfoLoader => {\n  const metadata = {\n    name: 'Gemm',\n    inputNames: inputs.length === 3 ? ['A', 'B', 'C'] : ['A', 'B'],\n    inputTypes: inputs.length === 3 ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                                      [TextureType.unpacked, TextureType.unpacked],\n    key: attributes.cacheKey\n  };\n\n  return {...metadata, get: () => createGemmProgramInfo(metadata, inputs, attributes)};\n};\n\nconst createGemmProgramInfo =\n    (metadata: ProgramMetadata, inputs: Tensor[], attributes: GemmAttributes): ProgramInfo => {\n      const aShape = inputs[0].dims.slice();\n      const bShape = inputs[1].dims.slice();\n      const [M, N] = GemmUtil.getShapeOfGemmResult(\n          aShape, attributes.transA, bShape, attributes.transB, inputs.length === 3 ? inputs[2].dims : undefined);\n      const outputShape = [M, N];\n      if (!outputShape) {\n        throw new Error('Can\\'t use gemm on the given tensors');\n      }\n      let sharedDim = aShape[aShape.length - 1];\n      let line = '';\n      if (attributes.transA) {\n        sharedDim = aShape[0];\n      }\n      if (attributes.transA && attributes.transB) {\n        line = 'value += _A_T(a) * _B_T(b);';\n      } else if (attributes.transA && !attributes.transB) {\n        line = 'value += _A_T(a) * _B(b);';\n      } else if (!attributes.transA && attributes.transB) {\n        line = 'value += _A(a) * _B_T(b);';\n      } else if (!attributes.transA && !attributes.transB) {\n        line = 'value += _A(a) * _B(b);';\n      }\n      const rank = outputShape.length;\n      const declareC = inputs.length === 3 ? `int c[${inputs[2].dims.length}];` : '';\n      const broadcastC = inputs.length === 3 ? 'bcastIndices_C(indices, c);' : '';\n      const calculateC = inputs.length === 3 ? 'value += beta * _C(c);' : '';\n      const shaderSource = `\n      float process(int indices[${rank}]) {\n          int a[${rank}];\n          int b[${rank}];\n          ${declareC}\n\n          copyVec(indices, a);\n          copyVec(indices, b);\n          ${broadcastC}\n\n          float value = 0.0;\n          for (int k=0; k<${sharedDim}; ++k) {\n              a[${rank - 1}] = k;\n              b[${rank - 2}] = k;\n              ${line}\n          }\n\n          value = value * alpha;\n          ${calculateC}\n          return value;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        variables: [\n          {name: 'alpha', type: 'float', data: attributes.alpha}, {name: 'beta', type: 'float', data: attributes.beta}\n        ],\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: GemmAttributes): void => {\n  if (!inputs) {\n    throw new Error('Input is missing');\n  }\n  if (attributes.isOptionalC && (inputs.length < 2 || inputs.length > 3)) {\n    throw new Error('Invaid input shape.');\n  }\n  if (!attributes.isOptionalC && inputs.length !== 3) {\n    throw new Error('Gemm requires 3 inputs');\n  }\n\n  // 'C' can be of dimensionality 1 or 2 only\n  if (inputs.length === 3 && inputs[2].dims.length !== 1 && inputs[2].dims.length !== 2) {\n    throw new Error('Invalid input shape of C');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') ||\n      (inputs.length === 3 && inputs[2].type !== 'float32' && inputs[2].type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n\n  if ((inputs[0].type !== inputs[1].type) || (inputs.length === 3 && inputs[0].type !== inputs[2].type)) {\n    throw new Error('Input types are mismatched');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col (packed)',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed],\n  cacheHint,\n});\n\nconst createPackedIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n      const rowDim = 2;\n      const colDim = 3;\n      const rank = outputShape.length;\n      const im2colShape = [wshape[1] * wshape[2] * wshape[3], outputShape[2] * outputShape[3]];\n      const kernelSize = wshape[2] * wshape[3];\n      const unpackChannel = unpackFromChannel();\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      let unrolled = '';\n\n      for (let row = 0; row <= 1; row++) {\n        for (let col = 0; col <= 1; col++) {\n          unrolled += `\n            blockIndex = rc.x + ${col};\n            pos = rc.y + ${row};\n\n            if(blockIndex < ${im2colShape[1]} && pos < ${im2colShape[0]}) {\n              offsetY = int(blockIndex / (${outputShape[rank - 1]})) * ${attributes.strides[0]} -\n                ${attributes.pads[0]};\n              d0 = offsetY + ${attributes.dilations[0]} * (imod(pos, ${kernelSize}) / ${wshape[2]});\n\n              if(d0 < ${xshape[rowDim]} && d0 >= 0) {\n                offsetX = imod(blockIndex, ${outputShape[rank - 1]}) * ${attributes.strides[1]} -\n                  ${attributes.pads[1]};\n                d1 = offsetX + ${attributes.dilations[1]} * imod(imod(pos, ${kernelSize}), ${wshape[2]});\n\n                if(d1 < ${xshape[colDim]} && d1 >= 0) {\n\n                  ch = int(float(pos)/ ${kernelSize}.);\n                    innerDims = vec2(d0, d1);\n                    result[${row * 2 + col}] = getChannel(\n                      getA(0, ch, int(innerDims.x),\n                      int(innerDims.y)), innerDims);\n                }\n              }\n            }\n\n          `;\n        }\n      }\n\n      const shaderSource = `\n      ${unpackChannel}\n\n      void main() {\n        ivec2 rc = getOutputCoords();\n          vec4 result = vec4(0.0);\n          int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n          vec2 innerDims;\n          ${unrolled}\n          ${glsl.output} = result;\n      }\n            `;\n      return {\n        ...metadata,\n        output: {dims: im2colShape, type: x.type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createPackedIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\n\nconst createIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n  cacheHint,\n});\n\nconst createIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n\n      const rank = outputShape.length;\n      const im2colDims = calculateIm2ColDims(xshape, wshape, outputShape, 4);\n\n      const shaderSource = `\n        const int XC = ${xshape[1]};\n        const int XH = ${xshape[2]};\n        const int XW = ${xshape[3]};\n        const int KH = ${attributes.kernelShape[0]};\n        const int KW = ${attributes.kernelShape[1]};\n        const int dilationH = ${attributes.dilations[0]};\n        const int dilationW = ${attributes.dilations[1]};\n        const int strideH = ${attributes.strides[0]};\n        const int strideW = ${attributes.strides[1]};\n        const int padH = ${attributes.pads[0]};\n        const int padW = ${attributes.pads[1]};\n        const int KHKW = KH*KW;\n        const int XCKHKW = XC * KHKW;\n        const int outputChannels = 4;\n        vec4 process(int indices[${rank}]) {\n          int b  = indices[0]; // batch size\n          int oh = indices[1] * strideH - padH; //output height\n          int ow = indices[2] * strideW - padW; //output width\n          int p = indices[3] * outputChannels; //patch\n          vec4 value = vec4(0.0);\n          for(int i=0; i < outputChannels; ++i) {\n            if(p < XCKHKW) {\n              int patchC = p / KHKW;\n              int patchH = (p - patchC*KHKW) / KW;\n              int patchW = (p - patchC*KHKW) - patchH * KW;\n              int xh2 = oh + patchH * dilationH;\n              int xw2 = ow + patchW * dilationW;\n              int x[${xshape.length}];\n              x[0] = b;\n              x[1] = patchC;\n              x[2] = xh2;\n              x[3] = xw2;\n              if(xh2 >= 0 &&\n                  xh2 < XH &&\n                  xw2 >= 0 &&\n                  xw2 < XW) {\n                value[i] = _X(x);\n              }\n            }\n            ++p;\n          }\n          return value;\n        }\n        `;\n      return {\n        ...metadata,\n        output: {dims: im2colDims, type: x.type, textureType: TextureType.packedLastDimension},\n        shaderSource\n      };\n    };\n\nexport const createIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n\n\nexport const calculateIm2ColDims =\n    (inputShape: readonly number[], kernelShape: readonly number[], outputShape: readonly number[], channels = 4):\n        number[] =>\n            [outputShape[0], outputShape[2], outputShape[3],\n             Math.ceil(inputShape[1] * kernelShape[2] * kernelShape[3] / channels)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface ImageScalerAttributes extends AttributeWithCacheKey {\n  scale: number;\n  bias: number[];\n}\n\nexport const imageScaler: OperatorImplementation<ImageScalerAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output =\n          inferenceHandler.run(createImageScalerProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseImageScalerAttributes: OperatorInitialization<ImageScalerAttributes> =\n    (node: Graph.Node): ImageScalerAttributes => {\n      const scale = node.attributes.getFloat('scale');\n      const bias = node.attributes.getFloats('bias');\n      return createAttributeWithCacheKey({scale, bias});\n    };\n\nconst imageScalerProgramMetadata = {\n  name: 'ImageScaler',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createImageScalerProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], attributes: ImageScalerAttributes):\n        ProgramInfo => {\n          const outputShape = inputs[0].dims.slice();\n          const rank = outputShape.length;\n          const getBiasMethod = createGetBiasMethod(attributes.bias.length);\n          const shaderSource = `\n      ${getBiasMethod}\n      float process(int indices[${rank}]) {\n        return _X(indices) * scale + getBias(bias, indices[1]);\n      }`;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            variables: [\n              {name: 'bias', type: 'float', arrayLength: attributes.bias.length, data: attributes.bias},\n              {name: 'scale', type: 'float', data: attributes.scale}\n            ],\n            shaderSource\n          };\n        };\n\nconst createImageScalerProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): ProgramInfoLoader => {\n      const metadata = {...imageScalerProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createImageScalerProgramInfo(handler, metadata, inputs, attributes)};\n    };\n\nconst createGetBiasMethod = (numChannels: number): string => {\n  const codeLines: string[] = [`float getBias(float bias[${numChannels}], int channel) {`];\n  for (let i = 0; i < numChannels; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (channel == ${i}) { return bias[${i}]; }`);\n    } else if (i === numChannels - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return bias[${i}]; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (channel == ${i}) { return bias[${i}]; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('ImageScaler requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Invalid input shape.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport const instanceNormalization: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], epsilon: number): Tensor[] => {\n      validateInputs(inputs);\n\n      const meanAndVariance = inferenceHandler.run(createMeanAndVarianceProgramInfoLoader(inputs[0]), inputs);\n      const output = inferenceHandler.run(\n          createComputeOutputProgramInfoLoader(inferenceHandler, inputs[0], epsilon, meanAndVariance.dims),\n          [inputs[0], meanAndVariance, inputs[1], inputs[2]]);\n      return [output];\n    };\n\nexport const parseInstanceNormalizationAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getFloat('epsilon', 1e-5);\n\nconst meanAndVarianceProgramMetadata = {\n  name: 'InstanceNormalization_MeanAndVariance',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createMeanAndVarianceProgramInfo = (metadata: ProgramMetadata, input: Tensor): ProgramInfo => {\n  const xDims = input.dims.slice();\n  const channel = xDims[1];\n  const channelSize = xDims[2] * xDims[3];\n  const outputShape = [xDims[0], channel];\n\n  const shaderSource = `\n      vec4 process(int[2] indices) {\n        vec4 v = vec4(0.0);\n        int a[4];\n        a[0] = indices[0];\n        a[1] = indices[1];\n        float temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += x;\n          }\n        }\n        float mean = temp / float(${channelSize});\n        temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += (x - mean) * (x - mean);\n          }\n        }\n        v.r = mean;\n        v.g = temp / float(${channelSize});\n\n        return v;\n      }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: input.type, textureType: TextureType.packedLastDimension},\n    shaderSource\n  };\n};\n\nconst createMeanAndVarianceProgramInfoLoader = (input: Tensor): ProgramInfoLoader => ({\n  ...meanAndVarianceProgramMetadata,\n  get: () => createMeanAndVarianceProgramInfo(meanAndVarianceProgramMetadata, input)\n});\n\nconst computeOutputProgramMetadata = {\n  name: 'InstanceNormalization_ComputeOutput',\n  inputNames: ['X', 'MeanAndVariance', 'Scale', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createComputeOutputProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, epsilon: number,\n     meanAndVarianceShape: readonly number[]): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(meanAndVarianceShape, TextureType.packedLastDimension);\n      const [meanAndVarianceWidth, meanAndVarianceHeight] = [textureWidth / 4, textureHeight];\n      const shaderSource = `\n      vec4 get_MeanAndVariance(int[2] mv) {\n        int offset = indicesToOffset_MeanAndVariance(mv);\n        vec2 coords = offsetToCoords(offset, ${meanAndVarianceWidth}, ${meanAndVarianceHeight});\n        return ${glsl.texture2D}(MeanAndVariance, coords);\n      }\n\n      float process(int[4] indices) {\n        int mv[2];\n        mv[0] = indices[0];\n        mv[1] = indices[1];\n        vec4 mean_and_variance = get_MeanAndVariance(mv);\n        float mean = mean_and_variance.r;\n        float variance = mean_and_variance.g;\n\n        int sb[1];\n        sb[0] = indices[1];\n        float scale = _Scale(sb);\n        float b = _B(sb);\n\n        return scale * (_X(indices) - mean) / sqrt(variance + epsilon) + b;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        variables: [{name: 'epsilon', type: 'float', data: epsilon}],\n        shaderSource\n      };\n    };\n\nconst createComputeOutputProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, epsilon: number, meanAndVarianceShape: readonly number[]):\n        ProgramInfoLoader => {\n          const metadata = {...computeOutputProgramMetadata, cacheHint: `${epsilon}`};\n          return {\n            ...metadata,\n            get: () => createComputeOutputProgramInfo(inferenceHandler, metadata, input, epsilon, meanAndVarianceShape)\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 3) {\n    throw new Error('InstanceNormalization requires 3 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n\n  // input should at least have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1]) {\n    throw new Error('Input shapes are mismatched.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Only support 4-D input shape.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\n\nexport interface LrnAttributes extends AttributeWithCacheKey {\n  alpha: number;\n  beta: number;\n  bias: number;\n  size: number;\n}\n\nexport const lrn: OperatorImplementation<LrnAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: LrnAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      // if (inferenceHandler.session.pack) {\n      //   return [inferenceHandler.run(createPackedLrnProgramInfoLoader(inferenceHandler, inputs, attributes),\n      //   inputs)];\n      // } else {\n      return [inferenceHandler.run(createLrnProgramInfoLoader(inputs, attributes), inputs)];\n      //}\n    };\n\nexport const parseLrnAttributes: OperatorInitialization<LrnAttributes> = (node: Graph.Node): LrnAttributes => {\n  const alpha = node.attributes.getFloat('alpha', 0.0001);\n  const beta = node.attributes.getFloat('beta', 0.75);\n  const bias = node.attributes.getFloat('bias', 1.0);\n  const size = node.attributes.getInt('size');\n\n  return createAttributeWithCacheKey({alpha, beta, bias, size});\n};\n\nconst lrnProgramMetadata = {\n  name: 'LRN',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked]\n};\n\nfunction createLrnProgramInfo(inputs: Tensor[], attributes: LrnAttributes): ProgramInfo {\n  const C = inputs[0].dims[1];\n  const rank = inputs[0].dims.length;\n  const from = -Math.floor((attributes.size - 1) / 2);\n  const to = Math.ceil((attributes.size - 1) / 2);\n  const alpha = `float(${attributes.alpha}) / float(${attributes.size})`;\n  const bias = `float(${attributes.bias})`;\n  const beta = `float(${attributes.beta})`;\n\n  const shaderSource = `\n    float process(int indices[${rank}]) {\n        int c = indices[1];\n        float x = _X(indices);\n        float square_sum = 0.0;\n\n        for (int i = ${from}; i <= ${to}; i++) {\n          int idx = c + i;\n          if (c >= 0 && c < ${C}) {\n            indices[1] = idx;\n            float j = _X(indices);\n            square_sum += j * j;\n          }\n        }\n        return x / pow(${bias} + ${alpha} * square_sum, ${beta});\n    }`;\n  return {\n    ...lrnProgramMetadata,\n    cacheHint: attributes.cacheKey,\n    output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\n    shaderSource,\n  };\n}\n\nexport function createLrnProgramInfoLoader(inputs: Tensor[], attributes: LrnAttributes): ProgramInfoLoader {\n  return {...lrnProgramMetadata, cacheHint: attributes.cacheKey, get: () => createLrnProgramInfo(inputs, attributes)};\n}\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('LRN requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('currently only support LRN for input with \"NCHW\" format');\n  }\n  if (inputs[0].type !== 'float32') {\n    throw new Error('input should be float type');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {getBiasForMatmul} from './matmul';\n\nconst createPackedMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul (packed)',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.packed, TextureType.packed, TextureType.packed] :\n                        [TextureType.packed, TextureType.packed],\n  cacheHint\n});\n\nconst createPackedMatmulProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n      const aShape = inputs[0].dims;\n      const bShape = inputs[1].dims;\n      const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n\n      if (!outputShape) {\n        throw new Error('Can\\'t use matmul on the given tensors');\n      }\n      const sharedDim = aShape[aShape.length - 1];\n      const sharedDimIndex = Math.ceil(sharedDim / 2);\n      const aRank = aShape.length;\n      const bRank = bShape.length;\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const coordsDataType = getCoordsDataType(outputShape.length);\n      const outRank = outputShape.length;\n      const allGlChannels = getGlChannels();\n      const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\n\n      const getBiasForMatmulSnippet =\n          hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, true)}` : '';\n\n      const getBcastedSamplerForMatmulSnippet =\n          isBroadcast ? `${getBcastSamplerForMatmul(coordsDataType, allGlChannels, inputs, outputShape)}` : '';\n\n      const getSamplerAInLoopSnippet = isBroadcast ? 'getAAtOutCoordsMatmul(i)' : `getA(${getA(allGlChannels, aRank)})`;\n      const getSamplerBInLoopSnippet = isBroadcast ? 'getBAtOutCoordsMatmul(i)' : `getB(${getB(allGlChannels, bRank)})`;\n      const getOutputCoordsSnippet = isBroadcast ? '' : `${coordsDataType} rc =\n          getOutputCoords(); int lastDim = rc.${allGlChannels[outRank - 1]}; rc.${allGlChannels[outRank - 1]} =\n          rc.${allGlChannels[outRank - 2]}; rc.${allGlChannels[outRank - 2]} = lastDim;\n      `;\n      const shaderSource = `\n            ${getBcastedSamplerForMatmulSnippet}\n            ${getBiasForMatmulSnippet}\n            ${activationFunction}\n            void main() {\n              ${getOutputCoordsSnippet}\n\n              vec4 value = vec4(0);\n              for (int i = 0; i < ${sharedDimIndex}; i++) {\n                vec4 a = ${getSamplerAInLoopSnippet};\n                vec4 b = ${getSamplerBInLoopSnippet};\n\n                value += (a.rrbb * b.rgrg);\n                value += (a.ggaa * b.baba);\n              }\n              ${processBias}\n              ${applyActivation}\n              ${glsl.output} = value;\n            }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedMatmulProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createPackedMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedMatmulProgramInfo(inferenceHandler, metadata, inputs, activationAttributes)\n      };\n    };\n\nfunction getBcastSamplerForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inputs: Tensor[], outShape: readonly number[]): string {\n  let unpackedACoordsSnippet = [];\n  let unpackedBCoordsSnippet = [];\n\n  const inAShape = inputs[0].dims;\n  const inBShape = inputs[1].dims;\n\n  const inARank = inAShape.length;\n  const inBRank = inBShape.length;\n\n  const outRank = outShape.length;\n  const rankADiff = outRank - inARank;\n  const rankBDiff = outRank - inBRank;\n\n  unpackedACoordsSnippet = inAShape.map((s, i) => `coords.${allGlChannels[i + rankADiff]}`);\n  unpackedACoordsSnippet[inARank - 1] = 'i*2';\n  unpackedACoordsSnippet.join(', ');\n  unpackedBCoordsSnippet = inBShape.map((s, i) => `coords.${allGlChannels[i + rankBDiff]}`);\n  unpackedBCoordsSnippet[inBRank - 2] = 'i*2';\n  unpackedBCoordsSnippet.join(', ');\n\n  const broadcastADims = BroadcastUtil.getBroadcastDims(inAShape, outShape);\n  const broadcastBDims = BroadcastUtil.getBroadcastDims(inBShape, outShape);\n\n  const coordsASnippet = broadcastADims.map(d => `coords.${allGlChannels[d + rankADiff]} = 0;`).join('\\n');\n  const coordsBSnippet = broadcastBDims.map(d => `coords.${allGlChannels[d + rankBDiff]} = 0;`).join('\\n');\n  const swapDimSnippet = `int lastDim = coords.${allGlChannels[outRank - 1]};\n  coords.${allGlChannels[outRank - 1]} = coords.${allGlChannels[outRank - 2]};\n  coords.${allGlChannels[outRank - 2]} = lastDim;`;\n\n  const getBcastSamplerMatmulSource = `\nvec4 getAAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsASnippet}\n  vec4 outputValue = getA(${unpackedACoordsSnippet});\n  return outputValue;\n}\n\nvec4 getBAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsBSnippet}\n  vec4 outputValue = getB(${unpackedBCoordsSnippet});\n  return outputValue;\n}`;\n\n  return getBcastSamplerMatmulSource;\n}\n\nfunction getA(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += `rc.${allGlChannels[rank - 2]}, ` +\n      'i*2';\n  return res;\n}\n\nfunction getB(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += 'i*2, ' +\n      `rc.${allGlChannels[rank - 1]}`;\n  return res;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActivationSnippet, InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const matMul: OperatorImplementation<InternalActivationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: InternalActivationAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      if (inferenceHandler.session.pack) {\n        return [inferenceHandler.run(\n            createPackedMatmulProgramInfoLoader(inferenceHandler, inputs, attributes), inputs)];\n      } else {\n        return [inferenceHandler.run(createMatmulProgramInfoLoader(inputs, attributes), inputs)];\n      }\n    };\n\nexport const parseMatMulAttributes: OperatorInitialization<InternalActivationAttributes> =\n    (node: Graph.Node): InternalActivationAttributes => parseInternalActivationAttributes(node.attributes);\n\nconst createMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nfunction createMatmulProgramInfo(\n    metadata: ProgramMetadata, inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfo {\n  const aShape = inputs[0].dims;\n  const bShape = inputs[1].dims;\n  const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n  if (!outputShape) {\n    throw new Error('Can\\'t use matmul on the given tensors');\n  }\n  const coordsDataType = getCoordsDataType(outputShape.length);\n  const allGlChannels = getGlChannels();\n  const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\n\n  const hasBias = inputs.length > 2;\n  const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n  const getBiasForMatmulSnippet =\n      hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, false)}` : '';\n\n  const rank = outputShape.length;\n  const arank = aShape.length;\n  const brank = bShape.length;\n  const sharedDim = aShape[aShape.length - 1];\n  const shaderSource = `\n    ${activationFunction}\n    ${getBiasForMatmulSnippet}\n    float process(int indices[${rank}]) {\n        int a[${arank}];\n        int b[${brank}];\n        bcastMatmulIndices_A(indices, a);\n        bcastMatmulIndices_B(indices, b);\n\n        float value;\n        for (int k=0; k<${sharedDim}; ++k) {\n            a[${arank - 1}] = k;\n            b[${brank - 2}] = k;\n            value += _A(a) * _B(b);\n        }\n        ${processBias}\n        ${applyActivation}\n        return value;\n    }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n    shaderSource,\n  };\n}\n\nexport function createMatmulProgramInfoLoader(\n    inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfoLoader {\n  const metadata = createMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n  return {...metadata, get: () => createMatmulProgramInfo(metadata, inputs, activationAttributes)};\n}\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('MatMul requires 2 inputs.');\n  }\n\n  if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\n    throw new Error('shared dimension does not match.');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64')) {\n    throw new Error('inputs should be float type');\n  }\n\n  if (inputs[0].type !== inputs[1].type) {\n    throw new Error('inputs types should match');\n  }\n};\n\nexport function getBiasForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inShape: readonly number[], outShape: readonly number[],\n    isPacked: boolean): string {\n  let unpackedCoordsSnippet = '';\n  const inRank = inShape.length;\n  const outRank = outShape.length;\n  const rankDiff = outRank - inRank;\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inShape.map((s, i) => `coords.${allGlChannels[i + rankDiff]}`).join(', ');\n  }\n  const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n  const coordsSnippet = broadcastDims.map(d => `coords.${allGlChannels[d + rankDiff]} = 0;`).join('\\n');\n  const inSize = ShapeUtil.size(inShape);\n  const isInputScalar = inSize === 1;\n  let output = 'vec4(outputValue.xx, outputValue.yy)';\n  if (isInputScalar) {\n    output = 'vec4(outputValue.x)';\n  }\n  const getBiasForMatmulSource = isPacked ? `\nvec4 getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  vec4 outputValue = getBias(${unpackedCoordsSnippet});\n  return ${output};\n}` :\n                                            `\nfloat getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  return getBias(coords.x);\n}`;\n\n  return getBiasForMatmulSource;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels} from './packing-utils';\n\nconst packProgramMetadata = {\n  name: 'pack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpackedReversed]\n};\n\nconst createPackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const inputShape = input.dims;\n\n  const inputRank = inputShape.length;\n  // createTextureLayoutFromShape won't change output rank. Need to verify by running tests\n  const outputRank = input.dims.length;\n\n  const coordsDataType = getCoordsDataType(outputRank);\n  const channels = getChannels('rc', outputRank);\n  const setup = getSetup(outputRank, channels, inputShape[inputShape.length - 2], inputShape[inputShape.length - 1]);\n\n  let reversedInputWH;\n  if (inputRank === 0) {\n    reversedInputWH = [1, 1];\n  } else if (inputRank === 1) {\n    reversedInputWH = [inputShape[0], 1];\n  } else {\n    reversedInputWH = [inputShape[outputRank - 1], inputShape[outputRank - 2]];\n  }\n  const outOfBoundsCondition = getOutOfBoundsCondition(outputRank, reversedInputWH, channels);\n  const output = getOutput(inputShape, channels);\n\n  const shaderSource = `\n        void main() {\n          ${coordsDataType} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            ${glsl.output} = vec4(0);\n          } else {\n            ${setup}\n\n            ${glsl.output} = vec4(${output});\n          }\n        }\n      `;\n  return {\n    ...packProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.packed},\n    shaderSource\n  };\n};\n\nexport const createPackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...packProgramMetadata, get: () => createPackProgramInfo(handler, input)});\n\n/**\n * check output coordinate location and return false if it is outside input's width/height boundary\n */\nfunction getOutOfBoundsCondition(rank: number, shape: readonly number[], dims: string[]): string {\n  if (rank === 0) {\n    return 'false';\n  }\n  if (rank === 1) {\n    return `rc > ${shape[0]}`;\n  }\n\n  let cond = '';\n  for (let i = rank - 2; i < rank; i++) {\n    cond += `${dims[i]} >= ${shape[i - rank + 2]}`;\n    if (i < rank - 1) {\n      cond += '||';\n    }\n  }\n\n  return cond;\n}\n\n/**\n * code snippet to sample input texture with output coordiantes\n */\nfunction getOutput(shape: readonly number[], dims: string[]): string {\n  const rank = shape.length;\n\n  if (rank === 0) {\n    return 'getA(), 0, 0, 0';\n  }\n\n  if (rank === 1) {\n    return `getA(rc),\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\n            0, 0`;\n  }\n\n  const coord00 = 'r, c';\n  const coord01 = 'r, cp1';\n  const coord10 = 'rp1, c';\n  const coord11 = 'rp1, cp1';\n  let D = '';\n  if (rank > 2) {\n    for (let i = 0; i < rank - 2; ++i) {\n      D = D + `${dims[i]},`;\n    }\n  }\n  return `getA(${D}${coord00}),\n          rEdge ? 0. : getA(${D}${coord10}),\n          cEdge ? 0. : getA(${D}${coord01}),\n          rEdge || cEdge ? 0. : getA(${D}${coord11})`;\n}\n\n/**\n * code snippet to setup 4 coordinates and edge conditions\n */\nfunction getSetup(rank: number, dims: string[], rows: number, cols: number): string {\n  if (rank === 0 || rank === 1) {\n    return '';\n  }\n  // rank >= 2 for width+height pack.\n  else {\n    const setup = `\n    int r = ${dims[rank - 2]};\n    int c = ${dims[rank - 1]};\n    int rp1 = ${dims[rank - 2]} + 1;\n    int cp1 = ${dims[rank - 1]} + 1;\n    bool rEdge = rp1 >= ${cols};\n    bool cEdge = cp1 >= ${rows};\n    `;\n    return setup;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlChannels} from '../utils';\n\nexport function getVecChannels(name: string, rank: number): string[] {\n  return getGlChannels(rank).map(d => `${name}.${d}`);\n}\n\nexport function getChannels(name: string, rank: number): string[] {\n  if (rank === 1) {\n    return [name];\n  }\n  return getVecChannels(name, rank);\n}\n\nexport function unpackFromChannel(): string {\n  return `\n    float getChannel(vec4 frag, int dim) {\n      int modCoord = imod(dim, 2);\n      return modCoord == 0 ? frag.r : frag.g;\n    }\n\n    float getChannel(vec4 frag, vec2 innerDims) {\n      vec2 modCoord = mod(innerDims, 2.);\n      return modCoord.x == 0. ?\n        (modCoord.y == 0. ? frag.r : frag.g) :\n        (modCoord.y == 0. ? frag.b : frag.a);\n    }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl, Glsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface PadAttributes extends AttributeWithCacheKey {\n  readonly mode: string;\n  readonly pads: number[];\n  readonly value: number;\n}\n\nconst padProgramMetadata = {\n  name: 'Pad',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const padV2: OperatorImplementation<PadAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: PadAttributes): Tensor[] => {\n      validateInputsV2(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...padProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPadProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parsePadAttributesV2: OperatorInitialization<PadAttributes> = (node: Graph.Node): PadAttributes => {\n  const mode = node.attributes.getString('mode', 'constant');\n  const value = node.attributes.getFloat('value', 0.0);\n  const pads = node.attributes.getInts('pads');\n  return createAttributeWithCacheKey({mode, value, pads});\n};\n\nexport const padV11: OperatorImplementation<string> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): Tensor[] => {\n      validateInputsV11(inputs);\n      const attrubutes = generatePadAttributesFromInputs(inferenceHandler, inputs, mode);\n      return padV2(inferenceHandler, [inputs[0]], attrubutes);\n    };\n\nexport const parsePadAttributesV11: OperatorInitialization<string> = (node: Graph.Node): string =>\n    node.attributes.getString('mode', 'constant');\n\nconst generatePadAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): PadAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          (inputs.length >= 3 && !inferenceHandler.session.isInitializer(inputs[2].dataId))) {\n        throw new Error('dynamic pad attributes are not allowed');\n      }\n\n      const pads = Array.from(inputs[1].integerData);\n      const value = (inputs.length >= 3) ? inputs[2].floatData[0] : 0.0;\n\n      return createAttributeWithCacheKey({mode, pads, value});\n    };\n\nconst createPadProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): ProgramInfo => {\n      const outputShape = ShapeUtil.padShape(input.dims.slice(), attributes.pads);\n      const rank = outputShape.length;\n      const padFunction = getPadFunction(inferenceHandler, input, attributes);\n      const shaderSource = `\n      ${padFunction}\n      float process(int[${rank}] indices) {\n          return padA(indices);\n      }`;\n      return {\n        name: 'Pad',\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputsV2 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pad requires 1 input');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst validateInputsV11 = (inputs: Tensor[]): void => {\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Pad requires 2 or 3 inputs');\n  }\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 3 && inputs[2].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst getPadFunction = (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): string => {\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  const [width, height] = inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n  const strides = ShapeUtil.computeStrides(input.dims);\n\n  switch (attributes.mode) {\n    case 'constant':\n      return getPadConstant(glsl, input.dims, strides, width, height, attributes.pads, attributes.value);\n    case 'reflect':\n      return getPadReflect(glsl, input.dims, strides, width, height, attributes.pads);\n    case 'edge':\n      return getPadEdge(glsl, input.dims, strides, width, height, attributes.pads);\n    default:\n      throw new Error('Invalid mode');\n  }\n};\n\nconst getPadConstant =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[],\n     value: number): string => {\n      const rank = shape.length;\n      let block = '';\n      for (let i = rank - 1; i >= 0; --i) {\n        block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  return constant;\n        if (k >= ${shape[i]}) return constant;\n        offset += k * ${strides[i]};\n        `;\n      }\n      return `\n      float padA(int m[${rank}]) {\n        const float constant = float(${value});\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n    };\n\nconst getPadReflect =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0) { k = -k; }\n        {\n          const int _2n_1 = ${2 * (shape[i] - 1)};\n          k = int( mod( float(k), float(_2n_1) ) ) ;\n          if(k >= ${shape[i]}) { k = _2n_1 - k; }\n        }\n        offset += k * ${strides[i]};\n        `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n\nconst getPadEdge =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  k = 0;\n        if (k >= ${shape[i]}) k = ${shape[i] - 1};\n        offset += k * ${strides[i]};\n      `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface AveragePoolAttributes extends AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly ceilMode: number;\n  readonly countIncludePad: boolean;\n  readonly kernelShape: readonly number[];\n  readonly strides: readonly number[];\n  readonly pads: readonly number[];\n}\n\nexport const averagePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'AveragePool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n\n      // TODO: support attribute 'ceil_mode'\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\n      }\n\n      return createAttributeWithCacheKey({autoPad, ceilMode, countIncludePad, kernelShape, strides, pads});\n    };\n\nconst createAveragePoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: AveragePoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const kernelSize = ShapeUtil.size(adjustedAttributes.kernelShape);\n          const op1 = 'value += _X(x);';\n          let op2 = '';\n          if (adjustedAttributes.countIncludePad) {\n            op2 += `value /= float(${kernelSize});`;\n          } else {\n            op2 += `value /= float(${kernelSize} - pad);`;\n          }\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '0.0');\n          const shaderSource = `\n        ${poolingCode}\n      `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nexport const globalAveragePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata = {\n        name: 'GlobalAveragePool',\n        inputNames: ['X'],\n        inputTypes: [TextureType.unpacked],\n        cacheHint: `${attributes.countIncludePad}`\n      };\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, true, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseGlobalAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      return createAttributeWithCacheKey(\n          {autoPad: '', ceilMode: 0, countIncludePad, kernelShape: [], strides: [], pads: []});\n    };\n\nexport interface MaxPoolAttributes extends AveragePoolAttributes {\n  readonly storageOrder: number;\n  readonly dilations: number[];\n}\n\nexport const maxPool: OperatorImplementation<MaxPoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: MaxPoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'MaxPool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createMaxPoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseMaxPoolAttributes: OperatorInitialization<MaxPoolAttributes> =\n    (node: Graph.Node): MaxPoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n      const storageOrder = node.attributes.getInt('storage_order', 0);\n      const dilations = node.attributes.getInts('dilations', []);\n\n      // TODO: support attribute 'ceil_mode' and 'storage_order'\n      if (storageOrder !== 0) {\n        throw new Error('column major storage order is not yet supported for MaxPool');\n      }\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\n      }\n\n      return createAttributeWithCacheKey(\n          {autoPad, ceilMode, countIncludePad: false, kernelShape, strides, pads, storageOrder, dilations});\n    };\n\nconst createMaxPoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: MaxPoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const op1 = `\n      value = max(_X(x), value);\n    `;\n          const op2 = '';\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '-1e5');\n          const shaderSource = `\n      ${poolingCode}\n    `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst getAdjustedPoolAttributesAndOutputShape =\n    (inputs: Tensor[], attributes: AveragePoolAttributes|MaxPoolAttributes, isGlobalOperator: boolean):\n        [AveragePoolAttributes|MaxPoolAttributes, number[]] => {\n          const inputShape = inputs[0].dims.slice();\n          const hasDilations = Object.hasOwnProperty.call(attributes, 'dilations');\n          const kernelShape = attributes.kernelShape.slice();\n          const strides = attributes.strides.slice();\n          const dilations: number[] = hasDilations ? (attributes as MaxPoolAttributes).dilations.slice() : [];\n          const pads = attributes.pads.slice();\n          PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, dilations, pads);\n\n          const outputShape = PoolConvUtil.computePoolOutputShape(\n              isGlobalOperator, inputShape, strides, dilations, kernelShape, pads, attributes.autoPad);\n\n          const newAttributes = Object.assign({}, attributes);\n          if (hasDilations) {\n            Object.assign(newAttributes, {kernelShape, strides, pads, dilations, cacheKey: attributes.cacheKey});\n          } else {\n            Object.assign(newAttributes, {kernelShape, strides, pads, cacheKey: attributes.cacheKey});\n          }\n          return [newAttributes, outputShape];\n        };\n\nconst globalMaxPoolAttributes = {\n  autoPad: '',\n  ceilMode: 0,\n  countIncludePad: false,\n  kernelShape: [],\n  strides: [],\n  pads: [],\n  storageOrder: 0,\n  dilations: [],\n  cacheKey: ''\n};\n\nconst globalMaxPoolMetadata = {\n  name: 'GlobalMaxPool',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const globalMaxPool = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  const output = inferenceHandler.run(\n      {\n        ...globalMaxPoolMetadata,\n        get: () => createMaxPoolProgramInfo(inputs, globalMaxPoolMetadata, true, globalMaxPoolAttributes)\n      },\n      inputs);\n  return [output];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pool ops requires 1 input.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst generatePoolingCode =\n    (inputDims: readonly number[], attributes: AveragePoolAttributes, op1: string, op2: string, start: string):\n        string => {\n          const rank = inputDims.length;\n          if (attributes.kernelShape.length <= 2) {\n            const kw = attributes.kernelShape[attributes.kernelShape.length - 1];\n            const sw = attributes.strides[attributes.strides.length - 1];\n            const pwStart = attributes.pads[attributes.pads.length / 2 - 1];\n            const pwEnd = attributes.pads[attributes.pads.length - 1];\n            const dimW = inputDims[rank - 1];\n            let codeW = '';\n            let codeH = '';\n            let codeHEnd = '';\n            if (pwStart + pwEnd !== 0) {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            if (x[${rank} - 1] < 0 || x[${rank} - 1] >= ${dimW}) {\n              pad++;\n              continue;\n            }\n            ${op1}\n          }`;\n            } else {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            ${op1}\n          }`;\n            }\n\n            if (attributes.kernelShape.length === 2) {\n              const kh = attributes.kernelShape[attributes.kernelShape.length - 2];\n              const sh = attributes.strides[attributes.strides.length - 2];\n              const phStart = attributes.pads[attributes.pads.length / 2 - 2];\n              const phEnd = attributes.pads[attributes.pads.length - 2];\n              const dimH = inputDims[rank - 2];\n              if (phStart + phEnd !== 0) {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n              if (x[${rank} - 2] < 0 || x[${rank} - 2] >= ${dimH}) {\n                pad+= ${kw};\n                continue;\n              }\n          `;\n              } else {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n            `;\n              }\n              codeHEnd = `\n          }\n        `;\n            }\n\n            const poolingCode = `\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n\n          float value = ${start};\n          int pad = 0;\n          ${codeH}\n          ${codeW}\n          ${codeHEnd}\n          ${op2}\n          return value;\n        }\n      `;\n            return poolingCode;\n          } else {\n            const kernelSize = ShapeUtil.size(attributes.kernelShape);\n            const kernelStrides = ShapeUtil.computeStrides(attributes.kernelShape);\n            const stridesRank = kernelStrides.length;\n            const padsRank = attributes.pads.length;\n            const offsetToIndicesFunction = offsetToIndices(stridesRank);\n            const copyInputDims = copyArray(inputDims, 'inputDims');\n            const copyPads = copyArray(attributes.pads, 'pads');\n            const copyKernelStrides = copyArray(kernelStrides, 'kernelStrides');\n            const copyStrides = copyArray(attributes.strides, 'strides');\n            const hasPads = attributes.pads.reduce((sum, cur) => sum + cur);\n            let padCode = '';\n            if (hasPads) {\n              padCode = `\n            if (x[j] >= inputDims[j] || x[j] < 0) {\n              pad++;\n              isPad = true;\n              break;\n            }\n          }\n          if (!isPad) {\n            ${op1}\n          }`;\n            } else {\n              padCode = `\n          }\n          ${op1}\n        `;\n            }\n            const poolingCode = `\n        ${offsetToIndicesFunction}\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n          int offset[${stridesRank}];\n          int pads[${padsRank}];\n          int inputDims[${rank}];\n          int kernelStrides[${stridesRank}];\n          int strides[${stridesRank}];\n          ${copyPads}\n          ${copyInputDims}\n          ${copyStrides}\n          ${copyKernelStrides}\n\n          float value = ${start};\n          int pad = 0;\n          bool isPad = false;\n          for (int i = 0; i < ${kernelSize}; i++) {\n            offsetToIndices(i, kernelStrides, offset);\n            isPad = false;\n            for (int j = ${rank} - ${stridesRank}; j < ${rank}; j++) {\n              x[j] = indices[j] * strides[j - ${rank} + ${stridesRank}]\n                + offset[j - ${rank} + ${stridesRank}] - pads[j - 2];\n              ${padCode}\n          }\n          ${op2}\n\n          return value;\n        }\n      `;\n            return poolingCode;\n          }\n        };\n\nconst copyArray = (array: readonly number[], arrayName: string): string => {\n  let block = '';\n  for (let i = 0; i < array.length; i++) {\n    block += `\n      ${arrayName}[${i}] = ${array[i]};\n    `;\n  }\n  return block;\n};\n\nconst offsetToIndices = (rank: number): string => `\n  void offsetToIndices(int offset, int[${rank}] strides, out int[${rank}] indices) {\n    if (${rank} == 0) {\n      return;\n    }\n    for (int i = 0; i < ${rank} - 1; ++i) {\n      indices[i] = offset / strides[i];\n      offset -= indices[i] * strides[i];\n    }\n    indices[${rank} - 1] = offset;\n  }`;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface ReduceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly keepDims: boolean;\n}\n\n// return [init ops, reduce ops, final ops]\ntype ReduceOp = (inputs: Tensor[], axes: number[]) => string[];\n\nconst reduce =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string,\n     reduceOp: ReduceOp): Tensor[] => {\n      validateInputs(inputs);\n\n      const reduceProgramMetadata = {\n        name,\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n      };\n\n      const output = inferenceHandler.run(\n          {\n            ...reduceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () =>\n                createReduceProgramInfo(inferenceHandler, inputs, attributes, name, reduceOp, reduceProgramMetadata)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseReduceAttributes: OperatorInitialization<ReduceAttributes> = (node: Graph.Node): ReduceAttributes => {\n  const axes = node.attributes.getInts('axes', []);\n  const keepDims = node.attributes.getInt('keepdims', 1) === 1;\n  return createAttributeWithCacheKey({axes, keepDims});\n};\n\nconst createReduceProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string, reduceOp: ReduceOp,\n     reduceProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const outputShape: number[] = [];\n      const iRank = inputs[0].dims.length || 1;\n\n      const idxCopy = [];  // copy output indexes to input indexes\n\n      const axes = ShapeUtil.normalizeAxes(attributes.axes, inputs[0].dims.length);\n      const ops = reduceOp(inputs, axes);\n      let reduceOps = ops[1];\n\n      for (let k = 0; k < inputs[0].dims.length; k++) {\n        // if this axis is reduced\n        if (axes.indexOf(k) >= 0 || axes.length === 0) {\n          if (attributes.keepDims) {\n            outputShape.push(1);\n          }  // else { remove the axis from outputShape; }\n\n          // loop over the d-th axis\n          reduceOps = `\n          for(int j${k} = 0; j${k} < ${inputs[0].dims[k]}; j${k}++) {\n            inputIdx[${k}] = j${k};\n            ${reduceOps}\n          }`;\n        } else {\n          idxCopy.push(`inputIdx[${k}] = outputIdx[${outputShape.length}];`);\n\n          outputShape.push(inputs[0].dims[k]);\n        }\n      }\n\n      const oRank = outputShape.length || 1;\n\n      const shaderSource = `\n      float process(int outputIdx[${oRank}]) {\n        float value;                 // final result\n        int inputIdx[${iRank}];      // addressing input data\n        ${idxCopy.join('\\n')}\n        ${ops[0]}       // init ops for reduce max/min\n        ${reduceOps}\n        ${ops[2]}       // final computation for reduce mean\n        return value;\n      }`;\n\n      return {\n        ...reduceProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  // TODO: support Reduce* operators with 2 inputs.\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Reduce op requires 1 input.');\n  }\n\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const reduceSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceSum', reduceOp);\n    };\n\nexport const reduceMean: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        let size = 1.0;\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            size *= inputs[0].dims[k];\n          }\n        }\n\n        return ['value = 0.0;', 'value += _A(inputIdx);', `value /= ${size}.;`];  // ensure real number with `.`\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMean', reduceOp);\n    };\n\nexport const reduceMax: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = max(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMax', reduceOp);\n    };\n\nexport const reduceMin: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = min(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMin', reduceOp);\n    };\n\nexport const reduceProd: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 1.0;', 'value *= _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceProd', reduceOp);\n    };\n\nexport const reduceLogSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', 'value = log(value);'];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSum', reduceOp);\n    };\n\nexport const reduceLogSumSquare: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['float t; value = 0.0;', 't = _A(inputIdx); value += t * t;', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSumSquare', reduceOp);\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedReshape3DProgramMetadata = (outputShape3D: readonly number[]) =>\n    ({name: 'Reshape (packed)', inputTypes: [TextureType.packed], inputNames: ['A'], cacheHint: `${outputShape3D}`});\n\nconst createPackedReshape3DProgramInfo =\n    (handler: WebGLInferenceHandler, input3D: Tensor, metadata: ProgramMetadata, outputShape3D: readonly number[]):\n        ProgramInfo => {\n          const inputShape3D = input3D.dims as [number, number, number];\n          const squeezedOutputShape = outputShape3D as [number, number, number];\n\n          let mainLoop = '';\n          for (let i = 0; i < 4; i++) {\n            let outputCoords = '';\n            switch (i) {\n              case 0:\n                outputCoords = 'outputCoords = rc;';\n                break;\n              case 1:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z);';\n                break;\n              case 2:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y, rc.z+1);';\n                break;\n              case 3:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z+1);';\n                break;\n              default:\n                throw new Error();\n            }\n\n            mainLoop += `\n        ${outputCoords}\n        ${i > 0 ? 'if(outputCoords.y < rows && outputCoords.z < cols){' : ''}\n          int flattenedIndex = getFlattenedIndex(outputCoords);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flattenedIndex);\n          vec2 innerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] = getChannel(getA(inputRC.x, inputRC.y, inputRC.z), innerDims);\n\n        ${i > 0 ? '}' : ''}\n      `;\n          }\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n\n          const shaderSource = `\n      ${getReshapedInputCoords(inputShape3D)}\n      ${getFlattenedIndexFrom3D(squeezedOutputShape)}\n      ${unpackFromChannel()}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.0);\n\n        ivec3 outputCoords;\n        int rows = ${squeezedOutputShape[2]};\n        int cols = ${squeezedOutputShape[1]};\n\n        ${mainLoop}\n        ${glsl.output} = result;\n      }\n    `;\n\n          return {\n            ...metadata,\n            output: {dims: squeezedOutputShape, type: input3D.type, textureType: TextureType.packed},\n            shaderSource,\n            hasMain: true\n          };\n        };\n\nexport const createPackedReshape3DProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input3D: Tensor, outputShape3D: readonly number[]): ProgramInfoLoader => {\n      const metadata = createPackedReshape3DProgramMetadata(outputShape3D);\n      return {...metadata, get: () => createPackedReshape3DProgramInfo(handler, input3D, metadata, outputShape3D)};\n    };\n\nexport function processDims3D(shape: ArrayLike<number>): [number, number, number] {\n  if (shape.length === 0) {\n    return [1, 1, 1];\n  }\n  // TODO: squeeze other shapes to 2D case\n  let batch = 1;\n  for (let i = 0; i < shape.length - 2; ++i) {\n    batch *= shape[i];\n  }\n  return [batch, shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\n\n// For packed reshape, we need to re-arrange texel data for output shape.\n// Our pack is designed to pack a 2x2 tile in last h and w dimension, so\n// for the reshaped new tensor, we just need to re-arrange the last h and\n// w dimension. For any shape that is not in 3D, i.e. [batch, W, H], we\n// first convert it to 3D by collapsing other dimension to batch dim, then\n// process with the last two dimensions.\n// Note: we only need the shape tensor to calculate output shape, so the\n// content in shape tensor is never uploaded to GPU. It is always kept in CPU.\n// TODO: optimize the algorithm -- in some cases, if the last two dims are\n// the same between input shape and output shape, the packed reshape can be\n// treated as no-op.\nexport function isReshapeCheap(dims: readonly number[], reshapedDims: readonly number[]) {\n  let isCheapReshape = false;\n  if (dims.length === 0 || reshapedDims.length === 0) {  // scalar\n    isCheapReshape = true;\n  } else if (dims.length < 2 || reshapedDims.length < 2) {  // 1D\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1];\n  } else {  // 2D +\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1] &&\n        dims[dims.length - 2] === reshapedDims[reshapedDims.length - 2];\n  }\n\n  return isCheapReshape;\n}\n\nfunction getReshapedInputCoords(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n  const coords = ['b', 'r', 'c'];\n  const index = 'index';\n  const coordsFromIndexSnippet = strides\n                                     .map((stride, i) => {\n                                       const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n                                       const line2 = i === strides.length - 1 ?\n                                           `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n                                           `index -= ${coords[i]} * ${stride}`;\n                                       return `${line1}; ${line2};`;\n                                     })\n                                     .join('');\n\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getFlattenedIndexFrom3D(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n\n  return `\n  int getFlattenedIndex(ivec3 coords) {\n    // reverse y, z order\n    return coords.x * ${strides[0]} + coords.z * ${strides[1]} + coords.y;\n  }\n`;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const reshape = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const reshapedDims = ShapeUtil.calculateReshapedDims(inputs[0].dims, inputs[1].integerData);\n  if (handler.session.pack) {\n    return [handler.reshapePacked(inputs[0], reshapedDims)];\n  } else {\n    return [handler.reshapeUnpacked(inputs[0], reshapedDims)];\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {unpackFromChannel} from './packing-utils';\nimport {parseUpsampleAttributes, scalesValidation, UpsampleAttributes, validateInputs} from './upsample';\n\nconst resizeProgramMetadata = {\n  name: 'Resize',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const resize: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...resizeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPackedResizeProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseResizeAttributesV10: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 10);\n\nexport const parseResizeAttributesV11: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 11);\n\nconst createPackedResizeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [scales, outputShape] = prepareInputs(inputs, attributes);\n\n      const isSame =\n          scales.every((s: number) => s === 1) && attributes.coordinateTransformMode !== 'tf_crop_and_resize';\n      if (isSame) {\n        return {\n          ...resizeProgramMetadata,\n          output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n          hasMain: true,\n          shaderSource: `void main() {\n                    vec4 v = ${glsl.texture2D}(X, TexCoords);\n                    ${glsl.output} = v;\n                }`\n        };\n      }\n\n      const dim = outputShape.length;\n      if (dim < 2) {\n        throw new Error(`output dimension should be at least 2, but got ${dim}`);\n      }\n\n      const outputHeight = outputShape[dim - 2];\n      const outputWidth = outputShape[dim - 1];\n\n      const inputShape = inputs[0].dims;\n      if (dim !== inputShape.length) {\n        throw new Error(`output dimension should match input ${inputShape.length}, but got ${dim}`);\n      }\n      const inputHeight = inputShape[dim - 2];\n      const inputWidth = inputShape[dim - 1];\n\n      const scalesHeight = scales[dim - 2];\n      const scalesWidth = scales[dim - 1];\n\n      let getSourceFracIndex = '';\n\n      if (attributes.mode !== 'linear') {\n        // TODO: support other modes\n        throw new Error(`resize (packed) does not support mode: '${attributes.mode}'`);\n      }\n      switch (attributes.coordinateTransformMode) {\n        case 'asymmetric':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return vec4(coords) / scaleWHWH;\n                    }\n                `;\n          break;\n        case 'half_pixel':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return (vec4(coords) + 0.5) / scaleWHWH - 0.5;\n                    }\n                `;\n          break;\n        case 'pytorch_half_pixel':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 fcoords = vec4(coords);\n                        return vec4(\n                            ${outputWidth}.0 > 1.0 ? (fcoords.x + 0.5) / scaleWHWH.x - 0.5 : 0.0,\n                            ${outputHeight}.0 > 1.0 ? (fcoords.y + 0.5) / scaleWHWH.y - 0.5 : 0.0,\n                            ${outputWidth}.0 > 1.0 ? (fcoords.z + 0.5) / scaleWHWH.z - 0.5 : 0.0,\n                            ${outputHeight}.0 > 1.0 ? (fcoords.w + 0.5) / scaleWHWH.w - 0.5 : 0.0\n                          );\n                    }\n                `;\n          break;\n        case 'align_corners':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 resized = vec4(${outputWidth}.0 - 1.0, ${outputHeight}.0 - 1.0, ${outputWidth}.0 - 1.0,\n                            ${outputHeight}.0 - 1.0);\n                        vec4 original = vec4(${inputWidth}.0 - 1.0, ${inputHeight}.0 - 1.0, ${inputWidth}.0 - 1.0,\n                            ${inputHeight}.0 - 1.0);\n                        vec4 new_scale = original / resized;\n                        return vec4(coords) * new_scale;\n                    }\n                `;\n          break;\n        default:\n          // TODO:supporting other coordinateTransformModes\n          throw new Error(`resize (packed) does not support coordinateTransformMode: \\\n                                '${attributes.coordinateTransformMode}'`);\n      }\n\n      const coordsDataType = getCoordsDataType(dim);\n      const unpackChannel = unpackFromChannel();\n      const shaderSource = `\n            const vec2 inputWH = vec2(${inputHeight}.0, ${inputWidth}.0);\n            const vec4 scaleWHWH = vec4(float(${scalesHeight}), float(${scalesWidth}), float(${scalesHeight}), float(${\n          scalesWidth}));\n            ${unpackChannel}\n            ${getSourceFracIndex}\n            float getAValue(int x10, int r, int c, int d) {\n                return getChannel(getA(x10, r, c, d), vec2(c, d));\n            }\n            void main() {\n                ${coordsDataType} rc = getOutputCoords();\n\n                int batch = rc[0];\n                int depth = rc[1];\n\n                // retrieve the 4 coordinates that is used in the 4 packed output values.\n                ivec4 coords = ivec4(rc.wz, rc.w + 1, rc.z + 1);\n\n                // calculate the source index in fraction\n                vec4 sourceFrac = getSourceFracIndex(coords);\n\n                // get the lower and upper bound of the 4 values that will be packed into one texel.\n                ivec4 x00 = ivec4(max(sourceFrac.xy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xy)));\n                ivec4 x01 = ivec4(max(sourceFrac.xw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xw)));\n                ivec4 x10 = ivec4(max(sourceFrac.zy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zy)));\n                ivec4 x11 = ivec4(max(sourceFrac.zw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zw)));\n\n                bool hasNextRow = rc.w < ${outputHeight - 1};\n                bool hasNextCol = rc.z < ${outputWidth - 1};\n\n                // pack x00, x01, x10, x11's top-left corner into one vec4 structure\n                vec4 topLeft = vec4(\n                    getAValue(batch, depth, x00.x, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's top-right corner into one vec4 structure\n                vec4 topRight = vec4(\n                    getAValue(batch, depth, x00.x, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.w) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-left corner into one vec4 structure\n                vec4 bottomLeft = vec4(\n                    getAValue(batch, depth, x00.z, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-right corner into one vec4 structure\n                vec4 bottomRight = vec4(\n                    getAValue(batch, depth, x00.z, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.w) : 0.0);\n\n                // calculate the interpolation fraction on u and v direction\n                vec4 frac = vec4(sourceFrac) - floor(sourceFrac);\n                vec4 clampFrac = clamp(frac, vec4(0.0), vec4(1.0));\n\n                vec4 top = mix(topLeft, topRight, clampFrac.ywyw);\n                vec4 bottom = mix(bottomLeft, bottomRight, clampFrac.ywyw);\n                vec4 newValue = mix(top, bottom, clampFrac.xxzz);\n\n                ${glsl.output} = vec4(newValue);\n            }\n        `;\n      return {\n        ...resizeProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\n\nconst prepareInputs = (inputs: Tensor[], attributes: UpsampleAttributes): [readonly number[], readonly number[]] => {\n  const x = inputs[0];\n  const xDims = x.dims;\n\n  let scales = attributes.scales;\n  let outputSizes: number[]|undefined;\n  if (scales.length === 0) {\n    const scalesTensor = inputs[attributes.scalesInputIdx];\n    if (scalesTensor && scalesTensor.size !== 0) {\n      if (inputs[attributes.sizesInputIdx]) {\n        throw new Error('Only one of scales or sizes must be provided as input.');\n      }\n      scales = parseScalesData(scalesTensor, attributes.mode, attributes.isResize);\n    } else {\n      const sizesTensor = inputs[attributes.sizesInputIdx];\n      if (!sizesTensor || sizesTensor.size === 0) {\n        throw new Error('Either scales or sizes MUST be provided as input.');\n      }\n\n      outputSizes = Array.from(sizesTensor.integerData);\n      scales = parseScalesDataFromOutputSize(outputSizes, xDims, attributes.mode, attributes.isResize);\n    }\n  } else {\n    if (inputs[attributes.sizesInputIdx]) {\n      throw new Error('Only one of scales or sizes must be provided as input.');\n    }\n  }\n\n  const yDims = outputSizes || (xDims.map((dim, i) => Math.floor(dim * scales[i])));\n\n  return [scales, yDims];\n};\n\nconst parseScalesData = (scale: Tensor, mode: string, isResize: boolean): number[] => {\n  const scales = Array.from(scale.floatData);\n  scalesValidation(scales, mode, isResize);\n  return scales;\n};\n\nconst parseScalesDataFromOutputSize =\n    (yDims: readonly number[], xDims: readonly number[], mode: string, isResize: boolean): number[] => {\n      const length = xDims.length;\n      const scales = new Array<number>(length);\n\n      for (let i = 0, end = length; i < end; i++) {\n        if (xDims[i] === 0) {\n          if (yDims[i] !== 0) {\n            throw new Error('Input dim is zero but required output dim is non-zero.');\n          }\n          scales[i] = 1;\n        } else {\n          scales[i] = yDims[i] / xDims[i];\n        }\n      }\n      scalesValidation(scales, mode, isResize);\n      return scales;\n    };\n\n// roi data is not used yet. but leave here for future usage.\n// const getRoi = (inputs: Tensor[], attributes: UpsampleAttributes) : number[] => {\n//     let roi: number[] = [];\n//     if (attributes.needRoiInput) {\n//         if (attributes.roiInputIdx <= 0) {\n//             throw new Error('Invalid roi input index.');\n//         }\n//         const roiTensor = inputs[attributes.roiInputIdx];\n//         roi = roiTensor.size > 0 ? Array.from(roiTensor.floatData) : [];\n//     } else {\n//         roi = new Array(inputs[0].dims.length * 2).fill(0);\n//     }\n//     return roi;\n// };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const shape = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  return [new Tensor([inputs[0].dims.length], 'int32', undefined, undefined, new Int32Array(inputs[0].dims))];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Shape requires 1 input.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SliceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly ends: number[];\n  readonly starts: number[];\n}\n\nconst sliceProgramMetadata = {\n  name: 'Slice',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const slice: OperatorImplementation<SliceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SliceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...sliceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseSliceAttributes: OperatorInitialization<SliceAttributes> = (node: Graph.Node): SliceAttributes => {\n  const starts = node.attributes.getInts('starts');\n  const ends = node.attributes.getInts('ends');\n  const axes = node.attributes.getInts('axes', []);\n  return createAttributeWithCacheKey({starts, ends, axes});\n};\n\nconst createSliceProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SliceAttributes): ProgramInfo => {\n      const axes = (attributes.axes.length === 0) ? input.dims.slice(0).map((val, i) => i) : attributes.axes;\n      const normalizedAxes = ShapeUtil.normalizeAxes(axes, input.dims.length);\n      const starts = attributes.starts.map((start, i) => {\n        if (start > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(start, input.dims[normalizedAxes[i]]);\n      });\n      const ends = attributes.ends.map((end, i) => {\n        if (end > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(end, input.dims[normalizedAxes[i]]);\n      });\n\n      const outputShape = input.dims.slice();\n\n      const sliceOps: string[] = [];\n      for (let i = 0; i < normalizedAxes.length; i++) {\n        outputShape[normalizedAxes[i]] = ends[i] - starts[i];\n        if (starts[i] > 0) {\n          sliceOps.push(`outputIdx[${normalizedAxes[i]}] += ${starts[i]};`);\n        }  // else { sliceOps.push(`outputIdx[${normalizedAxes[i]}] += 0;`); }\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        ${sliceOps.join('\\n      ')}\n        return _A(outputIdx);\n      }`;\n      return {\n        ...sliceProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Slice requires 1 input.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const sliceV10 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV10(inputs);\n  const attributes = generateSliceAttributesFromInputs(inferenceHandler, inputs);\n  const output = inferenceHandler.run(\n      {\n        ...sliceProgramMetadata,\n        cacheHint: attributes.cacheKey,\n        get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n      },\n      [inputs[0]]);\n  return [output];\n};\n\nconst generateSliceAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): SliceAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          !inferenceHandler.session.isInitializer(inputs[2].dataId) ||\n          (inputs.length >= 4 && !inferenceHandler.session.isInitializer(inputs[3].dataId)) ||\n          (inputs.length >= 5 && !inferenceHandler.session.isInitializer(inputs[4].dataId))) {\n        throw new Error('dynamic slice attributes are not allowed');\n      }\n\n      if (inputs.length >= 5 && inputs[4].integerData.some((i: number) => i !== 1)) {\n        throw new Error('currently non-1 steps is not supported for Slice');\n      }\n\n      const starts = Array.from(inputs[1].integerData);\n      const ends = Array.from(inputs[2].integerData);\n      const axes = inputs.length >= 4 ? Array.from(inputs[3].integerData) : [];\n      const cacheKey = `${axes};${starts};${ends}`;\n      return {starts, ends, axes, cacheKey};\n    };\n\nconst validateInputsV10 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 3 || inputs.length > 5) {\n    throw new Error('Invalid input number.');\n  }\n  if (inputs[1].type !== 'int32' || inputs[1].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[2].type !== 'int32' || inputs[2].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 4 && (inputs[3].type !== 'int32' || inputs[3].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 5 && (inputs[4].type !== 'int32' || inputs[4].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface SoftmaxAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nconst softmaxComputeMaxProgramMetadata = {\n  name: 'SoftmaxComputeMax',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst softmaxComputeScaleProgramMetadata = {\n  name: 'SoftmaxComputeScale',\n  inputNames: ['A', 'Max'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst softmaxProgramMetadata = {\n  name: 'SoftMax',\n  inputNames: ['A', 'Max', 'Norm'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked],\n};\n\nexport const softmax: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const logicalRowCount = ShapeUtil.sizeToDimension(inputShape, axis);\n      const featureCount = ShapeUtil.sizeFromDimension(inputShape, axis);\n\n      const output = computeSoftmax(inferenceHandler, inputs, attributes, logicalRowCount, featureCount);\n      return output;\n    };\n\nexport const parseSoftmaxAttributes: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 1)});\n\nexport const parseSoftmaxAttributesV13: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', -1)});\n\n// The \"semantic\" meaning of axis has changed in opset-13.\n// Please compare: https://github.com/onnx/onnx/blob/main/docs/Operators.md#Softmax\n// with https://github.com/onnx/onnx/blob/main/docs/Changelog.md#Softmax-11 for detailed explanations\n// To account for the opset-13 behavior, our plan will be to transpose the \"axis\" dim to the innermost dim\n// and perform softmax and then reverse the transpose. We can skip the transposing aspect if the axis is already\n// the innermost dim\nexport const softmaxV13: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const rank = inputShape.length;\n\n      const isTransposeRequired = (axis !== rank - 1) ? true : false;\n      const transposedInputShape: number[] = [];\n      let perm: number[] = [];\n      let transposedInputs: Tensor[] = [];\n      let transposeAttribute: TransposeAttributes;\n\n      if (isTransposeRequired) {\n        perm = Array.from({length: rank}).map((_, i) => i);\n\n        // swap the innermost dim with the dim corresponding to axis\n        perm[axis] = rank - 1;\n        perm[rank - 1] = axis;\n\n        perm.map(p => transposedInputShape.push(inputShape[p]));\n\n        transposeAttribute = createAttributeWithCacheKey({perm});\n        transposedInputs = transpose(inferenceHandler, inputs, transposeAttribute);\n      }\n\n      const logicalRowCount = isTransposeRequired ? ShapeUtil.sizeToDimension(transposedInputShape, rank - 1) :\n                                                    ShapeUtil.sizeToDimension(inputShape, rank - 1);\n      const featureCount = isTransposeRequired ? ShapeUtil.sizeFromDimension(transposedInputShape, rank - 1) :\n                                                 ShapeUtil.sizeFromDimension(inputShape, rank - 1);\n\n      const output = computeSoftmax(\n          inferenceHandler, isTransposeRequired ? transposedInputs : inputs, attributes, logicalRowCount, featureCount);\n\n      if (isTransposeRequired) {\n        const reversedOutput = transpose(inferenceHandler, output, transposeAttribute!);\n        return reversedOutput;\n      } else {\n        return output;\n      }\n    };\n\nconst computeSoftmax =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes, logicalRowCount: number,\n     featureCount: number): Tensor[] => {\n      const computeMaxProgramInfo =\n          createComputeMaxProgramInfo(inferenceHandler, inputs[0], logicalRowCount, featureCount, [logicalRowCount]);\n      const max = inferenceHandler.run(\n          {...softmaxComputeMaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeMaxProgramInfo},\n          inputs);\n\n      const computeScaleProgramInfo = createComputScaleProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          [logicalRowCount]);\n      const scale = inferenceHandler.run(\n          {...softmaxComputeScaleProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeScaleProgramInfo},\n          [inputs[0], max]);\n\n      const softMaxProgramInfo = createSoftMaxProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          computeScaleProgramInfo.output.dims);\n      const output = inferenceHandler.run(\n          {...softmaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => softMaxProgramInfo},\n          [inputs[0], max, scale]);\n      return [output];\n    };\n\n/**\n * Create a texture that contains the maximum value of each of the 'N' rows\n */\nconst createComputeMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float max = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset, ${textureWidth},\n        ${textureHeight} )));\n        for(int i=1; i<${featureCount}; ++i)\n        {\n          float current = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight})));\n          if(current > max)\n          max = current;\n        }\n\n        return max;\n      }`;\n      return {\n        ...softmaxComputeMaxProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\n/**\n * Create a texture that contains the normalization factor for each of the 'N' rows\n */\nconst createComputScaleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float norm_factor = 0.0;\n        float max = _Max(indices);\n        for(int i=0; i<${featureCount}; ++i)\n        {\n          norm_factor += exp(getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight}))) - max);\n        }\n\n        return norm_factor;\n      }`;\n      return {\n        ...softmaxComputeScaleProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createSoftMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], normalizationPerLogicalRow: readonly number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = input.dims.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1 || normalizationPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount || normalizationPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n\n      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)\n      int offset = coordsToOffset(TexCoords, ${textureWidth}, ${textureHeight});\n\n      //determine the logical row for this index\n      int logical_row_index[1];\n      logical_row_index[0] = offset / ${featureCount};\n\n      float norm_factor = _Norm(logical_row_index);\n\n      // avoid possible division by 0\n      // if norm_facor is 0, all elements are zero\n      // if so, return 0\n      if(norm_factor == 0.0)\n        return 0.0;\n\n      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;\n    }`;\n      return {\n        ...softmaxProgramMetadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Softmax requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil, SplitUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SplitAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n  readonly split: number[];\n  readonly numOutputs: number;\n}\n\nconst splitProgramMetadata = {\n  name: 'Split',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const split: OperatorImplementation<SplitAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SplitAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputs[0].dims.length);\n      const count = getProgramCount(inferenceHandler, inputs, axis, attributes);\n      const output: Tensor[] = [];\n      for (let i = 0; i < count; ++i) {\n        output.push(inferenceHandler.run(\n            {\n              ...splitProgramMetadata,\n              cacheHint: `${attributes.cacheKey};${i}`,\n              get: () => createSplitProgramInfo(inferenceHandler, inputs[0], attributes, axis, i)\n            },\n            inputs));\n      }\n\n      return output;\n    };\n\nexport const parseSplitAttributes: OperatorInitialization<SplitAttributes> = (node: Graph.Node): SplitAttributes => {\n  const axis = node.attributes.getInt('axis', 0);\n  const split = node.attributes.getInts('split', []);\n  const numOutputs = node.outputs.length;\n  return createAttributeWithCacheKey({axis, split, numOutputs});\n};\n\nconst getProgramCount =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number, attributes: SplitAttributes): number => {\n      const [, offsets] = SplitUtil.splitShape(inputs[0].dims, axis, attributes.split, attributes.numOutputs);\n      return offsets.length;\n    };\n\nconst createSplitProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SplitAttributes, axis: number, index: number):\n        ProgramInfo => {\n          const [shapes, offsets] = SplitUtil.splitShape(input.dims, axis, attributes.split, attributes.numOutputs);\n          const offset = offsets[index];\n          const outputShape = shapes[index];\n          const rank = outputShape.length;\n          const shaderSource = `\n      float process(int indices[${rank}]) {\n        indices[${axis}] += ${offset};\n        return _A(indices);\n      }\n    `;\n          return {\n            ...splitProgramMetadata,\n            cacheHint: `${attributes.cacheKey}:${index}`,\n            output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Split requires one input.');\n  }\n\n  if (inputs[0].type !== 'int8' && inputs[0].type !== 'uint8' && inputs[0].type !== 'int16' &&\n      inputs[0].type !== 'uint16' && inputs[0].type !== 'int32' && inputs[0].type !== 'uint32' &&\n      inputs[0].type !== 'float32' && inputs[0].type !== 'float64' && inputs[0].type !== 'bool') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const squeeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.squeezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const squeezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return squeeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseSqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Squeeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Squeeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const sum = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const sumProgramMetadata = {\n    name: 'Sum',\n    inputNames: inputs.map((v, i) => `X${i}`),\n    inputTypes: new Array(inputs.length).fill(TextureType.unpacked)\n  };\n\n  const output = inferenceHandler.run(\n      {...sumProgramMetadata, get: () => createSumProgramInfo(inferenceHandler, inputs, sumProgramMetadata)}, inputs);\n  return [output];\n};\n\nconst createSumProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], sumProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const outputShape = inputs[0].dims.slice();\n      const sumLine = inputs.map((v, i) => `${glsl.texture2D}(X${i},TexCoords)`).join(' + ');\n      const shaderSource = `\n      void main() {\n        vec4 result = ${sumLine};\n        ${glsl.output} = result;\n      }\n    `;\n      return {\n        ...sumProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length === 0) {\n    throw new Error('Sum requires inputs.');\n  }\n\n  const length = inputs[0].dims.length;\n  for (let i = 1; i < inputs.length; i++) {\n    if (length !== inputs[i].dims.length) {\n      throw new Error('Input shapes are mismatched.');\n    }\n\n    for (let j = 0; j < length; j++) {\n      if (inputs[0].dims[j] !== inputs[i].dims[j]) {\n        throw new Error('Input shapes are not matched.');\n      }\n    }\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n  for (let i = 1; i < inputs.length; i++) {\n    if (inputs[0].type !== inputs[i].type) {\n      throw new Error('Input types are not matched.');\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {NUMBER_TYPES} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const tile = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const tileProgramMetadata = {\n    name: 'Tile',\n    inputNames: ['A'],\n    inputTypes: [TextureType.unpacked],\n  };\n\n  const output = inferenceHandler.run(\n      {...tileProgramMetadata, get: () => createTileProgramInfo(inferenceHandler, inputs, tileProgramMetadata)},\n      inputs);\n  return [output];\n};\n\nconst createTileProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], tileProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const outputShape = new Array(inputShape.length);\n\n      const tileOps: string[] = [];\n      for (let i = 0; i < inputShape.length; i++) {\n        outputShape[i] = inputShape[i] * inputs[1].numberData[i];\n        tileOps.push(`inputIdx[${i}] = int(mod(float(outputIdx[${i}]), ${inputShape[i]}.));`);\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        int inputIdx[${rank}];\n        ${tileOps.join('\\n')}\n        return _A(inputIdx);\n      }\n    `;\n      return {\n        ...tileProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Tile requires 2 input.');\n  }\n  if (inputs[1].dims.length !== 1) {\n    throw new Error('The second input shape must 1 dimension.');\n  }\n  if (inputs[1].dims[0] !== inputs[0].dims.length) {\n    throw new Error('Invalid input shape.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invalid repeat type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface TransposeAttributes extends AttributeWithCacheKey {\n  readonly perm: number[];\n}\n\nconst transposeProgramMetadata = {\n  name: 'Transpose',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const transpose: OperatorImplementation<TransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: TransposeAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...transposeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createTransposeProgramInfo(inferenceHandler, inputs[0], attributes.perm)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseTransposeAttributes: OperatorInitialization<TransposeAttributes> =\n    (node: Graph.Node): TransposeAttributes => createAttributeWithCacheKey({perm: node.attributes.getInts('perm', [])});\n\nconst createTransposeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, perm: number[]): ProgramInfo => {\n      const inputShape = input.dims;\n      perm = getAdjustedPerm(inputShape, perm);\n      const unpackedOutputShape = getOutputShape(inputShape, perm);\n      const rank = inputShape.length;\n      // A dims=[${inputs[0].dims.toString()}]\n      // out Dims=[${unpackedOutputShape.toString()}]\n      // based on perm=[${perm.toString()}]\n      const shaderSource = `\n      ${getPermFunctionBody('perm', perm, rank)}\n      float process(int indices[${rank}]) {\n        int a[${rank}];\n        perm(a, indices);\n        return _A(a);\n      }`;\n      return {\n        ...transposeProgramMetadata,\n        output: {dims: unpackedOutputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst getAdjustedPerm = (inputShape: readonly number[], perm: number[]): number[] => {\n  if (perm && perm.length !== inputShape.length) {\n    perm = [...(inputShape.keys())].reverse();\n  }\n  return perm;\n};\n\nconst getOutputShape = (inputShape: readonly number[], perm: number[]): readonly number[] => {\n  perm = getAdjustedPerm(inputShape, perm);\n  return ShapeUtil.sortBasedOnPerm(inputShape, perm);\n};\n\nconst getPermFunctionBody = (name: string, perm: number[], rank: number): string => {\n  const reverseFunc = [];\n  reverseFunc.push(`void ${name}(out int a[${rank}], int src[${rank}]) {`);\n  for (let i = 0; i < rank; ++i) {\n    reverseFunc.push(`\\ta[${perm[i]}]=src[${i}];`);\n  }\n  reverseFunc.push('\\t}');\n  return reverseFunc.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Transpose requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('input should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {TextureData, TextureType} from '../types';\n\nexport const encodeAsUint8 = (inferenceHandler: WebGLInferenceHandler, input: TextureData): TextureData => {\n  const outputShape = input.shape;\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  /**\n   * https://github.com/tensorflow/tfjs-core/blob/master/src/kernels/webgl/encode_float_gpu.ts\n   */\n  const shaderSource = `\n    const float FLOAT_MAX = 1.70141184e38;\n    const float FLOAT_MIN = 1.17549435e-38;\n\n    bool isNaN(float val) {\n      return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;\n    }\n\n    highp vec4 encodeAsUint8(highp float v) {\n      if (isNaN(v)) {\n        return vec4(255, 255, 255, 255);\n      }\n\n      highp float av = abs(v);\n\n      if(av < FLOAT_MIN) {\n        return vec4(0.0, 0.0, 0.0, 0.0);\n      } else if(v > FLOAT_MAX) {\n        return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n      } else if(v < -FLOAT_MAX) {\n        return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n      }\n\n      highp vec4 c = vec4(0,0,0,0);\n\n      highp float e = floor(log2(av));\n      highp float m = exp2(fract(log2(av))) - 1.0;\n\n      c[2] = floor(128.0 * m);\n      m -= c[2] / 128.0;\n      c[1] = floor(32768.0 * m);\n      m -= c[1] / 32768.0;\n      c[0] = floor(8388608.0 * m);\n\n      highp float ebias = e + 127.0;\n      c[3] = floor(ebias / 2.0);\n      ebias -= c[3] * 2.0;\n      c[2] += floor(ebias) * 128.0;\n\n      c[3] += 128.0 * step(0.0, -v);\n\n      return c / 255.0;\n    }\n\n    void main() {\n      float value = ${glsl.texture2D}(X,TexCoords).r;\n      ${glsl.output} = encodeAsUint8(value);\n    }`;\n  const programInfo = {\n    name: 'Uint8Encode',\n    inputTypes: [TextureType.unpacked],\n    inputNames: ['X'],\n    output: {dims: outputShape, type: input.tensor.type, textureType: TextureType.downloadUint8AsFloat},\n    shaderSource,\n    hasMain: true\n  };\n  return inferenceHandler.executeProgram(programInfo, [input.tensor]);\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {Tensor} from '../../../tensor';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport function glslAbs(): GlslValueFunction {\n  return glslBuiltinUnary('abs');\n}\nexport function glslAcos(): GlslValueFunction {\n  return glslBuiltinUnary('acos');\n}\nexport function glslAsin(): GlslValueFunction {\n  return glslBuiltinUnary('asin');\n}\nexport function glslAtan(): GlslValueFunction {\n  return glslBuiltinUnary('atan');\n}\nexport function glslCeil(): GlslValueFunction {\n  return glslBuiltinUnary('ceil');\n}\nexport function glslCos(): GlslValueFunction {\n  return glslBuiltinUnary('cos');\n}\nexport function glslElu(alpha: number): GlslValueFunction {\n  const name = 'elu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a >= 0.0 ? a: (exp(a) - 1.0) * alpha;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslExp(): GlslValueFunction {\n  return glslBuiltinUnary('exp');\n}\nexport function glslFloor(): GlslValueFunction {\n  return glslBuiltinUnary('floor');\n}\nexport function glslClip(min: number, max: number): GlslValueFunction {\n  const name = 'clip';\n  const body = `\n  const float min = float(${min});\n  const float max = float(${max});\n\n  float ${name}_(float a) {\n    return clamp(a, min, max);\n  }\n  vec4 ${name}_(vec4 v) {\n    return clamp(v, min, max);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslIdentity(): GlslValueFunction {\n  const name = 'indentity';\n  const body = `\n  float ${name}_(float a) {\n    return a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLeakyRelu(alpha: number): GlslValueFunction {\n  const name = 'leakyRelu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a < 0.0 ? a * alpha : a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLog(): GlslValueFunction {\n  return glslBuiltinUnary('log');\n}\nexport function glslNeg(): GlslValueFunction {\n  const name = 'neg';\n  const body = `\n  float ${name}_(float a) {\n    return -a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return -v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslNot(): GlslValueFunction {\n  const name = 'not';\n  const body = `\n  float ${name}_(float a) {\n    return float( ! bool(a) );\n  }\n  bool ${name}_(bool a) {\n    return !a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));\n  }\n  bvec4 ${name}_(bvec4 v) {\n    return bvec4(!v.x, !v.y, !v.z, !v.w);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSin(): GlslValueFunction {\n  return glslBuiltinUnary('sin');\n}\nexport function glslRelu(): GlslValueFunction {\n  const name = 'relu';\n  const body = `\n  float ${name}_(float a) {\n    return max( a, 0.0 );\n  }\n  vec4 ${name}_(vec4 v) {\n    return max( v, 0.0 );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSigmoid(): GlslValueFunction {\n  const name = 'sigmoid';\n  const body = `\n  float ${name}_(float a) {\n    return 1.0 / (1.0 + exp(-a));\n  }\n  vec4 ${name}_(vec4 v) {\n    return 1.0 / (1.0 + exp(-v));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSqrt(): GlslValueFunction {\n  return glslBuiltinUnary('sqrt');\n}\nexport function glslTan(): GlslValueFunction {\n  return glslBuiltinUnary('tan');\n}\nexport function glslTanh(): GlslValueFunction {\n  const name = 'tanh';\n  const body = `\n  float ${name}_(float a) {\n    a = clamp(a, -10., 10.);\n    a = exp(2.*a);\n    return (a - 1.) / (a + 1.);\n  }\n  vec4 ${name}_(vec4 v) {\n    v = clamp(v, -10., 10.);\n    v = exp(2.*v);\n    return (v - 1.) / (v + 1.);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nfunction glslBuiltinUnary(name: string): GlslValueFunction {\n  const body = `\n  float ${name}_(float a) {\n    return ${name}(a);\n  }\n  vec4 ${name}_(vec4 v) {\n    return ${name}(v);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\n/////\n/////\n/////\n\nconst createElementwiseProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, glslFunc: GlslValueFunction):\n        ProgramInfo => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n          return {\n            ...metadata,\n            output: {dims: input.dims, type: input.type, textureType},\n            shaderSource: `\n     ${glslFunc.body}\n     void main() {\n       vec4 v = ${glsl.texture2D}(A, TexCoords);\n       v = ${glslFunc.name}_(v);\n       ${glsl.output} = v;\n     }\n     `,\n            hasMain: true\n          };\n        };\n\nconst createElementwiseProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input: Tensor, glslFunc: GlslValueFunction, cacheKey?: string):\n        ProgramInfoLoader => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const metadata = {name: glslFunc.name, inputTypes: [textureType], inputNames: ['A'], cacheHint: cacheKey};\n          return {...metadata, get: () => createElementwiseProgramInfo(handler, metadata, input, glslFunc)};\n        };\n\nexport const abs = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAbs()), inputs)];\n\nexport const acos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAcos()), inputs)];\n\nexport const asin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAsin()), inputs)];\n\nexport const atan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAtan()), inputs)];\n\nexport interface ClipAttributes extends AttributeWithCacheKey {\n  readonly min: number;\n  readonly max: number;\n}\n\nexport const clip =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ClipAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(\n            handler, inputs[0], glslClip(attributes.min, attributes.max), attributes.cacheKey),\n        inputs)];\n\nexport const parseClipAttributes = (node: Graph.Node): ClipAttributes => createAttributeWithCacheKey(\n    {min: node.attributes.getFloat('min', MIN_CLIP), max: node.attributes.getFloat('max', MAX_CLIP)});\n\nexport const clipV11 = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const attributes = generateClipAttributesFromInputs(handler, inputs);\n  return clip(handler, [inputs[0]], attributes);\n};\n\nconst generateClipAttributesFromInputs = (handler: WebGLInferenceHandler, inputs: Tensor[]): ClipAttributes => {\n  if (inputs.length >= 3 &&\n      (!handler.session.isInitializer(inputs[1].dataId) || !handler.session.isInitializer(inputs[2].dataId))) {\n    throw new Error('dynamic clip attributes are not allowed');\n  }\n\n  const min = (inputs.length >= 3) ? inputs[1].numberData[0] : MIN_CLIP;\n  const max = (inputs.length >= 3) ? inputs[2].numberData[0] : MAX_CLIP;\n  return createAttributeWithCacheKey({min, max});\n};\n\nexport const ceil = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCeil()), inputs)];\n\nexport const cos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCos()), inputs)];\n\nexport interface EluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const elu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: EluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslElu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseEluAttributes = (node: Graph.Node): EluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 1.0)});\n\nexport const exp = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslExp()), inputs)];\n\nexport const floor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslFloor()), inputs)];\n\nexport const identity = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslIdentity()), inputs)];\n\nexport interface LeakyReluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const leakyRelu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: LeakyReluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslLeakyRelu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseLeakyReluAttributes = (node: Graph.Node): LeakyReluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 0.01)});\n\nexport const log = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslLog()), inputs)];\n\nexport const neg = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNeg()), inputs)];\n\nexport const not = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNot()), inputs)];\n\nexport const relu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslRelu()), inputs)];\n\nexport const sigmoid = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSigmoid()), inputs)];\n\nexport const sin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSin()), inputs)];\n\nexport const sqrt = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSqrt()), inputs)];\n\nexport const tan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTan()), inputs)];\n\nexport const tanh = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTanh()), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst unpackProgramMetadata = {\n  name: 'unpack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const createUnpackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const rank = input.dims.length;\n\n  const channels = getChannels('rc', rank);\n  const innerDims = channels.slice(-2);\n  const coordsDataType = getCoordsDataType(rank);\n  const unpackChannel = unpackFromChannel();\n  const isScalar = (input.dims.length === 0);\n  const sourceCoords = isScalar ? '' : getSourceCoords(rank, channels);\n  const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const shaderSource = `\n    ${unpackChannel}\n    void main() {\n      ${coordsDataType} rc = getOutputCoords();\n\n       // Sample the texture with the coords to get the rgba channel value.\n       vec4 packedInput = getA(${sourceCoords});\n\n       ${glsl.output} = vec4(getChannel(packedInput, ${coords}), 0, 0, 0);\n     }\n   `;\n\n  return {\n    ...unpackProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n    shaderSource\n  };\n};\n\nexport const createUnpackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...unpackProgramMetadata, get: () => createUnpackProgramInfo(handler, input)});\n\nfunction getSourceCoords(rank: number, dims: string[]): string {\n  if (rank === 1) {\n    return 'rc';\n  }\n\n  let coords = '';\n  for (let i = 0; i < rank; i++) {\n    coords += dims[i];\n    if (i < rank - 1) {\n      coords += ',';\n    }\n  }\n  return coords;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const unsqueeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.unsqueezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const unsqueezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return unsqueeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseUnsqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Unsqueeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Unsqueeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface UpsampleAttributes extends AttributeWithCacheKey {\n  readonly opset: number;\n  readonly isResize: boolean;\n  readonly mode: string;\n  readonly scales: number[];\n  readonly extrapolationValue: number;\n  readonly coordinateTransformMode: string;\n  readonly useExtrapolation: boolean;\n  readonly needRoiInput: boolean;\n  readonly nearestMode: string;\n  readonly cubicCoefficientA: number;\n  readonly excludeOutside: boolean;\n  readonly useNearest2xOptimization: boolean;\n  readonly roiInputIdx: number;\n  readonly scalesInputIdx: number;\n  readonly sizesInputIdx: number;\n}\n\nconst upsampleProgramMetadata = {\n  name: 'Upsample',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const upsample: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...upsampleProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createUpsampleProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseUpsampleAttributesV7: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 7);\n\nexport const parseUpsampleAttributesV9: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 9);\n\nexport const parseUpsampleAttributes = (node: Graph.Node, opset: number): UpsampleAttributes => {\n  const isResize = (opset >= 10);\n\n  // processing node attributes\n  const mode = node.attributes.getString('mode', 'nearest');\n  if (mode !== 'nearest' && mode !== 'linear' && (opset < 11 || mode !== 'cubic')) {\n    throw new Error(`unrecognized mode: ${mode}`);\n  }\n\n  let scales: number[] = [];\n  if (opset < 9) {\n    scales = node.attributes.getFloats('scales');\n    scalesValidation(scales, mode, isResize);\n  }\n\n  const extrapolationValue = node.attributes.getFloat('extrapolation_value', 0.0);\n\n  const coordinateTransformMode =\n      opset > 10 ? node.attributes.getString('coordinate_transformation_mode', 'half_pixel') : 'asymmetric';\n  if ([\n        'asymmetric', 'pytorch_half_pixel', 'tf_half_pixel_for_nn', 'align_corners', 'tf_crop_and_resize', 'half_pixel'\n      ].indexOf(coordinateTransformMode) === -1) {\n    throw new Error(`coordinate_transform_mode '${coordinateTransformMode}' is not supported`);\n  }\n  const needRoiInput = (coordinateTransformMode === 'tf_crop_and_resize');\n  const useExtrapolation = needRoiInput;\n\n  const nearestMode =\n      (mode === 'nearest' && opset >= 11) ? node.attributes.getString('nearest_mode', 'round_prefer_floor') : '';\n  if (['round_prefer_floor', 'round_prefer_ceil', 'floor', 'ceil', ''].indexOf(nearestMode) === -1) {\n    throw new Error(`nearest_mode '${nearestMode}' is not supported`);\n  }\n\n  const cubicCoefficientA = node.attributes.getFloat('cubic_coeff_a', -0.75);\n  const excludeOutside = node.attributes.getInt('exclude_outside', 0) !== 0;\n  if (excludeOutside && mode !== 'cubic') {\n    throw new Error('exclude_outside can be set to 1 only when mode is CUBIC.');\n  }\n\n  const useNearest2xOptimization =\n      (opset < 11) ? true : (mode === 'nearest' && coordinateTransformMode === 'asymmetric' && nearestMode === 'floor');\n\n  let roiInputIdx = 0;\n  let scalesInputIdx = 0;\n  let sizesInputIdx = 0;\n\n  if (opset > 10) {\n    // handle when roiInput is not given\n    if (node.inputs.length > 2) {\n      roiInputIdx = 1;\n      scalesInputIdx = 2;\n      sizesInputIdx = 3;\n    } else {\n      scalesInputIdx = 1;\n      sizesInputIdx = 2;\n    }\n  } else if (opset === 9) {\n    scalesInputIdx = 1;\n  }\n\n  return createAttributeWithCacheKey({\n    opset,\n    isResize,\n    mode,\n    scales,\n    extrapolationValue,\n    coordinateTransformMode,\n    useExtrapolation,\n    needRoiInput,\n    nearestMode,\n    cubicCoefficientA,\n    excludeOutside,\n    useNearest2xOptimization,\n    roiInputIdx,\n    scalesInputIdx,\n    sizesInputIdx\n  });\n};\n\nconst createUpsampleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [inputWidth, inputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(inputs[0].dims, TextureType.unpacked);\n\n      const outputShape = inputs[0].dims.map((dim, i) => Math.floor(dim * attributes.scales[i]));\n      const [outputWidth, outputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(outputShape, TextureType.unpacked);\n      const dim = outputShape.length;\n\n      const outputPitches = new Array<number>(dim);\n      const inputPitches = new Array<number>(dim);\n      let precalculatedPitches = `\n      int output_pitches[${dim}];\n      int input_pitches[${dim}];\n      `;\n      for (let d = dim - 1; d >= 0; d--) {\n        outputPitches[d] = (d === dim - 1) ? 1 : outputPitches[d + 1] * outputShape[d + 1];\n        inputPitches[d] = (d === dim - 1) ? 1 : inputPitches[d + 1] * inputs[0].dims[d + 1];\n\n        precalculatedPitches += `\n        output_pitches[${d}] = ${outputPitches[d]};\n        input_pitches[${d}] = ${inputPitches[d]};\n        `;\n      }\n      const getInputFloatFunction = `\n      float getInputFloat(int index) {\n        vec2 coords = offsetToCoords(index, ${inputWidth}, ${inputHeight});\n        float value = getColorAsFloat(${glsl.texture2D}(X, coords));\n        return value;\n      }\n      `;\n\n      const shaderSource = attributes.mode === 'nearest' ?\n          // nearest\n          `\n    ${getInputFloatFunction}\n    float process(int indices[${dim}]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int d, m;\n      for (int dim = 0; dim < ${dim}; ++dim) {\n        d = output_index / output_pitches[dim];\n        m = output_index - d * output_pitches[dim];\n        output_index = m;\n\n        if (scales[dim] != 1 && d > 0) {\n          int d2 = d / scales[dim];\n          m = d - d2 * scales[dim];\n          d = d2;\n        }\n        input_index += input_pitches[dim] * d;\n      }\n\n      return getInputFloat(input_index);\n    }` :\n          dim === 4 ?\n          // bilinear 4D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[4]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1, index_of_dim2, index_of_dim3;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m / output_pitches[1];\n      m = m - index_of_dim1 * output_pitches[1];\n      index_of_dim2 = m / output_pitches[2];\n      m = m - index_of_dim2 * output_pitches[2];\n      index_of_dim3 = m;\n\n      int index_of_input_dim2, index_of_input_dim3, x_offset, y_offset;\n      index_of_input_dim2 = index_of_dim2 / scales[2];\n      y_offset = index_of_dim2 - index_of_input_dim2 * scales[2];\n      index_of_input_dim3 = index_of_dim3 / scales[3];\n      x_offset = index_of_dim3 - index_of_input_dim3 * scales[3];\n\n      input_index = index_of_dim0 * input_pitches[0] +\n            index_of_dim1 * input_pitches[1] +\n            index_of_input_dim2 * input_pitches[2] +\n            index_of_input_dim3;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim2 = false;\n      if (index_of_input_dim2 == (${inputs[0].dims[2]} - 1)) {\n        // It's the end in dimension 2\n        x01 = x00;\n        end_of_dim2 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[2]);\n      }\n\n      if (index_of_input_dim3 == (input_pitches[2] - 1)) {\n        // It's the end in dimension 3\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim2 ? x10 : getInputFloat(input_index + input_pitches[2] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[2]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[2]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[3]);\n    }` :\n              // bilinear 2D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[2]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m;\n\n      int index_of_input_dim0, index_of_input_dim1, x_offset, y_offset;\n      index_of_input_dim0 = index_of_dim0 / scales[0];\n      y_offset = index_of_dim0 - index_of_input_dim0 * scales[0];\n      index_of_input_dim1 = index_of_dim1 / scales[1];\n      x_offset = index_of_dim1 - index_of_input_dim1 * scales[1];\n\n      input_index = index_of_input_dim0 * input_pitches[0] + index_of_input_dim1;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim0 = false;\n      if (index_of_input_dim0 == (${inputs[0].dims[0]} - 1)) {\n        // It's the end in dimension 0\n        x01 = x00;\n        end_of_dim0 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[0]);\n      }\n\n      if (index_of_input_dim1 == (input_pitches[0] - 1)) {\n        // It's the end in dimension 1\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim0 ? x10 : getInputFloat(input_index + input_pitches[0] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[0]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[0]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[1]);\n    }`;\n      return {\n        ...upsampleProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        variables: [{\n          name: 'scales',\n          type: 'int',\n          arrayLength: attributes.scales.length,\n          data: attributes.scales.map(x => Math.ceil(x))\n        }]\n      };\n    };\n\nexport const validateInputs = (inputs: Tensor[], attribute: UpsampleAttributes): void => {\n  if (!inputs || (attribute.opset < 9 && inputs.length !== 1) ||\n      (attribute.opset >= 9 && attribute.opset < 11 && inputs.length !== 2) ||\n      (attribute.opset >= 11 && inputs.length < 2)) {\n    throw new Error('invalid inputs.');\n  }\n\n  if (attribute.scales.length > 0 && inputs[0].dims.length !== attribute.scales.length) {\n    throw new Error('Invalid input shape.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input tensor types.');\n  }\n};\n\nexport const scalesValidation = (scales: number[], mode: string, isResize: boolean): void => {\n  if (!isResize) {\n    for (const scale of scales) {\n      if (scale < 1) {\n        throw new Error('Scale value should be greater than or equal to 1.');\n      }\n    }\n  } else {\n    for (const scale of scales) {\n      if (scale <= 0) {\n        throw new Error('Scale value should be greater than 0.');\n      }\n    }\n  }\n  if (mode === 'linear' || mode === 'cubic') {\n    if (scales.length !== 2 && (scales.length !== 4 || scales[0] !== 1 || scales[1] !== 1)) {\n      throw new Error(`'Linear' mode and 'Cubic' mode only support 2-D inputs ('Bilinear', 'Bicubic') \\\n        or 4-D inputs with the corresponding outermost 2 scale values being 1 \\\n        in the ${isResize ? 'Resize' : 'Upsample'} opeartor.`);\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {Logger, Profiler} from '../../instrument';\n\nimport {GlslPreprocessor} from './glsl-preprocessor';\nimport {getVertexShaderSource} from './glsl-source';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {Artifact, ProgramInfo, ProgramVariable, TextureData, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * ProgramManager is the main class behind running computations\n * It builds ProgramInfo's into Artifacts\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\n * Uses the artifact to run the computation by calling Draw on\n * the WebGL drawing buffer\n * ProgramManager automatically maps (binds) input variables to their\n * corresponding Location's in the binary program\n */\nexport class ProgramManager {\n  repo: Map<unknown, Artifact>;  // this should be per-session object\n  vertexShader: WebGLShader;\n  attributesBound: boolean;\n\n  constructor(\n      public profiler: Readonly<Profiler>, public glContext: WebGLContext,\n      public textureLayoutStrategy: TextureLayoutStrategy) {\n    this.repo = new Map();\n    this.attributesBound = false;\n  }\n  getArtifact(key: unknown): Artifact|undefined {\n    return this.repo.get(key);\n  }\n  setArtifact(key: unknown, artifact: Artifact): void {\n    this.repo.set(key, artifact);\n  }\n  run(buildArtifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    this.profiler.event('op', `ProgramManager.run ${buildArtifact.programInfo.name ?? 'unknown kernel'}`, () => {\n      const gl = this.glContext.gl;\n      const program = buildArtifact.program;\n      gl.useProgram(program);\n      try {\n        this.bindOutput(output);\n        if (!this.attributesBound) {\n          this.bindAttributes(buildArtifact.attribLocations);\n        }\n        this.bindUniforms(buildArtifact.uniformLocations, buildArtifact.programInfo.variables ?? [], inputs);\n      } catch (err) {\n        Logger.error('ProgramManager', buildArtifact.programInfo.shaderSource);\n        throw err;\n      }\n      this.profiler.event('backend', 'GlContext.draw()', () => {\n        this.glContext.draw();\n      });\n    }, this.glContext);\n  }\n  dispose(): void {\n    if (this.vertexShader) {\n      this.glContext.deleteShader(this.vertexShader);\n    }\n    this.repo.forEach(a => this.glContext.deleteProgram(a.program));\n  }\n  build(programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[], outputTextureLayout: TextureLayout): Artifact {\n    return this.profiler.event('backend', 'ProgramManager.build', () => {\n      const preprocessor = new GlslPreprocessor(this.glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n      const fragScript = preprocessor.preprocess();\n      const program = this.compile(fragScript);\n      const artifact = {\n        programInfo,\n        program,\n        uniformLocations: this.getUniformLocations(\n            program, preprocessor.context.programInfo.inputNames, preprocessor.context.programInfo.variables),\n        attribLocations: this.getAttribLocations(program)\n      };\n      return artifact;\n    });\n  }\n  protected compile(fragShaderScript: string): WebGLProgram {\n    if (!this.vertexShader) {\n      Logger.verbose('ProrgramManager', 'Compiling and caching Vertex shader for the first time');\n      const vertexShaderScript = getVertexShaderSource(this.glContext.version);\n      this.vertexShader = this.glContext.compileShader(vertexShaderScript, this.glContext.gl.VERTEX_SHADER);\n    }\n    if (env.debug) {\n      Logger.verbose('ProrgramManager', `FragShader:\n${fragShaderScript}\n`);\n    }\n    const fragShader = this.glContext.compileShader(fragShaderScript, this.glContext.gl.FRAGMENT_SHADER);\n    const program = this.glContext.createProgram(this.vertexShader, fragShader);\n    this.glContext.deleteShader(fragShader);\n    return program;\n  }\n  bindOutput(td: TextureData): void {\n    const width = td.width;\n    const height = td.height;\n    Logger.verbose(\n        'ProrgramManager',\n        `Binding output texture to Framebuffer: w/h=${width}/${height}, shape=${td.shape}, type=${td.tensor.type}`);\n    this.glContext.attachFramebuffer(td.texture, width, height);\n  }\n  bindAttributes(attribLocations: Artifact.AttribLocations): void {\n    const positionHandle = attribLocations.position;\n    const textureCoordHandle = attribLocations.textureCoord;\n    this.glContext.setVertexAttributes(positionHandle, textureCoordHandle);\n    this.attributesBound = true;\n  }\n  bindUniforms(uniformLocations: Artifact.UniformLocations, variables: ProgramVariable[], textures: TextureData[]):\n      void {\n    const gl = this.glContext.gl;\n    let texturePosition = 0;\n    for (const {name, type, location, arrayLength} of uniformLocations) {\n      const value = variables.find(v => v.name === name)?.data;\n      if (type !== 'sampler2D' && !value) {\n        throw new Error(`variable '${name}' does not have data defined in program info`);\n      }\n      switch (type) {\n        case 'sampler2D':\n          this.bindTexture(textures[texturePosition], location, texturePosition);\n          texturePosition++;\n          break;\n        case 'float':\n          if (arrayLength) {\n            gl.uniform1fv(location, value as number[]);\n          } else {\n            gl.uniform1f(location, value as number);\n          }\n          break;\n        case 'int':\n          if (arrayLength) {\n            gl.uniform1iv(location, value as number[]);\n          } else {\n            gl.uniform1i(location, value as number);\n          }\n          break;\n        default:\n          throw new Error(`Uniform not implemented: ${type}`);\n      }\n    }\n  }\n  bindTexture(td: TextureData, uniformHandle: WebGLUniformLocation, position: number): void {\n    this.glContext.bindTextureToUniform(td.texture, position, uniformHandle);\n  }\n  getAttribLocations(program: WebGLProgram): Artifact.AttribLocations {\n    return {\n      position: this.getAttribLocation(program, 'position'),\n      textureCoord: this.getAttribLocation(program, 'textureCoord')\n    };\n  }\n  getUniformLocations(program: WebGLProgram, samplers?: string[], variables?: VariableInfo[]):\n      Artifact.UniformLocations {\n    const uniformLocations: Artifact.UniformLocations = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLocations.push({name: sampler, type: 'sampler2D', location: this.getUniformLocation(program, sampler)});\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLocations.push({...variable, location: this.getUniformLocation(program, variable.name)});\n      }\n    }\n    return uniformLocations;\n  }\n  getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation {\n    const gl = this.glContext.gl;\n    const reference = gl.getUniformLocation(program, name);\n    if (reference === null) {\n      throw new Error(`Uniform ${name} not found.`);\n    }\n    return reference;\n  }\n  getAttribLocation(program: WebGLProgram, name: string): number {\n    const gl = this.glContext.gl;\n    const attributeLocation: number = gl.getAttribLocation(program, name);\n    return attributeLocation;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from '../../backend';\nimport {Graph} from '../../graph';\nimport {Logger} from '../../instrument';\nimport {Operator} from '../../operators';\nimport {OpSet, resolveOperator} from '../../opset';\nimport {Session} from '../../session';\nimport {Tensor} from '../../tensor';\nimport {WebGLBackend} from '../backend-webgl';\n\nimport {WebGLInferenceHandler} from './inference-handler';\nimport {WEBGL_OP_RESOLVE_RULES} from './op-resolve-rules';\nimport {ProgramManager} from './program-manager';\nimport {PreferLogicalStrategy, TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureManager} from './texture-manager';\nimport {TextureData} from './types';\n\nexport class WebGLSessionHandler implements SessionHandler {\n  programManager: ProgramManager;\n  textureManager: TextureManager;\n  layoutStrategy: TextureLayoutStrategy;\n  packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  pack2unpackMap: Map<Tensor.Id, Tensor.Id>;\n  unpack2packMap: Map<Tensor.Id, Tensor.Id>;\n  initializers: Set<Tensor.Id>;\n  pack?: boolean;\n\n  constructor(public readonly backend: WebGLBackend, public readonly context: Session.Context) {\n    this.layoutStrategy = new PreferLogicalStrategy(backend.glContext.maxTextureSize);\n    this.programManager = new ProgramManager(this.context.profiler, backend.glContext, this.layoutStrategy);\n    this.textureManager = new TextureManager(\n        backend.glContext, this.layoutStrategy, this.context.profiler,\n        {reuseTextures: backend.textureCacheMode === 'full'});\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n    this.pack = backend.pack;\n    this.pack2unpackMap = new Map();\n    this.unpack2packMap = new Map();\n  }\n\n  createInferenceHandler() {\n    return new WebGLInferenceHandler(this);\n  }\n  onGraphInitialized(graph: Graph): void {\n    const initializers = graph.getValues().filter(v => v.from === -1 && v.tensor).map(v => v.tensor!.dataId);\n    this.initializers = new Set(initializers);\n  }\n  isInitializer(tensorId: Tensor.Id): boolean {\n    return this.initializers ? this.initializers.has(tensorId) : false;\n  }\n  addInitializer(tensorId: Tensor.Id): void {\n    this.initializers.add(tensorId);\n  }\n  getTextureData(tensorId: Tensor.Id, isPacked: boolean): TextureData|undefined {\n    if (isPacked) {\n      return this.packedTextureDataCache.get(tensorId);\n    } else {\n      return this.unpackedTextureDataCache.get(tensorId);\n    }\n  }\n  setTextureData(tensorId: Tensor.Id, textureData: TextureData, isPacked = false): void {\n    Logger.verbose('WebGLSessionHandler', 'Storing Texture data in cache');\n    if (isPacked) {\n      this.packedTextureDataCache.set(tensorId, textureData);\n    } else {\n      this.unpackedTextureDataCache.set(tensorId, textureData);\n    }\n  }\n  dispose(): void {\n    this.programManager.dispose();\n    this.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.unpackedTextureDataCache = new Map();\n  }\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator {\n    const op = resolveOperator(node, opsets, WEBGL_OP_RESOLVE_RULES);\n    return {impl: op.opImpl, context: op.opInit ? op.opInit(node, graph) : node};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nexport declare namespace Encoder {\n  export interface DataTypeMap {\n    float: Float32Array;\n    byte: Uint8Array;\n    int: Uint32Array;\n  }\n  export type DataType = keyof DataTypeMap;\n  type DataArrayType = DataTypeMap[DataType];\n\n  /* eslint-disable @typescript-eslint/naming-convention */\n  export const enum Usage {\n    Default = 0,\n    UploadOnly,\n    Download4BytesAsFloat32,\n  }\n}\n\n/**\n * Abstraction for mapping data types to texture texlets\n * Encoding means how a Float32 is mapped to 1 or 4 channels for each texlet\n * Decoding means how a texlet's channels are mapped to a resulting Float32\n */\nexport interface DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType;\n  allocate(size: number): Encoder.DataArrayType;\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Encoder.DataArrayType;\n}\n/**\n * WebGL2 data encoder\n * Uses R32F as the format for texlet\n */\nexport class RedFloat32DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGL2RenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.R32F;\n      this.format = gl.RED;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA32F;\n      this.format = gl.RGBA;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType {\n    let result: Float32Array;\n    let source: Float32Array;\n    if (src.constructor !== Float32Array) {\n      Logger.warning('Encoder', 'data was not of type Float32; creating new Float32Array');\n      source = new Float32Array(src);\n    }\n    if (textureSize * this.channelSize > src.length) {\n      Logger.warning('Encoder', 'Source data too small. Allocating larger array');\n      source = src as Float32Array;\n      result = this.allocate(textureSize * this.channelSize) as Float32Array;\n      source.forEach((v, i) => result[i] = v);\n    } else {\n      source = src as Float32Array;\n      result = source;\n    }\n    return result;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n/**\n * Data encoder for WebGL 1 with support for floating point texture\n */\nexport class RGBAFloatDataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGLRenderingContext, channels = 1, textureType?: number) {\n    if (channels !== 1 && channels !== 4) {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n    this.internalFormat = gl.RGBA;\n    this.format = gl.RGBA;\n    this.channelSize = channels;\n    this.textureType = textureType || gl.FLOAT;\n  }\n  encode(src: Float32Array, textureSize: number): Encoder.DataArrayType {\n    let dest = src;\n    if (this.channelSize === 1) {\n      Logger.verbose('Encoder', 'Exploding into a larger array');\n      dest = this.allocate(textureSize) as Float32Array;\n      src.forEach((v, i) => dest[i * 4] = v);\n    }\n    return dest;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n\nexport class Uint8DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize = 4;\n  constructor(gl: WebGLRenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.ALPHA;\n      this.format = gl.ALPHA;  // not tested\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA;\n      this.format = gl.RGBA;\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Uint8Array, _textureSize: number): Encoder.DataArrayType {\n    return new Uint8Array(src.buffer, src.byteOffset, src.byteLength);\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Uint8Array(size * this.channelSize);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Uint8Array {\n    if (buffer instanceof Uint8Array) {\n      return buffer.subarray(0, dataSize);\n    }\n    throw new Error(`Invalid array type: ${buffer.constructor}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\nimport {assert} from '../../util';\n\n/** Layout preferences */\nexport interface WidthHeightPrefs {\n  breakAxis?: number;\n  isPacked?: boolean;\n  reverseWH?: boolean;\n}\n/**\n * TextureLayoutStrategy is an abstraction for different plans\n * for mapping n-dimensional arrays to 2D textures (and back)\n */\nexport interface TextureLayoutStrategy {\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number];\n}\n\n/**\n * This strategy try to find the minimal max(W,H) that fulfills (W * H == totalSize)\n */\nexport class AlwaysKeepOriginalSizeStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    // scalar tensor\n    if (shape.length === 0) {\n      return [1, 1];\n    }\n    const maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    const totalSize = shape.reduce((a, b) => a * b);\n\n    let width = Math.floor(Math.sqrt(totalSize));\n\n    for (; width < maxTextureSize && width < totalSize; width++) {\n      if (totalSize % width === 0) {\n        break;\n      }\n    }\n\n    if (width >= maxTextureSize || totalSize % width !== 0) {\n      throw new Error(`The given dimensions are outside this GPU's boundaries: ${shape}`);\n    }\n    return [width, totalSize / width];\n  }\n}\n\nexport class PreferLogicalStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const wh = this.computeTexture(shape, prefs);\n    if (prefs && prefs.isPacked) {\n      wh[0] /= 2;\n      wh[1] /= 2;\n    }\n    if (prefs && prefs.reverseWH) {\n      return [wh[1], wh[0]];\n    }\n    return wh;\n  }\n\n  computeTexture(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const isPacked = prefs && prefs.isPacked;\n    // scalar tensor\n    if (shape.length === 0) {\n      return isPacked ? [2, 2] : [1, 1];\n    }\n    let maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    let logShape = shape.slice(0);\n    if (isPacked) {\n      maxTextureSize = maxTextureSize * 2;\n\n      // This logic ensures we accurately count the number of packed texels needed\n      // to accommodate the tensor. We can only pack values in the same texel if\n      // they are from adjacent pairs of rows/cols within the same batch. So if a\n      // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n      // fact that the texels containing the third row are half empty.\n      logShape = logShape.map(\n          (d, i) => i >= logShape.length - 2 ? (logShape[i] % 2 === 0 ? logShape[i] : logShape[i] + 1) : logShape[i]);\n\n      // Packed texture height is at least 2 (the channel height of a single\n      // texel).\n      if (logShape.length === 1) {\n        logShape = [2, logShape[0]];\n      }\n    }\n\n    // If logical shape is 2, we don't squeeze, since we want to match physical.\n    if (logShape.length !== 2) {\n      const squeezeResult = squeezeShape(logShape);\n      logShape = squeezeResult.newShape;\n    }\n\n    const size = sizeFromShape(logShape);\n    if (logShape.length <= 1 && size <= maxTextureSize) {\n      return [1, size];\n    } else if (logShape.length === 2 && logShape[0] <= maxTextureSize && logShape[1] <= maxTextureSize) {\n      return logShape as [number, number];\n    } else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTextureSize && logShape[2] <= maxTextureSize) {\n      return [logShape[0] * logShape[1], logShape[2]];\n    } else if (logShape.length === 3 && logShape[0] <= maxTextureSize && logShape[1] * logShape[2] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2]];\n    } else if (\n        logShape.length === 4 && logShape[0] * logShape[1] * logShape[2] <= maxTextureSize &&\n        logShape[3] <= maxTextureSize) {\n      return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n    } else if (\n        logShape.length === 4 && logShape[0] <= maxTextureSize &&\n        logShape[1] * logShape[2] * logShape[3] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n    } else {\n      if (isPacked) {\n        // For packed textures size equals the number of channels required to\n        // accommodate the texture data. However in order to squarify such that\n        // inner dimensions stay even, we rewrite size to equal the number of\n        // texels. Then in the return statement we rehydrate the squarified\n        // dimensions to channel units.\n        return sizeToSquarishShape(size / 4).map(d => d * 2) as [number, number];\n      }\n      return sizeToSquarishShape(size);\n    }\n  }\n}\n\nexport function squeezeShape(shape: number[], axis?: number[]): {newShape: number[]; keptDims: number[]} {\n  const newShape: number[] = [];\n  const keptDims: number[] = [];\n  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\n  const axes = (axis == null || isEmptyArray) ? null : parseAxisParam(axis, shape).sort();\n  let j = 0;\n  for (let i = 0; i < shape.length; ++i) {\n    if (axes != null) {\n      if (axes[j] === i && shape[i] !== 1) {\n        throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\n      }\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\n        newShape.push(shape[i]);\n        keptDims.push(i);\n      }\n      if (axes[j] <= i) {\n        j++;\n      }\n    }\n    if (shape[i] !== 1) {\n      newShape.push(shape[i]);\n      keptDims.push(i);\n    }\n  }\n  return {newShape, keptDims};\n}\n\nexport function parseAxisParam(axis: number|number[], shape: number[]): number[] {\n  const rank = shape.length;\n\n  // Normalize input\n  axis = axis == null ? shape.map((s, i) => i) : ([] as number[]).concat(axis);\n\n  // Check for valid range\n  assert(\n      axis.every(ax => ax >= -rank && ax < rank),\n      () => `All values in axis param must be in range [-${rank}, ${rank}) but ` +\n          `got axis ${axis}`);\n\n  // Check for only integers\n  assert(\n      axis.every(isInt),\n      () => 'All values in axis param must be integers but ' +\n          `got axis ${axis}`);\n\n  // Handle negative axis.\n  return axis.map(a => a < 0 ? rank + a : a);\n}\nexport function isInt(a: number): boolean {\n  return a % 1 === 0;\n}\nexport function sizeFromShape(shape: number[]): number {\n  if (shape.length === 0) {\n    // Scalar.\n    return 1;\n  }\n  let size = shape[0];\n  for (let i = 1; i < shape.length; i++) {\n    size *= shape[i];\n  }\n  return size;\n}\nexport function getRowsCols(shape: number[]): [number, number] {\n  if (shape.length === 0) {\n    throw Error('Cannot get rows and columns of an empty shape array.');\n  }\n\n  return [shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\nexport function sizeToSquarishShape(size: number): [number, number] {\n  const width = Math.ceil(Math.sqrt(size));\n  return [width, Math.ceil(size / width)];\n}\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\n  return sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ShapeUtil} from '../../util';\n\nimport {TextureLayoutStrategy, WidthHeightPrefs} from './texture-layout-strategy';\nimport {TextureLayout, TextureType} from './types';\n\nexport const createTextureLayoutFromTextureType =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[],\n     textureType: TextureType): TextureLayout => {\n      const channel = (textureType === TextureType.unpacked || textureType === TextureType.unpackedReversed) ? 1 : 4;\n      const isPacked = textureType === TextureType.packed;\n      const reverseWH = (textureType === TextureType.unpackedReversed || textureType === TextureType.packed);\n      const breakAxis = textureType === TextureType.packedLastDimension ? shape.length - 1 : undefined;\n      const unpackedShape = textureType === TextureType.packedLastDimension ?\n          shape.map((d, i) => i === shape.length - 1 ? d * 4 : d) :\n          undefined;\n      return createTextureLayoutFromShape(\n          textureLayoutStrategy, shape, channel, unpackedShape, {isPacked, reverseWH, breakAxis});\n    };\n\nexport const calculateTextureWidthAndHeight =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], textureType: TextureType):\n        [number, number] => {\n          const layout = createTextureLayoutFromTextureType(textureLayoutStrategy, shape, textureType);\n          return [layout.width, layout.height];\n        };\n\n/**\n * Create a TextureLayout object from shape.\n */\nexport const createTextureLayoutFromShape =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], channels: 1|4 = 1,\n     unpackedShape?: readonly number[], prefs?: WidthHeightPrefs): TextureLayout => {\n      const isPacked = !!(prefs && prefs.isPacked);\n      const [width, height] = textureLayoutStrategy.computeTextureWH(isPacked ? unpackedShape || shape : shape, prefs);\n      const rank = shape.length;\n      let inferredDims = shape.slice(0);\n      if (rank === 0) {\n        inferredDims = [1];\n      }\n      if (channels === 1) {\n        // unpackedShape will take `shape` and not `inferredDims` so as to create a scalar Tensor if need be\n        unpackedShape = shape;\n      } else if (isPacked) {\n        if (channels !== 4) {\n          throw new Error('a packed texture must be 4-channel');\n        }\n        unpackedShape = shape;\n        if (rank > 0) {\n          inferredDims[rank - 1] = Math.ceil(inferredDims[rank - 1] / 2);\n        }\n        if (rank > 1) {\n          inferredDims[rank - 2] = Math.ceil(inferredDims[rank - 2] / 2);\n        }\n      } else if (!unpackedShape) {\n        throw new Error('Unpacked shape is needed when using channels > 1');\n      }\n      return {\n        width,\n        height,\n        channels,\n        isPacked,\n        shape: inferredDims,\n        strides: ShapeUtil.computeStrides(inferredDims),\n        unpackedShape,\n        reversedWH: (prefs && prefs.reverseWH)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger, Profiler} from '../../instrument';\nimport {Tensor} from '../../tensor';\n\nimport {Encoder} from './texture-data-encoder';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureData, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\nexport interface TextureManagerConfig {\n  reuseTextures?: boolean;\n}\n\n/**\n * TextureManager is the mainly responsible for caching Textures\n * Textures are cached in 2 levels:\n *   1. the texures which are associated with a dataId (from Tensor)\n *    Caching these is crucial to performance. These are In-use Textures\n *   2. textures which are not in use by any current ProgramInfo/Tensor\n *     These are called Free Textures\n * TextureManager is also used to help creating textures. For this it\n * uses WebGLContext and TextureLayoutStrategy\n */\nexport class TextureManager {\n  private readonly inUseTextures: Map<string, WebGLTexture[]>;\n  private readonly idleTextures: Map<string, WebGLTexture[]>;\n  private readonly textureLookup: Map<WebGLTexture, string>;\n  private readonly pendingRead: Map<Tensor.Id, Array<(arr: Tensor.NumberType) => void>> = new Map();\n\n  constructor(\n      public glContext: WebGLContext, public layoutStrategy: TextureLayoutStrategy, public profiler: Readonly<Profiler>,\n      private config: TextureManagerConfig) {\n    if (config.reuseTextures) {\n      this.inUseTextures = new Map();\n      this.idleTextures = new Map();\n      this.textureLookup = new Map();\n    }\n  }\n  createTextureFromLayout(\n      dataType: Tensor.DataType, layout: TextureLayout, data?: Tensor.NumberType, usage?: Encoder.Usage) {\n    const textureDataType = this.toEncoderType(dataType);\n\n    const encoder = this.glContext.getEncoder(textureDataType, layout.channels || 1, usage);\n    if (layout.isPacked && usage === Encoder.Usage.UploadOnly) {\n      throw new Error('not implemented');\n    }\n    const width = layout.width;\n    const height = layout.height;\n\n    let key: string|undefined;\n    let inUseTextures: WebGLTexture[]|undefined;\n    if (this.config.reuseTextures) {\n      key = `${width}x${height}_${encoder.format}_${encoder.internalFormat}_${encoder.textureType}`;\n      inUseTextures = this.inUseTextures.get(key);\n      if (!inUseTextures) {\n        inUseTextures = [];\n        this.inUseTextures.set(key, inUseTextures);\n      }\n\n      const idleTextures = this.idleTextures.get(key);\n      if (idleTextures && idleTextures.length > 0) {\n        const texture = idleTextures.pop()!;\n        inUseTextures.push(texture);\n        if (usage === Encoder.Usage.UploadOnly) {\n          this.glContext.updateTexture(texture, width, height, encoder, this.toTextureData(dataType, data)!);\n        }\n        return texture;\n      }\n    }\n\n    Logger.verbose('TextureManager', `Creating new texture of size ${layout.width}x${layout.height}`);\n    const texture = this.glContext.allocateTexture(width, height, encoder, this.toTextureData(dataType, data));\n\n    if (this.config.reuseTextures) {\n      inUseTextures!.push(texture);\n      this.textureLookup.set(texture, key!);\n    }\n    return texture;\n  }\n  readTexture(td: TextureData, dataType: Tensor.DataType, channels?: number): Tensor.NumberType {\n    if (!channels) {\n      channels = 1;\n    }\n    return this.profiler.event('backend', 'TextureManager.readTexture', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      return this.toTensorData(dataType, data);\n    });\n  }\n  async readTextureAsync(td: TextureData, dataType: Tensor.DataType, channels?: number): Promise<Tensor.NumberType> {\n    const dataId = td.tensor.dataId;\n    if (!channels) {\n      channels = 1;\n    }\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<Tensor.NumberType>(resolve => subscribers?.push(resolve));\n    }\n    return this.profiler.event('backend', 'TextureManager.readTextureAsync', async () => {\n      this.pendingRead.set(dataId, []);\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      // add a fence waiting for the data to be ready\n      await this.glContext.createAndWaitForFence();\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      const tensorData = this.toTensorData(dataType, data);\n      const subscribers = this.pendingRead.get(dataId);\n      this.pendingRead.delete(dataId);\n      subscribers?.forEach(resolve => resolve(tensorData));\n      return tensorData;\n    });\n  }\n  readUint8TextureAsFloat(td: TextureData): Float32Array {\n    return this.profiler.event('backend', 'TextureManager.readUint8TextureAsFloat', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b);\n      const data = this.glContext.readTexture(td.texture, td.width, td.height, dataSize * 4, 'byte', 4);\n      return new Float32Array(data.buffer, data.byteOffset, dataSize);\n    });\n  }\n  releaseTexture(textureData: TextureData, deleteTexture?: boolean): void {\n    let key: string|undefined;\n    if (this.config.reuseTextures) {\n      key = this.textureLookup.get(textureData.texture);\n      if (key) {\n        if (deleteTexture) {\n          this.textureLookup.delete(key);\n        }\n        const inUseTextures = this.inUseTextures.get(key);\n        if (inUseTextures) {\n          const index = inUseTextures.indexOf(textureData.texture);\n          if (index !== -1) {\n            inUseTextures.splice(index, 1);\n            let idleTextures = this.idleTextures.get(key);\n            if (!idleTextures) {\n              idleTextures = [];\n              this.idleTextures.set(key, idleTextures);\n            }\n            idleTextures.push(textureData.texture);\n          }\n        }\n      }\n    }\n\n    if (!key || deleteTexture) {\n      Logger.verbose('TextureManager', `Deleting texture of size ${textureData.width}x${textureData.height}`);\n      this.glContext.deleteTexture(textureData.texture);\n    }\n  }\n  toTensorData(dataType: Tensor.DataType, data: Encoder.DataArrayType): Tensor.NumberType {\n    switch (dataType) {\n      case 'int16':\n        return data instanceof Int16Array ? data : Int16Array.from(data);\n      case 'int32':\n        return data instanceof Int32Array ? data : Int32Array.from(data);\n      case 'int8':\n        return data instanceof Int8Array ? data : Int8Array.from(data);\n      case 'uint16':\n        return data instanceof Uint16Array ? data : Uint16Array.from(data);\n      case 'uint32':\n        return data instanceof Uint32Array ? data : Uint32Array.from(data);\n      case 'uint8':\n      case 'bool':\n        return data instanceof Uint8Array ? data : Uint8Array.from(data);\n      case 'float32':\n        return data instanceof Float32Array ? data : Float32Array.from(data);\n      case 'float64':\n        return data instanceof Float64Array ? data : Float64Array.from(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n  }\n  toTextureData(dataType: Tensor.DataType, data: Tensor.NumberType|undefined): Encoder.DataArrayType|undefined {\n    if (!data) {\n      return undefined;\n    }\n    return (data instanceof Float32Array) ? data : new Float32Array(data);\n    /*\n    switch (dataType) {\n      case 'int16':\n      case 'int32':\n      case 'uint16':\n      case 'uint32':\n        return (data.constructor === Uint32Array) ? data as Uint32Array : new Uint32Array(data);\n      case 'int8':\n      case 'uint8':\n      case 'bool':\n        return (data.constructor === Uint8Array) ? data as Uint8Array : new Uint8Array(data);\n      case 'float32':\n      case 'float64':\n        return (data.constructor === Float32Array) ? data as Float32Array : new Float32Array(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n    */\n  }\n  toEncoderType(_dataType: Tensor.DataType): Encoder.DataType {\n    return 'float';\n    // switch (dataType) {\n    //   case 'int16':\n    //   case 'int32':\n    //   case 'uint16':\n    //   case 'uint32':\n    //     return 'int';\n    //   case 'uint8':\n    //   case 'bool':\n    //     return 'byte';\n    //   case 'float32':\n    //   case 'float64':\n    //     return 'float';\n    //   default:\n    //     throw new Error(`TensorData type ${dataType} is not supported`);\n    // }\n  }\n  clearActiveTextures(): void {\n    this.glContext.clearActiveTextures();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../tensor';\n\n/**\n * Layout info is used for mapping n-dimensional array to 2D textures\n * The layout is created by the TextureLayoutStrategy based on\n * the Tensor's dimensions and strides\n */\nexport interface TextureLayout {\n  width: number;\n  height: number;\n  /**\n   * specify the number of value that encoded in a single pixel\n   */\n  channels: 1|2|3|4;\n  /**\n   * whether in packed mode or not\n   */\n  isPacked?: boolean;\n  /**\n   * the normalized shape\n   */\n  shape: readonly number[];\n  /**\n   * the stride of each dimensions, calculated according to shape\n   */\n  strides: readonly number[];\n  /**\n   * the original shape(dims) of the corresponding tensor\n   */\n  unpackedShape: readonly number[];\n\n  reversedWH?: boolean;\n}\nexport interface TextureData extends TextureLayout {\n  tensor: Tensor;\n  texture: WebGLTexture;\n}\n\nexport enum TextureType {\n  unpacked,              // <-- normal unpacked texture\n  unpackedReversed,      // <-- unpacked texture used in old ONNX.js implementation (deprecated)\n  packed,                // <-- normal packed texture\n  downloadUint8AsFloat,  // <-- ONLY used in texture downloading for iOS devices\n  packedLastDimension    // <-- ONLY used in old ONNX.js Conv implementation for input W (deprecated)\n}\n\nexport interface TensorInfo {\n  id?: Tensor.Id;\n  dims: readonly number[];\n  type: Tensor.DataType;\n  textureType: TextureType;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * A set of metadata of a shader program.\n */\nexport interface ProgramMetadata {\n  /**\n   * the name of the program. used for debugging and profiling\n   */\n  name: string;\n  /**\n   * texture types for each input\n   */\n  inputTypes: TextureType[];\n  /**\n   * names of each input\n   */\n  inputNames: string[];\n  /**\n   * an optional string as a cache hint in the artifact cache\n   */\n  cacheHint?: string;\n}\n\n/**\n * A ProgramInfoLoader allows\n */\nexport interface ProgramInfoLoader extends ProgramMetadata {\n  /**\n   * a function to get the program info\n   */\n  get(): ProgramInfo;\n}\n\n/**\n * A set of data that represent a shader program\n */\nexport interface ProgramInfo extends ProgramMetadata {\n  /**\n   * information of uniform variables\n   */\n  variables?: ProgramVariable[];\n  /**\n   * tensor info for output\n   */\n  output: TensorInfo;\n  /**\n   * the shader's processing source code\n   */\n  shaderSource: string;\n  /**\n   * whether the shader source contains a customized main function implementation\n   */\n  hasMain?: boolean;\n}\n\nexport interface VariableInfo {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * Information of uniforms that shader uses\n */\nexport interface UniformInfo {\n  type: 'sampler2D'|VariableInfo['type'];\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface UniformLocation extends UniformInfo {\n  location: WebGLUniformLocation;\n}\n\n/**\n * Artifact is the result of compilation\n * It does not contain input of output data\n * However anything that could be run as a \"program\"\n */\nexport interface Artifact {\n  programInfo: ProgramInfo;\n  program: WebGLProgram;\n  uniformLocations: UniformLocation[];\n  attribLocations: {position: number; textureCoord: number};\n}\nexport declare namespace Artifact {\n  type UniformLocations = Artifact['uniformLocations'];\n  type AttribLocations = Artifact['attribLocations'];\n}\n\nexport interface UniformData {\n  [name: string]: number|number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {assert} from '../../util';\n/**\n * Given a non RGBA shape calculate the R version\n * It is assumed that the dimensions are multiples of given channels\n * NOTE: it is always the last dim that gets packed.\n * @param unpackedShape original shape to create a packed version from\n */\nexport function getPackedShape(unpackedShape: readonly number[]): readonly number[] {\n  const len = unpackedShape.length;\n  return unpackedShape.slice(0, len - 1).concat(unpackedShape[len - 1] / 4);\n}\n\nexport async function repeatedTry(\n    checkFn: () => boolean, delayFn = (_counter: number) => 0, maxCounter?: number): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    let tryCount = 0;\n\n    const tryFn = () => {\n      if (checkFn()) {\n        resolve();\n        return;\n      }\n\n      tryCount++;\n\n      const nextBackoff = delayFn(tryCount);\n\n      if (maxCounter != null && tryCount >= maxCounter) {\n        reject();\n        return;\n      }\n      setTimeout(tryFn, nextBackoff);\n    };\n\n    tryFn();\n  });\n}\n\n/**\n * Generates the function name from an input sampler name.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerName(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1);\n}\n\n/**\n * Generates the function name from an input sampler name at output coordinates.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1) + 'AtOutCoords';\n}\n\n/** Returns a new input shape (a copy) that has a squeezed logical shape. */\nexport function squeezeInputShape(inputShape: readonly number[], squeezedShape: number[]): number[] {\n  // Deep copy.\n  let newInputShape: number[] = JSON.parse(JSON.stringify(inputShape));\n  newInputShape = squeezedShape;\n  return newInputShape;\n}\n\n/** Returns a list of squeezed parameters for shader functions */\nexport function getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n\n/** Returns the data type for different ranks. */\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\nexport function getGlChannels(rank = 6): string[] {\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nimport {WebGLContext} from './webgl-context';\n\nconst cache: {[contextId: string]: WebGLContext} = {};\n\n/**\n * This factory function creates proper WebGLRenderingContext based on\n * the current browsers capabilities\n * The order is from higher/most recent versions to most basic\n */\nexport function createWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\n  let context: WebGLContext|undefined;\n  if ((!contextId || contextId === 'webgl2') && 'webgl2' in cache) {\n    context = cache.webgl2;\n  } else if ((!contextId || contextId === 'webgl') && 'webgl' in cache) {\n    context = cache.webgl;\n  }\n\n  if (!context) {\n    try {\n      // try to create webgl context from an offscreen canvas\n      const offscreenCanvas = createOffscreenCanvas();\n      context = createNewWebGLContext(offscreenCanvas, contextId);\n    } catch (e) {\n      // if failed, fallback to try to use a normal canvas element\n      const canvas = createCanvas();\n      context = createNewWebGLContext(canvas, contextId);\n    }\n  }\n\n  contextId = contextId || context.version === 1 ? 'webgl' : 'webgl2';\n  const gl = context.gl;\n\n  cache[contextId] = context;\n\n  if (gl.isContextLost()) {\n    delete cache[contextId];\n    return createWebGLContext(contextId);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  return context;\n}\n\nexport function createNewWebGLContext(canvas: HTMLCanvasElement, contextId?: 'webgl'|'webgl2'): WebGLContext {\n  const contextAttributes: WebGLContextAttributes = {\n    alpha: false,\n    depth: false,\n    antialias: false,\n    stencil: false,\n    preserveDrawingBuffer: false,\n    premultipliedAlpha: false,\n    failIfMajorPerformanceCaveat: false\n  };\n  let gl: WebGLRenderingContext|null;\n  const ca = contextAttributes;\n  if (!contextId || contextId === 'webgl2') {\n    gl = canvas.getContext('webgl2', ca);\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 2);\n      } catch (err) {\n        Logger.warning('GlContextFactory', `failed to create WebGLContext using contextId 'webgl2'. Error: ${err}`);\n      }\n    }\n  }\n  if (!contextId || contextId === 'webgl') {\n    gl = canvas.getContext('webgl', ca) || canvas.getContext('experimental-webgl', ca) as WebGLRenderingContext;\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 1);\n      } catch (err) {\n        Logger.warning(\n            'GlContextFactory',\n            `failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: ${err}`);\n      }\n    }\n  }\n\n  throw new Error('WebGL is not supported');\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\ndeclare let OffscreenCanvas: {new (width: number, height: number): HTMLCanvasElement};\n\nfunction createCanvas(): HTMLCanvasElement {\n  if (typeof document === 'undefined') {\n    throw new TypeError('failed to create canvas: document is not supported');\n  }\n  const canvas: HTMLCanvasElement = document.createElement('canvas');\n  canvas.width = 1;\n  canvas.height = 1;\n  return canvas;\n}\n\nfunction createOffscreenCanvas(): HTMLCanvasElement {\n  if (typeof OffscreenCanvas === 'undefined') {\n    throw new TypeError('failed to create offscreen canvas: OffscreenCanvas is not supported');\n  }\n  return new OffscreenCanvas(1, 1);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport * as DataEncoders from './texture-data-encoder';\nimport {DataEncoder, Encoder} from './texture-data-encoder';\nimport {repeatedTry} from './utils';\n\nexport interface FenceContext {\n  query: WebGLSync|null;\n  isFencePassed(): boolean;\n}\n\ntype PollItem = {\n  isDoneFn: () => boolean; resolveFn: () => void;\n};\n\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n\n/**\n * Abstraction and wrapper around WebGLRenderingContext and its operations\n */\nexport class WebGLContext {\n  gl: WebGLRenderingContext;\n  version: 1|2;\n\n  private vertexbuffer: WebGLBuffer;\n  private framebuffer: WebGLFramebuffer;\n\n  // WebGL flags and vital parameters\n  private isFloatTextureAttachableToFrameBuffer: boolean;\n  isFloat32DownloadSupported: boolean;\n  isRenderFloat32Supported: boolean;\n  isBlendSupported: boolean;\n  maxTextureSize: number;\n  // private maxCombinedTextureImageUnits: number;\n  private maxTextureImageUnits: number;\n  // private maxCubeMapTextureSize: number;\n  // private shadingLanguageVersion: string;\n  // private webglVendor: string;\n  // private webglVersion: string;\n\n  // WebGL2 flags and vital parameters\n  // private max3DTextureSize: number;\n  // private maxArrayTextureLayers: number;\n  // private maxColorAttachments: number;\n  // private maxDrawBuffers: number;\n\n  // WebGL extensions\n  // eslint-disable-next-line camelcase\n  textureFloatExtension: OES_texture_float|null;\n  // eslint-disable-next-line camelcase\n  textureHalfFloatExtension: OES_texture_half_float|null;\n\n  // WebGL2 extensions\n  colorBufferFloatExtension: unknown|null;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  disjointTimerQueryWebgl2Extension: {TIME_ELAPSED_EXT: GLenum; GPU_DISJOINT_EXT: GLenum}|null;\n\n  private disposed: boolean;\n  private frameBufferBound = false;\n\n  constructor(gl: WebGLRenderingContext, version: 1|2) {\n    this.gl = gl;\n    this.version = version;\n\n    this.getExtensions();\n    this.vertexbuffer = this.createVertexbuffer();\n    this.framebuffer = this.createFramebuffer();\n    this.queryVitalParameters();\n  }\n\n  allocateTexture(width: number, height: number, encoder: DataEncoder, data?: Encoder.DataArrayType): WebGLTexture {\n    const gl = this.gl;\n    // create the texture\n    const texture = gl.createTexture();\n    // bind the texture so the following methods effect this texture.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    const buffer = data ? encoder.encode(data, width * height) : null;\n    gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,  // Level of detail.\n        encoder.internalFormat, width, height,\n        0,  // Always 0 in OpenGL ES.\n        encoder.format, encoder.textureType, buffer);\n    this.checkError();\n    return texture as WebGLTexture;\n  }\n  updateTexture(\n      texture: WebGLTexture, width: number, height: number, encoder: DataEncoder, data: Encoder.DataArrayType): void {\n    const gl = this.gl;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    const buffer = encoder.encode(data, width * height);\n    gl.texSubImage2D(\n        gl.TEXTURE_2D,\n        0,  // level\n        0,  // xoffset\n        0,  // yoffset\n        width, height, encoder.format, encoder.textureType, buffer);\n    this.checkError();\n  }\n  attachFramebuffer(texture: WebGLTexture, width: number, height: number): void {\n    const gl = this.gl;\n    // Make it the target for framebuffer operations - including rendering.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    this.checkError();\n    gl.viewport(0, 0, width, height);\n    gl.scissor(0, 0, width, height);\n  }\n  readTexture(\n      texture: WebGLTexture, width: number, height: number, dataSize: number, dataType: Encoder.DataType,\n      channels: number): Encoder.DataArrayType {\n    const gl = this.gl;\n    if (!channels) {\n      channels = 1;\n    }\n    if (!this.frameBufferBound) {\n      this.attachFramebuffer(texture, width, height);\n    }\n    const encoder = this.getEncoder(dataType, channels);\n    const buffer = encoder.allocate(width * height);\n    // bind texture to framebuffer\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    // TODO: Check if framebuffer is ready\n    gl.readPixels(0, 0, width, height, gl.RGBA, encoder.textureType, buffer);\n    this.checkError();\n    // unbind FB\n    return encoder.decode(buffer, dataSize);\n  }\n\n  isFramebufferReady(): boolean {\n    // TODO: Implement logic to check if the framebuffer is ready\n    return true;\n  }\n  getActiveTexture(): string {\n    const gl = this.gl;\n    const n = gl.getParameter(this.gl.ACTIVE_TEXTURE);\n    return `TEXTURE${(n - gl.TEXTURE0)}`;\n  }\n  getTextureBinding(): WebGLTexture {\n    return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);\n  }\n  getFramebufferBinding(): WebGLFramebuffer {\n    return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);\n  }\n  setVertexAttributes(positionHandle: number, textureCoordHandle: number): void {\n    const gl = this.gl;\n    gl.vertexAttribPointer(positionHandle, 3, gl.FLOAT, false, 20, 0);\n    gl.enableVertexAttribArray(positionHandle);\n    if (textureCoordHandle !== -1) {\n      gl.vertexAttribPointer(textureCoordHandle, 2, gl.FLOAT, false, 20, 12);\n      gl.enableVertexAttribArray(textureCoordHandle);\n    }\n    this.checkError();\n  }\n  createProgram(\n      vertexShader: WebGLShader,\n      fragShader: WebGLShader,\n      ): WebGLProgram {\n    const gl = this.gl;\n    const program = gl.createProgram()!;\n\n    // the program consists of our shaders\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragShader);\n    gl.linkProgram(program);\n    return program;\n  }\n  compileShader(shaderSource: string, shaderType: number): WebGLShader {\n    const gl = this.gl;\n    const shader = gl.createShader(shaderType);\n    if (!shader) {\n      throw new Error(`createShader() returned null with type ${shaderType}`);\n    }\n\n    gl.shaderSource(shader, shaderSource);\n    gl.compileShader(shader);\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\n      throw new Error(`Failed to compile shader: ${gl.getShaderInfoLog(shader)}\nShader source:\n${shaderSource}`);\n    }\n    return shader;\n  }\n  deleteShader(shader: WebGLShader): void {\n    this.gl.deleteShader(shader);\n  }\n  bindTextureToUniform(texture: WebGLTexture, position: number, uniformHandle: WebGLUniformLocation): void {\n    const gl = this.gl;\n    gl.activeTexture(gl.TEXTURE0 + position);\n    this.checkError();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    this.checkError();\n    gl.uniform1i(uniformHandle, position);\n    this.checkError();\n  }\n  draw(): void {\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\n    this.checkError();\n  }\n  checkError(): void {\n    if (env.debug) {\n      const gl = this.gl;\n      const error = gl.getError();\n      let label = '';\n      switch (error) {\n        case (gl.NO_ERROR):\n          return;\n        case (gl.INVALID_ENUM):\n          label = 'INVALID_ENUM';\n          break;\n        case (gl.INVALID_VALUE):\n          label = 'INVALID_VALUE';\n          break;\n        case (gl.INVALID_OPERATION):\n          label = 'INVALID_OPERATION';\n          break;\n        case (gl.INVALID_FRAMEBUFFER_OPERATION):\n          label = 'INVALID_FRAMEBUFFER_OPERATION';\n          break;\n        case (gl.OUT_OF_MEMORY):\n          label = 'OUT_OF_MEMORY';\n          break;\n        case (gl.CONTEXT_LOST_WEBGL):\n          label = 'CONTEXT_LOST_WEBGL';\n          break;\n        default:\n          label = `Unknown WebGL Error: ${error.toString(16)}`;\n      }\n      throw new Error(label);\n    }\n  }\n  deleteTexture(texture: WebGLTexture): void {\n    this.gl.deleteTexture(texture);\n  }\n  deleteProgram(program: WebGLProgram): void {\n    this.gl.deleteProgram(program);\n  }\n  getEncoder(dataType: Encoder.DataType, channels: number, usage: Encoder.Usage = Encoder.Usage.Default): DataEncoder {\n    if (this.version === 2) {\n      return new DataEncoders.RedFloat32DataEncoder(this.gl as WebGL2RenderingContext, channels);\n    }\n\n    switch (dataType) {\n      case 'float':\n        if (usage === Encoder.Usage.UploadOnly || this.isRenderFloat32Supported) {\n          return new DataEncoders.RGBAFloatDataEncoder(this.gl, channels);\n        } else {\n          return new DataEncoders.RGBAFloatDataEncoder(\n              this.gl, channels, this.textureHalfFloatExtension!.HALF_FLOAT_OES);\n        }\n      case 'int':\n        throw new Error('not implemented');\n      case 'byte':\n        return new DataEncoders.Uint8DataEncoder(this.gl, channels);\n      default:\n        throw new Error(`Invalid dataType: ${dataType}`);\n    }\n  }\n  clearActiveTextures(): void {\n    const gl = this.gl;\n    for (let unit = 0; unit < this.maxTextureImageUnits; ++unit) {\n      gl.activeTexture(gl.TEXTURE0 + unit);\n      gl.bindTexture(gl.TEXTURE_2D, null);\n    }\n  }\n  dispose(): void {\n    if (this.disposed) {\n      return;\n    }\n    const gl = this.gl;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteFramebuffer(this.framebuffer);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    gl.deleteBuffer(this.vertexbuffer);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    gl.finish();\n    this.disposed = true;\n  }\n\n  private createDefaultGeometry(): Float32Array {\n    // Sets of x,y,z(=0),s,t coordinates.\n    return new Float32Array([\n      -1.0, 1.0,  0.0, 0.0, 1.0,  // upper left\n      -1.0, -1.0, 0.0, 0.0, 0.0,  // lower left\n      1.0,  1.0,  0.0, 1.0, 1.0,  // upper right\n      1.0,  -1.0, 0.0, 1.0, 0.0   // lower right\n    ]);\n  }\n  private createVertexbuffer(): WebGLBuffer {\n    const gl = this.gl;\n    const buffer = gl.createBuffer();\n    if (!buffer) {\n      throw new Error('createBuffer() returned null');\n    }\n    const geometry = this.createDefaultGeometry();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, geometry, gl.STATIC_DRAW);\n    this.checkError();\n    return buffer;\n  }\n  private createFramebuffer(): WebGLFramebuffer {\n    const fb = this.gl.createFramebuffer();\n    if (!fb) {\n      throw new Error('createFramebuffer returned null');\n    }\n    return fb;\n  }\n\n  private queryVitalParameters(): void {\n    const gl = this.gl;\n\n    this.isFloatTextureAttachableToFrameBuffer = this.checkFloatTextureAttachableToFrameBuffer();\n    this.isRenderFloat32Supported = this.checkRenderFloat32();\n    this.isFloat32DownloadSupported = this.checkFloat32Download();\n\n    if (this.version === 1 && !this.textureHalfFloatExtension && !this.isRenderFloat32Supported) {\n      throw new Error('both float32 and float16 TextureType are not supported');\n    }\n\n    this.isBlendSupported = !this.isRenderFloat32Supported || this.checkFloat32Blend();\n\n    // this.maxCombinedTextureImageUnits = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n    this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    this.maxTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n    // this.maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n    // this.shadingLanguageVersion = gl.getParameter(gl.SHADING_LANGUAGE_VERSION);\n    // this.webglVendor = gl.getParameter(gl.VENDOR);\n    // this.webglVersion = gl.getParameter(gl.VERSION);\n\n    if (this.version === 2) {\n      // this.max3DTextureSize = gl.getParameter(WebGL2RenderingContext.MAX_3D_TEXTURE_SIZE);\n      // this.maxArrayTextureLayers = gl.getParameter(WebGL2RenderingContext.MAX_ARRAY_TEXTURE_LAYERS);\n      // this.maxColorAttachments = gl.getParameter(WebGL2RenderingContext.MAX_COLOR_ATTACHMENTS);\n      // this.maxDrawBuffers = gl.getParameter(WebGL2RenderingContext.MAX_DRAW_BUFFERS);\n    }\n  }\n  private getExtensions(): void {\n    if (this.version === 2) {\n      this.colorBufferFloatExtension = this.gl.getExtension('EXT_color_buffer_float');\n      this.disjointTimerQueryWebgl2Extension = this.gl.getExtension('EXT_disjoint_timer_query_webgl2');\n    } else {\n      this.textureFloatExtension = this.gl.getExtension('OES_texture_float');\n      this.textureHalfFloatExtension = this.gl.getExtension('OES_texture_half_float');\n    }\n  }\n\n  private checkFloatTextureAttachableToFrameBuffer(): boolean {\n    // test whether Float32 texture is supported:\n    // STEP.1 create a float texture\n    const gl = this.gl;\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n    // STEP.2 bind a frame buffer\n    const frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    // STEP.3 attach texture to framebuffer\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    // STEP.4 test whether framebuffer is complete\n    const isComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteTexture(texture);\n    gl.deleteFramebuffer(frameBuffer);\n    return isComplete;\n  }\n\n  private checkRenderFloat32(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  private checkFloat32Download(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n      if (!this.gl.getExtension('WEBGL_color_buffer_float')) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  /**\n   * Check whether GL_BLEND is supported\n   */\n  private checkFloat32Blend(): boolean {\n    // it looks like currently (2019-05-08) there is no easy way to detect whether BLEND is supported\n    // https://github.com/microsoft/onnxjs/issues/145\n\n    const gl = this.gl;\n\n    let texture: WebGLTexture|null|undefined;\n    let frameBuffer: WebGLFramebuffer|null|undefined;\n    let vertexShader: WebGLShader|null|undefined;\n    let fragmentShader: WebGLShader|null|undefined;\n    let program: WebGLProgram|null|undefined;\n\n    try {\n      texture = gl.createTexture();\n      frameBuffer = gl.createFramebuffer();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n      gl.enable(gl.BLEND);\n\n      vertexShader = gl.createShader(gl.VERTEX_SHADER);\n      if (!vertexShader) {\n        return false;\n      }\n      gl.shaderSource(vertexShader, 'void main(){}');\n      gl.compileShader(vertexShader);\n\n      fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n      if (!fragmentShader) {\n        return false;\n      }\n      gl.shaderSource(fragmentShader, 'precision highp float;void main(){gl_FragColor=vec4(0.5);}');\n      gl.compileShader(fragmentShader);\n\n      program = gl.createProgram();\n      if (!program) {\n        return false;\n      }\n      gl.attachShader(program, vertexShader);\n      gl.attachShader(program, fragmentShader);\n      gl.linkProgram(program);\n      gl.useProgram(program);\n\n      gl.drawArrays(gl.POINTS, 0, 1);\n      return gl.getError() === gl.NO_ERROR;\n\n    } finally {\n      gl.disable(gl.BLEND);\n\n      if (program) {\n        gl.deleteProgram(program);\n      }\n      if (vertexShader) {\n        gl.deleteShader(vertexShader);\n      }\n      if (fragmentShader) {\n        gl.deleteShader(fragmentShader);\n      }\n      if (frameBuffer) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.deleteFramebuffer(frameBuffer);\n      }\n      if (texture) {\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        gl.deleteTexture(texture);\n      }\n    }\n  }\n\n  beginTimer(): WebGLQuery {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      const query = gl2.createQuery() as WebGLQuery;\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported.');\n    }\n  }\n\n  endTimer() {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n  }\n\n  isTimerResultAvailable(query: WebGLQuery): boolean {\n    let available = false, disjoint = false;\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      disjoint = gl2.getParameter(ext.GPU_DISJOINT_EXT);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n\n    return available && !disjoint;\n  }\n\n  getTimerResult(query: WebGLQuery): number {\n    let timeElapsed = 0;\n    if (this.version === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      timeElapsed = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      gl2.deleteQuery(query);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n    // return miliseconds\n    return timeElapsed / 1000000;\n  }\n\n  async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await repeatedTry(() => this.isTimerResultAvailable(query));\n    return this.getTimerResult(query);\n  }\n\n  public async createAndWaitForFence(): Promise<void> {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  private createFence(gl: WebGLRenderingContext): FenceContext {\n    let isFencePassed: () => boolean;\n    const gl2 = gl as WebGL2RenderingContext;\n    const query = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n    gl.flush();\n    if (query === null) {\n      isFencePassed = () => true;\n    } else {\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(query, 0, 0);\n        return status === gl2.ALREADY_SIGNALED || status === gl2.CONDITION_SATISFIED;\n      };\n    }\n    return {query, isFencePassed};\n  }\n\n  async pollFence(fenceContext: FenceContext) {\n    return new Promise<void>(resolve => {\n      void this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n\n  private itemsToPoll: PollItem[] = [];\n\n  pollItems(): void {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {resolveFn} = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  private async addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\n    this.itemsToPoll.push({isDoneFn, resolveFn});\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    await repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    });\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from './backend';\nimport {Graph} from './graph';\nimport {Logger, Profiler} from './instrument';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nclass KernelOp {\n  constructor(public op: Operator, public node: Graph.Node) {}\n}\n\nexport class ExecutionPlan {\n  constructor(private graph: Graph, ops: Operator[], private profiler: Readonly<Profiler>) {\n    this.initialize(ops);\n  }\n\n  initialize(ops: Operator[]) {\n    this.profiler.event('session', 'ExecutionPlan.initialize', () => {\n      const graphNodes = this.graph.getNodes();\n      if (graphNodes.length !== ops.length) {\n        throw new Error('The size of nodes and OPs do not match.');\n      }\n\n      this._ops = ops.map((op, i) => new KernelOp(op, graphNodes[i]));\n      this.reset();\n\n      // look for starter node(s)\n      this._starter = [];\n      this._ops.forEach((op, i) => {\n        let resolved = true;\n        for (const input of op.node.inputs) {\n          if (\n              !this._values[input]                                   // not an initialized input\n              && this.graph.getInputIndices().indexOf(input) === -1  // not model input\n          ) {\n            resolved = false;\n            break;\n          }\n        }\n        if (resolved) {\n          this._starter.push(i);\n        }\n      });\n    });\n  }\n\n  reset() {\n    this._values = this.graph.getValues().map(i => i.tensor);\n  }\n\n  async execute(sessionHandler: SessionHandler, modelInputs: Tensor[]): Promise<Tensor[]> {\n    return this.profiler.event('session', 'ExecutionPlan.execute', async () => {\n      // reset mediem result\n      this.reset();\n\n      // create inference handler\n      const inferenceHandler = sessionHandler.createInferenceHandler();\n\n      // populate inputs value\n      const graphInputs = this.graph.getInputIndices();\n      if (modelInputs.length !== graphInputs.length) {\n        throw new Error(`number of input tensors don't match the number of inputs to the model: actual: ${\n            modelInputs.length} expected: ${graphInputs.length}`);\n      }\n\n      modelInputs.forEach((input, i) => {\n        const index = graphInputs[i];\n        this._values[index] = input;\n      });\n\n      // prepare running sequence\n      const sequence: number[] = this._starter.slice(0);\n\n      // execution iterations\n      const graphValues = this.graph.getValues();\n      const graphNodes = this.graph.getNodes();\n\n      let rear = 0;\n      while (rear < sequence.length) {\n        const thisOpIndex = sequence[rear++];\n        const thisOp = this._ops[thisOpIndex];\n\n        // check input\n        const inputList = thisOp.node.inputs.map(i => this._values[i]);\n        if (inputList.indexOf(undefined) !== -1) {\n          throw new Error(`unresolved input detected: op: ${thisOp.node}`);\n        }\n\n        // run\n        const inputTensors = inputList as Tensor[];\n        Logger.verbose(\n            'ExecPlan',\n            `Runing op:${thisOp.node.name} (${\n                inputTensors.map((t, i) => `'${thisOp.node.inputs[i]}': ${t.type}[${t.dims.join(',')}]`).join(', ')})`);\n\n        const outputList = await this.profiler.event(\n            'node', thisOp.node.name, async () => thisOp.op.impl(inferenceHandler, inputTensors, thisOp.op.context));\n\n        // check output\n        if (outputList.length !== thisOp.node.outputs.length) {\n          throw new Error('the size of output does not match model definition.');\n        }\n\n        // fill value\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          if (this._values[j]) {\n            throw new Error(`output [${j}] already has value: op:${thisOp.node.name}`);\n          }\n          this._values[j] = output;\n        });\n\n        // resolve downstream nodes\n        const downstreamNodes = new Set<number>();\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          for (const currentDownstreamNodeIndex of graphValues[j].to) {\n            const currentDownstreamNode = graphNodes[currentDownstreamNodeIndex];\n            let resolved = true;\n            for (const k of currentDownstreamNode.inputs) {\n              if (!this._values[k]) {\n                resolved = false;\n                break;\n              }\n            }\n            if (resolved) {\n              downstreamNodes.add(currentDownstreamNodeIndex);\n            }\n          }\n        });\n        sequence.push(...downstreamNodes);\n      }\n\n      const output: Tensor[] = [];\n      for (let i = 0; i < this.graph.getOutputIndices().length; i++) {\n        const outputIndex = this.graph.getOutputIndices()[i];\n        const outputTensor = this._values[outputIndex];\n        if (outputTensor === undefined) {\n          throw new Error(`required output [${outputIndex}] does not have value`);\n        }\n        if (outputIndex === 0) {\n          await outputTensor.getData();\n        } else {\n          // eslint-disable-next-line no-unused-expressions\n          outputTensor.data;\n        }\n        output.push(outputTensor);\n      }\n      Logger.verbose('ExecPlan', 'disposing of inferenceHandler');\n      inferenceHandler.dispose();\n      return output;\n    });\n  }\n\n  _values: Array<Tensor|undefined>;\n  _ops: KernelOp[];\n  _starter: number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from './attribute';\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\nimport {onnx} from './ort-schema/protobuf/onnx';\nimport {Tensor} from './tensor';\nimport {LongUtil, MAX_CLIP, MIN_CLIP, ProtoUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Graph {\n  export interface Shape {\n    readonly dims: readonly number[];\n  }\n  export interface ValueType {\n    readonly tensorType: Tensor.DataType;\n    readonly shape: Shape;\n  }\n  export interface Value {\n    // the tensor data. empty for non-initialized inputs\n    readonly tensor?: Tensor;\n\n    // index to the Node where the value comes from. -1 for initializer.\n    readonly from: number;\n\n    // indices to the Nodes where the values go to.\n    readonly to: readonly number[];\n\n    // value type specification. empty for non-input values.\n    readonly type?: ValueType;\n  }\n  export interface Node {\n    // name of the node\n    readonly name: string;\n\n    // the operator type\n    readonly opType: string;\n\n    // indices to the Values where the inputs come from.\n    readonly inputs: readonly number[];\n\n    // indices to the Values where the outpus go to.\n    readonly outputs: readonly number[];\n\n    // the attributes that used by the operator\n    readonly attributes: Attribute;\n  }\n\n  /**\n   * a Transformer is an instance that allows all possible transformation operations that applied to a graph\n   */\n  export interface Transformer {\n    removeAllIdentityNodes(): void;\n    removeAllDropoutNodes(): void;\n    fuseConvActivationNodes(): void;\n    // TODO: add generic functions to manipulate the graph\n  }\n\n  // an initializer can use transformer to transform the graph\n  export interface Initializer {\n    transformGraph(transformer: Transformer): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Graph {\n  getInputIndices(): readonly number[];\n  getInputNames(): readonly string[];\n  getOutputIndices(): readonly number[];\n  getOutputNames(): readonly string[];\n  getValues(): readonly Graph.Value[];\n  getNodes(): readonly Graph.Node[];\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-redeclare\nexport const Graph = {\n  /**\n   * construct a graph from a graph protobuf type\n   */\n  from: (graphProto: onnx.IGraphProto|ortFbs.Graph, initializer?: Graph.Initializer) =>\n      new GraphImpl(graphProto, initializer),\n};\n\nclass Value implements Graph.Value {\n  constructor(valueInfo?: onnx.IValueInfoProto) {\n    this._from = undefined;\n    this._to = [];\n    this.tensor = undefined;\n    this.type = undefined;\n\n    if (valueInfo) {\n      this.type = ProtoUtil.tensorValueTypeFromProto(valueInfo.type!.tensorType!);\n    }\n  }\n\n  _from?: number;  // -1 represent from initializer\n  get from() {\n    return this._from!;\n  }\n  _to: number[];\n  get to() {\n    return this._to;\n  }\n  type?: Graph.ValueType;\n  tensor?: Tensor;\n}\n\nclass Node implements Graph.Node {\n  constructor(_nodeProto: onnx.INodeProto|ortFbs.Node, name?: string) {\n    if (_nodeProto instanceof onnx.NodeProto) {\n      this.name = _nodeProto.name;\n      this.opType = _nodeProto.opType;\n      this.attributes = new Attribute(_nodeProto.attribute);\n    } else if (_nodeProto instanceof ortFbs.Node) {\n      this.name = name ?? _nodeProto.name()!;\n      this.opType = _nodeProto.opType()!;\n      this.attributes = new Attribute(ProtoUtil.tensorAttributesFromORTFormat(_nodeProto));\n    }\n\n    this.inputs = [];\n    this.outputs = [];\n    this.executeNode = true;\n  }\n\n  name: string;\n  opType: string;\n  inputs: number[];\n  outputs: number[];\n  attributes: Attribute;\n  executeNode: boolean;\n}\n\nclass GraphImpl implements Graph, Graph.Transformer {\n  private _allData: Value[];\n\n  private _allInputIndices: number[];\n  private _allInputNames: string[];\n\n  private _allOutputIndices: number[];\n  private _allOutputNames: string[];\n\n  private _nodes: Node[];\n\n  constructor(graph: onnx.IGraphProto|ortFbs.Graph, graphInitializer?: Graph.Initializer) {\n    if (!graph) {\n      throw new TypeError('graph is empty');\n    }\n\n    // build the graph - will throw exceptions if something fatal is detected\n    this.buildGraph(graph);\n\n    // execute any transformation logic for the graph (if applicable)\n    this.transformGraph(graphInitializer);\n\n    // check for cycles and other inconsistencies - will throw exceptions if something fatal is detected\n    this.checkIsAcyclic();\n  }\n\n  getInputIndices(): readonly number[] {\n    return this._allInputIndices;\n  }\n\n  getInputNames(): readonly string[] {\n    return this._allInputNames;\n  }\n\n  getOutputIndices(): readonly number[] {\n    return this._allOutputIndices;\n  }\n\n  getOutputNames(): readonly string[] {\n    return this._allOutputNames;\n  }\n\n  getValues(): readonly Graph.Value[] {\n    return this._allData;\n  }\n\n  getNodes(): readonly Graph.Node[] {\n    return this._nodes;\n  }\n\n  private buildGraph(graph: onnx.IGraphProto|ortFbs.Graph) {\n    // build the graph - will throw exceptions if something fatal is detected\n    if (graph instanceof onnx.GraphProto) {\n      this.buildGraphFromOnnxFormat(graph);\n    } else if (graph instanceof ortFbs.Graph) {\n      this.buildGraphFromOrtFormat(graph);\n    } else {\n      throw new TypeError('Graph type is not supported.');\n    }\n  }\n  private buildGraphFromOnnxFormat(graph: onnx.IGraphProto) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    if (!graph.input) {\n      throw new Error('missing information in graph: input');\n    }\n    const inputValueNames = [];\n    for (const i of graph.input) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated input name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      inputValueNames.push(i.name!);\n    }\n\n    // scan all initializers\n    if (!graph.initializer) {\n      throw new Error('missing information in graph: initializer');\n    }\n    for (const i of graph.initializer) {\n      let index = dataIndices.get(i.name!);\n      if (index === undefined) {\n        const value = new Value();\n        value.type = {\n          shape: {dims: ProtoUtil.tensorDimsFromProto(i.dims!)},\n          tensorType: ProtoUtil.tensorDataTypeFromProto(i.dataType!)\n        };\n        index = this._allData.push(value) - 1;\n        dataIndices.set(i.name!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromProto(i);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    if (!graph.output) {\n      throw new Error('missing information in graph: output');\n    }\n    for (const i of graph.output) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated output name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(i.name!);\n    }\n\n    // scan all nodes\n    if (!graph.node) {\n      throw new Error('missing information in graph: node');\n    }\n    for (const nodeProto of graph.node) {\n      if (!nodeProto.name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          const name = `unnamed_${nodeProto.opType}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            nodeProto.name = name;\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(nodeProto.name)) {\n        throw new Error(`duplicated node name: ${nodeProto.name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto)) - 1;\n      nodesIndices.set(nodeProto.name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n      if (!nodeProto.output) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (const output of nodeProto.output) {\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType === 'Constant') {\n          if (!nodeProto.attribute || nodeProto.attribute.length !== 1 || !nodeProto.attribute[0].t) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (!nodeProto.output || nodeProto.output.length !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromProto(nodeProto.attribute[0].t);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n\n      if (!nodeProto.input) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (const input of nodeProto.input) {\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          // handle exception when opset > 9 and roi not given\n          if (input === '' && nodeProto.input.length === 3 && nodeProto.opType === 'Resize') {\n            continue;\n          }\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto.name}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n\n    return true;\n  }\n\n  private buildGraphFromOrtFormat(graph: ortFbs.Graph) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    const inputValueNames = [];\n    for (let i = 0; i < graph.inputsLength(); i++) {\n      const inputName = graph.inputs(i);\n      if (dataIndices.has(inputName)) {\n        throw new Error(`duplicated input name: ${inputName}`);\n      }\n      // Find the input typeInfo from nodeargs\n      for (let j = 0; j < graph.nodeArgsLength(); j++) {\n        if (graph.nodeArgs(j)?.name() === inputName) {\n          const value = new Value();\n          const valueType = graph.nodeArgs(j)?.type()?.valueType();\n          if (valueType !== ortFbs.TypeInfoValue.tensor_type) {\n            throw new Error('Unexpected value type for the nodeArg.');\n          }\n          const valueInfo = graph.nodeArgs(j)!.type()!.value(new ortFbs.TensorTypeAndShape())!;\n          const type = ProtoUtil.tensorDataTypeFromProto(valueInfo.elemType());\n          const shape = valueInfo.shape()!;\n          const dims = [];\n          for (let k = 0; k < shape.dimLength()!; k++) {\n            dims.push(LongUtil.longToNumber(shape.dim(k)!.value()!.dimValue()!));\n          }\n          value.type = {shape: {dims}, tensorType: type};\n          const currentIndex = this._allData.push(value) - 1;\n          dataIndices.set(inputName, currentIndex);\n          inputValueNames.push(inputName);\n        }\n      }\n    }\n    // check initializers\n    for (let i = 0; i < graph.initializersLength(); i++) {\n      const initializer = graph.initializers(i)!;\n      let index = dataIndices.get(initializer.name()!);\n      if (index === undefined) {\n        const value = new Value();\n        const dims = ProtoUtil.tensorDimsFromORTFormat(initializer);\n        const type = ProtoUtil.tensorDataTypeFromProto(initializer.dataType());\n        value.type = {shape: {dims}, tensorType: type};\n        index = this._allData.push(value) - 1;\n        dataIndices.set(initializer.name()!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromOrtTensor(initializer);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    for (let i = 0; i < graph.outputsLength(); i++) {\n      const outputName = graph.outputs(i);\n      if (dataIndices.has(outputName)) {\n        throw new Error(`duplicated output name: ${outputName}`);\n      }\n      const currentIndex = this._allData.push(new Value()) - 1;\n      dataIndices.set(outputName, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(outputName);\n    }\n\n    // scan all nodes\n    if (!graph.nodes) {\n      throw new Error('missing information in graph: node');\n    }\n    for (let i = 0; i < graph.nodesLength(); i++) {\n      const nodeProto = graph.nodes(i);\n      let name = nodeProto!.name();\n      if (!name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          name = `unnamed_${nodeProto!.opType()}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            // an unique name is found. break.\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(name)) {\n        throw new Error(`duplicated node name: ${name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto!, name)) - 1;\n      nodesIndices.set(name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i);\n      if (nodeProto == null) {\n        throw new Error(`No node exists at index ${i}`);\n      }\n      if (nodeProto?.outputsLength() === 0) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto?.outputsLength(); j++) {\n        const output = nodeProto?.outputs(j);\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType() === 'Constant') {\n          if (nodeProto.attributesLength() !== 1 || !nodeProto.attributes(0)!.t()) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (nodeProto.outputsLength() !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromOrtTensor(nodeProto.attributes(0)!.t()!);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i)!;\n\n      if (nodeProto.inputsLength() === 0) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto.inputsLength()!; j++) {\n        const input = nodeProto.inputs(j)!;\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto!.name()}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n  }\n\n  private checkIsAcyclic() {\n    // go through the graph and check for cycles or other fatal inconsistencies\n    const starters: Set<number> = new Set<number>();\n    this._allInputIndices.forEach(i => {\n      const data = this._allData[i];\n      data._to.forEach(j => {\n        starters.add(j);\n      });\n    });\n\n    // Iterative DFS to check for cycles\n    const nodesStack = Array.from(starters);\n    const nodesState = new Array<string>(this._nodes.length).fill('white');\n\n    while (nodesStack.length > 0) {\n      const nodeIndex = nodesStack.pop()!;\n      // this node has now been processed completely. Mark this node 'black' to denote this.\n      if (nodesState[nodeIndex] === 'gray') {\n        nodesState[nodeIndex] = 'black';\n      } else {\n        // this node is under processing stage. mark this node 'gray' to denote this.\n        nodesStack.push(nodeIndex);\n        nodesState[nodeIndex] = 'gray';\n\n        this._nodes[nodeIndex].outputs.forEach((outgoingEdgeIndex) => {\n          const data = this._allData[outgoingEdgeIndex];\n          if (typeof data.tensor !== 'undefined') {\n            throw new Error('node outputs should not be initialized');\n          }\n          if (data._from !== nodeIndex) {\n            throw new Error('from property of the Value object doesn\\'t match index of Node being processed');\n          }\n          data._to.forEach((downstreamNodeIndex) => {\n            // back edge found - cyclic\n            if (nodesState[downstreamNodeIndex] === 'gray') {\n              throw new Error('model graph is cyclic');\n            }\n            // tree edge found - continue processing by adding it to stack\n            else if (nodesState[downstreamNodeIndex] === 'white') {\n              nodesStack.push(downstreamNodeIndex);\n            }\n          });\n        });\n      }\n    }\n  }\n\n  private transformGraph(graphInitializer?: Graph.Initializer): void {\n    // apply common transform\n    this.removeAllIdentityNodes();\n    this.removeAllDropoutNodes();\n    this.fuseConvActivationNodes();\n    // apply initializer specific transform\n    if (graphInitializer) {\n      graphInitializer.transformGraph(this);\n    }\n\n    // finalize graph\n    this.finalizeGraph();\n  }\n\n  /**\n   * finalize the graph.\n   *\n   * this function should be called after all the transformation completed.\n   * this function removes all unnecessary nodes and values from the graph\n   */\n  finalizeGraph() {\n    let offset = 0;\n    // delete all nodes that are not being executed\n    // The graph is represented using these two arrays\n    // this._nodes - Array holding the kernels to execute - each entry is a kernel pointing to this._allData\n    // this._allData - hold 2 fields - to [] & from - these feileds hold the graph map for inputs and outputs per node\n    // newIndices - remapping the graph after reading the flag 'executeNode'\n    const newIndices = new Array<number>(this._nodes.length, 0);\n    let nodePossition = 0;\n\n    for (let i = 0; i < this._nodes.length; i++) {\n      // giving new indexes to the nodes based on execution flag\n      newIndices[i] = nodePossition;\n      if (this._nodes[i].executeNode) {\n        if (nodePossition !== i) {\n          this._nodes[nodePossition] = this._nodes[i];\n        }\n        nodePossition++;\n\n      } else {\n        // delete all output values\n        this._nodes[i].outputs.forEach(ind => {\n          this._allData[ind]._from = -2;\n        });\n      }\n    }\n\n    // removing the unused nodes\n    this._nodes.splice(nodePossition, this._nodes.length - nodePossition);\n\n    // Updating this._allData according to the new this._nodes\n    for (let i = 0; i < this._allData.length; i++) {\n      const currentData = this._allData[i];\n      if (currentData._from !== undefined && currentData._from !== -1 && currentData._from !== -2) {\n        currentData._from = newIndices[currentData._from];\n      }\n\n      for (let j = 0; j < currentData._to.length; j++) {\n        if (currentData._to[j] >= 0) {\n          currentData._to[j] = newIndices[currentData._to[j]];\n        } else {\n          throw new Error('Trying to update a removed node');\n        }\n      }\n    }\n\n    offset = 0;\n    // delete all values that are not being referenced\n    for (let i = 0; i < this._allData.length; i++) {\n      // if current value is neither linked to next node, nor an output value, remove it.\n      if (this._allData[i].from === -2 && this._allOutputIndices.indexOf(i + offset) === -1) {\n        offset++;\n        this._allData.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (offset > 0) {\n        let ind = -1;\n        // if current value is neither an input value nor an initializer, find the node it's\n        // coming from and update the corresponding node output\n        if (this._allData[i].from !== undefined && this._allData[i].from !== -1) {\n          ind = this._nodes[this._allData[i].from].outputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[this._allData[i].from].outputs[ind] = i;\n          }\n        } else {\n          // if current value is an input value, update its reference in inputIndices\n          ind = this._allInputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allInputIndices[ind] = i;\n          }\n        }\n\n        // find the node that the current value is linking to and update its input reference\n        this._allData[i].to.forEach(node => {\n          ind = this._nodes[node].inputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[node].inputs[ind] = i;\n          }\n        });\n        if (this._allData[i].to.length === 0) {\n          // if current value is a graph output, update its reference in outputIndices\n          ind = this._allOutputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allOutputIndices[ind] = i;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete the specifed node. Assume the node has one incoming input and the first output connected to other nodes.\n   * An input validation must be done before calling this function.\n   * @param nodeIndex The index of node to be deleted\n   */\n  private deleteNode(nodeIndex: number) {\n    const node = this._nodes[nodeIndex];\n    if (node.outputs.length > 1) {\n      for (let i = 1; i < node.outputs.length; i++) {\n        if (this._allData[node.outputs[i]].to.length > 0) {\n          throw new Error('Node deletion with more than one output connected to other nodes is not supported. ');\n        }\n      }\n    }\n\n    // this node wil not be executed\n    node.executeNode = false;\n    const inputValueIndex = node.inputs[0];\n    const outputValueIndex = node.outputs[0];\n    const nodesConsumingOutput = this._allData[outputValueIndex].to;\n\n    // remove this node from the to property of the input Value\n    for (let i = 0; i < node.inputs.length; i++) {\n      const delIndex = this._allData[node.inputs[i]].to.indexOf(nodeIndex);\n      // should not happen\n      if (delIndex === -1) {\n        throw new Error('The Value object doesn\\'t have the current Node in it\\'s \\'to\\' property ');\n      }\n      this._allData[node.inputs[i]].to.splice(delIndex, 1);\n    }\n\n    // clear node indices consuming this output Value\n    this._allData[outputValueIndex]._to = [];\n\n    // if the output of this node is a graph output, adjust the index appropriately\n    const index = this._allOutputIndices.indexOf(outputValueIndex);\n    if (index !== -1) {\n      this._allOutputIndices[index] = inputValueIndex;\n    }\n\n    // override the inputs for nodes consuming this node's output with the input to this node\n    if (nodesConsumingOutput && nodesConsumingOutput.length > 0) {\n      for (const nodeIndex of nodesConsumingOutput) {\n        const replaceIndex = this._nodes[nodeIndex].inputs.indexOf(outputValueIndex);\n        // should not happen\n        if (replaceIndex === -1) {\n          throw new Error('The Node object doesn\\'t have the output Value in it\\'s \\'inputs\\' property ');\n        }\n        this._nodes[nodeIndex].inputs[replaceIndex] = inputValueIndex;\n        this._allData[inputValueIndex].to.push(nodeIndex);\n      }\n    }\n  }\n\n  removeAllDropoutNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Dropout' nodes so that no time is wasted in execution\n      if (node.opType === 'Dropout') {\n        // the node should have exactly 1 input and 1 or 2 outputs\n        if (node.inputs.length !== 1) {\n          throw new Error('Dropout nodes should only contain one input. ');\n        }\n        if (node.outputs.length !== 1 && node.outputs.length !== 2) {\n          throw new Error('Dropout nodes should contain either 1 or 2 output(s)');\n        }\n        // the second output should not be referenced by any other node\n        if (node.outputs.length === 2 && this._allData[node.outputs[1]]._to.length !== 0) {\n          throw new Error('Dropout nodes\\'s second output should not be referenced by other nodes');\n        }\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  removeAllIdentityNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Identity' nodes so that no time is wasted in execution\n      if (node.opType === 'Identity') {\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  isActivation(n: Node): boolean {\n    switch (n.opType) {\n      // TODO: add other activation methods\n      case 'Relu':\n      case 'Sigmoid':\n      case 'Clip':\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  fuseConvActivationNodes() {\n    for (const node of this._nodes) {\n      if (node.opType === 'Conv') {\n        const next = this._allData[node.outputs[0]]._to;\n        if (next.length === 1 && this.isActivation(this._nodes[next[0]])) {\n          const child = this._nodes[next[0]];\n          if (child.opType === 'Clip') {\n            if (child.inputs.length === 1) {\n              try {\n                node.attributes.set(\n                    'activation_params', 'floats',\n                    [child.attributes.getFloat('min'), child.attributes.getFloat('max')]);\n              } catch (e) {\n                node.attributes.set('activation_params', 'floats', [MIN_CLIP, MAX_CLIP]);\n              }\n            } else if (\n                child.inputs.length >= 3 && this._allData[child.inputs[1]].tensor !== undefined &&\n                this._allData[child.inputs[2]].tensor !== undefined) {\n              node.attributes.set('activation_params', 'floats', [\n                this._allData[child.inputs[1]].tensor!.floatData[0], this._allData[child.inputs[2]].tensor!.floatData[0]\n              ]);\n            } else {\n              // Skip fusion with clip node since clip min and clip max are not coming from initializer\n              continue;\n            }\n          }\n          node.attributes.set('activation', 'string', (child.opType));\n          this.deleteNode(next[0]);\n        }\n      }\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\n\nimport {WebGLContext} from './backends/webgl/webgl-context';\n\nexport declare namespace Logger {\n  export interface SeverityTypeMap {\n    verbose: 'v';\n    info: 'i';\n    warning: 'w';\n    error: 'e';\n    fatal: 'f';\n  }\n\n  export type Severity = keyof SeverityTypeMap;\n\n  export type Provider = 'none'|'console';\n\n  /**\n   * Logging config that used to control the behavior of logger\n   */\n  export interface Config {\n    /**\n     * Specify the logging provider. 'console' by default\n     */\n    provider?: Provider;\n    /**\n     * Specify the minimal logger serverity. 'warning' by default\n     */\n    minimalSeverity?: Logger.Severity;\n    /**\n     * Whether to output date time in log. true by default\n     */\n    logDateTime?: boolean;\n    /**\n     * Whether to output source information (Not yet supported). false by default\n     */\n    logSourceLocation?: boolean;\n  }\n\n  export interface CategorizedLogger {\n    verbose(content: string): void;\n    info(content: string): void;\n    warning(content: string): void;\n    error(content: string): void;\n    fatal(content: string): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Logger {\n  (category: string): Logger.CategorizedLogger;\n\n  verbose(content: string): void;\n  verbose(category: string, content: string): void;\n  info(content: string): void;\n  info(category: string, content: string): void;\n  warning(content: string): void;\n  warning(category: string, content: string): void;\n  error(content: string): void;\n  error(category: string, content: string): void;\n  fatal(content: string): void;\n  fatal(category: string, content: string): void;\n\n  /**\n   * Reset the logger configuration.\n   * @param config specify an optional default config\n   */\n  reset(config?: Logger.Config): void;\n  /**\n   * Set the logger's behavior on the given category\n   * @param category specify a category string. If '*' is specified, all previous configuration will be overwritten. If\n   * '' is specified, the default behavior will be updated.\n   * @param config the config object to indicate the logger's behavior\n   */\n  set(category: string, config: Logger.Config): void;\n\n  /**\n   * Set the logger's behavior from ort-common env\n   * @param env the env used to set logger. Currently only setting loglevel is supported through Env.\n   */\n  setWithEnv(env: Env): void;\n}\n\ninterface LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string): void;\n}\nclass NoOpLoggerProvider implements LoggerProvider {\n  log(_severity: Logger.Severity, _content: string, _category?: string) {\n    // do nothing\n  }\n}\nclass ConsoleLoggerProvider implements LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string) {\n    // eslint-disable-next-line no-console\n    console.log(`${this.color(severity)} ${category ? '\\x1b[35m' + category + '\\x1b[0m ' : ''}${content}`);\n  }\n\n  private color(severity: Logger.Severity) {\n    switch (severity) {\n      case 'verbose':\n        return '\\x1b[34;40mv\\x1b[0m';\n      case 'info':\n        return '\\x1b[32mi\\x1b[0m';\n      case 'warning':\n        return '\\x1b[30;43mw\\x1b[0m';\n      case 'error':\n        return '\\x1b[31;40me\\x1b[0m';\n      case 'fatal':\n        return '\\x1b[101mf\\x1b[0m';\n      default:\n        throw new Error(`unsupported severity: ${severity}`);\n    }\n  }\n}\n\nconst SEVERITY_VALUE = {\n  verbose: 1000,\n  info: 2000,\n  warning: 4000,\n  error: 5000,\n  fatal: 6000\n};\n\nconst LOGGER_PROVIDER_MAP: {readonly [provider: string]: Readonly<LoggerProvider>} = {\n  ['none']: new NoOpLoggerProvider(),\n  ['console']: new ConsoleLoggerProvider()\n};\nconst LOGGER_DEFAULT_CONFIG = {\n  provider: 'console',\n  minimalSeverity: 'warning',\n  logDateTime: true,\n  logSourceLocation: false\n};\nlet LOGGER_CONFIG_MAP:\n    {[category: string]: Readonly<Required<Logger.Config>>} = {['']: LOGGER_DEFAULT_CONFIG as Required<Logger.Config>};\n\nfunction log(category: string): Logger.CategorizedLogger;\nfunction log(severity: Logger.Severity, content: string): void;\nfunction log(severity: Logger.Severity, category: string, content: string): void;\nfunction log(severity: Logger.Severity, arg1: string, arg2?: string): void;\nfunction log(\n    arg0: string|Logger.Severity, arg1?: string, arg2?: string|number, arg3?: number): Logger.CategorizedLogger|void {\n  if (arg1 === undefined) {\n    // log(category: string): Logger.CategorizedLogger;\n    return createCategorizedLogger(arg0);\n  } else if (arg2 === undefined) {\n    // log(severity, content);\n    logInternal(arg0 as Logger.Severity, arg1, 1);\n  } else if (typeof arg2 === 'number' && arg3 === undefined) {\n    // log(severity, content, stack)\n    logInternal(arg0 as Logger.Severity, arg1, arg2);\n  } else if (typeof arg2 === 'string' && arg3 === undefined) {\n    // log(severity, category, content)\n    logInternal(arg0 as Logger.Severity, arg2, 1, arg1);\n  } else if (typeof arg2 === 'string' && typeof arg3 === 'number') {\n    // log(severity, category, content, stack)\n    logInternal(arg0 as Logger.Severity, arg2, arg3, arg1);\n  } else {\n    throw new TypeError('input is valid');\n  }\n}\n\nfunction createCategorizedLogger(category: string): Logger.CategorizedLogger {\n  return {\n    verbose: log.verbose.bind(null, category),\n    info: log.info.bind(null, category),\n    warning: log.warning.bind(null, category),\n    error: log.error.bind(null, category),\n    fatal: log.fatal.bind(null, category)\n  };\n}\n\n// NOTE: argument 'category' is put the last parameter beacause typescript\n// doesn't allow optional argument put in front of required argument. This\n// order is different from a usual logging API.\nfunction logInternal(severity: Logger.Severity, content: string, stack: number, category?: string) {\n  const config = LOGGER_CONFIG_MAP[category || ''] || LOGGER_CONFIG_MAP[''];\n  if (SEVERITY_VALUE[severity] < SEVERITY_VALUE[config.minimalSeverity]) {\n    return;\n  }\n\n  if (config.logDateTime) {\n    content = `${new Date().toISOString()}|${content}`;\n  }\n\n  if (config.logSourceLocation) {\n    // TODO: calculate source location from 'stack'\n  }\n\n  LOGGER_PROVIDER_MAP[config.provider].log(severity, content, category);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nnamespace log {\n  export function verbose(content: string): void;\n  export function verbose(category: string, content: string): void;\n  export function verbose(arg0: string, arg1?: string) {\n    log('verbose', arg0, arg1);\n  }\n  export function info(content: string): void;\n  export function info(category: string, content: string): void;\n  export function info(arg0: string, arg1?: string) {\n    log('info', arg0, arg1);\n  }\n  export function warning(content: string): void;\n  export function warning(category: string, content: string): void;\n  export function warning(arg0: string, arg1?: string) {\n    log('warning', arg0, arg1);\n  }\n  export function error(content: string): void;\n  export function error(category: string, content: string): void;\n  export function error(arg0: string, arg1?: string) {\n    log('error', arg0, arg1);\n  }\n  export function fatal(content: string): void;\n  export function fatal(category: string, content: string): void;\n  export function fatal(arg0: string, arg1?: string) {\n    log('fatal', arg0, arg1);\n  }\n\n  export function reset(config?: Logger.Config): void {\n    LOGGER_CONFIG_MAP = {};\n    set('', config || {});\n  }\n  export function set(category: string, config: Logger.Config): void {\n    if (category === '*') {\n      reset(config);\n    } else {\n      const previousConfig = LOGGER_CONFIG_MAP[category] || LOGGER_DEFAULT_CONFIG;\n      LOGGER_CONFIG_MAP[category] = {\n        provider: config.provider || previousConfig.provider,\n        minimalSeverity: config.minimalSeverity || previousConfig.minimalSeverity,\n        logDateTime: (config.logDateTime === undefined) ? previousConfig.logDateTime : config.logDateTime,\n        logSourceLocation: (config.logSourceLocation === undefined) ? previousConfig.logSourceLocation :\n                                                                      config.logSourceLocation\n      };\n    }\n\n    // TODO: we want to support wildcard or regex?\n  }\n\n  export function setWithEnv(env: Env): void {\n    const config: Logger.Config = {};\n    if (env.logLevel) {\n      config.minimalSeverity = env.logLevel as Logger.Severity;\n    }\n    set('', config);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare, @typescript-eslint/naming-convention\nexport const Logger: Logger = log;\n\nexport declare namespace Profiler {\n  export interface Config {\n    maxNumberEvents?: number;\n    flushBatchSize?: number;\n    flushIntervalInMilliseconds?: number;\n  }\n\n  export type EventCategory = 'session'|'node'|'op'|'backend';\n\n  export interface Event {\n    end(): void|Promise<void>;\n  }\n}\n// TODO\n// class WebGLEvent implements Profiler.Event {}\n\nclass Event implements Profiler.Event {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number,\n      private endCallback: (e: Event) => void|Promise<void>, public timer?: WebGLQuery, public ctx?: WebGLContext) {}\n\n  async end() {\n    return this.endCallback(this);\n  }\n\n  async checkTimer(): Promise<number> {\n    if (this.ctx === undefined || this.timer === undefined) {\n      throw new Error('No webgl timer found');\n    } else {\n      this.ctx.endTimer();\n      return this.ctx.waitForQueryAndGetTime(this.timer);\n    }\n  }\n}\n\nclass EventRecord {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number, public endTime: number) {}\n}\n\nexport class Profiler {\n  static create(config?: Profiler.Config): Profiler {\n    if (config === undefined) {\n      return new this();\n    }\n    return new this(config.maxNumberEvents, config.flushBatchSize, config.flushIntervalInMilliseconds);\n  }\n\n  private constructor(maxNumberEvents?: number, flushBatchSize?: number, flushIntervalInMilliseconds?: number) {\n    this._started = false;\n    this._maxNumberEvents = maxNumberEvents === undefined ? 10000 : maxNumberEvents;\n    this._flushBatchSize = flushBatchSize === undefined ? 10 : flushBatchSize;\n    this._flushIntervalInMilliseconds = flushIntervalInMilliseconds === undefined ? 5000 : flushIntervalInMilliseconds;\n  }\n\n  // start profiling\n  start() {\n    this._started = true;\n    this._timingEvents = [];\n    this._flushTime = now();\n    this._flushPointer = 0;\n  }\n\n  // stop profiling\n  stop() {\n    this._started = false;\n    for (; this._flushPointer < this._timingEvents.length; this._flushPointer++) {\n      this.logOneEvent(this._timingEvents[this._flushPointer]);\n    }\n  }\n\n  // create an event scope for the specific function\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T, ctx?: WebGLContext): T;\n  event<T>(category: Profiler.EventCategory, name: string, func: () => Promise<T>, ctx?: WebGLContext): Promise<T>;\n\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T | Promise<T>, ctx?: WebGLContext): T\n      |Promise<T> {\n    const event = this._started ? this.begin(category, name, ctx) : undefined;\n    let isPromise = false;\n\n    const res = func();\n\n    // we consider a then-able object is a promise\n    if (res && typeof (res as Promise<T>).then === 'function') {\n      isPromise = true;\n      return new Promise<T>((resolve, reject) => {\n        (res as Promise<T>)\n            .then(\n                async value => {  // fulfilled\n                  if (event) {\n                    await event.end();\n                  }\n                  resolve(value);\n                },\n                async reason => {  // rejected\n                  if (event) {\n                    await event.end();\n                  }\n                  reject(reason);\n                });\n      });\n    }\n    if (!isPromise && event) {\n      const eventRes = event.end();\n      if (eventRes && typeof eventRes.then === 'function') {\n        return new Promise<T>((resolve, reject) => {\n          (eventRes).then(\n              () => {  // fulfilled\n                resolve(res);\n              },\n              (reason) => {  // rejected\n                reject(reason);\n              });\n        });\n      }\n    }\n    return res;\n  }\n\n  // begin an event\n  begin(category: Profiler.EventCategory, name: string, ctx?: WebGLContext): Event {\n    if (!this._started) {\n      throw new Error('profiler is not started yet');\n    }\n    if (ctx === undefined) {\n      const startTime = now();\n      this.flush(startTime);\n      return new Event(category, name, startTime, e => this.endSync(e));\n    } else {\n      const timer: WebGLQuery = ctx.beginTimer();\n      return new Event(category, name, 0, async e => this.end(e), timer, ctx);\n    }\n  }\n\n  // end the specific event\n  private async end(event: Event): Promise<void> {\n    const endTime: number = await event.checkTimer();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private endSync(event: Event): void {\n    const endTime: number = now();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private logOneEvent(event: EventRecord) {\n    Logger.verbose(\n        `Profiler.${event.category}`,\n        `${(event.endTime - event.startTime).toFixed(2)}ms on event '${event.name}' at ${event.endTime.toFixed(2)}`);\n  }\n\n  private flush(currentTime: number) {\n    if (this._timingEvents.length - this._flushPointer >= this._flushBatchSize ||\n        currentTime - this._flushTime >= this._flushIntervalInMilliseconds) {\n      // should flush when either batch size accumlated or interval elepsed\n\n      for (const previousPointer = this._flushPointer; this._flushPointer < previousPointer + this._flushBatchSize &&\n           this._flushPointer < this._timingEvents.length;\n           this._flushPointer++) {\n        this.logOneEvent(this._timingEvents[this._flushPointer]);\n      }\n\n      this._flushTime = now();\n    }\n  }\n\n  get started() {\n    return this._started;\n  }\n  private _started = false;\n  private _timingEvents: EventRecord[];\n\n  private readonly _maxNumberEvents: number;\n\n  private readonly _flushBatchSize: number;\n  private readonly _flushIntervalInMilliseconds: number;\n\n  private _flushTime: number;\n  private _flushPointer = 0;\n}\n\n/**\n * returns a number to represent the current timestamp in a resolution as high as possible.\n */\nexport const now = (typeof performance !== 'undefined' && performance.now) ? () => performance.now() : Date.now;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\n\nimport {Graph} from './graph';\nimport {OpSet} from './opset';\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\nimport {onnx} from './ort-schema/protobuf/onnx';\nimport {LongUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport class Model {\n  // empty model\n  constructor() {}\n\n  load(buf: Uint8Array, graphInitializer?: Graph.Initializer, isOrtFormat?: boolean): void {\n    if (!isOrtFormat) {\n      // isOrtFormat === false || isOrtFormat === undefined\n      try {\n        this.loadFromOnnxFormat(buf, graphInitializer);\n        return;\n      } catch (e) {\n        if (isOrtFormat !== undefined) {\n          throw e;\n        }\n      }\n    }\n\n    this.loadFromOrtFormat(buf, graphInitializer);\n  }\n\n  private loadFromOnnxFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const modelProto = onnx.ModelProto.decode(buf);\n    const irVersion = LongUtil.longToNumber(modelProto.irVersion);\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n\n    this._opsets =\n        modelProto.opsetImport.map(i => ({domain: i.domain as string, version: LongUtil.longToNumber(i.version!)}));\n\n    this._graph = Graph.from(modelProto.graph!, graphInitializer);\n  }\n\n  private loadFromOrtFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const fb = new flatbuffers.ByteBuffer(buf);\n    const ortModel = ortFbs.InferenceSession.getRootAsInferenceSession(fb).model()!;\n    const irVersion = LongUtil.longToNumber(ortModel.irVersion());\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n    this._opsets = [];\n    for (let i = 0; i < ortModel.opsetImportLength(); i++) {\n      const opsetId = ortModel.opsetImport(i)!;\n      this._opsets.push({domain: opsetId?.domain() as string, version: LongUtil.longToNumber(opsetId.version()!)});\n    }\n\n    this._graph = Graph.from(ortModel.graph()!, graphInitializer);\n  }\n\n  private _graph: Graph;\n  get graph(): Graph {\n    return this._graph;\n  }\n\n  private _opsets: OpSet[];\n  get opsets(): readonly OpSet[] {\n    return this._opsets;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from './backend';\nimport {Graph} from './graph';\nimport {Tensor} from './tensor';\n\nexport type OperatorImplementation<T> = (inferenceHandler: InferenceHandler, inputs: Tensor[], context: T) => Tensor[];\nexport type OperatorInitialization<T> = (node: Graph.Node, graph: Graph) => T;\n\nexport interface Operator {\n  readonly impl: OperatorImplementation<unknown>;\n  readonly context: Graph.Node|unknown;\n}\n\nexport const NUMBER_TYPES: readonly Tensor.DataType[] =\n    ['float32', 'float64', 'int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const INT_TYPES: readonly Tensor.DataType[] = ['int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const FLOAT_TYPES: readonly Tensor.DataType[] = ['float32', 'float64'];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from './graph';\nimport {OperatorImplementation, OperatorInitialization} from './operators';\n\nexport interface OpSet {\n  domain: string;\n  version: number;\n}\nexport declare namespace OpSet {\n  /**\n   * Domain of an opset, it can be an empty string(default value, represent for ai.onnx), or 'ai.onnx.ml'\n   */\n  type Domain = ''|'ai.onnx.ml'|'com.microsoft';\n  /**\n   * A resolve rule consists of 4 or 5 items: opType, opSetDomain, versionSelector, operatorImplementation and\n   * operatorInitialization (optional)\n   */\n  type ResolveRule = [\n    string, Domain, string, OperatorImplementation<Graph.Node>\n  ]|[string, Domain, string, OperatorImplementation<unknown>, OperatorInitialization<unknown>];\n}\n\nexport function resolveOperator(node: Graph.Node, opsets: readonly OpSet[], rules: readonly OpSet.ResolveRule[]) {\n  for (const rule of rules) {\n    const opType = rule[0];\n    const domain = rule[1];\n    const versionSelector = rule[2];\n    const opImpl = rule[3];\n    const opInit = rule[4];\n\n    if (node.opType === opType) {  // operator type matches\n      for (const opset of opsets) {\n        // opset '' and 'ai.onnx' are considered the same.\n        if (opset.domain === domain || (opset.domain === 'ai.onnx' && domain === '')) {  // opset domain found\n          if (matchSelector(opset.version, versionSelector)) {\n            return {opImpl, opInit};\n          }\n        }\n      }\n    }\n  }\n\n  throw new TypeError(`cannot resolve operator '${node.opType}' with opsets: ${\n      opsets.map(set => `${set.domain || 'ai.onnx'} v${set.version}`).join(', ')}`);\n}\n\nfunction matchSelector(version: number, selector: string): boolean {\n  if (selector.endsWith('+')) {\n    // minimum version match ('7+' expects version>=7)\n    const rangeStart = Number.parseInt(selector.substring(0, selector.length - 1), 10);\n    return !isNaN(rangeStart) && rangeStart <= version;\n  } else if (selector.split('-').length === 2) {\n    // range match ('6-8' expects 6<=version<=8)\n    const pair = selector.split('-');\n    const rangeStart = Number.parseInt(pair[0], 10);\n    const rangeEnd = Number.parseInt(pair[1], 10);\n    return !isNaN(rangeStart) && !isNaN(rangeEnd) && rangeStart <= version && version <= rangeEnd;\n  } else {\n    // exact match ('7' expects version===7)\n    return Number.parseInt(selector, 10) === version;\n  }\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n/* eslint-disable */\n\nimport {flatbuffers} from 'flatbuffers';\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum AttributeType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    INT = 2,\n    STRING = 3,\n    TENSOR = 4,\n    GRAPH = 5,\n    FLOATS = 6,\n    INTS = 7,\n    STRINGS = 8,\n    TENSORS = 9,\n    GRAPHS = 10,\n    SPARSE_TENSOR = 11,\n    SPARSE_TENSORS = 12\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum DimensionValueType {UNKNOWN = 0, VALUE = 1, PARAM = 2}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TensorDataType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    UINT8 = 2,\n    INT8 = 3,\n    UINT16 = 4,\n    INT16 = 5,\n    INT32 = 6,\n    INT64 = 7,\n    STRING = 8,\n    BOOL = 9,\n    FLOAT16 = 10,\n    DOUBLE = 11,\n    UINT32 = 12,\n    UINT64 = 13,\n    COMPLEX64 = 14,\n    COMPLEX128 = 15,\n    BFLOAT16 = 16,\n    FLOAT8E4M3FN = 17,\n    FLOAT8E4M3FNUZ = 18,\n    FLOAT8E5M2 = 19,\n    FLOAT8E5M2FNUZ = 20,\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum NodeType {Primitive = 0, Fused = 1}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TypeInfoValue {NONE = 0, tensor_type = 1, sequence_type = 2, map_type = 3}\n}\n\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Shape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Shape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Shape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getSizePrefixedRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Dimension= obj\n     * @returns onnxruntime.experimental.fbs.Dimension\n     */\n    dim(index: number, obj?: onnxruntime.experimental.fbs.Dimension): onnxruntime.experimental.fbs.Dimension|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Dimension())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    dimLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startShape(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimOffset\n     */\n    static addDim(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, dimOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createShape(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Shape.startShape(builder);\n      Shape.addDim(builder, dimOffset);\n      return Shape.endShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Dimension {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Dimension\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Dimension {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getSizePrefixedRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.DimensionValue= obj\n     * @returns onnxruntime.experimental.fbs.DimensionValue|null\n     */\n    value(obj?: onnxruntime.experimental.fbs.DimensionValue): onnxruntime.experimental.fbs.DimensionValue|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.DimensionValue())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimension(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimension(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimension(\n        builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset,\n        denotationOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Dimension.startDimension(builder);\n      Dimension.addValue(builder, valueOffset);\n      Dimension.addDenotation(builder, denotationOffset);\n      return Dimension.endDimension(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class DimensionValue {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns DimensionValue\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DimensionValue {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getSizePrefixedRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.DimensionValueType\n     */\n    dimType(): onnxruntime.experimental.fbs.DimensionValueType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    dimValue(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    dimParam(): string|null;\n    dimParam(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    dimParam(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimensionValue(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.DimensionValueType dimType\n     */\n    static addDimType(builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType) {\n      builder.addFieldInt8(0, dimType, onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long dimValue\n     */\n    static addDimValue(builder: flatbuffers.Builder, dimValue: flatbuffers.Long) {\n      builder.addFieldInt64(1, dimValue, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimParamOffset\n     */\n    static addDimParam(builder: flatbuffers.Builder, dimParamOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimParamOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimensionValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimensionValue(\n        builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType,\n        dimValue: flatbuffers.Long, dimParamOffset: flatbuffers.Offset): flatbuffers.Offset {\n      DimensionValue.startDimensionValue(builder);\n      DimensionValue.addDimType(builder, dimType);\n      DimensionValue.addDimValue(builder, dimValue);\n      DimensionValue.addDimParam(builder, dimParamOffset);\n      return DimensionValue.endDimensionValue(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TensorTypeAndShape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TensorTypeAndShape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TensorTypeAndShape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape): TensorTypeAndShape {\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getSizePrefixedRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape):\n        TensorTypeAndShape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    elemType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Shape= obj\n     * @returns onnxruntime.experimental.fbs.Shape|null\n     */\n    shape(obj?: onnxruntime.experimental.fbs.Shape): onnxruntime.experimental.fbs.Shape|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Shape())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensorTypeAndShape(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType elemType\n     */\n    static addElemType(builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, elemType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset shapeOffset\n     */\n    static addShape(builder: flatbuffers.Builder, shapeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, shapeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensorTypeAndShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensorTypeAndShape(\n        builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType,\n        shapeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TensorTypeAndShape.startTensorTypeAndShape(builder);\n      TensorTypeAndShape.addElemType(builder, elemType);\n      TensorTypeAndShape.addShape(builder, shapeOffset);\n      return TensorTypeAndShape.endTensorTypeAndShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class MapType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns MapType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): MapType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getSizePrefixedRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    keyType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    valueType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startMapType(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType keyType\n     */\n    static addKeyType(builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, keyType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueTypeOffset\n     */\n    static addValueType(builder: flatbuffers.Builder, valueTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, valueTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endMapType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createMapType(\n        builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType,\n        valueTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      MapType.startMapType(builder);\n      MapType.addKeyType(builder, keyType);\n      MapType.addValueType(builder, valueTypeOffset);\n      return MapType.endMapType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SequenceType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SequenceType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SequenceType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getSizePrefixedRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    elemType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSequenceType(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset elemTypeOffset\n     */\n    static addElemType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, elemTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSequenceType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSequenceType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SequenceType.startSequenceType(builder);\n      SequenceType.addElemType(builder, elemTypeOffset);\n      return SequenceType.endSequenceType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class EdgeEnd {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns EdgeEnd\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): EdgeEnd {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      return this.bb!.readUint32(this.bb_pos);\n    }\n\n    /**\n     * @returns number\n     */\n    srcArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 4);\n    }\n\n    /**\n     * @returns number\n     */\n    dstArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number node_index\n     * @param number src_arg_index\n     * @param number dst_arg_index\n     * @returns flatbuffers.Offset\n     */\n    static createEdgeEnd(\n        builder: flatbuffers.Builder, node_index: number, src_arg_index: number,\n        dst_arg_index: number): flatbuffers.Offset {\n      builder.prep(4, 12);\n      builder.writeInt32(dst_arg_index);\n      builder.writeInt32(src_arg_index);\n      builder.writeInt32(node_index);\n      return builder.offset();\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class NodeEdge {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns NodeEdge\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): NodeEdge {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getSizePrefixedRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    inputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    outputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNodeEdge(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number nodeIndex\n     */\n    static addNodeIndex(builder: flatbuffers.Builder, nodeIndex: number) {\n      builder.addFieldInt32(0, nodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputEdgesOffset\n     */\n    static addInputEdges(builder: flatbuffers.Builder, inputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, inputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputEdgesOffset\n     */\n    static addOutputEdges(builder: flatbuffers.Builder, outputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, outputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNodeEdge(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNodeEdge(\n        builder: flatbuffers.Builder, nodeIndex: number, inputEdgesOffset: flatbuffers.Offset,\n        outputEdgesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      NodeEdge.startNodeEdge(builder);\n      NodeEdge.addNodeIndex(builder, nodeIndex);\n      NodeEdge.addInputEdges(builder, inputEdgesOffset);\n      NodeEdge.addOutputEdges(builder, outputEdgesOffset);\n      return NodeEdge.endNodeEdge(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Node {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Node\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Node {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getSizePrefixedRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    sinceVersion(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    index(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    opType(): string|null;\n    opType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    opType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.NodeType\n     */\n    type(): onnxruntime.experimental.fbs.NodeType {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.NodeType.Primitive;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    executionProviderType(): string|null;\n    executionProviderType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    executionProviderType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Attribute= obj\n     * @returns onnxruntime.experimental.fbs.Attribute\n     */\n    attributes(index: number, obj?: onnxruntime.experimental.fbs.Attribute): onnxruntime.experimental.fbs.Attribute\n        |null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Attribute())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    attributesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    inputArgCounts(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    inputArgCountsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Int32Array\n     */\n    inputArgCountsArray(): Int32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ?\n          new Int32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    implicitInputs(index: number): string;\n    implicitInputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    implicitInputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    implicitInputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNode(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number sinceVersion\n     */\n    static addSinceVersion(builder: flatbuffers.Builder, sinceVersion: number) {\n      builder.addFieldInt32(3, sinceVersion, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number index\n     */\n    static addIndex(builder: flatbuffers.Builder, index: number) {\n      builder.addFieldInt32(4, index, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opTypeOffset\n     */\n    static addOpType(builder: flatbuffers.Builder, opTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, opTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.NodeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.NodeType) {\n      builder.addFieldInt32(6, type, onnxruntime.experimental.fbs.NodeType.Primitive);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset executionProviderTypeOffset\n     */\n    static addExecutionProviderType(builder: flatbuffers.Builder, executionProviderTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, executionProviderTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset attributesOffset\n     */\n    static addAttributes(builder: flatbuffers.Builder, attributesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, attributesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createAttributesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startAttributesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputArgCountsOffset\n     */\n    static addInputArgCounts(builder: flatbuffers.Builder, inputArgCountsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, inputArgCountsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputArgCountsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputArgCountsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset implicitInputsOffset\n     */\n    static addImplicitInputs(builder: flatbuffers.Builder, implicitInputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, implicitInputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createImplicitInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startImplicitInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNode(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNode(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, sinceVersion: number, index: number, opTypeOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.NodeType, executionProviderTypeOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset, attributesOffset: flatbuffers.Offset,\n        inputArgCountsOffset: flatbuffers.Offset, implicitInputsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Node.startNode(builder);\n      Node.addName(builder, nameOffset);\n      Node.addDocString(builder, docStringOffset);\n      Node.addDomain(builder, domainOffset);\n      Node.addSinceVersion(builder, sinceVersion);\n      Node.addIndex(builder, index);\n      Node.addOpType(builder, opTypeOffset);\n      Node.addType(builder, type);\n      Node.addExecutionProviderType(builder, executionProviderTypeOffset);\n      Node.addInputs(builder, inputsOffset);\n      Node.addOutputs(builder, outputsOffset);\n      Node.addAttributes(builder, attributesOffset);\n      Node.addInputArgCounts(builder, inputArgCountsOffset);\n      Node.addImplicitInputs(builder, implicitInputsOffset);\n      return Node.endNode(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class ValueInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns ValueInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): ValueInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getSizePrefixedRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    type(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startValueInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset typeOffset\n     */\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, typeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endValueInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createValueInfo(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        typeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      ValueInfo.startValueInfo(builder);\n      ValueInfo.addName(builder, nameOffset);\n      ValueInfo.addDocString(builder, docStringOffset);\n      ValueInfo.addType(builder, typeOffset);\n      return ValueInfo.endValueInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TypeInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TypeInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TypeInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getSizePrefixedRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TypeInfoValue\n     */\n    valueType(): onnxruntime.experimental.fbs.TypeInfoValue {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TypeInfoValue.NONE;\n    }\n\n    /**\n     * @param flatbuffers.Table obj\n     * @returns ?flatbuffers.Table\n     */\n    value<T extends flatbuffers.Table>(obj: T): T|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTypeInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TypeInfoValue valueType\n     */\n    static addValueType(builder: flatbuffers.Builder, valueType: onnxruntime.experimental.fbs.TypeInfoValue) {\n      builder.addFieldInt8(1, valueType, onnxruntime.experimental.fbs.TypeInfoValue.NONE);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTypeInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTypeInfo(\n        builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset,\n        valueType: onnxruntime.experimental.fbs.TypeInfoValue, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TypeInfo.startTypeInfo(builder);\n      TypeInfo.addDenotation(builder, denotationOffset);\n      TypeInfo.addValueType(builder, valueType);\n      TypeInfo.addValue(builder, valueOffset);\n      return TypeInfo.endTypeInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class OperatorSetId {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns OperatorSetId\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): OperatorSetId {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getSizePrefixedRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    version(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startOperatorSetId(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: flatbuffers.Long) {\n      builder.addFieldInt64(1, version, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endOperatorSetId(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createOperatorSetId(\n        builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset, version: flatbuffers.Long): flatbuffers.Offset {\n      OperatorSetId.startOperatorSetId(builder);\n      OperatorSetId.addDomain(builder, domainOffset);\n      OperatorSetId.addVersion(builder, version);\n      return OperatorSetId.endOperatorSetId(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Tensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Tensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Tensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getSizePrefixedRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    dataType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    rawData(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    rawDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint8Array\n     */\n    rawDataArray(): Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ?\n          new Uint8Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    stringData(index: number): string;\n    stringData(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    stringData(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensor(builder: flatbuffers.Builder) {\n      builder.startObject(6);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType dataType\n     */\n    static addDataType(builder: flatbuffers.Builder, dataType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(3, dataType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset rawDataOffset\n     */\n    static addRawData(builder: flatbuffers.Builder, rawDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, rawDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createRawDataVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(1, data.length, 1);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt8(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startRawDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(1, numElems, 1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringDataOffset\n     */\n    static addStringData(builder: flatbuffers.Builder, stringDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, stringDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringDataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensor(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset, dataType: onnxruntime.experimental.fbs.TensorDataType,\n        rawDataOffset: flatbuffers.Offset, stringDataOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Tensor.startTensor(builder);\n      Tensor.addName(builder, nameOffset);\n      Tensor.addDocString(builder, docStringOffset);\n      Tensor.addDims(builder, dimsOffset);\n      Tensor.addDataType(builder, dataType);\n      Tensor.addRawData(builder, rawDataOffset);\n      Tensor.addStringData(builder, stringDataOffset);\n      return Tensor.endTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SparseTensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SparseTensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SparseTensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getSizePrefixedRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    values(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    indices(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSparseTensor(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valuesOffset\n     */\n    static addValues(builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valuesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset indicesOffset\n     */\n    static addIndices(builder: flatbuffers.Builder, indicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, indicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSparseTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSparseTensor(\n        builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset, indicesOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SparseTensor.startSparseTensor(builder);\n      SparseTensor.addValues(builder, valuesOffset);\n      SparseTensor.addIndices(builder, indicesOffset);\n      SparseTensor.addDims(builder, dimsOffset);\n      return SparseTensor.endSparseTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Attribute {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Attribute\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Attribute {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getSizePrefixedRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.AttributeType\n     */\n    type(): onnxruntime.experimental.fbs.AttributeType {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.AttributeType.UNDEFINED;\n    }\n\n    /**\n     * @returns number\n     */\n    f(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    i(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    s(): string|null;\n    s(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    s(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    t(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    g(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    floats(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    floatsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Float32Array\n     */\n    floatsArray(): Float32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ?\n          new Float32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    ints(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    intsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    strings(index: number): string;\n    strings(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    strings(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    tensors(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    tensorsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph\n     */\n    graphs(index: number, obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    graphsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startAttribute(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.AttributeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.AttributeType) {\n      builder.addFieldInt32(2, type, onnxruntime.experimental.fbs.AttributeType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number f\n     */\n    static addF(builder: flatbuffers.Builder, f: number) {\n      builder.addFieldFloat32(3, f, 0.0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long i\n     */\n    static addI(builder: flatbuffers.Builder, i: flatbuffers.Long) {\n      builder.addFieldInt64(4, i, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sOffset\n     */\n    static addS(builder: flatbuffers.Builder, sOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, sOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tOffset\n     */\n    static addT(builder: flatbuffers.Builder, tOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, tOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset gOffset\n     */\n    static addG(builder: flatbuffers.Builder, gOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, gOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset floatsOffset\n     */\n    static addFloats(builder: flatbuffers.Builder, floatsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, floatsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createFloatsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addFloat32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startFloatsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset intsOffset\n     */\n    static addInts(builder: flatbuffers.Builder, intsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, intsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createIntsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startIntsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringsOffset\n     */\n    static addStrings(builder: flatbuffers.Builder, stringsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, stringsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tensorsOffset\n     */\n    static addTensors(builder: flatbuffers.Builder, tensorsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, tensorsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createTensorsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startTensorsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphsOffset\n     */\n    static addGraphs(builder: flatbuffers.Builder, graphsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, graphsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createGraphsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startGraphsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endAttribute(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createAttribute(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.AttributeType, f: number, i: flatbuffers.Long, sOffset: flatbuffers.Offset,\n        tOffset: flatbuffers.Offset, gOffset: flatbuffers.Offset, floatsOffset: flatbuffers.Offset,\n        intsOffset: flatbuffers.Offset, stringsOffset: flatbuffers.Offset, tensorsOffset: flatbuffers.Offset,\n        graphsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Attribute.startAttribute(builder);\n      Attribute.addName(builder, nameOffset);\n      Attribute.addDocString(builder, docStringOffset);\n      Attribute.addType(builder, type);\n      Attribute.addF(builder, f);\n      Attribute.addI(builder, i);\n      Attribute.addS(builder, sOffset);\n      Attribute.addT(builder, tOffset);\n      Attribute.addG(builder, gOffset);\n      Attribute.addFloats(builder, floatsOffset);\n      Attribute.addInts(builder, intsOffset);\n      Attribute.addStrings(builder, stringsOffset);\n      Attribute.addTensors(builder, tensorsOffset);\n      Attribute.addGraphs(builder, graphsOffset);\n      return Attribute.endAttribute(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Graph {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Graph\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Graph {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getSizePrefixedRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    initializers(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    initializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.ValueInfo= obj\n     * @returns onnxruntime.experimental.fbs.ValueInfo\n     */\n    nodeArgs(index: number, obj?: onnxruntime.experimental.fbs.ValueInfo): onnxruntime.experimental.fbs.ValueInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.ValueInfo())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeArgsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Node= obj\n     * @returns onnxruntime.experimental.fbs.Node\n     */\n    nodes(index: number, obj?: onnxruntime.experimental.fbs.Node): onnxruntime.experimental.fbs.Node|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Node())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    maxNodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.NodeEdge= obj\n     * @returns onnxruntime.experimental.fbs.NodeEdge\n     */\n    nodeEdges(index: number, obj?: onnxruntime.experimental.fbs.NodeEdge): onnxruntime.experimental.fbs.NodeEdge|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? (obj || new onnxruntime.experimental.fbs.NodeEdge())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SparseTensor= obj\n     * @returns onnxruntime.experimental.fbs.SparseTensor\n     */\n    sparseInitializers(index: number, obj?: onnxruntime.experimental.fbs.SparseTensor):\n        onnxruntime.experimental.fbs.SparseTensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SparseTensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    sparseInitializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startGraph(builder: flatbuffers.Builder) {\n      builder.startObject(8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset initializersOffset\n     */\n    static addInitializers(builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, initializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeArgsOffset\n     */\n    static addNodeArgs(builder: flatbuffers.Builder, nodeArgsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, nodeArgsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeArgsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeArgsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodesOffset\n     */\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, nodesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number maxNodeIndex\n     */\n    static addMaxNodeIndex(builder: flatbuffers.Builder, maxNodeIndex: number) {\n      builder.addFieldInt32(3, maxNodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeEdgesOffset\n     */\n    static addNodeEdges(builder: flatbuffers.Builder, nodeEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, nodeEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeEdgesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sparseInitializersOffset\n     */\n    static addSparseInitializers(builder: flatbuffers.Builder, sparseInitializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, sparseInitializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSparseInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSparseInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endGraph(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createGraph(\n        builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset, nodeArgsOffset: flatbuffers.Offset,\n        nodesOffset: flatbuffers.Offset, maxNodeIndex: number, nodeEdgesOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset,\n        sparseInitializersOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Graph.startGraph(builder);\n      Graph.addInitializers(builder, initializersOffset);\n      Graph.addNodeArgs(builder, nodeArgsOffset);\n      Graph.addNodes(builder, nodesOffset);\n      Graph.addMaxNodeIndex(builder, maxNodeIndex);\n      Graph.addNodeEdges(builder, nodeEdgesOffset);\n      Graph.addInputs(builder, inputsOffset);\n      Graph.addOutputs(builder, outputsOffset);\n      Graph.addSparseInitializers(builder, sparseInitializersOffset);\n      return Graph.endGraph(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Model {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Model\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Model {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getSizePrefixedRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    irVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.OperatorSetId= obj\n     * @returns onnxruntime.experimental.fbs.OperatorSetId\n     */\n    opsetImport(index: number, obj?: onnxruntime.experimental.fbs.OperatorSetId):\n        onnxruntime.experimental.fbs.OperatorSetId|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.OperatorSetId())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    opsetImportLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerName(): string|null;\n    producerName(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerName(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerVersion(): string|null;\n    producerVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    modelVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    graph(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphDocString(): string|null;\n    graphDocString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphDocString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startModel(builder: flatbuffers.Builder) {\n      builder.startObject(9);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long irVersion\n     */\n    static addIrVersion(builder: flatbuffers.Builder, irVersion: flatbuffers.Long) {\n      builder.addFieldInt64(0, irVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opsetImportOffset\n     */\n    static addOpsetImport(builder: flatbuffers.Builder, opsetImportOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, opsetImportOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOpsetImportVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOpsetImportVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerNameOffset\n     */\n    static addProducerName(builder: flatbuffers.Builder, producerNameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, producerNameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerVersionOffset\n     */\n    static addProducerVersion(builder: flatbuffers.Builder, producerVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, producerVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long modelVersion\n     */\n    static addModelVersion(builder: flatbuffers.Builder, modelVersion: flatbuffers.Long) {\n      builder.addFieldInt64(5, modelVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphOffset\n     */\n    static addGraph(builder: flatbuffers.Builder, graphOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, graphOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphDocStringOffset\n     */\n    static addGraphDocString(builder: flatbuffers.Builder, graphDocStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, graphDocStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endModel(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createModel(\n        builder: flatbuffers.Builder, irVersion: flatbuffers.Long, opsetImportOffset: flatbuffers.Offset,\n        producerNameOffset: flatbuffers.Offset, producerVersionOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, modelVersion: flatbuffers.Long, docStringOffset: flatbuffers.Offset,\n        graphOffset: flatbuffers.Offset, graphDocStringOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Model.startModel(builder);\n      Model.addIrVersion(builder, irVersion);\n      Model.addOpsetImport(builder, opsetImportOffset);\n      Model.addProducerName(builder, producerNameOffset);\n      Model.addProducerVersion(builder, producerVersionOffset);\n      Model.addDomain(builder, domainOffset);\n      Model.addModelVersion(builder, modelVersion);\n      Model.addDocString(builder, docStringOffset);\n      Model.addGraph(builder, graphOffset);\n      Model.addGraphDocString(builder, graphDocStringOffset);\n      return Model.endModel(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class KernelCreateInfos {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns KernelCreateInfos\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): KernelCreateInfos {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos): KernelCreateInfos {\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getSizePrefixedRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos):\n        KernelCreateInfos {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    nodeIndices(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndicesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint32Array\n     */\n    nodeIndicesArray(): Uint32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ?\n          new Uint32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    kernelDefHashes(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readUint64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    kernelDefHashesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startKernelCreateInfos(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeIndicesOffset\n     */\n    static addNodeIndices(builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nodeIndicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeIndicesVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeIndicesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelDefHashesOffset\n     */\n    static addKernelDefHashes(builder: flatbuffers.Builder, kernelDefHashesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, kernelDefHashesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createKernelDefHashesVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startKernelDefHashesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endKernelCreateInfos(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createKernelCreateInfos(\n        builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset,\n        kernelDefHashesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      KernelCreateInfos.startKernelCreateInfos(builder);\n      KernelCreateInfos.addNodeIndices(builder, nodeIndicesOffset);\n      KernelCreateInfos.addKernelDefHashes(builder, kernelDefHashesOffset);\n      return KernelCreateInfos.endKernelCreateInfos(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SubGraphSessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SubGraphSessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SubGraphSessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState): SubGraphSessionState {\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getSizePrefixedRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState):\n        SubGraphSessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphId(): string|null;\n    graphId(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphId(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSubGraphSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphIdOffset\n     */\n    static addGraphId(builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, graphIdOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSubGraphSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      builder.requiredField(offset, 4);  // graph_id\n      return offset;\n    }\n\n    static createSubGraphSessionState(\n        builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SubGraphSessionState.startSubGraphSessionState(builder);\n      SubGraphSessionState.addGraphId(builder, graphIdOffset);\n      SubGraphSessionState.addSessionState(builder, sessionStateOffset);\n      return SubGraphSessionState.endSubGraphSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getSizePrefixedRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.KernelCreateInfos= obj\n     * @returns onnxruntime.experimental.fbs.KernelCreateInfos|null\n     */\n    kernels(obj?: onnxruntime.experimental.fbs.KernelCreateInfos): onnxruntime.experimental.fbs.KernelCreateInfos|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.KernelCreateInfos())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SubGraphSessionState= obj\n     * @returns onnxruntime.experimental.fbs.SubGraphSessionState\n     */\n    subGraphSessionStates(index: number, obj?: onnxruntime.experimental.fbs.SubGraphSessionState):\n        onnxruntime.experimental.fbs.SubGraphSessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SubGraphSessionState())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    subGraphSessionStatesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelsOffset\n     */\n    static addKernels(builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, kernelsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset subGraphSessionStatesOffset\n     */\n    static addSubGraphSessionStates(builder: flatbuffers.Builder, subGraphSessionStatesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, subGraphSessionStatesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSubGraphSessionStatesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSubGraphSessionStatesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSessionState(\n        builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset,\n        subGraphSessionStatesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SessionState.startSessionState(builder);\n      SessionState.addKernels(builder, kernelsOffset);\n      SessionState.addSubGraphSessionStates(builder, subGraphSessionStatesOffset);\n      return SessionState.endSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class InferenceSession {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns InferenceSession\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): InferenceSession {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getSizePrefixedRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @returns boolean\n     */\n    static bufferHasIdentifier(bb: flatbuffers.ByteBuffer): boolean {\n      return bb.__has_identifier('ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    ortVersion(): string|null;\n    ortVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    ortVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Model= obj\n     * @returns onnxruntime.experimental.fbs.Model|null\n     */\n    model(obj?: onnxruntime.experimental.fbs.Model): onnxruntime.experimental.fbs.Model|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Model())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startInferenceSession(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset ortVersionOffset\n     */\n    static addOrtVersion(builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, ortVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset modelOffset\n     */\n    static addModel(builder: flatbuffers.Builder, modelOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, modelOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endInferenceSession(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishSizePrefixedInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM', true);\n    }\n\n    static createInferenceSession(\n        builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset, modelOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      InferenceSession.startInferenceSession(builder);\n      InferenceSession.addOrtVersion(builder, ortVersionOffset);\n      InferenceSession.addModel(builder, modelOffset);\n      InferenceSession.addSessionState(builder, sessionStateOffset);\n      return InferenceSession.endInferenceSession(builder);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\n\nimport {Session} from './session';\nimport {Tensor as OnnxjsTensor} from './tensor';\n\nexport class OnnxjsSessionHandler implements SessionHandler {\n  constructor(private session: Session) {\n    this.inputNames = this.session.inputNames;\n    this.outputNames = this.session.outputNames;\n  }\n\n  async dispose(): Promise<void> {}\n  inputNames: readonly string[];\n  outputNames: readonly string[];\n  async run(\n      feeds: SessionHandler.FeedsType, _fetches: SessionHandler.FetchesType,\n      _options: InferenceSession.RunOptions): Promise<SessionHandler.ReturnType> {\n    const inputMap = new Map<string, OnnxjsTensor>();\n    for (const name in feeds) {\n      if (Object.hasOwnProperty.call(feeds, name)) {\n        const feed = feeds[name];\n        inputMap.set(\n            name,\n            new OnnxjsTensor(\n                feed.dims, feed.type as OnnxjsTensor.DataType, undefined, undefined,\n                feed.data as OnnxjsTensor.NumberType));\n      }\n    }\n    const outputMap = await this.session.run(inputMap);\n    const output: SessionHandler.ReturnType = {};\n    outputMap.forEach((tensor, name) => {\n      output[name] = new Tensor(tensor.type, tensor.data, tensor.dims);\n    });\n    return output;\n  }\n  startProfiling(): void {\n    this.session.startProfiling();\n  }\n  endProfiling(): void {\n    this.session.endProfiling();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {promisify} from 'util';\n\nimport {resolveBackend, SessionHandlerType} from './backend';\nimport {ExecutionPlan} from './execution-plan';\nimport {Graph} from './graph';\nimport {Profiler} from './instrument';\nimport {Model} from './model';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nexport declare namespace Session {\n  export interface Config {\n    backendHint?: string;\n    profiler?: Profiler.Config;\n  }\n\n  export interface Context {\n    profiler: Readonly<Profiler>;\n    graphInputTypes?: Tensor.DataType[];\n    graphInputDims?: Array<readonly number[]>;\n  }\n}\n\nexport class Session {\n  constructor(config: Session.Config = {}) {\n    this._initialized = false;\n    this.backendHint = config.backendHint;\n    this.profiler = Profiler.create(config.profiler);\n    this.context = {profiler: this.profiler, graphInputTypes: [], graphInputDims: []};\n  }\n\n  get inputNames(): readonly string[] {\n    return this._model.graph.getInputNames();\n  }\n  get outputNames(): readonly string[] {\n    return this._model.graph.getOutputNames();\n  }\n\n  startProfiling() {\n    this.profiler.start();\n  }\n\n  endProfiling() {\n    this.profiler.stop();\n  }\n\n  async loadModel(uri: string): Promise<void>;\n  async loadModel(buffer: ArrayBuffer, byteOffset?: number, length?: number): Promise<void>;\n  async loadModel(buffer: Uint8Array): Promise<void>;\n  async loadModel(arg: string|ArrayBuffer|Uint8Array, byteOffset?: number, length?: number): Promise<void> {\n    await this.profiler.event('session', 'Session.loadModel', async () => {\n      // resolve backend and session handler\n      const backend = await resolveBackend(this.backendHint);\n      this.sessionHandler = backend.createSessionHandler(this.context);\n\n      this._model = new Model();\n      if (typeof arg === 'string') {\n        const isOrtFormat = arg.endsWith('.ort');\n        if (typeof process !== 'undefined' && process.versions && process.versions.node) {\n          // node\n          const buf = await promisify(readFile)(arg);\n          this.initialize(buf, isOrtFormat);\n        } else {\n          // browser\n          const response = await fetch(arg);\n          const buf = await response.arrayBuffer();\n          this.initialize(new Uint8Array(buf), isOrtFormat);\n        }\n      } else if (!ArrayBuffer.isView(arg)) {\n        // load model from ArrayBuffer\n        const arr = new Uint8Array(arg, byteOffset || 0, length || arg.byteLength);\n        this.initialize(arr);\n      } else {\n        // load model from Uint8array\n        this.initialize(arg);\n      }\n    });\n  }\n\n  private initialize(modelProtoBlob: Uint8Array, isOrtFormat?: boolean): void {\n    if (this._initialized) {\n      throw new Error('already initialized');\n    }\n\n    this.profiler.event('session', 'Session.initialize', () => {\n      // load graph\n      const graphInitializer =\n          this.sessionHandler.transformGraph ? this.sessionHandler as Graph.Initializer : undefined;\n      this._model.load(modelProtoBlob, graphInitializer, isOrtFormat);\n\n      // graph is completely initialzied at this stage , let the interested handlers know\n      if (this.sessionHandler.onGraphInitialized) {\n        this.sessionHandler.onGraphInitialized(this._model.graph);\n      }\n      // initialize each operator in the graph\n      this.initializeOps(this._model.graph);\n\n      // instantiate an ExecutionPlan object to be used by the Session object\n      this._executionPlan = new ExecutionPlan(this._model.graph, this._ops, this.profiler);\n    });\n\n    this._initialized = true;\n  }\n\n  async run(inputs: Map<string, Tensor>|Tensor[]): Promise<Map<string, Tensor>> {\n    if (!this._initialized) {\n      throw new Error('session not initialized yet');\n    }\n\n    return this.profiler.event('session', 'Session.run', async () => {\n      const inputTensors = this.normalizeAndValidateInputs(inputs);\n\n      const outputTensors = await this._executionPlan.execute(this.sessionHandler, inputTensors);\n\n      return this.createOutput(outputTensors);\n    });\n  }\n\n  private normalizeAndValidateInputs(inputs: Map<string, Tensor>|Tensor[]): Tensor[] {\n    const modelInputNames = this._model.graph.getInputNames();\n\n    // normalize inputs\n    // inputs: Tensor[]\n    if (Array.isArray(inputs)) {\n      if (inputs.length !== modelInputNames.length) {\n        throw new Error(`incorrect input array length: expected ${modelInputNames.length} but got ${inputs.length}`);\n      }\n    }\n    // convert map to array\n    // inputs: Map<string, Tensor>\n    else {\n      if (inputs.size !== modelInputNames.length) {\n        throw new Error(`incorrect input map size: expected ${modelInputNames.length} but got ${inputs.size}`);\n      }\n\n      const sortedInputs = new Array<Tensor>(inputs.size);\n      let sortedInputsIndex = 0;\n      for (let i = 0; i < modelInputNames.length; ++i) {\n        const tensor = inputs.get(modelInputNames[i]);\n        if (!tensor) {\n          throw new Error(`missing input tensor for: '${name}'`);\n        }\n        sortedInputs[sortedInputsIndex++] = tensor;\n      }\n\n      inputs = sortedInputs;\n    }\n\n    // validate dims requirements\n    // First session run - graph input data is not cached for the session\n    if (!this.context.graphInputTypes || this.context.graphInputTypes.length === 0 || !this.context.graphInputDims ||\n        this.context.graphInputDims.length === 0) {\n      const modelInputIndices = this._model.graph.getInputIndices();\n      const modelValues = this._model.graph.getValues();\n\n      const graphInputDims = new Array<readonly number[]>(modelInputIndices.length);\n\n      for (let i = 0; i < modelInputIndices.length; ++i) {\n        const graphInput = modelValues[modelInputIndices[i]];\n        graphInputDims[i] = graphInput.type!.shape.dims;\n\n        // cached for second and subsequent runs.\n        // Some parts of the framework works on the assumption that the graph and types and shapes are static\n        this.context.graphInputTypes!.push(graphInput.type!.tensorType);\n        this.context.graphInputDims!.push(inputs[i].dims);\n      }\n\n      this.validateInputTensorDims(graphInputDims, inputs, true);\n    }\n\n    // Second and subsequent session runs - graph input data is cached for the session\n    else {\n      this.validateInputTensorDims(this.context.graphInputDims, inputs, false);\n    }\n\n    // validate types requirement\n    this.validateInputTensorTypes(this.context.graphInputTypes!, inputs);\n\n    return inputs;\n  }\n\n  private validateInputTensorTypes(graphInputTypes: Tensor.DataType[], givenInputs: Tensor[]) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedType = graphInputTypes[i];\n      const actualType = givenInputs[i].type;\n      if (expectedType !== actualType) {\n        throw new Error(`input tensor[${i}] check failed: expected type '${expectedType}' but got ${actualType}`);\n      }\n    }\n  }\n\n  private validateInputTensorDims(\n      graphInputDims: Array<readonly number[]>, givenInputs: Tensor[], noneDimSupported: boolean) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      let expectedDims = graphInputDims[i];\n      const actualDims = givenInputs[i].dims;\n\n      if (!this.compareTensorDims(expectedDims, actualDims, noneDimSupported)) {\n        throw new Error(`input tensor[${i}] check failed: expected shape '[${expectedDims.join(',')}]' but got [${\n            actualDims.join(',')}]`);\n      }\n    }\n  }\n\n  private compareTensorDims(expectedDims: readonly number[], actualDims: readonly number[], noneDimSupported: boolean):\n      boolean {\n    if (expectedDims.length !== actualDims.length) {\n      return false;\n    }\n\n    for (let i = 0; i < expectedDims.length; ++i) {\n      if (expectedDims[i] !== actualDims[i] && (!noneDimSupported || expectedDims[i] !== 0) && expectedDims[i] !== null) {\n        // data shape mis-match AND not a 'None' dimension.\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private createOutput(outputTensors: Tensor[]): Map<string, Tensor> {\n    const modelOutputNames = this._model.graph.getOutputNames();\n    if (outputTensors.length !== modelOutputNames.length) {\n      throw new Error('expected number of outputs do not match number of generated outputs');\n    }\n\n    const output = new Map<string, Tensor>();\n    for (let i = 0; i < modelOutputNames.length; ++i) {\n      output.set(modelOutputNames[i], outputTensors[i]);\n    }\n\n    return output;\n  }\n\n  private initializeOps(graph: Graph): void {\n    const nodes = graph.getNodes();\n    this._ops = new Array(nodes.length);\n\n    for (let i = 0; i < nodes.length; i++) {\n      this._ops[i] = this.sessionHandler.resolve(nodes[i], this._model.opsets, graph);\n    }\n  }\n\n  private _model: Model;\n  private _initialized: boolean;\n\n  private _ops: Operator[];\n  private _executionPlan: ExecutionPlan;\n\n  private backendHint?: string;\n\n  private sessionHandler: SessionHandlerType;\n  private context: Session.Context;\n  private profiler: Readonly<Profiler>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Guid} from 'guid-typescript';\nimport Long from 'long';\n\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\nimport {onnx} from './ort-schema/protobuf/onnx';\nimport {decodeUtf8String, ProtoUtil, ShapeUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Tensor {\n  export interface DataTypeMap {\n    bool: Uint8Array;\n    float32: Float32Array;\n    float64: Float64Array;\n    string: string[];\n    int8: Int8Array;\n    uint8: Uint8Array;\n    int16: Int16Array;\n    uint16: Uint16Array;\n    int32: Int32Array;\n    uint32: Uint32Array;\n  }\n\n  export type DataType = keyof DataTypeMap;\n\n  export type StringType = Tensor.DataTypeMap['string'];\n  export type BooleanType = Tensor.DataTypeMap['bool'];\n  export type IntegerType = Tensor.DataTypeMap['int8']|Tensor.DataTypeMap['uint8']|Tensor.DataTypeMap['int16']|\n                            Tensor.DataTypeMap['uint16']|Tensor.DataTypeMap['int32']|Tensor.DataTypeMap['uint32'];\n  export type FloatType = Tensor.DataTypeMap['float32']|Tensor.DataTypeMap['float64'];\n  export type NumberType = BooleanType|IntegerType|FloatType;\n\n  export type Id = Guid;\n}\n\ntype TensorData = Tensor.DataTypeMap[Tensor.DataType];\n\ntype DataProvider = (id: Tensor.Id) => TensorData;\ntype AsyncDataProvider = (id: Tensor.Id) => Promise<TensorData>;\n\nexport class Tensor {\n  /**\n   * get the underlying tensor data\n   */\n  get data(): TensorData {\n    if (this.cache === undefined) {\n      const data = this.dataProvider!(this.dataId);\n      if (data.length !== this.size) {\n        throw new Error('Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.');\n      }\n      this.cache = data;\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the underlying string tensor data. Should only use when type is STRING\n   */\n  get stringData() {\n    if (this.type !== 'string') {\n      throw new TypeError('data type is not string');\n    }\n\n    return this.data as Tensor.StringType;\n  }\n\n  /**\n   * get the underlying integer tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL)\n   */\n  get integerData() {\n    switch (this.type) {\n      case 'uint8':\n      case 'int8':\n      case 'uint16':\n      case 'int16':\n      case 'int32':\n      case 'uint32':\n      case 'bool':\n        return this.data as Tensor.IntegerType;\n\n      default:\n        throw new TypeError('data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)');\n    }\n  }\n\n  /**\n   * get the underlying float tensor data. Should only use when type is one of the following: (FLOAT, DOUBLE)\n   */\n  get floatData() {\n    switch (this.type) {\n      case 'float32':\n      case 'float64':\n        return this.data as Tensor.FloatType;\n\n      default:\n        throw new TypeError('data type is not float (float32, float64)');\n    }\n  }\n\n  /**\n   * get the underlying number tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL, FLOAT, DOUBLE)\n   */\n  get numberData() {\n    if (this.type !== 'string') {\n      return this.data as Tensor.NumberType;\n    }\n    throw new TypeError('type cannot be non-number (string)');\n  }\n\n  /**\n   * get value of an element at the given indices\n   */\n  get(indices: readonly number[]): Tensor.DataTypeMap[Tensor.DataType][number] {\n    return this.data[ShapeUtil.indicesToOffset(indices, this.strides)];\n  }\n\n  /**\n   * set value of an element at the given indices\n   */\n  set(indices: readonly number[], value: Tensor.DataTypeMap[Tensor.DataType][number]) {\n    this.data[ShapeUtil.indicesToOffset(indices, this.strides)] = value;\n  }\n\n  /**\n   * get the underlying tensor data asynchronously\n   */\n  async getData(): Promise<TensorData> {\n    if (this.cache === undefined) {\n      this.cache = await this.asyncDataProvider!(this.dataId);\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the number of elements in the tensor\n   */\n  public readonly size: number;\n\n  private _strides: readonly number[];\n  /**\n   * get the strides for each dimension\n   */\n  get strides(): readonly number[] {\n    if (!this._strides) {\n      this._strides = ShapeUtil.computeStrides(this.dims);\n    }\n    return this._strides;\n  }\n\n  constructor(\n      /**\n       * get the dimensions of the tensor\n       */\n      public readonly dims: readonly number[],\n      /**\n       * get the type of the tensor\n       */\n      public readonly type: Tensor.DataType, private dataProvider?: DataProvider,\n      private asyncDataProvider?: AsyncDataProvider, private cache?: TensorData,\n      /**\n       * get the data ID that used to map to a tensor data\n       */\n      public readonly dataId: Guid = Guid.create()) {\n    this.size = ShapeUtil.validateDimsAndCalcSize(dims);\n    const size = this.size;\n    const empty = (dataProvider === undefined && asyncDataProvider === undefined && cache === undefined);\n\n    if (cache !== undefined) {\n      if (cache.length !== size) {\n        throw new RangeError('Input dims doesn\\'t match data length.');\n      }\n    }\n\n    if (type === 'string') {\n      if (cache !== undefined && (!Array.isArray(cache) || !cache.every(i => typeof i === 'string'))) {\n        throw new TypeError('cache should be a string array');\n      }\n\n      if (empty) {\n        this.cache = new Array<string>(size);\n      }\n    } else {\n      if (cache !== undefined) {\n        const constructor = dataviewConstructor(type);\n        if (!(cache instanceof constructor)) {\n          throw new TypeError(`cache should be type ${constructor.name}`);\n        }\n      }\n\n      if (empty) {\n        const buf = new ArrayBuffer(size * sizeof(type));\n        this.cache = createView(buf, type);\n      }\n    }\n  }\n\n  /**\n   * Construct new Tensor from a ONNX Tensor object\n   * @param tensorProto the ONNX Tensor\n   */\n  static fromProto(tensorProto: onnx.ITensorProto): Tensor {\n    if (!tensorProto) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const type = ProtoUtil.tensorDataTypeFromProto(tensorProto.dataType!);\n    const dims = ProtoUtil.tensorDimsFromProto(tensorProto.dims!);\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      tensorProto.stringData!.forEach((str, i) => {\n        value.data[i] = decodeUtf8String(str);\n      });\n\n    } else if (\n        tensorProto.rawData && typeof tensorProto.rawData.byteLength === 'number' &&\n        tensorProto.rawData.byteLength > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource =\n          new DataView(tensorProto.rawData.buffer, tensorProto.rawData.byteOffset, tensorProto.rawData.byteLength);\n      const elementSize = sizeofProto(tensorProto.dataType!);\n      const length = tensorProto.rawData.byteLength / elementSize;\n\n      if (tensorProto.rawData.byteLength % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, tensorProto.dataType!, i * elementSize);\n        dataDest[i] = n;\n      }\n    } else {\n      // populate value from array\n      let array: Array<number|Long>;\n      switch (tensorProto.dataType) {\n        case onnx.TensorProto.DataType.FLOAT:\n          array = tensorProto.floatData!;\n          break;\n        case onnx.TensorProto.DataType.INT32:\n        case onnx.TensorProto.DataType.INT16:\n        case onnx.TensorProto.DataType.UINT16:\n        case onnx.TensorProto.DataType.INT8:\n        case onnx.TensorProto.DataType.UINT8:\n        case onnx.TensorProto.DataType.BOOL:\n          array = tensorProto.int32Data!;\n          break;\n        case onnx.TensorProto.DataType.INT64:\n          array = tensorProto.int64Data!;\n          break;\n        case onnx.TensorProto.DataType.DOUBLE:\n          array = tensorProto.doubleData!;\n          break;\n        case onnx.TensorProto.DataType.UINT32:\n        case onnx.TensorProto.DataType.UINT64:\n          array = tensorProto.uint64Data!;\n          break;\n        default:\n          // should never run here\n          throw new Error('unspecific error');\n      }\n\n      if (array === null || array === undefined) {\n        throw new Error('failed to populate data from a tensorproto value');\n      }\n\n      const data = value.data;\n      if (data.length !== array.length) {\n        throw new Error('array length mismatch');\n      }\n\n      for (let i = 0; i < array.length; i++) {\n        const element = array[i];\n        if (Long.isLong(element)) {\n          data[i] = longToNumber(element, tensorProto.dataType);\n        } else {\n          data[i] = element;\n        }\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Construct new Tensor from raw data\n   * @param data the raw data object. Should be a string array for 'string' tensor, and the corresponding typed array\n   * for other types of tensor.\n   * @param dims the dimensions of the tensor\n   * @param type the type of the tensor\n   */\n  static fromData(data: Tensor.DataTypeMap[Tensor.DataType], dims: readonly number[], type: Tensor.DataType) {\n    return new Tensor(dims, type, undefined, undefined, data);\n  }\n\n  static fromOrtTensor(ortTensor: ortFbs.Tensor) {\n    if (!ortTensor) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const dims = ProtoUtil.tensorDimsFromORTFormat(ortTensor);\n    const type = ProtoUtil.tensorDataTypeFromProto(ortTensor.dataType());\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      for (let i = 0; i < ortTensor.stringDataLength(); i++) {\n        value.data[i] = ortTensor.stringData(i);\n      }\n\n    } else if (\n        ortTensor.rawDataArray() && typeof ortTensor.rawDataLength() === 'number' && ortTensor.rawDataLength() > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource = new DataView(\n          ortTensor.rawDataArray()!.buffer, ortTensor.rawDataArray()!.byteOffset, ortTensor.rawDataLength());\n      const elementSize = sizeofProto(ortTensor.dataType());\n      const length = ortTensor.rawDataLength() / elementSize;\n\n      if (ortTensor.rawDataLength() % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, ortTensor.dataType(), i * elementSize);\n        dataDest[i] = n;\n      }\n    }\n    return value;\n  }\n}\n\nfunction sizeof(type: Tensor.DataType): number {\n  switch (type) {\n    case 'bool':\n    case 'int8':\n    case 'uint8':\n      return 1;\n    case 'int16':\n    case 'uint16':\n      return 2;\n    case 'int32':\n    case 'uint32':\n    case 'float32':\n      return 4;\n    case 'float64':\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${type}`);\n  }\n}\n\nfunction sizeofProto(type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.UINT8:\n    case onnx.TensorProto.DataType.INT8:\n    case onnx.TensorProto.DataType.BOOL:\n      return 1;\n    case onnx.TensorProto.DataType.UINT16:\n    case onnx.TensorProto.DataType.INT16:\n      return 2;\n    case onnx.TensorProto.DataType.FLOAT:\n    case onnx.TensorProto.DataType.INT32:\n    case onnx.TensorProto.DataType.UINT32:\n      return 4;\n    case onnx.TensorProto.DataType.INT64:\n    case onnx.TensorProto.DataType.DOUBLE:\n    case onnx.TensorProto.DataType.UINT64:\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n\nfunction createView(dataBuffer: ArrayBuffer, type: Tensor.DataType) {\n  return new (dataviewConstructor(type))(dataBuffer);\n}\n\nfunction dataviewConstructor(type: Tensor.DataType) {\n  switch (type) {\n    case 'bool':\n    case 'uint8':\n      return Uint8Array;\n    case 'int8':\n      return Int8Array;\n    case 'int16':\n      return Int16Array;\n    case 'uint16':\n      return Uint16Array;\n    case 'int32':\n      return Int32Array;\n    case 'uint32':\n      return Uint32Array;\n    case 'float32':\n      return Float32Array;\n    case 'float64':\n      return Float64Array;\n    default:\n      // should never run to here\n      throw new Error('unspecified error');\n  }\n}\n\n// convert a long number to a 32-bit integer (cast-down)\nfunction longToNumber(i: Long, type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  // INT64, UINT32, UINT64\n  if (type === onnx.TensorProto.DataType.INT64 || type === ortFbs.TensorDataType.INT64) {\n    if (i.greaterThanOrEqual(2147483648) || i.lessThan(-2147483648)) {\n      throw new TypeError('int64 is not supported');\n    }\n  } else if (\n      type === onnx.TensorProto.DataType.UINT32 || type === ortFbs.TensorDataType.UINT32 ||\n      type === onnx.TensorProto.DataType.UINT64 || type === ortFbs.TensorDataType.UINT64) {\n    if (i.greaterThanOrEqual(4294967296) || i.lessThan(0)) {\n      throw new TypeError('uint64 is not supported');\n    }\n  } else {\n    throw new TypeError(`not a LONG type: ${onnx.TensorProto.DataType[type]}`);\n  }\n\n  return i.toNumber();\n}\n\n// read one value from TensorProto\nfunction readProto(view: DataView, type: onnx.TensorProto.DataType|ortFbs.TensorDataType, byteOffset: number): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.BOOL:\n    case onnx.TensorProto.DataType.UINT8:\n      return view.getUint8(byteOffset);\n    case onnx.TensorProto.DataType.INT8:\n      return view.getInt8(byteOffset);\n    case onnx.TensorProto.DataType.UINT16:\n      return view.getUint16(byteOffset, true);\n    case onnx.TensorProto.DataType.INT16:\n      return view.getInt16(byteOffset, true);\n    case onnx.TensorProto.DataType.FLOAT:\n      return view.getFloat32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT32:\n      return view.getInt32(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT32:\n      return view.getUint32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), false), type);\n    case onnx.TensorProto.DataType.DOUBLE:\n      return view.getFloat64(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), true), type);\n    default:\n      throw new Error(`cannot read from DataView for type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\nimport Long from 'long';\n\nimport {Graph} from './graph';\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\nimport {onnx} from './ort-schema/protobuf/onnx';\nimport {Tensor} from './tensor';\n\n// check the inputs shape before running an OP.\n// return true when the inputs pass the check\n// return false when the inputs do not fit the requirement\n// throw exception when fatal error or not implemented\nexport function checkInputsShape(inputs: Tensor[], ...expectedDimensions: number[]): boolean {\n  if (!inputs || inputs.length !== expectedDimensions.length) {\n    return false;\n  }\n  for (let i = 0; i < inputs.length; i++) {\n    if (!inputs[i].dims || inputs[i].dims.length !== expectedDimensions[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Evaluates the given expression and asserts error message if condition is unmet.\nexport function assert(expr: boolean, msg: () => string) {\n  if (!expr) {\n    throw new Error(typeof msg === 'string' ? msg : msg());\n  }\n}\n\nexport class ArrayUtil {\n  /**\n   * Verifies if 2 input arrays contain the same elements.\n   * @param n1 Array 1\n   * @param n2 Array 2\n   * @returns Whether these 2 are equal\n   */\n  static arraysEqual(\n      n1: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array,\n      n2: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array) {\n    if (n1.length !== n2.length) {\n      return false;\n    }\n    for (let i = 0; i < n1.length; i++) {\n      if (n1[i] !== n2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nexport class MatMulUtil {\n  /**\n   * Fix the input shapes for MatMul operation if they need fixing\n   * @param dimsA The shape of tensor A. Should be an array of positive integers\n   * @param dimsB The shape of tensor B. Should be an array of positive integers\n   * @returns A tuple containing the preprocessed input shapes as required by ONNX specifications\n   */\n  static preprocessInputShapes(dimsA: readonly number[], dimsB: readonly number[]):\n      [readonly number[], readonly number[]] {\n    // If the first argument is 1-D, it is promoted to a matrix by prepending\n    // a 1 to its dimensions. After matrix multiplication the prepended 1 is\n    // removed.\n    const a = (dimsA.length === 1) ? [1, dimsA[0]] : dimsA;\n\n    // If the second argument is 1-D, it is promoted to a matrix by appending\n    // a 1 to its dimensions. After matrix multiplication the appended 1 is\n    // removed.\n    const b = (dimsB.length === 1) ? [dimsB[0], 1] : dimsB;\n\n    return [a, b];\n  }\n\n  /**\n   * Fix the output shape computed for MatMul operation if it needs fixing\n   * @param outputShape The computed outputShape. Should be an array (atleast of length 2) of positive integers.\n   * This will be mutated.\n   * @param aRank The rank of tensor A.\n   * @param bRank The rank of tensor B.\n   */\n  static postprocessOutputShape(outputShape: number[], aRank: number, bRank: number) {\n    // Remove prepended dimension if first input is 1d\n    if (aRank === 1) {\n      // outputShape = outputShape.slice(0, outputShape.length - 2).concat(outputShape.slice(outputShape.length - 1));\n      outputShape.splice(outputShape.length - 2, 1);\n    }\n    // Remove appended dimension if second input is 1d\n    if (bRank === 1) {\n      outputShape.pop();\n    }\n  }\n\n  /**\n   * Calculate the expected shape when matrix multiplication\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\n  }\n}\n\nexport class BroadcastUtil {\n  /**\n   * Calculate the expected shape when broadcasting 2 tensors\n   * @param a The shape of tensor A. Should be an array of positive integers\n   * @param b The shape of tensor B. Should be an array of positive integers\n   * @param isMatMul Whether the operation is MatMul\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcShape(adims: readonly number[], bdims: readonly number[], isMatMul = false): readonly number[]|undefined {\n    const arank = adims.length;\n    const brank = bdims.length;\n    if (arank === 0) {\n      return bdims;\n    }\n    if (brank === 0) {\n      return adims;\n    }\n    const crank = Math.max(adims.length, bdims.length);\n    const cdims = new Array<number>(crank);\n\n    // calculate the last 2 dimension if it is MatMul\n    if (isMatMul) {\n      if (arank < 2 || brank < 2) {\n        return undefined;\n      }\n      const cShapeMatMul =\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\n      if (cShapeMatMul === undefined) {\n        return undefined;\n      }\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\n    }\n\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\n\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\n        return undefined;\n      }\n      cdims[crank - i] = Math.max(aLen, bLen);\n    }\n\n    return cdims;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcas\n   * @returns The calculated indices that maps to the original tensor.\n   */\n  static index(broadcastedIndices: readonly number[], originalShape: readonly number[]): number[] {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same\n    // length as the broadcasted shape, and for each dimension the index should\n    // not be out of range.\n    const originalIndices = new Array(originalShape.length);\n    BroadcastUtil.fillIndex(broadcastedIndices, originalShape, originalIndices);\n    return originalIndices;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcast\n   * @param originalIndices The mapping of broadcastedIndices to the originalIndices (output parameter - will be\n   *     mutated).\n   */\n  static fillIndex(broadcastedIndices: readonly number[], originalShape: readonly number[], originalIndices: number[]) {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same length as the\n    // broadcasted shape, and for each dimension the index should not be out of range.\n    // NOTE 2: we assume the parameter originalIndices has the same length as the originalShape\n    const dimOffset = broadcastedIndices.length - originalShape.length;\n    for (let i = 0; i < originalShape.length; i++) {\n      originalIndices[i] = broadcastedIndices[dimOffset + i] % originalShape[i];\n    }\n  }\n\n  /**\n   * Perform the broadcasting operation on the specific operator\n   * @param a The input tensor A\n   * @param b The input tensor B\n   * @param op The operator lambda function\n   * @param inplace Whether to write the result back to A.\n   * @returns The result tensor, or undefined if input not broadcastable.\n   */\n  static calc(\n      a: Tensor, b: Tensor, op: (a: string|number, b: string|number) => (string | number), inplace: boolean,\n      resultType?: Tensor.DataType): Tensor|undefined {\n    const outputShape = BroadcastUtil.calcShape(a.dims, b.dims);\n\n    if (outputShape) {\n      if (inplace && !ShapeUtil.areEqual(outputShape, a.dims)) {\n        // B is not broadcastable to A, failed to calculate inplace.\n        return undefined;\n      }\n\n      const size = ShapeUtil.size(outputShape);\n      const c = inplace ? a : new Tensor(outputShape, resultType || a.type);\n\n      // both inputs are scalars\n      if (outputShape.length === 0) {\n        c.set([], op(a.get([]), b.get([])));\n      }\n\n      // atleast one input is a non-scalar\n      else {\n        const outputIndices = new Array<number>(outputShape.length);\n        const originalIndicesA = new Array(a.dims.length);\n        const originalIndicesB = new Array(b.dims.length);\n        let valA: string|number = 0;\n        let valB: string|number = 0;\n        let isAScalar = false;\n        let isBScalar = false;\n        if (a.dims.length === 0) {\n          valA = a.get([]);\n          isAScalar = true;\n        }\n        if (b.dims.length === 0) {\n          valB = b.get([]);\n          isBScalar = true;\n        }\n        let rest: number;\n        for (let i = 0; i < size; i++) {\n          // traversal indices\n          rest = i;\n          for (let j = outputShape.length - 1; j >= 0; j--) {\n            outputIndices[j] = rest % outputShape[j];\n            rest = Math.floor(rest / outputShape[j]);\n          }\n\n          if (!isAScalar) {\n            // map outputIndices (which is actually broadcasted) to the originalIndices\n            BroadcastUtil.fillIndex(outputIndices, a.dims, originalIndicesA);\n            valA = a.get(originalIndicesA);\n          }\n          if (!isBScalar) {\n            BroadcastUtil.fillIndex(outputIndices, b.dims, originalIndicesB);\n            valB = b.get(originalIndicesB);\n          }\n\n          c.set(outputIndices, op(valA, valB));\n        }\n      }\n\n      return c;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Determine if a shape is unidirectional broadcastable to another shape\n   * @param shape The input shape\n   * @param finalShape The desired shape after broadcasting\n   */\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\n    // align shape to the right\n    const inputRank = shape.length;\n    const finalRank = finalShape.length;\n    if (inputRank > finalRank) {\n      return false;\n    }\n    for (let i = 1; i <= inputRank; i++) {\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determine the broadcasted dims in input shape based on the given output shape.\n   * Note that this function only returns the broadcasted dims.\n   * @param inputShape The input shape\n   * @param outputShape The output shape\n   * @returns The broadcasted dims in input shape.\n   */\n  static getBroadcastDims(inputShape: readonly number[], outputShape: readonly number[]): number[] {\n    const inRank = inputShape.length;\n    const dims: number[] = [];\n    for (let i = 0; i < inRank; i++) {\n      const dim = inRank - 1 - i;\n      const a = inputShape[dim] || 1;\n      const b = outputShape[outputShape.length - 1 - i] || 1;\n      if (b > 1 && a === 1) {\n        dims.unshift(dim);\n      }\n    }\n    return dims;\n  }\n}\n\n// copy array helper\n// mimics memcpy as much as possible\nexport function arrayCopyHelper(\n    target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n    blockSize: number) {\n  if (sourceIndex < 0 || sourceIndex >= source.length) {\n    throw new Error('sourceIndex out of bounds');\n  }\n  if (targetIndex < 0 || targetIndex >= target.length) {\n    throw new Error('targetIndex out of bounds');\n  }\n  if (sourceIndex + blockSize > source.length) {\n    throw new Error('source indices to be copied are outside bounds');\n  }\n  if (targetIndex + blockSize > target.length) {\n    throw new Error('target array is too small to hold result');\n  }\n\n  for (let offset = 0; offset < blockSize; offset++) {\n    target[targetIndex + offset] = source[sourceIndex + offset];\n  }\n}\n\nexport class GemmUtil {\n  // will make sure input shapes are compatible for this op\n  // and return back the shape of the output in the form of a tuple\n  // will throw exception if the input shapes are not compatible\n  static getShapeOfGemmResult(\n      leftShape: readonly number[], transLeft: boolean, rightShape: readonly number[], transRight: boolean,\n      biasShape?: readonly number[]): readonly number[] {\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\n      throw new Error('shape need to be of size 2');\n    }\n\n    let M: number;\n    let K: number;\n    let N: number;\n\n    if (transLeft) {\n      M = leftShape[1];\n      K = leftShape[0];\n    } else {\n      M = leftShape[0];\n      K = leftShape[1];\n    }\n\n    let kDim = -1;\n\n    if (transRight) {\n      N = rightShape[0];\n      kDim = 1;\n    } else {\n      N = rightShape[1];\n      kDim = 0;\n    }\n\n    if (rightShape[kDim] !== K) {\n      throw new Error('dimension mismatch');\n    }\n\n    if (M <= 0 || N <= 0 || K <= 0) {\n      throw new Error('invalid shape specified');\n    }\n\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\n      throw new Error('gemm: invalid bias shape for broadcast');\n    }\n\n    return [M, N, K];\n  }\n}\n\nexport class ProtoUtil {\n  static tensorDataTypeFromProto(typeProto: onnx.TensorProto.DataType|\n                                 onnxruntime.experimental.fbs.TensorDataType): Tensor.DataType {\n    switch (typeProto) {\n      case onnx.TensorProto.DataType.INT8:\n        return 'int8';\n      case onnx.TensorProto.DataType.UINT8:\n        return 'uint8';\n      case onnx.TensorProto.DataType.BOOL:\n        return 'bool';\n      case onnx.TensorProto.DataType.INT16:\n        return 'int16';\n      case onnx.TensorProto.DataType.UINT16:\n        return 'uint16';\n      case onnx.TensorProto.DataType.INT32:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT32:\n        return 'uint32';\n      case onnx.TensorProto.DataType.FLOAT:\n        return 'float32';\n      case onnx.TensorProto.DataType.DOUBLE:\n        return 'float64';\n      case onnx.TensorProto.DataType.STRING:\n        return 'string';\n\n      // For INT64/UINT64, reduce their value to 32-bits.\n      // Should throw exception when overflow\n      case onnx.TensorProto.DataType.INT64:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT64:\n        return 'uint32';\n\n      default:\n        throw new Error(`unsupported data type: ${onnx.TensorProto.DataType[typeProto]}`);\n    }\n  }\n\n  static tensorDataTypeStringToEnum(type: string): onnx.TensorProto.DataType {\n    switch (type) {\n      case 'int8':\n        return onnx.TensorProto.DataType.INT8;\n      case 'uint8':\n        return onnx.TensorProto.DataType.UINT8;\n      case 'bool':\n        return onnx.TensorProto.DataType.BOOL;\n      case 'int16':\n        return onnx.TensorProto.DataType.INT16;\n      case 'uint16':\n        return onnx.TensorProto.DataType.UINT16;\n      case 'int32':\n        return onnx.TensorProto.DataType.INT32;\n      case 'uint32':\n        return onnx.TensorProto.DataType.UINT32;\n      case 'float32':\n        return onnx.TensorProto.DataType.FLOAT;\n      case 'float64':\n        return onnx.TensorProto.DataType.DOUBLE;\n      case 'string':\n        return onnx.TensorProto.DataType.STRING;\n      case 'int64':\n        return onnx.TensorProto.DataType.INT64;\n      case 'uint64':\n        return onnx.TensorProto.DataType.UINT64;\n\n      default:\n        throw new Error(`unsupported data type: ${type}`);\n    }\n  }\n\n  static tensorDimsFromProto(dims: Array<number|Long>): number[] {\n    // get rid of Long type for dims\n    return dims.map(d => Long.isLong(d) ? d.toNumber() : d);\n  }\n\n  static tensorValueTypeFromProto(valueType: onnx.TypeProto.ITensor): Graph.ValueType {\n    return {\n      tensorType: ProtoUtil.tensorDataTypeFromProto(valueType.elemType!),\n      shape: {dims: ProtoUtil.tensorDimsFromProto(valueType.shape!.dim!.map(d => d.dimValue!))}\n    };\n  }\n\n  static tensorDimsFromORTFormat(tensor: onnxruntime.experimental.fbs.Tensor) {\n    const dims = [];\n    for (let i = 0; i < tensor.dimsLength(); i++) {\n      dims.push(LongUtil.longToNumber(tensor.dims(i)!));\n    }\n    return dims;\n  }\n\n  static tensorAttributesFromORTFormat(node: onnxruntime.experimental.fbs.Node) {\n    const attributes = [];\n    for (let i = 0; i < node.attributesLength(); i++) {\n      attributes.push(node.attributes(i)!);\n    }\n    return attributes;\n  }\n}\n\nexport class LongUtil {\n  // This function is called to get a number from long type of data for attribute, dim, and ir version,\n  // which values are signed integers.\n  // To make it more generic, add an optional paramter to convert to a unsigned number.\n  static longToNumber(n: Long|flatbuffers.Long|number, unsigned?: boolean) {\n    if (Long.isLong(n)) {\n      return n.toNumber();\n    } else if (n instanceof flatbuffers.Long) {\n      return Long.fromValue({low: n.low, high: n.high, unsigned: unsigned ?? false}).toNumber();\n    }\n    return n;\n  }\n  static isLong(n: unknown) {\n    return Long.isLong(n) || n instanceof flatbuffers.Long;\n  }\n}\n\nexport class ShapeUtil {\n  static size(dims: readonly number[]): number {\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\n  }\n\n  // `axis` inclusive\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\n  }\n\n  // `axis` exclusive\n  static sizeToDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\n  }\n\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\n    let size = 1;\n    for (let i = start; i < end; i++) {\n      // safety check as this method is called by multiple other methods requiring size.\n      // size cannot be 0 or negative.\n      if (dims[i] <= 0) {\n        throw new Error(\n            // eslint-disable-next-line max-len\n            'cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.');\n      }\n      size *= dims[i];\n    }\n    return size;\n  }\n\n  static computeStrides(dims: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [1];\n    }\n    const strides = new Array(rank);\n    strides[rank - 1] = 1;\n    strides[rank - 2] = dims[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * dims[i + 1];\n    }\n    return strides;\n  }\n\n  static transpose(dims: readonly number[]): readonly number[] {\n    const copy = dims.slice();\n    return copy.reverse();\n  }\n\n  static indicesToOffset(indices: readonly number[], strides: readonly number[], axis?: number): number {\n    if (axis === undefined) {\n      axis = indices.length;\n    }\n    let offset = 0;\n    for (let i = 0; i < axis; ++i) {\n      offset += strides[i] * indices[i];\n    }\n    return offset;\n  }\n\n  static offsetToIndices(offset: number, strides: readonly number[]): readonly number[] {\n    const rank = strides.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [offset * strides[0]];\n    }\n    const indices: number[] = new Array(strides.length);\n    for (let i = 0; i < indices.length - 1; ++i) {\n      indices[i] = Math.floor(offset / strides[i]);\n      offset -= indices[i] * strides[i];\n    }\n    indices[indices.length - 1] = offset;\n    return indices;\n  }\n\n  /**\n   * normailze axis of range [-r, r) into [0, r).\n   */\n  static normalizeAxis(axis: number, tensorRank: number): number {\n    if (axis < -tensorRank && axis >= tensorRank) {\n      throw new Error('unsupported axis for this operation.');\n    }\n    return axis < 0 ? axis + tensorRank : axis;\n  }\n\n  static normalizeAxes(axes: readonly number[], tensorRank: number): number[] {\n    return axes.map(x => this.normalizeAxis(x, tensorRank));\n  }\n\n  // Increment an index into a tensor (in lexicographic\n  // ordering), wrapping around the specified upper_bound.\n  /**\n   * Increment an index into a tensor (in lexicographic ordering), wrapping around the specified upper_bound.\n   * @param index Given index to increment (Will be mutated)\n   * @param dims The dimensions of the tensor for which the given index corresponds to\n   * @param axisToIncrementOn The 1-indexed axis to increment on. If undefined, axisToIncrementOn == rank\n   */\n  static incrementIndex(index: number[], dims: readonly number[], axisToIncrementOn?: number) {\n    if (dims.length === 0 || index.length === 0) {\n      throw new Error('Index incrementing unsupported for scalar Tensor');\n    }\n    if (axisToIncrementOn === undefined) {\n      axisToIncrementOn = dims.length;\n    } else {\n      if (axisToIncrementOn <= 0 || axisToIncrementOn > dims.length) {\n        throw new Error('Incorrect axis to increment on');\n      }\n    }\n\n    for (let k = axisToIncrementOn - 1; k >= 0; --k) {\n      index[k]++;\n      if (index[k] < dims[k]) {\n        break;\n      }\n      index[k] = 0;\n    }\n  }\n\n  /**\n   * Produces a new dimensions array based on the values in the 'originalDimensions' and 'shape' array\n   * Used in Reshape\n   * @param originalDims Original Shape array\n   * @param shapeHints array containing values to compute the new dimensions\n   * For example:\n   * originalDims = [2,2] and shapeHints = [0,-1] will return [2,2]\n   * originalDims = [2,2] and shapeHints = [4] will return [4]\n   * originalDims = [2,2] and shapeHints = [5] will throw an exception\n   * https://github.com/onnx/onnx/blob/main/docs/Operators.md#Reshape\n   */\n\n  static calculateReshapedDims(originalDims: readonly number[], shapeHints: ArrayLike<number>): number[] {\n    // reshape to a Scalar Tensor\n    if (shapeHints.length === 0) {\n      if (originalDims.length === 0 || ShapeUtil.size(originalDims) === 1) {\n        return [];\n      } else {\n        throw new Error('cannot reshape to a scalar Tensor');\n      }\n    }\n\n    const nDims = shapeHints.length;\n    const reshapedDims = new Array<number>(nDims);\n    let unknownDimension = -1;\n    let newTensorSize = 1;\n    for (let i = 0; i < nDims; i++) {\n      if (shapeHints[i] < -1) {\n        throw new Error('a dimension in shape hints cannot be less than -1');\n      }\n      if (shapeHints[i] === -1) {\n        if (unknownDimension !== -1) {\n          throw new Error('at most one dimension in shape hints can be -1');\n        }\n        unknownDimension = i;\n      } else {\n        if (shapeHints[i] === 0) {\n          if (i >= originalDims.length) {\n            throw new Error('the dimension with value zero exceeds the dimension size of the input tensor');\n          }\n          reshapedDims[i] = originalDims[i];\n        } else {\n          reshapedDims[i] = shapeHints[i];\n        }\n        newTensorSize *= reshapedDims[i];\n      }\n    }\n\n    const oldTensorSize = ShapeUtil.size(originalDims);\n    if (unknownDimension !== -1) {\n      if (oldTensorSize % newTensorSize !== 0) {\n        throw new Error(`the input tensor cannot be reshaped to the requested shape. Input shape: [${\n            originalDims}] Output shape: [${shapeHints}]`);\n      }\n      reshapedDims[unknownDimension] = oldTensorSize / newTensorSize;\n    }\n    // validate sizes from originalDims and reshapedDims match\n    else {\n      if (newTensorSize !== oldTensorSize) {\n        throw new Error('reshapedDims and originalDims don\\'t have matching sizes');\n      }\n    }\n    return reshapedDims;\n  }\n\n  /**\n   * Sorts a given array based on the indices in the Perm array\n   * Used in Transpose\n   * @param a Array to be sorted such as dims or strides\n   * @param perm Perm given; if null a will be reversed\n   */\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\n    if (perm) {\n      return perm.map((v) => a[v]);\n    } else {\n      return a.slice().reverse();\n    }\n  }\n\n  /**\n   * Pads a given shape according to the padding values\n   * @param dims shape of the Tensor to be padded\n   * @param pad pad values\n   */\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\n  }\n\n  /**\n   * Determines if the two shapes are identical\n   * @param shape1\n   * @param shape2\n   */\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\n    if (shape1.length !== shape2.length) {\n      return false;\n    }\n    return shape1.every((v, i) => v === shape2[i]);\n  }\n\n  /**\n   * Validates if the given `dims` or `shape` is valid in ONNX.js context and returns data size\n   * @param dims - input `dims` that needs to be checked\n   */\n  static validateDimsAndCalcSize(dims: readonly number[]): number {\n    if (dims.length > 6) {\n      throw new TypeError('Only rank 0 to 6 is supported for tensor shape.');\n    }\n    let size = 1;\n    for (const n of dims) {\n      if (!Number.isInteger(n)) {\n        throw new TypeError(`Invalid shape: ${n} is not an integer`);\n      }\n      if (n < 0 || n > 2147483647) {\n        throw new TypeError(`Invalid shape: length ${n} is not allowed`);\n      }\n      size *= n;\n    }\n    return size;\n  }\n\n  /**\n   * Determines the shape of output tensor y = flatten(x, axis)\n   * @param dims - shape of input tensor\n   * @param axis - flatten axis, in the range [-r, r]\n   */\n  static flattenShape(dims: readonly number[], axis: number): readonly number[] {\n    if (axis < 0) {\n      axis += dims.length;\n    }\n    const total = dims.reduce((x, y) => x * y, 1);\n    const right = dims.slice(axis).reduce((x, y) => x * y, 1);\n    const outputDims = [total / right, right];\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = squeeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - squeeze axes\n   */\n  static squeezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>();\n\n    // sanity check\n    axes = ShapeUtil.normalizeAxes(axes, dims.length);\n\n    for (let i = 0; i < dims.length; i++) {\n      const inSqueezeList = axes.indexOf(i) >= 0;\n      if (inSqueezeList && dims[i] !== 1) {\n        throw new Error('squeeze an axis of size different than 1');\n      }\n\n      if ((axes.length === 0 && dims[i] > 1) || (axes.length > 0 && !inSqueezeList)) {\n        outputDims.push(dims[i]);\n      }\n    }\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = unsqueeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - unsqueeze axes\n   */\n  static unsqueezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>(dims.length + axes.length);\n\n    // initialize the array elements to 0\n    outputDims.fill(0);\n\n    // set all axes indices to 1 in outputDims and check for duplicates\n    for (let i = 0; i < axes.length; i++) {\n      const axis = ShapeUtil.normalizeAxis(axes[i], outputDims.length);\n      if (axis >= outputDims.length) {\n        throw new Error('\\'axes\\' has an out of range axis');\n      }\n      if (outputDims[axis] !== 0) {\n        throw new Error('\\'axes\\' has a duplicate axis');\n      }\n\n      outputDims[axis] = 1;\n    }\n\n    // fill in the zero entries of outputDims with the input tensor's shape\n    let inputDimsIterator = 0;\n    for (let i = 0; i < outputDims.length; i++) {\n      if (outputDims[i] === 0) {\n        outputDims[i] = dims[inputDimsIterator++];\n      }\n    }\n\n    // sanity check assertion. 'inputDimsIterator'\n    // should be equal to the length of 'dims'\n    if (inputDimsIterator !== dims.length) {\n      throw new Error('the unsqueezed dimension could not be established');\n    }\n\n    return outputDims;\n  }\n}\n\n// bunch of helper methods that do a variety of math operations\nexport class MathUtil {\n  // y = (x*x) + y\n  static sqr(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += Math.pow(source[sourceIndex + offset], 2);\n    }\n  }\n\n  // y = ax + y\n  static axpy(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, alpha: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += (alpha * source[sourceIndex + offset]);\n    }\n  }\n\n  // y = pow(x, b)\n  static powx(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, b: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = Math.pow(source[sourceIndex + offset], b);\n    }\n  }\n\n  // y = x * y\n  static mul(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = (source[sourceIndex + offset] * target[targetIndex + offset]);\n    }\n  }\n}\n\nexport class SplitUtil {\n  /**\n   * Calculates new Shapes from existing one and the splits given along the axis provides\n   * @param dims Shape of the Tensor to be splitted into two or more Shapes\n   * @param axis The dimension along which the Tensor will be split\n   * @param splits Offsets for the start of each split\n   */\n  static splitShape(dims: readonly number[], axis: number, split: number[], numOutputs?: number):\n      [number[][], number[]] {\n    if (split.length === 0) {\n      if (!numOutputs) {\n        throw new Error('need to know number of outputs when the \\'split\\' attribute is not specified');\n      }\n      SplitUtil.determineSplit(dims[axis], numOutputs, split);\n    }\n\n    const shapes: number[][] = [];\n    const offsets = [0];\n    for (let i = 0; i < split.length; ++i) {\n      if (i !== 0) {\n        offsets.push(offsets[i - 1] + split[i - 1]);\n      }\n      const shape = dims.slice();\n      shape[axis] = split[i];\n      shapes.push(shape);\n    }\n    return [shapes, offsets];\n  }\n\n  static determineSplit(numElementsAlongAxis: number, numOutputs: number, split: number[]) {\n    // If 'split' is not specified by the user, we need to partition the number of elements equally among the outputs\n    if (numElementsAlongAxis % numOutputs !== 0) {\n      throw new Error('cannot split tensor to equal sized parts');\n    }\n    for (let i = 0; i < numOutputs; ++i) {\n      split.push(numElementsAlongAxis / numOutputs);\n    }\n  }\n}\n\nexport class ReduceUtil {\n  /**\n   * Perform reduce operations on the specific operator\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduce(\n      a: Tensor, axes: number[], keepdims: boolean, op1: (b: number) => number,\n      op2: (a: number, b: number) => number): Tensor {\n    const dims = a.dims.slice(0);\n    // if axes is not set, perform reduce on all axes\n    if (axes.length === 0) {\n      dims.forEach((d, ind) => axes.push(ind));\n    }\n    // get a temporary broadcastable output shape\n    const outputDims = ReduceUtil.calcReduceShape(dims, axes, true);\n\n    // loop through the output and calculate result one by one\n    const size = ShapeUtil.size(outputDims);\n    const y = new Tensor(outputDims, a.type);\n    const strides = ShapeUtil.computeStrides(outputDims);\n    const inputStrides = ShapeUtil.computeStrides(dims);\n    const indicesY = new Array(dims.length);\n    for (let i = 0; i < size; i++) {\n      const indices = ShapeUtil.offsetToIndices(i, strides);\n      // map index\n      BroadcastUtil.fillIndex(indices, dims, indicesY);\n      y.set(\n          indices,\n          ReduceUtil.calcReduceByAxis(\n              a.numberData, axes, dims, 0, ShapeUtil.indicesToOffset(indicesY, inputStrides), op1, op2));\n    }\n\n    if (keepdims) {\n      return y;\n    } else {\n      // keepdims == 0, calculate the expected shape\n      return new Tensor(\n          ReduceUtil.calcReduceShape(dims, axes, keepdims), y.type, undefined, undefined, y.data, y.dataId);\n    }\n  }\n\n  /**\n   * Perform reduce operations on the specific operator on specific axes\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param dims The input dimension.\n   * @param curAxisInd Index in axes specifying the current dimension along\n   *      which the tensor will be reduced\n   * @param pos The current index of element to perform operation\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduceByAxis(\n      input: Tensor.NumberType, axes: number[], dims: number[], curAxisInd: number, pos: number,\n      op1: (b: number) => number, op2: (a: number, b: number) => number): number {\n    let res = 0;\n    if (curAxisInd >= axes.length) {\n      return op1(input[pos]);\n    }\n    const axis = axes[curAxisInd];\n    const step = axis >= dims.length ? 1 : ShapeUtil.size(dims.slice(axis + 1));\n    for (let i = 0; i < dims[axis]; i++) {\n      res = i === 0 ? ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2) :\n                      op2(res, ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2));\n      pos += step;\n    }\n    return res;\n  }\n\n  /**\n   * Calculate the expected shape of a reduce operation\n   * @param dims The input tensor dimension\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   */\n  static calcReduceShape(dims: readonly number[], axes: readonly number[], keepDims: boolean): number[] {\n    const outputDims = dims.slice();\n    for (let i = 0; i < axes.length; i++) {\n      if (keepDims) {\n        outputDims[axes[i]] = 1;\n      } else {\n        outputDims[axes[i]] = 0;\n      }\n    }\n    return outputDims.filter(dim => dim !== 0);\n  }\n}\n\nexport class PoolConvUtil {\n  /**\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   */\n  static adjustPoolAttributes(\n      isGlobalOperator: boolean, inputDims: readonly number[], kernelShape: number[], strides: number[],\n      dilations: number[], pads: number[]) {\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\n    }\n\n    if (isGlobalOperator) {\n      // adjust kernel shape to cover the input dims\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        if (dim >= kernelShape.length) {\n          kernelShape.push(inputDims[dim + 2]);\n        } else {\n          kernelShape[dim] = inputDims[dim + 2];\n        }\n      }\n    }\n\n    // adjust strides length to match kernel shape length\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < strides.length) {\n        if (strides[dim] < 0) {\n          throw new Error('strides should be greater than or equal to 1');\n        }\n      } else {\n        strides.push(1);\n      }\n    }\n\n    // adjust dilation value\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < dilations.length) {\n        if (dilations[dim] < 0) {\n          throw new Error('dilations should be greater than or equal to 1');\n        }\n      } else {\n        dilations.push(1);\n      }\n    }\n\n    // adjust pads length to match 2 * kernel shape length\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\n      if (dim < pads.length) {\n        if (pads[dim] < 0) {\n          throw new Error('pad should be greater than or equal to 1');\n        }\n      } else {\n        pads.push(0);\n      }\n    }\n\n    // sanity checks for values in kernel shapes and pads\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (kernelShape[dim] <= 0) {\n        throw new Error('kernel shapes need to be greater than 0');\n      }\n\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\n        throw new Error('pads should be smaller than kernel');\n      }\n    }\n  }\n\n  // adjust pad values based on 'autoPad' attribute\n  static adjustPadsBasedOnAutoPad(\n      inputDims: readonly number[], strides: readonly number[], dilations: readonly number[],\n      kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (!autoPad) {\n      return;\n    }\n\n    if (pads.length !== 2 * (inputDims.length - 2)) {\n      throw new Error('length of pads should be twice the length of data dimensions');\n    }\n\n    if (strides.length !== (inputDims.length - 2)) {\n      throw new Error('length of strides should be the length of data dimensions');\n    }\n\n    if (kernelShape.length !== (inputDims.length - 2)) {\n      throw new Error('length of kernel shapes should be the length of data dimensions');\n    }\n\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\n      PoolConvUtil.adjustPadAndReturnShape(\n          inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n          autoPad);\n    }\n  }\n\n  /**\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computePoolOutputShape(\n      isGlobalOperator: boolean, inputDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0) {\n      throw new Error('input shape must be of size greater than 0');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], inputDims[1]];\n\n    PoolConvUtil.computeShapeHelper(\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  /**\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\n   * @param strides Stride along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computeConvOutputShape(\n      inputDims: readonly number[], filterDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], filterDims[0]];\n\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\n  // called by computePoolOutputShape() and computeConvOutputShape()\n  // adjust pads based on 'autoPad' attribute prior to shape computation\n  private static computeShapeHelper(\n      isGlobalOperator: boolean, inputDims: readonly number[], outputDims: number[], strides: readonly number[],\n      dilations: readonly number[], kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (isGlobalOperator) {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(1);\n      }\n    } else {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n            autoPad));\n      }\n    }\n  }\n\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\n  private static adjustPadAndReturnShape(\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\n      padTailIndex: number, autoPad?: string): number {\n    const dkernel = dilation * (kernel - 1) + 1;\n    if (autoPad && autoPad !== 'NOTSET') {\n      switch (autoPad) {\n        case 'VALID':\n          pads[padHeadIndex] = 0;\n          pads[padTailIndex] = 0;\n          return Math.floor(((inSize - dkernel) / stride) + 1);\n        case 'SAME_LOWER':\n        case 'SAME_UPPER':\n          if (dilation !== 1) {\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\n          } else {\n            const legacyTargetSize = (inSize + stride - 1) / stride;\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\n            pads[padHeadIndex] =\n                (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\n            return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\n          }\n        default:\n          throw new Error('Unsupported AutoPad type');\n      }\n    } else {\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\n    }\n  }\n}\n\nexport const MIN_CLIP = -3.4028234663852886e+38;\nexport const MAX_CLIP = 3.4028234663852886e+38;\n\nexport function decodeUtf8String(buffer: Uint8Array): string {\n  return new TextDecoder().decode(buffer);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n// This file is generated by /js/scripts/update-version.ts\n// Do not modify file content manually.\n\nexport const version = '1.16.0';\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\n\nimport {configureLogger, LOG_DEBUG} from './log';\nimport {TensorView} from './tensor';\nimport {createGpuDataManager, GpuDataManager} from './webgpu/gpu-data-manager';\nimport {RunFunction, WEBGPU_OP_RESOLVE_RULES} from './webgpu/op-resolve-rules';\nimport {ProgramManager} from './webgpu/program-manager';\nimport {ComputeContext, GpuData, GpuDataType, ProgramInfo, ProgramInfoLoader} from './webgpu/types';\n\n/**\n * get a unique key representing the program from the program info,input shapes and types.\n *\n * @returns a unique key is a shorter string than the shader source, which contains all the information to identify a\n * program. if the key is the same, the program shader source should be the same, so we can reuse the program.\n *\n */\nconst getProgramInfoUniqueKey =\n    (programInfo: ProgramInfo|ProgramInfoLoader, inputTensorShapes: ReadonlyArray<TensorView['dims']>,\n     inputGpuDataTypes: readonly GpuDataType[]): string => {\n      const inputTensorShapesToString = inputTensorShapes.map(d => `${d.join(',')}`).join('_');\n      const inputGpuDataTypesToString = inputGpuDataTypes.join('_');\n      let key = programInfo.name;\n      if (programInfo.cacheHint) {\n        key += '[' + programInfo.cacheHint + ']';\n      }\n      key += ':' + inputTensorShapesToString + ';' + inputGpuDataTypesToString;\n      return key;\n    };\n\n/**\n * this class is designed to store status and being used as a singleton for JSEP. It will be passed to jsepInit() as\n * the first parameter so that it is stored for future use.\n */\nexport class WebGpuBackend {\n  device: GPUDevice;\n  /**\n   * an instance of GpuDataManager to manage a GpuDataId -> GpuBuffer mapping\n   */\n  gpuDataManager: GpuDataManager;\n  /**\n   * an instance of ProgramManager to build and run WebGPU compute shader program, and manage a ProgramKey -> Program\n   * artifacts mapping\n   */\n  programManager: ProgramManager;\n\n  /**\n   * representing the kernel ID of which is currently being computed (CPU code perspective).\n   * `null` means no kernel is being computed.\n   * only one kernel can be computed at a moment.\n   */\n  currentKernelId: number|null = null;\n  /**\n   * a list of temporary GPU data for the current kernel. should release when the kernel done computation.\n   */\n  private temporaryData: GpuData[];\n  /**\n   * a KernelID -> a GPU data list, which stores persistent GPU data owned by the specific kernel.\n   */\n  private kernelPersistentData: Map<number, GpuData[]>;\n  /**\n   * a KernelID -> a custom data, which stores custom data owned by the specific kernel.\n   */\n  private kernelCustomData: Map<number, {[key: string]: unknown}>;\n  /**\n   * get the custom data of the current kernel\n   */\n  get currentKernelCustomData(): {[key: string]: unknown} {\n    if (this.currentKernelId === null) {\n      throw new Error('currentKernelCustomData(): currentKernelId is null. (should not happen)');\n    }\n\n    let data = this.kernelCustomData.get(this.currentKernelId);\n    if (!data) {\n      data = {};\n      this.kernelCustomData.set(this.currentKernelId, data);\n    }\n\n    return data;\n  }\n\n  /**\n   * a KernelID -> kernel info mapping. value is [ name, run function, [optional] preprocess_attribute_once function ]\n   */\n  kernels: Map<number, [string, RunFunction, [((attribute: unknown) => unknown) | undefined, unknown]]>;\n\n  commandEncoder: GPUCommandEncoder|null = null;\n  computePassEncoder: GPUComputePassEncoder|null = null;\n  pendingDispatchNumber = 0;\n\n  profilingEnabled = false;\n  profilingQuerySet: GPUQuerySet;\n  profilingTimeBase?: bigint;\n\n  async initialize(env: Env): Promise<void> {\n    if (!navigator.gpu) {\n      // WebGPU is not available.\n      throw new Error('WebGpuBackend: WebGPU is not available.');\n    }\n\n    const adapter = await navigator.gpu.requestAdapter();\n    if (!adapter) {\n      throw new Error('WebGpuBackend: Failed to get GPU adapter.');\n    }\n\n    const deviceDescriptor: GPUDeviceDescriptor = {\n      requiredLimits: {\n        maxComputeWorkgroupStorageSize: adapter.limits.maxComputeWorkgroupStorageSize,\n        maxComputeWorkgroupsPerDimension: adapter.limits.maxComputeWorkgroupsPerDimension,\n        maxStorageBufferBindingSize: adapter.limits.maxStorageBufferBindingSize,\n      }\n    };\n    // WebGPU Spec: Timestamp Queries Inside Passes\n    // https://github.com/gpuweb/gpuweb/blob/main/proposals/timestamp-query-inside-passes.md\n    if (adapter.features.has('timestamp-query-inside-passes') && env.webgpu.profilingMode === 'default') {\n      this.profilingEnabled = true;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      deviceDescriptor.requiredFeatures = ['timestamp-query-inside-passes' as any];\n    }\n\n    this.device = await adapter.requestDevice(deviceDescriptor);\n    this.gpuDataManager = createGpuDataManager(this);\n    this.programManager = new ProgramManager(this);\n    this.kernels = new Map();\n    this.kernelPersistentData = new Map();\n    this.kernelCustomData = new Map();\n\n    // set up flags for logger\n    configureLogger(env.logLevel!, !!env.debug);\n\n    // TODO: set up flags\n\n    this.device.onuncapturederror = ev => {\n      if (ev.error instanceof GPUValidationError) {\n        // eslint-disable-next-line no-console\n        console.error(`An uncaught WebGPU validation error was raised: ${ev.error.message}`);\n      }\n    };\n\n    if (this.profilingEnabled) {\n      this.profilingQuerySet = this.device.createQuerySet({\n        type: 'timestamp',\n        count: 2,\n      });\n    }\n  }\n\n  dispose(): void {\n    // currently, we do not do anything in this function. In all known use cases, we don't have the requirement to\n    // actually dispose the WebGpuBackend instance, because it's always used as a singleton.\n    //\n    // revisit this place if we get real requirement to dispose the instance.\n  }\n\n  getCommandEncoder(): GPUCommandEncoder {\n    if (!this.commandEncoder) {\n      this.commandEncoder = this.device.createCommandEncoder();\n    }\n    return this.commandEncoder;\n  }\n\n  getComputePassEncoder(): GPUComputePassEncoder {\n    if (!this.computePassEncoder) {\n      this.computePassEncoder = this.getCommandEncoder().beginComputePass();\n    }\n    return this.computePassEncoder;\n  }\n\n  endComputePass(): void {\n    if (this.computePassEncoder) {\n      this.computePassEncoder.end();\n      this.computePassEncoder = null;\n    }\n  }\n\n  flush(): void {\n    this.endComputePass();\n    this.device.queue.submit([this.getCommandEncoder().finish()]);\n    this.gpuDataManager.refreshPendingBuffers();\n    this.commandEncoder = null;\n    this.pendingDispatchNumber = 0;\n  }\n\n  /**\n   * run a WebGPU program.\n   * @param program either a ProgramInfo instance containing metadata including the shader code, or a function that\n   * can be called and return a ProgramInfo instance\n   * @param inputs a TensorView array. each element represents a value already exists in GPU.\n   * @param outputIndices an indices array. each element can be either -1 (temporary data), -2 (persistent data) or an\n   * index to the kernel's output.\n   * @param createKernelOutput a callback function that create a value to kernel's output with the given index\n   * @param createIntermediateOutput a callback function that create a value as a intermediate value, either temporary\n   * or persistent (owned by the current kernel)\n   * @returns a TensorView array representing the result.\n   */\n  run(program: ProgramInfoLoader|ProgramInfo, inputs: readonly TensorView[], outputIndices: readonly number[],\n      createKernelOutput: (index: number, dataType: number, dims: readonly number[]) => TensorView,\n      createIntermediateOutput: (dataType: number, dims: readonly number[]) => TensorView): TensorView[] {\n    if (inputs.length !== program.inputTypes.length) {\n      throw new Error(`Input size must be equal to ${program.inputTypes.length}.`);\n    }\n\n    // create info for inputs\n    const inputDatas: GpuData[] = [];\n    for (let i = 0; i < inputs.length; ++i) {\n      const gpuData = this.gpuDataManager.get(inputs[i].data);\n      if (!gpuData) {\n        throw new Error(`no GPU data for input: ${inputs[i].data}`);\n      }\n      inputDatas[i] = gpuData;\n    }\n\n    const key = getProgramInfoUniqueKey(program, inputs.map(i => i.dims), inputDatas.map(i => i.type));\n    let artifact = this.programManager.getArtifact(key);\n    const programInfo = artifact ?\n        artifact.programInfo :\n        (typeof (program as ProgramInfoLoader).get === 'function' ? (program as ProgramInfoLoader).get() :\n                                                                    (program as ProgramInfo));\n\n    // check output indices\n    const validatedOutputIndices = outputIndices.length === 0 ? programInfo.outputs.map((_, i) => i) : outputIndices;\n    if (validatedOutputIndices.length !== programInfo.outputs.length) {\n      throw new Error(`Output size ${validatedOutputIndices.length} must be equal to ${programInfo.outputs.length}.`);\n    }\n\n    // create info for outputs\n    const outputTensorViews: TensorView[] = [];\n    const outputDatas: GpuData[] = [];\n    for (let i = 0; i < programInfo.outputs.length; ++i) {\n      // value -1 and -2 are used for creating temporary and persistent outputs. so -2, -1 and 0, 1, 2, ... are valid\n      // output indices. see type definition of ComputeContextInputsOutputsMapping for more details.\n      if (!Number.isInteger(validatedOutputIndices[i]) || validatedOutputIndices[i] < -2 ||\n          validatedOutputIndices[i] >= programInfo.outputs.length) {\n        throw new Error(`Invalid output index: ${validatedOutputIndices[i]}`);\n      }\n      const isTemporary = validatedOutputIndices[i] === -1;\n      const isPersistent = validatedOutputIndices[i] === -2;\n      const tensorView = (isTemporary || isPersistent) ?\n          createIntermediateOutput(programInfo.outputs[i].dataType, programInfo.outputs[i].dims) :\n          createKernelOutput(validatedOutputIndices[i], programInfo.outputs[i].dataType, programInfo.outputs[i].dims);\n      const gpuData = this.gpuDataManager.get(tensorView.data);\n      if (!gpuData) {\n        throw new Error(`no GPU data for output: ${tensorView.data}`);\n      }\n      if (isTemporary) {\n        this.temporaryData.push(gpuData);\n      }\n      if (isPersistent) {\n        let persistentData = this.kernelPersistentData.get(this.currentKernelId!);\n        if (!persistentData) {\n          persistentData = [];\n          this.kernelPersistentData.set(this.currentKernelId!, persistentData);\n        }\n        persistentData.push(gpuData);\n      }\n      outputTensorViews.push(tensorView);\n      outputDatas.push(gpuData);\n    }\n\n    const normalizedDispatchGroup = this.programManager.normalizeDispatchGroupSize(programInfo.dispatchGroup(inputs));\n\n    if (!artifact) {\n      artifact = this.programManager.build(programInfo, normalizedDispatchGroup);\n      this.programManager.setArtifact(key, artifact);\n    }\n\n    LOG_DEBUG(\n        'info',\n        () => `[ProgramManager] run \"${programInfo.name}\" (key=${key}) with ${normalizedDispatchGroup[0]}x${\n            normalizedDispatchGroup[1]}x${normalizedDispatchGroup[2]}`);\n    this.programManager.run(artifact, inputDatas, outputDatas, normalizedDispatchGroup);\n\n    return outputTensorViews;\n  }\n\n  upload(gpuDataId: number, data: Uint8Array): void {\n    this.gpuDataManager.upload(gpuDataId, data);\n  }\n\n  memcpy(src: number, dst: number): void {\n    this.gpuDataManager.memcpy(src, dst);\n  }\n\n  async download(gpuDataId: number, getTargetBuffer: () => Uint8Array): Promise<void> {\n    const arrayBuffer = await this.gpuDataManager.download(gpuDataId);\n\n    // the underlying buffer may be changed after the async function is called. so we use a getter function to make sure\n    // the buffer is up-to-date.\n    const data = getTargetBuffer();\n    data.set(new Uint8Array(arrayBuffer, 0, data.byteLength));\n  }\n\n  alloc(size: number): number {\n    return this.gpuDataManager.create(size).id;\n  }\n\n  free(ptr: number): number {\n    return this.gpuDataManager.release(ptr);\n  }\n\n  createKernel(name: string, kernelId: number, attribute: unknown): void {\n    const op = WEBGPU_OP_RESOLVE_RULES.get(name);\n    if (!op) {\n      throw new Error(`kernel not implemented: ${name}`);\n    }\n\n    this.kernels.set(kernelId, [name, op[0], [op[1], attribute]]);\n  }\n\n  releaseKernel(kernelId: number): void {\n    const persistentData = this.kernelPersistentData.get(kernelId);\n    if (persistentData) {\n      for (const data of persistentData) {\n        this.gpuDataManager.release(data.id);\n      }\n      this.kernelPersistentData.delete(kernelId);\n    }\n\n    this.kernelCustomData.delete(kernelId);\n    this.kernels.delete(kernelId);\n  }\n\n  computeKernel(kernelId: number, context: ComputeContext): number {\n    const kernel = this.kernels.get(kernelId);\n    if (!kernel) {\n      throw new Error(`kernel not created: ${kernelId}`);\n    }\n    const [name, kernelEntry, attributes] = kernel;\n    if (this.currentKernelId !== null) {\n      throw new Error(`kernel \"${name}\" is not allowed to be called recursively`);\n    }\n    this.currentKernelId = kernelId;\n\n    // parse attributes if necessary\n    if (attributes[0]) {\n      attributes[1] = attributes[0](attributes[1]);\n      attributes[0] = undefined;\n    }\n\n    LOG_DEBUG('info', () => `[WebGPU] Start to run kernel \"${name}\"...`);\n\n    this.temporaryData = [];\n    try {\n      kernelEntry(context, attributes[1]);\n      return 0;  // ORT_OK\n    } catch (e) {\n      LOG_DEBUG('warning', `[WebGPU] Kernel \"${name}\" failed. Error: ${e}`);\n      return 1;  // ORT_FAIL\n    } finally {\n      for (const data of this.temporaryData) {\n        this.gpuDataManager.release(data.id);\n      }\n      this.temporaryData = [];\n      this.currentKernelId = null;\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\n\nimport {OrtWasmModule} from '../binding/ort-wasm';\nimport {DataType, getTensorElementSize} from '../wasm-common';\n\nimport {WebGpuBackend} from './backend-webgpu';\nimport {LOG_DEBUG} from './log';\nimport {TensorView} from './tensor';\nimport {ShapeUtil} from './util';\nimport {ComputeContext, ComputeContextInputsOutputsMapping, ProgramInfo, ProgramInfoLoader} from './webgpu/types';\n\n/* eslint-disable no-bitwise */\n\nclass TensorViewImpl implements TensorView {\n  constructor(\n      private module: OrtWasmModule, public readonly dataType: number, public readonly data: number,\n      public readonly dims: readonly number[]) {}\n\n  getFloat32Array(): Float32Array {\n    if (this.dataType !== DataType.float) {\n      throw new Error('Invalid data type');\n    }\n    const elementCount = ShapeUtil.size(this.dims);\n    return elementCount === 0 ? new Float32Array() :\n                                new Float32Array(this.module.HEAP8.buffer, this.data, elementCount);\n  }\n\n  getBigInt64Array(): BigInt64Array {\n    if (this.dataType !== DataType.int64) {\n      throw new Error('Invalid data type');\n    }\n    const elementCount = ShapeUtil.size(this.dims);\n    return elementCount === 0 ? new BigInt64Array() :\n                                new BigInt64Array(this.module.HEAP8.buffer, this.data, elementCount);\n  }\n\n  getInt32Array(): Int32Array {\n    if (this.dataType !== DataType.int32) {\n      throw new Error('Invalid data type');\n    }\n    const elementCount = ShapeUtil.size(this.dims);\n    return elementCount === 0 ? new Int32Array() : new Int32Array(this.module.HEAP8.buffer, this.data, elementCount);\n  }\n\n  reshape(newDims: readonly number[]): TensorView {\n    if (ShapeUtil.size(newDims) !== ShapeUtil.size(this.dims)) {\n      throw new Error('Invalid new shape');\n    }\n    return new TensorViewImpl(this.module, this.dataType, this.data, newDims);\n  }\n}\n\nclass ComputeContextImpl implements ComputeContext {\n  readonly opKernelContext: number;\n  readonly inputs: readonly TensorView[];\n  get kernelCustomData(): {[key: string]: unknown} {\n    return this.backend.currentKernelCustomData;\n  }\n  get customDataBuffer(): Uint8Array {\n    return this.module.HEAPU8.subarray(this.customDataOffset, this.customDataOffset + this.customDataSize);\n  }\n  private customDataOffset = 0;\n  private customDataSize = 0;\n  constructor(private module: OrtWasmModule, private backend: WebGpuBackend, contextDataOffset: number) {\n    const heapU32 = module.HEAPU32;\n\n    // extract context data\n    let dataIndex = (contextDataOffset >> 2);\n    this.opKernelContext = heapU32[dataIndex++];\n    const inputCount = heapU32[dataIndex++];\n    this.customDataOffset = heapU32[dataIndex++];\n    this.customDataSize = heapU32[dataIndex++];\n\n    const inputs: TensorView[] = [];\n    for (let i = 0; i < inputCount; i++) {\n      const dataType = heapU32[dataIndex++];\n      const data = heapU32[dataIndex++];\n      const dim = heapU32[dataIndex++];\n      const dims: number[] = [];\n      for (let d = 0; d < dim; d++) {\n        dims.push(heapU32[dataIndex++]);\n      }\n      inputs.push(new TensorViewImpl(module, dataType, data, dims));\n    }\n    this.inputs = inputs;\n  }\n\n  compute(program: ProgramInfoLoader|ProgramInfo, inputsOutputsMapping?: ComputeContextInputsOutputsMapping):\n      TensorView[] {\n    // prepare inputs. inputs should always be valid data.\n    const mappedInputs =\n        inputsOutputsMapping?.inputs?.map(i => typeof i === 'number' ? this.inputs[i] : i) ?? this.inputs;\n    // prepare outputs.\n    const outputIndices = inputsOutputsMapping?.outputs ?? [];\n    const createKernelOutput = (index: number, dataType: number, dims: readonly number[]): TensorView =>\n        new TensorViewImpl(this.module, dataType, this.output(index, dims), dims);\n    const createTemporaryOutput = (dataType: number, dims: readonly number[]): TensorView => {\n      const elementSize = getTensorElementSize(dataType);\n      if (!elementSize) {\n        throw new Error(`Unsupported data type: ${dataType}`);\n      }\n      const bufferSize = elementSize * ShapeUtil.size(dims);\n      return new TensorViewImpl(this.module, dataType, this.backend.gpuDataManager.create(bufferSize).id, dims);\n    };\n    return this.backend.run(program, mappedInputs, outputIndices, createKernelOutput, createTemporaryOutput);\n  }\n\n  output(index: number, dims: readonly number[]): number {\n    const stack = this.module.stackSave();\n    try {\n      const data = this.module.stackAlloc((1 + dims.length) * 4 /* sizeof(size_t) */);\n      let offset = data >> 2;\n      this.module.HEAPU32[offset++] = dims.length;\n      for (let i = 0; i < dims.length; i++) {\n        this.module.HEAPU32[offset++] = dims[i];\n      }\n      return this.module._JsepOutput(this.opKernelContext, index, data);\n    } finally {\n      this.module.stackRestore(stack);\n    }\n  }\n}\n\nexport const init = async(module: OrtWasmModule, env: Env): Promise<void> => {\n  const init = module.jsepInit;\n  if (init && navigator.gpu) {\n    if (!env.wasm.simd) {\n      throw new Error(\n          'Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using WebGPU EP');\n    }\n    const backend = new WebGpuBackend();\n    await backend.initialize(env);\n\n    init(\n        // backend\n        {backend},\n\n        // jsepAlloc()\n        (size: number) => backend.alloc(size),\n\n        // jsepFree()\n        (ptr: number) => backend.free(ptr),\n\n        // jsepCopy(src, dst, size, isSourceGpu)\n        (src: number, dst: number, size: number, isSourceGpu = false) => {\n          if (isSourceGpu) {\n            LOG_DEBUG('verbose', () => `[WebGPU] jsepCopyGpuToGpu: src=${src}, dst=${dst}, size=${size}`);\n            backend.memcpy(src, dst);\n          } else {\n            LOG_DEBUG('verbose', () => `[WebGPU] jsepCopyCpuToGpu: dataOffset=${src}, gpuDataId=${dst}, size=${size}`);\n            const data = module.HEAPU8.subarray(src, src + size);\n            backend.upload(dst, data);\n          }\n        },\n\n        // jsepCopyAsync(src, dst, size)\n        async(gpuDataId: number, dataOffset: number, size: number):\n            Promise<void> => {\n              LOG_DEBUG(\n                  'verbose',\n                  () => `[WebGPU] jsepCopyGpuToCpu: gpuDataId=${gpuDataId}, dataOffset=${dataOffset}, size=${size}`);\n\n              await backend.download(gpuDataId, () => module.HEAPU8.subarray(dataOffset, dataOffset + size));\n            },\n\n        // jsepCreateKernel\n        (name: string, kernel: number, attribute: unknown) => backend.createKernel(name, kernel, attribute),\n\n        // jsepReleaseKernel\n        (kernel: number) => backend.releaseKernel(kernel),\n\n        // jsepRun\n        (kernel: number, contextDataOffset: number) => {\n          LOG_DEBUG('verbose', () => `[WebGPU] jsepRun: kernel=${kernel}, contextDataOffset=${contextDataOffset}`);\n          const context = new ComputeContextImpl(module, backend, contextDataOffset);\n          return backend.computeKernel(kernel, context);\n        });\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\n\nimport {logLevelStringToEnum} from '../wasm-common';\n\ntype LogLevel = NonNullable<Env['logLevel']>;\ntype MessageString = string;\ntype MessageFunction = () => string;\ntype Message = MessageString|MessageFunction;\n\nconst logLevelPrefix = ['V', 'I', 'W', 'E', 'F'];\n\nconst doLog = (level: number, message: string): void => {\n  // eslint-disable-next-line no-console\n  console.log(`[${logLevelPrefix[level]},${new Date().toISOString()}]${message}`);\n};\n\nlet configLogLevel: LogLevel|undefined;\nlet debug: boolean|undefined;\n\nexport const configureLogger = ($configLogLevel: LogLevel, $debug: boolean): void => {\n  configLogLevel = $configLogLevel;\n  debug = $debug;\n};\n\n/**\n * A simple logging utility to log messages to the console.\n */\nexport const LOG = (logLevel: LogLevel, msg: Message): void => {\n  const messageLevel = logLevelStringToEnum(logLevel);\n  const configLevel = logLevelStringToEnum(configLogLevel);\n  if (messageLevel >= configLevel) {\n    doLog(messageLevel, typeof msg === 'function' ? msg() : msg);\n  }\n};\n\n/**\n * A simple logging utility to log messages to the console. Only logs when debug is enabled.\n */\nexport const LOG_DEBUG: typeof LOG = (...args: Parameters<typeof LOG>) => {\n  if (debug) {\n    LOG(...args);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable no-param-reassign */\n\nexport class MatMulUtil {\n  /**\n   * Calculate the expected shape when matrix multiplication\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\n  }\n}\n\n\nexport class BroadcastUtil {\n  /**\n   * Calculate the expected shape when broadcasting 2 tensors\n   * @param a The shape of tensor A. Should be an array of positive integers\n   * @param b The shape of tensor B. Should be an array of positive integers\n   * @param isMatMul Whether the operation is MatMul\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcShape(adims: readonly number[], bdims: readonly number[], isMatMul = false): readonly number[]|undefined {\n    const arank = adims.length;\n    const brank = bdims.length;\n    if (arank === 0) {\n      return bdims;\n    }\n    if (brank === 0) {\n      return adims;\n    }\n    const crank = Math.max(adims.length, bdims.length);\n    const cdims = new Array<number>(crank);\n\n    // calculate the last 2 dimension if it is MatMul\n    if (isMatMul) {\n      if (arank < 2 || brank < 2) {\n        return undefined;\n      }\n      const cShapeMatMul =\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\n      if (cShapeMatMul === undefined) {\n        return undefined;\n      }\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\n    }\n\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\n\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\n        return undefined;\n      }\n      cdims[crank - i] = Math.max(aLen, bLen);\n    }\n\n    return cdims;\n  }\n\n  /**\n   * Determine if a shape is unidirectional broadcastable to another shape\n   * @param shape The input shape\n   * @param finalShape The desired shape after broadcasting\n   */\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\n    // align shape to the right\n    const inputRank = shape.length;\n    const finalRank = finalShape.length;\n    if (inputRank > finalRank) {\n      return false;\n    }\n    for (let i = 1; i <= inputRank; i++) {\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\n\nexport class ShapeUtil {\n  /**\n   * calculate the size (number of elements)\n   */\n  static size(dims: readonly number[]): number {\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\n  }\n\n  /**\n   * calculate the size (number of elements) from the given axis (inclusive)\n   */\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\n  }\n\n  /**\n   * calculate the size (number of elements) to the given axis (exclusive)\n   */\n  static sizeToDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\n  }\n\n  /**\n   * calculate the size (number of elements) from and to the given axis [start, end)\n   */\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\n    let size = 1;\n    for (let i = start; i < end; i++) {\n      // safety check as this method is called by multiple other methods requiring size.\n      // size cannot be negative.\n      if (dims[i] < 0) {\n        throw new Error(\n            // eslint-disable-next-line max-len\n            'cannot get valid size from specified dimension range. Most likely the range contains negative values in them.');\n      }\n      size *= dims[i];\n    }\n    return size;\n  }\n\n  static computeStrides(dims: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [1];\n    }\n    const strides = new Array(rank);\n    strides[rank - 1] = 1;\n    strides[rank - 2] = dims[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * dims[i + 1];\n    }\n    return strides;\n  }\n\n  /**\n   * normailze axis of range [-r, r) into [0, r).\n   */\n  static normalizeAxis(axis: number, tensorRank: number): number {\n    if (axis < -tensorRank && axis >= tensorRank) {\n      throw new Error('unsupported axis for this operation.');\n    }\n    return axis < 0 ? axis + tensorRank : axis;\n  }\n\n  static normalizeAxes(axes: readonly number[], tensorRank?: number): number[] {\n    return axes.map(x => this.normalizeAxis(x, tensorRank ?? axes.length));\n  }\n\n  /**\n   * Sorts a given array based on the indices in the Perm array\n   * Used in Transpose\n   * @param a Array to be sorted such as dims or strides\n   * @param perm Perm given; if null a will be reversed\n   */\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\n    if (perm) {\n      return perm.map((v) => a[v]);\n    } else {\n      return a.slice().reverse();\n    }\n  }\n\n  /**\n   * Pads a given shape according to the padding values\n   * @param dims shape of the Tensor to be padded\n   * @param pad pad values\n   */\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\n  }\n\n  /**\n   * Determines if the two shapes are identical\n   * @param shape1\n   * @param shape2\n   */\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\n    if (shape1.length !== shape2.length) {\n      return false;\n    }\n    return shape1.every((v, i) => v === shape2[i]);\n  }\n}\n\nexport class PoolConvUtil {\n  /**\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   */\n  static adjustPoolAttributes(\n      isGlobalOperator: boolean, inputDims: readonly number[], kernelShape: number[], strides: number[],\n      dilations: number[], pads: number[]): void {\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\n    }\n\n    if (isGlobalOperator) {\n      // adjust kernel shape to cover the input dims\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        if (dim >= kernelShape.length) {\n          kernelShape.push(inputDims[dim + 2]);\n        } else {\n          kernelShape[dim] = inputDims[dim + 2];\n        }\n      }\n    }\n\n    // adjust strides length to match kernel shape length\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < strides.length) {\n        if (strides[dim] < 0) {\n          throw new Error('strides should be greater than or equal to 1');\n        }\n      } else {\n        strides.push(1);\n      }\n    }\n\n    // adjust dilation value\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < dilations.length) {\n        if (dilations[dim] < 0) {\n          throw new Error('dilations should be greater than or equal to 1');\n        }\n      } else {\n        dilations.push(1);\n      }\n    }\n\n    // adjust pads length to match 2 * kernel shape length\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\n      if (dim < pads.length) {\n        if (pads[dim] < 0) {\n          throw new Error('pad should be greater than or equal to 1');\n        }\n      } else {\n        pads.push(0);\n      }\n    }\n\n    // sanity checks for values in kernel shapes and pads\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (kernelShape[dim] <= 0) {\n        throw new Error('kernel shapes need to be greater than 0');\n      }\n\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\n        throw new Error('pads should be smaller than kernel');\n      }\n    }\n  }\n\n  // adjust pad values based on 'autoPad' attribute\n  static adjustPadsBasedOnAutoPad(\n      inputDims: readonly number[], strides: readonly number[], dilations: readonly number[],\n      kernelShape: readonly number[], pads: number[], isChannelLast: boolean, autoPad?: string): void {\n    if (!autoPad) {\n      return;\n    }\n\n    if (pads.length !== 2 * (inputDims.length - 2)) {\n      throw new Error('length of pads should be twice the length of data dimensions');\n    }\n\n    if (strides.length !== (inputDims.length - 2)) {\n      throw new Error('length of strides should be the length of data dimensions');\n    }\n\n    if (kernelShape.length !== (inputDims.length - 2)) {\n      throw new Error('length of kernel shapes should be the length of data dimensions');\n    }\n\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\n      PoolConvUtil.adjustPadAndReturnShape(\n          inputDims[dim + (isChannelLast ? 1 : 2)], strides[dim], dilations[dim], kernelShape[dim], pads, dim,\n          dim + inputDims.length - 2, autoPad);\n    }\n  }\n\n  /**\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computePoolOutputShape(\n      isGlobalOperator: boolean, inputDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0) {\n      throw new Error('input shape must be of size greater than 0');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], inputDims[1]];\n\n    PoolConvUtil.computeShapeHelper(\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  /**\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\n   * @param strides Stride along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computeConvOutputShape(\n      inputDims: readonly number[], filterDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], filterDims[0]];\n\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\n  // called by computePoolOutputShape() and computeConvOutputShape()\n  // adjust pads based on 'autoPad' attribute prior to shape computation\n  private static computeShapeHelper(\n      isGlobalOperator: boolean, inputDims: readonly number[], outputDims: number[], strides: readonly number[],\n      dilations: readonly number[], kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (isGlobalOperator) {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(1);\n      }\n    } else {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n            autoPad));\n      }\n    }\n  }\n\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\n  private static adjustPadAndReturnShape(\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\n      padTailIndex: number, autoPad?: string): number {\n    const dkernel = dilation * (kernel - 1) + 1;\n    if (autoPad && autoPad !== 'NOTSET') {\n      switch (autoPad) {\n        case 'VALID':\n          pads[padHeadIndex] = 0;\n          pads[padTailIndex] = 0;\n          return Math.floor(((inSize - dkernel) / stride) + 1);\n        case 'SAME_LOWER':\n        case 'SAME_UPPER':\n          if (dilation !== 1) {\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\n          } else {\n            const legacyTargetSize = (inSize + stride - 1) / stride;\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\n            pads[padHeadIndex] =\n                (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\n            return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\n          }\n        default:\n          throw new Error('Unsupported AutoPad type');\n      }\n    } else {\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\n    }\n  }\n}\n\nexport class GemmUtil {\n  // will make sure input shapes are compatible for this op\n  // and return back the shape of the output in the form of a tuple\n  // will throw exception if the input shapes are not compatible\n  static getShapeOfGemmResult(\n      leftShape: readonly number[], transLeft: boolean, rightShape: readonly number[], transRight: boolean,\n      biasShape?: readonly number[]): readonly number[] {\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\n      throw new Error('shape need to be of size 2');\n    }\n\n    let M: number;\n    let K: number;\n    let N: number;\n\n    if (transLeft) {\n      M = leftShape[1];\n      K = leftShape[0];\n    } else {\n      M = leftShape[0];\n      K = leftShape[1];\n    }\n\n    let kDim = -1;\n\n    if (transRight) {\n      N = rightShape[0];\n      kDim = 1;\n    } else {\n      N = rightShape[1];\n      kDim = 0;\n    }\n\n    if (rightShape[kDim] !== K) {\n      throw new Error('dimension mismatch');\n    }\n\n    if (M <= 0 || N <= 0 || K <= 0) {\n      throw new Error('invalid shape specified');\n    }\n\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\n      throw new Error('gemm: invalid bias shape for broadcast');\n    }\n\n    return [M, N, K];\n  }\n}\n\n\nexport const MIN_CLIP = -3.4028234663852886e+38;\nexport const MAX_CLIP = 3.4028234663852886e+38;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nclass AttributeWithCacheKeyImpl {\n  constructor(attribute: Record<string, unknown>) {\n    Object.assign(this, attribute);\n  }\n\n  private _cacheKey: string;\n  public get cacheKey(): string {\n    if (!this._cacheKey) {\n      this._cacheKey =\n          Object.getOwnPropertyNames(this).sort().map(name => `${(this as Record<string, unknown>)[name]}`).join(';');\n    }\n    return this._cacheKey;\n  }\n}\n\nexport interface AttributeWithCacheKey {\n  readonly cacheKey: string;\n}\n\n/**\n * create a new object from the given attribute, and add a cacheKey property to it\n */\nexport const createAttributeWithCacheKey = <T extends Record<string, unknown>>(attribute: T): T&AttributeWithCacheKey =>\n    new AttributeWithCacheKeyImpl(attribute) as unknown as T & AttributeWithCacheKey;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {WebGpuBackend} from '../backend-webgpu';\nimport {LOG_DEBUG} from '../log';\n\nimport {GpuData, GpuDataId, GpuDataType} from './types';\n\n/**\n * manages GpuDataId -> GpuBuffer\n */\nexport interface GpuDataManager {\n  /**\n   * copy data from CPU to GPU.\n   */\n  upload(id: GpuDataId, data: Uint8Array): void;\n  /**\n   * copy data from GPU to GPU.\n   */\n  memcpy(sourceId: GpuDataId, destinationId: GpuDataId): void;\n  /**\n   * create new data on GPU.\n   */\n  create(size: number, usage?: number): GpuData;\n  /**\n   * get GPU data by ID.\n   */\n  get(id: GpuDataId): GpuData|undefined;\n  /**\n   * release the data on GPU by ID.\n   *\n   * @return size of the data released\n   */\n  release(id: GpuDataId): number;\n  /**\n   * copy data from GPU to CPU.\n   */\n  download(id: GpuDataId): Promise<ArrayBufferLike>;\n\n  /**\n   * refresh the buffers that marked for release.\n   *\n   * when release() is called, the buffer is not released immediately. this is because we need to wait for the commands\n   * to be submitted to the GPU. this function is called after the commands are submitted so that the buffers can be\n   * actually released.\n   */\n  refreshPendingBuffers(): void;\n\n  /**\n   * destroy all gpu buffers. Call this when the session.release is called.\n   */\n  dispose(): void;\n}\n\ninterface StorageCacheValue {\n  gpuData: GpuData;\n  originalSize: number;\n}\n\ninterface DownloadCacheValue {\n  data: Promise<ArrayBufferLike>;\n}\n\n/**\n * normalize the buffer size so that it fits the 128-bits (16 bytes) alignment.\n */\nconst calcNormalizedBufferSize = (size: number) => Math.ceil(size / 16) * 16;\n\nlet guid = 0;\nconst createNewGpuDataId = () => guid++;\n\nclass GpuDataManagerImpl implements GpuDataManager {\n  // GPU Data ID => GPU Data ( storage buffer )\n  storageCache: Map<GpuDataId, StorageCacheValue>;\n\n  // GPU Data ID => GPU Data ( read buffer )\n  downloadCache: Map<GpuDataId, DownloadCacheValue>;\n\n  // pending buffers for uploading ( data is unmapped )\n  private buffersForUploadingPending: GPUBuffer[];\n  // pending buffers for computing\n  private buffersPending: GPUBuffer[];\n\n  private freeBuffers: Map<number, GPUBuffer[]>;\n\n  constructor(private backend: WebGpuBackend) {\n    this.storageCache = new Map();\n    this.downloadCache = new Map();\n    this.freeBuffers = new Map();\n    this.buffersForUploadingPending = [];\n    this.buffersPending = [];\n  }\n\n  upload(id: GpuDataId, data: Uint8Array): void {\n    const srcArrayBuffer = data.buffer;\n    const srcOffset = data.byteOffset;\n    const srcLength = data.byteLength;\n    const size = calcNormalizedBufferSize(srcLength);\n\n    // get destination gpu buffer\n    const gpuDataCache = this.storageCache.get(id);\n    if (!gpuDataCache) {\n      throw new Error('gpu data for uploading does not exist');\n    }\n    if (gpuDataCache.originalSize !== srcLength) {\n      throw new Error(`inconsistent data size. gpu data size=${gpuDataCache.originalSize}, data size=${srcLength}`);\n    }\n\n    // create gpu buffer\n    const gpuBufferForUploading = this.backend.device.createBuffer(\n        // eslint-disable-next-line no-bitwise\n        {mappedAtCreation: true, size, usage: GPUBufferUsage.MAP_WRITE | GPUBufferUsage.COPY_SRC});\n\n    // copy (upload) data\n    const arrayBuffer = gpuBufferForUploading.getMappedRange();\n    new Uint8Array(arrayBuffer).set(new Uint8Array(srcArrayBuffer, srcOffset, srcLength));\n    gpuBufferForUploading.unmap();\n\n\n    // GPU copy\n    const commandEncoder = this.backend.getCommandEncoder();\n    this.backend.endComputePass();\n    commandEncoder.copyBufferToBuffer(gpuBufferForUploading, 0, gpuDataCache.gpuData.buffer, 0, size);\n\n    LOG_DEBUG('verbose', () => `[WebGPU] GpuDataManager.upload(id=${id})`);\n\n    this.buffersForUploadingPending.push(gpuBufferForUploading);\n  }\n\n  memcpy(sourceId: GpuDataId, destinationId: GpuDataId): void {\n    // get source gpu buffer\n    const sourceGpuDataCache = this.storageCache.get(sourceId);\n    if (!sourceGpuDataCache) {\n      throw new Error('source gpu data for memcpy does not exist');\n    }\n    // get destination gpu buffer\n    const destinationGpuDataCache = this.storageCache.get(destinationId);\n    if (!destinationGpuDataCache) {\n      throw new Error('destination gpu data for memcpy does not exist');\n    }\n    if (sourceGpuDataCache.originalSize !== destinationGpuDataCache.originalSize) {\n      throw new Error('inconsistent source and destination gpu data size');\n    }\n    const size = calcNormalizedBufferSize(sourceGpuDataCache.originalSize);\n\n    // GPU copy\n    const commandEncoder = this.backend.getCommandEncoder();\n    this.backend.endComputePass();\n    commandEncoder.copyBufferToBuffer(\n        sourceGpuDataCache.gpuData.buffer, 0, destinationGpuDataCache.gpuData.buffer, 0, size);\n  }\n\n  // eslint-disable-next-line no-bitwise\n  create(size: number, usage = GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST): GpuData {\n    const bufferSize = calcNormalizedBufferSize(size);\n\n    let gpuBuffer;\n    let buffers = this.freeBuffers.get(bufferSize);\n    if (!buffers) {\n      buffers = [];\n      this.freeBuffers.set(bufferSize, buffers);\n    }\n    if (buffers.length > 0) {\n      gpuBuffer = buffers.pop() as GPUBuffer;\n    } else {\n      // create gpu buffer\n      gpuBuffer = this.backend.device.createBuffer({size: bufferSize, usage});\n    }\n\n    const gpuData = {id: createNewGpuDataId(), type: GpuDataType.default, buffer: gpuBuffer};\n    this.storageCache.set(gpuData.id, {gpuData, originalSize: size});\n\n    LOG_DEBUG('verbose', () => `[WebGPU] GpuDataManager.create(size=${size}) => id=${gpuData.id}`);\n    return gpuData;\n  }\n\n  get(id: GpuDataId): GpuData|undefined {\n    return this.storageCache.get(id)?.gpuData;\n  }\n\n  release(id: GpuDataId): number {\n    const cachedData = this.storageCache.get(id);\n    if (!cachedData) {\n      throw new Error('releasing data does not exist');\n    }\n\n    LOG_DEBUG('verbose', () => `[WebGPU] GpuDataManager.release(id=${id}), gpuDataId=${cachedData.gpuData.id}`);\n\n    this.storageCache.delete(id);\n    this.buffersPending.push(cachedData.gpuData.buffer);\n    // cachedData.gpuData.buffer.destroy();\n\n    const downloadingData = this.downloadCache.get(id);\n    if (downloadingData) {\n      this.downloadCache.delete(id);\n    }\n\n    return cachedData.originalSize;\n  }\n\n  async download(id: GpuDataId): Promise<ArrayBufferLike> {\n    const downloadData = this.downloadCache.get(id);\n    if (downloadData) {\n      return downloadData.data;\n    }\n\n    const cachedData = this.storageCache.get(id);\n    if (!cachedData) {\n      throw new Error('data does not exist');\n    }\n\n    const commandEncoder = this.backend.getCommandEncoder();\n    this.backend.endComputePass();\n    const bufferSize = calcNormalizedBufferSize(cachedData.originalSize);\n    const gpuReadBuffer = this.backend.device.createBuffer(\n        // eslint-disable-next-line no-bitwise\n        {size: bufferSize, usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ});\n    commandEncoder.copyBufferToBuffer(\n        cachedData.gpuData.buffer /* source buffer */, 0 /* source offset */, gpuReadBuffer /* destination buffer */,\n        0 /* destination offset */, bufferSize /* size */\n    );\n    this.backend.flush();\n\n    const readDataPromise = new Promise<ArrayBuffer>((resolve) => {\n      gpuReadBuffer.mapAsync(GPUMapMode.READ).then(() => {\n        const data = gpuReadBuffer.getMappedRange().slice(0);\n        gpuReadBuffer.destroy();\n        resolve(data);\n      });\n    });\n\n    this.downloadCache.set(id, {data: readDataPromise});\n\n    return readDataPromise;\n  }\n\n  refreshPendingBuffers(): void {\n    for (const buffer of this.buffersForUploadingPending) {\n      // upload buffer is only useful in the session creation time. So we don't need to reuse them in session running.\n      buffer.destroy();\n    }\n    this.buffersForUploadingPending = [];\n    for (const buffer of this.buffersPending) {\n      // Put the pending buffer to freeBuffers list instead of really destroying it for buffer reusing.\n      this.freeBuffers.get(buffer.size)!.push(buffer);\n    }\n    this.buffersPending = [];\n  }\n\n  dispose() {\n    this.freeBuffers.forEach((buffers) => {\n      buffers.forEach(buffer => {\n        buffer.destroy();\n      });\n    });\n\n    this.storageCache.forEach((storage) => {\n      storage.gpuData.buffer.destroy();\n    });\n\n    this.storageCache = new Map();\n    this.downloadCache = new Map();\n    this.freeBuffers = new Map();\n  }\n}\n\nexport const createGpuDataManager = (...args: ConstructorParameters<typeof GpuDataManagerImpl>): GpuDataManager =>\n    new GpuDataManagerImpl(...args);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport * as binaryOps from './ops/binary-op';\nimport {concat, parseConcatAttributes} from './ops/concat';\nimport {conv, parseConvAttributes} from './ops/conv';\nimport {convTranspose, parseConvTransposeAttributes} from './ops/conv-transpose';\nimport {expand} from './ops/expand';\nimport {gemm, parseGemmAttributes} from './ops/gemm';\nimport {matMul} from './ops/matmul';\nimport * as pool from './ops/pool';\nimport {parseReduceAttributes, reduceL1, reduceL2, reduceLogSum, reduceLogSumExp, reduceMax, reduceMean, reduceMin, reduceProd, reduceSum, reduceSumSquare} from './ops/reduce';\nimport {parseSliceAttributes, slice} from './ops/slice';\nimport {parseSplitAttributes, split} from './ops/split';\nimport {parseTransposeAttributes, transpose} from './ops/transpose';\nimport * as unaryOps from './ops/unary-op';\nimport {ComputeContext} from './types';\n\nexport type RunFunction = (context: ComputeContext, attribute?: unknown) => void;\nexport type ParseAttributeFunction = (attributeRaw: unknown) => unknown;\nexport type OperatorImplementation = [RunFunction]|[RunFunction, ParseAttributeFunction];\n\nexport const WEBGPU_OP_RESOLVE_RULES: Map<string, OperatorImplementation> = new Map([\n  ['Abs', [unaryOps.abs]],\n  ['Acos', [unaryOps.acos]],\n  ['Acosh', [unaryOps.acosh]],\n  ['Add', [binaryOps.add]],\n  ['Asin', [unaryOps.asin]],\n  ['Asinh', [unaryOps.asinh]],\n  ['Atan', [unaryOps.atan]],\n  ['Atanh', [unaryOps.atanh]],\n  // TODO: support new attributes for AveragePool-10\n  ['AveragePool', [pool.averagePool, pool.parseAveragePoolAttributes]],\n  ['Ceil', [unaryOps.ceil]],\n  ['ClipV10', [unaryOps.clipV10]],\n  ['Clip', [unaryOps.clip]],\n  ['Concat', [concat, parseConcatAttributes]],\n  ['Conv', [conv, parseConvAttributes]],\n  ['ConvTranspose', [convTranspose, parseConvTransposeAttributes]],\n  ['Cos', [unaryOps.cos]],\n  ['Cosh', [unaryOps.cosh]],\n  ['Div', [binaryOps.div]],\n  ['Elu', [unaryOps.elu, unaryOps.parseAlphaAttributes]],\n  ['Erf', [unaryOps.erf]],\n  ['Exp', [unaryOps.exp]],\n  ['Expand', [expand]],\n  ['Floor', [unaryOps.floor]],\n  ['Gemm', [gemm, parseGemmAttributes]],\n  ['GlobalAveragePool', [pool.globalAveragePool, pool.parseGlobalAveragePoolAttributes]],\n  ['GlobalMaxPool', [pool.globalMaxPool, pool.parseGlobalMaxPoolAttributes]],\n  ['LeakyRelu', [unaryOps.leakyRelu, unaryOps.parseAlphaAttributes]],\n  ['MatMul', [matMul]],\n  // TODO: support new attributes for MaxPool-8 and MaxPool-10\n  ['MaxPool', [pool.maxPool, pool.parseMaxPoolAttributes]],\n  ['Mul', [binaryOps.mul]],\n  ['Neg', [unaryOps.neg]],\n  ['Pow', [binaryOps.pow]],\n  ['Reciprocal', [unaryOps.reciprocal]],\n  ['ReduceMin', [reduceMin, parseReduceAttributes]],\n  ['ReduceMean', [reduceMean, parseReduceAttributes]],\n  ['ReduceMax', [reduceMax, parseReduceAttributes]],\n  ['ReduceSum', [reduceSum, parseReduceAttributes]],\n  ['ReduceProd', [reduceProd, parseReduceAttributes]],\n  ['ReduceL1', [reduceL1, parseReduceAttributes]],\n  ['ReduceL2', [reduceL2, parseReduceAttributes]],\n  ['ReduceLogSum', [reduceLogSum, parseReduceAttributes]],\n  ['ReduceLogSumExp', [reduceLogSumExp, parseReduceAttributes]],\n  ['ReduceSumSquare', [reduceSumSquare, parseReduceAttributes]],\n  ['Relu', [unaryOps.relu]],\n  ['Sigmoid', [unaryOps.sigmoid]],\n  ['Sin', [unaryOps.sin]],\n  ['Sinh', [unaryOps.sinh]],\n  ['Slice', [slice, parseSliceAttributes]],\n  ['Split', [split, parseSplitAttributes]],\n  ['Sqrt', [unaryOps.sqrt]],\n  ['Sub', [binaryOps.sub]],\n  ['Tan', [unaryOps.tan]],\n  ['Tanh', [unaryOps.tanh]],\n  ['ThresholdedRelu', [unaryOps.thresholdedRelu, unaryOps.parseAlphaAttributes]],\n  ['Transpose', [transpose, parseTransposeAttributes]],\n]);\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/activation_util.ts\n//\n// modified to fit the needs of the project\n\nexport declare type Activation = 'linear' | 'relu' | 'prelu' | 'elu' | 'relu6' | 'leakyrelu' | 'sigmoid';\n\nexport const typeSnippet = (component: number) => {\n  switch (component) {\n    case 1:\n      return 'f32';\n    case 2:\n      return 'vec2<f32>';\n    case 3:\n      return 'vec3<f32>';\n    case 4:\n      return 'vec4<f32>';\n    default:\n      throw new Error(`${component}-component is not supported.`);\n  }\n};\n\nexport const activationFnSnippet =\n    (activation?: Activation, _hasPreluActivationWeights = false, _packed = false, _coordsLength = 3): string => {\n      if (!activation) {\n        return '';\n      }\n\n      // TODO: add implementations\n      return '';\n    };\n\nexport const biasActivationSnippet = (hasBias: boolean, activation?: Activation): string => `\n      ${hasBias ? 'value = value + getBiasByOutputCoords(coords);' : ''}\n      ${activation ? 'value = activation(value, coords);' : ''}\n      `;\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/conv2d_mm_webgpu.ts\n//\n// modified to fit the needs of the project\n\nimport {LOG_DEBUG} from '../../../log';\nimport {TensorView} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {GpuDataType, ProgramInfo, ProgramMetadata} from '../../types';\nimport {ConvAttributes} from '../conv';\n\nimport {Activation, activationFnSnippet, biasActivationSnippet, typeSnippet} from './activation_util';\nimport {utilFunctions} from './conv_util';\nimport {makeMatMulPackedSource, makeMatMulPackedVec4Source} from './matmul_packed_webgpu';\n\nconst conv2dCommonSnippet =\n    (isChannelsLast: boolean, fitAOuter: boolean, fitBOuter: boolean, fitInner: boolean, addBias = false,\n     activation?: Activation, hasPreluActivationWeights = false, innerElementSizeX = 4, innerElementSizeW = 4,\n     innerElementSize = 4): string => {\n      const getXSnippet = (innerElementSize: number) => {\n        switch (innerElementSize) {\n          case 1:\n            return 'resData = x[xIndex];';\n          case 3:\n            return 'resData = vec3<f32>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);';\n          case 4:\n            return 'resData = x[xIndex / 4];';\n          default:\n            throw new Error(`innerElementSize ${innerElementSize} is not supported.`);\n        }\n      };\n      const getWSnippet = (innerElementSize: number) => {\n        switch (innerElementSize) {\n          case 1:\n            return 'return w[row * wShape[3] + colIn];';\n          case 4:\n            return 'return w[row * wShape[3] / 4 + colIn];';\n          default:\n            throw new Error(`innerElementSize ${innerElementSize} is not supported.`);\n        }\n      };\n      const coordASnippet = isChannelsLast ? `\n    let coord = vec4<i32>(batch, xRow, xCol, xCh);\n    ` :\n                                             `\n    let coord = vec4<i32>(batch, xCh, xRow, xCol);\n    `;\n\n      const coordResSnippet = isChannelsLast ? `\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    ` :\n                                               `\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    `;\n\n      const xHeight = isChannelsLast ? 'xShape[1]' : 'xShape[2]';\n      const xWidth = isChannelsLast ? 'xShape[2]' : 'xShape[3]';\n      const row = isChannelsLast ? 'row' : 'col';\n      const col = isChannelsLast ? 'col' : 'row';\n      const readXSnippet = `\n    let inChannels = wShape[2];\n    let outWidth = ${isChannelsLast ? 'outShape[2]' : 'outShape[3]'};\n    let outRow = ${row} / outWidth;\n    let outCol = ${row} % outWidth;\n\n    let WRow = ${col} / (filterDims[1] * inChannels);\n    let WCol = ${col} / inChannels % filterDims[1];\n    let xRow = outRow * stride[0] + dilation[0] * WRow - pad[0];\n    let xCol = outCol * stride[1] + dilation[1] * WCol - pad[1];\n    let xCh = ${col} % inChannels;\n    var resData = ${typeSnippet(innerElementSizeX)}(0.0);\n    // The bounds checking is always needed since we use it to pad zero for\n    // the 'same' padding type.\n    if (xRow >= 0 && xRow < ${xHeight} && xCol >= 0 && xCol < ${xWidth}) {\n      ${coordASnippet}\n      let xIndex = getIndexFromCoords4D(coord, xShape);\n      ${getXSnippet(innerElementSizeX)}\n    }\n    return resData;`;\n\n      const sampleX = isChannelsLast ? (fitAOuter && fitInner ? `\n    let col = colIn * ${innerElementSizeX};\n    ${readXSnippet}` :\n                                                                `\n    let col = colIn * ${innerElementSizeX};\n    if (row < dimAOuter && col < dimInner) {\n      ${readXSnippet}\n    }\n    return ${typeSnippet(innerElementSizeX)}(0.0);`) :\n                                       (fitInner && fitBOuter ? `\n    let col = colIn * ${innerElementSizeX};\n    ${readXSnippet}` :\n                                                                `\n    let col = colIn * ${innerElementSizeX};\n    if (row < dimInner && col < dimBOuter) {\n      ${readXSnippet}\n    }\n    return ${typeSnippet(innerElementSizeX)}(0.0);`);\n\n      const sampleW = `${getWSnippet(innerElementSizeW)}`;\n\n      const resType = typeSnippet(innerElementSize);\n      const aType = isChannelsLast ? typeSnippet(innerElementSizeX) : typeSnippet(innerElementSizeW);\n      const bType = isChannelsLast ? typeSnippet(innerElementSizeW) : typeSnippet(innerElementSizeX);\n      const userCode = `\n    ${activationFnSnippet(activation, hasPreluActivationWeights, innerElementSize === 4, 4)}\n    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${aType} {\n      ${isChannelsLast ? sampleX : sampleW}\n    }\n\n    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${bType} {\n      ${isChannelsLast ? sampleW : sampleX}\n    }\n\n    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${resType}) {\n      let col = colIn * ${innerElementSize};\n      if (row < dimAOuter && col < dimBOuter)\n      {\n      var value = valueIn;\n      let outWidth = ${isChannelsLast ? 'outShape[2]' : 'outShape[3]'};\n      ${coordResSnippet}\n      ${biasActivationSnippet(addBias, activation)}\n      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n      }\n    }`;\n      return userCode;\n    };\n\nexport const createConv2DMatMulProgramInfo =\n    (inputs: readonly TensorView[], metadata: ProgramMetadata, attributes: ConvAttributes,\n     outputShape: readonly number[], dimAOuter: number, dimBOuter: number, dimInner: number, hasBias: boolean,\n     sequentialAccessByThreads: boolean): ProgramInfo => {\n      const isChannelsLast = attributes.format === 'NHWC';\n      const inChannels = isChannelsLast ? inputs[0].dims[3] : inputs[0].dims[1];\n      const batchSize = outputShape[0];\n      const outWidth = isChannelsLast ? outputShape[2] : outputShape[3];\n      const outHeight = isChannelsLast ? outputShape[1] : outputShape[2];\n      const outChannels = isChannelsLast ? outputShape[3] : outputShape[1];\n      const isVec4 = (((inChannels % 4 === 0 || inChannels % 3 === 0) && isChannelsLast) ||\n                      (outWidth % 4 === 0 && !isChannelsLast)) &&\n          outChannels % 4 === 0;\n\n      // TODO: fine tune size\n      const dispatchX = isChannelsLast ? outChannels : outWidth * outHeight;\n      const dispatchY = isChannelsLast ? outWidth * outHeight : outChannels;\n      const workGroupSize: [number, number, number] =\n          isVec4 ? [8, 8, 1] : [dispatchX <= 4 ? 4 : 16, dispatchX > 4 && dispatchY <= 4 ? 4 : 16, 1];\n      const elementsPerThread =\n          isVec4 ? [4, 4, 1] : [dispatchX <= 4 ? 1 : 2, dispatchX > 4 && dispatchY <= 4 ? 1 : 2, 1];\n      const dispatch = [\n        Math.ceil(dispatchX / workGroupSize[0] / elementsPerThread[0]),\n        Math.ceil(dispatchY / workGroupSize[1] / elementsPerThread[1]),\n        Math.ceil(batchSize / workGroupSize[2] / elementsPerThread[1])\n      ];\n\n      LOG_DEBUG('verbose', () => `[conv2d_mm_webgpu] dispatch = ${dispatch}`);\n\n      const innerElementSize = isVec4 ? (isChannelsLast && inChannels % 4 !== 0 ? 3 : 4) : elementsPerThread[0];\n\n      const tileAOuter = workGroupSize[1] * elementsPerThread[1];\n      const tileBOuter = workGroupSize[0] * elementsPerThread[0];\n      const tileInner = Math.max(workGroupSize[0] * innerElementSize, workGroupSize[1]);\n\n      const fitAOuter = dimAOuter % tileAOuter === 0;\n      const fitBOuter = dimBOuter % tileBOuter === 0;\n      const fitInner = dimInner % tileInner === 0;\n\n      const elementsSize = isVec4 ? [innerElementSize, 4, 4] : [1, 1, 1];\n\n      const declareInputs = [\n        `@group(0) @binding(0) var<storage, read> x: array<${isVec4 && innerElementSize === 4 ? 'vec4<f32>' : 'f32'}>;`,\n        `@group(0) @binding(1) var<storage, read> w: array<${isVec4 ? 'vec4<f32>' : 'f32'}>;`\n      ];\n      let declareFunctions = `\n      fn setOutputAtIndex(flatIndex : i32, value : ${isVec4 ? 'vec4<f32>' : 'f32'}) {\n        result[flatIndex] = ${isVec4 ? 'vec4<f32>' : 'f32'}(value);\n      }\n      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${isVec4 ? 'vec4<f32>' : 'f32'}) {\n        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));\n        setOutputAtIndex(flatIndex ${isVec4 ? '/ 4' : ''}, value);\n      }`;\n      if (hasBias) {\n        declareInputs.push(`@group(0) @binding(2) var<storage, read> bias: array<${isVec4 ? 'vec4<f32>' : 'f32'}>;`);\n        declareFunctions += `\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${isVec4 ? 'vec4<f32>' : 'f32'} {\n          return bias[coords.${isChannelsLast ? 'w' : 'y'}${isVec4 ? '/ 4' : ''}];\n        }`;\n      }\n\n      return {\n        ...metadata,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        dispatchGroup: () => ({x: dispatch[0], y: dispatch[1], z: dispatch[2]}),\n        getShaderSource: () => `\n        ${utilFunctions}\n        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,\n        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,\n        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };\n        ${declareInputs.join('')}\n        @group(0) @binding(${declareInputs.length}) var<storage, read_write> result: array<${\n            isVec4 ? 'vec4<f32>' : 'f32'}>;\n        //@group(0) @binding(${declareInputs.length + 1}) var<uniform> uniforms: Uniforms;\n\n        const xShape : vec4<i32> = vec4<i32>(${inputs[0].dims.join(',')});\n        const wShape : vec4<i32> = vec4<i32>(${inputs[1].dims.join(',')});\n        const outShape : vec4<i32> = vec4<i32>(${outputShape.join(',')});\n        const outShapeStrides : vec3<i32> = vec3<i32>(${ShapeUtil.computeStrides(outputShape).slice(0, 3).join(',')});\n        const filterDims : vec2<i32> = vec2<i32>(${attributes.kernelShape[0]}, ${attributes.kernelShape[1]});\n        const pad : vec2<i32> = vec2<i32>(${attributes.pads[0]}, ${attributes.pads[1]});\n        const stride : vec2<i32> = vec2<i32>(${attributes.strides[0]}, ${attributes.strides[1]});\n        const dilation : vec2<i32> = vec2<i32>(${attributes.dilations[0]}, ${attributes.dilations[1]});\n        const dimAOuter : i32 = ${dimAOuter};\n        const dimBOuter : i32 = ${dimBOuter};\n        const dimInner : i32 = ${dimInner};\n        ${declareFunctions}\n        ${\n            conv2dCommonSnippet(\n                isChannelsLast, fitAOuter, fitBOuter, fitInner, hasBias, undefined, false, elementsSize[0],\n                elementsSize[1], elementsSize[2])}\n            ${\n            isVec4 ? makeMatMulPackedVec4Source(elementsPerThread, workGroupSize, !isChannelsLast, tileInner) :\n                     makeMatMulPackedSource(\n                         elementsPerThread, workGroupSize, !isChannelsLast, tileInner, false, undefined,\n                         sequentialAccessByThreads)}`\n      };\n    };\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/conv_backprop_webgpu.ts\n\nimport {LOG_DEBUG} from '../../../log';\nimport {TensorView} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {GpuDataType, ProgramInfo, ProgramMetadata} from '../../types';\nimport {createIndicesHelper, ShaderHelper} from '../common';\nimport {ConvTransposeAttributes} from '../conv-transpose';\n\nconst createConvTranspose2DOpProgramShaderSource =\n    (shaderHelper: ShaderHelper, inputs: readonly TensorView[], attributes: ConvTransposeAttributes,\n     outputShape: readonly number[], hasBias: boolean, elementsPerThread: readonly number[]): string => {\n      const isChannelsLast = attributes.format === 'NHWC';\n      const rowDim = isChannelsLast ? 1 : 2;\n      const colDim = isChannelsLast ? 2 : 3;\n      const channelDim = isChannelsLast ? 3 : 1;\n      const outputSize = ShapeUtil.size(outputShape);\n      const outChannels = outputShape[isChannelsLast ? 3 : 1];\n      const inChannels = inputs[0].dims[isChannelsLast ? 3 : 1];\n      const isVec4 = inChannels % 4 === 0 && outChannels % 4 === 0;\n      const workPerThread = isVec4 ? 2 : 1;\n\n      const innerElementSize = isVec4 ? (isChannelsLast && inChannels % 4 !== 0 ? 3 : 4) : elementsPerThread[0];\n\n      const declareInputs = [\n        `@group(0) @binding(0) var<storage, read> Dy: array<${\n            isVec4 && innerElementSize === 4 ? 'vec4<f32>' : 'f32'}>;`,\n        `@group(0) @binding(1) var<storage, read> W: array<${isVec4 ? 'vec4<f32>' : 'f32'}>;`\n      ];\n      let declareFunctions = `\n  fn setOutputAtIndex(flatIndex : u32, value : ${isVec4 ? 'vec4<f32>' : 'f32'}) {\n    result[flatIndex] = ${isVec4 ? 'vec4<f32>' : 'f32'}(value);\n  }`;\n      if (hasBias) {\n        declareInputs.push(`@group(0) @binding(2) var<storage, read> bias: array<${isVec4 ? 'vec4<f32>' : 'f32'}>;`);\n        declareFunctions += `\n    fn getBiasByOutputCoords(coords : vec4<u32>) -> ${isVec4 ? 'vec4<f32>' : 'f32'} {\n      return bias[coords.${isChannelsLast ? 'w' : 'y'}${isVec4 ? '/ 4' : ''}];\n    }`;\n      }\n      const wIndicesHelper = createIndicesHelper('W', inputs[1].dims);\n      const dyIndicesHelper = createIndicesHelper('Dy', inputs[0].dims);\n      const outputIndicesHelper = createIndicesHelper('result', outputShape);\n      const codeSnippet4 = `{\n        let batch: u32 = global_id.z / outShape[1];\n        let r = global_id.z % outShape[1];\n        let c = global_id.y * ${workPerThread};\n        let d1: u32 = global_id.x * 4;\n\n        let dyCorner = vec2<i32>(i32(r), i32(c)) - vec2<i32>(pads);\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd: array<vec4<f32>, ${workPerThread}>;\n        for (var i = 0; i < ${workPerThread}; i++) {\n          dotProd[i] = vec4<f32>(0.0);\n        }\n        for (var wR: u32 = 0; wR < filterDims[0]; wR = wR + 1) {\n          var dyR = f32(dyCorner.x + wR) / f32(strides.x);\n          let wRPerm: u32= filterDims[0] - 1 - wR;\n          if (dyR < 0.0 || dyR >= f32(outBackprop[1]) ||\n              fract(dyR) > 0.0) {\n            continue;\n          }\n          let idyR: u32 = u32(dyR);\n\n          for (var wC: u32 = 0; wC < filterDims[1]; wC = wC + 1) {\n            let dyC = f32(dyCorner.y + wC) / f32(strides.y);\n            let dyC2 = f32(dyCorner.y + 1 + wC) / f32(strides.y);\n            let wCPerm: u32 = filterDims[1] - 1 - wC;\n            var bDyCVal = true;\n            var bDyCVal2 = true;\n            if (dyC < 0.0 || dyC >= f32(outBackprop[2]) ||\n                fract(dyC) > 0.0) {\n              bDyCVal = false;\n            }\n            if (dyC2 < 0.0 || dyC2 >= f32(outBackprop[2]) ||\n                fract(dyC2) > 0.0) {\n              bDyCVal2 = false;\n            }\n\n            let idyC: u32 = u32(dyC);\n            let idyC2: u32 = u32(dyC2);\n            if (bDyCVal && bDyCVal2) {\n              let d2Length = outBackprop[3];\n              for (var d2 :u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                ${\n          wIndicesHelper.indicesVariableDeclaration(\n              'wIndices0',\n              [\n                'd2', 'd1', 'wRPerm', 'wCPerm'\n              ])};\n                ${\n          wIndicesHelper.indicesVariableDeclaration(\n              'wIndices1',\n              [\n                'd2', 'd1+1', 'wRPerm', 'wCPerm'\n              ])};\n                ${\n          wIndicesHelper.indicesVariableDeclaration(\n              'wIndices2',\n              [\n                'd2', 'd1+2', 'wRPerm', 'wCPerm'\n              ])};\n                ${\n          wIndicesHelper.indicesVariableDeclaration(\n              'wIndices3',\n              [\n                'd2', 'd1+3', 'wRPerm', 'wCPerm'\n              ])};\n                let wValue0 = W[${wIndicesHelper.i2oExpression('wIndices0')}];\n                let wValue1 = W[${wIndicesHelper.i2oExpression('wIndices1')}];\n                let wValue2 = W[${wIndicesHelper.i2oExpression('wIndices2')}];\n                let wValue3 = W[${wIndicesHelper.i2oExpression('wIndices3')}];\n                ${\n          dyIndicesHelper.indicesVariableDeclaration(\n              'dyIndices',\n              isChannelsLast ? ['batch', 'idyR', 'idyC', 'd2'] :\n                               [\n                                 'batch', 'd2', 'idyR', 'idyC'\n                               ])};\n                var xValue =  Dy[${dyIndicesHelper.i2oExpression('dyIndices')}];\n                let tmpval = vec4<f32>(xValue * wValue0,\n                                      xValue * wValue1,\n                                      xValue * wValue2,\n                                      xValue * wValue3);\n                dotProd[0] = dotProd[0] + tmpval;\n\n                ${\n          dyIndicesHelper.indicesVariableDeclaration(\n              'dyIndices2',\n              isChannelsLast ? ['batch', 'idyR', 'idyC2', 'd2'] :\n                               [\n                                 'batch', 'd2', 'idyR', 'idyC2'\n                               ])};\n                xValue =  Dy[${dyIndicesHelper.i2oExpression('dyIndices')}];\n\n                dotProd[1] = dotProd[1] + vec4<f32>(xValue * wValue0,\n                                                    xValue * wValue1,\n                                                    xValue * wValue2,\n                                                    xValue * wValue3);\n              }\n            } else if (bDyCVal) {\n              let d2Length = outBackprop[3];\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                ${\n          wIndicesHelper.indicesVariableDeclaration(\n              'wIndices0',\n              [\n                'd2', 'd1', 'wRPerm', 'wCPerm'\n              ])};\n                ${\n          wIndicesHelper.indicesVariableDeclaration(\n              'wIndices1',\n              [\n                'd2', 'd1+1', 'wRPerm', 'wCPerm'\n              ])};\n                ${\n          wIndicesHelper.indicesVariableDeclaration(\n              'wIndices2',\n              [\n                'd2', 'd1+2', 'wRPerm', 'wCPerm'\n              ])};\n                ${\n          wIndicesHelper.indicesVariableDeclaration(\n              'wIndices3',\n              [\n                'd2', 'd1+3', 'wRPerm', 'wCPerm'\n              ])};\n                let wValue0 = W[${wIndicesHelper.i2oExpression('wIndices0')}];\n                let wValue1 = W[${wIndicesHelper.i2oExpression('wIndices1')}];\n                let wValue2 = W[${wIndicesHelper.i2oExpression('wIndices2')}];\n                let wValue3 = W[${wIndicesHelper.i2oExpression('wIndices3')}];\n                ${\n          dyIndicesHelper.indicesVariableDeclaration(\n              'dyIndices',\n              isChannelsLast ? ['batch', 'idyR', 'idyC', 'd2'] :\n                               [\n                                 'batch', 'd2', 'idyR', 'idyC'\n                               ])};\n                var xValue =  Dy[${dyIndicesHelper.i2oExpression('dyIndices')}];\n                let tmpval = vec4<f32>(xValue * wValue0,\n                                      xValue * wValue1,\n                                      xValue * wValue2,\n                                      xValue * wValue3);\n                dotProd[0] = dotProd[0] + tmpval;\n              }\n            } else if (bDyCVal2) {\n              let d2Length = outBackprop[3];\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                ${\n          wIndicesHelper.indicesVariableDeclaration(\n              'wIndices0',\n              [\n                'd2', 'd1', 'wRPerm', 'wCPerm'\n              ])};\n                ${\n          wIndicesHelper.indicesVariableDeclaration(\n              'wIndices1',\n              [\n                'd2', 'd1+1', 'wRPerm', 'wCPerm'\n              ])};\n                ${\n          wIndicesHelper.indicesVariableDeclaration(\n              'wIndices2',\n              [\n                'd2', 'd1+2', 'wRPerm', 'wCPerm'\n              ])};\n                ${\n          wIndicesHelper.indicesVariableDeclaration(\n              'wIndices3',\n              [\n                'd2', 'd1+3', 'wRPerm', 'wCPerm'\n              ])};\n                let wValue0 = W[${wIndicesHelper.i2oExpression('wIndices0')}];\n                let wValue1 = W[${wIndicesHelper.i2oExpression('wIndices1')}];\n                let wValue2 = W[${wIndicesHelper.i2oExpression('wIndices2')}];\n                let wValue3 = W[${wIndicesHelper.i2oExpression('wIndices3')}];\n                ${\n          dyIndicesHelper.indicesVariableDeclaration(\n              'dyIndices',\n              isChannelsLast ? ['batch', 'idyR', 'idyC', 'd2'] :\n                               [\n                                 'batch', 'd2', 'idyR', 'idyC'\n                               ])};\n                var xValue =  Dy[${dyIndicesHelper.i2oExpression('dyIndices')}];\n                let tmpval = vec4<f32>(xValue * wValue0,\n                                      xValue * wValue1,\n                                      xValue * wValue2,\n                                      xValue * wValue3);\n                dotProd[1] = dotProd[1] + tmpval;\n              }\n            }\n          }\n        }\n\n        for (var i: u32 = 0; i < ${workPerThread}; i = i + 1) {\n          ${\n          outputIndicesHelper.indicesVariableDeclaration('outputIndices', [\n            'batch', 'r', 'c+i', 'd1'\n          ])};\n          result[${outputIndicesHelper.i2oExpression('outputIndices')}] = dotProd[i];\n        }\n      }`;\n      const codeSnippet = `\n          ${outputIndicesHelper.o2iCall('global_idx', 'outputIndices')}\n          let batch = outputIndices[0];\n          let d1 = outputIndices[${channelDim}];\n          let dyCorner = vec2<i32>(i32(outputIndices[${rowDim}]), i32(outputIndices[${colDim}])) - pads;\n          let dyRCorner = dyCorner.x;\n          let dyCCorner = dyCorner.y;\n          // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n          // ? = to be determined. : = across all values in that axis.\n          var dotProd = 0.0;\n          for (var wR: u32 = 0; wR < effectiveFilterDims.x; wR = wR + 1) {\n            if (wR % dilations.x != 0) {\n              continue;\n            }\n            let dyR = (f32(dyRCorner) + f32(wR)) / f32(strides[0]);\n            let wRPerm = filterDims.x - 1 - wR / dilations.x;\n            if (dyR < 0.0 || dyR >= f32(outBackprop[1]) || fract(dyR) > 0.0 ||\n                wRPerm < 0) {\n              continue;\n            }\n            let idyR: u32 = u32(dyR);\n\n            for (var wC: u32 = 0; wC < effectiveFilterDims.y; wC = wC + 1) {\n              if (wC % dilations.y != 0) {\n                continue;\n              }\n              let dyC = (f32(dyCCorner) + f32(wC)) / f32(strides.y);\n              let wCPerm = filterDims.y - 1 - wC / dilations.y;\n              if (dyC < 0.0 || dyC >= f32(outBackprop[2]) ||\n                  fract(dyC) > 0.0 || wCPerm < 0) {\n                continue;\n              }\n              let idyC: u32 = u32(dyC);\n\n              for (var d2: u32 = 0; d2 < outBackprop[3]; d2 = d2 + 1) {\n                ${\n          dyIndicesHelper.indicesVariableDeclaration(\n              'dyIndices',\n              isChannelsLast ? ['batch', 'idyR', 'idyC', 'd2'] :\n                               [\n                                 'batch', 'd2', 'idyR', 'idyC'\n                               ])};\n                let xValue =  Dy[${dyIndicesHelper.i2oExpression('dyIndices')}];\n                  ${\n          wIndicesHelper.indicesVariableDeclaration('wIndices', [\n            'd2', 'd1', 'wRPerm', 'wCPerm'\n          ])};\n\n                let wValue = W[${wIndicesHelper.i2oExpression('wIndices')}];\n                dotProd = dotProd + xValue * wValue;\n              }\n            }\n          }\n          result[global_idx] = dotProd;\n        `;\n\n      return `\n${wIndicesHelper.i2oImpl}\n  ${dyIndicesHelper.i2oImpl}\n  ${outputIndicesHelper.o2iImpl}\n  ${declareFunctions}\n  ${declareInputs.join('\\n')}\n  @group(0) @binding(${declareInputs.length}) var<storage, read_write> result: array<${isVec4 ? 'vec4<f32>' : 'f32'}>;\n  const outShape : vec4<u32> = vec4<u32>(${outputShape.join(',')});\n  const outBackprop : vec4<u32> = vec4<u32>(${inputs[0].dims.join(',')});\n  const strides : vec2<u32> = vec2<u32>(${attributes.strides[0]}, ${attributes.strides[1]});\n  const filterDims : vec2<u32> = vec2<u32>(${attributes.kernelShape[isChannelsLast ? 1 : 2]}, ${\n          attributes.kernelShape[isChannelsLast ? 2 : 3]});\n  const dilations : vec2<u32> = vec2<u32>(${attributes.dilations[0]}, ${attributes.dilations[1]});\n  const effectiveFilterDims : vec2<u32> = filterDims + vec2<u32>(\n          ${\n          attributes.dilations[0] <= 1 ?\n              0 :\n              (attributes.kernelShape[isChannelsLast ? 1 : 2] - 1) * (attributes.dilations[0] - 1)},\n          ${\n          attributes.dilations[1] <= 1 ?\n              0 :\n              (attributes.kernelShape[isChannelsLast ? 2 : 3] - 1) * (attributes.dilations[1] - 1)});\n  const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (${attributes.pads[0] + attributes.pads[2]})/2,\n                                     i32(effectiveFilterDims[1]) - 1 - (${attributes.pads[1] + attributes.pads[3]})/2);\n    ${shaderHelper.mainStart()}\n    ${outputIndicesHelper.indicesVariableDeclaration('outputIndices')}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)};\n  ${isVec4 ? codeSnippet4 : codeSnippet}}`;\n    };\n\nexport const createConvTranspose2DProgramInfo =\n    (inputs: readonly TensorView[], metadata: ProgramMetadata, attributes: ConvTransposeAttributes,\n     squeezeOutputShapeFunction?: (shape: readonly number[]) => number[]): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const isChannelsLast = attributes.format === 'NHWC';\n      const outputShape = attributes.outputShape;\n      const batchSize = outputShape[0];\n      const outWidth = outputShape[isChannelsLast ? 1 : 2];\n      const outHeight = outputShape[isChannelsLast ? 2 : 3];\n      const outChannels = outputShape[isChannelsLast ? 3 : 1];\n      const inChannels = inputs[0].dims[isChannelsLast ? 3 : 1];\n      const isVec4 = inChannels % 4 === 0 && outChannels % 4 === 0;\n\n      const dispatchX = isChannelsLast ? outChannels : outWidth * outHeight;\n      const dispatchY = isChannelsLast ? outWidth * outHeight : outChannels;\n      const workGroupSize: [number, number, number] =\n          isVec4 ? [8, 8, 1] : [dispatchX <= 4 ? 4 : 16, dispatchX > 4 && dispatchY <= 4 ? 4 : 16, 1];\n      const elementsPerThread =\n          isVec4 ? [4, 4, 1] : [dispatchX <= 4 ? 1 : 2, dispatchX > 4 && dispatchY <= 4 ? 1 : 2, 1];\n      const dispatch = [\n        Math.ceil(dispatchX / workGroupSize[0] / elementsPerThread[0]),\n        Math.ceil(dispatchY / workGroupSize[1] / elementsPerThread[1]),\n        Math.ceil(batchSize / workGroupSize[2] / elementsPerThread[1])\n      ];\n      LOG_DEBUG('verbose', () => `[conv2d_backprop_webgpu] dispatch = ${dispatch}`);\n\n      return {\n        ...metadata,\n        outputs: [{\n          dims: squeezeOutputShapeFunction ? squeezeOutputShapeFunction(outputShape) : outputShape,\n          dataType: inputs[0].dataType,\n          gpuDataType: GpuDataType.default\n        }],\n        dispatchGroup: () => ({x: dispatch[0], y: dispatch[1], z: dispatch[2]}),\n        getShaderSource: (shaderHelper: ShaderHelper) => createConvTranspose2DOpProgramShaderSource(\n            shaderHelper, inputs, attributes, outputShape, hasBias, elementsPerThread),\n      };\n    };\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-core/src/ops/conv_util.ts\n//\n// modified to fit the needs of the project\n\nexport const utilFunctions = `\nfn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\n}\nfn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n    outShapeStrides.x, outShapeStrides.y, outShapeStrides.z, 1));\n}\n`;\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/matmul_packed_webgpu.ts\n//\n// modified to fit the needs of the project\n\nconst writeDataToSubAVec4Snippet = (transpose: boolean) => {\n  if (transpose) {\n    return `\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          kStart + inputRow,\n          globalRowStart / innerElementSize + inputCol);\n        `;\n\n  } else {\n    return `\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          globalRow + innerRow,\n          kStart / innerElementSize + inputCol);\n        `;\n  }\n};\n\nconst calculateResultSnippet = (transposeA: boolean, innerElementSize: number) => {\n  if (transposeA) {\n    return `\n        let ACached0 = mm_Asub[k * innerElementSize][localRow];\n        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];\n        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];\n        ${innerElementSize === 3 ? '' : 'let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];'}\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          acc[i] = BCached0 * ACached0[i] + acc[i];\n          acc[i] = BCached1 * ACached1[i] + acc[i];\n          acc[i] = BCached2 * ACached2[i] + acc[i];\n          ${innerElementSize === 3 ? '' : 'acc[i] = BCached3 * ACached3[i] + acc[i];'}\n        }`;\n  } else {\n    return `\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          let ACached = mm_Asub[tileRow + i][k];\n          acc[i] = BCached0 * ACached.x + acc[i];\n          acc[i] = BCached1 * ACached.y + acc[i];\n          acc[i] = BCached2 * ACached.z + acc[i];\n          ${innerElementSize === 3 ? '' : 'acc[i] = BCached3 * ACached.w + acc[i];'}\n        }`;\n  }\n};\n\nexport const makeMatMulPackedVec4Source =\n    (workPerThread: number[], workgroupSize: [number, number, number], transposeA = false, tileInner = 32,\n     splitK = false, splitedDimInner = 32, isVectorA = false): string => {\n      const tileAOuter = workgroupSize[1] * workPerThread[1];\n      const tileBOuter = workgroupSize[0] * workPerThread[0];\n      const tileAWidth = transposeA ? tileAOuter : tileInner;\n      const tileAHight = transposeA ? tileInner : tileAOuter;\n      const innerElementSize = tileAWidth / workgroupSize[0];\n      const rowPerThreadB = tileInner / workgroupSize[1];\n\n      if (!(((transposeA && innerElementSize === 4 && workPerThread[1] === 4) ||\n             (!transposeA && (innerElementSize === 3 || innerElementSize === 4))) &&\n            tileAWidth % workgroupSize[0] === 0 && tileInner % workgroupSize[1] === 0 && workPerThread[0] === 4)) {\n        throw new Error(`If transposeA ${transposeA} is true, innerElementSize ${\n            innerElementSize} and workPerThread[1] ${workPerThread[1]} must be 4.\n      Otherwise, innerElementSize ${innerElementSize} must be 3 or 4.\n  tileAWidth ${tileAWidth} must be divisible by workgroupSize[0]${workgroupSize[0]}. tileInner ${\n            tileInner} must be divisible by workgroupSize[1] ${workgroupSize[1]}. colPerThread ${\n            workPerThread[0]} must be 4.`);\n      }\n      return `\nvar<workgroup> mm_Asub : array<array<vec${innerElementSize}<f32>, ${tileAWidth / innerElementSize}>, ${tileAHight}>;\nvar<workgroup> mm_Bsub : array<array<vec4<f32>, ${tileBOuter / workPerThread[0]}>, ${tileInner}>;\n\nconst rowPerThread = ${workPerThread[1]};\nconst colPerThread = ${workPerThread[0]};\nconst innerElementSize = ${innerElementSize};\nconst tileInner = ${tileInner};\n\n@compute @workgroup_size(${workgroupSize[0]}, ${workgroupSize[1]}, ${workgroupSize[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n  let localRow = i32(localId.y);\n  let tileRow = ${isVectorA ? '0' : 'localRow * rowPerThread'};\n  let tileCol = i32(localId.x);\n\n  let globalRow = ${isVectorA ? '0' : 'i32(globalId.y) * rowPerThread'};\n  let globalCol = i32(globalId.x);\n  let batch = ${splitK ? '0' : 'i32(globalId.z)'};\n  let globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n\n  let numTiles = ${splitK ? `${Math.ceil(splitedDimInner / tileInner)}` : '(dimInner - 1) / tileInner + 1'};\n  var kStart = ${splitK ? `i32(globalId.z) * ${splitedDimInner}` : '0'};\n\n  var acc: array<vec4<f32>, rowPerThread>;\n\n  // Loop over shared dimension.\n  let tileRowB = localRow * ${rowPerThreadB};\n  for (var t = 0; t < numTiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let inputRow = tileRow + innerRow;\n          let inputCol = tileCol;\n          ${writeDataToSubAVec4Snippet(transposeA)}\n      }\n\n      // Load one tile of B into local memory.\n      for (var innerRow = 0; innerRow < ${rowPerThreadB}; innerRow = innerRow + 1) {\n          let inputRow = tileRowB + innerRow;\n          let inputCol = tileCol;\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol);\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {\n          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];\n          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];\n          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];\n          ${innerElementSize === 3 ? '' : 'let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];'}\n\n          ${calculateResultSnippet(transposeA, innerElementSize)}\n      }\n\n      workgroupBarrier();\n  }\n\n  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\n  }\n}`;\n    };\n\nconst writeDataToSubASnippet = (transpose: boolean) => {\n  if (transpose) {\n    return `\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              kStart + inputRow,\n              globalRowStart + inputCol);\n            `;\n\n  } else {\n    return `\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              globalRowStart + inputRow,\n              kStart + inputCol);\n            `;\n  }\n};\n\nconst readDataFromSubASnippet = (transposeA: boolean) =>\n    transposeA ? 'let ACached = mm_Asub[k][tileRow + innerRow];' : 'let ACached = mm_Asub[tileRow + innerRow][k];';\n\n// sequentialAccessByThreads means sequential data in memory is accessed by\n// threads, instead of a single thread (default behavior).\nexport const makeMatMulPackedSource =\n    (workPerThread: number[], workgroupSize: [number, number, number], transposeA = false, tileInner = 32,\n     splitK = false, splitedDimInner = 32, sequentialAccessByThreads = false): string => {\n      const tileAOuter = workPerThread[1] * workgroupSize[1];\n      const tileBOuter = workPerThread[0] * workgroupSize[0];\n      const tileAWidth = transposeA ? tileAOuter : tileInner;\n      const tileAHight = transposeA ? tileInner : tileAOuter;\n\n      if (!(tileAHight % workgroupSize[1] === 0 && tileAWidth % workgroupSize[0] === 0 &&\n            tileInner % workgroupSize[1] === 0)) {\n        throw new Error(`tileAHight ${tileAHight} must be divisible by workgroupSize[1]${\n            workgroupSize[1]}, tileAWidth ${tileAWidth} must be divisible by workgroupSize[0]${\n            workgroupSize[0]}, tileInner ${tileInner} must be divisible by workgroupSize[1]${workgroupSize[1]}`);\n      }\n      const rowPerThreadA = tileAHight / workgroupSize[1];\n      const colPerThreadA = tileAWidth / workgroupSize[0];\n      const rowPerThreadB = tileInner / workgroupSize[1];\n      const matmulSnippet = sequentialAccessByThreads ?\n          `\n    let localRow = i32(localId.y);\n    let localCol = i32(localId.x);\n    let globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n    let globalColStart = i32(workgroupId.x) * ${tileBOuter};\n\n    // Loop over shared dimension.\n    for (var t = 0; t < numTiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var inputRow = localRow; inputRow < ${tileAHight}; inputRow = inputRow + ${workgroupSize[1]}) {\n        for (var inputCol = localCol; inputCol < ${tileAWidth}; inputCol = inputCol + ${workgroupSize[0]}) {\n          ${writeDataToSubASnippet(transposeA)}\n        }\n      }\n      // Load one tile of B into local memory.\n      for (var inputRow = localRow; inputRow < ${tileInner}; inputRow = inputRow + ${workgroupSize[1]}) {\n            for (var inputCol = localCol; inputCol < ${tileBOuter}; inputCol = inputCol + ${workgroupSize[0]}) {\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n            kStart + inputRow,\n            globalColStart + inputCol);\n        }\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      var BCached : array<f32, colPerThread>;\n      for (var k = 0; k < tileInner; k = k + 1) {\n        for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n          BCached[inner] = mm_Bsub[k][localCol + inner * ${workgroupSize[0]}];\n        }\n        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let ACached = ${\n              transposeA ? `mm_Asub[k][localRow + innerRow * ${workgroupSize[1]}];` :\n                           `mm_Asub[localRow + innerRow * ${workgroupSize[1]}][k];`}\n          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n            acc[innerRow][innerCol] = acc[innerRow][innerCol] +\n                ACached * BCached[innerCol];\n          }\n        }\n      }\n      workgroupBarrier();\n    }\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      let gRow = globalRowStart + localRow + innerRow * ${workgroupSize[1]};\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        let gCol = globalColStart + localCol + innerCol * ${workgroupSize[0]};\n        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\n      }\n    }\n    ` :\n          `\nlet tileRow = i32(localId.y) * rowPerThread;\nlet tileCol = i32(localId.x) * colPerThread;\n\nlet globalRow = i32(globalId.y) * rowPerThread;\nlet globalCol = i32(globalId.x) * colPerThread;\nlet globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n\nlet tileRowA = i32(localId.y) * ${rowPerThreadA};\nlet tileColA = i32(localId.x) * ${colPerThreadA};\nlet tileRowB = i32(localId.y) * ${rowPerThreadB};\n// Loop over shared dimension.\nfor (var t = 0; t < numTiles; t = t + 1) {\n  // Load one tile of A into local memory.\n  for (var innerRow = 0; innerRow < ${rowPerThreadA}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < ${colPerThreadA}; innerCol = innerCol + 1) {\n      let inputRow = tileRowA + innerRow;\n      let inputCol = tileColA + innerCol;\n      ${writeDataToSubASnippet(transposeA)}\n    }\n  }\n\n  // Load one tile of B into local memory.\n  for (var innerRow = 0; innerRow < ${rowPerThreadB}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n      let inputRow = tileRowB + innerRow;\n      let inputCol = tileCol + innerCol;\n      mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n        kStart + inputRow,\n        globalCol + innerCol);\n    }\n  }\n  kStart = kStart + tileInner;\n  workgroupBarrier();\n\n  // Compute acc values for a single thread.\n  var BCached : array<f32, colPerThread>;\n  for (var k = 0; k < tileInner; k = k + 1) {\n    for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n      BCached[inner] = mm_Bsub[k][tileCol + inner];\n    }\n\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      ${readDataFromSubASnippet(transposeA)}\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];\n      }\n    }\n  }\n\n  workgroupBarrier();\n}\n\nfor (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n    mm_write(batch, globalRow + innerRow, globalCol + innerCol,\n        acc[innerRow][innerCol]);\n  }\n}\n`;\n\n      return `\n  var<workgroup> mm_Asub : array<array<f32, ${tileAWidth}>, ${tileAHight}>;\n  var<workgroup> mm_Bsub : array<array<f32, ${tileBOuter}>, ${tileInner}>;\n  const rowPerThread = ${workPerThread[1]};\n  const colPerThread = ${workPerThread[0]};\n  const tileInner = ${tileInner};\n\n@compute @workgroup_size(${workgroupSize[0]}, ${workgroupSize[1]}, ${workgroupSize[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n    let batch = ${splitK ? '0' : 'i32(globalId.z)'};\n    let numTiles = ${splitK ? `${Math.ceil(splitedDimInner / tileInner)}` : '(dimInner - 1) / tileInner + 1'};\n    var kStart = ${splitK ? `i32(globalId.z) * ${splitedDimInner}` : '0'};\n\n    var acc : array<array<f32, colPerThread>, rowPerThread>;\n\n    // Without this initialization strange values show up in acc.\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = 0.0;\n      }\n    }\n    ${matmulSnippet}\n  }\n`;\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../util';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {createIndicesHelper, ShaderHelper} from './common';\n\ntype BuiltinFunctionName = string;\ntype BinaryCustomExpression = (expressionA: string, expressionB: string) => string;\ntype BinaryFunctionCall = BuiltinFunctionName|BinaryCustomExpression|{\n  scalar: BinaryCustomExpression;\n  vector: BinaryCustomExpression;\n};\n\nconst createBinaryOpProgramShader =\n    (shaderHelper: ShaderHelper, dimsA: readonly number[], dimsB: readonly number[], dimsOutput: readonly number[],\n     vectorize: boolean, doBroadcast: boolean, funcCall: BinaryFunctionCall, additionalImplementation?: string,\n     typeA = 'f32', typeB = 'f32', typeOutput = 'f32') => {\n      const outputSize = ShapeUtil.size(dimsOutput);\n      const vecSize = Math.ceil(outputSize / 4);\n\n      let expressionScalar: BinaryCustomExpression;\n      let expressionVector: BinaryCustomExpression;\n      if (typeof funcCall === 'string') {\n        expressionScalar = expressionVector = (a, b) => `${funcCall}((${a}),(${b}))`;\n      } else if (typeof funcCall === 'function') {\n        expressionScalar = expressionVector = funcCall;\n      } else {\n        expressionScalar = funcCall.scalar;\n        expressionVector = funcCall.vector;\n      }\n\n      let broadcastImpl = '';\n      const outputIndicesHelper = createIndicesHelper('output', dimsOutput);\n      if (doBroadcast) {\n        const calcOffsetImpl = (dims: readonly number[]) => {\n          const strides = ShapeUtil.computeStrides(dims);\n          const offsets: string[] = [];\n          for (let i = dims.length - 1; i >= 0; i--) {\n            const idx = dimsOutput.length === 0 ? '0u' :\n                (dimsOutput.length === 1)       ? '(*outputIndices)' :\n                                                  `(*outputIndices)[${i + dimsOutput.length - dims.length}]`;\n            offsets.push(`${strides[i]}u * (${idx} % ${dims[i]}u)`);\n          }\n          return offsets.length > 0 ? offsets.join('+') : '0u';\n        };\n\n        broadcastImpl = `\n  ${outputIndicesHelper.o2iImpl}\n\n  fn calcOffsetA(outputIndices: ptr<function, ${outputIndicesHelper.iType}>) -> u32 {\n    return ${calcOffsetImpl(dimsA)};\n  }\n\n  fn calcOffsetB(outputIndices: ptr<function, ${outputIndicesHelper.iType}>) -> u32 {\n    return ${calcOffsetImpl(dimsB)};\n  }\n  `;\n      }\n\n      let assignment: string;\n      if (vectorize) {\n        if (doBroadcast) {\n          assignment = `\n      ${outputIndicesHelper.indicesVariableDeclaration('outputIndices')}\n      ${outputIndicesHelper.o2iCall('global_idx * 4u', 'outputIndices')}\n      let offsetA = calcOffsetA(&outputIndices);\n      let offsetB = calcOffsetB(&outputIndices);\n      outputData[global_idx] = ${expressionVector('aData[offsetA / 4u]', 'bData[offsetB / 4u]')};`;\n        } else {\n          assignment = `outputData[global_idx] = ${expressionVector('aData[global_idx]', 'bData[global_idx]')};`;\n        }\n      } else {\n        if (!doBroadcast) {\n          throw new Error('no necessary to use scalar implementation for element-wise binary op implementation.');\n        }\n        const singleAssignment = (x: number) => {\n          const expressionA = `aData[indexA${x}][componentA${x}]`;\n          const expressionB = `bData[indexB${x}][componentB${x}]`;\n          return `\n      ${outputIndicesHelper.o2iCall(`global_idx * 4u + ${x}u`, 'outputIndices')}\n      let offsetA${x} = calcOffsetA(&outputIndices);\n      let offsetB${x} = calcOffsetB(&outputIndices);\n      let indexA${x} = offsetA${x} / 4u;\n      let indexB${x} = offsetB${x} / 4u;\n      let componentA${x} = offsetA${x} % 4u;\n      let componentB${x} = offsetB${x} % 4u;\n      outputData[global_idx][${x}] = ${expressionScalar(expressionA, expressionB)};`;\n        };\n\n        assignment = `\n      ${outputIndicesHelper.indicesVariableDeclaration('outputIndices')}\n      ${singleAssignment(0)}\n      ${singleAssignment(1)}\n      ${singleAssignment(2)}\n      ${singleAssignment(3)}`;\n      }\n\n      return `\n  @group(0) @binding(0) var<storage, read> aData : array<vec4<${typeA}>>;\n  @group(0) @binding(1) var<storage, read> bData : array<vec4<${typeB}>>;\n  @group(0) @binding(2) var<storage, read_write> outputData : array<vec4<${typeOutput}>>;\n\n  ${additionalImplementation ?? ''}\n  ${broadcastImpl}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(vecSize)}\n    ${assignment}\n  }`;\n    };\n\nconst createBinaryOpProgramInfo =\n    (metadata: ProgramMetadata, a: TensorView, b: TensorView, funcCall: BinaryFunctionCall,\n     additionalImplementation?: string, outputDataType: number = a.dataType): ProgramInfo => {\n      const isBroadcast = !ShapeUtil.areEqual(a.dims, b.dims);\n      let outputShape = a.dims;\n      let outputSize = ShapeUtil.size(a.dims);\n\n      let vectorize = false;\n\n      // TODO: deal with zero-sized tensors (eg. dims=[1,0])\n\n      if (isBroadcast) {\n        const calculatedShape = BroadcastUtil.calcShape(a.dims, b.dims, false);\n        if (!calculatedShape) {\n          throw new Error('Can\\'t perform binary op on the given tensors');\n        }\n        outputShape = calculatedShape;\n        outputSize = ShapeUtil.size(outputShape);\n\n        // check whether vectorize can be enabled\n        let sharedDimension = 1;\n        for (let i = 0; i < outputShape.length; i++) {\n          const dimA = a.dims[a.dims.length - i] ?? 1;\n          const dimB = b.dims[b.dims.length - i] ?? 1;\n          if (dimA === dimB) {\n            sharedDimension *= dimA;\n          } else {\n            break;\n          }\n        }\n        if (sharedDimension % 4 === 0) {\n          vectorize = true;\n        }\n\n\n      } else {\n        // element-wise\n        vectorize = true;\n      }\n\n      return {\n        ...metadata,\n        getShaderSource: (shaderHelper) => createBinaryOpProgramShader(\n            shaderHelper, a.dims, b.dims, outputShape, vectorize, isBroadcast, funcCall, additionalImplementation),\n        outputs: [{dims: outputShape, dataType: outputDataType, gpuDataType: GpuDataType.default}],\n        dispatchGroup: () =>\n            ({x: Math.ceil(outputSize / 64 /* workgroup size */ / (vectorize ? 4 : 1) /* vec size */)})\n      };\n    };\n\nconst createBinaryOpProgramInfoLoader =\n    (inputs: readonly TensorView[], name: string, funcCall: BinaryFunctionCall, additionalImplementation?: string,\n     cacheKey?: string): ProgramInfoLoader => {\n      const metadata:\n          ProgramMetadata = {name, inputTypes: [GpuDataType.default, GpuDataType.default], cacheHint: cacheKey};\n      return {\n        ...metadata,\n        get: () => createBinaryOpProgramInfo(metadata, inputs[0], inputs[1], funcCall, additionalImplementation)\n      };\n    };\n\nexport const add = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(context.inputs, 'Add', (a, b) => `${a}+${b}`));\n};\n\nexport const div = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(context.inputs, 'Div', (a, b) => `${a}/${b}`));\n};\n\nexport const mul = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(context.inputs, 'Mul', (a, b) => `${a}*${b}`));\n};\n\nexport const pow = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(\n      context.inputs, 'Pow', ({scalar: (a, b) => `pow_f32(${a},${b})`, vector: (a, b) => `pow_vf32(${a},${b})`}), `\n    fn pow_f32(a : f32, b : f32) -> f32 {\n      if (b == 0.0) {\n        return 1.0;\n      } else if (a < 0.0 && b != floor(b)) {\n        return pow(a, b); // NaN\n      }\n      return select(sign(a), 1.0, round(abs(b) % 2.0) != 1.0) * pow(abs(a), b);\n    }\n    fn pow_vf32(a : vec4<f32>, b : vec4<f32>) -> vec4<f32> {\n      // TODO: implement vectorized pow\n      return vec4<f32>(pow_f32(a.x, b.x), pow_f32(a.y, b.y), pow_f32(a.z, b.z), pow_f32(a.w, b.w));\n    }\n      `));\n};\n\nexport const sub = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(context.inputs, 'Sub', (a, b) => `${a}-${b}`));\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ShapeUtil} from '../../util';\n\n/**\n * constant value for a workgroup size.\n *\n * We definitely can do further optimization in future, but for now we use 64.\n *\n * rule of thumb: Use [a workgroup size of] 64 unless you know what GPU you are targeting or that your workload\n *                needs something different.\n *\n * from: https://surma.dev/things/webgpu/\n **/\nexport const WORKGROUP_SIZE = 64;\n\nexport interface IndicesHelper {\n  /**\n   * WGSL code of function implementation for offset-to-indices\n   */\n  o2iImpl: string;\n  /**\n   * WGSL code of function call for offset-to-indices\n   */\n  o2iCall: (varOffset: string, varIndices: string) => string;\n  /**\n   * WGSL code of function implementation for indices-to-offset\n   */\n  i2oImpl: string;\n  /**\n   * WGSL code of function implementation for indices-to-offset\n   *\n   * @param isPtr - whether the variable is a pointer. default is false.\n   */\n  i2oExpression: (varIndices: string, isPtr?: boolean) => string;\n  /**\n   * WGSL code of indices variable declaration\n   *\n   * @param v - variable name.\n   * @param init - initial value.\n   */\n  indicesVariableDeclaration: (v: string, init?: string[]) => string;\n  /**\n   * data type of indices\n   */\n  iType: string;\n}\n\nexport const createIndicesHelper = (name: string, shape: readonly number[]): IndicesHelper => {\n  const iType = shape.length < 2 ? 'u32' : `array<u32, ${shape.length}>`;\n\n  const strides = ShapeUtil.computeStrides(shape);\n  let o2iSnippet = '';\n  for (let i = 0; i < shape.length - 1; i++) {\n    o2iSnippet += `\n    let dim${i} = current / ${strides[i]}u;\n    let rest${i} = current % ${strides[i]}u;\n    (*indices)[${i}] = dim${i};\n    current = rest${i};\n    `;\n  }\n  o2iSnippet += `(*indices)[${shape.length - 1}] = current;`;\n\n  const o2iImpl = shape.length < 2 ? '' : `\n  fn ih_o2i_${name}(offset: u32, indices: ptr<function, ${iType}>) {\n    var current = offset;\n    ${o2iSnippet}\n  }`;\n\n  const o2iCall = (varOffset: string, varIndices: string) =>\n      shape.length < 2 ? `${varIndices}=${varOffset};` : `ih_o2i_${name}(${varOffset}, &${varIndices});`;\n\n  const offsets: string[] = [];\n  if (shape.length === 0) {\n    offsets.push('0u');\n  } else if (shape.length < 2) {\n    offsets.push('(*indices)');\n  } else {\n    for (let i = shape.length - 1; i >= 0; i--) {\n      offsets.push(`${strides[i]}u * ((*indices)[${i}])`);\n    }\n  }\n\n  const i2oImpl = shape.length < 2 ? '' : `\n  fn ih_i2o_${name}(indices: ptr<function, ${iType}>) -> u32 {\n    return ${offsets.join('+')};\n  }`;\n\n  const i2oExpression = (varIndices: string, isPtr?: boolean) =>\n      shape.length < 2 ? `(${isPtr ? '*' : ''}${varIndices})` : `ih_i2o_${name}(${isPtr ? '' : '&'}${varIndices})`;\n\n  const indicesVariableDeclaration = (v: string, init?: string[]) =>\n      `var ${v}:${iType}${init ? `=${iType}(${init.join(',')})` : ''};`;\n\n  return {o2iImpl, o2iCall, i2oImpl, i2oExpression, indicesVariableDeclaration, iType};\n};\n\n/**\n * A ShaderHelper is a helper class for generating WGSL code.\n */\nexport interface ShaderHelper {\n  mainStart(workgroupSize?: number|[number, number, number]): string;\n  guardAgainstOutOfBoundsWorkgroupSizes(size: unknown): string;\n}\n\nclass ShaderHelperImpl implements ShaderHelper {\n  constructor(private normalizedDispatchGroup: [number, number, number]) {}\n  guardAgainstOutOfBoundsWorkgroupSizes(size: number|string): string {\n    // Guard against out-of-bounds work group sizes\n    const sizeInCode = typeof size === 'number' ? `${size}u` : size;\n    return `if (global_idx >= ${sizeInCode}) { return; }`;\n  }\n  mainStart(workgroupSize: number|[number, number, number] = WORKGROUP_SIZE) {\n    const workgroupSizeX = typeof workgroupSize === 'number' ? workgroupSize : workgroupSize[0];\n    const workgroupSizeY = typeof workgroupSize === 'number' ? 1 : workgroupSize[1];\n    const workgroupSizeZ = typeof workgroupSize === 'number' ? 1 : workgroupSize[2];\n\n    const is1DimensionDispatch = this.normalizedDispatchGroup[1] === 1 && this.normalizedDispatchGroup[2] === 1;\n    const paramList = is1DimensionDispatch ? '@builtin(global_invocation_id) global_id : vec3<u32>' :\n                                             `@builtin(local_invocation_index) local_index : u32,\n    @builtin(workgroup_id) workgroup_id : vec3<u32>`;\n    const globalIdxDefinition = is1DimensionDispatch ?\n        'let global_idx = global_id.x;' :\n        `let global_idx = (workgroup_id.z * ${this.normalizedDispatchGroup[0] * this.normalizedDispatchGroup[1]}u +\n          workgroup_id.y * ${this.normalizedDispatchGroup[0]}u + workgroup_id.x) * ${\n            workgroupSizeX * workgroupSizeY * workgroupSizeZ}u + local_index;`;\n\n    return `@compute @workgroup_size(${workgroupSizeX}, ${workgroupSizeY}, ${workgroupSizeZ})\n  fn main(${paramList}) {\n    ${globalIdxDefinition}\n  `;\n  }\n}\n\nexport const createShaderHelper = (dispatchGroup: [number, number, number]): ShaderHelper =>\n    new ShaderHelperImpl(dispatchGroup);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor';\nimport {ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {createIndicesHelper, IndicesHelper, ShaderHelper} from './common';\n\nexport interface ConcatAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length < 1) {\n    throw new Error('too few inputs');\n  }\n\n  const inputType = inputs[0].dataType;\n  const inputDimensionality = inputs[0].dims.length;\n\n  for (const input of inputs) {\n    // make sure types of all inputs match\n    if (input.dataType !== inputType) {\n      throw new Error('input tensors should be one type');\n    }\n\n    // make sure the dimensionality of all inputs are the same\n    if (input.dims.length !== inputDimensionality) {\n      throw new Error('input tensors should have the same shape');\n    }\n  }\n};\n\nconst createConcatProgramMetadata = (inputCount: number, cacheHint: string) =>\n    ({name: 'Concat', inputTypes: Array(inputCount).fill(GpuDataType.default), cacheHint});\n\nconst calculateInputIndexImpl = (numberOfTensors: number): string => `\n  fn calculateInputIndex(index: u32) -> u32 {\n    for (var i: u32 = 0u; i < ${numberOfTensors}u; i += 1u ) {\n      if (index < sizeInConcatAxis[i]) {\n        return i;\n      }\n    }\n    return ${numberOfTensors}u;\n  }`;\n\nconst readBufferDataImpl = (indicesHelper: readonly IndicesHelper[], tensorRank: number, dataType: string) => {\n  const numberOfTensors = indicesHelper.length;\n  const codeLines: string[] = [];\n  for (let i = 0; i < numberOfTensors; ++i) {\n    const returnSnippet = `return input${i}[${indicesHelper[i].i2oExpression('indices', true)}];`;\n    if (numberOfTensors === 1) {\n      codeLines.push(returnSnippet);\n    } else if (i === 0) {\n      codeLines.push(`if (textureIndex == ${i}u) { ${returnSnippet} }`);\n    } else if (i === numberOfTensors - 1) {\n      codeLines.push(`else { ${returnSnippet} }`);\n    } else {\n      codeLines.push(`else if (textureIndex == ${i}) { ${returnSnippet} }`);\n    }\n  }\n  return `\n    fn readBufferData(textureIndex: u32, indices: ptr<function, ${indicesHelper[0].iType}>) -> ${dataType} {\n      ${codeLines.join('\\n')}\n    }`;\n};\n\nconst createConcatProgramInfo =\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], axis: number, dataType = 'f32'): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      const adjustedAxis = (axis < 0) ? inputShape.length + axis : axis;\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === adjustedAxis) {\n            outputShape[adjustedAxis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const outputSize = ShapeUtil.size(outputShape);\n      const rank = outputShape.length;\n\n      const sizeInConcatAxis = new Array<number>(inputs.length);\n      const inputStorageBuffersDeclarations = new Array<string>(inputs.length);\n      const inputIndicesHelpers = new Array<IndicesHelper>(inputs.length);\n\n      let previousSum = 0;\n      for (let i = 0; i < inputs.length; ++i) {\n        previousSum += inputs[i].dims[adjustedAxis];\n        sizeInConcatAxis[i] = previousSum;\n\n        inputStorageBuffersDeclarations[i] =\n            `@group(0) @binding(${i}) var<storage, read> input${i} : array<${dataType}>;`;\n\n        inputIndicesHelpers[i] = createIndicesHelper(`input${i}`, inputs[i].dims);\n      }\n\n      const outputIndicesHelper = createIndicesHelper('output', outputShape);\n\n      const indicesAxis = rank < 2 ? 'indices' : `indices[${adjustedAxis}]`;\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n\n  ${inputStorageBuffersDeclarations.join('\\n')}\n  @group(0) @binding(${inputs.length}) var<storage, read_write> output : array<${dataType}>;\n\n  ${inputIndicesHelpers.map(i => i.i2oImpl).join('\\n')}\n  ${outputIndicesHelper.o2iImpl}\n\n  const sizeInConcatAxis = array<u32, ${sizeInConcatAxis.length}>(${sizeInConcatAxis.map(i => `${i}u`).join(',')});\n  ${calculateInputIndexImpl(sizeInConcatAxis.length)}\n  ${readBufferDataImpl(inputIndicesHelpers, rank, dataType)}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n    ${outputIndicesHelper.indicesVariableDeclaration('indices')}\n    ${outputIndicesHelper.o2iCall('global_idx', 'indices')}\n\n    let textureIndex = calculateInputIndex(${indicesAxis});\n    if (textureIndex != 0u) {\n      ${indicesAxis} -= sizeInConcatAxis[textureIndex - 1u];\n    }\n\n    output[global_idx] = readBufferData(textureIndex, &indices);\n  }`;\n      return {\n        ...metadata,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        getShaderSource,\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n      };\n    };\n\nconst createConcatProgramInfoLoader =\n    (inputs: readonly TensorView[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createConcatProgramInfo(metadata, inputs, attributes.axis)};\n    };\n\nexport const concat = (context: ComputeContext, attributes: ConcatAttributes): void => {\n  validateInputs(context.inputs);\n  context.compute(createConcatProgramInfoLoader(context.inputs, attributes));\n};\n\nexport const parseConcatAttributes = (attributes: Record<string, unknown>): ConcatAttributes =>\n    createAttributeWithCacheKey({axis: attributes.axis as number});\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor';\nimport {ShapeUtil} from '../../util';\nimport {GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {createIndicesHelper, ShaderHelper} from './common';\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {getActicationSnippet} from './fuse-utils';\n\nconst createGroupedConvProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'GroupedConv',\n  inputTypes: hasBias ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\n                        [GpuDataType.default, GpuDataType.default],\n  cacheHint\n});\n\nconst createGroupedConvProgramInfo =\n    (inputs: readonly TensorView[], metadata: ProgramMetadata, attributes: ConvAttributes,\n     squeezeOutputShapeFunction?: (shape: readonly number[]) => number[]): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += b[output_channel];' : '';\n      const xShape = inputs[0].dims;\n      const wShape = inputs[1].dims;\n      const outputChannelsPerGroup = wShape[0] / attributes.group;\n\n      const dataType = 'f32';  // TODO: support other data type\n      const {activationFunction, applyActivation} = getActicationSnippet(attributes);\n      const inputStorageBuffersDeclarations = [\n        `@group(0) @binding(0) var<storage, read> x : array<${dataType}>;`,\n        `@group(0) @binding(1) var<storage, read> w : array<${dataType}>;`\n      ];\n      if (hasBias) {\n        inputStorageBuffersDeclarations.push(`@group(0) @binding(2) var<storage, read> b : array<${dataType}>;`);\n      }\n\n      const isChannelLast = attributes.format === 'NHWC';\n      const outputShape = calculateOutputShape(\n          xShape, wShape, attributes.dilations, attributes.pads, attributes.strides, isChannelLast);\n      const outputSize = ShapeUtil.size(outputShape);\n      const outputIndicesHelper = createIndicesHelper('output', outputShape);\n      const xIndicesHelper = createIndicesHelper('x', xShape);\n      const wIndicesHelper = createIndicesHelper('w', wShape);\n\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n  const strides: vec2<u32> = vec2(${attributes.strides[0]}u, ${attributes.strides[1]}u);\n  const pads: vec2<u32> = vec2(${attributes.pads[0]}u, ${attributes.pads[1]}u);\n\n  ${inputStorageBuffersDeclarations.join('\\n')}\n  @group(0) @binding(${inputStorageBuffersDeclarations.length}) var<storage, read_write> output : array<${dataType}>;\n\n  ${activationFunction}\n  ${outputIndicesHelper.o2iImpl}\n  ${xIndicesHelper.i2oImpl}\n  ${wIndicesHelper.i2oImpl}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n    ${outputIndicesHelper.indicesVariableDeclaration('outputIndices')}\n    ${outputIndicesHelper.o2iCall('global_idx', 'outputIndices')}\n    let batch: u32 = outputIndices[0];\n    let output_channel: u32 = outputIndices[${isChannelLast ? 3 : 1}];\n    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${isChannelLast ? 1 : 2}], outputIndices[${\n          isChannelLast ? 2 : 3}]) * strides - pads;\n    let group_id: u32 = output_channel / ${outputChannelsPerGroup}u;\n\n    var value: ${dataType} = ${dataType}(0);\n    for (var wInChannel: u32 = 0u; wInChannel < ${wShape[1]}u; wInChannel++) {\n      let input_channel = group_id * ${wShape[1]}u + wInChannel;\n      for (var wHeight: u32 = 0u; wHeight < ${wShape[2]}u; wHeight++) {\n        let xHeight = xRCCorner.x + wHeight * ${attributes.dilations[0]}u;\n\n        if (xHeight < 0u || xHeight >= ${xShape[isChannelLast ? 1 : 2]}u) {\n          continue;\n        }\n\n        for (var wWidth: u32 = 0u; wWidth < ${wShape[3]}u; wWidth++) {\n          let xWidth = xRCCorner.y + wWidth * ${attributes.dilations[1]}u;\n          if (xWidth < 0u || xWidth >= ${xShape[isChannelLast ? 2 : 3]}u) {\n            continue;\n          }\n\n          ${\n          xIndicesHelper.indicesVariableDeclaration(\n              'xIndices',\n              isChannelLast ? ['batch', 'xHeight', 'xWidth', 'input_channel'] :\n                              [\n                                'batch', 'input_channel', 'xHeight', 'xWidth'\n                              ])}\n          let xVal = x[${xIndicesHelper.i2oExpression('xIndices')}];\n          ${\n          wIndicesHelper.indicesVariableDeclaration('wIndices', [\n            'output_channel', 'wInChannel', 'wHeight', 'wWidth'\n          ])}\n          let wVal = w[${wIndicesHelper.i2oExpression('wIndices')}];\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${processBias}\n    ${applyActivation}\n    output[global_idx] = value;\n  }`;\n      return {\n        ...metadata,\n        outputs: [{\n          dims: squeezeOutputShapeFunction ? squeezeOutputShapeFunction(outputShape) : outputShape,\n          dataType: inputs[0].dataType,\n          gpuDataType: GpuDataType.default\n        }],\n        getShaderSource,\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n      };\n    };\n\n/**\n * naive grouped conv implementation, supports 1d/2d conv\n * @param squeezeOutputShapeFunction - an optional function to squeeze the output shape, only used in conv1d\n */\nexport const createGroupedConvProgramInfoLoader =\n    (inputs: readonly TensorView[], attributes: ConvAttributes,\n     squeezeOutputShapeFunction?: (shape: readonly number[]) => number[]): ProgramInfoLoader => {\n      const metadata = createGroupedConvProgramMetadata(inputs.length > 2, attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createGroupedConvProgramInfo(inputs, metadata, attributes, squeezeOutputShapeFunction)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor';\nimport {createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {createConvTranspose2DProgramInfo} from './3rd-party/conv_backprop_webgpu';\nimport {ConvAttributes} from './conv';\nimport {parseInternalActivationAttributes} from './fuse-utils';\n\nconst computeTotalPad =\n    (inDim: number, stride: number, adj: number, kernel: number, dilation: number, outSize: number) =>\n        (inDim - 1) * stride + adj + (kernel - 1) * dilation + 1 - outSize;\n\nconst distributePadding = (totalPad: number, autoPad: string, pads: number[], head: number, tail: number) => {\n  const smallPad = Math.floor(totalPad / 2);\n  if (autoPad === 'SAME_UPPER') {\n    pads[head] = smallPad;\n    pads[tail] = totalPad - smallPad;\n  } else if (autoPad === 'SAME_LOWER') {\n    pads[head] = totalPad - smallPad;\n    pads[tail] = smallPad;\n  }\n};\n\nconst calculateOutputShapeAndPads =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[], autoPad: string,\n     group: number, pads: number[], strides: readonly number[], isChannelLast: boolean, outputPadding: number[],\n     outputShape: number[]) => {\n      const spatialRank = inputShape.length - 2;\n      const updateOutputShape = outputShape.length === 0;\n      if (outputPadding.length === 0) {\n        for (let i = 0; i < spatialRank; ++i) {\n          outputPadding.push(0);\n        }\n      }\n      const batchSize = inputShape[0];\n      const outChannels = kernelShape[isChannelLast ? 3 : 1] * group;\n      for (let i = 0, j = inputShape.length - spatialRank - (isChannelLast ? 1 : 0); i < spatialRank; ++i, ++j) {\n        const inSize = inputShape[j];\n        const outSize = updateOutputShape ? inSize * strides[i] : outputShape[i];\n        const totalPad = computeTotalPad(inSize, strides[i], pads[i], kernelShape[j], dilations[i], outSize);\n        distributePadding(totalPad, autoPad, pads, i, i + spatialRank);\n        if (updateOutputShape) {\n          outputShape.push(\n              strides[i] * (inSize - 1) + outputPadding[i] + (kernelShape[j] - 1) * dilations[i] + 1 - pads[i] -\n              pads[i + spatialRank]);\n        }\n      }\n      outputShape.splice(0, 0, batchSize);\n      outputShape.splice(isChannelLast ? 3 : 1, 0, outChannels);\n    };\n\nexport interface ConvTransposeAttributes extends ConvAttributes {\n  readonly outputPadding: readonly number[];\n  readonly outputShape: readonly number[];\n}\n\n\nconst getAdjustedConvTransposeAttributes =\n    <T extends ConvTransposeAttributes>(attributes: T, inputs: readonly TensorView[]): T => {\n      const kernelShape = attributes.kernelShape.slice();\n      // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n      if (attributes.kernelShape.length === 0 || attributes.kernelShape.reduce((a, b) => a * b, 0) === 0) {\n        kernelShape.length = 0;\n        for (let i = 2; i < inputs[1].dims.length; ++i) {\n          kernelShape.push(inputs[1].dims[i]);\n        }\n      }\n      const isChannelsLast = attributes.format === 'NHWC';\n      kernelShape.splice(0, 0, inputs[1].dims[0]);\n      kernelShape.splice(isChannelsLast ? 3 : 1, 0, inputs[1].dims[1]);\n\n      const pads = attributes.pads.slice();\n      const outputShape = attributes.outputShape.slice();\n      const outputPadding = attributes.outputPadding.slice();\n      const inputShape = inputs[0].dims;\n      let dilations = attributes.dilations.slice();\n      if (dilations.reduce((a, b) => a + b, 0) === 0) {\n        const spatialRank = inputs[0].dims.length - 2;\n        dilations = new Array(spatialRank).fill(1);\n      }\n      let strides = attributes.strides.slice();\n      if (strides.reduce((a, b) => a + b, 0) === 0) {\n        const spatialRank = inputs[0].dims.length - 2;\n        strides = new Array(spatialRank).fill(1);\n      }\n      // If outputShape is not specified in the attributes of this op, infer it from the parameters\n      // Similarly, automatically infer pads if not specified\n      calculateOutputShapeAndPads(\n          inputShape, kernelShape, dilations, attributes.autoPad, attributes.group, pads, strides, isChannelsLast,\n          outputPadding, outputShape);\n\n      // always return a new object so does not modify the original attributes\n      const newAttributes: T = Object.assign({}, attributes);\n      Object.assign(\n          newAttributes,\n          {kernelShape, pads, outputPadding, outputShape, dilations, strides, cacheKey: attributes.cacheKey});\n      return newAttributes;\n    };\n\nexport const parseConvTransposeAttributes = (attributes: Record<string, unknown>): ConvTransposeAttributes => {\n  const activationAttributes = parseInternalActivationAttributes(attributes);\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n  const format = attributes.format as 'NHWC' | 'NCHW';\n  const autoPad =\n      ['NOTSET', 'VALID', 'SAME_UPPER',\n       'SAME_LOWER'][typeof attributes.autoPad == 'undefined' ? 0 : attributes.autoPad as number];\n  const dilations = attributes.dilations as [number, number];\n  const group = attributes.group as number;\n  const kernelShape = attributes.kernelShape as [number, number];\n  const pads = attributes.pads as [number, number, number, number];\n  const strides = attributes.strides as [number, number];\n  const wIsConst = (attributes.wIsConst as () => boolean)();\n  const outputPadding = attributes.outputPadding as [number, number, number, number];\n  const outputShape = attributes.outputShape as [number, number];\n  return createAttributeWithCacheKey({\n    autoPad,\n    format,\n    dilations,\n    group,\n    kernelShape,\n    outputPadding,\n    outputShape,\n    pads,\n    strides,\n    wIsConst,\n    ...activationAttributes\n  });\n};\n\nconst validateInputs = (inputs: readonly TensorView[], attributes: ConvTransposeAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#ConvTranspose\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 && inputs[0].dims.length !== 3) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  if (inputs[0].dims.length !== inputs[1].dims.length) {\n    throw new Error('filter does not have same dimension as input');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[attributes.format === 'NHWC' ? inputs[0].dims.length - 1 : 1];\n  const filterInChannel = inputs[1].dims[0];\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  const featureMaps = inputs[1].dims[1] * attributes.group;\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[2].dims[0] !== featureMaps)) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  const dilationsSet = attributes.dilations.reduce((a, b) => a + b, 0) > 0;\n  // wrong dilations dimension\n  if (dilationsSet && attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  const stridesSet = attributes.strides.reduce((a, b) => a + b, 0) > 0;\n  // Wrong strides dimension\n  if (stridesSet && attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  const padsSet = attributes.pads.reduce((a, b) => a + b, 0) > 0;\n  if (padsSet && attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // Wrong output padding dimension\n  if (attributes.outputPadding.length !== spatialRank && attributes.outputPadding.length !== 0) {\n    throw new Error(`output_padding should be ${spatialRank}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  const kernelShapeSet = attributes.kernelShape.reduce((a, b) => a + b, 0) > 0;\n  if (kernelShapeSet && attributes.kernelShape.length !== 0 &&\n      attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // as with kernelShape, must have same number of spatial dims as input\n  if (attributes.outputShape.length !== 0 && attributes.outputShape.length !== inputs[0].dims.length - 2) {\n    throw new Error('invalid output shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].dataType !== DataType.float || inputs[1].dataType !== DataType.float) {\n    throw new Error('ConvTranspose input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].dataType !== DataType.float) {\n    throw new Error('ConvTranspose input(bias) should be float tensor');\n  }\n};\n\nconst createConvTranspose2DProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'ConvTranspose2D',\n  inputTypes: hasBias ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\n                        [GpuDataType.default, GpuDataType.default],\n  cacheHint\n});\n\nconst createConvTranspose2DProgramInfoLoader =\n    (inputs: readonly TensorView[], attributes: ConvTransposeAttributes,\n     squeezeOutputShapeFunction?: (shape: readonly number[]) => number[]): ProgramInfoLoader => {\n      const hasBias = inputs.length === 3;\n      const metadata = createConvTranspose2DProgramMetadata(hasBias, attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createConvTranspose2DProgramInfo(inputs, metadata, attributes, squeezeOutputShapeFunction)\n      };\n    };\n\nconst convTranspose2d =\n    (context: ComputeContext, inputs: readonly TensorView[], attributes: ConvTransposeAttributes): void => {\n      const adjustedAttributes = getAdjustedConvTransposeAttributes(attributes, inputs);\n\n      context.compute(createConvTranspose2DProgramInfoLoader(inputs, adjustedAttributes));\n    };\nconst convTranspose1d = (context: ComputeContext, attributes: ConvTransposeAttributes): void => {\n  // extend the input to 2D by adding H dimension\n  const isChannelLast = attributes.format === 'NHWC';\n\n  const inputs = [\n    context.inputs[0].reshape(\n        isChannelLast ?\n            // [N, W, C] -> [N, H=1, W, C]\n            [context.inputs[0].dims[0], 1, context.inputs[0].dims[1], context.inputs[0].dims[2]] :\n            // [N, C, W] -> [N, C, H=1, W]\n            [context.inputs[0].dims[0], context.inputs[0].dims[1], 1, context.inputs[0].dims[2]]),\n    //[FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, kW] -> [FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, kH=1, kW]\n    context.inputs[1].reshape([context.inputs[1].dims[0], context.inputs[1].dims[1], 1, context.inputs[1].dims[2]])\n  ];\n  if (inputs.length === 3) {\n    inputs.push(context.inputs[2]);\n  }\n  let kernelShape = attributes.kernelShape;\n  if (kernelShape.length === 0 || kernelShape[0] === 0) {\n    kernelShape = [context.inputs[1].dims[2]];\n  }\n  let dilations = attributes.dilations;\n  if (dilations.length === 0 || dilations[0] === 0) {\n    dilations = [1];\n  }\n  let strides = attributes.strides;\n  if (strides.length === 0 || strides[0] === 0) {\n    strides = [1];\n  }\n  let pads = attributes.pads;\n  if (pads.length === 0) {\n    pads = [0, 0];\n  }\n  pads = [0, pads[0], 0, pads[1]];\n  strides = [1].concat(strides);\n  dilations = [1].concat(dilations);\n  kernelShape = [1].concat(kernelShape);\n  const adjustedAttributes =\n      getAdjustedConvTransposeAttributes({...attributes, pads, strides, dilations, kernelShape}, inputs);\n  context.compute(createConvTranspose2DProgramInfoLoader(\n      inputs, adjustedAttributes,\n      outputShape => isChannelLast ? [outputShape[0], outputShape[2], outputShape[3]] :\n                                     [outputShape[0], outputShape[1], outputShape[3]]));\n};\n\nexport const convTranspose = (context: ComputeContext, attributes: ConvTransposeAttributes): void => {\n  validateInputs(context.inputs, attributes);\n  if (context.inputs[0].dims.length === 3) {\n    convTranspose1d(context, attributes);\n  } else {\n    convTranspose2d(context, context.inputs, attributes);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor';\nimport {PoolConvUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext} from '../types';\n\nimport {createGroupedConvProgramInfoLoader} from './conv-grouped';\nimport {createConv2DMatMulProgramInfoLoader} from './conv2d-mm';\nimport {InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createTransposeProgramInfo, TransposeAttributes, transposeProgramMetadata} from './transpose';\n\nexport const calculateOutputShape =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[],\n     adjustPads: readonly number[], strides: readonly number[], isChannelLast: boolean): number[] => {\n      const batchSize = inputShape[0];\n      const inputSpatialShape = inputShape.slice(isChannelLast ? 1 : 2, isChannelLast ? 3 : 4);\n      const spatialRank = inputSpatialShape.length;\n      const outChannels = kernelShape[0];\n      const kernelSpatialShape = kernelShape.slice(2);\n      const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\n      const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\n      const outputShape =\n          inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\n      outputShape.splice(0, 0, batchSize);\n      outputShape.splice(isChannelLast ? 3 : 1, 0, outChannels);\n      return outputShape;\n    };\n\nexport interface ConvAttributes extends InternalActivationAttributes, AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly dilations: readonly number[];\n  readonly format: 'NHWC'|'NCHW';\n  readonly group: number;\n  readonly kernelShape: readonly number[];\n  readonly pads: readonly number[];\n  readonly strides: readonly number[];\n  readonly wIsConst: boolean;\n}\n\n// for transposing weight tensor from [M, C/group, KH, KW] to [KH, KW, C/group, M]\nconst weightTransposeAttribute: TransposeAttributes = createAttributeWithCacheKey({perm: [2, 3, 1, 0]});\n\nconst validateInputs = (inputs: readonly TensorView[], attributes: ConvAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/master/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 && inputs[0].dims.length !== 3) {\n    throw new Error('currently only support conv 1D and 2D');\n  }\n\n  if (inputs[0].dims.length !== inputs[1].dims.length) {\n    throw new Error('filter does not have same dimension as input');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[attributes.format === 'NHWC' ? inputs[0].dims.length - 1 : 1];\n  const filterInChannel = inputs[1].dims[1] * attributes.group;\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].dataType !== DataType.float || inputs[1].dataType !== DataType.float) {\n    throw new Error('Conv input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].dataType !== DataType.float) {\n    throw new Error('Conv input(bias) should be float tensor');\n  }\n};\n\nconst getAdjustedConvAttributes = <T extends ConvAttributes>(attributes: T, inputs: readonly TensorView[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  for (let i = 2; i < inputs[1].dims.length; ++i) {\n    if (kernelShape[i - 2] === 0) {\n      kernelShape[i - 2] = inputs[1].dims[i];\n    }\n  }\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPadsBasedOnAutoPad(\n      inputs[0].dims, attributes.strides, attributes.dilations, kernelShape, pads, attributes.format === 'NHWC',\n      attributes.autoPad);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvAttributes = (attributes: Record<string, unknown>): ConvAttributes => {\n  const activationAttributes = parseInternalActivationAttributes(attributes);\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n  const format = attributes.format as 'NHWC' | 'NCHW';\n  const autoPad = ['NOTSET', 'VALID', 'SAME_UPPER', 'SAME_LOWER'][attributes.auto_pad as number];\n  const dilations = attributes.dilations as [number, number];\n  const group = attributes.group as number;\n  const kernelShape = attributes.kernel_shape as [number, number];\n  const pads = attributes.pads as [number, number, number, number];\n  const strides = attributes.strides as [number, number];\n  const wIsConst = (attributes.w_is_const as () => boolean)();\n\n  return createAttributeWithCacheKey(\n      {autoPad, format, dilations, group, kernelShape, pads, strides, wIsConst, ...activationAttributes});\n};\n\nconst conv2d = (context: ComputeContext, inputs: readonly TensorView[], attributes: ConvAttributes): void => {\n  const adjustedAttributes = getAdjustedConvAttributes(attributes, inputs);\n\n  // check attributes\n\n  const hasBias = inputs.length === 3;\n  // const hasPreluActivationWeights = false; /* TODO: add support for prelu activation weights */\n  const isChannelsLast = attributes.format === 'NHWC';\n\n  // const batchSize = context.inputs[0].dims[0];\n  const inputHeight = inputs[0].dims[isChannelsLast ? 1 : 2];\n  const inputWidth = inputs[0].dims[isChannelsLast ? 2 : 3];\n  const inputChannels = inputs[0].dims[isChannelsLast ? 3 : 1];\n  const weightHeight = inputs[1].dims[2];\n  const weightWidth = inputs[1].dims[3];\n\n  const outputShape = calculateOutputShape(\n      inputs[0].dims, inputs[1].dims, attributes.dilations, adjustedAttributes.pads, attributes.strides,\n      isChannelsLast);\n  const outHeight = outputShape[isChannelsLast ? 1 : 2];\n  const outWidth = outputShape[isChannelsLast ? 2 : 3];\n  const outChannels = outputShape[isChannelsLast ? 3 : 1];\n\n  const sameSize =\n      isChannelsLast && weightHeight === inputHeight && weightWidth === inputWidth && attributes.autoPad === 'VALID';\n  if (sameSize ||\n      (weightHeight === 1 && weightWidth === 1 && attributes.dilations[0] === 1 && attributes.dilations[1] === 1 &&\n       attributes.strides[0] === 1 && attributes.strides[1] === 1 &&\n       (attributes.autoPad === 'SAME_UPPER' || attributes.autoPad === 'SAME_LOWER' ||\n        attributes.autoPad === 'VALID'))) {\n    // TODO: implement conv2dByMatMul()\n    context.compute(createGroupedConvProgramInfoLoader(inputs, adjustedAttributes));\n    return;\n  }\n\n  if (!isChannelsLast || attributes.group !== 1) {\n    context.compute(createGroupedConvProgramInfoLoader(inputs, adjustedAttributes));\n    return;\n  }\n\n  // TODO: implement conv2dWithIm2Col()\n\n  const dimAOuter = isChannelsLast ? outHeight * outWidth : outChannels;\n  const dimBOuter = isChannelsLast ? outChannels : outHeight * outWidth;\n  const dimInner = weightHeight * weightWidth * inputChannels;\n\n  const sequentialAccessByThreads = /* backend.adapterInfo.isIntel() */ true;\n\n  // STEP.1: transpose weight\n  const transposedWeight = (context.kernelCustomData.wT as TensorView | undefined) ??\n      context.compute(\n          {\n            ...transposeProgramMetadata,\n            cacheHint: weightTransposeAttribute.cacheKey,\n            get: () => createTransposeProgramInfo(inputs[1], weightTransposeAttribute.perm)\n          },\n          {inputs: [1], outputs: [attributes.wIsConst ? -2 : -1]})[0];\n  if (attributes.wIsConst && !context.kernelCustomData.wT) {\n    context.kernelCustomData.wT = transposedWeight;\n  }\n\n  // STEP.2: prepare reshaped inputs\n  const convInputs = [inputs[0], transposedWeight];\n  if (hasBias) {\n    if (!isChannelsLast && inputs[2].dims.length === 1) {\n      convInputs.push(inputs[2].reshape([inputs[2].dims[0], 1, 1]));\n    } else {\n      convInputs.push(inputs[2]);\n    }\n  }\n\n  // STEP.3: compute matmul\n  context.compute(\n      createConv2DMatMulProgramInfoLoader(\n          convInputs, adjustedAttributes, outputShape, dimAOuter, dimBOuter, dimInner, hasBias,\n          sequentialAccessByThreads),\n      {inputs: convInputs});\n};\n\nconst conv1d = (context: ComputeContext, attributes: ConvAttributes): void => {\n  // extend the input to 2D by adding H dimension\n  const isChannelLast = attributes.format === 'NHWC';\n  const inputs = [\n    context.inputs[0].reshape(\n        isChannelLast ?\n            // [N, W, C] -> [N, H=1, W, C]\n            [context.inputs[0].dims[0], 1, context.inputs[0].dims[1], context.inputs[0].dims[2]] :\n            // [N, C, W] -> [N, C, H=1, W]\n            [context.inputs[0].dims[0], context.inputs[0].dims[1], 1, context.inputs[0].dims[2]]),\n    //[FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, kW] -> [FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, kH=1, kW]\n    context.inputs[1].reshape([context.inputs[1].dims[0], context.inputs[1].dims[1], 1, context.inputs[1].dims[2]])\n  ];\n  if (context.inputs.length === 3) {\n    inputs.push(context.inputs[2]);\n  }\n  const pads = [0, attributes.pads[0], 0, attributes.pads[1]];\n  const strides = [1].concat(attributes.strides);\n  const dilations = [1].concat(attributes.dilations);\n  const kernelShape = [1].concat(attributes.kernelShape);\n  const adjustedAttributes = getAdjustedConvAttributes({...attributes, pads, strides, dilations, kernelShape}, inputs);\n  context.compute(createGroupedConvProgramInfoLoader(\n      inputs, adjustedAttributes,\n      outputShape => isChannelLast ? [outputShape[0], outputShape[2], outputShape[3]] : []));\n};\n\nexport const conv = (context: ComputeContext, attributes: ConvAttributes): void => {\n  validateInputs(context.inputs, attributes);  // currently will fail if not conv1D/2D\n  if (context.inputs[0].dims.length === 3) {\n    conv1d(context, attributes);\n  } else {\n    conv2d(context, context.inputs, attributes);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor';\nimport {GpuDataType, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {createConv2DMatMulProgramInfo} from './3rd-party/conv2d_mm_webgpu';\nimport {ConvAttributes} from './conv';\n\n\nconst createConv2DMatMulProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'Conv2DMatMul',\n  inputTypes: hasBias ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\n                        [GpuDataType.default, GpuDataType.default],\n  cacheHint\n});\n\nexport const createConv2DMatMulProgramInfoLoader =\n    (inputs: readonly TensorView[], attributes: ConvAttributes, outputShape: readonly number[], dimAOuter: number,\n     dimBOuter: number, dimInner: number, hasBias: boolean, sequentialAccessByThreads: boolean): ProgramInfoLoader => {\n      const metadata = createConv2DMatMulProgramMetadata(hasBias, attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createConv2DMatMulProgramInfo(\n            inputs, metadata, attributes, outputShape, dimAOuter, dimBOuter, dimInner, hasBias,\n            sequentialAccessByThreads)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor';\nimport {ShapeUtil} from '../../util';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramMetadata} from '../types';\n\nimport {createIndicesHelper, ShaderHelper} from './common';\n\nexport const expandProgramMetadata = {\n  name: 'Expand',\n  inputTypes: [GpuDataType.default]\n};\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Expand requires 2 input.');\n  }\n  const inputShape = inputs[0].dims;\n\n  const shape: number[] = [];\n  if (inputs[1].dims[0] > 0) {\n    inputs[1].getBigInt64Array().forEach(v => shape.push(Number(v)));\n  }\n  let shapeIndex = shape.length < inputShape.length ? 0 : shape.length - inputShape.length;\n  let inputShapeIndex = inputShape.length < shape.length ? 0 : inputShape.length - shape.length;\n  for (; shapeIndex < shape.length && inputShapeIndex < inputShape.length; ++shapeIndex, ++inputShapeIndex) {\n    if (shape[shapeIndex] !== inputShape[inputShapeIndex] && shape[shapeIndex] !== 1 &&\n        inputShape[inputShapeIndex] !== 1) {\n      throw new Error('Expand requires shape to be broadcastable to input');\n    }\n  }\n};\n\nconst getAdjustedShape = (shape1: readonly number[], shape2: readonly number[]): number[] => {\n  const diff = shape1.length - shape2.length;\n  const shape: number[] = [];\n  for (let i = 0; i < diff; ++i) {\n    shape.push(shape1[i]);\n  }\n  for (let i = 0; i < shape2.length; ++i) {\n    shape.push(shape2[i] === 1 ? shape1[i + diff] : shape2[i]);\n  }\n  return shape;\n};\n\nconst calculateOutputShape = (inputShape: readonly number[], shape: readonly number[]): number[] =>\n    (inputShape.length > shape.length) ? getAdjustedShape(inputShape, shape) : getAdjustedShape(shape, inputShape);\n\n\nconst createExpandProgramInfo = (metadata: ProgramMetadata, inputs: readonly TensorView[]): ProgramInfo => {\n  const inputShape = inputs[0].dims;\n\n  const shape: number[] = [];\n  if (inputs[1].dims[0] > 0) {\n    inputs[1].getBigInt64Array().forEach(v => shape.push(Number(v)));\n  }\n  const outputShape: number[] = calculateOutputShape(inputShape, shape);\n  const outputSize = ShapeUtil.size(outputShape);\n  const inputIndicesHelper = createIndicesHelper('input', inputShape);\n  const outputIndicesHelper = createIndicesHelper('output', outputShape);\n  const dataType = 'f32';\n\n  const calculateInputIndexImpl = (): string => `\n  fn calculateInputIndex(outputIndices: array<u32, ${outputShape.length}>) -> array<u32,${inputShape.length}> {\n    ${inputIndicesHelper.indicesVariableDeclaration('inputIndices')}\n    for (var i = 0; i < ${inputShape.length}; i++) {\n        if (inputShape[i] == 1) {\n            inputIndices[i] = 0;\n        } else {\n            inputIndices[i] = outputIndices[i + ${outputShape.length - inputShape.length}];\n        }\n    }\n    return inputIndices;\n}`;\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => `\n  const inputShape = array<u32, ${inputShape.length}>(${inputShape.map(i => `${i}u`).join(',')});\n  ${calculateInputIndexImpl()};\n  @group(0) @binding(0) var<storage, read> input : array<${dataType}>;\n  @group(0) @binding(1) var<storage, read_write> output : array<${dataType}>;\n  ${outputIndicesHelper.o2iImpl}\n  ${inputIndicesHelper.i2oImpl}\n  ${shaderHelper.mainStart()}\n  ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n  ${inputIndicesHelper.indicesVariableDeclaration('inputIndices')}\n  ${outputIndicesHelper.indicesVariableDeclaration('outputIndices')}\n  ${outputIndicesHelper.o2iCall('global_idx', 'outputIndices')}\n  inputIndices = calculateInputIndex(outputIndices);\n  output[global_idx] = input[${inputIndicesHelper.i2oExpression('inputIndices')}];\n}`;\n  return {\n    ...metadata,\n    getShaderSource,\n    outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n    dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n  };\n};\n\nexport const expand = (context: ComputeContext): void => {\n  validateInputs(context.inputs);\n  context.compute(\n      {...expandProgramMetadata, get: () => createExpandProgramInfo(expandProgramMetadata, context.inputs)},\n      {inputs: [0]});\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {MAX_CLIP, MIN_CLIP} from '../../util';\n\nexport interface InternalActivationAttributes {\n  readonly activation: string;\n  readonly clipMin?: number;\n  readonly clipMax?: number;\n  readonly activationCacheKey: string;\n}\n\nexport const getActicationSnippet =\n    (attributes: InternalActivationAttributes): {activationFunction: string; applyActivation: string} => {\n      switch (attributes.activation) {\n        case 'Relu':\n          return {activationFunction: '', applyActivation: 'value = max(value, 0.0);'};\n        case 'Sigmoid':\n          return {activationFunction: '', applyActivation: 'value = (1.0 / (1.0 + exp(-value)));'};\n        case 'Clip':\n          return {\n            activationFunction:\n                `const clip_min_=f32(${attributes.clipMin!});const clip_max_=f32(${attributes.clipMax!});`,\n            applyActivation: 'value = clamp(value, clip_min_, clip_max_);'\n          };\n          // TODO: adding other activations that can be fused.\n        default:\n          return {activationFunction: '', applyActivation: ''};\n      }\n    };\n\nexport const parseInternalActivationAttributes =\n    (attributes: Record<string, unknown>|undefined): InternalActivationAttributes => {\n      const activation = attributes?.activation as string || '';\n\n      if (activation === 'Clip') {\n        const [clipMin, clipMax] = attributes?.activation_params as [number, number] || [MIN_CLIP, MAX_CLIP];\n        return {activation, clipMax, clipMin, activationCacheKey: `${activation}:${clipMin},${clipMax}`};\n      }\n      return {activation, activationCacheKey: activation};\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor';\nimport {GemmUtil, ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {ShaderHelper} from './common';\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs) {\n    throw new Error('Input is missing');\n  }\n  if (inputs.length < 2 || inputs.length > 3) {\n    throw new Error('Invaid input number.');\n  }\n\n  // 'C' can be of dimensionality 0, 1 or 2 only\n  if (inputs.length === 3 && inputs[2].dims.length > 2) {\n    throw new Error('Invalid input shape of C');\n  }\n\n  if ((inputs[0].dataType !== DataType.float) || (inputs[1].dataType !== DataType.float) ||\n      (inputs.length === 3 && inputs[2].dataType !== DataType.float)) {\n    throw new Error('Invalid input type.');\n  }\n\n  if ((inputs[0].dataType !== inputs[1].dataType) ||\n      (inputs.length === 3 && inputs[0].dataType !== inputs[2].dataType)) {\n    throw new Error('Input types are mismatched');\n  }\n};\n\nexport interface GemmAttributes extends AttributeWithCacheKey {\n  transA: boolean;\n  transB: boolean;\n  alpha: number;\n  beta: number;\n}\n\nconst offsetC = (m: number, n: number, dims: readonly number[]): string => {\n  if (dims.length === 0) {\n    return '0u';\n  }\n\n  const broadcastM = (dims.length === 1 && m !== 1) || (dims.length === 2 && dims[0] !== m);\n  const broadcastN = dims[dims.length - 1] !== n;\n\n  let offset = '0u';\n  if (!broadcastM) {\n    offset += `+ m * ${dims[dims.length - 1]}u`;\n  }\n  if (!broadcastN) {\n    offset += '+n';\n  }\n\n  return offset;\n};\n\nconst createGemmProgramInfo =\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], attributes: GemmAttributes): ProgramInfo => {\n      const aShape = inputs[0].dims.slice();\n      const bShape = inputs[1].dims.slice();\n      const [M, N, K] = GemmUtil.getShapeOfGemmResult(\n          aShape, attributes.transA, bShape, attributes.transB, inputs.length === 3 ? inputs[2].dims : undefined);\n      const outputShape = [M, N];\n      if (!outputShape) {\n        throw new Error('Can\\'t use gemm on the given tensors');\n      }\n      const outputSize = ShapeUtil.size(outputShape);\n      let line = '';\n      if (attributes.transA && attributes.transB) {\n        line = 'value += a[k * M + m] * b[n * K + k];';\n      } else if (attributes.transA && !attributes.transB) {\n        line = 'value += a[k * M + m] * b[k * N + n];';\n      } else if (!attributes.transA && attributes.transB) {\n        line = 'value += a[m * K + k] * b[n * K + k];';\n      } else if (!attributes.transA && !attributes.transB) {\n        line = 'value += a[m * K + k] * b[k * N + n];';\n      }\n\n      const dataType = 'f32';  // TODO: support other data type\n      const calculateAlpha = attributes.alpha === 1 ? '' : 'value *= alpha;';\n      const calculateC = inputs.length === 3 ? `value += beta * c[${offsetC(M, N, inputs[2].dims)}];` : '';\n      const inputStorageBuffersDeclarations = [\n        `@group(0) @binding(0) var<storage, read> a : array<${dataType}>;`,\n        `@group(0) @binding(1) var<storage, read> b : array<${dataType}>;`\n      ];\n      if (inputs.length === 3) {\n        inputStorageBuffersDeclarations.push(`@group(0) @binding(2) var<storage, read> c : array<${dataType}>;`);\n      }\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n  const M: u32 = ${M}u;\n  const N: u32 = ${N}u;\n  const K: u32 = ${K}u;\n  const alpha = ${dataType}(${attributes.alpha});\n  const beta = ${dataType}(${attributes.beta});\n\n  ${inputStorageBuffersDeclarations.join('\\n')}\n  @group(0) @binding(${inputs.length}) var<storage, read_write> output : array<${dataType}>;\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n    let m = global_id.x / N;\n    let n = global_id.x % N;\n\n    var value = ${dataType}(0);\n    for (var k: u32 = 0u; k<${K}u; k++) {\n      ${line}\n    }\n\n    ${calculateAlpha}\n    ${calculateC}\n    output[global_id.x] = value;\n\n  }`;\n      return {\n        ...metadata,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        getShaderSource,\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n      };\n    };\n\nconst createGemmProgramInfoLoader = (inputs: readonly TensorView[], attributes: GemmAttributes): ProgramInfoLoader => {\n  const metadata = {\n    name: 'Gemm',\n    inputTypes: inputs.length === 3 ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\n                                      [GpuDataType.default, GpuDataType.default],\n    cacheHint: attributes.cacheKey\n  };\n\n  return {...metadata, get: () => createGemmProgramInfo(metadata, inputs, attributes)};\n};\n\nexport const gemm = (context: ComputeContext, attributes: GemmAttributes): void => {\n  validateInputs(context.inputs);\n  context.compute(createGemmProgramInfoLoader(context.inputs, attributes));\n};\n\nexport const parseGemmAttributes = (attributes: Record<string, unknown>): GemmAttributes =>\n    createAttributeWithCacheKey(attributes as Omit<GemmAttributes, keyof AttributeWithCacheKey>);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../util';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {ShaderHelper} from './common';\nimport {getActicationSnippet, InternalActivationAttributes} from './fuse-utils';\n\n\nconst createMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul',\n  inputTypes: hasBias ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\n                        [GpuDataType.default, GpuDataType.default],\n  cacheHint\n});\n\nconst createMatmulProgramInfo =\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], activationAttributes: InternalActivationAttributes):\n        ProgramInfo => {\n          const aShape = inputs[0].dims;\n          const bShape = inputs[1].dims;\n          const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n          if (!outputShape) {\n            throw new Error('Can\\'t use matmul on the given tensors');\n          }\n          const outputSize = ShapeUtil.size(outputShape);\n          // TODO: support broadcasting\n\n          const dataType = 'f32';  // TODO: support other data type\n          const {activationFunction, applyActivation} = getActicationSnippet(activationAttributes);\n\n          const M = outputShape[outputShape.length - 2];\n          const K = aShape[aShape.length - 1];\n          const N = outputShape[outputShape.length - 1];\n          const getShaderSource = (shaderHelper: ShaderHelper) => `\n  const M: u32 = ${M}u;\n  const N: u32 = ${N}u;\n  const K: u32 = ${K}u;\n\n  @group(0) @binding(0) var<storage, read> a : array<${dataType}>;\n  @group(0) @binding(1) var<storage, read> b : array<${dataType}>;\n  @group(0) @binding(2) var<storage, read_write> output : array<${dataType}>;\n\n  ${activationFunction}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n    let stack = global_idx / (M * N);\n    let mn = global_idx % (M * N);\n    let n = global_idx % N;\n    let m = mn / N;\n\n    let offsetA = stack * (M * K);\n    let offsetB = stack * (K * N);\n\n    var value = ${dataType}(0);\n    for (var k: u32 = 0u; k<${K}u; k++) {\n      value += a[offsetA + m * K + k] * b[offsetB + k * N + n];\n    }\n    ${applyActivation}\n    output[global_idx] = value;\n  }`;\n          return {\n            ...metadata,\n            outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n            getShaderSource,\n            dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n          };\n        };\n\nexport const createMatmulProgramInfoLoader =\n    (inputs: readonly TensorView[], activationAttributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n      return {...metadata, get: () => createMatmulProgramInfo(metadata, inputs, activationAttributes)};\n    };\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('MatMul requires 2 inputs.');\n  }\n\n  if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\n    throw new Error('shared dimension does not match.');\n  }\n\n  if (inputs[0].dataType !== DataType.float || inputs[1].dataType !== DataType.float) {\n    throw new Error('inputs should be float type');\n  }\n};\n\nexport const matMul = (context: ComputeContext): void => {\n  validateInputs(context.inputs);\n\n  context.compute(createMatmulProgramInfoLoader(context.inputs, {activation: '', activationCacheKey: ''}));\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor';\nimport {PoolConvUtil, ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramMetadata} from '../types';\n\nimport {createIndicesHelper, ShaderHelper} from './common';\n\n// TODO: support:\n// - ceil_mode                 \"test_maxpool_2d_ceil\"\n// - storage_order             \"test_maxpool_with_argmax_2d_precomputed_strides\"\n// - [MaxPool] dilations       \"test_maxpool_2d_dilations\"\n// - [MaxPool] output[1]       \"test_maxpool_with_argmax_2d_precomputed_pads\"\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pool ops requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Pool ops supports 2-D inputs only for now.');\n  }\n  if (inputs[0].dataType !== DataType.float) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst getAdjustedPoolAttributesAndOutputShape = <AttributeType extends AveragePoolAttributes|MaxPoolAttributes>(\n    inputs: readonly TensorView[], attributes: AttributeType, isGlobalOperator: boolean): [AttributeType, number[]] => {\n  const isChannelsLast = attributes.format === 'NHWC';\n  const inputShapeAsChannelFirst = isChannelsLast ?\n      [inputs[0].dims[0], inputs[0].dims[3], inputs[0].dims[1], inputs[0].dims[2]] :\n      inputs[0].dims.slice();\n  const hasDilations = Object.hasOwnProperty.call(attributes, 'dilations');\n  const kernelShape = attributes.kernelShape.slice();\n  const strides = attributes.strides.slice();\n  const dilations: number[] = hasDilations ? (attributes as MaxPoolAttributes).dilations.slice() : [];\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShapeAsChannelFirst, kernelShape, strides, dilations, pads);\n\n  const outputShapeAsChannelFirst = PoolConvUtil.computePoolOutputShape(\n      isGlobalOperator, inputShapeAsChannelFirst, strides, dilations, kernelShape, pads, attributes.autoPad);\n\n  const newAttributes = Object.assign({}, attributes);\n  if (hasDilations) {\n    Object.assign(newAttributes, {kernelShape, strides, pads, dilations, cacheKey: attributes.cacheKey});\n  } else {\n    Object.assign(newAttributes, {kernelShape, strides, pads, cacheKey: attributes.cacheKey});\n  }\n  return [\n    newAttributes,\n    isChannelsLast ?\n        [\n          outputShapeAsChannelFirst[0], outputShapeAsChannelFirst[2], outputShapeAsChannelFirst[3],\n          outputShapeAsChannelFirst[1]\n        ] :\n        outputShapeAsChannelFirst\n  ];\n};\n\nconst generatePoolingCode = <AttributeType extends AveragePoolAttributes|MaxPoolAttributes>(\n    shaderHelper: ShaderHelper, inputDims: readonly number[], outputShape: readonly number[], attributes: AttributeType,\n    op1: string, op2: string, dataType: string, start: string): string => {\n  const isChannelsLast = attributes.format === 'NHWC';\n  const rank = inputDims.length;\n  const outputSize = ShapeUtil.size(outputShape);\n  const outputIndicesHelper = createIndicesHelper('output', outputShape);\n  const xIndicesHelper = createIndicesHelper('x', inputDims);\n\n  if (attributes.kernelShape.length <= 2) {\n    const kw = attributes.kernelShape[attributes.kernelShape.length - 1];\n    const sw = attributes.strides[attributes.strides.length - 1];\n    const pwStart = attributes.pads[attributes.pads.length / 2 - 1];\n    const pwEnd = attributes.pads[attributes.pads.length - 1];\n    const dimIdxW = rank - (isChannelsLast ? 2 : 1);\n    let codeW = '';\n    let codeH = '';\n    let codeHEnd = '';\n    if (pwStart + pwEnd !== 0) {\n      codeW = `\n              for (var i: u32 = 0u; i < ${kw}u; i++) {\n                xIndices[${dimIdxW}] = indices[${dimIdxW}] * ${sw} - ${pwStart} + i;\n                if (xIndices[${dimIdxW}] < 0 || xIndices[${dimIdxW}] >= ${inputDims[dimIdxW]}) {\n                  pad++;\n                  continue;\n                }\n                let x_val = x[${xIndicesHelper.i2oExpression('xIndices')}];\n                ${op1}\n              }`;\n    } else {\n      codeW = `\n              for (var i: u32 = 0u; i < ${kw}u; i++) {\n                xIndices[${dimIdxW}] = indices[${dimIdxW}] * ${sw} - ${pwStart} + i;\n                let x_val = x[${xIndicesHelper.i2oExpression('xIndices')}];\n                ${op1}\n              }`;\n    }\n\n    if (attributes.kernelShape.length === 2) {\n      const kh = attributes.kernelShape[attributes.kernelShape.length - 2];\n      const sh = attributes.strides[attributes.strides.length - 2];\n      const phStart = attributes.pads[attributes.pads.length / 2 - 2];\n      const phEnd = attributes.pads[attributes.pads.length - 2];\n      const dimIdxH = rank - (isChannelsLast ? 3 : 2);\n      const dimH = inputDims[dimIdxH];\n      if (phStart + phEnd !== 0) {\n        codeH = `\n                for (var j: u32 = 0u; j < ${kh}u; j++) {\n                  xIndices[${dimIdxH}] = indices[${dimIdxH}] * ${sh} - ${phStart} + j;\n                  if (xIndices[${dimIdxH}] < 0 || xIndices[${dimIdxH}] >= ${dimH}) {\n                    pad+= ${kw};\n                    continue;\n                  }\n              `;\n      } else {\n        codeH = `\n                for (var j: u32 = 0u; j < ${kh}u; j++) {\n                  xIndices[${dimIdxH}] = indices[${dimIdxH}] * ${sh} - ${phStart} + j;\n                `;\n      }\n      codeHEnd = `\n              }\n            `;\n    }\n\n    const poolingCode = `\n            @group(0) @binding(0) var<storage, read> x : array<${dataType}>;\n            @group(0) @binding(1) var<storage, read_write> output : array<${dataType}>;\n\n            ${outputIndicesHelper.o2iImpl}\n            ${xIndicesHelper.i2oImpl}\n\n            ${shaderHelper.mainStart()}\n              ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n              ${outputIndicesHelper.indicesVariableDeclaration('indices')}\n              ${outputIndicesHelper.o2iCall('global_idx', 'indices')}\n              ${outputIndicesHelper.indicesVariableDeclaration('xIndices')}\n              ${outputIndicesHelper.o2iCall('global_idx', 'xIndices')}\n\n              var value: ${dataType} = ${dataType}(${start});\n              var pad = 0;\n              ${codeH}\n              ${codeW}\n              ${codeHEnd}\n              ${op2}\n\n              output[global_idx] = value;\n            }`;\n    return poolingCode;\n  } else {\n    if (isChannelsLast) {\n      throw new Error('Pooling with kernelShape.length > 2 is not supported for NHWC format.');\n    }\n    const kernelSize = ShapeUtil.size(attributes.kernelShape);\n    const kernelStrides = ShapeUtil.computeStrides(attributes.kernelShape);\n    const stridesRank = kernelStrides.length;\n    const padsRank = attributes.pads.length;\n    const hasPads = attributes.pads.reduce((sum, cur) => sum + cur);\n    let padCode = '';\n    if (hasPads) {\n      padCode = `\n                if (xIndices[j] >= inputDims[j]) {\n                  pad++;\n                  isPad = true;\n                  break;\n                }\n              }\n              if (!isPad) {\n                let x_val = x[${xIndicesHelper.i2oExpression('xIndices')}];\n                ${op1}\n              }`;\n    } else {\n      padCode = `\n              }\n              let x_val = x[${xIndicesHelper.i2oExpression('xIndices')}];\n              ${op1}\n            `;\n    }\n    const poolingCode = `\n            @group(0) @binding(0) var<storage, read> x : array<${dataType}>;\n            @group(0) @binding(1) var<storage, read_write> output : array<${dataType}>;\n\n            ${outputIndicesHelper.o2iImpl}\n            ${xIndicesHelper.i2oImpl}\n\n            const pads = array<u32, ${padsRank}>(${attributes.pads.map(i => `${i}u`).join(',')});\n            const inputDims = array<u32, ${rank}>(${inputDims.map(i => `${i}u`).join(',')});\n            const kernelStrides = array<u32, ${stridesRank}>(${kernelStrides.map(i => `${i}u`).join(',')});\n            const strides = array<u32, ${stridesRank}>(${attributes.strides.map(i => `${i}u`).join(',')});\n\n            ${shaderHelper.mainStart()}\n              ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n              ${outputIndicesHelper.indicesVariableDeclaration('indices')}\n              ${outputIndicesHelper.o2iCall('global_idx', 'indices')}\n              ${outputIndicesHelper.indicesVariableDeclaration('xIndices')}\n              ${outputIndicesHelper.o2iCall('global_idx', 'xIndices')}\n\n              var offsets: array<u32, ${stridesRank}>;\n\n              var value = ${dataType}(${start});\n              var pad = 0;\n              var isPad = false;\n\n              for (var i: u32 = 0u; i < ${kernelSize}u; i++) {\n                var offset = i;\n                for (var j = 0u; j < ${stridesRank - 1}u; j++) {\n                  offsets[j] = offset / kernelStrides[j];\n                  offset -= offsets[j] * kernelStrides[j];\n                }\n                offsets[${stridesRank - 1}] = offset;\n\n                isPad = false;\n                for (var j = ${rank - stridesRank}u; j < ${rank}u; j++) {\n                  xIndices[j] = indices[j] * strides[j - ${rank - stridesRank}u]\n                    + offsets[j - ${rank - stridesRank}u] - pads[j - 2u];\n                  ${padCode}\n              }\n              ${op2}\n\n              output[global_idx] = value;\n            }`;\n    return poolingCode;\n  }\n};\n\nexport interface FormatAttributes {\n  readonly format: 'NHWC'|'NCHW';\n}\n\nexport interface PoolCommonAttributes extends FormatAttributes {\n  readonly autoPad: string;\n  readonly ceilMode: number;\n  readonly kernelShape: readonly number[];\n  readonly strides: readonly number[];\n  readonly pads: readonly number[];\n}\n\nconst parsePoolCommonAttributes = (attributes: Record<string, unknown>): PoolCommonAttributes => ({\n  format: attributes.format as FormatAttributes['format'],\n  autoPad: ['NOTSET', 'VALID', 'SAME_UPPER', 'SAME_LOWER'][attributes.auto_pad as number],\n  ceilMode: attributes.ceil_mode as number,\n  kernelShape: attributes.kernel_shape as [number, number],\n  strides: attributes.strides as [number, number],\n  pads: attributes.pads as [number, number, number, number]\n});\n\nexport interface AveragePoolAttributes extends PoolCommonAttributes, AttributeWithCacheKey {\n  readonly countIncludePad: boolean;\n}\n\nconst createAveragePoolProgramInfo =\n    (inputs: readonly TensorView[], metadata: ProgramMetadata, isGlobalOperator: boolean,\n     attributes: AveragePoolAttributes): ProgramInfo => {\n      const [adjustedAttributes, outputShape] =\n          getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n      const kernelSize = ShapeUtil.size(adjustedAttributes.kernelShape);\n\n      const dataType = 'f32';\n\n      const op1 = 'value += x_val;';\n      let op2 = '';\n      if (adjustedAttributes.countIncludePad) {\n        op2 += `value /= ${dataType}(${kernelSize});`;\n      } else {\n        op2 += `value /= ${dataType}(${kernelSize} - pad);`;\n      }\n      return {\n        ...metadata,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        getShaderSource: shaderHelper => generatePoolingCode(\n            shaderHelper, inputs[0].dims, outputShape, adjustedAttributes, op1, op2, dataType, '0.0'),\n        dispatchGroup: () => ({x: Math.ceil(ShapeUtil.size(outputShape) / 64 /* workgroup size */)})\n      };\n    };\n\nexport const parseAveragePoolAttributes = (attributes: Record<string, unknown>): AveragePoolAttributes => {\n  const countIncludePad = (attributes.count_include_pad as number) === 0 ? false : true;\n\n  const attr = parsePoolCommonAttributes(attributes);\n  // TODO: support attribute 'ceil_mode'\n  if (attr.ceilMode !== 0) {\n    throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\n  }\n\n  return createAttributeWithCacheKey({countIncludePad, ...attr});\n};\n\nexport const averagePool = (context: ComputeContext, attributes: AveragePoolAttributes): void => {\n  validateInputs(context.inputs);\n  const metadata = {name: 'AveragePool', inputTypes: [GpuDataType.default], cacheHint: attributes.cacheKey};\n  context.compute({...metadata, get: () => createAveragePoolProgramInfo(context.inputs, metadata, false, attributes)});\n};\n\nconst globalPoolAttributes = {\n  autoPad: '',\n  ceilMode: 0,\n  countIncludePad: false,\n  kernelShape: [],\n  strides: [],\n  pads: [],\n  storageOrder: 0,\n  dilations: [],\n  cacheKey: ''\n};\n\nexport const parseGlobalAveragePoolAttributes = (attributes: Record<string, unknown>): AveragePoolAttributes => {\n  const format = attributes.format as FormatAttributes['format'];\n  return {format, ...globalPoolAttributes, cacheKey: format};\n};\n\nexport const globalAveragePool = (context: ComputeContext, attributes: AveragePoolAttributes): void => {\n  validateInputs(context.inputs);\n  const metadata = {name: 'GlobalAveragePool', inputTypes: [GpuDataType.default], cacheHint: attributes.cacheKey};\n  context.compute({...metadata, get: () => createAveragePoolProgramInfo(context.inputs, metadata, true, attributes)});\n};\n\nexport interface MaxPoolAttributes extends PoolCommonAttributes, AttributeWithCacheKey {\n  readonly storageOrder: number;\n  readonly dilations: number[];\n}\n\nconst createMaxPoolProgramInfo =\n    (inputs: readonly TensorView[], metadata: ProgramMetadata, isGlobalOperator: boolean,\n     attributes: MaxPoolAttributes): ProgramInfo => {\n      const [adjustedAttributes, outputShape] =\n          getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n      const op1 = `\n      value = max(x_val, value);\n    `;\n      const op2 = '';\n      return {\n        ...metadata,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        getShaderSource: shaderHelper =>\n            generatePoolingCode(shaderHelper, inputs[0].dims, outputShape, adjustedAttributes, op1, op2, 'f32', '-1e5'),\n        dispatchGroup: () => ({x: Math.ceil(ShapeUtil.size(outputShape) / 64 /* workgroup size */)})\n      };\n    };\n\nexport const maxPool = (context: ComputeContext, attributes: MaxPoolAttributes): void => {\n  validateInputs(context.inputs);\n  const metadata = {name: 'MaxPool', inputTypes: [GpuDataType.default], cacheHint: attributes.cacheKey};\n  context.compute({...metadata, get: () => createMaxPoolProgramInfo(context.inputs, metadata, false, attributes)});\n};\n\nexport const parseMaxPoolAttributes = (attributes: Record<string, unknown>): MaxPoolAttributes => {\n  const storageOrder = attributes.storage_order as number;\n  const dilations = attributes.dilations as [number, number];\n\n  const attr = parsePoolCommonAttributes(attributes);\n  // TODO: support attribute 'ceil_mode' and 'storage_order'\n  if (storageOrder !== 0) {\n    throw new Error('column major storage order is not yet supported for MaxPool');\n  }\n  if (attr.ceilMode !== 0) {\n    throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\n  }\n\n  return createAttributeWithCacheKey({storageOrder, dilations, ...attr});\n};\n\nexport const parseGlobalMaxPoolAttributes = (attributes: Record<string, unknown>): MaxPoolAttributes => {\n  const format = attributes.format as FormatAttributes['format'];\n  return {format, ...globalPoolAttributes, cacheKey: format};\n};\n\nexport const globalMaxPool = (context: ComputeContext, attributes: MaxPoolAttributes): void => {\n  validateInputs(context.inputs);\n  const metadata = {name: 'GlobalMaxPool', inputTypes: [GpuDataType.default], cacheHint: attributes.cacheKey};\n  context.compute({...metadata, get: () => createMaxPoolProgramInfo(context.inputs, metadata, true, attributes)});\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor';\nimport {ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {createIndicesHelper, ShaderHelper} from './common';\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length === 0 || inputs.length > 2) {\n    throw new Error('Reduce op requires 1 or 2 inputs.');\n  }\n\n  if (inputs.length === 2 && inputs[1].dims.length !== 1) {\n    throw new Error('Invalid axes input dims.');\n  }\n\n  if (inputs[0].dataType !== DataType.float) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport interface ReduceAttributes extends AttributeWithCacheKey {\n  keepDims: boolean;\n  noopWithEmptyAxes: boolean;\n  axes: number[];\n}\n\ntype ReduceOp = (inputs: readonly TensorView[], axes: number[]) => string[];\nconst noOp: ReduceOp = (): string[] => ['', '', 'value = _A[inputIdx];', ''];\nconst createReduceProgramInfo =\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], attributes: ReduceAttributes,\n     reduceOp: ReduceOp): ProgramInfo => {\n      const outputShape: number[] = [];\n      const inputShape = inputs[0].dims;\n\n      const idxCopy: string[] = [];  // copy output indexes to input indexes\n\n      const axes = ShapeUtil.normalizeAxes(attributes.axes, inputs[0].dims.length);\n      const outputDimsLength = inputs[0].dims.length - (attributes.keepDims ? 0 : axes.length);\n      const ops = reduceOp(inputs, axes);\n      const inputIndicesHelper = createIndicesHelper('input', inputShape);\n      const initInputIdx = (ops[1] === '') ? '' : `let inputIdx = ${inputIndicesHelper.i2oExpression('inputIndices')};`;\n      let reduceOps = `\n          let inputIdx = ${inputIndicesHelper.i2oExpression('inputIndices')};\n          ${ops[2]};`;\n      const reduceOnAllAxes = !attributes.noopWithEmptyAxes && attributes.axes.length === 0;\n      for (let k = 0; k < inputs[0].dims.length; k++) {\n        // if this axis is reduced\n        if (reduceOnAllAxes || axes.indexOf(k) >= 0) {\n          if (attributes.keepDims) {\n            outputShape.push(1);\n          }  // else { remove the axis from outputShape; }\n\n          // loop over the d-th axis\n          reduceOps = `for(var j${k}: u32 = 0; j${k} < ${inputs[0].dims[k]}; j${k}++) {\n                            inputIndices[${k}] = j${k};\n                            ${reduceOps}\n                          }`;\n        } else {\n          if (outputDimsLength > 1) {\n            idxCopy.push(`inputIndices[${k}] = outputIndices[${outputShape.length}];`);\n          } else {\n            idxCopy.push(`inputIndices[${k}] = outputIndices;`);\n          }\n          outputShape.push(inputs[0].dims[k]);\n        }\n      }\n\n      const outputIndicesHelper = createIndicesHelper('output', outputShape);\n      const outputSize = ShapeUtil.size(outputShape);\n      const dataType = 'f32';\n\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n          @group(0) @binding(0) var<storage, read> _A : array<${dataType}>;\n          @group(0) @binding(1) var<storage, read_write> output : array<${dataType}>;\n\n          ${outputIndicesHelper.o2iImpl}\n          ${inputIndicesHelper.i2oImpl}\n\n          ${shaderHelper.mainStart()}\n          ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n          ${inputIndicesHelper.indicesVariableDeclaration('inputIndices')}\n          ${outputIndicesHelper.indicesVariableDeclaration('outputIndices')}\n          ${outputIndicesHelper.o2iCall('global_idx', 'outputIndices')}\n\n          var value = ${dataType}(0);\n\n          ${idxCopy.join('\\n')}\n          ${ops[0]}       // init ops for reduce max/min\n          ${initInputIdx}\n          ${ops[1]}\n          ${reduceOps}\n          ${ops[3]}       // final computation for reduce mean\n          output[global_idx] = value;\n        }`;\n\n      return {\n        ...metadata,\n        getShaderSource,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n      };\n    };\n\nconst createReduceAttributesFromInputs =\n    (inputs: readonly TensorView[], attributes: ReduceAttributes): ReduceAttributes => {\n      const axes: number[] = [];\n      if (inputs[1].dims[0] > 0) {\n        inputs[1].getBigInt64Array().forEach(v => axes.push(Number(v)));\n      }\n      return createAttributeWithCacheKey(\n          {axes, keepDims: attributes.keepDims, noopWithEmptyAxes: attributes.noopWithEmptyAxes});\n    };\n\nconst createReduceProgramInfoLoader =\n    (inputs: readonly TensorView[], name: string, attributes: ReduceAttributes, reduceOp: ReduceOp):\n        ProgramInfoLoader => {\n          const updatedAttributes: ReduceAttributes =\n              inputs.length === 1 ? attributes : createReduceAttributesFromInputs(inputs, attributes);\n          const metadata:\n              ProgramMetadata = {name, inputTypes: [GpuDataType.default], cacheHint: updatedAttributes.cacheKey};\n          return {\n            ...metadata,\n            get: () => createReduceProgramInfo(\n                metadata, [inputs[0]], updatedAttributes,\n                updatedAttributes.noopWithEmptyAxes && updatedAttributes.axes.length === 0 ? noOp : reduceOp)\n          };\n        };\n\nexport const reduceLogSum = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', '', 'value += _A[inputIdx];', 'value = log(value);'];\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceLogSum', attributes, reduceOp), {inputs: [0]});\n};\n\nexport const reduceL1 = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', '', 'value += abs(_A[inputIdx]);', ''];\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceL1', attributes, reduceOp), {inputs: [0]});\n};\n\nexport const reduceL2 = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = ():\n      string[] => ['var t = f32(0); value = 0.0;', '', 't = _A[inputIdx]; value += (t * t);', 'value = sqrt(value);'];\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceL2', attributes, reduceOp), {inputs: [0]});\n};\n\nexport const reduceLogSumExp = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', '', 'value += exp(_A[inputIdx]);', 'value = log(value);'];\n  context.compute(\n      createReduceProgramInfoLoader(context.inputs, 'ReduceLogSumExp', attributes, reduceOp), {inputs: [0]});\n};\n\nexport const reduceMax = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (inputs: TensorView[], axes: number[]): string[] => {\n    const idxZero = [];\n    for (let k = 0; k < inputs[0].dims.length; k++) {\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\n        idxZero.push(`inputIndices[${k}] = 0;`);  // first element\n      }\n    }\n\n    return [`${idxZero.join('\\n')}`, 'value = _A[inputIdx];', 'value = max(value, _A[inputIdx]);', ''];\n  };\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceMax', attributes, reduceOp), {inputs: [0]});\n};\n\nexport const reduceMean = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (inputs: TensorView[], axes: number[]): string[] => {\n    let size = 1.0;\n    for (let k = 0; k < inputs[0].dims.length; k++) {\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\n        size *= inputs[0].dims[k];\n      }\n    }\n\n    return ['value = 0.0;', '', 'value += _A[inputIdx];', `value = value / ${size}.;`];  // ensure real number with `.`\n  };\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceMean', attributes, reduceOp), {inputs: [0]});\n};\n\nexport const reduceMin = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (inputs: TensorView[], axes: number[]): string[] => {\n    const idxZero = [];\n    for (let k = 0; k < inputs[0].dims.length; k++) {\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\n        idxZero.push(`inputIndices[${k}] = 0;`);  // first element\n      }\n    }\n\n    return [`${idxZero.join('\\n')}`, 'value = _A[inputIdx];', 'value = min(value, _A[inputIdx]);', ''];\n  };\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceMin', attributes, reduceOp), {inputs: [0]});\n};\n\nexport const reduceProd = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (): string[] => ['value = 1.0;', '', 'value *= _A[inputIdx];', ''];\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceProd', attributes, reduceOp), {inputs: [0]});\n};\n\nexport const reduceSum = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', '', 'value += _A[inputIdx];', ''];\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceSum', attributes, reduceOp), {inputs: [0]});\n};\n\nexport const reduceSumSquare = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp =\n      (): string[] => ['var t = f32(0); value = 0.0;', '', 't = _A[inputIdx]; value += t * t;', ''];\n  context.compute(\n      createReduceProgramInfoLoader(context.inputs, 'ReduceSumSquare', attributes, reduceOp), {inputs: [0]});\n};\n\nexport const parseReduceAttributes = (attributes: Record<string, unknown>): ReduceAttributes =>\n    createAttributeWithCacheKey(attributes as Omit<ReduceAttributes, keyof AttributeWithCacheKey>);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor';\nimport {ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata, TensorInfo} from '../types';\n\nimport {createIndicesHelper, ShaderHelper} from './common';\n\nexport interface SliceAttributes extends AttributeWithCacheKey {\n  readonly starts: number[];\n  readonly ends: number[];\n  readonly axes: number[];\n}\n\nconst validateInputs = (inputs: readonly TensorView[], attributes: SliceAttributes): void => {\n  if (!inputs || inputs.length < 1) {\n    throw new Error('too few inputs');\n  }\n  if (attributes.axes.length !== 0) {\n    if (attributes.axes.length !== attributes.starts.length || attributes.axes.length !== attributes.ends.length) {\n      throw new Error('axes, starts and ends must have the same length');\n    }\n  } else if (attributes.starts.length !== attributes.ends.length) {\n    throw new Error('starts and ends must have the same length');\n  }\n  inputs.slice(1).forEach((_, idx) => {\n    if (inputs[idx + 1].dataType !== DataType.int32 && inputs[idx + 1].dataType !== DataType.int64) {\n      throw new Error(`Input ${idx} must be an array of int32 or int64`);\n    }\n  });\n};\n\nconst readInput = (inputs: readonly TensorView[], idx: number): number[] => {\n  const input: number[] = [];\n  if (inputs.length > idx) {\n    if (inputs[idx].dataType === DataType.int64) {\n      inputs[idx].getBigInt64Array().forEach(v => input.push(Number(v)));\n    } else if (inputs[1].dataType === DataType.int32) {\n      inputs[idx].getInt32Array().forEach(v => input.push(Number(v)));\n    } else {\n      throw new Error(`Input ${idx} must be an array of int32 or int64`);\n    }\n  }\n  return input;\n};\n\nconst createSliceAttributesFromInputs =\n    (inputs: readonly TensorView[], attributes: SliceAttributes): SliceAttributes => {\n      if (inputs.length > 1) {\n        const starts: number[] = readInput(inputs, 1);\n        const ends: number[] = readInput(inputs, 2);\n        let axes: number[] = readInput(inputs, 3);\n        if (axes.length === 0) {\n          axes = [...Array(inputs[0].dims.length).keys()];\n        }\n        return createAttributeWithCacheKey({starts, ends, axes});\n      } else {\n        return attributes;\n      }\n    };\n\nconst fixStartEndValues =\n    (value: number, index: number, inputShape: readonly number[], axes: readonly number[], steps: readonly number[]):\n        number => {\n          let newValue = value;\n          if (value < 0) {\n            newValue += inputShape[axes[index]];\n          }\n          if (steps[index] < 0) {\n            return Math.max(0, Math.min(newValue, inputShape[axes[index]] - 1));\n          } else {\n            return Math.max(0, Math.min(newValue, inputShape[axes[index]]));\n          }\n        };\n\nconst calculateInputIndicesImpl = (inputShape: readonly number[], outputShape: readonly number[]): string => {\n  const outputIndicesHelper = createIndicesHelper('output', outputShape);\n  const inputIndicesHelper = createIndicesHelper('input', inputShape);\n\n  return `fn calculateInputIndices(outputIndices: ${outputIndicesHelper.iType}) -> ${inputIndicesHelper.iType} {\n          ${inputIndicesHelper.indicesVariableDeclaration('inputIndices')};\n          var carry = 0u;\n          for (var i = ${inputShape.length}; i >= 0; i--) {\n            var outputIndex = ${outputShape.length === 1 ? 'outputIndices' : 'outputIndices[i]'};\n            var inputIndex = outputIndex * steps[i] + starts[i] + carry;\n            carry = inputIndex / inputShape[i];\n            inputIndex = inputIndex % inputShape[i];\n            if (signs[i] < 0) {\n              inputIndex = inputShape[i] - inputIndex - 1u + starts[i];\n            }\n            ${inputShape.length === 1 ? 'inputIndices' : 'inputIndices[i]'} = inputIndex;\n          }\n          return inputIndices;\n      }`;\n};\n\nconst createSliceProgramInfo =\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], attributes: SliceAttributes): ProgramInfo => {\n      const inputShape = inputs[0].dims;\n      const inputSize = ShapeUtil.size(inputShape);\n      const axes = (attributes.axes.length > 0) ? ShapeUtil.normalizeAxes(attributes.axes, inputShape.length) :\n                                                  [...Array(inputShape.length).keys()];\n      const dataType = 'f32';  // TODO: support other data type\n      let steps = readInput(inputs, 4);\n      steps.forEach((step) => step !== 0 || (() => {\n                                throw new Error('step cannot be 0');\n                              }));\n      if (steps.length === 0) {\n        steps = Array(axes.length).fill(1);\n      }\n      const starts = attributes.starts.map((start, i) => fixStartEndValues(start, i, inputShape, axes, steps));\n\n      const ends = attributes.ends.map((end, i) => fixStartEndValues(end, i, inputShape, axes, steps));\n\n      if (axes.length !== inputShape.length) {\n        for (let i = 0; i < inputShape.length; ++i) {\n          if (!axes.includes(i)) {\n            starts.splice(i, 0, 0);\n            ends.splice(i, 0, inputShape[i]);\n            steps.splice(i, 0, 1);\n          }\n        }\n      }\n      const signs = steps.map(step => Math.sign(step));\n      // Convert negative steps to positive steps and reverse starts and ends\n      steps.forEach((step, i, array) => {\n        if (step < 0) {\n          const numSteps = (ends[i] - starts[i]) / step;\n          const newEnd = starts[i];\n          const newStart = newEnd + numSteps * steps[i];\n          starts[i] = newStart;\n          ends[i] = newEnd;\n          array[i] = -step;\n        }\n      });\n\n      const outputShape = inputShape.slice(0);\n      axes.forEach((axis, _) => {\n        outputShape[axis] = Math.ceil((ends[axis] - starts[axis]) / steps[axis]);\n      });\n\n      const output: TensorInfo = {dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default};\n\n      const outputIndicesHelper = createIndicesHelper('output', outputShape);\n      const inputIndicesHelper = createIndicesHelper('input', inputShape);\n      const outputSize = ShapeUtil.size(outputShape);\n\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n        @group(0) @binding(0) var<storage, read> input: array<${dataType}>;\n        @group(0) @binding(1) var<storage, read_write> output: array<${dataType}>;\n        const signs = array<i32, ${signs.length}>(${signs.map(i => `${i}i`).join(',')});\n        const starts = array<u32, ${starts.length}>(${starts.map(i => `${i}u`).join(',')});\n        const ends = array<u32, ${ends.length}>(${ends.map(i => `${i}u`).join(',')});\n        const steps = array<u32, ${steps.length}>(${steps.map(i => `${i}u`).join(',')});\n        const inputShape = array<u32, ${inputShape.length}>(${inputShape.map(i => `${i}u`).join(',')});\n\n        ${outputIndicesHelper.o2iImpl}\n        ${inputIndicesHelper.i2oImpl}\n        ${calculateInputIndicesImpl(inputShape, outputShape)}\n        ${shaderHelper.mainStart()}\n          ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n          ${outputIndicesHelper.indicesVariableDeclaration('outputIndices')}\n          ${outputIndicesHelper.o2iCall('global_idx', 'outputIndices')}\n          ${inputIndicesHelper.indicesVariableDeclaration('inputIndices')}\n          inputIndices = calculateInputIndices(outputIndices);\n          output[global_idx] = input[${inputIndicesHelper.i2oExpression('inputIndices')}];\n      }`;\n      return {\n        ...metadata,\n        getShaderSource,\n        outputs: [output],\n        dispatchGroup: () => ({x: Math.ceil(inputSize / 64 /* workgroup size */)})\n      };\n    };\n\nconst createSliceProgramInfoLoader =\n    (inputs: readonly TensorView[], attributes: SliceAttributes): ProgramInfoLoader => {\n      const updatedAttributes = createSliceAttributesFromInputs(inputs, attributes);\n      const metadata: ProgramMetadata = {\n        name: 'Slice',\n        inputTypes: [GpuDataType.default],\n        cacheHint: updatedAttributes.cacheKey + (inputs.length > 4 ? 'steps_' + inputs[4].dims.toString() : '')\n      };\n      return {...metadata, get: () => createSliceProgramInfo(metadata, inputs, updatedAttributes)};\n    };\n\nexport const slice = (context: ComputeContext, attributes: SliceAttributes): void => {\n  validateInputs(context.inputs, attributes);\n  context.compute(createSliceProgramInfoLoader(context.inputs, attributes), {inputs: [0]});\n};\n\nexport const parseSliceAttributes = (attributes: Record<string, unknown>): SliceAttributes => {\n  const starts = attributes.starts as number[];\n  const ends = attributes.ends as number[];\n  const axes = attributes.axes as number[];\n  const steps: number[] = [];\n  return createAttributeWithCacheKey({starts, ends, axes, steps});\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor';\nimport {ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata, TensorInfo} from '../types';\n\nimport {createIndicesHelper, IndicesHelper, ShaderHelper} from './common';\n\nexport interface SplitAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n  readonly numOutputs: number;\n  readonly splitSizes: number[];\n}\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length < 1) {\n    throw new Error('too few inputs');\n  }\n};\n\nconst createSplitAttributesFromInputs =\n    (inputs: readonly TensorView[], attributes: SplitAttributes): SplitAttributes => {\n      const splitSizes: number[] = [];\n      if (inputs[1].dims[0] > 0) {\n        inputs[1].getBigInt64Array().forEach(v => splitSizes.push(Number(v)));\n      }\n      return createAttributeWithCacheKey({numOutputs: attributes.numOutputs, axis: attributes.axis, splitSizes});\n    };\n\nconst calculateOutputIndexImpl = (numberOfTensors: number): string => `\nfn calculateOutputIndex(index: u32) -> u32 {\n    for (var i: u32 = 0u; i < ${numberOfTensors}u; i += 1u ) {\n    if (index < sizeInConcatAxis[i]) {\n        return i;\n    }\n    }\n    return ${numberOfTensors}u;\n}`;\nconst writeBufferDataImpl = (indicesHelper: readonly IndicesHelper[]) => {\n  const numberOfTensors = indicesHelper.length;\n  const codeLines: string[] = [];\n  for (let i = 0; i < numberOfTensors; ++i) {\n    const returnSnippet = `output${i}[${indicesHelper[i].i2oExpression('indices', true)}] = input[global_idx];`;\n    if (numberOfTensors === 1) {\n      codeLines.push(returnSnippet);\n    } else if (i === 0) {\n      codeLines.push(`if (outputNumber == ${i}u) { ${returnSnippet} }`);\n    } else if (i === numberOfTensors - 1) {\n      codeLines.push(`else { ${returnSnippet} }`);\n    } else {\n      codeLines.push(`else if (outputNumber == ${i}) { ${returnSnippet} }`);\n    }\n  }\n  return `\n      fn writeBufferData(outputNumber: u32, indices: ptr<function, ${indicesHelper[0].iType}>, global_idx: u32) {\n        ${codeLines.join('\\n')}\n      }`;\n};\n\nconst createSplitProgramInfo =\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], attributes: SplitAttributes, dataType = 'f32'):\n        ProgramInfo => {\n          const inputShape = inputs[0].dims;\n          const inputSize = ShapeUtil.size(inputShape);\n          const rank = inputShape.length;\n          const axis = attributes.axis;\n          const adjustedAxis = (axis < 0) ? inputShape.length + axis : axis;\n          const outputStorageBuffersDeclarations = new Array<string>(attributes.numOutputs);\n          const outputIndicesHelpers = new Array<IndicesHelper>(attributes.numOutputs);\n          const inputIndicesHelper = createIndicesHelper('input', inputShape);\n          const sizeInConcatAxis = new Array<number>(attributes.numOutputs);\n          const outputs: TensorInfo[] = [];\n          const outputShapes: number[][] = [];\n          let previousSum = 0;\n          for (let i = 0; i < attributes.numOutputs; i++) {\n            previousSum += attributes.splitSizes[i];\n            sizeInConcatAxis[i] = previousSum;\n            outputStorageBuffersDeclarations[i] =\n                `@group(0) @binding(${i + 1}) var<storage, read_write> output${i} : array<${dataType}>;`;\n            const outputShape = inputShape.slice();\n            outputShape[attributes.axis] = attributes.splitSizes[i];\n            outputShapes.push(outputShape);\n            outputIndicesHelpers[i] = createIndicesHelper(`output${i}`, outputShapes[i]);\n            outputs.push({dims: outputShapes[i], dataType: inputs[0].dataType, gpuDataType: GpuDataType.default});\n          }\n          const indicesAxis = rank < 2 ? 'indices' : `indices[${adjustedAxis}]`;\n          const getShaderSource = (shaderHelper: ShaderHelper) => `\n  @group(0) @binding(0) var<storage, read> input : array<${dataType}>;\n  ${outputStorageBuffersDeclarations.join('\\n')}\n  ${inputIndicesHelper.o2iImpl}\n  ${outputIndicesHelpers.map(o => o.i2oImpl).join('\\n')}\n  const sizeInConcatAxis = array<u32, ${sizeInConcatAxis.length}>(${sizeInConcatAxis.map(i => `${i}u`).join(',')});\n  ${calculateOutputIndexImpl(sizeInConcatAxis.length)}\n  ${writeBufferDataImpl(outputIndicesHelpers)}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(inputSize)}\n\n    ${inputIndicesHelper.indicesVariableDeclaration('indices')}\n    ${inputIndicesHelper.o2iCall('global_idx', 'indices')}\n    let outputNumber = calculateOutputIndex(${indicesAxis});\n    if (outputNumber != 0) {\n        ${indicesAxis} -= sizeInConcatAxis[outputNumber - 1u];\n    }\n    writeBufferData(outputNumber, &indices, global_idx);\n  }`;\n          return {\n            ...metadata,\n            getShaderSource,\n            outputs,\n            dispatchGroup: () => ({x: Math.ceil(inputSize / 64 /* workgroup size */)})\n          };\n        };\n\nconst createSplitProgramInfoLoader =\n    (inputs: readonly TensorView[], attributes: SplitAttributes): ProgramInfoLoader => {\n      const updatedAttributes = inputs.length === 1 ? attributes : createSplitAttributesFromInputs(inputs, attributes);\n      const metadata:\n          ProgramMetadata = {name: 'Split', inputTypes: [GpuDataType.default], cacheHint: updatedAttributes.cacheKey};\n      return {...metadata, get: () => createSplitProgramInfo(metadata, [inputs[0]], attributes)};\n    };\n\nexport const split = (context: ComputeContext, attributes: SplitAttributes): void => {\n  validateInputs(context.inputs);\n  context.compute(createSplitProgramInfoLoader(context.inputs, attributes), {inputs: [0]});\n};\n\nexport const parseSplitAttributes = (attributes: Record<string, unknown>): SplitAttributes => {\n  const axis = attributes.axis as number;\n  const splitSizes: number[] = attributes.splitSizes as number[];\n  const numOutputs = attributes.numOutputs as number < 0 ? splitSizes.length : attributes.numOutputs as number;\n  if (numOutputs !== splitSizes.length) {\n    throw new Error('numOutputs and splitSizes lengh must be equal');\n  }\n  return createAttributeWithCacheKey({axis, numOutputs, splitSizes});\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor';\nimport {ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo} from '../types';\n\nimport {createIndicesHelper, ShaderHelper} from './common';\n\nexport interface TransposeAttributes extends AttributeWithCacheKey {\n  readonly perm: number[];\n}\n\nexport const transposeProgramMetadata = {\n  name: 'Transpose',\n  inputTypes: [GpuDataType.default]\n};\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Transpose requires 1 input.');\n  }\n\n  if (inputs[0].dataType !== DataType.float) {\n    throw new Error('input should be float tensor');\n  }\n};\n\nconst getAdjustedPerm = (inputShape: readonly number[], perm: number[]): number[] =>\n    (perm && perm.length !== inputShape.length) ? [...(inputShape.keys())].reverse() : perm;\n\nconst getOutputShape = (inputShape: readonly number[], perm: number[]): readonly number[] =>\n    ShapeUtil.sortBasedOnPerm(inputShape, getAdjustedPerm(inputShape, perm));\n\nconst permFunctionBody = (perm: number[], rank: number): string => {\n  const reverseFunc = [];\n  reverseFunc.push(`fn perm(a: ptr<function, array<u32, ${rank}>>, i: ptr<function, array<u32, ${rank}>>) {`);\n  for (let i = 0; i < rank; ++i) {\n    reverseFunc.push(`\\t(*a)[${perm[i]}]=(*i)[${i}];`);\n  }\n  reverseFunc.push('\\t}');\n  return reverseFunc.join('\\n');\n};\n\nexport const createTransposeProgramInfo = (input: TensorView, permAttr: number[]): ProgramInfo => {\n  const dataType = 'f32';  // TODO: support other data type\n  const inputShape = input.dims;\n  const perm = getAdjustedPerm(inputShape, permAttr);\n  const outputShape = getOutputShape(inputShape, perm);\n  const rank = inputShape.length;\n  const outputSize = ShapeUtil.size(outputShape);\n  // A dims=[${inputs[0].dims.toString()}]\n  // out Dims=[${unpackedOutputShape.toString()}]\n  // based on perm=[${perm.toString()}]\n\n  const outputIndicesHelper = createIndicesHelper('output', outputShape);\n  const inputIndicesHelper = createIndicesHelper('a', inputShape);\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => `\n  @group(0) @binding(0) var<storage, read> a : array<${dataType}>;\n  @group(0) @binding(1) var<storage, read_write> output : array<${dataType}>;\n\n  ${permFunctionBody(perm, rank)}\n  ${outputIndicesHelper.o2iImpl}\n  ${inputIndicesHelper.i2oImpl}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n    ${outputIndicesHelper.indicesVariableDeclaration('indices')}\n    ${outputIndicesHelper.o2iCall('global_idx', 'indices')}\n    ${inputIndicesHelper.indicesVariableDeclaration('aIndices')}\n    perm(&aIndices, &indices);\n\n    output[global_idx] = a[${inputIndicesHelper.i2oExpression('aIndices')}];\n  }`;\n  return {\n    ...transposeProgramMetadata,\n    outputs: [{dims: outputShape, dataType: input.dataType, gpuDataType: GpuDataType.default}],\n    getShaderSource,\n    dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n  };\n};\n\nexport const transpose = (context: ComputeContext, attributes: TransposeAttributes): void => {\n  validateInputs(context.inputs);\n  context.compute({\n    ...transposeProgramMetadata,\n    cacheHint: attributes.cacheKey,\n    get: () => createTransposeProgramInfo(context.inputs[0], attributes.perm)\n  });\n};\n\nexport const parseTransposeAttributes = (attributes: Record<string, unknown>): TransposeAttributes =>\n    createAttributeWithCacheKey({perm: attributes.perm as number[]});\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor';\nimport {MAX_CLIP, MIN_CLIP, ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {ShaderHelper} from './common';\n\ntype BuiltinFunctionName = string;\ntype ElementwiseCustomExpression = (expression: string) => string;\ntype ElementwiseFunctionCall = BuiltinFunctionName|ElementwiseCustomExpression;\n\nconst createElementwiseProgramShader =\n    (shaderHelper: ShaderHelper, datasize: number, funcCall: ElementwiseFunctionCall,\n     additionalImplementation?: string): string => {\n      const vecSize = Math.ceil(datasize / 4);\n\n      let expression = '';\n      if (typeof funcCall === 'string') {\n        expression = `${funcCall}(a)`;\n      } else {\n        expression = funcCall('a');\n      }\n      return `\n  @group(0) @binding(0) var<storage, read> inputData : array<vec4<f32>>;\n  @group(0) @binding(1) var<storage, read_write> outputData : array<vec4<f32>>;\n\n  ${additionalImplementation ?? ''}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(vecSize)}\n\n    let a = inputData[global_idx];\n    outputData[global_idx] = ${expression};\n  }`;\n    };\n\nconst createElementwiseProgramInfo =\n    (metadata: ProgramMetadata, input: TensorView, funcCall: ElementwiseFunctionCall,\n     additionalImplementation?: string): ProgramInfo => ({\n      ...metadata,\n      getShaderSource: shaderHelper =>\n          createElementwiseProgramShader(shaderHelper, ShapeUtil.size(input.dims), funcCall, additionalImplementation),\n      outputs: [{dims: input.dims, dataType: input.dataType, gpuDataType: GpuDataType.default}],\n      dispatchGroup: (inputTensors) =>\n          ({x: Math.ceil(ShapeUtil.size(inputTensors[0].dims) / 64 /* workgroup size */ / 4 /* vec size */)})\n    });\n\nconst createElementwiseProgramInfoLoader =\n    (input: TensorView, name: string, funcCall: ElementwiseFunctionCall, additionalImplementation?: string,\n     cacheKey?: string): ProgramInfoLoader => {\n      const metadata: ProgramMetadata = {name, inputTypes: [GpuDataType.default], cacheHint: cacheKey};\n      return {\n        ...metadata,\n        get: () => createElementwiseProgramInfo(metadata, input, funcCall, additionalImplementation)\n      };\n    };\n\nexport const abs = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Abs', 'abs'));\n};\n\nexport const acos = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Acos', 'acos'));\n};\n\nexport const acosh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Acosh', 'acosh'));\n};\n\nexport const asin = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Asin', 'asin'));\n};\n\nexport const asinh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Asinh', 'asinh'));\n};\n\nexport const atan = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Atan', 'atan'));\n};\nexport const atanh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Atanh', 'atanh'));\n};\n\nexport interface ClipAttributes extends AttributeWithCacheKey {\n  readonly min: number;\n  readonly max: number;\n}\n\nexport const clipV10 = (context: ComputeContext, attributes: ClipAttributes): void => {\n  context.compute(\n      createElementwiseProgramInfoLoader(\n          context.inputs[0], 'Clip', a => `clamp(${a}, clip_min_, clip_max_)`, `\n    const clip_min_: vec4<f32> = vec4(f32(${attributes.min}));\n    const clip_max_: vec4<f32> = vec4(f32(${attributes.max}));\n`,\n          attributes.cacheKey),\n      {inputs: [0]});\n};\nconst generateClipAttributesFromInputs = (inputs: readonly TensorView[]): ClipAttributes => {\n  const min = (inputs.length >= 2) ? inputs[1].getFloat32Array()[0] : MIN_CLIP;\n  const max = (inputs.length >= 3) ? inputs[2].getFloat32Array()[0] : MAX_CLIP;\n  return createAttributeWithCacheKey({min, max});\n};\n\nexport const clip = (context: ComputeContext): void => {\n  const attributes = generateClipAttributesFromInputs(context.inputs);\n  clipV10(context, attributes);\n};\n\nexport const ceil = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Ceil', 'ceil'));\n};\n\nexport const cos = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Cos', 'cos'));\n};\n\nexport const cosh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Cosh', 'cosh'));\n};\n\nexport interface AlphaAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const parseAlphaAttributes = (attributes: Record<string, unknown>): AlphaAttributes =>\n    createAttributeWithCacheKey(attributes as {alpha: number});\n\nexport const elu = (context: ComputeContext, attributes: AlphaAttributes): void => {\n  context.compute(createElementwiseProgramInfoLoader(\n      context.inputs[0], 'Elu', a => `elu_vf32(${a})`, `\n  const elu_alpha_: f32 = f32(${attributes.alpha});\n\n  fn elu_f32(a: f32) -> f32 {\n  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);\n  }\n\n  fn elu_vf32(v: vec4<f32>) -> vec4<f32> {\n  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));\n  }`,\n      attributes.cacheKey));\n};\n\nexport const erf = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Erf', a => `erf_vf32(${a})`, `\n  const r0: f32 = 0.3275911;\n  const r1: f32 = 0.254829592;\n  const r2: f32 = -0.284496736;\n  const r3: f32 = 1.421413741;\n  const r4: f32 = -1.453152027;\n  const r5: f32 = 1.061405429;\n\n  fn erf_vf32(v: vec4<f32>) -> vec4<f32> {\n    let absv = abs(v);\n    let x = 1.0 / (1.0 + r0 * absv);\n    return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));\n  }`));\n};\n\nexport const exp = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Exp', 'exp'));\n};\n\nexport const floor = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Floor', 'floor'));\n};\n\nexport const leakyRelu = (context: ComputeContext, attributes: AlphaAttributes): void => {\n  context.compute(createElementwiseProgramInfoLoader(\n      context.inputs[0], 'LeakyRelu', a => `select(leaky_relu_alpha_ * ${a}, ${a}, ${a} >= vec4<f32>(0.0))`,\n      `const leaky_relu_alpha_: f32 = f32(${attributes.alpha});`, attributes.cacheKey));\n};\n\nexport const neg = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Neg', a => `-${a}`));\n};\n\nexport const reciprocal = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Reciprocal', a => `1.0/${a}`));\n};\n\nexport const relu = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(\n      context.inputs[0], 'Relu', a => `select(vec4<f32>(0.0), ${a}, ${a} > vec4<f32>(0.0))`));\n};\n\nexport const sigmoid = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Sigmoid', a => `(1.0 / (1.0 + exp(-${a})))`));\n};\n\nexport const sin = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Sin', 'sin'));\n};\n\nexport const sinh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Sinh', 'sinh'));\n};\n\nexport const sqrt = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Sqrt', 'sqrt'));\n};\n\nexport const tan = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Tan', 'tan'));\n};\n\nexport const tanh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Tanh', 'tanh'));\n};\n\nexport const thresholdedRelu = (context: ComputeContext, attributes: AlphaAttributes): number => {\n  context.compute(createElementwiseProgramInfoLoader(\n      context.inputs[0], 'ThresholdedRelu', a => `select(vec4<f32>(0.0), ${a}, ${a} > thresholded_relu_alpha_)`,\n      `const thresholded_relu_alpha_: vec4<f32> = vec4<f32>(${attributes.alpha});`, attributes.cacheKey));\n  return 0;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {WebGpuBackend} from '../backend-webgpu';\nimport {LOG_DEBUG} from '../log';\n\nimport {createShaderHelper} from './ops/common';\nimport {Artifact, GpuData, ProgramInfo} from './types';\n\n/**\n * ProgramManager is the main class behind running computations\n * It builds ProgramInfo's into Artifacts\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\n * Uses the artifact to run the computation by calling Draw on\n * the WebGL drawing buffer\n * ProgramManager automatically maps (binds) input variables to their\n * corresponding Location's in the binary program\n */\nexport class ProgramManager {\n  repo: Map<unknown, Artifact>;  // this should be per-session object\n  attributesBound: boolean;\n\n  constructor(private backend: WebGpuBackend) {\n    this.repo = new Map();\n    this.attributesBound = false;\n  }\n  getArtifact(key: unknown): Artifact|undefined {\n    return this.repo.get(key);\n  }\n  setArtifact(key: unknown, artifact: Artifact): void {\n    this.repo.set(key, artifact);\n  }\n  run(buildArtifact: Artifact, inputs: GpuData[], outputs: GpuData[], dispatchGroup: [number, number, number]): void {\n    const device = this.backend.device;\n    const computePassEncoder = this.backend.getComputePassEncoder();\n\n    if (this.backend.profilingEnabled) {\n      // profiling write start timestamp\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (computePassEncoder as any).writeTimestamp(this.backend.profilingQuerySet, 0);\n    }\n\n    computePassEncoder.setPipeline(buildArtifact.computePipeline);\n    const entries = [];\n    for (const input of inputs) {\n      entries.push({binding: entries.length, resource: {buffer: input.buffer}});\n    }\n    for (const output of outputs) {\n      entries.push({binding: entries.length, resource: {buffer: output.buffer}});\n    }\n    const bindGroup = device.createBindGroup({layout: buildArtifact.computePipeline.getBindGroupLayout(0), entries});\n    computePassEncoder.setBindGroup(0, bindGroup);\n\n    computePassEncoder.dispatchWorkgroups(...dispatchGroup);\n\n    this.backend.pendingDispatchNumber++;\n\n    if (this.backend.profilingEnabled) {\n      // profiling write end timestamp\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (computePassEncoder as any).writeTimestamp(this.backend.profilingQuerySet, 1);\n      // eslint-disable-next-line no-bitwise\n      const queryData = this.backend.gpuDataManager.create(16, GPUBufferUsage.COPY_SRC | GPUBufferUsage.QUERY_RESOLVE);\n      // eslint-disable-next-line no-bitwise\n      const syncData = this.backend.gpuDataManager.create(16, GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST);\n\n      this.backend.endComputePass();\n      this.backend.getCommandEncoder().resolveQuerySet(this.backend.profilingQuerySet, 0, 2, queryData.buffer, 0);\n      this.backend.getCommandEncoder().copyBufferToBuffer(queryData.buffer, 0, syncData.buffer, 0, 16);\n      this.backend.flush();\n\n      const kernelId = this.backend.currentKernelId!;\n      const kernelName = this.backend.kernels.get(kernelId)![0];\n\n      syncData.buffer.mapAsync(GPUMapMode.READ).then(() => {\n        const mappedData = new BigUint64Array(syncData.buffer.getMappedRange());\n        const startTimeU64 = mappedData[0];\n        const endTimeU64 = mappedData[1];\n\n        syncData.buffer.unmap();\n\n        if (typeof this.backend.profilingTimeBase === 'undefined') {\n          this.backend.profilingTimeBase = startTimeU64;\n        }\n\n        const startTime = Number(startTimeU64 - this.backend.profilingTimeBase);\n        const endTime = Number(endTimeU64 - this.backend.profilingTimeBase);\n\n        if (!Number.isSafeInteger(startTime) || !Number.isSafeInteger(endTime)) {\n          throw new RangeError('incorrect timestamp range');\n        }\n\n        this.backend.gpuDataManager.release(queryData.id);\n        this.backend.gpuDataManager.release(syncData.id);\n\n        // eslint-disable-next-line no-console\n        console.log(`[profiling] kernel \"${kernelId}|${kernelName}\" execution time: ${endTime - startTime} ns`);\n      });\n    }\n\n    if (this.backend.pendingDispatchNumber >= 16) {\n      this.backend.flush();\n    }\n  }\n  dispose(): void {\n    // this.repo.forEach(a => this.glContext.deleteProgram(a.program));\n  }\n  build(programInfo: ProgramInfo, normalizedDispatchGroupSize: [number, number, number]): Artifact {\n    const device = this.backend.device;\n\n    const code = programInfo.getShaderSource(createShaderHelper(normalizedDispatchGroupSize));\n    const shaderModule = device.createShaderModule({code});\n    LOG_DEBUG('verbose', () => `[WebGPU] shader code: ${code}`);\n\n    const computePipeline =\n        device.createComputePipeline({compute: {module: shaderModule, entryPoint: 'main'}, layout: 'auto'});\n\n    return {programInfo, computePipeline};\n  }\n\n  normalizeDispatchGroupSize(dispatchGroup: ReturnType<ProgramInfo['dispatchGroup']>): [number, number, number] {\n    const x = typeof dispatchGroup === 'number' ? dispatchGroup : dispatchGroup.x;\n    const y = typeof dispatchGroup === 'number' ? 1 : (dispatchGroup.y || 1);\n    const z = typeof dispatchGroup === 'number' ? 1 : (dispatchGroup.z || 1);\n    const limitPerDimension = this.backend.device.limits.maxComputeWorkgroupsPerDimension;\n    if (x <= limitPerDimension && y <= limitPerDimension && z <= limitPerDimension) {\n      return [x, y, z];\n    }\n    const size = x * y * z;\n    let dispatchAverage = Math.ceil(Math.sqrt(size));\n    if (dispatchAverage > limitPerDimension) {\n      dispatchAverage = Math.ceil(Math.cbrt(size));\n      if (dispatchAverage > limitPerDimension) {\n        throw new Error('Total dispatch size exceeds WebGPU maximum.');\n      }\n      return [dispatchAverage, dispatchAverage, dispatchAverage];\n    } else {\n      return [dispatchAverage, dispatchAverage, 1];\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor, TensorView} from '../tensor';\n\nimport {ShaderHelper} from './ops/common';\n\nexport enum GpuDataType {\n  default = 0,\n  upload = 1,\n  profile = 2\n}\nexport type GpuDataId = number;\n\nexport interface GpuData {\n  type: GpuDataType;\n  id: GpuDataId;\n  buffer: GPUBuffer;\n}\n\nexport interface TensorInfo {\n  id?: Tensor.Id;\n  dims: readonly number[];\n  dataType: number;\n  gpuDataType: GpuDataType;\n}\n\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n\nexport interface ProgramMetadata {\n  /**\n   * the name of the program. used for debugging and profiling\n   */\n  name: string;\n\n  /**\n   * gpu data types for each input\n   */\n  inputTypes: GpuDataType[];\n  /**\n   * an optional string as a cache hint in the artifact cache\n   */\n  cacheHint?: string;\n}\n\n/**\n * A ProgramInfoLoader allows\n */\nexport interface ProgramInfoLoader extends ProgramMetadata {\n  /**\n   * a function to get the program info\n   */\n  get(): ProgramInfo;\n}\n\n/**\n * A set of data that represent a shader program\n */\nexport interface ProgramInfo extends ProgramMetadata {\n  /**\n   * information of uniform variables\n   */\n  variables?: ProgramVariable[];\n  /**\n   * tensor info for outputs\n   */\n  outputs: TensorInfo[];\n  /**\n   * the shader's processing source code\n   */\n  getShaderSource: (shaderHelper: ShaderHelper) => string;\n  /**\n   * default is \"main\"\n   */\n  // entryPoint: string;\n\n  dispatchGroup: (inputs: readonly TensorView[]) => {\n    x: number;\n    y?: number;\n    z?: number;\n  };\n}\n\nexport interface Artifact {\n  programInfo: ProgramInfo;\n  computePipeline: GPUComputePipeline;\n}\n\nexport interface ComputeContextInputsOutputsMapping {\n  /**\n   * specify the mapping to the program's inputs. the value can be a number or a tensor view.\n   * - if it's a number, it's the index of the kernel's input\n   * - if it's a tensor view, it's an existing tensor view that will be used as the input\n   *\n   * if inputs is not specified, the mapping will be the kernel's inputs in order.\n   */\n  readonly inputs?: ReadonlyArray<TensorView|number>;\n  /**\n   * specify the mapping to the program's outputs. the value must be a number.\n   * - if it's a non-negative number, it's the index of the kernel's output\n   * - if it's -1, it's an output that will be created as a temporary value. this value will be released after\n   * the kernel is executed.\n   * - if it's -2, it's an output that will be created as a persistent value. this value will be released when the\n   * kernel is released.\n   *\n   * if outputs is not specified, the mapping will be the kernel's outputs in order.\n   */\n  readonly outputs?: readonly number[];\n}\n\n/**\n * A ComputeContext instance carries the states that representing the current running of a kernel.\n */\nexport interface ComputeContext {\n  /**\n   * stores the pointer to OpKernelContext\n   */\n  readonly opKernelContext: number;\n\n  /**\n   * a list of inputs, each input is an instance of TensorView\n   */\n  readonly inputs: readonly TensorView[];\n\n  /**\n   * a custom data object that can be used to store any data that is needed by the kernel\n   */\n  readonly kernelCustomData: {[key: string]: unknown};\n\n  /**\n   * a buffer that can be used to access custom data created each time the kernel is executed\n   */\n  readonly customDataBuffer: Uint8Array;\n\n  compute(program: ProgramInfoLoader|ProgramInfo, inputsOutputsMapping?: ComputeContextInputsOutputsMapping):\n      TensorView[];\n  output(index: number, dims: readonly number[]): number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env, env, InferenceSession} from 'onnxruntime-common';\n\nimport {OrtWasmMessage, SerializableModeldata, SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\nimport * as core from './wasm-core-impl';\nimport {initializeWebAssembly} from './wasm-factory';\n\nconst isProxy = (): boolean => !!env.wasm.proxy && typeof document !== 'undefined';\nlet proxyWorker: Worker|undefined;\nlet initializing = false;\nlet initialized = false;\nlet aborted = false;\n\n// resolve; reject\ntype PromiseCallbacks<T = void> = [(result: T) => void, (reason: unknown) => void];\n\nlet initWasmCallbacks: PromiseCallbacks;\nlet initOrtCallbacks: PromiseCallbacks;\nconst createSessionAllocateCallbacks: Array<PromiseCallbacks<SerializableModeldata>> = [];\nconst createSessionFinalizeCallbacks: Array<PromiseCallbacks<SerializableSessionMetadata>> = [];\nconst createSessionCallbacks: Array<PromiseCallbacks<SerializableSessionMetadata>> = [];\nconst releaseSessionCallbacks: Array<PromiseCallbacks<void>> = [];\nconst runCallbacks: Array<PromiseCallbacks<SerializableTensor[]>> = [];\nconst endProfilingCallbacks: Array<PromiseCallbacks<void>> = [];\n\nconst ensureWorker = (): void => {\n  if (initializing || !initialized || aborted || !proxyWorker) {\n    throw new Error('worker not ready');\n  }\n};\n\nconst onProxyWorkerMessage = (ev: MessageEvent<OrtWasmMessage>): void => {\n  switch (ev.data.type) {\n    case 'init-wasm':\n      initializing = false;\n      if (ev.data.err) {\n        aborted = true;\n        initWasmCallbacks[1](ev.data.err);\n      } else {\n        initialized = true;\n        initWasmCallbacks[0]();\n      }\n      break;\n    case 'init-ort':\n      if (ev.data.err) {\n        initOrtCallbacks[1](ev.data.err);\n      } else {\n        initOrtCallbacks[0]();\n      }\n      break;\n    case 'create_allocate':\n      if (ev.data.err) {\n        createSessionAllocateCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionAllocateCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'create_finalize':\n      if (ev.data.err) {\n        createSessionFinalizeCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionFinalizeCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'create':\n      if (ev.data.err) {\n        createSessionCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'release':\n      if (ev.data.err) {\n        releaseSessionCallbacks.shift()![1](ev.data.err);\n      } else {\n        releaseSessionCallbacks.shift()![0]();\n      }\n      break;\n    case 'run':\n      if (ev.data.err) {\n        runCallbacks.shift()![1](ev.data.err);\n      } else {\n        runCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'end-profiling':\n      if (ev.data.err) {\n        endProfilingCallbacks.shift()![1](ev.data.err);\n      } else {\n        endProfilingCallbacks.shift()![0]();\n      }\n      break;\n    default:\n  }\n};\n\nconst scriptSrc = typeof document !== 'undefined' ? (document?.currentScript as HTMLScriptElement)?.src : undefined;\n\nexport const initializeWebAssemblyInstance = async(): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    if (initialized) {\n      return;\n    }\n    if (initializing) {\n      throw new Error('multiple calls to \\'initWasm()\\' detected.');\n    }\n    if (aborted) {\n      throw new Error('previous call to \\'initWasm()\\' failed.');\n    }\n\n    initializing = true;\n\n    // overwrite wasm filepaths\n    if (env.wasm.wasmPaths === undefined) {\n      if (scriptSrc && scriptSrc.indexOf('blob:') !== 0) {\n        env.wasm.wasmPaths = scriptSrc.substr(0, +(scriptSrc).lastIndexOf('/') + 1);\n      }\n    }\n\n    return new Promise<void>((resolve, reject) => {\n      proxyWorker?.terminate();\n      // eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports\n      proxyWorker = require('worker-loader?inline=no-fallback!./proxy-worker/main').default() as Worker;\n      proxyWorker.onmessage = onProxyWorkerMessage;\n      initWasmCallbacks = [resolve, reject];\n      const message: OrtWasmMessage = {type: 'init-wasm', in : env.wasm};\n      proxyWorker.postMessage(message);\n    });\n\n  } else {\n    return initializeWebAssembly(env.wasm);\n  }\n};\n\nexport const initializeRuntime = async(env: Env): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      initOrtCallbacks = [resolve, reject];\n      const message: OrtWasmMessage = {type: 'init-ort', in : env};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    await core.initRuntime(env);\n  }\n};\n\nexport const createSessionAllocate = async(model: Uint8Array): Promise<SerializableModeldata> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableModeldata>((resolve, reject) => {\n      createSessionAllocateCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'create_allocate', in : {model}};\n      proxyWorker!.postMessage(message, [model.buffer]);\n    });\n  } else {\n    return core.createSessionAllocate(model);\n  }\n};\n\nexport const createSessionFinalize = async(modeldata: SerializableModeldata, options?: InferenceSession.SessionOptions):\n    Promise<SerializableSessionMetadata> => {\n      if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n        ensureWorker();\n        return new Promise<SerializableSessionMetadata>((resolve, reject) => {\n          createSessionFinalizeCallbacks.push([resolve, reject]);\n          const message: OrtWasmMessage = {type: 'create_finalize', in : {modeldata, options}};\n          proxyWorker!.postMessage(message);\n        });\n      } else {\n        return core.createSessionFinalize(modeldata, options);\n      }\n    };\n\nexport const createSession =\n    async(model: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SerializableSessionMetadata> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableSessionMetadata>((resolve, reject) => {\n      createSessionCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'create', in : {model, options}};\n      proxyWorker!.postMessage(message, [model.buffer]);\n    });\n  } else {\n    return core.createSession(model, options);\n  }\n};\n\nexport const releaseSession = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      releaseSessionCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'release', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.releaseSession(sessionId);\n  }\n};\n\nexport const run = async(\n    sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\n    options: InferenceSession.RunOptions): Promise<SerializableTensor[]> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableTensor[]>((resolve, reject) => {\n      runCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'run', in : {sessionId, inputIndices, inputs, outputIndices, options}};\n      proxyWorker!.postMessage(message, core.extractTransferableBuffers(inputs));\n    });\n  } else {\n    return core.run(sessionId, inputIndices, inputs, outputIndices, options);\n  }\n};\n\nexport const endProfiling = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      endProfilingCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'end-profiling', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.endProfiling(sessionId);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {getInstance} from './wasm-factory';\nimport {allocWasmString, checkLastError, iterateExtraOptions} from './wasm-utils';\n\nexport const setRunOptions = (options: InferenceSession.RunOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let runOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const runOptions: InferenceSession.RunOptions = options || {};\n\n  try {\n    if (options?.logSeverityLevel === undefined) {\n      runOptions.logSeverityLevel = 2;  // Default to warning\n    } else if (\n        typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\n        options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n    }\n\n    if (options?.logVerbosityLevel === undefined) {\n      runOptions.logVerbosityLevel = 0;  // Default to 0\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n    }\n\n    if (options?.terminate === undefined) {\n      runOptions.terminate = false;\n    }\n\n    let tagDataOffset = 0;\n    if (options?.tag !== undefined) {\n      tagDataOffset = allocWasmString(options.tag, allocs);\n    }\n\n    runOptionsHandle = wasm._OrtCreateRunOptions(\n        runOptions.logSeverityLevel!, runOptions.logVerbosityLevel!, !!runOptions.terminate!, tagDataOffset);\n    if (runOptionsHandle === 0) {\n      checkLastError('Can\\'t create run options.');\n    }\n\n    if (options?.extra !== undefined) {\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          checkLastError(`Can't set a run config entry: ${key} - ${value}.`);\n        }\n      });\n    }\n\n    return [runOptionsHandle, allocs];\n  } catch (e) {\n    if (runOptionsHandle !== 0) {\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\n    }\n    allocs.forEach(alloc => wasm._free(alloc));\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {env, InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\nimport {promisify} from 'util';\n\nimport {SerializableModeldata} from './proxy-messages';\nimport {createSession, createSessionAllocate, createSessionFinalize, endProfiling, initializeRuntime, releaseSession, run} from './proxy-wrapper';\n\nlet runtimeInitialized: boolean;\n\nexport class OnnxruntimeWebAssemblySessionHandler implements SessionHandler {\n  private sessionId: number;\n\n  inputNames: string[];\n  outputNames: string[];\n\n  async createSessionAllocate(path: string): Promise<SerializableModeldata> {\n    // fetch model from url and move to wasm heap. The arraybufffer that held the http\n    // response is freed once we return\n    const response = await fetch(path);\n    const arrayBuffer = await response.arrayBuffer();\n    return createSessionAllocate(new Uint8Array(arrayBuffer));\n  }\n\n  async loadModel(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions): Promise<void> {\n    if (!runtimeInitialized) {\n      await initializeRuntime(env);\n      runtimeInitialized = true;\n    }\n\n    if (typeof pathOrBuffer === 'string') {\n      if (typeof process !== 'undefined' && process.versions && process.versions.node) {\n        // node\n        const model = await promisify(readFile)(pathOrBuffer);\n        [this.sessionId, this.inputNames, this.outputNames] = await createSession(model, options);\n      } else {\n        // browser\n        // fetch model and move to wasm heap.\n        const modelData: SerializableModeldata = await this.createSessionAllocate(pathOrBuffer);\n        // create the session\n        [this.sessionId, this.inputNames, this.outputNames] = await createSessionFinalize(modelData, options);\n      }\n    } else {\n      [this.sessionId, this.inputNames, this.outputNames] = await createSession(pathOrBuffer, options);\n    }\n  }\n\n  async dispose(): Promise<void> {\n    return releaseSession(this.sessionId);\n  }\n\n  async run(feeds: SessionHandler.FeedsType, fetches: SessionHandler.FetchesType, options: InferenceSession.RunOptions):\n      Promise<SessionHandler.ReturnType> {\n    const inputArray: Tensor[] = [];\n    const inputIndices: number[] = [];\n    Object.entries(feeds).forEach(kvp => {\n      const name = kvp[0];\n      const tensor = kvp[1];\n      const index = this.inputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid input '${name}'`);\n      }\n      inputArray.push(tensor);\n      inputIndices.push(index);\n    });\n\n    const outputIndices: number[] = [];\n    Object.entries(fetches).forEach(kvp => {\n      const name = kvp[0];\n      // TODO: support pre-allocated output\n      const index = this.outputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid output '${name}'`);\n      }\n      outputIndices.push(index);\n    });\n\n    const outputs =\n        await run(this.sessionId, inputIndices, inputArray.map(t => [t.type, t.dims, t.data]), outputIndices, options);\n\n    const result: SessionHandler.ReturnType = {};\n    for (let i = 0; i < outputs.length; i++) {\n      result[this.outputNames[outputIndices[i]]] = new Tensor(outputs[i][0], outputs[i][2], outputs[i][1]);\n    }\n    return result;\n  }\n\n  startProfiling(): void {\n    // TODO: implement profiling\n  }\n\n  endProfiling(): void {\n    void endProfiling(this.sessionId);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {getInstance} from './wasm-factory';\nimport {allocWasmString, checkLastError, iterateExtraOptions} from './wasm-utils';\n\nconst getGraphOptimzationLevel = (graphOptimizationLevel: string|unknown): number => {\n  switch (graphOptimizationLevel) {\n    case 'disabled':\n      return 0;\n    case 'basic':\n      return 1;\n    case 'extended':\n      return 2;\n    case 'all':\n      return 99;\n    default:\n      throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);\n  }\n};\n\nconst getExecutionMode = (executionMode: 'sequential'|'parallel'): number => {\n  switch (executionMode) {\n    case 'sequential':\n      return 0;\n    case 'parallel':\n      return 1;\n    default:\n      throw new Error(`unsupported execution mode: ${executionMode}`);\n  }\n};\n\nconst appendDefaultOptions = (options: InferenceSession.SessionOptions): void => {\n  if (!options.extra) {\n    options.extra = {};\n  }\n  if (!options.extra.session) {\n    options.extra.session = {};\n  }\n  const session = options.extra.session as Record<string, string>;\n  if (!session.use_ort_model_bytes_directly) {\n    // eslint-disable-next-line camelcase\n    session.use_ort_model_bytes_directly = '1';\n  }\n\n  // if using JSEP with WebGPU, always disable memory pattern\n  if (options.executionProviders &&\n      options.executionProviders.some(ep => (typeof ep === 'string' ? ep : ep.name) === 'webgpu')) {\n    options.enableMemPattern = false;\n  }\n};\n\nconst setExecutionProviders =\n    (sessionOptionsHandle: number, executionProviders: readonly InferenceSession.ExecutionProviderConfig[],\n     allocs: number[]): void => {\n      for (const ep of executionProviders) {\n        let epName = typeof ep === 'string' ? ep : ep.name;\n\n        // check EP name\n        switch (epName) {\n          case 'xnnpack':\n            epName = 'XNNPACK';\n            break;\n          case 'webnn':\n            epName = 'WEBNN';\n            if (typeof ep !== 'string') {\n              const webnnOptions = ep as InferenceSession.WebNNExecutionProviderOption;\n              if (webnnOptions?.deviceType) {\n                const keyDataOffset = allocWasmString('deviceType', allocs);\n                const valueDataOffset = allocWasmString(webnnOptions.deviceType, allocs);\n                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !==\n                    0) {\n                  checkLastError(`Can't set a session config entry: 'deviceType' - ${webnnOptions.deviceType}.`);\n                }\n              }\n              if (webnnOptions?.powerPreference) {\n                const keyDataOffset = allocWasmString('powerPreference', allocs);\n                const valueDataOffset = allocWasmString(webnnOptions.powerPreference, allocs);\n                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !==\n                    0) {\n                  checkLastError(\n                      `Can't set a session config entry: 'powerPreference' - ${webnnOptions.powerPreference}.`);\n                }\n              }\n            }\n            break;\n          case 'webgpu':\n            epName = 'JS';\n            break;\n          case 'wasm':\n          case 'cpu':\n            continue;\n          default:\n            throw new Error(`not supported execution provider: ${epName}`);\n        }\n\n        const epNameDataOffset = allocWasmString(epName, allocs);\n        if (getInstance()._OrtAppendExecutionProvider(sessionOptionsHandle, epNameDataOffset) !== 0) {\n          checkLastError(`Can't append execution provider: ${epName}.`);\n        }\n      }\n    };\n\nexport const setSessionOptions = (options?: InferenceSession.SessionOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let sessionOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const sessionOptions: InferenceSession.SessionOptions = options || {};\n  appendDefaultOptions(sessionOptions);\n\n  try {\n    const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel ?? 'all');\n    const executionMode = getExecutionMode(sessionOptions.executionMode ?? 'sequential');\n    const logIdDataOffset =\n        typeof sessionOptions.logId === 'string' ? allocWasmString(sessionOptions.logId, allocs) : 0;\n\n    const logSeverityLevel = sessionOptions.logSeverityLevel ?? 2;  // Default to 2 - warning\n    if (!Number.isInteger(logSeverityLevel) || logSeverityLevel < 0 || logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${logSeverityLevel}`);\n    }\n\n    const logVerbosityLevel = sessionOptions.logVerbosityLevel ?? 0;  // Default to 0 - verbose\n    if (!Number.isInteger(logVerbosityLevel) || logVerbosityLevel < 0 || logVerbosityLevel > 4) {\n      throw new Error(`log verbosity level is not valid: ${logVerbosityLevel}`);\n    }\n\n    const optimizedModelFilePathOffset = typeof sessionOptions.optimizedModelFilePath === 'string' ?\n        allocWasmString(sessionOptions.optimizedModelFilePath, allocs) :\n        0;\n\n    sessionOptionsHandle = wasm._OrtCreateSessionOptions(\n        graphOptimizationLevel, !!sessionOptions.enableCpuMemArena, !!sessionOptions.enableMemPattern, executionMode,\n        !!sessionOptions.enableProfiling, 0, logIdDataOffset, logSeverityLevel, logVerbosityLevel,\n        optimizedModelFilePathOffset);\n    if (sessionOptionsHandle === 0) {\n      checkLastError('Can\\'t create session options.');\n    }\n\n    if (sessionOptions.executionProviders) {\n      setExecutionProviders(sessionOptionsHandle, sessionOptions.executionProviders, allocs);\n    }\n\n    if (sessionOptions.extra !== undefined) {\n      iterateExtraOptions(sessionOptions.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          checkLastError(`Can't set a session config entry: ${key} - ${value}.`);\n        }\n      });\n    }\n\n    return [sessionOptionsHandle, allocs];\n  } catch (e) {\n    if (sessionOptionsHandle !== 0) {\n      wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n    }\n    allocs.forEach(alloc => wasm._free(alloc));\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from 'onnxruntime-common';\n\n// This file includes common definitions. They do NOT have dependency on the WebAssembly instance.\n\n/**\n * Copied from ONNX definition. Use this to drop dependency 'onnx_proto' to decrease compiled .js file size.\n */\nexport const enum DataType {\n  undefined = 0,\n  float = 1,\n  uint8 = 2,\n  int8 = 3,\n  uint16 = 4,\n  int16 = 5,\n  int32 = 6,\n  int64 = 7,\n  string = 8,\n  bool = 9,\n  float16 = 10,\n  double = 11,\n  uint32 = 12,\n  uint64 = 13,\n  complex64 = 14,\n  complex128 = 15,\n  bfloat16 = 16\n}\n\n/**\n * Map string tensor data to enum value\n */\nexport const tensorDataTypeStringToEnum = (type: string): DataType => {\n  switch (type) {\n    case 'int8':\n      return DataType.int8;\n    case 'uint8':\n      return DataType.uint8;\n    case 'bool':\n      return DataType.bool;\n    case 'int16':\n      return DataType.int16;\n    case 'uint16':\n      return DataType.uint16;\n    case 'int32':\n      return DataType.int32;\n    case 'uint32':\n      return DataType.uint32;\n    case 'float16':\n      return DataType.float16;\n    case 'float32':\n      return DataType.float;\n    case 'float64':\n      return DataType.double;\n    case 'string':\n      return DataType.string;\n    case 'int64':\n      return DataType.int64;\n    case 'uint64':\n      return DataType.uint64;\n\n    default:\n      throw new Error(`unsupported data type: ${type}`);\n  }\n};\n\n/**\n * Map enum value to string tensor data\n */\nexport const tensorDataTypeEnumToString = (typeProto: DataType): Tensor.Type => {\n  switch (typeProto) {\n    case DataType.int8:\n      return 'int8';\n    case DataType.uint8:\n      return 'uint8';\n    case DataType.bool:\n      return 'bool';\n    case DataType.int16:\n      return 'int16';\n    case DataType.uint16:\n      return 'uint16';\n    case DataType.int32:\n      return 'int32';\n    case DataType.uint32:\n      return 'uint32';\n    case DataType.float16:\n      return 'float16';\n    case DataType.float:\n      return 'float32';\n    case DataType.double:\n      return 'float64';\n    case DataType.string:\n      return 'string';\n    case DataType.int64:\n      return 'int64';\n    case DataType.uint64:\n      return 'uint64';\n\n    default:\n      throw new Error(`unsupported data type: ${typeProto}`);\n  }\n};\n\n/**\n * get tensor element size in bytes by the given data type\n * @returns size in integer or undefined if the data type is not supported\n */\nexport const getTensorElementSize = (dateType: number): number|\n    undefined => [undefined, 4, 1, 1, 2, 2, 4, 8, undefined, 1, 2, 8, 4, 8, undefined, undefined, undefined][dateType];\n\n/**\n * get typed array constructor by the given tensor type\n */\nexport const tensorTypeToTypedArrayConstructor = (type: Tensor.Type): Float32ArrayConstructor|Uint8ArrayConstructor|\n    Int8ArrayConstructor|Uint16ArrayConstructor|Int16ArrayConstructor|Int32ArrayConstructor|BigInt64ArrayConstructor|\n    Uint8ArrayConstructor|Float64ArrayConstructor|Uint32ArrayConstructor|BigUint64ArrayConstructor => {\n      switch (type) {\n        case 'float16':\n          return Uint16Array;\n        case 'float32':\n          return Float32Array;\n        case 'uint8':\n          return Uint8Array;\n        case 'int8':\n          return Int8Array;\n        case 'uint16':\n          return Uint16Array;\n        case 'int16':\n          return Int16Array;\n        case 'int32':\n          return Int32Array;\n        case 'bool':\n          return Uint8Array;\n        case 'float64':\n          return Float64Array;\n        case 'uint32':\n          return Uint32Array;\n        case 'int64':\n          return BigInt64Array;\n        case 'uint64':\n          return BigUint64Array;\n        default:\n          throw new Error(`unsupported type: ${type}`);\n      }\n    };\n\n/**\n * Map string log level to integer value\n */\nexport const logLevelStringToEnum = (logLevel?: 'verbose'|'info'|'warning'|'error'|'fatal'): number => {\n  switch (logLevel) {\n    case 'verbose':\n      return 0;\n    case 'info':\n      return 1;\n    case 'warning':\n      return 2;\n    case 'error':\n      return 3;\n    case 'fatal':\n      return 4;\n    default:\n      throw new Error(`unsupported logging level: ${logLevel}`);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env, InferenceSession, Tensor} from 'onnxruntime-common';\n\nimport {SerializableModeldata, SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\nimport {setRunOptions} from './run-options';\nimport {setSessionOptions} from './session-options';\nimport {logLevelStringToEnum, tensorDataTypeEnumToString, tensorDataTypeStringToEnum, tensorTypeToTypedArrayConstructor} from './wasm-common';\nimport {getInstance} from './wasm-factory';\nimport {allocWasmString, checkLastError} from './wasm-utils';\n\n/**\n * get the input/output count of the session.\n * @param sessionHandle the handle representing the session. should be non-zero.\n * @returns a tuple including 2 numbers, representing the input count and output count.\n */\nconst getSessionInputOutputCount = (sessionHandle: number): [number, number] => {\n  const wasm = getInstance();\n  const stack = wasm.stackSave();\n  try {\n    const dataOffset = wasm.stackAlloc(8);\n    const errorCode = wasm._OrtGetInputOutputCount(sessionHandle, dataOffset, dataOffset + 4);\n    if (errorCode !== 0) {\n      checkLastError('Can\\'t get session input/output count.');\n    }\n    return [wasm.HEAP32[dataOffset / 4], wasm.HEAP32[dataOffset / 4 + 1]];\n  } finally {\n    wasm.stackRestore(stack);\n  }\n};\n\n/**\n * initialize ORT environment.\n * @param numThreads SetGlobalIntraOpNumThreads(numThreads)\n * @param loggingLevel CreateEnv(static_cast<OrtLoggingLevel>(logging_level))\n */\nconst initOrt = (numThreads: number, loggingLevel: number): void => {\n  const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);\n  if (errorCode !== 0) {\n    checkLastError('Can\\'t initialize onnxruntime.');\n  }\n};\n\n/**\n * intialize runtime environment.\n * @param env passed in the environment config object.\n */\nexport const initRuntime = async(env: Env): Promise<void> => {\n  // init ORT\n  initOrt(env.wasm.numThreads!, logLevelStringToEnum(env.logLevel));\n\n  if (!BUILD_DEFS.DISABLE_WEBGPU) {\n    // init JSEP if available\n\n    // eslint-disable-next-line @typescript-eslint/no-require-imports, @typescript-eslint/no-var-requires\n    const initJsep = require('./jsep/init').init;\n    await initJsep(getInstance(), env);\n  }\n};\n\n/**\n *  tuple elements are: InferenceSession ID; inputNamesUTF8Encoded; outputNamesUTF8Encoded\n */\ntype SessionMetadata = [number, number[], number[]];\n\nconst activeSessions = new Map<number, SessionMetadata>();\n\n/**\n * allocate the memory and memcpy the model bytes, preparing for creating an instance of InferenceSession.\n * @returns a 2-elements tuple - the pointer and size of the allocated buffer\n */\nexport const createSessionAllocate = (model: Uint8Array): [number, number] => {\n  const wasm = getInstance();\n  const modelDataOffset = wasm._malloc(model.byteLength);\n  if (modelDataOffset === 0) {\n    throw new Error(`Can't create a session. failed to allocate a buffer of size ${model.byteLength}.`);\n  }\n  wasm.HEAPU8.set(model, modelDataOffset);\n  return [modelDataOffset, model.byteLength];\n};\n\n/**\n * create an inference session using the prepared buffer containing the model data.\n * @param modelData a 2-elements tuple containing the pointer and size of the model data buffer.\n * @param options an optional session options object.\n * @returns a 3-elements tuple containing [session handle, input names, output names]\n */\nexport const createSessionFinalize =\n    (modelData: SerializableModeldata, options?: InferenceSession.SessionOptions): SerializableSessionMetadata => {\n      const wasm = getInstance();\n\n      let sessionHandle = 0;\n      let sessionOptionsHandle = 0;\n      let allocs: number[] = [];\n      const inputNamesUTF8Encoded = [];\n      const outputNamesUTF8Encoded = [];\n\n      try {\n        [sessionOptionsHandle, allocs] = setSessionOptions(options);\n\n        sessionHandle = wasm._OrtCreateSession(modelData[0], modelData[1], sessionOptionsHandle);\n        if (sessionHandle === 0) {\n          checkLastError('Can\\'t create a session.');\n        }\n\n        const [inputCount, outputCount] = getSessionInputOutputCount(sessionHandle);\n\n        const inputNames = [];\n        const outputNames = [];\n        for (let i = 0; i < inputCount; i++) {\n          const name = wasm._OrtGetInputName(sessionHandle, i);\n          if (name === 0) {\n            checkLastError('Can\\'t get an input name.');\n          }\n          inputNamesUTF8Encoded.push(name);\n          inputNames.push(wasm.UTF8ToString(name));\n        }\n        for (let i = 0; i < outputCount; i++) {\n          const name = wasm._OrtGetOutputName(sessionHandle, i);\n          if (name === 0) {\n            checkLastError('Can\\'t get an output name.');\n          }\n          outputNamesUTF8Encoded.push(name);\n          outputNames.push(wasm.UTF8ToString(name));\n        }\n\n        activeSessions.set(sessionHandle, [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded]);\n        return [sessionHandle, inputNames, outputNames];\n      } catch (e) {\n        inputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\n        outputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\n\n        if (sessionHandle !== 0) {\n          wasm._OrtReleaseSession(sessionHandle);\n        }\n        throw e;\n      } finally {\n        wasm._free(modelData[0]);\n        if (sessionOptionsHandle !== 0) {\n          wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n        }\n        allocs.forEach(alloc => wasm._free(alloc));\n      }\n    };\n\n\n/**\n * create an instance of InferenceSession.\n * @returns the metadata of InferenceSession. 0-value handle for failure.\n */\nexport const createSession =\n    (model: Uint8Array, options?: InferenceSession.SessionOptions): SerializableSessionMetadata => {\n      const modelData: SerializableModeldata = createSessionAllocate(model);\n      return createSessionFinalize(modelData, options);\n    };\n\nexport const releaseSession = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error(`cannot release session. invalid session id: ${sessionId}`);\n  }\n  const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded] = session;\n\n  inputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\n  outputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\n  wasm._OrtReleaseSession(sessionHandle);\n  activeSessions.delete(sessionId);\n};\n\n/**\n * perform inference run\n */\nexport const run = async(\n    sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\n    options: InferenceSession.RunOptions): Promise<SerializableTensor[]> => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error(`cannot run inference. invalid session id: ${sessionId}`);\n  }\n  const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded] = session;\n\n  const inputCount = inputIndices.length;\n  const outputCount = outputIndices.length;\n\n  let runOptionsHandle = 0;\n  let runOptionsAllocs: number[] = [];\n\n  const inputValues: number[] = [];\n  const inputAllocs: number[] = [];\n\n  try {\n    [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);\n\n    // create input tensors\n    for (let i = 0; i < inputCount; i++) {\n      const dataType = inputs[i][0];\n      const dims = inputs[i][1];\n      const data = inputs[i][2];\n\n      let dataOffset: number;\n      let dataByteLength: number;\n\n      if (Array.isArray(data)) {\n        // string tensor\n        dataByteLength = 4 * data.length;\n        dataOffset = wasm._malloc(dataByteLength);\n        inputAllocs.push(dataOffset);\n        let dataIndex = dataOffset / 4;\n        for (let i = 0; i < data.length; i++) {\n          if (typeof data[i] !== 'string') {\n            throw new TypeError(`tensor data at index ${i} is not a string`);\n          }\n          wasm.HEAPU32[dataIndex++] = allocWasmString(data[i], inputAllocs);\n        }\n      } else {\n        dataByteLength = data.byteLength;\n        dataOffset = wasm._malloc(dataByteLength);\n        inputAllocs.push(dataOffset);\n        wasm.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), dataOffset);\n      }\n\n      const stack = wasm.stackSave();\n      const dimsOffset = wasm.stackAlloc(4 * dims.length);\n      try {\n        let dimIndex = dimsOffset / 4;\n        dims.forEach(d => wasm.HEAP32[dimIndex++] = d);\n        const tensor = wasm._OrtCreateTensor(\n            tensorDataTypeStringToEnum(dataType), dataOffset, dataByteLength, dimsOffset, dims.length);\n        if (tensor === 0) {\n          checkLastError(`Can't create tensor for input[${i}].`);\n        }\n        inputValues.push(tensor);\n      } finally {\n        wasm.stackRestore(stack);\n      }\n    }\n\n    const beforeRunStack = wasm.stackSave();\n    const inputValuesOffset = wasm.stackAlloc(inputCount * 4);\n    const inputNamesOffset = wasm.stackAlloc(inputCount * 4);\n    const outputValuesOffset = wasm.stackAlloc(outputCount * 4);\n    const outputNamesOffset = wasm.stackAlloc(outputCount * 4);\n\n    try {\n      let inputValuesIndex = inputValuesOffset / 4;\n      let inputNamesIndex = inputNamesOffset / 4;\n      let outputValuesIndex = outputValuesOffset / 4;\n      let outputNamesIndex = outputNamesOffset / 4;\n      for (let i = 0; i < inputCount; i++) {\n        wasm.HEAPU32[inputValuesIndex++] = inputValues[i];\n        wasm.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];\n      }\n      for (let i = 0; i < outputCount; i++) {\n        wasm.HEAPU32[outputValuesIndex++] = 0;\n        wasm.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];\n      }\n\n      // support RunOptions\n      let errorCode = wasm._OrtRun(\n          sessionHandle, inputNamesOffset, inputValuesOffset, inputCount, outputNamesOffset, outputCount,\n          outputValuesOffset, runOptionsHandle);\n\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const runPromise = wasm.jsepRunPromise;\n      if (runPromise && typeof runPromise.then !== 'undefined') {\n        errorCode = await runPromise;\n      }\n\n      const output: SerializableTensor[] = [];\n\n      if (errorCode !== 0) {\n        checkLastError('failed to call OrtRun().');\n      }\n\n      for (let i = 0; i < outputCount; i++) {\n        const tensor = wasm.HEAPU32[outputValuesOffset / 4 + i];\n\n        const beforeGetTensorDataStack = wasm.stackSave();\n        // stack allocate 4 pointer value\n        const tensorDataOffset = wasm.stackAlloc(4 * 4);\n\n        let type: Tensor.Type|undefined, dataOffset = 0;\n        try {\n          errorCode = wasm._OrtGetTensorData(\n              tensor, tensorDataOffset, tensorDataOffset + 4, tensorDataOffset + 8, tensorDataOffset + 12);\n          if (errorCode !== 0) {\n            checkLastError(`Can't access output tensor data on index ${i}.`);\n          }\n          let tensorDataIndex = tensorDataOffset / 4;\n          const dataType = wasm.HEAPU32[tensorDataIndex++];\n          dataOffset = wasm.HEAPU32[tensorDataIndex++];\n          const dimsOffset = wasm.HEAPU32[tensorDataIndex++];\n          const dimsLength = wasm.HEAPU32[tensorDataIndex++];\n          const dims = [];\n          for (let i = 0; i < dimsLength; i++) {\n            dims.push(wasm.HEAPU32[dimsOffset / 4 + i]);\n          }\n          wasm._OrtFree(dimsOffset);\n\n          const size = dims.length === 0 ? 1 : dims.reduce((a, b) => a * b);\n          type = tensorDataTypeEnumToString(dataType);\n          if (type === 'string') {\n            const stringData: string[] = [];\n            let dataIndex = dataOffset / 4;\n            for (let i = 0; i < size; i++) {\n              const offset = wasm.HEAPU32[dataIndex++];\n              const maxBytesToRead = i === size - 1 ? undefined : wasm.HEAPU32[dataIndex] - offset;\n              stringData.push(wasm.UTF8ToString(offset, maxBytesToRead));\n            }\n            output.push([type, dims, stringData]);\n          } else {\n            const typedArrayConstructor = tensorTypeToTypedArrayConstructor(type);\n            const data = new typedArrayConstructor(size);\n            new Uint8Array(data.buffer, data.byteOffset, data.byteLength)\n                .set(wasm.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));\n            output.push([type, dims, data]);\n          }\n        } finally {\n          wasm.stackRestore(beforeGetTensorDataStack);\n          if (type === 'string' && dataOffset) {\n            wasm._free(dataOffset);\n          }\n          wasm._OrtReleaseTensor(tensor);\n        }\n      }\n\n      return output;\n    } finally {\n      wasm.stackRestore(beforeRunStack);\n    }\n  } finally {\n    inputValues.forEach(v => wasm._OrtReleaseTensor(v));\n    inputAllocs.forEach(p => wasm._free(p));\n\n    if (runOptionsHandle !== 0) {\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\n    }\n    runOptionsAllocs.forEach(p => wasm._free(p));\n  }\n};\n\n/**\n * end profiling\n */\nexport const endProfiling = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error('invalid session id');\n  }\n  const sessionHandle = session[0];\n\n  // profile file name is not used yet, but it must be freed.\n  const profileFileName = wasm._OrtEndProfiling(sessionHandle);\n  if (profileFileName === 0) {\n    checkLastError('Can\\'t get an profile file name.');\n  }\n  wasm._OrtFree(profileFileName);\n};\n\nexport const extractTransferableBuffers = (tensors: readonly SerializableTensor[]): ArrayBufferLike[] => {\n  const buffers: ArrayBufferLike[] = [];\n  for (const tensor of tensors) {\n    const data = tensor[2];\n    if (!Array.isArray(data) && data.buffer) {\n      buffers.push(data.buffer);\n    }\n  }\n  return buffers;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\nimport * as path from 'path';\n\nimport {OrtWasmModule} from './binding/ort-wasm';\nimport {OrtWasmThreadedModule} from './binding/ort-wasm-threaded';\n\n/* eslint-disable @typescript-eslint/no-require-imports */\nconst ortWasmFactory: EmscriptenModuleFactory<OrtWasmModule> =\n    BUILD_DEFS.DISABLE_WEBGPU ? require('./binding/ort-wasm.js') : require('./binding/ort-wasm-simd.jsep.js');\n\nconst ortWasmFactoryThreaded: EmscriptenModuleFactory<OrtWasmModule> = !BUILD_DEFS.DISABLE_WASM_THREAD ?\n    (BUILD_DEFS.DISABLE_WEBGPU ? require('./binding/ort-wasm-threaded.js') :\n                                 require('./binding/ort-wasm-simd-threaded.jsep.js')) :\n    ortWasmFactory;\n/* eslint-enable @typescript-eslint/no-require-imports */\n\nlet wasm: OrtWasmModule|undefined;\nlet initialized = false;\nlet initializing = false;\nlet aborted = false;\n\nconst isMultiThreadSupported = (): boolean => {\n  try {\n    // If 'SharedArrayBuffer' is not available, WebAssembly threads will not work.\n    if (typeof SharedArrayBuffer === 'undefined') {\n      return false;\n    }\n\n    // Test for transferability of SABs (for browsers. needed for Firefox)\n    // https://groups.google.com/forum/#!msg/mozilla.dev.platform/IHkBZlHETpA/dwsMNchWEQAJ\n    if (typeof MessageChannel !== 'undefined') {\n      new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));\n    }\n\n    // Test for WebAssembly threads capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing threaded instructions.\n    return WebAssembly.validate(new Uint8Array([\n      0, 97, 115, 109, 1, 0,  0,  0, 1, 4, 1,  96, 0,   0,  3, 2, 1,  0, 5,\n      4, 1,  3,   1,   1, 10, 11, 1, 9, 0, 65, 0,  254, 16, 2, 0, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst isSimdSupported = (): boolean => {\n  try {\n    // Test for WebAssembly SIMD capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing SIMD instructions.\n\n    // The binary data is generated from the following code by wat2wasm:\n    //\n    // (module\n    //   (type $t0 (func))\n    //   (func $f0 (type $t0)\n    //     (drop\n    //       (i32x4.dot_i16x8_s\n    //         (i8x16.splat\n    //           (i32.const 0))\n    //         (v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000)))))\n\n    return WebAssembly.validate(new Uint8Array([\n      0,   97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 30, 1,   28,  0, 65, 0,\n      253, 15, 253, 12,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  253, 186, 1, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst getWasmFileName = (useSimd: boolean, useThreads: boolean) => {\n  if (useThreads) {\n    return useSimd ? 'ort-wasm-simd-threaded.wasm' : 'ort-wasm-threaded.wasm';\n  } else {\n    return useSimd ? 'ort-wasm-simd.wasm' : 'ort-wasm.wasm';\n  }\n};\n\nexport const initializeWebAssembly = async(flags: Env.WebAssemblyFlags): Promise<void> => {\n  if (initialized) {\n    return Promise.resolve();\n  }\n  if (initializing) {\n    throw new Error('multiple calls to \\'initializeWebAssembly()\\' detected.');\n  }\n  if (aborted) {\n    throw new Error('previous call to \\'initializeWebAssembly()\\' failed.');\n  }\n\n  initializing = true;\n\n  // wasm flags are already initialized\n  const timeout = flags.initTimeout!;\n  const numThreads = flags.numThreads!;\n  const simd = flags.simd!;\n\n  const useThreads = numThreads > 1 && isMultiThreadSupported();\n  const useSimd = simd && isSimdSupported();\n\n  const wasmPaths = flags.wasmPaths;\n  const wasmPrefixOverride = typeof wasmPaths === 'string' ? wasmPaths : undefined;\n  const wasmFileName = getWasmFileName(useSimd, useThreads);\n  const wasmPathOverride = typeof wasmPaths === 'object' ? wasmPaths[wasmFileName] : undefined;\n\n  let isTimeout = false;\n\n  const tasks: Array<Promise<void>> = [];\n\n  // promise for timeout\n  if (timeout > 0) {\n    tasks.push(new Promise((resolve) => {\n      setTimeout(() => {\n        isTimeout = true;\n        resolve();\n      }, timeout);\n    }));\n  }\n\n  // promise for module initialization\n  tasks.push(new Promise((resolve, reject) => {\n    const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;\n    const config: Partial<OrtWasmModule> = {\n      locateFile: (fileName: string, scriptDirectory: string) => {\n        if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads && fileName.endsWith('.worker.js') &&\n            typeof Blob !== 'undefined') {\n          return URL.createObjectURL(new Blob(\n              [\n                // This require() function is handled by webpack to load file content of the corresponding .worker.js\n                // eslint-disable-next-line @typescript-eslint/no-require-imports\n                require('./binding/ort-wasm-threaded.worker.js')\n              ],\n              {type: 'text/javascript'}));\n        }\n\n        if (fileName.endsWith('.wasm')) {\n          if (wasmPathOverride) {\n            return wasmPathOverride;\n          }\n\n          const prefix = wasmPrefixOverride ?? scriptDirectory;\n\n          if (!BUILD_DEFS.DISABLE_WEBGPU) {\n            if (wasmFileName === 'ort-wasm-simd.wasm') {\n              return prefix + 'ort-wasm-simd.jsep.wasm';\n            } else if (wasmFileName === 'ort-wasm-simd-threaded.wasm') {\n              return prefix + 'ort-wasm-simd-threaded.jsep.wasm';\n            }\n          }\n\n          return prefix + wasmFileName;\n        }\n\n        return scriptDirectory + fileName;\n      }\n    };\n\n    if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads) {\n      if (typeof Blob === 'undefined') {\n        config.mainScriptUrlOrBlob = path.join(__dirname, 'ort-wasm-threaded.js');\n      } else {\n        const scriptSourceCode = `var ortWasmThreaded=(function(){var _scriptDir;return ${factory.toString()}})();`;\n        config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], {type: 'text/javascript'});\n      }\n    }\n\n    factory(config).then(\n        // wasm module initialized successfully\n        module => {\n          initializing = false;\n          initialized = true;\n          wasm = module;\n          resolve();\n        },\n        // wasm module failed to initialize\n        (what) => {\n          initializing = false;\n          aborted = true;\n          reject(what);\n        });\n  }));\n\n  await Promise.race(tasks);\n\n  if (isTimeout) {\n    throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);\n  }\n};\n\nexport const getInstance = (): OrtWasmModule => {\n  if (initialized && wasm) {\n    return wasm;\n  }\n\n  throw new Error('WebAssembly is not initialized yet.');\n};\n\nexport const dispose = (): void => {\n  if (initialized && !initializing && !aborted) {\n    initializing = true;\n\n    (wasm as OrtWasmThreadedModule).PThread?.terminateAllThreads();\n    wasm = undefined;\n\n    initializing = false;\n    initialized = false;\n    aborted = true;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getInstance} from './wasm-factory';\n\nexport const allocWasmString = (data: string, allocs: number[]): number => {\n  const wasm = getInstance();\n\n  const dataLength = wasm.lengthBytesUTF8(data) + 1;\n  const dataOffset = wasm._malloc(dataLength);\n  wasm.stringToUTF8(data, dataOffset, dataLength);\n  allocs.push(dataOffset);\n\n  return dataOffset;\n};\n\ninterface ExtraOptionsHandler {\n  (name: string, value: string): void;\n}\n\nexport const iterateExtraOptions =\n    (options: Record<string, unknown>, prefix: string, seen: WeakSet<Record<string, unknown>>,\n     handler: ExtraOptionsHandler): void => {\n      if (typeof options == 'object' && options !== null) {\n        if (seen.has(options)) {\n          throw new Error('Circular reference in options');\n        } else {\n          seen.add(options);\n        }\n      }\n\n      Object.entries(options).forEach(([key, value]) => {\n        const name = (prefix) ? prefix + key : key;\n        if (typeof value === 'object') {\n          iterateExtraOptions(value as Record<string, unknown>, name + '.', seen, handler);\n        } else if (typeof value === 'string' || typeof value === 'number') {\n          handler(name, value.toString());\n        } else if (typeof value === 'boolean') {\n          handler(name, (value) ? '1' : '0');\n        } else {\n          throw new Error(`Can't handle extra config type: ${typeof value}`);\n        }\n      });\n    };\n\n/**\n * check web assembly API's last error and throw error if any error occurred.\n * @param message a message used when an error occurred.\n */\nexport const checkLastError = (message: string): void => {\n  const wasm = getInstance();\n\n  const stack = wasm.stackSave();\n  try {\n    const paramsOffset = wasm.stackAlloc(8);\n    wasm._OrtGetLastError(paramsOffset, paramsOffset + 4);\n    const errorCode = wasm.HEAP32[paramsOffset / 4];\n    const errorMessagePointer = wasm.HEAPU32[paramsOffset / 4 + 1];\n    const errorMessage = errorMessagePointer ? wasm.UTF8ToString(errorMessagePointer) : '';\n    throw new Error(`${message} ERROR_CODE: ${errorCode}, ERROR_MESSAGE: ${errorMessage}`);\n  } finally {\n    wasm.stackRestore(stack);\n  }\n};\n","\nimport worker from \"!!../../../../node_modules/worker-loader/dist/runtime/inline.js\";\n\nexport default function Worker_fn() {\n  return worker(\"/*!\\n* ONNX Runtime Web v1.16.0\\n* Copyright (c) Microsoft Corporation. All rights reserved.\\n* Licensed under the MIT License.\\n*/\\n!function(){var e={838:function(e,n,t){\\\"use strict\\\";var r=this&&this.__awaiter||function(e,n,t,r){return new(t||(t=Promise))((function(a,o){function i(e){try{u(r.next(e))}catch(e){o(e)}}function c(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){var n;e.done?a(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(i,c)}u((r=r.apply(e,n||[])).next())}))},a=this&&this.__generator||function(e,n){var t,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:c(0),throw:c(1),return:c(2)},\\\"function\\\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function c(c){return function(u){return function(c){if(t)throw new TypeError(\\\"Generator is already executing.\\\");for(;o&&(o=0,c[0]&&(i=0)),i;)try{if(t=1,r&&(a=2&c[0]?r.return:c[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,c[1])).done)return a;switch(r=0,a&&(c=[2&c[0],a.value]),c[0]){case 0:case 1:a=c;break;case 4:return i.label++,{value:c[1],done:!1};case 5:i.label++,r=c[1],c=[0];continue;case 7:c=i.ops.pop(),i.trys.pop();continue;default:if(!((a=(a=i.trys).length>0&&a[a.length-1])||6!==c[0]&&2!==c[0])){i=0;continue}if(3===c[0]&&(!a||c[1]>a[0]&&c[1]<a[3])){i.label=c[1];break}if(6===c[0]&&i.label<a[1]){i.label=a[1],a=c;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(c);break}a[2]&&i.ops.pop(),i.trys.pop();continue}c=n.call(e,i)}catch(e){c=[6,e],r=0}finally{t=a=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,u])}}},o=this&&this.__values||function(e){var n=\\\"function\\\"==typeof Symbol&&Symbol.iterator,t=n&&e[n],r=0;if(t)return t.call(e);if(e&&\\\"number\\\"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(n?\\\"Object is not iterable.\\\":\\\"Symbol.iterator is not defined.\\\")},i=this&&this.__read||function(e,n){var t=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var r,a,o=t.call(e),i=[];try{for(;(void 0===n||n-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(t=o.return)&&t.call(o)}finally{if(a)throw a.error}}return i};Object.defineProperty(n,\\\"__esModule\\\",{value:!0}),n.WebGpuBackend=void 0;var c=t(955),u=t(771),s=t(510),l=t(305),f=function(){function e(){this.currentKernelId=null,this.commandEncoder=null,this.computePassEncoder=null,this.pendingDispatchNumber=0,this.profilingEnabled=!1}return Object.defineProperty(e.prototype,\\\"currentKernelCustomData\\\",{get:function(){if(null===this.currentKernelId)throw new Error(\\\"currentKernelCustomData(): currentKernelId is null. (should not happen)\\\");var e=this.kernelCustomData.get(this.currentKernelId);return e||(e={},this.kernelCustomData.set(this.currentKernelId,e)),e},enumerable:!1,configurable:!0}),e.prototype.initialize=function(e){return r(this,void 0,void 0,(function(){var n,t,r;return a(this,(function(a){switch(a.label){case 0:if(!navigator.gpu)throw new Error(\\\"WebGpuBackend: WebGPU is not available.\\\");return[4,navigator.gpu.requestAdapter()];case 1:if(!(n=a.sent()))throw new Error(\\\"WebGpuBackend: Failed to get GPU adapter.\\\");return t={requiredLimits:{maxComputeWorkgroupStorageSize:n.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:n.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:n.limits.maxStorageBufferBindingSize}},n.features.has(\\\"timestamp-query-inside-passes\\\")&&\\\"default\\\"===e.webgpu.profilingMode&&(this.profilingEnabled=!0,t.requiredFeatures=[\\\"timestamp-query-inside-passes\\\"]),r=this,[4,n.requestDevice(t)];case 2:return r.device=a.sent(),this.gpuDataManager=(0,u.createGpuDataManager)(this),this.programManager=new l.ProgramManager(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,(0,c.configureLogger)(e.logLevel,!!e.debug),this.device.onuncapturederror=function(e){e.error instanceof GPUValidationError&&console.error(\\\"An uncaught WebGPU validation error was raised: \\\".concat(e.error.message))},this.profilingEnabled&&(this.profilingQuerySet=this.device.createQuerySet({type:\\\"timestamp\\\",count:2})),[2]}}))}))},e.prototype.dispose=function(){},e.prototype.getCommandEncoder=function(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder()),this.commandEncoder},e.prototype.getComputePassEncoder=function(){return this.computePassEncoder||(this.computePassEncoder=this.getCommandEncoder().beginComputePass()),this.computePassEncoder},e.prototype.endComputePass=function(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)},e.prototype.flush=function(){this.endComputePass(),this.device.queue.submit([this.getCommandEncoder().finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0},e.prototype.run=function(e,n,t,r,a){if(n.length!==e.inputTypes.length)throw new Error(\\\"Input size must be equal to \\\".concat(e.inputTypes.length,\\\".\\\"));for(var o=[],i=0;i<n.length;++i){if(!(h=this.gpuDataManager.get(n[i].data)))throw new Error(\\\"no GPU data for input: \\\".concat(n[i].data));o[i]=h}var u=function(e,n,t){var r=n.map((function(e){return\\\"\\\".concat(e.join(\\\",\\\"))})).join(\\\"_\\\"),a=t.join(\\\"_\\\"),o=e.name;return e.cacheHint&&(o+=\\\"[\\\"+e.cacheHint+\\\"]\\\"),o+\\\":\\\"+r+\\\";\\\"+a}(e,n.map((function(e){return e.dims})),o.map((function(e){return e.type}))),s=this.programManager.getArtifact(u),l=s?s.programInfo:\\\"function\\\"==typeof e.get?e.get():e,f=0===t.length?l.outputs.map((function(e,n){return n})):t;if(f.length!==l.outputs.length)throw new Error(\\\"Output size \\\".concat(f.length,\\\" must be equal to \\\").concat(l.outputs.length,\\\".\\\"));var p=[],d=[];for(i=0;i<l.outputs.length;++i){if(!Number.isInteger(f[i])||f[i]<-2||f[i]>=l.outputs.length)throw new Error(\\\"Invalid output index: \\\".concat(f[i]));var h,g=-1===f[i],v=-2===f[i],m=g||v?a(l.outputs[i].dataType,l.outputs[i].dims):r(f[i],l.outputs[i].dataType,l.outputs[i].dims);if(!(h=this.gpuDataManager.get(m.data)))throw new Error(\\\"no GPU data for output: \\\".concat(m.data));if(g&&this.temporaryData.push(h),v){var y=this.kernelPersistentData.get(this.currentKernelId);y||(y=[],this.kernelPersistentData.set(this.currentKernelId,y)),y.push(h)}p.push(m),d.push(h)}var b=this.programManager.normalizeDispatchGroupSize(l.dispatchGroup(n));return s||(s=this.programManager.build(l,b),this.programManager.setArtifact(u,s)),(0,c.LOG_DEBUG)(\\\"info\\\",(function(){return'[ProgramManager] run \\\"'.concat(l.name,'\\\" (key=').concat(u,\\\") with \\\").concat(b[0],\\\"x\\\").concat(b[1],\\\"x\\\").concat(b[2])})),this.programManager.run(s,o,d,b),p},e.prototype.upload=function(e,n){this.gpuDataManager.upload(e,n)},e.prototype.memcpy=function(e,n){this.gpuDataManager.memcpy(e,n)},e.prototype.download=function(e,n){return r(this,void 0,void 0,(function(){var t,r;return a(this,(function(a){switch(a.label){case 0:return[4,this.gpuDataManager.download(e)];case 1:return t=a.sent(),(r=n()).set(new Uint8Array(t,0,r.byteLength)),[2]}}))}))},e.prototype.alloc=function(e){return this.gpuDataManager.create(e).id},e.prototype.free=function(e){return this.gpuDataManager.release(e)},e.prototype.createKernel=function(e,n,t){var r=s.WEBGPU_OP_RESOLVE_RULES.get(e);if(!r)throw new Error(\\\"kernel not implemented: \\\".concat(e));this.kernels.set(n,[e,r[0],[r[1],t]])},e.prototype.releaseKernel=function(e){var n,t,r=this.kernelPersistentData.get(e);if(r){try{for(var a=o(r),i=a.next();!i.done;i=a.next()){var c=i.value;this.gpuDataManager.release(c.id)}}catch(e){n={error:e}}finally{try{i&&!i.done&&(t=a.return)&&t.call(a)}finally{if(n)throw n.error}}this.kernelPersistentData.delete(e)}this.kernelCustomData.delete(e),this.kernels.delete(e)},e.prototype.computeKernel=function(e,n){var t,r,a=this.kernels.get(e);if(!a)throw new Error(\\\"kernel not created: \\\".concat(e));var u=i(a,3),s=u[0],l=u[1],f=u[2];if(null!==this.currentKernelId)throw new Error('kernel \\\"'.concat(s,'\\\" is not allowed to be called recursively'));this.currentKernelId=e,f[0]&&(f[1]=f[0](f[1]),f[0]=void 0),(0,c.LOG_DEBUG)(\\\"info\\\",(function(){return'[WebGPU] Start to run kernel \\\"'.concat(s,'\\\"...')})),this.temporaryData=[];try{return l(n,f[1]),0}catch(e){return(0,c.LOG_DEBUG)(\\\"warning\\\",'[WebGPU] Kernel \\\"'.concat(s,'\\\" failed. Error: ').concat(e)),1}finally{try{for(var p=o(this.temporaryData),d=p.next();!d.done;d=p.next()){var h=d.value;this.gpuDataManager.release(h.id)}}catch(e){t={error:e}}finally{try{d&&!d.done&&(r=p.return)&&r.call(p)}finally{if(t)throw t.error}}this.temporaryData=[],this.currentKernelId=null}},e}();n.WebGpuBackend=f},675:function(e,n,t){\\\"use strict\\\";var r=this&&this.__awaiter||function(e,n,t,r){return new(t||(t=Promise))((function(a,o){function i(e){try{u(r.next(e))}catch(e){o(e)}}function c(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){var n;e.done?a(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(i,c)}u((r=r.apply(e,n||[])).next())}))},a=this&&this.__generator||function(e,n){var t,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:c(0),throw:c(1),return:c(2)},\\\"function\\\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function c(c){return function(u){return function(c){if(t)throw new TypeError(\\\"Generator is already executing.\\\");for(;o&&(o=0,c[0]&&(i=0)),i;)try{if(t=1,r&&(a=2&c[0]?r.return:c[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,c[1])).done)return a;switch(r=0,a&&(c=[2&c[0],a.value]),c[0]){case 0:case 1:a=c;break;case 4:return i.label++,{value:c[1],done:!1};case 5:i.label++,r=c[1],c=[0];continue;case 7:c=i.ops.pop(),i.trys.pop();continue;default:if(!((a=(a=i.trys).length>0&&a[a.length-1])||6!==c[0]&&2!==c[0])){i=0;continue}if(3===c[0]&&(!a||c[1]>a[0]&&c[1]<a[3])){i.label=c[1];break}if(6===c[0]&&i.label<a[1]){i.label=a[1],a=c;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(c);break}a[2]&&i.ops.pop(),i.trys.pop();continue}c=n.call(e,i)}catch(e){c=[6,e],r=0}finally{t=a=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,u])}}};Object.defineProperty(n,\\\"__esModule\\\",{value:!0}),n.init=void 0;var o=t(917),i=t(838),c=t(955),u=t(952),s=function(){function e(e,n,t,r){this.module=e,this.dataType=n,this.data=t,this.dims=r}return e.prototype.getFloat32Array=function(){if(1!==this.dataType)throw new Error(\\\"Invalid data type\\\");var e=u.ShapeUtil.size(this.dims);return 0===e?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,e)},e.prototype.getBigInt64Array=function(){if(7!==this.dataType)throw new Error(\\\"Invalid data type\\\");var e=u.ShapeUtil.size(this.dims);return 0===e?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,e)},e.prototype.getInt32Array=function(){if(6!==this.dataType)throw new Error(\\\"Invalid data type\\\");var e=u.ShapeUtil.size(this.dims);return 0===e?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,e)},e.prototype.reshape=function(n){if(u.ShapeUtil.size(n)!==u.ShapeUtil.size(this.dims))throw new Error(\\\"Invalid new shape\\\");return new e(this.module,this.dataType,this.data,n)},e}(),l=function(){function e(e,n,t){this.module=e,this.backend=n,this.customDataOffset=0,this.customDataSize=0;var r=e.HEAPU32,a=t>>2;this.opKernelContext=r[a++];var o=r[a++];this.customDataOffset=r[a++],this.customDataSize=r[a++];for(var i=[],c=0;c<o;c++){for(var u=r[a++],l=r[a++],f=r[a++],p=[],d=0;d<f;d++)p.push(r[a++]);i.push(new s(e,u,l,p))}this.inputs=i}return Object.defineProperty(e.prototype,\\\"kernelCustomData\\\",{get:function(){return this.backend.currentKernelCustomData},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,\\\"customDataBuffer\\\",{get:function(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)},enumerable:!1,configurable:!0}),e.prototype.compute=function(e,n){var t,r,a,i=this,c=null!==(r=null===(t=null==n?void 0:n.inputs)||void 0===t?void 0:t.map((function(e){return\\\"number\\\"==typeof e?i.inputs[e]:e})))&&void 0!==r?r:this.inputs,l=null!==(a=null==n?void 0:n.outputs)&&void 0!==a?a:[];return this.backend.run(e,c,l,(function(e,n,t){return new s(i.module,n,i.output(e,t),t)}),(function(e,n){var t=(0,o.getTensorElementSize)(e);if(!t)throw new Error(\\\"Unsupported data type: \\\".concat(e));var r=t*u.ShapeUtil.size(n);return new s(i.module,e,i.backend.gpuDataManager.create(r).id,n)}))},e.prototype.output=function(e,n){var t=this.module.stackSave();try{var r=this.module.stackAlloc(4*(1+n.length)),a=r>>2;this.module.HEAPU32[a++]=n.length;for(var o=0;o<n.length;o++)this.module.HEAPU32[a++]=n[o];return this.module._JsepOutput(this.opKernelContext,e,r)}finally{this.module.stackRestore(t)}},e}();n.init=function(e,n){return r(void 0,void 0,void 0,(function(){var t,o;return a(this,(function(u){switch(u.label){case 0:if(!(t=e.jsepInit)||!navigator.gpu)return[3,2];if(!n.wasm.simd)throw new Error(\\\"Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using WebGPU EP\\\");return[4,(o=new i.WebGpuBackend).initialize(n)];case 1:u.sent(),t({backend:o},(function(e){return o.alloc(e)}),(function(e){return o.free(e)}),(function(n,t,r,a){if(void 0===a&&(a=!1),a)(0,c.LOG_DEBUG)(\\\"verbose\\\",(function(){return\\\"[WebGPU] jsepCopyGpuToGpu: src=\\\".concat(n,\\\", dst=\\\").concat(t,\\\", size=\\\").concat(r)})),o.memcpy(n,t);else{(0,c.LOG_DEBUG)(\\\"verbose\\\",(function(){return\\\"[WebGPU] jsepCopyCpuToGpu: dataOffset=\\\".concat(n,\\\", gpuDataId=\\\").concat(t,\\\", size=\\\").concat(r)}));var i=e.HEAPU8.subarray(n,n+r);o.upload(t,i)}}),(function(n,t,i){return r(void 0,void 0,void 0,(function(){return a(this,(function(r){switch(r.label){case 0:return(0,c.LOG_DEBUG)(\\\"verbose\\\",(function(){return\\\"[WebGPU] jsepCopyGpuToCpu: gpuDataId=\\\".concat(n,\\\", dataOffset=\\\").concat(t,\\\", size=\\\").concat(i)})),[4,o.download(n,(function(){return e.HEAPU8.subarray(t,t+i)}))];case 1:return r.sent(),[2]}}))}))}),(function(e,n,t){return o.createKernel(e,n,t)}),(function(e){return o.releaseKernel(e)}),(function(n,t){(0,c.LOG_DEBUG)(\\\"verbose\\\",(function(){return\\\"[WebGPU] jsepRun: kernel=\\\".concat(n,\\\", contextDataOffset=\\\").concat(t)}));var r=new l(e,o,t);return o.computeKernel(n,r)})),u.label=2;case 2:return[2]}}))}))}},955:function(e,n,t){\\\"use strict\\\";var r=this&&this.__read||function(e,n){var t=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var r,a,o=t.call(e),i=[];try{for(;(void 0===n||n-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(t=o.return)&&t.call(o)}finally{if(a)throw a.error}}return i},a=this&&this.__spreadArray||function(e,n,t){if(t||2===arguments.length)for(var r,a=0,o=n.length;a<o;a++)!r&&a in n||(r||(r=Array.prototype.slice.call(n,0,a)),r[a]=n[a]);return e.concat(r||Array.prototype.slice.call(n))};Object.defineProperty(n,\\\"__esModule\\\",{value:!0}),n.LOG_DEBUG=n.LOG=n.configureLogger=void 0;var o,i,c=t(917),u=[\\\"V\\\",\\\"I\\\",\\\"W\\\",\\\"E\\\",\\\"F\\\"];n.configureLogger=function(e,n){o=e,i=n},n.LOG=function(e,n){var t,r,a=(0,c.logLevelStringToEnum)(e);a>=(0,c.logLevelStringToEnum)(o)&&(t=a,r=\\\"function\\\"==typeof n?n():n,console.log(\\\"[\\\".concat(u[t],\\\",\\\").concat((new Date).toISOString(),\\\"]\\\").concat(r)))},n.LOG_DEBUG=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];i&&n.LOG.apply(void 0,a([],r(e),!1))}},952:function(e,n){\\\"use strict\\\";var t=this&&this.__read||function(e,n){var t=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var r,a,o=t.call(e),i=[];try{for(;(void 0===n||n-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(t=o.return)&&t.call(o)}finally{if(a)throw a.error}}return i};Object.defineProperty(n,\\\"__esModule\\\",{value:!0}),n.MAX_CLIP=n.MIN_CLIP=n.GemmUtil=n.PoolConvUtil=n.ShapeUtil=n.BroadcastUtil=n.MatMulUtil=void 0;var r=function(){function e(){}return e.calcMatMulShape=function(e,n){return e[1]!==n[0]?void 0:[e[0],n[1]]},e}();n.MatMulUtil=r;var a=function(){function e(){}return e.calcShape=function(e,n,a){var o;void 0===a&&(a=!1);var i=e.length,c=n.length;if(0===i)return n;if(0===c)return e;var u=Math.max(e.length,n.length),s=new Array(u);if(a){if(i<2||c<2)return;var l=r.calcMatMulShape([e[i-2],e[i-1]],[n[c-2],n[c-1]]);if(void 0===l)return;o=t(l,2),s[u-2]=o[0],s[u-1]=o[1]}for(var f=a?3:1;f<=u;f++){var p=i-f<0?1:e[i-f],d=c-f<0?1:n[c-f];if(p!==d&&p>1&&d>1)return;s[u-f]=Math.max(p,d)}return s},e.isValidBroadcast=function(e,n){var t=e.length,r=n.length;if(t>r)return!1;for(var a=1;a<=t;a++)if(1!==e[t-a]&&e[t-a]!==n[r-a])return!1;return!0},e}();n.BroadcastUtil=a;var o=function(){function e(){}return e.size=function(n){return e.getSizeFromDimensionRange(n,0,n.length)},e.sizeFromDimension=function(n,t){if(t<0||t>n.length)throw new Error(\\\"invalid dimension of \\\".concat(t,\\\" for sizeFromDimension as Tensor has \\\").concat(n.length,\\\" dimensions.\\\"));return e.getSizeFromDimensionRange(n,t,n.length)},e.sizeToDimension=function(n,t){if(t<0||t>n.length)throw new Error(\\\"invalid dimension of \\\".concat(t,\\\" for sizeToDimension as Tensor has \\\").concat(n.length,\\\" dimensions.\\\"));return e.getSizeFromDimensionRange(n,0,t)},e.getSizeFromDimensionRange=function(e,n,t){for(var r=1,a=n;a<t;a++){if(e[a]<0)throw new Error(\\\"cannot get valid size from specified dimension range. Most likely the range contains negative values in them.\\\");r*=e[a]}return r},e.computeStrides=function(e){var n=e.length;if(0===n)return[];if(1===n)return[1];var t=new Array(n);t[n-1]=1,t[n-2]=e[n-1];for(var r=n-3;r>=0;--r)t[r]=t[r+1]*e[r+1];return t},e.normalizeAxis=function(e,n){if(e<-n&&e>=n)throw new Error(\\\"unsupported axis for this operation.\\\");return e<0?e+n:e},e.normalizeAxes=function(e,n){var t=this;return e.map((function(r){return t.normalizeAxis(r,null!=n?n:e.length)}))},e.sortBasedOnPerm=function(e,n){return n?n.map((function(n){return e[n]})):e.slice().reverse()},e.padShape=function(e,n){var t=e.length;return e.map((function(e,r){return e+n[r]+n[r+t]}))},e.areEqual=function(e,n){return e.length===n.length&&e.every((function(e,t){return e===n[t]}))},e}();n.ShapeUtil=o;var i=function(){function e(){}return e.adjustPoolAttributes=function(e,n,t,r,a,o){if(!e&&t.length!==n.length-2)throw new Error(\\\"length of specified kernel shapes should be 2 less than length of input dimensions\\\");if(e)for(var i=0;i<n.length-2;i++)i>=t.length?t.push(n[i+2]):t[i]=n[i+2];for(i=0;i<t.length;i++)if(i<r.length){if(r[i]<0)throw new Error(\\\"strides should be greater than or equal to 1\\\")}else r.push(1);for(i=0;i<t.length;i++)if(i<a.length){if(a[i]<0)throw new Error(\\\"dilations should be greater than or equal to 1\\\")}else a.push(1);for(i=0;i<2*t.length;i++)if(i<o.length){if(o[i]<0)throw new Error(\\\"pad should be greater than or equal to 1\\\")}else o.push(0);for(i=0;i<t.length;i++){if(t[i]<=0)throw new Error(\\\"kernel shapes need to be greater than 0\\\");if(o[i]>=t[i]||o[i+t.length]>=t[i])throw new Error(\\\"pads should be smaller than kernel\\\")}},e.adjustPadsBasedOnAutoPad=function(n,t,r,a,o,i,c){if(c){if(o.length!==2*(n.length-2))throw new Error(\\\"length of pads should be twice the length of data dimensions\\\");if(t.length!==n.length-2)throw new Error(\\\"length of strides should be the length of data dimensions\\\");if(a.length!==n.length-2)throw new Error(\\\"length of kernel shapes should be the length of data dimensions\\\");for(var u=0;u<n.length-2;u++)e.adjustPadAndReturnShape(n[u+(i?1:2)],t[u],r[u],a[u],o,u,u+n.length-2,c)}},e.computePoolOutputShape=function(n,t,r,a,o,i,c){if(t.length<=0)throw new Error(\\\"input shape must be of size greater than 0\\\");var u=[t[0],t[1]];return e.computeShapeHelper(n,t,u,r,a,o,i,c),u},e.computeConvOutputShape=function(n,t,r,a,o,i,c){if(n.length<=0||t.length<=0)throw new Error(\\\"invalid input tensor dims or invalid filter tensor dims\\\");var u=[n[0],t[0]];return e.computeShapeHelper(!1,n,u,r,a,o,i,c),u},e.computeShapeHelper=function(n,t,r,a,o,i,c,u){if(n)for(var s=0;s<t.length-2;s++)r.push(1);else for(s=0;s<t.length-2;s++)r.push(e.adjustPadAndReturnShape(t[s+2],a[s],o[s],i[s],c,s,s+t.length-2,u))},e.adjustPadAndReturnShape=function(e,n,t,r,a,o,i,c){var u=t*(r-1)+1;if(!c||\\\"NOTSET\\\"===c)return Math.floor((e+a[o]+a[i]-u)/n+1);switch(c){case\\\"VALID\\\":return a[o]=0,a[i]=0,Math.floor((e-u)/n+1);case\\\"SAME_LOWER\\\":case\\\"SAME_UPPER\\\":if(1!==t)throw new Error(\\\"Dilation not supported for SAME_UPPER or SAME_LOWER\\\");var s=((e+n-1)/n-1)*n+r-e;return a[o]=\\\"SAME_LOWER\\\"===c?Math.floor((s+1)/2):Math.floor(s/2),a[i]=s-a[o],Math.floor((e+s-r)/n+1);default:throw new Error(\\\"Unsupported AutoPad type\\\")}},e}();n.PoolConvUtil=i;var c=function(){function e(){}return e.getShapeOfGemmResult=function(e,n,t,r,o){if(2!==e.length||2!==t.length)throw new Error(\\\"shape need to be of size 2\\\");var i,c,u;n?(i=e[1],c=e[0]):(i=e[0],c=e[1]);var s=-1;if(r?(u=t[0],s=1):(u=t[1],s=0),t[s]!==c)throw new Error(\\\"dimension mismatch\\\");if(i<=0||u<=0||c<=0)throw new Error(\\\"invalid shape specified\\\");if(o&&!a.isValidBroadcast(o,[i,u]))throw new Error(\\\"gemm: invalid bias shape for broadcast\\\");return[i,u,c]},e}();n.GemmUtil=c,n.MIN_CLIP=-34028234663852886e22,n.MAX_CLIP=34028234663852886e22},387:function(e,n){\\\"use strict\\\";Object.defineProperty(n,\\\"__esModule\\\",{value:!0}),n.createAttributeWithCacheKey=void 0;var t=function(){function e(e){Object.assign(this,e)}return Object.defineProperty(e.prototype,\\\"cacheKey\\\",{get:function(){var e=this;return this._cacheKey||(this._cacheKey=Object.getOwnPropertyNames(this).sort().map((function(n){return\\\"\\\".concat(e[n])})).join(\\\";\\\")),this._cacheKey},enumerable:!1,configurable:!0}),e}();n.createAttributeWithCacheKey=function(e){return new t(e)}},771:function(e,n,t){\\\"use strict\\\";var r=this&&this.__awaiter||function(e,n,t,r){return new(t||(t=Promise))((function(a,o){function i(e){try{u(r.next(e))}catch(e){o(e)}}function c(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){var n;e.done?a(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(i,c)}u((r=r.apply(e,n||[])).next())}))},a=this&&this.__generator||function(e,n){var t,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:c(0),throw:c(1),return:c(2)},\\\"function\\\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function c(c){return function(u){return function(c){if(t)throw new TypeError(\\\"Generator is already executing.\\\");for(;o&&(o=0,c[0]&&(i=0)),i;)try{if(t=1,r&&(a=2&c[0]?r.return:c[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,c[1])).done)return a;switch(r=0,a&&(c=[2&c[0],a.value]),c[0]){case 0:case 1:a=c;break;case 4:return i.label++,{value:c[1],done:!1};case 5:i.label++,r=c[1],c=[0];continue;case 7:c=i.ops.pop(),i.trys.pop();continue;default:if(!((a=(a=i.trys).length>0&&a[a.length-1])||6!==c[0]&&2!==c[0])){i=0;continue}if(3===c[0]&&(!a||c[1]>a[0]&&c[1]<a[3])){i.label=c[1];break}if(6===c[0]&&i.label<a[1]){i.label=a[1],a=c;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(c);break}a[2]&&i.ops.pop(),i.trys.pop();continue}c=n.call(e,i)}catch(e){c=[6,e],r=0}finally{t=a=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,u])}}},o=this&&this.__values||function(e){var n=\\\"function\\\"==typeof Symbol&&Symbol.iterator,t=n&&e[n],r=0;if(t)return t.call(e);if(e&&\\\"number\\\"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(n?\\\"Object is not iterable.\\\":\\\"Symbol.iterator is not defined.\\\")},i=this&&this.__read||function(e,n){var t=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var r,a,o=t.call(e),i=[];try{for(;(void 0===n||n-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(t=o.return)&&t.call(o)}finally{if(a)throw a.error}}return i},c=this&&this.__spreadArray||function(e,n,t){if(t||2===arguments.length)for(var r,a=0,o=n.length;a<o;a++)!r&&a in n||(r||(r=Array.prototype.slice.call(n,0,a)),r[a]=n[a]);return e.concat(r||Array.prototype.slice.call(n))};Object.defineProperty(n,\\\"__esModule\\\",{value:!0}),n.createGpuDataManager=void 0;var u=t(955),s=t(163),l=function(e){return 16*Math.ceil(e/16)},f=0,p=function(){function e(e){this.backend=e,this.storageCache=new Map,this.downloadCache=new Map,this.freeBuffers=new Map,this.buffersForUploadingPending=[],this.buffersPending=[]}return e.prototype.upload=function(e,n){var t=n.buffer,r=n.byteOffset,a=n.byteLength,o=l(a),i=this.storageCache.get(e);if(!i)throw new Error(\\\"gpu data for uploading does not exist\\\");if(i.originalSize!==a)throw new Error(\\\"inconsistent data size. gpu data size=\\\".concat(i.originalSize,\\\", data size=\\\").concat(a));var c=this.backend.device.createBuffer({mappedAtCreation:!0,size:o,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),s=c.getMappedRange();new Uint8Array(s).set(new Uint8Array(t,r,a)),c.unmap();var f=this.backend.getCommandEncoder();this.backend.endComputePass(),f.copyBufferToBuffer(c,0,i.gpuData.buffer,0,o),(0,u.LOG_DEBUG)(\\\"verbose\\\",(function(){return\\\"[WebGPU] GpuDataManager.upload(id=\\\".concat(e,\\\")\\\")})),this.buffersForUploadingPending.push(c)},e.prototype.memcpy=function(e,n){var t=this.storageCache.get(e);if(!t)throw new Error(\\\"source gpu data for memcpy does not exist\\\");var r=this.storageCache.get(n);if(!r)throw new Error(\\\"destination gpu data for memcpy does not exist\\\");if(t.originalSize!==r.originalSize)throw new Error(\\\"inconsistent source and destination gpu data size\\\");var a=l(t.originalSize),o=this.backend.getCommandEncoder();this.backend.endComputePass(),o.copyBufferToBuffer(t.gpuData.buffer,0,r.gpuData.buffer,0,a)},e.prototype.create=function(e,n){void 0===n&&(n=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST);var t,r=l(e),a=this.freeBuffers.get(r);a||(a=[],this.freeBuffers.set(r,a)),t=a.length>0?a.pop():this.backend.device.createBuffer({size:r,usage:n});var o={id:f++,type:s.GpuDataType.default,buffer:t};return this.storageCache.set(o.id,{gpuData:o,originalSize:e}),(0,u.LOG_DEBUG)(\\\"verbose\\\",(function(){return\\\"[WebGPU] GpuDataManager.create(size=\\\".concat(e,\\\") => id=\\\").concat(o.id)})),o},e.prototype.get=function(e){var n;return null===(n=this.storageCache.get(e))||void 0===n?void 0:n.gpuData},e.prototype.release=function(e){var n=this.storageCache.get(e);if(!n)throw new Error(\\\"releasing data does not exist\\\");return(0,u.LOG_DEBUG)(\\\"verbose\\\",(function(){return\\\"[WebGPU] GpuDataManager.release(id=\\\".concat(e,\\\"), gpuDataId=\\\").concat(n.gpuData.id)})),this.storageCache.delete(e),this.buffersPending.push(n.gpuData.buffer),this.downloadCache.get(e)&&this.downloadCache.delete(e),n.originalSize},e.prototype.download=function(e){return r(this,void 0,void 0,(function(){var n,t,r,o,i,c;return a(this,(function(a){if(n=this.downloadCache.get(e))return[2,n.data];if(!(t=this.storageCache.get(e)))throw new Error(\\\"data does not exist\\\");return r=this.backend.getCommandEncoder(),this.backend.endComputePass(),o=l(t.originalSize),i=this.backend.device.createBuffer({size:o,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}),r.copyBufferToBuffer(t.gpuData.buffer,0,i,0,o),this.backend.flush(),c=new Promise((function(e){i.mapAsync(GPUMapMode.READ).then((function(){var n=i.getMappedRange().slice(0);i.destroy(),e(n)}))})),this.downloadCache.set(e,{data:c}),[2,c]}))}))},e.prototype.refreshPendingBuffers=function(){var e,n,t,r;try{for(var a=o(this.buffersForUploadingPending),i=a.next();!i.done;i=a.next())(s=i.value).destroy()}catch(n){e={error:n}}finally{try{i&&!i.done&&(n=a.return)&&n.call(a)}finally{if(e)throw e.error}}this.buffersForUploadingPending=[];try{for(var c=o(this.buffersPending),u=c.next();!u.done;u=c.next()){var s=u.value;this.freeBuffers.get(s.size).push(s)}}catch(e){t={error:e}}finally{try{u&&!u.done&&(r=c.return)&&r.call(c)}finally{if(t)throw t.error}}this.buffersPending=[]},e.prototype.dispose=function(){this.freeBuffers.forEach((function(e){e.forEach((function(e){e.destroy()}))})),this.storageCache.forEach((function(e){e.gpuData.buffer.destroy()})),this.storageCache=new Map,this.downloadCache=new Map,this.freeBuffers=new Map},e}();n.createGpuDataManager=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return new(p.bind.apply(p,c([void 0],i(e),!1)))}},510:function(e,n,t){\\\"use strict\\\";var r=this&&this.__createBinding||(Object.create?function(e,n,t,r){void 0===r&&(r=t);var a=Object.getOwnPropertyDescriptor(n,t);a&&!(\\\"get\\\"in a?!n.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return n[t]}}),Object.defineProperty(e,r,a)}:function(e,n,t,r){void 0===r&&(r=t),e[r]=n[t]}),a=this&&this.__setModuleDefault||(Object.create?function(e,n){Object.defineProperty(e,\\\"default\\\",{enumerable:!0,value:n})}:function(e,n){e.default=n}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)\\\"default\\\"!==t&&Object.prototype.hasOwnProperty.call(e,t)&&r(n,e,t);return a(n,e),n};Object.defineProperty(n,\\\"__esModule\\\",{value:!0}),n.WEBGPU_OP_RESOLVE_RULES=void 0;var i=o(t(504)),c=t(513),u=t(770),s=t(640),l=t(856),f=t(271),p=t(522),d=o(t(262)),h=t(31),g=t(101),v=t(67),m=t(625),y=o(t(302));n.WEBGPU_OP_RESOLVE_RULES=new Map([[\\\"Abs\\\",[y.abs]],[\\\"Acos\\\",[y.acos]],[\\\"Acosh\\\",[y.acosh]],[\\\"Add\\\",[i.add]],[\\\"Asin\\\",[y.asin]],[\\\"Asinh\\\",[y.asinh]],[\\\"Atan\\\",[y.atan]],[\\\"Atanh\\\",[y.atanh]],[\\\"AveragePool\\\",[d.averagePool,d.parseAveragePoolAttributes]],[\\\"Ceil\\\",[y.ceil]],[\\\"ClipV10\\\",[y.clipV10]],[\\\"Clip\\\",[y.clip]],[\\\"Concat\\\",[c.concat,c.parseConcatAttributes]],[\\\"Conv\\\",[u.conv,u.parseConvAttributes]],[\\\"ConvTranspose\\\",[s.convTranspose,s.parseConvTransposeAttributes]],[\\\"Cos\\\",[y.cos]],[\\\"Cosh\\\",[y.cosh]],[\\\"Div\\\",[i.div]],[\\\"Elu\\\",[y.elu,y.parseAlphaAttributes]],[\\\"Erf\\\",[y.erf]],[\\\"Exp\\\",[y.exp]],[\\\"Expand\\\",[l.expand]],[\\\"Floor\\\",[y.floor]],[\\\"Gemm\\\",[f.gemm,f.parseGemmAttributes]],[\\\"GlobalAveragePool\\\",[d.globalAveragePool,d.parseGlobalAveragePoolAttributes]],[\\\"GlobalMaxPool\\\",[d.globalMaxPool,d.parseGlobalMaxPoolAttributes]],[\\\"LeakyRelu\\\",[y.leakyRelu,y.parseAlphaAttributes]],[\\\"MatMul\\\",[p.matMul]],[\\\"MaxPool\\\",[d.maxPool,d.parseMaxPoolAttributes]],[\\\"Mul\\\",[i.mul]],[\\\"Neg\\\",[y.neg]],[\\\"Pow\\\",[i.pow]],[\\\"Reciprocal\\\",[y.reciprocal]],[\\\"ReduceMin\\\",[h.reduceMin,h.parseReduceAttributes]],[\\\"ReduceMean\\\",[h.reduceMean,h.parseReduceAttributes]],[\\\"ReduceMax\\\",[h.reduceMax,h.parseReduceAttributes]],[\\\"ReduceSum\\\",[h.reduceSum,h.parseReduceAttributes]],[\\\"ReduceProd\\\",[h.reduceProd,h.parseReduceAttributes]],[\\\"ReduceL1\\\",[h.reduceL1,h.parseReduceAttributes]],[\\\"ReduceL2\\\",[h.reduceL2,h.parseReduceAttributes]],[\\\"ReduceLogSum\\\",[h.reduceLogSum,h.parseReduceAttributes]],[\\\"ReduceLogSumExp\\\",[h.reduceLogSumExp,h.parseReduceAttributes]],[\\\"ReduceSumSquare\\\",[h.reduceSumSquare,h.parseReduceAttributes]],[\\\"Relu\\\",[y.relu]],[\\\"Sigmoid\\\",[y.sigmoid]],[\\\"Sin\\\",[y.sin]],[\\\"Sinh\\\",[y.sinh]],[\\\"Slice\\\",[g.slice,g.parseSliceAttributes]],[\\\"Split\\\",[v.split,v.parseSplitAttributes]],[\\\"Sqrt\\\",[y.sqrt]],[\\\"Sub\\\",[i.sub]],[\\\"Tan\\\",[y.tan]],[\\\"Tanh\\\",[y.tanh]],[\\\"ThresholdedRelu\\\",[y.thresholdedRelu,y.parseAlphaAttributes]],[\\\"Transpose\\\",[m.transpose,m.parseTransposeAttributes]]])},427:function(e,n){\\\"use strict\\\";Object.defineProperty(n,\\\"__esModule\\\",{value:!0}),n.biasActivationSnippet=n.activationFnSnippet=n.typeSnippet=void 0,n.typeSnippet=function(e){switch(e){case 1:return\\\"f32\\\";case 2:return\\\"vec2<f32>\\\";case 3:return\\\"vec3<f32>\\\";case 4:return\\\"vec4<f32>\\\";default:throw new Error(\\\"\\\".concat(e,\\\"-component is not supported.\\\"))}},n.activationFnSnippet=function(e,n,t,r){return void 0===n&&(n=!1),void 0===t&&(t=!1),void 0===r&&(r=3),\\\"\\\"},n.biasActivationSnippet=function(e,n){return\\\"\\\\n      \\\".concat(e?\\\"value = value + getBiasByOutputCoords(coords);\\\":\\\"\\\",\\\"\\\\n      \\\").concat(n?\\\"value = activation(value, coords);\\\":\\\"\\\",\\\"\\\\n      \\\")}},456:function(e,n,t){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var a in n=arguments[t])Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a]);return e},r.apply(this,arguments)};Object.defineProperty(n,\\\"__esModule\\\",{value:!0}),n.createConv2DMatMulProgramInfo=void 0;var a=t(955),o=t(952),i=t(163),c=t(427),u=t(85),s=t(158);n.createConv2DMatMulProgramInfo=function(e,n,t,l,f,p,d,h,g){var v=\\\"NHWC\\\"===t.format,m=v?e[0].dims[3]:e[0].dims[1],y=l[0],b=v?l[2]:l[3],w=v?l[1]:l[2],_=v?l[3]:l[1],S=((m%4==0||m%3==0)&&v||b%4==0&&!v)&&_%4==0,A=v?_:b*w,C=v?b*w:_,x=S?[8,8,1]:[A<=4?4:16,A>4&&C<=4?4:16,1],T=S?[4,4,1]:[A<=4?1:2,A>4&&C<=4?1:2,1],P=[Math.ceil(A/x[0]/T[0]),Math.ceil(C/x[1]/T[1]),Math.ceil(y/x[2]/T[1])];(0,a.LOG_DEBUG)(\\\"verbose\\\",(function(){return\\\"[conv2d_mm_webgpu] dispatch = \\\".concat(P)}));var E=S?v&&m%4!=0?3:4:T[0],O=x[1]*T[1],I=x[0]*T[0],k=Math.max(x[0]*E,x[1]),R=f%O==0,D=p%I==0,M=d%k==0,U=S?[E,4,4]:[1,1,1],W=[\\\"@group(0) @binding(0) var<storage, read> x: array<\\\".concat(S&&4===E?\\\"vec4<f32>\\\":\\\"f32\\\",\\\">;\\\"),\\\"@group(0) @binding(1) var<storage, read> w: array<\\\".concat(S?\\\"vec4<f32>\\\":\\\"f32\\\",\\\">;\\\")],j=\\\"\\\\n      fn setOutputAtIndex(flatIndex : i32, value : \\\".concat(S?\\\"vec4<f32>\\\":\\\"f32\\\",\\\") {\\\\n        result[flatIndex] = \\\").concat(S?\\\"vec4<f32>\\\":\\\"f32\\\",\\\"(value);\\\\n      }\\\\n      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : \\\").concat(S?\\\"vec4<f32>\\\":\\\"f32\\\",\\\") {\\\\n        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));\\\\n        setOutputAtIndex(flatIndex \\\").concat(S?\\\"/ 4\\\":\\\"\\\",\\\", value);\\\\n      }\\\");return h&&(W.push(\\\"@group(0) @binding(2) var<storage, read> bias: array<\\\".concat(S?\\\"vec4<f32>\\\":\\\"f32\\\",\\\">;\\\")),j+=\\\"\\\\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> \\\".concat(S?\\\"vec4<f32>\\\":\\\"f32\\\",\\\" {\\\\n          return bias[coords.\\\").concat(v?\\\"w\\\":\\\"y\\\").concat(S?\\\"/ 4\\\":\\\"\\\",\\\"];\\\\n        }\\\")),r(r({},n),{outputs:[{dims:l,dataType:e[0].dataType,gpuDataType:i.GpuDataType.default}],dispatchGroup:function(){return{x:P[0],y:P[1],z:P[2]}},getShaderSource:function(){return\\\"\\\\n        \\\".concat(u.utilFunctions,\\\"\\\\n        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,\\\\n        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,\\\\n        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };\\\\n        \\\").concat(W.join(\\\"\\\"),\\\"\\\\n        @group(0) @binding(\\\").concat(W.length,\\\") var<storage, read_write> result: array<\\\").concat(S?\\\"vec4<f32>\\\":\\\"f32\\\",\\\">;\\\\n        //@group(0) @binding(\\\").concat(W.length+1,\\\") var<uniform> uniforms: Uniforms;\\\\n\\\\n        const xShape : vec4<i32> = vec4<i32>(\\\").concat(e[0].dims.join(\\\",\\\"),\\\");\\\\n        const wShape : vec4<i32> = vec4<i32>(\\\").concat(e[1].dims.join(\\\",\\\"),\\\");\\\\n        const outShape : vec4<i32> = vec4<i32>(\\\").concat(l.join(\\\",\\\"),\\\");\\\\n        const outShapeStrides : vec3<i32> = vec3<i32>(\\\").concat(o.ShapeUtil.computeStrides(l).slice(0,3).join(\\\",\\\"),\\\");\\\\n        const filterDims : vec2<i32> = vec2<i32>(\\\").concat(t.kernelShape[0],\\\", \\\").concat(t.kernelShape[1],\\\");\\\\n        const pad : vec2<i32> = vec2<i32>(\\\").concat(t.pads[0],\\\", \\\").concat(t.pads[1],\\\");\\\\n        const stride : vec2<i32> = vec2<i32>(\\\").concat(t.strides[0],\\\", \\\").concat(t.strides[1],\\\");\\\\n        const dilation : vec2<i32> = vec2<i32>(\\\").concat(t.dilations[0],\\\", \\\").concat(t.dilations[1],\\\");\\\\n        const dimAOuter : i32 = \\\").concat(f,\\\";\\\\n        const dimBOuter : i32 = \\\").concat(p,\\\";\\\\n        const dimInner : i32 = \\\").concat(d,\\\";\\\\n        \\\").concat(j,\\\"\\\\n        \\\").concat(function(e,n,t,r,a,o,i,u,s,l){void 0===a&&(a=!1),void 0===i&&(i=!1),void 0===u&&(u=4),void 0===s&&(s=4),void 0===l&&(l=4);var f=e?\\\"\\\\n    let coord = vec4<i32>(batch, xRow, xCol, xCh);\\\\n    \\\":\\\"\\\\n    let coord = vec4<i32>(batch, xCh, xRow, xCol);\\\\n    \\\",p=e?\\\"\\\\n    let coords = vec4<i32>(\\\\n      batch,\\\\n      row / outWidth,\\\\n      row % outWidth,\\\\n      col);\\\\n    \\\":\\\"\\\\n    let coords = vec4<i32>(\\\\n      batch,\\\\n      row,\\\\n      col / outWidth,\\\\n      col % outWidth);\\\\n    \\\",d=e?\\\"xShape[1]\\\":\\\"xShape[2]\\\",h=e?\\\"xShape[2]\\\":\\\"xShape[3]\\\",g=e?\\\"row\\\":\\\"col\\\",v=e?\\\"col\\\":\\\"row\\\",m=\\\"\\\\n    let inChannels = wShape[2];\\\\n    let outWidth = \\\".concat(e?\\\"outShape[2]\\\":\\\"outShape[3]\\\",\\\";\\\\n    let outRow = \\\").concat(g,\\\" / outWidth;\\\\n    let outCol = \\\").concat(g,\\\" % outWidth;\\\\n\\\\n    let WRow = \\\").concat(v,\\\" / (filterDims[1] * inChannels);\\\\n    let WCol = \\\").concat(v,\\\" / inChannels % filterDims[1];\\\\n    let xRow = outRow * stride[0] + dilation[0] * WRow - pad[0];\\\\n    let xCol = outCol * stride[1] + dilation[1] * WCol - pad[1];\\\\n    let xCh = \\\").concat(v,\\\" % inChannels;\\\\n    var resData = \\\").concat((0,c.typeSnippet)(u),\\\"(0.0);\\\\n    // The bounds checking is always needed since we use it to pad zero for\\\\n    // the 'same' padding type.\\\\n    if (xRow >= 0 && xRow < \\\").concat(d,\\\" && xCol >= 0 && xCol < \\\").concat(h,\\\") {\\\\n      \\\").concat(f,\\\"\\\\n      let xIndex = getIndexFromCoords4D(coord, xShape);\\\\n      \\\").concat(function(e){switch(e){case 1:return\\\"resData = x[xIndex];\\\";case 3:return\\\"resData = vec3<f32>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);\\\";case 4:return\\\"resData = x[xIndex / 4];\\\";default:throw new Error(\\\"innerElementSize \\\".concat(e,\\\" is not supported.\\\"))}}(u),\\\"\\\\n    }\\\\n    return resData;\\\"),y=e?n&&r?\\\"\\\\n    let col = colIn * \\\".concat(u,\\\";\\\\n    \\\").concat(m):\\\"\\\\n    let col = colIn * \\\".concat(u,\\\";\\\\n    if (row < dimAOuter && col < dimInner) {\\\\n      \\\").concat(m,\\\"\\\\n    }\\\\n    return \\\").concat((0,c.typeSnippet)(u),\\\"(0.0);\\\"):r&&t?\\\"\\\\n    let col = colIn * \\\".concat(u,\\\";\\\\n    \\\").concat(m):\\\"\\\\n    let col = colIn * \\\".concat(u,\\\";\\\\n    if (row < dimInner && col < dimBOuter) {\\\\n      \\\").concat(m,\\\"\\\\n    }\\\\n    return \\\").concat((0,c.typeSnippet)(u),\\\"(0.0);\\\"),b=\\\"\\\".concat(function(e){switch(e){case 1:return\\\"return w[row * wShape[3] + colIn];\\\";case 4:return\\\"return w[row * wShape[3] / 4 + colIn];\\\";default:throw new Error(\\\"innerElementSize \\\".concat(e,\\\" is not supported.\\\"))}}(s)),w=(0,c.typeSnippet)(l),_=e?(0,c.typeSnippet)(u):(0,c.typeSnippet)(s),S=e?(0,c.typeSnippet)(s):(0,c.typeSnippet)(u);return\\\"\\\\n    \\\".concat((0,c.activationFnSnippet)(o,i,4===l,4),\\\"\\\\n    fn mm_readA(batch: i32, row : i32, colIn : i32) -> \\\").concat(_,\\\" {\\\\n      \\\").concat(e?y:b,\\\"\\\\n    }\\\\n\\\\n    fn mm_readB(batch: i32, row : i32, colIn : i32) -> \\\").concat(S,\\\" {\\\\n      \\\").concat(e?b:y,\\\"\\\\n    }\\\\n\\\\n    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : \\\").concat(w,\\\") {\\\\n      let col = colIn * \\\").concat(l,\\\";\\\\n      if (row < dimAOuter && col < dimBOuter)\\\\n      {\\\\n      var value = valueIn;\\\\n      let outWidth = \\\").concat(e?\\\"outShape[2]\\\":\\\"outShape[3]\\\",\\\";\\\\n      \\\").concat(p,\\\"\\\\n      \\\").concat((0,c.biasActivationSnippet)(a,o),\\\"\\\\n      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\\\\n      }\\\\n    }\\\")}(v,R,D,M,h,void 0,!1,U[0],U[1],U[2]),\\\"\\\\n            \\\").concat(S?(0,s.makeMatMulPackedVec4Source)(T,x,!v,k):(0,s.makeMatMulPackedSource)(T,x,!v,k,!1,void 0,g))}})}},514:function(e,n,t){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var a in n=arguments[t])Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a]);return e},r.apply(this,arguments)};Object.defineProperty(n,\\\"__esModule\\\",{value:!0}),n.createConvTranspose2DProgramInfo=void 0;var a=t(955),o=t(952),i=t(163),c=t(75);n.createConvTranspose2DProgramInfo=function(e,n,t,u){var s=e.length>2,l=\\\"NHWC\\\"===t.format,f=t.outputShape,p=f[0],d=f[l?1:2],h=f[l?2:3],g=f[l?3:1],v=e[0].dims[l?3:1]%4==0&&g%4==0,m=l?g:d*h,y=l?d*h:g,b=v?[8,8,1]:[m<=4?4:16,m>4&&y<=4?4:16,1],w=v?[4,4,1]:[m<=4?1:2,m>4&&y<=4?1:2,1],_=[Math.ceil(m/b[0]/w[0]),Math.ceil(y/b[1]/w[1]),Math.ceil(p/b[2]/w[1])];return(0,a.LOG_DEBUG)(\\\"verbose\\\",(function(){return\\\"[conv2d_backprop_webgpu] dispatch = \\\".concat(_)})),r(r({},n),{outputs:[{dims:u?u(f):f,dataType:e[0].dataType,gpuDataType:i.GpuDataType.default}],dispatchGroup:function(){return{x:_[0],y:_[1],z:_[2]}},getShaderSource:function(n){return function(e,n,t,r,a,i){var u=\\\"NHWC\\\"===t.format,s=u?1:2,l=u?2:3,f=u?3:1,p=o.ShapeUtil.size(r),d=r[u?3:1],h=n[0].dims[u?3:1],g=h%4==0&&d%4==0,v=g?2:1,m=[\\\"@group(0) @binding(0) var<storage, read> Dy: array<\\\".concat(g&&4===(g?u&&h%4!=0?3:4:i[0])?\\\"vec4<f32>\\\":\\\"f32\\\",\\\">;\\\"),\\\"@group(0) @binding(1) var<storage, read> W: array<\\\".concat(g?\\\"vec4<f32>\\\":\\\"f32\\\",\\\">;\\\")],y=\\\"\\\\n  fn setOutputAtIndex(flatIndex : u32, value : \\\".concat(g?\\\"vec4<f32>\\\":\\\"f32\\\",\\\") {\\\\n    result[flatIndex] = \\\").concat(g?\\\"vec4<f32>\\\":\\\"f32\\\",\\\"(value);\\\\n  }\\\");a&&(m.push(\\\"@group(0) @binding(2) var<storage, read> bias: array<\\\".concat(g?\\\"vec4<f32>\\\":\\\"f32\\\",\\\">;\\\")),y+=\\\"\\\\n    fn getBiasByOutputCoords(coords : vec4<u32>) -> \\\".concat(g?\\\"vec4<f32>\\\":\\\"f32\\\",\\\" {\\\\n      return bias[coords.\\\").concat(u?\\\"w\\\":\\\"y\\\").concat(g?\\\"/ 4\\\":\\\"\\\",\\\"];\\\\n    }\\\"));var b=(0,c.createIndicesHelper)(\\\"W\\\",n[1].dims),w=(0,c.createIndicesHelper)(\\\"Dy\\\",n[0].dims),_=(0,c.createIndicesHelper)(\\\"result\\\",r),S=\\\"{\\\\n        let batch: u32 = global_id.z / outShape[1];\\\\n        let r = global_id.z % outShape[1];\\\\n        let c = global_id.y * \\\".concat(v,\\\";\\\\n        let d1: u32 = global_id.x * 4;\\\\n\\\\n        let dyCorner = vec2<i32>(i32(r), i32(c)) - vec2<i32>(pads);\\\\n\\\\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\\\\n        // ? = to be determined. : = across all values in that axis.\\\\n        var dotProd: array<vec4<f32>, \\\").concat(v,\\\">;\\\\n        for (var i = 0; i < \\\").concat(v,\\\"; i++) {\\\\n          dotProd[i] = vec4<f32>(0.0);\\\\n        }\\\\n        for (var wR: u32 = 0; wR < filterDims[0]; wR = wR + 1) {\\\\n          var dyR = f32(dyCorner.x + wR) / f32(strides.x);\\\\n          let wRPerm: u32= filterDims[0] - 1 - wR;\\\\n          if (dyR < 0.0 || dyR >= f32(outBackprop[1]) ||\\\\n              fract(dyR) > 0.0) {\\\\n            continue;\\\\n          }\\\\n          let idyR: u32 = u32(dyR);\\\\n\\\\n          for (var wC: u32 = 0; wC < filterDims[1]; wC = wC + 1) {\\\\n            let dyC = f32(dyCorner.y + wC) / f32(strides.y);\\\\n            let dyC2 = f32(dyCorner.y + 1 + wC) / f32(strides.y);\\\\n            let wCPerm: u32 = filterDims[1] - 1 - wC;\\\\n            var bDyCVal = true;\\\\n            var bDyCVal2 = true;\\\\n            if (dyC < 0.0 || dyC >= f32(outBackprop[2]) ||\\\\n                fract(dyC) > 0.0) {\\\\n              bDyCVal = false;\\\\n            }\\\\n            if (dyC2 < 0.0 || dyC2 >= f32(outBackprop[2]) ||\\\\n                fract(dyC2) > 0.0) {\\\\n              bDyCVal2 = false;\\\\n            }\\\\n\\\\n            let idyC: u32 = u32(dyC);\\\\n            let idyC2: u32 = u32(dyC2);\\\\n            if (bDyCVal && bDyCVal2) {\\\\n              let d2Length = outBackprop[3];\\\\n              for (var d2 :u32 = 0; d2 < d2Length; d2 = d2 + 4) {\\\\n                \\\").concat(b.indicesVariableDeclaration(\\\"wIndices0\\\",[\\\"d2\\\",\\\"d1\\\",\\\"wRPerm\\\",\\\"wCPerm\\\"]),\\\";\\\\n                \\\").concat(b.indicesVariableDeclaration(\\\"wIndices1\\\",[\\\"d2\\\",\\\"d1+1\\\",\\\"wRPerm\\\",\\\"wCPerm\\\"]),\\\";\\\\n                \\\").concat(b.indicesVariableDeclaration(\\\"wIndices2\\\",[\\\"d2\\\",\\\"d1+2\\\",\\\"wRPerm\\\",\\\"wCPerm\\\"]),\\\";\\\\n                \\\").concat(b.indicesVariableDeclaration(\\\"wIndices3\\\",[\\\"d2\\\",\\\"d1+3\\\",\\\"wRPerm\\\",\\\"wCPerm\\\"]),\\\";\\\\n                let wValue0 = W[\\\").concat(b.i2oExpression(\\\"wIndices0\\\"),\\\"];\\\\n                let wValue1 = W[\\\").concat(b.i2oExpression(\\\"wIndices1\\\"),\\\"];\\\\n                let wValue2 = W[\\\").concat(b.i2oExpression(\\\"wIndices2\\\"),\\\"];\\\\n                let wValue3 = W[\\\").concat(b.i2oExpression(\\\"wIndices3\\\"),\\\"];\\\\n                \\\").concat(w.indicesVariableDeclaration(\\\"dyIndices\\\",u?[\\\"batch\\\",\\\"idyR\\\",\\\"idyC\\\",\\\"d2\\\"]:[\\\"batch\\\",\\\"d2\\\",\\\"idyR\\\",\\\"idyC\\\"]),\\\";\\\\n                var xValue =  Dy[\\\").concat(w.i2oExpression(\\\"dyIndices\\\"),\\\"];\\\\n                let tmpval = vec4<f32>(xValue * wValue0,\\\\n                                      xValue * wValue1,\\\\n                                      xValue * wValue2,\\\\n                                      xValue * wValue3);\\\\n                dotProd[0] = dotProd[0] + tmpval;\\\\n\\\\n                \\\").concat(w.indicesVariableDeclaration(\\\"dyIndices2\\\",u?[\\\"batch\\\",\\\"idyR\\\",\\\"idyC2\\\",\\\"d2\\\"]:[\\\"batch\\\",\\\"d2\\\",\\\"idyR\\\",\\\"idyC2\\\"]),\\\";\\\\n                xValue =  Dy[\\\").concat(w.i2oExpression(\\\"dyIndices\\\"),\\\"];\\\\n\\\\n                dotProd[1] = dotProd[1] + vec4<f32>(xValue * wValue0,\\\\n                                                    xValue * wValue1,\\\\n                                                    xValue * wValue2,\\\\n                                                    xValue * wValue3);\\\\n              }\\\\n            } else if (bDyCVal) {\\\\n              let d2Length = outBackprop[3];\\\\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\\\\n                \\\").concat(b.indicesVariableDeclaration(\\\"wIndices0\\\",[\\\"d2\\\",\\\"d1\\\",\\\"wRPerm\\\",\\\"wCPerm\\\"]),\\\";\\\\n                \\\").concat(b.indicesVariableDeclaration(\\\"wIndices1\\\",[\\\"d2\\\",\\\"d1+1\\\",\\\"wRPerm\\\",\\\"wCPerm\\\"]),\\\";\\\\n                \\\").concat(b.indicesVariableDeclaration(\\\"wIndices2\\\",[\\\"d2\\\",\\\"d1+2\\\",\\\"wRPerm\\\",\\\"wCPerm\\\"]),\\\";\\\\n                \\\").concat(b.indicesVariableDeclaration(\\\"wIndices3\\\",[\\\"d2\\\",\\\"d1+3\\\",\\\"wRPerm\\\",\\\"wCPerm\\\"]),\\\";\\\\n                let wValue0 = W[\\\").concat(b.i2oExpression(\\\"wIndices0\\\"),\\\"];\\\\n                let wValue1 = W[\\\").concat(b.i2oExpression(\\\"wIndices1\\\"),\\\"];\\\\n                let wValue2 = W[\\\").concat(b.i2oExpression(\\\"wIndices2\\\"),\\\"];\\\\n                let wValue3 = W[\\\").concat(b.i2oExpression(\\\"wIndices3\\\"),\\\"];\\\\n                \\\").concat(w.indicesVariableDeclaration(\\\"dyIndices\\\",u?[\\\"batch\\\",\\\"idyR\\\",\\\"idyC\\\",\\\"d2\\\"]:[\\\"batch\\\",\\\"d2\\\",\\\"idyR\\\",\\\"idyC\\\"]),\\\";\\\\n                var xValue =  Dy[\\\").concat(w.i2oExpression(\\\"dyIndices\\\"),\\\"];\\\\n                let tmpval = vec4<f32>(xValue * wValue0,\\\\n                                      xValue * wValue1,\\\\n                                      xValue * wValue2,\\\\n                                      xValue * wValue3);\\\\n                dotProd[0] = dotProd[0] + tmpval;\\\\n              }\\\\n            } else if (bDyCVal2) {\\\\n              let d2Length = outBackprop[3];\\\\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\\\\n                \\\").concat(b.indicesVariableDeclaration(\\\"wIndices0\\\",[\\\"d2\\\",\\\"d1\\\",\\\"wRPerm\\\",\\\"wCPerm\\\"]),\\\";\\\\n                \\\").concat(b.indicesVariableDeclaration(\\\"wIndices1\\\",[\\\"d2\\\",\\\"d1+1\\\",\\\"wRPerm\\\",\\\"wCPerm\\\"]),\\\";\\\\n                \\\").concat(b.indicesVariableDeclaration(\\\"wIndices2\\\",[\\\"d2\\\",\\\"d1+2\\\",\\\"wRPerm\\\",\\\"wCPerm\\\"]),\\\";\\\\n                \\\").concat(b.indicesVariableDeclaration(\\\"wIndices3\\\",[\\\"d2\\\",\\\"d1+3\\\",\\\"wRPerm\\\",\\\"wCPerm\\\"]),\\\";\\\\n                let wValue0 = W[\\\").concat(b.i2oExpression(\\\"wIndices0\\\"),\\\"];\\\\n                let wValue1 = W[\\\").concat(b.i2oExpression(\\\"wIndices1\\\"),\\\"];\\\\n                let wValue2 = W[\\\").concat(b.i2oExpression(\\\"wIndices2\\\"),\\\"];\\\\n                let wValue3 = W[\\\").concat(b.i2oExpression(\\\"wIndices3\\\"),\\\"];\\\\n                \\\").concat(w.indicesVariableDeclaration(\\\"dyIndices\\\",u?[\\\"batch\\\",\\\"idyR\\\",\\\"idyC\\\",\\\"d2\\\"]:[\\\"batch\\\",\\\"d2\\\",\\\"idyR\\\",\\\"idyC\\\"]),\\\";\\\\n                var xValue =  Dy[\\\").concat(w.i2oExpression(\\\"dyIndices\\\"),\\\"];\\\\n                let tmpval = vec4<f32>(xValue * wValue0,\\\\n                                      xValue * wValue1,\\\\n                                      xValue * wValue2,\\\\n                                      xValue * wValue3);\\\\n                dotProd[1] = dotProd[1] + tmpval;\\\\n              }\\\\n            }\\\\n          }\\\\n        }\\\\n\\\\n        for (var i: u32 = 0; i < \\\").concat(v,\\\"; i = i + 1) {\\\\n          \\\").concat(_.indicesVariableDeclaration(\\\"outputIndices\\\",[\\\"batch\\\",\\\"r\\\",\\\"c+i\\\",\\\"d1\\\"]),\\\";\\\\n          result[\\\").concat(_.i2oExpression(\\\"outputIndices\\\"),\\\"] = dotProd[i];\\\\n        }\\\\n      }\\\"),A=\\\"\\\\n          \\\".concat(_.o2iCall(\\\"global_idx\\\",\\\"outputIndices\\\"),\\\"\\\\n          let batch = outputIndices[0];\\\\n          let d1 = outputIndices[\\\").concat(f,\\\"];\\\\n          let dyCorner = vec2<i32>(i32(outputIndices[\\\").concat(s,\\\"]), i32(outputIndices[\\\").concat(l,\\\"])) - pads;\\\\n          let dyRCorner = dyCorner.x;\\\\n          let dyCCorner = dyCorner.y;\\\\n          // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\\\\n          // ? = to be determined. : = across all values in that axis.\\\\n          var dotProd = 0.0;\\\\n          for (var wR: u32 = 0; wR < effectiveFilterDims.x; wR = wR + 1) {\\\\n            if (wR % dilations.x != 0) {\\\\n              continue;\\\\n            }\\\\n            let dyR = (f32(dyRCorner) + f32(wR)) / f32(strides[0]);\\\\n            let wRPerm = filterDims.x - 1 - wR / dilations.x;\\\\n            if (dyR < 0.0 || dyR >= f32(outBackprop[1]) || fract(dyR) > 0.0 ||\\\\n                wRPerm < 0) {\\\\n              continue;\\\\n            }\\\\n            let idyR: u32 = u32(dyR);\\\\n\\\\n            for (var wC: u32 = 0; wC < effectiveFilterDims.y; wC = wC + 1) {\\\\n              if (wC % dilations.y != 0) {\\\\n                continue;\\\\n              }\\\\n              let dyC = (f32(dyCCorner) + f32(wC)) / f32(strides.y);\\\\n              let wCPerm = filterDims.y - 1 - wC / dilations.y;\\\\n              if (dyC < 0.0 || dyC >= f32(outBackprop[2]) ||\\\\n                  fract(dyC) > 0.0 || wCPerm < 0) {\\\\n                continue;\\\\n              }\\\\n              let idyC: u32 = u32(dyC);\\\\n\\\\n              for (var d2: u32 = 0; d2 < outBackprop[3]; d2 = d2 + 1) {\\\\n                \\\").concat(w.indicesVariableDeclaration(\\\"dyIndices\\\",u?[\\\"batch\\\",\\\"idyR\\\",\\\"idyC\\\",\\\"d2\\\"]:[\\\"batch\\\",\\\"d2\\\",\\\"idyR\\\",\\\"idyC\\\"]),\\\";\\\\n                let xValue =  Dy[\\\").concat(w.i2oExpression(\\\"dyIndices\\\"),\\\"];\\\\n                  \\\").concat(b.indicesVariableDeclaration(\\\"wIndices\\\",[\\\"d2\\\",\\\"d1\\\",\\\"wRPerm\\\",\\\"wCPerm\\\"]),\\\";\\\\n\\\\n                let wValue = W[\\\").concat(b.i2oExpression(\\\"wIndices\\\"),\\\"];\\\\n                dotProd = dotProd + xValue * wValue;\\\\n              }\\\\n            }\\\\n          }\\\\n          result[global_idx] = dotProd;\\\\n        \\\");return\\\"\\\\n\\\".concat(b.i2oImpl,\\\"\\\\n  \\\").concat(w.i2oImpl,\\\"\\\\n  \\\").concat(_.o2iImpl,\\\"\\\\n  \\\").concat(y,\\\"\\\\n  \\\").concat(m.join(\\\"\\\\n\\\"),\\\"\\\\n  @group(0) @binding(\\\").concat(m.length,\\\") var<storage, read_write> result: array<\\\").concat(g?\\\"vec4<f32>\\\":\\\"f32\\\",\\\">;\\\\n  const outShape : vec4<u32> = vec4<u32>(\\\").concat(r.join(\\\",\\\"),\\\");\\\\n  const outBackprop : vec4<u32> = vec4<u32>(\\\").concat(n[0].dims.join(\\\",\\\"),\\\");\\\\n  const strides : vec2<u32> = vec2<u32>(\\\").concat(t.strides[0],\\\", \\\").concat(t.strides[1],\\\");\\\\n  const filterDims : vec2<u32> = vec2<u32>(\\\").concat(t.kernelShape[u?1:2],\\\", \\\").concat(t.kernelShape[u?2:3],\\\");\\\\n  const dilations : vec2<u32> = vec2<u32>(\\\").concat(t.dilations[0],\\\", \\\").concat(t.dilations[1],\\\");\\\\n  const effectiveFilterDims : vec2<u32> = filterDims + vec2<u32>(\\\\n          \\\").concat(t.dilations[0]<=1?0:(t.kernelShape[u?1:2]-1)*(t.dilations[0]-1),\\\",\\\\n          \\\").concat(t.dilations[1]<=1?0:(t.kernelShape[u?2:3]-1)*(t.dilations[1]-1),\\\");\\\\n  const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (\\\").concat(t.pads[0]+t.pads[2],\\\")/2,\\\\n                                     i32(effectiveFilterDims[1]) - 1 - (\\\").concat(t.pads[1]+t.pads[3],\\\")/2);\\\\n    \\\").concat(e.mainStart(),\\\"\\\\n    \\\").concat(_.indicesVariableDeclaration(\\\"outputIndices\\\"),\\\"\\\\n    \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(p),\\\";\\\\n  \\\").concat(g?S:A,\\\"}\\\")}(n,e,t,f,s,w)}})}},85:function(e,n){\\\"use strict\\\";Object.defineProperty(n,\\\"__esModule\\\",{value:!0}),n.utilFunctions=void 0,n.utilFunctions=\\\"\\\\nfn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\\\\n  return dot(coords, vec4<i32>(\\\\n      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\\\\n}\\\\nfn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\\\\n  return dot(coords, vec4<i32>(\\\\n    outShapeStrides.x, outShapeStrides.y, outShapeStrides.z, 1));\\\\n}\\\\n\\\"},158:function(e,n){\\\"use strict\\\";Object.defineProperty(n,\\\"__esModule\\\",{value:!0}),n.makeMatMulPackedSource=n.makeMatMulPackedVec4Source=void 0,n.makeMatMulPackedVec4Source=function(e,n,t,r,a,o,i){void 0===t&&(t=!1),void 0===r&&(r=32),void 0===a&&(a=!1),void 0===o&&(o=32),void 0===i&&(i=!1);var c,u=n[1]*e[1],s=n[0]*e[0],l=t?u:r,f=t?r:u,p=l/n[0],d=r/n[1];if((!t||4!==p||4!==e[1])&&(t||3!==p&&4!==p)||l%n[0]!=0||r%n[1]!=0||4!==e[0])throw new Error(\\\"If transposeA \\\".concat(t,\\\" is true, innerElementSize \\\").concat(p,\\\" and workPerThread[1] \\\").concat(e[1],\\\" must be 4.\\\\n      Otherwise, innerElementSize \\\").concat(p,\\\" must be 3 or 4.\\\\n  tileAWidth \\\").concat(l,\\\" must be divisible by workgroupSize[0]\\\").concat(n[0],\\\". tileInner \\\").concat(r,\\\" must be divisible by workgroupSize[1] \\\").concat(n[1],\\\". colPerThread \\\").concat(e[0],\\\" must be 4.\\\"));return\\\"\\\\nvar<workgroup> mm_Asub : array<array<vec\\\".concat(p,\\\"<f32>, \\\").concat(l/p,\\\">, \\\").concat(f,\\\">;\\\\nvar<workgroup> mm_Bsub : array<array<vec4<f32>, \\\").concat(s/e[0],\\\">, \\\").concat(r,\\\">;\\\\n\\\\nconst rowPerThread = \\\").concat(e[1],\\\";\\\\nconst colPerThread = \\\").concat(e[0],\\\";\\\\nconst innerElementSize = \\\").concat(p,\\\";\\\\nconst tileInner = \\\").concat(r,\\\";\\\\n\\\\n@compute @workgroup_size(\\\").concat(n[0],\\\", \\\").concat(n[1],\\\", \\\").concat(n[2],\\\")\\\\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\\\\n        @builtin(global_invocation_id) globalId : vec3<u32>,\\\\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\\\\n  let localRow = i32(localId.y);\\\\n  let tileRow = \\\").concat(i?\\\"0\\\":\\\"localRow * rowPerThread\\\",\\\";\\\\n  let tileCol = i32(localId.x);\\\\n\\\\n  let globalRow = \\\").concat(i?\\\"0\\\":\\\"i32(globalId.y) * rowPerThread\\\",\\\";\\\\n  let globalCol = i32(globalId.x);\\\\n  let batch = \\\").concat(a?\\\"0\\\":\\\"i32(globalId.z)\\\",\\\";\\\\n  let globalRowStart = i32(workgroupId.y) * \\\").concat(u,\\\";\\\\n\\\\n  let numTiles = \\\").concat(a?\\\"\\\".concat(Math.ceil(o/r)):\\\"(dimInner - 1) / tileInner + 1\\\",\\\";\\\\n  var kStart = \\\").concat(a?\\\"i32(globalId.z) * \\\".concat(o):\\\"0\\\",\\\";\\\\n\\\\n  var acc: array<vec4<f32>, rowPerThread>;\\\\n\\\\n  // Loop over shared dimension.\\\\n  let tileRowB = localRow * \\\").concat(d,\\\";\\\\n  for (var t = 0; t < numTiles; t = t + 1) {\\\\n      // Load one tile of A into local memory.\\\\n      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\\\n          let inputRow = tileRow + innerRow;\\\\n          let inputCol = tileCol;\\\\n          \\\").concat((c=t,c?\\\"\\\\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\\\\n          kStart + inputRow,\\\\n          globalRowStart / innerElementSize + inputCol);\\\\n        \\\":\\\"\\\\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\\\\n          globalRow + innerRow,\\\\n          kStart / innerElementSize + inputCol);\\\\n        \\\"),\\\"\\\\n      }\\\\n\\\\n      // Load one tile of B into local memory.\\\\n      for (var innerRow = 0; innerRow < \\\").concat(d,\\\"; innerRow = innerRow + 1) {\\\\n          let inputRow = tileRowB + innerRow;\\\\n          let inputCol = tileCol;\\\\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol);\\\\n      }\\\\n      kStart = kStart + tileInner;\\\\n      workgroupBarrier();\\\\n\\\\n      // Compute acc values for a single thread.\\\\n      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {\\\\n          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];\\\\n          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];\\\\n          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];\\\\n          \\\").concat(3===p?\\\"\\\":\\\"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];\\\",\\\"\\\\n\\\\n          \\\").concat(function(e,n){return e?\\\"\\\\n        let ACached0 = mm_Asub[k * innerElementSize][localRow];\\\\n        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];\\\\n        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];\\\\n        \\\".concat(3===n?\\\"\\\":\\\"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];\\\",\\\"\\\\n        for (var i = 0; i < rowPerThread; i = i + 1) {\\\\n          acc[i] = BCached0 * ACached0[i] + acc[i];\\\\n          acc[i] = BCached1 * ACached1[i] + acc[i];\\\\n          acc[i] = BCached2 * ACached2[i] + acc[i];\\\\n          \\\").concat(3===n?\\\"\\\":\\\"acc[i] = BCached3 * ACached3[i] + acc[i];\\\",\\\"\\\\n        }\\\"):\\\"\\\\n        for (var i = 0; i < rowPerThread; i = i + 1) {\\\\n          let ACached = mm_Asub[tileRow + i][k];\\\\n          acc[i] = BCached0 * ACached.x + acc[i];\\\\n          acc[i] = BCached1 * ACached.y + acc[i];\\\\n          acc[i] = BCached2 * ACached.z + acc[i];\\\\n          \\\".concat(3===n?\\\"\\\":\\\"acc[i] = BCached3 * ACached.w + acc[i];\\\",\\\"\\\\n        }\\\")}(t,p),\\\"\\\\n      }\\\\n\\\\n      workgroupBarrier();\\\\n  }\\\\n\\\\n  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\\\n      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\\\\n  }\\\\n}\\\")};var t=function(e){return e?\\\"\\\\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\\\\n              kStart + inputRow,\\\\n              globalRowStart + inputCol);\\\\n            \\\":\\\"\\\\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\\\\n              globalRowStart + inputRow,\\\\n              kStart + inputCol);\\\\n            \\\"};n.makeMatMulPackedSource=function(e,n,r,a,o,i,c){void 0===r&&(r=!1),void 0===a&&(a=32),void 0===o&&(o=!1),void 0===i&&(i=32),void 0===c&&(c=!1);var u=e[1]*n[1],s=e[0]*n[0],l=r?u:a,f=r?a:u;if(f%n[1]!=0||l%n[0]!=0||a%n[1]!=0)throw new Error(\\\"tileAHight \\\".concat(f,\\\" must be divisible by workgroupSize[1]\\\").concat(n[1],\\\", tileAWidth \\\").concat(l,\\\" must be divisible by workgroupSize[0]\\\").concat(n[0],\\\", tileInner \\\").concat(a,\\\" must be divisible by workgroupSize[1]\\\").concat(n[1]));var p=f/n[1],d=l/n[0],h=a/n[1],g=c?\\\"\\\\n    let localRow = i32(localId.y);\\\\n    let localCol = i32(localId.x);\\\\n    let globalRowStart = i32(workgroupId.y) * \\\".concat(u,\\\";\\\\n    let globalColStart = i32(workgroupId.x) * \\\").concat(s,\\\";\\\\n\\\\n    // Loop over shared dimension.\\\\n    for (var t = 0; t < numTiles; t = t + 1) {\\\\n      // Load one tile of A into local memory.\\\\n      for (var inputRow = localRow; inputRow < \\\").concat(f,\\\"; inputRow = inputRow + \\\").concat(n[1],\\\") {\\\\n        for (var inputCol = localCol; inputCol < \\\").concat(l,\\\"; inputCol = inputCol + \\\").concat(n[0],\\\") {\\\\n          \\\").concat(t(r),\\\"\\\\n        }\\\\n      }\\\\n      // Load one tile of B into local memory.\\\\n      for (var inputRow = localRow; inputRow < \\\").concat(a,\\\"; inputRow = inputRow + \\\").concat(n[1],\\\") {\\\\n            for (var inputCol = localCol; inputCol < \\\").concat(s,\\\"; inputCol = inputCol + \\\").concat(n[0],\\\") {\\\\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch,\\\\n            kStart + inputRow,\\\\n            globalColStart + inputCol);\\\\n        }\\\\n      }\\\\n      kStart = kStart + tileInner;\\\\n      workgroupBarrier();\\\\n\\\\n      // Compute acc values for a single thread.\\\\n      var BCached : array<f32, colPerThread>;\\\\n      for (var k = 0; k < tileInner; k = k + 1) {\\\\n        for (var inner = 0; inner < colPerThread; inner = inner + 1) {\\\\n          BCached[inner] = mm_Bsub[k][localCol + inner * \\\").concat(n[0],\\\"];\\\\n        }\\\\n        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\\\n          let ACached = \\\").concat(r?\\\"mm_Asub[k][localRow + innerRow * \\\".concat(n[1],\\\"];\\\"):\\\"mm_Asub[localRow + innerRow * \\\".concat(n[1],\\\"][k];\\\"),\\\"\\\\n          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\\\n            acc[innerRow][innerCol] = acc[innerRow][innerCol] +\\\\n                ACached * BCached[innerCol];\\\\n          }\\\\n        }\\\\n      }\\\\n      workgroupBarrier();\\\\n    }\\\\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\\\n      let gRow = globalRowStart + localRow + innerRow * \\\").concat(n[1],\\\";\\\\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\\\n        let gCol = globalColStart + localCol + innerCol * \\\").concat(n[0],\\\";\\\\n        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\\\\n      }\\\\n    }\\\\n    \\\"):\\\"\\\\nlet tileRow = i32(localId.y) * rowPerThread;\\\\nlet tileCol = i32(localId.x) * colPerThread;\\\\n\\\\nlet globalRow = i32(globalId.y) * rowPerThread;\\\\nlet globalCol = i32(globalId.x) * colPerThread;\\\\nlet globalRowStart = i32(workgroupId.y) * \\\".concat(u,\\\";\\\\n\\\\nlet tileRowA = i32(localId.y) * \\\").concat(p,\\\";\\\\nlet tileColA = i32(localId.x) * \\\").concat(d,\\\";\\\\nlet tileRowB = i32(localId.y) * \\\").concat(h,\\\";\\\\n// Loop over shared dimension.\\\\nfor (var t = 0; t < numTiles; t = t + 1) {\\\\n  // Load one tile of A into local memory.\\\\n  for (var innerRow = 0; innerRow < \\\").concat(p,\\\"; innerRow = innerRow + 1) {\\\\n    for (var innerCol = 0; innerCol < \\\").concat(d,\\\"; innerCol = innerCol + 1) {\\\\n      let inputRow = tileRowA + innerRow;\\\\n      let inputCol = tileColA + innerCol;\\\\n      \\\").concat(t(r),\\\"\\\\n    }\\\\n  }\\\\n\\\\n  // Load one tile of B into local memory.\\\\n  for (var innerRow = 0; innerRow < \\\").concat(h,\\\"; innerRow = innerRow + 1) {\\\\n    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\\\n      let inputRow = tileRowB + innerRow;\\\\n      let inputCol = tileCol + innerCol;\\\\n      mm_Bsub[inputRow][inputCol] = mm_readB(batch,\\\\n        kStart + inputRow,\\\\n        globalCol + innerCol);\\\\n    }\\\\n  }\\\\n  kStart = kStart + tileInner;\\\\n  workgroupBarrier();\\\\n\\\\n  // Compute acc values for a single thread.\\\\n  var BCached : array<f32, colPerThread>;\\\\n  for (var k = 0; k < tileInner; k = k + 1) {\\\\n    for (var inner = 0; inner < colPerThread; inner = inner + 1) {\\\\n      BCached[inner] = mm_Bsub[k][tileCol + inner];\\\\n    }\\\\n\\\\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\\\n      \\\").concat(function(e){return e?\\\"let ACached = mm_Asub[k][tileRow + innerRow];\\\":\\\"let ACached = mm_Asub[tileRow + innerRow][k];\\\"}(r),\\\"\\\\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\\\n        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];\\\\n      }\\\\n    }\\\\n  }\\\\n\\\\n  workgroupBarrier();\\\\n}\\\\n\\\\nfor (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\\\n  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\\\n    mm_write(batch, globalRow + innerRow, globalCol + innerCol,\\\\n        acc[innerRow][innerCol]);\\\\n  }\\\\n}\\\\n\\\");return\\\"\\\\n  var<workgroup> mm_Asub : array<array<f32, \\\".concat(l,\\\">, \\\").concat(f,\\\">;\\\\n  var<workgroup> mm_Bsub : array<array<f32, \\\").concat(s,\\\">, \\\").concat(a,\\\">;\\\\n  const rowPerThread = \\\").concat(e[1],\\\";\\\\n  const colPerThread = \\\").concat(e[0],\\\";\\\\n  const tileInner = \\\").concat(a,\\\";\\\\n\\\\n@compute @workgroup_size(\\\").concat(n[0],\\\", \\\").concat(n[1],\\\", \\\").concat(n[2],\\\")\\\\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\\\\n        @builtin(global_invocation_id) globalId : vec3<u32>,\\\\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\\\\n    let batch = \\\").concat(o?\\\"0\\\":\\\"i32(globalId.z)\\\",\\\";\\\\n    let numTiles = \\\").concat(o?\\\"\\\".concat(Math.ceil(i/a)):\\\"(dimInner - 1) / tileInner + 1\\\",\\\";\\\\n    var kStart = \\\").concat(o?\\\"i32(globalId.z) * \\\".concat(i):\\\"0\\\",\\\";\\\\n\\\\n    var acc : array<array<f32, colPerThread>, rowPerThread>;\\\\n\\\\n    // Without this initialization strange values show up in acc.\\\\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\\\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\\\n        acc[innerRow][innerCol] = 0.0;\\\\n      }\\\\n    }\\\\n    \\\").concat(g,\\\"\\\\n  }\\\\n\\\")}},504:function(e,n,t){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var a in n=arguments[t])Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a]);return e},r.apply(this,arguments)};Object.defineProperty(n,\\\"__esModule\\\",{value:!0}),n.sub=n.pow=n.mul=n.div=n.add=void 0;var a=t(952),o=t(163),i=t(75),c=function(e,n,t,c,u){var s={name:n,inputTypes:[o.GpuDataType.default,o.GpuDataType.default],cacheHint:u};return r(r({},s),{get:function(){return function(e,n,t,c,u,s){var l,f;void 0===s&&(s=n.dataType);var p=!a.ShapeUtil.areEqual(n.dims,t.dims),d=n.dims,h=a.ShapeUtil.size(n.dims),g=!1;if(p){var v=a.BroadcastUtil.calcShape(n.dims,t.dims,!1);if(!v)throw new Error(\\\"Can't perform binary op on the given tensors\\\");d=v,h=a.ShapeUtil.size(d);for(var m=1,y=0;y<d.length;y++){var b=null!==(l=n.dims[n.dims.length-y])&&void 0!==l?l:1;if(b!==(null!==(f=t.dims[t.dims.length-y])&&void 0!==f?f:1))break;m*=b}m%4==0&&(g=!0)}else g=!0;return r(r({},e),{getShaderSource:function(e){return function(e,n,t,r,o,c,u,s,l,f,p){void 0===l&&(l=\\\"f32\\\"),void 0===f&&(f=\\\"f32\\\"),void 0===p&&(p=\\\"f32\\\");var d,h,g=a.ShapeUtil.size(r),v=Math.ceil(g/4);\\\"string\\\"==typeof u?d=h=function(e,n){return\\\"\\\".concat(u,\\\"((\\\").concat(e,\\\"),(\\\").concat(n,\\\"))\\\")}:\\\"function\\\"==typeof u?d=h=u:(d=u.scalar,h=u.vector);var m,y=\\\"\\\",b=(0,i.createIndicesHelper)(\\\"output\\\",r);if(c){var w=function(e){for(var n=a.ShapeUtil.computeStrides(e),t=[],o=e.length-1;o>=0;o--){var i=0===r.length?\\\"0u\\\":1===r.length?\\\"(*outputIndices)\\\":\\\"(*outputIndices)[\\\".concat(o+r.length-e.length,\\\"]\\\");t.push(\\\"\\\".concat(n[o],\\\"u * (\\\").concat(i,\\\" % \\\").concat(e[o],\\\"u)\\\"))}return t.length>0?t.join(\\\"+\\\"):\\\"0u\\\"};y=\\\"\\\\n  \\\".concat(b.o2iImpl,\\\"\\\\n\\\\n  fn calcOffsetA(outputIndices: ptr<function, \\\").concat(b.iType,\\\">) -> u32 {\\\\n    return \\\").concat(w(n),\\\";\\\\n  }\\\\n\\\\n  fn calcOffsetB(outputIndices: ptr<function, \\\").concat(b.iType,\\\">) -> u32 {\\\\n    return \\\").concat(w(t),\\\";\\\\n  }\\\\n  \\\")}if(o)m=c?\\\"\\\\n      \\\".concat(b.indicesVariableDeclaration(\\\"outputIndices\\\"),\\\"\\\\n      \\\").concat(b.o2iCall(\\\"global_idx * 4u\\\",\\\"outputIndices\\\"),\\\"\\\\n      let offsetA = calcOffsetA(&outputIndices);\\\\n      let offsetB = calcOffsetB(&outputIndices);\\\\n      outputData[global_idx] = \\\").concat(h(\\\"aData[offsetA / 4u]\\\",\\\"bData[offsetB / 4u]\\\"),\\\";\\\"):\\\"outputData[global_idx] = \\\".concat(h(\\\"aData[global_idx]\\\",\\\"bData[global_idx]\\\"),\\\";\\\");else{if(!c)throw new Error(\\\"no necessary to use scalar implementation for element-wise binary op implementation.\\\");var _=function(e){var n=\\\"aData[indexA\\\".concat(e,\\\"][componentA\\\").concat(e,\\\"]\\\"),t=\\\"bData[indexB\\\".concat(e,\\\"][componentB\\\").concat(e,\\\"]\\\");return\\\"\\\\n      \\\".concat(b.o2iCall(\\\"global_idx * 4u + \\\".concat(e,\\\"u\\\"),\\\"outputIndices\\\"),\\\"\\\\n      let offsetA\\\").concat(e,\\\" = calcOffsetA(&outputIndices);\\\\n      let offsetB\\\").concat(e,\\\" = calcOffsetB(&outputIndices);\\\\n      let indexA\\\").concat(e,\\\" = offsetA\\\").concat(e,\\\" / 4u;\\\\n      let indexB\\\").concat(e,\\\" = offsetB\\\").concat(e,\\\" / 4u;\\\\n      let componentA\\\").concat(e,\\\" = offsetA\\\").concat(e,\\\" % 4u;\\\\n      let componentB\\\").concat(e,\\\" = offsetB\\\").concat(e,\\\" % 4u;\\\\n      outputData[global_idx][\\\").concat(e,\\\"] = \\\").concat(d(n,t),\\\";\\\")};m=\\\"\\\\n      \\\".concat(b.indicesVariableDeclaration(\\\"outputIndices\\\"),\\\"\\\\n      \\\").concat(_(0),\\\"\\\\n      \\\").concat(_(1),\\\"\\\\n      \\\").concat(_(2),\\\"\\\\n      \\\").concat(_(3))}return\\\"\\\\n  @group(0) @binding(0) var<storage, read> aData : array<vec4<\\\".concat(l,\\\">>;\\\\n  @group(0) @binding(1) var<storage, read> bData : array<vec4<\\\").concat(f,\\\">>;\\\\n  @group(0) @binding(2) var<storage, read_write> outputData : array<vec4<\\\").concat(p,\\\">>;\\\\n\\\\n  \\\").concat(null!=s?s:\\\"\\\",\\\"\\\\n  \\\").concat(y,\\\"\\\\n\\\\n  \\\").concat(e.mainStart(),\\\"\\\\n    \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(v),\\\"\\\\n    \\\").concat(m,\\\"\\\\n  }\\\")}(e,n.dims,t.dims,d,g,p,c,u)},outputs:[{dims:d,dataType:s,gpuDataType:o.GpuDataType.default}],dispatchGroup:function(){return{x:Math.ceil(h/64/(g?4:1))}}})}(s,e[0],e[1],t,c)}})};n.add=function(e){e.compute(c(e.inputs,\\\"Add\\\",(function(e,n){return\\\"\\\".concat(e,\\\"+\\\").concat(n)})))},n.div=function(e){e.compute(c(e.inputs,\\\"Div\\\",(function(e,n){return\\\"\\\".concat(e,\\\"/\\\").concat(n)})))},n.mul=function(e){e.compute(c(e.inputs,\\\"Mul\\\",(function(e,n){return\\\"\\\".concat(e,\\\"*\\\").concat(n)})))},n.pow=function(e){e.compute(c(e.inputs,\\\"Pow\\\",{scalar:function(e,n){return\\\"pow_f32(\\\".concat(e,\\\",\\\").concat(n,\\\")\\\")},vector:function(e,n){return\\\"pow_vf32(\\\".concat(e,\\\",\\\").concat(n,\\\")\\\")}},\\\"\\\\n    fn pow_f32(a : f32, b : f32) -> f32 {\\\\n      if (b == 0.0) {\\\\n        return 1.0;\\\\n      } else if (a < 0.0 && b != floor(b)) {\\\\n        return pow(a, b); // NaN\\\\n      }\\\\n      return select(sign(a), 1.0, round(abs(b) % 2.0) != 1.0) * pow(abs(a), b);\\\\n    }\\\\n    fn pow_vf32(a : vec4<f32>, b : vec4<f32>) -> vec4<f32> {\\\\n      // TODO: implement vectorized pow\\\\n      return vec4<f32>(pow_f32(a.x, b.x), pow_f32(a.y, b.y), pow_f32(a.z, b.z), pow_f32(a.w, b.w));\\\\n    }\\\\n      \\\"))},n.sub=function(e){e.compute(c(e.inputs,\\\"Sub\\\",(function(e,n){return\\\"\\\".concat(e,\\\"-\\\").concat(n)})))}},75:function(e,n,t){\\\"use strict\\\";Object.defineProperty(n,\\\"__esModule\\\",{value:!0}),n.createShaderHelper=n.createIndicesHelper=n.WORKGROUP_SIZE=void 0;var r=t(952);n.WORKGROUP_SIZE=64,n.createIndicesHelper=function(e,n){for(var t=n.length<2?\\\"u32\\\":\\\"array<u32, \\\".concat(n.length,\\\">\\\"),a=r.ShapeUtil.computeStrides(n),o=\\\"\\\",i=0;i<n.length-1;i++)o+=\\\"\\\\n    let dim\\\".concat(i,\\\" = current / \\\").concat(a[i],\\\"u;\\\\n    let rest\\\").concat(i,\\\" = current % \\\").concat(a[i],\\\"u;\\\\n    (*indices)[\\\").concat(i,\\\"] = dim\\\").concat(i,\\\";\\\\n    current = rest\\\").concat(i,\\\";\\\\n    \\\");o+=\\\"(*indices)[\\\".concat(n.length-1,\\\"] = current;\\\");var c=n.length<2?\\\"\\\":\\\"\\\\n  fn ih_o2i_\\\".concat(e,\\\"(offset: u32, indices: ptr<function, \\\").concat(t,\\\">) {\\\\n    var current = offset;\\\\n    \\\").concat(o,\\\"\\\\n  }\\\"),u=[];if(0===n.length)u.push(\\\"0u\\\");else if(n.length<2)u.push(\\\"(*indices)\\\");else for(i=n.length-1;i>=0;i--)u.push(\\\"\\\".concat(a[i],\\\"u * ((*indices)[\\\").concat(i,\\\"])\\\"));return{o2iImpl:c,o2iCall:function(t,r){return n.length<2?\\\"\\\".concat(r,\\\"=\\\").concat(t,\\\";\\\"):\\\"ih_o2i_\\\".concat(e,\\\"(\\\").concat(t,\\\", &\\\").concat(r,\\\");\\\")},i2oImpl:n.length<2?\\\"\\\":\\\"\\\\n  fn ih_i2o_\\\".concat(e,\\\"(indices: ptr<function, \\\").concat(t,\\\">) -> u32 {\\\\n    return \\\").concat(u.join(\\\"+\\\"),\\\";\\\\n  }\\\"),i2oExpression:function(t,r){return n.length<2?\\\"(\\\".concat(r?\\\"*\\\":\\\"\\\").concat(t,\\\")\\\"):\\\"ih_i2o_\\\".concat(e,\\\"(\\\").concat(r?\\\"\\\":\\\"&\\\").concat(t,\\\")\\\")},indicesVariableDeclaration:function(e,n){return\\\"var \\\".concat(e,\\\":\\\").concat(t).concat(n?\\\"=\\\".concat(t,\\\"(\\\").concat(n.join(\\\",\\\"),\\\")\\\"):\\\"\\\",\\\";\\\")},iType:t}};var a=function(){function e(e){this.normalizedDispatchGroup=e}return e.prototype.guardAgainstOutOfBoundsWorkgroupSizes=function(e){var n=\\\"number\\\"==typeof e?\\\"\\\".concat(e,\\\"u\\\"):e;return\\\"if (global_idx >= \\\".concat(n,\\\") { return; }\\\")},e.prototype.mainStart=function(e){void 0===e&&(e=n.WORKGROUP_SIZE);var t=\\\"number\\\"==typeof e?e:e[0],r=\\\"number\\\"==typeof e?1:e[1],a=\\\"number\\\"==typeof e?1:e[2],o=1===this.normalizedDispatchGroup[1]&&1===this.normalizedDispatchGroup[2],i=o?\\\"@builtin(global_invocation_id) global_id : vec3<u32>\\\":\\\"@builtin(local_invocation_index) local_index : u32,\\\\n    @builtin(workgroup_id) workgroup_id : vec3<u32>\\\",c=o?\\\"let global_idx = global_id.x;\\\":\\\"let global_idx = (workgroup_id.z * \\\".concat(this.normalizedDispatchGroup[0]*this.normalizedDispatchGroup[1],\\\"u +\\\\n          workgroup_id.y * \\\").concat(this.normalizedDispatchGroup[0],\\\"u + workgroup_id.x) * \\\").concat(t*r*a,\\\"u + local_index;\\\");return\\\"@compute @workgroup_size(\\\".concat(t,\\\", \\\").concat(r,\\\", \\\").concat(a,\\\")\\\\n  fn main(\\\").concat(i,\\\") {\\\\n    \\\").concat(c,\\\"\\\\n  \\\")},e}();n.createShaderHelper=function(e){return new a(e)}},513:function(e,n,t){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var a in n=arguments[t])Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a]);return e},r.apply(this,arguments)},a=this&&this.__values||function(e){var n=\\\"function\\\"==typeof Symbol&&Symbol.iterator,t=n&&e[n],r=0;if(t)return t.call(e);if(e&&\\\"number\\\"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(n?\\\"Object is not iterable.\\\":\\\"Symbol.iterator is not defined.\\\")};Object.defineProperty(n,\\\"__esModule\\\",{value:!0}),n.parseConcatAttributes=n.concat=void 0;var o=t(952),i=t(387),c=t(163),u=t(75);n.concat=function(e,n){!function(e){var n,t;if(!e||e.length<1)throw new Error(\\\"too few inputs\\\");var r=e[0].dataType,o=e[0].dims.length;try{for(var i=a(e),c=i.next();!c.done;c=i.next()){var u=c.value;if(u.dataType!==r)throw new Error(\\\"input tensors should be one type\\\");if(u.dims.length!==o)throw new Error(\\\"input tensors should have the same shape\\\")}}catch(e){n={error:e}}finally{try{c&&!c.done&&(t=i.return)&&t.call(i)}finally{if(n)throw n.error}}}(e.inputs),e.compute(function(e,n){var t,a,i=(t=e.length,a=n.cacheKey,{name:\\\"Concat\\\",inputTypes:Array(t).fill(c.GpuDataType.default),cacheHint:a});return r(r({},i),{get:function(){return function(e,n,t,a){void 0===a&&(a=\\\"f32\\\");var i=n[0].dims.slice();if(t>=i.length||t<-1*i.length)throw new Error(\\\"axis specified for concat doesn't match input dimensionality\\\");for(var s=t<0?i.length+t:t,l=i.slice(0),f=1;f<n.length;f++)for(var p=n[f].dims.slice(),d=0;d<i.length;d++)if(d===s)l[s]+=p[d];else if(i[d]!==p[d])throw new Error(\\\"non concat dimensions must match\\\");var h=o.ShapeUtil.size(l),g=l.length,v=new Array(n.length),m=new Array(n.length),y=new Array(n.length),b=0;for(f=0;f<n.length;++f)b+=n[f].dims[s],v[f]=b,m[f]=\\\"@group(0) @binding(\\\".concat(f,\\\") var<storage, read> input\\\").concat(f,\\\" : array<\\\").concat(a,\\\">;\\\"),y[f]=(0,u.createIndicesHelper)(\\\"input\\\".concat(f),n[f].dims);var w=(0,u.createIndicesHelper)(\\\"output\\\",l),_=g<2?\\\"indices\\\":\\\"indices[\\\".concat(s,\\\"]\\\");return r(r({},e),{outputs:[{dims:l,dataType:n[0].dataType,gpuDataType:c.GpuDataType.default}],getShaderSource:function(e){return\\\"\\\\n\\\\n  \\\".concat(m.join(\\\"\\\\n\\\"),\\\"\\\\n  @group(0) @binding(\\\").concat(n.length,\\\") var<storage, read_write> output : array<\\\").concat(a,\\\">;\\\\n\\\\n  \\\").concat(y.map((function(e){return e.i2oImpl})).join(\\\"\\\\n\\\"),\\\"\\\\n  \\\").concat(w.o2iImpl,\\\"\\\\n\\\\n  const sizeInConcatAxis = array<u32, \\\").concat(v.length,\\\">(\\\").concat(v.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n  \\\").concat((t=v.length,\\\"\\\\n  fn calculateInputIndex(index: u32) -> u32 {\\\\n    for (var i: u32 = 0u; i < \\\".concat(t,\\\"u; i += 1u ) {\\\\n      if (index < sizeInConcatAxis[i]) {\\\\n        return i;\\\\n      }\\\\n    }\\\\n    return \\\").concat(t,\\\"u;\\\\n  }\\\")),\\\"\\\\n  \\\").concat(function(e,n,t){for(var r=e.length,a=[],o=0;o<r;++o){var i=\\\"return input\\\".concat(o,\\\"[\\\").concat(e[o].i2oExpression(\\\"indices\\\",!0),\\\"];\\\");1===r?a.push(i):0===o?a.push(\\\"if (textureIndex == \\\".concat(o,\\\"u) { \\\").concat(i,\\\" }\\\")):o===r-1?a.push(\\\"else { \\\".concat(i,\\\" }\\\")):a.push(\\\"else if (textureIndex == \\\".concat(o,\\\") { \\\").concat(i,\\\" }\\\"))}return\\\"\\\\n    fn readBufferData(textureIndex: u32, indices: ptr<function, \\\".concat(e[0].iType,\\\">) -> \\\").concat(t,\\\" {\\\\n      \\\").concat(a.join(\\\"\\\\n\\\"),\\\"\\\\n    }\\\")}(y,0,a),\\\"\\\\n\\\\n  \\\").concat(e.mainStart(),\\\"\\\\n    \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(h),\\\"\\\\n\\\\n    \\\").concat(w.indicesVariableDeclaration(\\\"indices\\\"),\\\"\\\\n    \\\").concat(w.o2iCall(\\\"global_idx\\\",\\\"indices\\\"),\\\"\\\\n\\\\n    let textureIndex = calculateInputIndex(\\\").concat(_,\\\");\\\\n    if (textureIndex != 0u) {\\\\n      \\\").concat(_,\\\" -= sizeInConcatAxis[textureIndex - 1u];\\\\n    }\\\\n\\\\n    output[global_idx] = readBufferData(textureIndex, &indices);\\\\n  }\\\");var t},dispatchGroup:function(){return{x:Math.ceil(h/64)}}})}(i,e,n.axis)}})}(e.inputs,n))},n.parseConcatAttributes=function(e){return(0,i.createAttributeWithCacheKey)({axis:e.axis})}},192:function(e,n,t){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var a in n=arguments[t])Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a]);return e},r.apply(this,arguments)};Object.defineProperty(n,\\\"__esModule\\\",{value:!0}),n.createGroupedConvProgramInfoLoader=void 0;var a=t(952),o=t(163),i=t(75),c=t(770),u=t(997);n.createGroupedConvProgramInfoLoader=function(e,n,t){var s,l,f=(s=e.length>2,l=n.cacheKey,{name:\\\"GroupedConv\\\",inputTypes:s?[o.GpuDataType.default,o.GpuDataType.default,o.GpuDataType.default]:[o.GpuDataType.default,o.GpuDataType.default],cacheHint:l});return r(r({},f),{get:function(){return function(e,n,t,s){var l=e.length>2,f=l?\\\"value += b[output_channel];\\\":\\\"\\\",p=e[0].dims,d=e[1].dims,h=d[0]/t.group,g=\\\"f32\\\",v=(0,u.getActicationSnippet)(t),m=v.activationFunction,y=v.applyActivation,b=[\\\"@group(0) @binding(0) var<storage, read> x : array<\\\".concat(g,\\\">;\\\"),\\\"@group(0) @binding(1) var<storage, read> w : array<\\\".concat(g,\\\">;\\\")];l&&b.push(\\\"@group(0) @binding(2) var<storage, read> b : array<\\\".concat(g,\\\">;\\\"));var w=\\\"NHWC\\\"===t.format,_=(0,c.calculateOutputShape)(p,d,t.dilations,t.pads,t.strides,w),S=a.ShapeUtil.size(_),A=(0,i.createIndicesHelper)(\\\"output\\\",_),C=(0,i.createIndicesHelper)(\\\"x\\\",p),x=(0,i.createIndicesHelper)(\\\"w\\\",d);return r(r({},n),{outputs:[{dims:s?s(_):_,dataType:e[0].dataType,gpuDataType:o.GpuDataType.default}],getShaderSource:function(e){return\\\"\\\\n  const strides: vec2<u32> = vec2(\\\".concat(t.strides[0],\\\"u, \\\").concat(t.strides[1],\\\"u);\\\\n  const pads: vec2<u32> = vec2(\\\").concat(t.pads[0],\\\"u, \\\").concat(t.pads[1],\\\"u);\\\\n\\\\n  \\\").concat(b.join(\\\"\\\\n\\\"),\\\"\\\\n  @group(0) @binding(\\\").concat(b.length,\\\") var<storage, read_write> output : array<\\\").concat(g,\\\">;\\\\n\\\\n  \\\").concat(m,\\\"\\\\n  \\\").concat(A.o2iImpl,\\\"\\\\n  \\\").concat(C.i2oImpl,\\\"\\\\n  \\\").concat(x.i2oImpl,\\\"\\\\n\\\\n  \\\").concat(e.mainStart(),\\\"\\\\n    \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(S),\\\"\\\\n\\\\n    \\\").concat(A.indicesVariableDeclaration(\\\"outputIndices\\\"),\\\"\\\\n    \\\").concat(A.o2iCall(\\\"global_idx\\\",\\\"outputIndices\\\"),\\\"\\\\n    let batch: u32 = outputIndices[0];\\\\n    let output_channel: u32 = outputIndices[\\\").concat(w?3:1,\\\"];\\\\n    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[\\\").concat(w?1:2,\\\"], outputIndices[\\\").concat(w?2:3,\\\"]) * strides - pads;\\\\n    let group_id: u32 = output_channel / \\\").concat(h,\\\"u;\\\\n\\\\n    var value: \\\").concat(g,\\\" = \\\").concat(g,\\\"(0);\\\\n    for (var wInChannel: u32 = 0u; wInChannel < \\\").concat(d[1],\\\"u; wInChannel++) {\\\\n      let input_channel = group_id * \\\").concat(d[1],\\\"u + wInChannel;\\\\n      for (var wHeight: u32 = 0u; wHeight < \\\").concat(d[2],\\\"u; wHeight++) {\\\\n        let xHeight = xRCCorner.x + wHeight * \\\").concat(t.dilations[0],\\\"u;\\\\n\\\\n        if (xHeight < 0u || xHeight >= \\\").concat(p[w?1:2],\\\"u) {\\\\n          continue;\\\\n        }\\\\n\\\\n        for (var wWidth: u32 = 0u; wWidth < \\\").concat(d[3],\\\"u; wWidth++) {\\\\n          let xWidth = xRCCorner.y + wWidth * \\\").concat(t.dilations[1],\\\"u;\\\\n          if (xWidth < 0u || xWidth >= \\\").concat(p[w?2:3],\\\"u) {\\\\n            continue;\\\\n          }\\\\n\\\\n          \\\").concat(C.indicesVariableDeclaration(\\\"xIndices\\\",w?[\\\"batch\\\",\\\"xHeight\\\",\\\"xWidth\\\",\\\"input_channel\\\"]:[\\\"batch\\\",\\\"input_channel\\\",\\\"xHeight\\\",\\\"xWidth\\\"]),\\\"\\\\n          let xVal = x[\\\").concat(C.i2oExpression(\\\"xIndices\\\"),\\\"];\\\\n          \\\").concat(x.indicesVariableDeclaration(\\\"wIndices\\\",[\\\"output_channel\\\",\\\"wInChannel\\\",\\\"wHeight\\\",\\\"wWidth\\\"]),\\\"\\\\n          let wVal = w[\\\").concat(x.i2oExpression(\\\"wIndices\\\"),\\\"];\\\\n          value += xVal*wVal;\\\\n        }\\\\n      }\\\\n    }\\\\n    \\\").concat(f,\\\"\\\\n    \\\").concat(y,\\\"\\\\n    output[global_idx] = value;\\\\n  }\\\")},dispatchGroup:function(){return{x:Math.ceil(S/64)}}})}(e,f,n,t)}})}},640:function(e,n,t){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var a in n=arguments[t])Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a]);return e},r.apply(this,arguments)};Object.defineProperty(n,\\\"__esModule\\\",{value:!0}),n.convTranspose=n.parseConvTransposeAttributes=void 0;var a=t(387),o=t(163),i=t(514),c=t(997),u=function(e,n,t,r,a,o){return(e-1)*n+t+(r-1)*a+1-o},s=function(e,n,t,r,a){var o=Math.floor(e/2);\\\"SAME_UPPER\\\"===n?(t[r]=o,t[a]=e-o):\\\"SAME_LOWER\\\"===n&&(t[r]=e-o,t[a]=o)},l=function(e,n){var t=e.kernelShape.slice();if(0===e.kernelShape.length||0===e.kernelShape.reduce((function(e,n){return e*n}),0)){t.length=0;for(var r=2;r<n[1].dims.length;++r)t.push(n[1].dims[r])}var a=\\\"NHWC\\\"===e.format;t.splice(0,0,n[1].dims[0]),t.splice(a?3:1,0,n[1].dims[1]);var o=e.pads.slice(),i=e.outputShape.slice(),c=e.outputPadding.slice(),l=n[0].dims,f=e.dilations.slice();if(0===f.reduce((function(e,n){return e+n}),0)){var p=n[0].dims.length-2;f=new Array(p).fill(1)}var d=e.strides.slice();0===d.reduce((function(e,n){return e+n}),0)&&(p=n[0].dims.length-2,d=new Array(p).fill(1)),function(e,n,t,r,a,o,i,c,l,f){var p=e.length-2,d=0===f.length;if(0===l.length)for(var h=0;h<p;++h)l.push(0);for(var g=e[0],v=n[c?3:1]*a,m=(h=0,e.length-p-(c?1:0));h<p;++h,++m){var y=e[m],b=d?y*i[h]:f[h],w=u(y,i[h],o[h],n[m],t[h],b);s(w,r,o,h,h+p),d&&f.push(i[h]*(y-1)+l[h]+(n[m]-1)*t[h]+1-o[h]-o[h+p])}f.splice(0,0,g),f.splice(c?3:1,0,v)}(l,t,f,e.autoPad,e.group,o,d,a,c,i);var h=Object.assign({},e);return Object.assign(h,{kernelShape:t,pads:o,outputPadding:c,outputShape:i,dilations:f,strides:d,cacheKey:e.cacheKey}),h};n.parseConvTransposeAttributes=function(e){var n=(0,c.parseInternalActivationAttributes)(e),t=e.format,o=[\\\"NOTSET\\\",\\\"VALID\\\",\\\"SAME_UPPER\\\",\\\"SAME_LOWER\\\"][void 0===e.autoPad?0:e.autoPad],i=e.dilations,u=e.group,s=e.kernelShape,l=e.pads,f=e.strides,p=e.wIsConst(),d=e.outputPadding,h=e.outputShape;return(0,a.createAttributeWithCacheKey)(r({autoPad:o,format:t,dilations:i,group:u,kernelShape:s,outputPadding:d,outputShape:h,pads:l,strides:f,wIsConst:p},n))};var f=function(e,n,t){var a,c,u=(a=3===e.length,c=n.cacheKey,{name:\\\"ConvTranspose2D\\\",inputTypes:a?[o.GpuDataType.default,o.GpuDataType.default,o.GpuDataType.default]:[o.GpuDataType.default,o.GpuDataType.default],cacheHint:c});return r(r({},u),{get:function(){return(0,i.createConvTranspose2DProgramInfo)(e,u,n,t)}})};n.convTranspose=function(e,n){!function(e,n){if(!e||2!==e.length&&3!==e.length)throw new Error(\\\"Conv requires 2 or 3 inputs\\\");if(4!==e[0].dims.length&&3!==e[0].dims.length)throw new Error(\\\"currently only support 2-dimensional conv\\\");if(e[0].dims.length!==e[1].dims.length)throw new Error(\\\"filter does not have same dimension as input\\\");if(e[0].dims[\\\"NHWC\\\"===n.format?e[0].dims.length-1:1]!==e[1].dims[0])throw new Error(\\\"FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\\\");var t=e[1].dims[1]*n.group;if(3===e.length&&(1!==e[2].dims.length||e[2].dims[0]!==t))throw new Error(\\\"invalid bias\\\");var r=e[0].dims.length-2;if(n.dilations.reduce((function(e,n){return e+n}),0)>0&&n.dilations.length!==r)throw new Error(\\\"dilations should be \\\".concat(r,\\\"D\\\"));if(n.strides.reduce((function(e,n){return e+n}),0)>0&&n.strides.length!==r)throw new Error(\\\"strides should be \\\".concat(r,\\\"D\\\"));if(n.pads.reduce((function(e,n){return e+n}),0)>0&&n.pads.length!==2*r)throw new Error(\\\"pads should be \\\".concat(2*r,\\\"D\\\"));if(n.outputPadding.length!==r&&0!==n.outputPadding.length)throw new Error(\\\"output_padding should be \\\".concat(r,\\\"D\\\"));if(n.kernelShape.reduce((function(e,n){return e+n}),0)>0&&0!==n.kernelShape.length&&n.kernelShape.length!==e[1].dims.length-2)throw new Error(\\\"invalid kernel shape\\\");if(0!==n.outputShape.length&&n.outputShape.length!==e[0].dims.length-2)throw new Error(\\\"invalid output shape\\\");if(1!==e[0].dataType||1!==e[1].dataType)throw new Error(\\\"ConvTranspose input(X,W) should be float tensor\\\");if(3===e.length&&1!==e[2].dataType)throw new Error(\\\"ConvTranspose input(bias) should be float tensor\\\")}(e.inputs,n),3===e.inputs[0].dims.length?function(e,n){var t=\\\"NHWC\\\"===n.format,a=[e.inputs[0].reshape(t?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];3===a.length&&a.push(e.inputs[2]);var o=n.kernelShape;0!==o.length&&0!==o[0]||(o=[e.inputs[1].dims[2]]);var i=n.dilations;0!==i.length&&0!==i[0]||(i=[1]);var c=n.strides;0!==c.length&&0!==c[0]||(c=[1]);var u=n.pads;0===u.length&&(u=[0,0]),u=[0,u[0],0,u[1]],c=[1].concat(c),i=[1].concat(i),o=[1].concat(o);var s=l(r(r({},n),{pads:u,strides:c,dilations:i,kernelShape:o}),a);e.compute(f(a,s,(function(e){return t?[e[0],e[2],e[3]]:[e[0],e[1],e[3]]})))}(e,n):function(e,n,t){var r=l(t,n);e.compute(f(n,r))}(e,e.inputs,n)}},770:function(e,n,t){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var a in n=arguments[t])Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a]);return e},r.apply(this,arguments)};Object.defineProperty(n,\\\"__esModule\\\",{value:!0}),n.conv=n.parseConvAttributes=n.calculateOutputShape=void 0;var a=t(952),o=t(387),i=t(192),c=t(822),u=t(997),s=t(625);n.calculateOutputShape=function(e,n,t,r,a,o){var i=e[0],c=e.slice(o?1:2,o?3:4),u=c.length,s=n[0],l=n.slice(2).map((function(e,n){return e+(e-1)*(t[n]-1)})),f=c.map((function(e,n){return e+r[n]+r[n+u]})).map((function(e,n){return Math.floor((e-l[n]+a[n])/a[n])}));return f.splice(0,0,i),f.splice(o?3:1,0,s),f};var l=(0,o.createAttributeWithCacheKey)({perm:[2,3,1,0]}),f=function(e,n){for(var t=e.kernelShape.slice(),r=2;r<n[1].dims.length;++r)0===t[r-2]&&(t[r-2]=n[1].dims[r]);var o=e.pads.slice();a.PoolConvUtil.adjustPadsBasedOnAutoPad(n[0].dims,e.strides,e.dilations,t,o,\\\"NHWC\\\"===e.format,e.autoPad);var i=Object.assign({},e);return Object.assign(i,{kernelShape:t,pads:o,cacheKey:e.cacheKey}),i};n.parseConvAttributes=function(e){var n=(0,u.parseInternalActivationAttributes)(e),t=e.format,a=[\\\"NOTSET\\\",\\\"VALID\\\",\\\"SAME_UPPER\\\",\\\"SAME_LOWER\\\"][e.auto_pad],i=e.dilations,c=e.group,s=e.kernel_shape,l=e.pads,f=e.strides,p=e.w_is_const();return(0,o.createAttributeWithCacheKey)(r({autoPad:a,format:t,dilations:i,group:c,kernelShape:s,pads:l,strides:f,wIsConst:p},n))},n.conv=function(e,t){!function(e,n){if(!e||2!==e.length&&3!==e.length)throw new Error(\\\"Conv requires 2 or 3 inputs\\\");if(4!==e[0].dims.length&&3!==e[0].dims.length)throw new Error(\\\"currently only support conv 1D and 2D\\\");if(e[0].dims.length!==e[1].dims.length)throw new Error(\\\"filter does not have same dimension as input\\\");if(e[0].dims[\\\"NHWC\\\"===n.format?e[0].dims.length-1:1]!==e[1].dims[1]*n.group)throw new Error(\\\"FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\\\");if(3===e.length&&(1!==e[2].dims.length||e[1].dims[0]!==e[2].dims[0]))throw new Error(\\\"invalid bias\\\");var t=e[0].dims.length-2;if(n.dilations.length!==t)throw new Error(\\\"dilations should be \\\".concat(t,\\\"D\\\"));if(n.strides.length!==t)throw new Error(\\\"strides should be \\\".concat(t,\\\"D\\\"));if(n.pads.length!==2*t)throw new Error(\\\"pads should be \\\".concat(2*t,\\\"D\\\"));if(0!==n.kernelShape.length&&n.kernelShape.length!==e[1].dims.length-2)throw new Error(\\\"invalid kernel shape\\\");if(1!==e[0].dataType||1!==e[1].dataType)throw new Error(\\\"Conv input(X,W) should be float tensor\\\");if(3===e.length&&1!==e[2].dataType)throw new Error(\\\"Conv input(bias) should be float tensor\\\")}(e.inputs,t),3===e.inputs[0].dims.length?function(e,n){var t=\\\"NHWC\\\"===n.format,a=[e.inputs[0].reshape(t?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];3===e.inputs.length&&a.push(e.inputs[2]);var o=[0,n.pads[0],0,n.pads[1]],c=[1].concat(n.strides),u=[1].concat(n.dilations),s=[1].concat(n.kernelShape),l=f(r(r({},n),{pads:o,strides:c,dilations:u,kernelShape:s}),a);e.compute((0,i.createGroupedConvProgramInfoLoader)(a,l,(function(e){return t?[e[0],e[2],e[3]]:[]})))}(e,t):function(e,t,a){var o,u=f(a,t),p=3===t.length,d=\\\"NHWC\\\"===a.format,h=t[0].dims[d?1:2],g=t[0].dims[d?2:3],v=t[0].dims[d?3:1],m=t[1].dims[2],y=t[1].dims[3],b=(0,n.calculateOutputShape)(t[0].dims,t[1].dims,a.dilations,u.pads,a.strides,d),w=b[d?1:2],_=b[d?2:3],S=b[d?3:1];if(d&&m===h&&y===g&&\\\"VALID\\\"===a.autoPad||1===m&&1===y&&1===a.dilations[0]&&1===a.dilations[1]&&1===a.strides[0]&&1===a.strides[1]&&(\\\"SAME_UPPER\\\"===a.autoPad||\\\"SAME_LOWER\\\"===a.autoPad||\\\"VALID\\\"===a.autoPad))e.compute((0,i.createGroupedConvProgramInfoLoader)(t,u));else if(d&&1===a.group){var A=d?w*_:S,C=d?S:w*_,x=m*y*v,T=null!==(o=e.kernelCustomData.wT)&&void 0!==o?o:e.compute(r(r({},s.transposeProgramMetadata),{cacheHint:l.cacheKey,get:function(){return(0,s.createTransposeProgramInfo)(t[1],l.perm)}}),{inputs:[1],outputs:[a.wIsConst?-2:-1]})[0];a.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=T);var P=[t[0],T];p&&(d||1!==t[2].dims.length?P.push(t[2]):P.push(t[2].reshape([t[2].dims[0],1,1]))),e.compute((0,c.createConv2DMatMulProgramInfoLoader)(P,u,b,A,C,x,p,!0),{inputs:P})}else e.compute((0,i.createGroupedConvProgramInfoLoader)(t,u))}(e,e.inputs,t)}},822:function(e,n,t){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var a in n=arguments[t])Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a]);return e},r.apply(this,arguments)};Object.defineProperty(n,\\\"__esModule\\\",{value:!0}),n.createConv2DMatMulProgramInfoLoader=void 0;var a=t(163),o=t(456);n.createConv2DMatMulProgramInfoLoader=function(e,n,t,i,c,u,s,l){var f=function(e,n){return{name:\\\"Conv2DMatMul\\\",inputTypes:e?[a.GpuDataType.default,a.GpuDataType.default,a.GpuDataType.default]:[a.GpuDataType.default,a.GpuDataType.default],cacheHint:n}}(s,n.cacheKey);return r(r({},f),{get:function(){return(0,o.createConv2DMatMulProgramInfo)(e,f,n,t,i,c,u,s,l)}})}},856:function(e,n,t){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var a in n=arguments[t])Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a]);return e},r.apply(this,arguments)};Object.defineProperty(n,\\\"__esModule\\\",{value:!0}),n.expand=n.expandProgramMetadata=void 0;var a=t(952),o=t(163),i=t(75);n.expandProgramMetadata={name:\\\"Expand\\\",inputTypes:[o.GpuDataType.default]};var c=function(e,n){for(var t=e.length-n.length,r=[],a=0;a<t;++a)r.push(e[a]);for(a=0;a<n.length;++a)r.push(1===n[a]?e[a+t]:n[a]);return r};n.expand=function(e){!function(e){if(!e||2!==e.length)throw new Error(\\\"Expand requires 2 input.\\\");var n=e[0].dims,t=[];e[1].dims[0]>0&&e[1].getBigInt64Array().forEach((function(e){return t.push(Number(e))}));for(var r=t.length<n.length?0:t.length-n.length,a=n.length<t.length?0:n.length-t.length;r<t.length&&a<n.length;++r,++a)if(t[r]!==n[a]&&1!==t[r]&&1!==n[a])throw new Error(\\\"Expand requires shape to be broadcastable to input\\\")}(e.inputs),e.compute(r(r({},n.expandProgramMetadata),{get:function(){return function(e,n){var t=n[0].dims,u=[];n[1].dims[0]>0&&n[1].getBigInt64Array().forEach((function(e){return u.push(Number(e))}));var s=function(e,n){return e.length>n.length?c(e,n):c(n,e)}(t,u),l=a.ShapeUtil.size(s),f=(0,i.createIndicesHelper)(\\\"input\\\",t),p=(0,i.createIndicesHelper)(\\\"output\\\",s);return r(r({},e),{getShaderSource:function(e){return\\\"\\\\n  const inputShape = array<u32, \\\".concat(t.length,\\\">(\\\").concat(t.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n  \\\").concat(\\\"\\\\n  fn calculateInputIndex(outputIndices: array<u32, \\\".concat(s.length,\\\">) -> array<u32,\\\").concat(t.length,\\\"> {\\\\n    \\\").concat(f.indicesVariableDeclaration(\\\"inputIndices\\\"),\\\"\\\\n    for (var i = 0; i < \\\").concat(t.length,\\\"; i++) {\\\\n        if (inputShape[i] == 1) {\\\\n            inputIndices[i] = 0;\\\\n        } else {\\\\n            inputIndices[i] = outputIndices[i + \\\").concat(s.length-t.length,\\\"];\\\\n        }\\\\n    }\\\\n    return inputIndices;\\\\n}\\\"),\\\";\\\\n  @group(0) @binding(0) var<storage, read> input : array<\\\").concat(\\\"f32\\\",\\\">;\\\\n  @group(0) @binding(1) var<storage, read_write> output : array<\\\").concat(\\\"f32\\\",\\\">;\\\\n  \\\").concat(p.o2iImpl,\\\"\\\\n  \\\").concat(f.i2oImpl,\\\"\\\\n  \\\").concat(e.mainStart(),\\\"\\\\n  \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(l),\\\"\\\\n  \\\").concat(f.indicesVariableDeclaration(\\\"inputIndices\\\"),\\\"\\\\n  \\\").concat(p.indicesVariableDeclaration(\\\"outputIndices\\\"),\\\"\\\\n  \\\").concat(p.o2iCall(\\\"global_idx\\\",\\\"outputIndices\\\"),\\\"\\\\n  inputIndices = calculateInputIndex(outputIndices);\\\\n  output[global_idx] = input[\\\").concat(f.i2oExpression(\\\"inputIndices\\\"),\\\"];\\\\n}\\\")},outputs:[{dims:s,dataType:n[0].dataType,gpuDataType:o.GpuDataType.default}],dispatchGroup:function(){return{x:Math.ceil(l/64)}}})}(n.expandProgramMetadata,e.inputs)}}),{inputs:[0]})}},997:function(e,n,t){\\\"use strict\\\";var r=this&&this.__read||function(e,n){var t=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var r,a,o=t.call(e),i=[];try{for(;(void 0===n||n-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(t=o.return)&&t.call(o)}finally{if(a)throw a.error}}return i};Object.defineProperty(n,\\\"__esModule\\\",{value:!0}),n.parseInternalActivationAttributes=n.getActicationSnippet=void 0;var a=t(952);n.getActicationSnippet=function(e){switch(e.activation){case\\\"Relu\\\":return{activationFunction:\\\"\\\",applyActivation:\\\"value = max(value, 0.0);\\\"};case\\\"Sigmoid\\\":return{activationFunction:\\\"\\\",applyActivation:\\\"value = (1.0 / (1.0 + exp(-value)));\\\"};case\\\"Clip\\\":return{activationFunction:\\\"const clip_min_=f32(\\\".concat(e.clipMin,\\\");const clip_max_=f32(\\\").concat(e.clipMax,\\\");\\\"),applyActivation:\\\"value = clamp(value, clip_min_, clip_max_);\\\"};default:return{activationFunction:\\\"\\\",applyActivation:\\\"\\\"}}},n.parseInternalActivationAttributes=function(e){var n=(null==e?void 0:e.activation)||\\\"\\\";if(\\\"Clip\\\"===n){var t=r((null==e?void 0:e.activation_params)||[a.MIN_CLIP,a.MAX_CLIP],2),o=t[0],i=t[1];return{activation:n,clipMax:i,clipMin:o,activationCacheKey:\\\"\\\".concat(n,\\\":\\\").concat(o,\\\",\\\").concat(i)}}return{activation:n,activationCacheKey:n}}},271:function(e,n,t){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var a in n=arguments[t])Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a]);return e},r.apply(this,arguments)},a=this&&this.__read||function(e,n){var t=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var r,a,o=t.call(e),i=[];try{for(;(void 0===n||n-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(t=o.return)&&t.call(o)}finally{if(a)throw a.error}}return i};Object.defineProperty(n,\\\"__esModule\\\",{value:!0}),n.parseGemmAttributes=n.gemm=void 0;var o=t(952),i=t(387),c=t(163);n.gemm=function(e,n){!function(e){if(!e)throw new Error(\\\"Input is missing\\\");if(e.length<2||e.length>3)throw new Error(\\\"Invaid input number.\\\");if(3===e.length&&e[2].dims.length>2)throw new Error(\\\"Invalid input shape of C\\\");if(1!==e[0].dataType||1!==e[1].dataType||3===e.length&&1!==e[2].dataType)throw new Error(\\\"Invalid input type.\\\");if(e[0].dataType!==e[1].dataType||3===e.length&&e[0].dataType!==e[2].dataType)throw new Error(\\\"Input types are mismatched\\\")}(e.inputs),e.compute(function(e,n){var t={name:\\\"Gemm\\\",inputTypes:3===e.length?[c.GpuDataType.default,c.GpuDataType.default,c.GpuDataType.default]:[c.GpuDataType.default,c.GpuDataType.default],cacheHint:n.cacheKey};return r(r({},t),{get:function(){return function(e,n,t){var i=n[0].dims.slice(),u=n[1].dims.slice(),s=a(o.GemmUtil.getShapeOfGemmResult(i,t.transA,u,t.transB,3===n.length?n[2].dims:void 0),3),l=s[0],f=s[1],p=s[2],d=[l,f];if(!d)throw new Error(\\\"Can't use gemm on the given tensors\\\");var h=o.ShapeUtil.size(d),g=\\\"\\\";t.transA&&t.transB?g=\\\"value += a[k * M + m] * b[n * K + k];\\\":t.transA&&!t.transB?g=\\\"value += a[k * M + m] * b[k * N + n];\\\":!t.transA&&t.transB?g=\\\"value += a[m * K + k] * b[n * K + k];\\\":t.transA||t.transB||(g=\\\"value += a[m * K + k] * b[k * N + n];\\\");var v=\\\"f32\\\",m=1===t.alpha?\\\"\\\":\\\"value *= alpha;\\\",y=3===n.length?\\\"value += beta * c[\\\".concat(function(e,n,t){if(0===t.length)return\\\"0u\\\";var r=1===t.length&&1!==e||2===t.length&&t[0]!==e,a=t[t.length-1]!==n,o=\\\"0u\\\";return r||(o+=\\\"+ m * \\\".concat(t[t.length-1],\\\"u\\\")),a||(o+=\\\"+n\\\"),o}(l,f,n[2].dims),\\\"];\\\"):\\\"\\\",b=[\\\"@group(0) @binding(0) var<storage, read> a : array<\\\".concat(v,\\\">;\\\"),\\\"@group(0) @binding(1) var<storage, read> b : array<\\\".concat(v,\\\">;\\\")];return 3===n.length&&b.push(\\\"@group(0) @binding(2) var<storage, read> c : array<\\\".concat(v,\\\">;\\\")),r(r({},e),{outputs:[{dims:d,dataType:n[0].dataType,gpuDataType:c.GpuDataType.default}],getShaderSource:function(e){return\\\"\\\\n  const M: u32 = \\\".concat(l,\\\"u;\\\\n  const N: u32 = \\\").concat(f,\\\"u;\\\\n  const K: u32 = \\\").concat(p,\\\"u;\\\\n  const alpha = \\\").concat(v,\\\"(\\\").concat(t.alpha,\\\");\\\\n  const beta = \\\").concat(v,\\\"(\\\").concat(t.beta,\\\");\\\\n\\\\n  \\\").concat(b.join(\\\"\\\\n\\\"),\\\"\\\\n  @group(0) @binding(\\\").concat(n.length,\\\") var<storage, read_write> output : array<\\\").concat(v,\\\">;\\\\n\\\\n  \\\").concat(e.mainStart(),\\\"\\\\n    \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(h),\\\"\\\\n\\\\n    let m = global_id.x / N;\\\\n    let n = global_id.x % N;\\\\n\\\\n    var value = \\\").concat(v,\\\"(0);\\\\n    for (var k: u32 = 0u; k<\\\").concat(p,\\\"u; k++) {\\\\n      \\\").concat(g,\\\"\\\\n    }\\\\n\\\\n    \\\").concat(m,\\\"\\\\n    \\\").concat(y,\\\"\\\\n    output[global_id.x] = value;\\\\n\\\\n  }\\\")},dispatchGroup:function(){return{x:Math.ceil(h/64)}}})}(t,e,n)}})}(e.inputs,n))},n.parseGemmAttributes=function(e){return(0,i.createAttributeWithCacheKey)(e)}},522:function(e,n,t){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var a in n=arguments[t])Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a]);return e},r.apply(this,arguments)};Object.defineProperty(n,\\\"__esModule\\\",{value:!0}),n.matMul=n.createMatmulProgramInfoLoader=void 0;var a=t(952),o=t(163),i=t(997);n.createMatmulProgramInfoLoader=function(e,n){var t,c,u=(t=e.length>2,c=n.activationCacheKey,{name:\\\"MatMul\\\",inputTypes:t?[o.GpuDataType.default,o.GpuDataType.default,o.GpuDataType.default]:[o.GpuDataType.default,o.GpuDataType.default],cacheHint:c});return r(r({},u),{get:function(){return function(e,n,t){var c=n[0].dims,u=n[1].dims,s=a.BroadcastUtil.calcShape(c,u,!0);if(!s)throw new Error(\\\"Can't use matmul on the given tensors\\\");var l=a.ShapeUtil.size(s),f=\\\"f32\\\",p=(0,i.getActicationSnippet)(t),d=p.activationFunction,h=p.applyActivation,g=s[s.length-2],v=c[c.length-1],m=s[s.length-1];return r(r({},e),{outputs:[{dims:s,dataType:n[0].dataType,gpuDataType:o.GpuDataType.default}],getShaderSource:function(e){return\\\"\\\\n  const M: u32 = \\\".concat(g,\\\"u;\\\\n  const N: u32 = \\\").concat(m,\\\"u;\\\\n  const K: u32 = \\\").concat(v,\\\"u;\\\\n\\\\n  @group(0) @binding(0) var<storage, read> a : array<\\\").concat(f,\\\">;\\\\n  @group(0) @binding(1) var<storage, read> b : array<\\\").concat(f,\\\">;\\\\n  @group(0) @binding(2) var<storage, read_write> output : array<\\\").concat(f,\\\">;\\\\n\\\\n  \\\").concat(d,\\\"\\\\n\\\\n  \\\").concat(e.mainStart(),\\\"\\\\n    \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(l),\\\"\\\\n\\\\n    let stack = global_idx / (M * N);\\\\n    let mn = global_idx % (M * N);\\\\n    let n = global_idx % N;\\\\n    let m = mn / N;\\\\n\\\\n    let offsetA = stack * (M * K);\\\\n    let offsetB = stack * (K * N);\\\\n\\\\n    var value = \\\").concat(f,\\\"(0);\\\\n    for (var k: u32 = 0u; k<\\\").concat(v,\\\"u; k++) {\\\\n      value += a[offsetA + m * K + k] * b[offsetB + k * N + n];\\\\n    }\\\\n    \\\").concat(h,\\\"\\\\n    output[global_idx] = value;\\\\n  }\\\")},dispatchGroup:function(){return{x:Math.ceil(l/64)}}})}(u,e,n)}})},n.matMul=function(e){!function(e){if(!e||2!==e.length)throw new Error(\\\"MatMul requires 2 inputs.\\\");if(e[0].dims[e[0].dims.length-1]!==e[1].dims[e[1].dims.length-2])throw new Error(\\\"shared dimension does not match.\\\");if(1!==e[0].dataType||1!==e[1].dataType)throw new Error(\\\"inputs should be float type\\\")}(e.inputs),e.compute((0,n.createMatmulProgramInfoLoader)(e.inputs,{activation:\\\"\\\",activationCacheKey:\\\"\\\"}))}},262:function(e,n,t){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var a in n=arguments[t])Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a]);return e},r.apply(this,arguments)},a=this&&this.__read||function(e,n){var t=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var r,a,o=t.call(e),i=[];try{for(;(void 0===n||n-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(t=o.return)&&t.call(o)}finally{if(a)throw a.error}}return i};Object.defineProperty(n,\\\"__esModule\\\",{value:!0}),n.globalMaxPool=n.parseGlobalMaxPoolAttributes=n.parseMaxPoolAttributes=n.maxPool=n.globalAveragePool=n.parseGlobalAveragePoolAttributes=n.averagePool=n.parseAveragePoolAttributes=void 0;var o=t(952),i=t(387),c=t(163),u=t(75),s=function(e){if(!e||1!==e.length)throw new Error(\\\"Pool ops requires 1 input.\\\");if(4!==e[0].dims.length)throw new Error(\\\"Pool ops supports 2-D inputs only for now.\\\");if(1!==e[0].dataType)throw new Error(\\\"Invalid input type.\\\")},l=function(e,n,t){var r=\\\"NHWC\\\"===n.format,a=r?[e[0].dims[0],e[0].dims[3],e[0].dims[1],e[0].dims[2]]:e[0].dims.slice(),i=Object.hasOwnProperty.call(n,\\\"dilations\\\"),c=n.kernelShape.slice(),u=n.strides.slice(),s=i?n.dilations.slice():[],l=n.pads.slice();o.PoolConvUtil.adjustPoolAttributes(t,a,c,u,s,l);var f=o.PoolConvUtil.computePoolOutputShape(t,a,u,s,c,l,n.autoPad),p=Object.assign({},n);return i?Object.assign(p,{kernelShape:c,strides:u,pads:l,dilations:s,cacheKey:n.cacheKey}):Object.assign(p,{kernelShape:c,strides:u,pads:l,cacheKey:n.cacheKey}),[p,r?[f[0],f[2],f[3],f[1]]:f]},f=function(e,n,t,r,a,i,c,s){var l=\\\"NHWC\\\"===r.format,f=n.length,p=o.ShapeUtil.size(t),d=(0,u.createIndicesHelper)(\\\"output\\\",t),h=(0,u.createIndicesHelper)(\\\"x\\\",n);if(r.kernelShape.length<=2){var g,v=r.kernelShape[r.kernelShape.length-1],m=r.strides[r.strides.length-1],y=r.pads[r.pads.length/2-1],b=f-(l?2:1),w=\\\"\\\",_=\\\"\\\";if(g=y+r.pads[r.pads.length-1]!==0?\\\"\\\\n              for (var i: u32 = 0u; i < \\\".concat(v,\\\"u; i++) {\\\\n                xIndices[\\\").concat(b,\\\"] = indices[\\\").concat(b,\\\"] * \\\").concat(m,\\\" - \\\").concat(y,\\\" + i;\\\\n                if (xIndices[\\\").concat(b,\\\"] < 0 || xIndices[\\\").concat(b,\\\"] >= \\\").concat(n[b],\\\") {\\\\n                  pad++;\\\\n                  continue;\\\\n                }\\\\n                let x_val = x[\\\").concat(h.i2oExpression(\\\"xIndices\\\"),\\\"];\\\\n                \\\").concat(a,\\\"\\\\n              }\\\"):\\\"\\\\n              for (var i: u32 = 0u; i < \\\".concat(v,\\\"u; i++) {\\\\n                xIndices[\\\").concat(b,\\\"] = indices[\\\").concat(b,\\\"] * \\\").concat(m,\\\" - \\\").concat(y,\\\" + i;\\\\n                let x_val = x[\\\").concat(h.i2oExpression(\\\"xIndices\\\"),\\\"];\\\\n                \\\").concat(a,\\\"\\\\n              }\\\"),2===r.kernelShape.length){var S=r.kernelShape[r.kernelShape.length-2],A=r.strides[r.strides.length-2],C=r.pads[r.pads.length/2-2],x=r.pads[r.pads.length-2],T=f-(l?3:2),P=n[T];w=C+x!==0?\\\"\\\\n                for (var j: u32 = 0u; j < \\\".concat(S,\\\"u; j++) {\\\\n                  xIndices[\\\").concat(T,\\\"] = indices[\\\").concat(T,\\\"] * \\\").concat(A,\\\" - \\\").concat(C,\\\" + j;\\\\n                  if (xIndices[\\\").concat(T,\\\"] < 0 || xIndices[\\\").concat(T,\\\"] >= \\\").concat(P,\\\") {\\\\n                    pad+= \\\").concat(v,\\\";\\\\n                    continue;\\\\n                  }\\\\n              \\\"):\\\"\\\\n                for (var j: u32 = 0u; j < \\\".concat(S,\\\"u; j++) {\\\\n                  xIndices[\\\").concat(T,\\\"] = indices[\\\").concat(T,\\\"] * \\\").concat(A,\\\" - \\\").concat(C,\\\" + j;\\\\n                \\\"),_=\\\"\\\\n              }\\\\n            \\\"}return\\\"\\\\n            @group(0) @binding(0) var<storage, read> x : array<\\\".concat(c,\\\">;\\\\n            @group(0) @binding(1) var<storage, read_write> output : array<\\\").concat(c,\\\">;\\\\n\\\\n            \\\").concat(d.o2iImpl,\\\"\\\\n            \\\").concat(h.i2oImpl,\\\"\\\\n\\\\n            \\\").concat(e.mainStart(),\\\"\\\\n              \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(p),\\\"\\\\n\\\\n              \\\").concat(d.indicesVariableDeclaration(\\\"indices\\\"),\\\"\\\\n              \\\").concat(d.o2iCall(\\\"global_idx\\\",\\\"indices\\\"),\\\"\\\\n              \\\").concat(d.indicesVariableDeclaration(\\\"xIndices\\\"),\\\"\\\\n              \\\").concat(d.o2iCall(\\\"global_idx\\\",\\\"xIndices\\\"),\\\"\\\\n\\\\n              var value: \\\").concat(c,\\\" = \\\").concat(c,\\\"(\\\").concat(s,\\\");\\\\n              var pad = 0;\\\\n              \\\").concat(w,\\\"\\\\n              \\\").concat(g,\\\"\\\\n              \\\").concat(_,\\\"\\\\n              \\\").concat(i,\\\"\\\\n\\\\n              output[global_idx] = value;\\\\n            }\\\")}if(l)throw new Error(\\\"Pooling with kernelShape.length > 2 is not supported for NHWC format.\\\");var E,O=o.ShapeUtil.size(r.kernelShape),I=o.ShapeUtil.computeStrides(r.kernelShape),k=I.length,R=r.pads.length;return E=r.pads.reduce((function(e,n){return e+n}))?\\\"\\\\n                if (xIndices[j] >= inputDims[j]) {\\\\n                  pad++;\\\\n                  isPad = true;\\\\n                  break;\\\\n                }\\\\n              }\\\\n              if (!isPad) {\\\\n                let x_val = x[\\\".concat(h.i2oExpression(\\\"xIndices\\\"),\\\"];\\\\n                \\\").concat(a,\\\"\\\\n              }\\\"):\\\"\\\\n              }\\\\n              let x_val = x[\\\".concat(h.i2oExpression(\\\"xIndices\\\"),\\\"];\\\\n              \\\").concat(a,\\\"\\\\n            \\\"),\\\"\\\\n            @group(0) @binding(0) var<storage, read> x : array<\\\".concat(c,\\\">;\\\\n            @group(0) @binding(1) var<storage, read_write> output : array<\\\").concat(c,\\\">;\\\\n\\\\n            \\\").concat(d.o2iImpl,\\\"\\\\n            \\\").concat(h.i2oImpl,\\\"\\\\n\\\\n            const pads = array<u32, \\\").concat(R,\\\">(\\\").concat(r.pads.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n            const inputDims = array<u32, \\\").concat(f,\\\">(\\\").concat(n.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n            const kernelStrides = array<u32, \\\").concat(k,\\\">(\\\").concat(I.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n            const strides = array<u32, \\\").concat(k,\\\">(\\\").concat(r.strides.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n\\\\n            \\\").concat(e.mainStart(),\\\"\\\\n              \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(p),\\\"\\\\n\\\\n              \\\").concat(d.indicesVariableDeclaration(\\\"indices\\\"),\\\"\\\\n              \\\").concat(d.o2iCall(\\\"global_idx\\\",\\\"indices\\\"),\\\"\\\\n              \\\").concat(d.indicesVariableDeclaration(\\\"xIndices\\\"),\\\"\\\\n              \\\").concat(d.o2iCall(\\\"global_idx\\\",\\\"xIndices\\\"),\\\"\\\\n\\\\n              var offsets: array<u32, \\\").concat(k,\\\">;\\\\n\\\\n              var value = \\\").concat(c,\\\"(\\\").concat(s,\\\");\\\\n              var pad = 0;\\\\n              var isPad = false;\\\\n\\\\n              for (var i: u32 = 0u; i < \\\").concat(O,\\\"u; i++) {\\\\n                var offset = i;\\\\n                for (var j = 0u; j < \\\").concat(k-1,\\\"u; j++) {\\\\n                  offsets[j] = offset / kernelStrides[j];\\\\n                  offset -= offsets[j] * kernelStrides[j];\\\\n                }\\\\n                offsets[\\\").concat(k-1,\\\"] = offset;\\\\n\\\\n                isPad = false;\\\\n                for (var j = \\\").concat(f-k,\\\"u; j < \\\").concat(f,\\\"u; j++) {\\\\n                  xIndices[j] = indices[j] * strides[j - \\\").concat(f-k,\\\"u]\\\\n                    + offsets[j - \\\").concat(f-k,\\\"u] - pads[j - 2u];\\\\n                  \\\").concat(E,\\\"\\\\n              }\\\\n              \\\").concat(i,\\\"\\\\n\\\\n              output[global_idx] = value;\\\\n            }\\\")},p=function(e){return{format:e.format,autoPad:[\\\"NOTSET\\\",\\\"VALID\\\",\\\"SAME_UPPER\\\",\\\"SAME_LOWER\\\"][e.auto_pad],ceilMode:e.ceil_mode,kernelShape:e.kernel_shape,strides:e.strides,pads:e.pads}},d=function(e,n,t,i){var u=a(l(e,i,t),2),s=u[0],p=u[1],d=o.ShapeUtil.size(s.kernelShape),h=\\\"f32\\\",g=\\\"\\\";return s.countIncludePad?g+=\\\"value /= \\\".concat(h,\\\"(\\\").concat(d,\\\");\\\"):g+=\\\"value /= \\\".concat(h,\\\"(\\\").concat(d,\\\" - pad);\\\"),r(r({},n),{outputs:[{dims:p,dataType:e[0].dataType,gpuDataType:c.GpuDataType.default}],getShaderSource:function(n){return f(n,e[0].dims,p,s,\\\"value += x_val;\\\",g,h,\\\"0.0\\\")},dispatchGroup:function(){return{x:Math.ceil(o.ShapeUtil.size(p)/64)}}})};n.parseAveragePoolAttributes=function(e){var n=0!==e.count_include_pad,t=p(e);if(0!==t.ceilMode)throw new Error(\\\"using ceil() in shape computation is not yet supported for AveragePool\\\");return(0,i.createAttributeWithCacheKey)(r({countIncludePad:n},t))},n.averagePool=function(e,n){s(e.inputs);var t={name:\\\"AveragePool\\\",inputTypes:[c.GpuDataType.default],cacheHint:n.cacheKey};e.compute(r(r({},t),{get:function(){return d(e.inputs,t,!1,n)}}))};var h={autoPad:\\\"\\\",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[],cacheKey:\\\"\\\"};n.parseGlobalAveragePoolAttributes=function(e){var n=e.format;return r(r({format:n},h),{cacheKey:n})},n.globalAveragePool=function(e,n){s(e.inputs);var t={name:\\\"GlobalAveragePool\\\",inputTypes:[c.GpuDataType.default],cacheHint:n.cacheKey};e.compute(r(r({},t),{get:function(){return d(e.inputs,t,!0,n)}}))};var g=function(e,n,t,i){var u=a(l(e,i,t),2),s=u[0],p=u[1];return r(r({},n),{outputs:[{dims:p,dataType:e[0].dataType,gpuDataType:c.GpuDataType.default}],getShaderSource:function(n){return f(n,e[0].dims,p,s,\\\"\\\\n      value = max(x_val, value);\\\\n    \\\",\\\"\\\",\\\"f32\\\",\\\"-1e5\\\")},dispatchGroup:function(){return{x:Math.ceil(o.ShapeUtil.size(p)/64)}}})};n.maxPool=function(e,n){s(e.inputs);var t={name:\\\"MaxPool\\\",inputTypes:[c.GpuDataType.default],cacheHint:n.cacheKey};e.compute(r(r({},t),{get:function(){return g(e.inputs,t,!1,n)}}))},n.parseMaxPoolAttributes=function(e){var n=e.storage_order,t=e.dilations,a=p(e);if(0!==n)throw new Error(\\\"column major storage order is not yet supported for MaxPool\\\");if(0!==a.ceilMode)throw new Error(\\\"using ceil() in shape computation is not yet supported for MaxPool\\\");return(0,i.createAttributeWithCacheKey)(r({storageOrder:n,dilations:t},a))},n.parseGlobalMaxPoolAttributes=function(e){var n=e.format;return r(r({format:n},h),{cacheKey:n})},n.globalMaxPool=function(e,n){s(e.inputs);var t={name:\\\"GlobalMaxPool\\\",inputTypes:[c.GpuDataType.default],cacheHint:n.cacheKey};e.compute(r(r({},t),{get:function(){return g(e.inputs,t,!0,n)}}))}},31:function(e,n,t){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var a in n=arguments[t])Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a]);return e},r.apply(this,arguments)};Object.defineProperty(n,\\\"__esModule\\\",{value:!0}),n.parseReduceAttributes=n.reduceSumSquare=n.reduceSum=n.reduceProd=n.reduceMin=n.reduceMean=n.reduceMax=n.reduceLogSumExp=n.reduceL2=n.reduceL1=n.reduceLogSum=void 0;var a=t(952),o=t(387),i=t(163),c=t(75),u=function(e){if(!e||0===e.length||e.length>2)throw new Error(\\\"Reduce op requires 1 or 2 inputs.\\\");if(2===e.length&&1!==e[1].dims.length)throw new Error(\\\"Invalid axes input dims.\\\");if(1!==e[0].dataType)throw new Error(\\\"Invalid input type.\\\")},s=function(){return[\\\"\\\",\\\"\\\",\\\"value = _A[inputIdx];\\\",\\\"\\\"]},l=function(e,n,t,u){var l=1===e.length?t:function(e,n){var t=[];return e[1].dims[0]>0&&e[1].getBigInt64Array().forEach((function(e){return t.push(Number(e))})),(0,o.createAttributeWithCacheKey)({axes:t,keepDims:n.keepDims,noopWithEmptyAxes:n.noopWithEmptyAxes})}(e,t),f={name:n,inputTypes:[i.GpuDataType.default],cacheHint:l.cacheKey};return r(r({},f),{get:function(){return function(e,n,t,o){for(var u=[],s=n[0].dims,l=[],f=a.ShapeUtil.normalizeAxes(t.axes,n[0].dims.length),p=n[0].dims.length-(t.keepDims?0:f.length),d=o(n,f),h=(0,c.createIndicesHelper)(\\\"input\\\",s),g=\\\"\\\"===d[1]?\\\"\\\":\\\"let inputIdx = \\\".concat(h.i2oExpression(\\\"inputIndices\\\"),\\\";\\\"),v=\\\"\\\\n          let inputIdx = \\\".concat(h.i2oExpression(\\\"inputIndices\\\"),\\\";\\\\n          \\\").concat(d[2],\\\";\\\"),m=!t.noopWithEmptyAxes&&0===t.axes.length,y=0;y<n[0].dims.length;y++)m||f.indexOf(y)>=0?(t.keepDims&&u.push(1),v=\\\"for(var j\\\".concat(y,\\\": u32 = 0; j\\\").concat(y,\\\" < \\\").concat(n[0].dims[y],\\\"; j\\\").concat(y,\\\"++) {\\\\n                            inputIndices[\\\").concat(y,\\\"] = j\\\").concat(y,\\\";\\\\n                            \\\").concat(v,\\\"\\\\n                          }\\\")):(p>1?l.push(\\\"inputIndices[\\\".concat(y,\\\"] = outputIndices[\\\").concat(u.length,\\\"];\\\")):l.push(\\\"inputIndices[\\\".concat(y,\\\"] = outputIndices;\\\")),u.push(n[0].dims[y]));var b=(0,c.createIndicesHelper)(\\\"output\\\",u),w=a.ShapeUtil.size(u),_=\\\"f32\\\";return r(r({},e),{getShaderSource:function(e){return\\\"\\\\n          @group(0) @binding(0) var<storage, read> _A : array<\\\".concat(_,\\\">;\\\\n          @group(0) @binding(1) var<storage, read_write> output : array<\\\").concat(_,\\\">;\\\\n\\\\n          \\\").concat(b.o2iImpl,\\\"\\\\n          \\\").concat(h.i2oImpl,\\\"\\\\n\\\\n          \\\").concat(e.mainStart(),\\\"\\\\n          \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(w),\\\"\\\\n          \\\").concat(h.indicesVariableDeclaration(\\\"inputIndices\\\"),\\\"\\\\n          \\\").concat(b.indicesVariableDeclaration(\\\"outputIndices\\\"),\\\"\\\\n          \\\").concat(b.o2iCall(\\\"global_idx\\\",\\\"outputIndices\\\"),\\\"\\\\n\\\\n          var value = \\\").concat(_,\\\"(0);\\\\n\\\\n          \\\").concat(l.join(\\\"\\\\n\\\"),\\\"\\\\n          \\\").concat(d[0],\\\"       // init ops for reduce max/min\\\\n          \\\").concat(g,\\\"\\\\n          \\\").concat(d[1],\\\"\\\\n          \\\").concat(v,\\\"\\\\n          \\\").concat(d[3],\\\"       // final computation for reduce mean\\\\n          output[global_idx] = value;\\\\n        }\\\")},outputs:[{dims:u,dataType:n[0].dataType,gpuDataType:i.GpuDataType.default}],dispatchGroup:function(){return{x:Math.ceil(w/64)}}})}(f,[e[0]],l,l.noopWithEmptyAxes&&0===l.axes.length?s:u)}})};n.reduceLogSum=function(e,n){u(e.inputs),e.compute(l(e.inputs,\\\"ReduceLogSum\\\",n,(function(){return[\\\"value = 0.0;\\\",\\\"\\\",\\\"value += _A[inputIdx];\\\",\\\"value = log(value);\\\"]})),{inputs:[0]})},n.reduceL1=function(e,n){u(e.inputs),e.compute(l(e.inputs,\\\"ReduceL1\\\",n,(function(){return[\\\"value = 0.0;\\\",\\\"\\\",\\\"value += abs(_A[inputIdx]);\\\",\\\"\\\"]})),{inputs:[0]})},n.reduceL2=function(e,n){u(e.inputs),e.compute(l(e.inputs,\\\"ReduceL2\\\",n,(function(){return[\\\"var t = f32(0); value = 0.0;\\\",\\\"\\\",\\\"t = _A[inputIdx]; value += (t * t);\\\",\\\"value = sqrt(value);\\\"]})),{inputs:[0]})},n.reduceLogSumExp=function(e,n){u(e.inputs),e.compute(l(e.inputs,\\\"ReduceLogSumExp\\\",n,(function(){return[\\\"value = 0.0;\\\",\\\"\\\",\\\"value += exp(_A[inputIdx]);\\\",\\\"value = log(value);\\\"]})),{inputs:[0]})},n.reduceMax=function(e,n){u(e.inputs),e.compute(l(e.inputs,\\\"ReduceMax\\\",n,(function(e,n){for(var t=[],r=0;r<e[0].dims.length;r++)(n.indexOf(r)>=0||0===n.length)&&t.push(\\\"inputIndices[\\\".concat(r,\\\"] = 0;\\\"));return[\\\"\\\".concat(t.join(\\\"\\\\n\\\")),\\\"value = _A[inputIdx];\\\",\\\"value = max(value, _A[inputIdx]);\\\",\\\"\\\"]})),{inputs:[0]})},n.reduceMean=function(e,n){u(e.inputs),e.compute(l(e.inputs,\\\"ReduceMean\\\",n,(function(e,n){for(var t=1,r=0;r<e[0].dims.length;r++)(n.indexOf(r)>=0||0===n.length)&&(t*=e[0].dims[r]);return[\\\"value = 0.0;\\\",\\\"\\\",\\\"value += _A[inputIdx];\\\",\\\"value = value / \\\".concat(t,\\\".;\\\")]})),{inputs:[0]})},n.reduceMin=function(e,n){u(e.inputs),e.compute(l(e.inputs,\\\"ReduceMin\\\",n,(function(e,n){for(var t=[],r=0;r<e[0].dims.length;r++)(n.indexOf(r)>=0||0===n.length)&&t.push(\\\"inputIndices[\\\".concat(r,\\\"] = 0;\\\"));return[\\\"\\\".concat(t.join(\\\"\\\\n\\\")),\\\"value = _A[inputIdx];\\\",\\\"value = min(value, _A[inputIdx]);\\\",\\\"\\\"]})),{inputs:[0]})},n.reduceProd=function(e,n){u(e.inputs),e.compute(l(e.inputs,\\\"ReduceProd\\\",n,(function(){return[\\\"value = 1.0;\\\",\\\"\\\",\\\"value *= _A[inputIdx];\\\",\\\"\\\"]})),{inputs:[0]})},n.reduceSum=function(e,n){u(e.inputs),e.compute(l(e.inputs,\\\"ReduceSum\\\",n,(function(){return[\\\"value = 0.0;\\\",\\\"\\\",\\\"value += _A[inputIdx];\\\",\\\"\\\"]})),{inputs:[0]})},n.reduceSumSquare=function(e,n){u(e.inputs),e.compute(l(e.inputs,\\\"ReduceSumSquare\\\",n,(function(){return[\\\"var t = f32(0); value = 0.0;\\\",\\\"\\\",\\\"t = _A[inputIdx]; value += t * t;\\\",\\\"\\\"]})),{inputs:[0]})},n.parseReduceAttributes=function(e){return(0,o.createAttributeWithCacheKey)(e)}},101:function(e,n,t){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var a in n=arguments[t])Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a]);return e},r.apply(this,arguments)},a=this&&this.__read||function(e,n){var t=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var r,a,o=t.call(e),i=[];try{for(;(void 0===n||n-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(t=o.return)&&t.call(o)}finally{if(a)throw a.error}}return i},o=this&&this.__spreadArray||function(e,n,t){if(t||2===arguments.length)for(var r,a=0,o=n.length;a<o;a++)!r&&a in n||(r||(r=Array.prototype.slice.call(n,0,a)),r[a]=n[a]);return e.concat(r||Array.prototype.slice.call(n))};Object.defineProperty(n,\\\"__esModule\\\",{value:!0}),n.parseSliceAttributes=n.slice=void 0;var i=t(952),c=t(387),u=t(163),s=t(75),l=function(e,n){var t=[];if(e.length>n)if(7===e[n].dataType)e[n].getBigInt64Array().forEach((function(e){return t.push(Number(e))}));else{if(6!==e[1].dataType)throw new Error(\\\"Input \\\".concat(n,\\\" must be an array of int32 or int64\\\"));e[n].getInt32Array().forEach((function(e){return t.push(Number(e))}))}return t},f=function(e,n,t,r,a){var o=e;return e<0&&(o+=t[r[n]]),a[n]<0?Math.max(0,Math.min(o,t[r[n]]-1)):Math.max(0,Math.min(o,t[r[n]]))},p=function(e,n){var t=function(e,n){if(e.length>1){var t=l(e,1),r=l(e,2),i=l(e,3);return 0===i.length&&(i=o([],a(Array(e[0].dims.length).keys()),!1)),(0,c.createAttributeWithCacheKey)({starts:t,ends:r,axes:i})}return n}(e,n),p={name:\\\"Slice\\\",inputTypes:[u.GpuDataType.default],cacheHint:t.cacheKey+(e.length>4?\\\"steps_\\\"+e[4].dims.toString():\\\"\\\")};return r(r({},p),{get:function(){return function(e,n,t){var c=n[0].dims,p=i.ShapeUtil.size(c),d=t.axes.length>0?i.ShapeUtil.normalizeAxes(t.axes,c.length):o([],a(Array(c.length).keys()),!1),h=l(n,4);h.forEach((function(e){return 0!==e||function(){throw new Error(\\\"step cannot be 0\\\")}})),0===h.length&&(h=Array(d.length).fill(1));var g=t.starts.map((function(e,n){return f(e,n,c,d,h)})),v=t.ends.map((function(e,n){return f(e,n,c,d,h)}));if(d.length!==c.length)for(var m=0;m<c.length;++m)d.includes(m)||(g.splice(m,0,0),v.splice(m,0,c[m]),h.splice(m,0,1));var y=h.map((function(e){return Math.sign(e)}));h.forEach((function(e,n,t){if(e<0){var r=(v[n]-g[n])/e,a=g[n],o=a+r*h[n];g[n]=o,v[n]=a,t[n]=-e}}));var b=c.slice(0);d.forEach((function(e,n){b[e]=Math.ceil((v[e]-g[e])/h[e])}));var w={dims:b,dataType:n[0].dataType,gpuDataType:u.GpuDataType.default},_=(0,s.createIndicesHelper)(\\\"output\\\",b),S=(0,s.createIndicesHelper)(\\\"input\\\",c),A=i.ShapeUtil.size(b);return r(r({},e),{getShaderSource:function(e){return\\\"\\\\n        @group(0) @binding(0) var<storage, read> input: array<\\\".concat(\\\"f32\\\",\\\">;\\\\n        @group(0) @binding(1) var<storage, read_write> output: array<\\\").concat(\\\"f32\\\",\\\">;\\\\n        const signs = array<i32, \\\").concat(y.length,\\\">(\\\").concat(y.map((function(e){return\\\"\\\".concat(e,\\\"i\\\")})).join(\\\",\\\"),\\\");\\\\n        const starts = array<u32, \\\").concat(g.length,\\\">(\\\").concat(g.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n        const ends = array<u32, \\\").concat(v.length,\\\">(\\\").concat(v.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n        const steps = array<u32, \\\").concat(h.length,\\\">(\\\").concat(h.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n        const inputShape = array<u32, \\\").concat(c.length,\\\">(\\\").concat(c.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n\\\\n        \\\").concat(_.o2iImpl,\\\"\\\\n        \\\").concat(S.i2oImpl,\\\"\\\\n        \\\").concat(function(e,n){var t=(0,s.createIndicesHelper)(\\\"output\\\",n),r=(0,s.createIndicesHelper)(\\\"input\\\",e);return\\\"fn calculateInputIndices(outputIndices: \\\".concat(t.iType,\\\") -> \\\").concat(r.iType,\\\" {\\\\n          \\\").concat(r.indicesVariableDeclaration(\\\"inputIndices\\\"),\\\";\\\\n          var carry = 0u;\\\\n          for (var i = \\\").concat(e.length,\\\"; i >= 0; i--) {\\\\n            var outputIndex = \\\").concat(1===n.length?\\\"outputIndices\\\":\\\"outputIndices[i]\\\",\\\";\\\\n            var inputIndex = outputIndex * steps[i] + starts[i] + carry;\\\\n            carry = inputIndex / inputShape[i];\\\\n            inputIndex = inputIndex % inputShape[i];\\\\n            if (signs[i] < 0) {\\\\n              inputIndex = inputShape[i] - inputIndex - 1u + starts[i];\\\\n            }\\\\n            \\\").concat(1===e.length?\\\"inputIndices\\\":\\\"inputIndices[i]\\\",\\\" = inputIndex;\\\\n          }\\\\n          return inputIndices;\\\\n      }\\\")}(c,b),\\\"\\\\n        \\\").concat(e.mainStart(),\\\"\\\\n          \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(A),\\\"\\\\n          \\\").concat(_.indicesVariableDeclaration(\\\"outputIndices\\\"),\\\"\\\\n          \\\").concat(_.o2iCall(\\\"global_idx\\\",\\\"outputIndices\\\"),\\\"\\\\n          \\\").concat(S.indicesVariableDeclaration(\\\"inputIndices\\\"),\\\"\\\\n          inputIndices = calculateInputIndices(outputIndices);\\\\n          output[global_idx] = input[\\\").concat(S.i2oExpression(\\\"inputIndices\\\"),\\\"];\\\\n      }\\\")},outputs:[w],dispatchGroup:function(){return{x:Math.ceil(p/64)}}})}(p,e,t)}})};n.slice=function(e,n){!function(e,n){if(!e||e.length<1)throw new Error(\\\"too few inputs\\\");if(0!==n.axes.length){if(n.axes.length!==n.starts.length||n.axes.length!==n.ends.length)throw new Error(\\\"axes, starts and ends must have the same length\\\")}else if(n.starts.length!==n.ends.length)throw new Error(\\\"starts and ends must have the same length\\\");e.slice(1).forEach((function(n,t){if(6!==e[t+1].dataType&&7!==e[t+1].dataType)throw new Error(\\\"Input \\\".concat(t,\\\" must be an array of int32 or int64\\\"))}))}(e.inputs,n),e.compute(p(e.inputs,n),{inputs:[0]})},n.parseSliceAttributes=function(e){var n=e.starts,t=e.ends,r=e.axes;return(0,c.createAttributeWithCacheKey)({starts:n,ends:t,axes:r,steps:[]})}},67:function(e,n,t){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var a in n=arguments[t])Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a]);return e},r.apply(this,arguments)};Object.defineProperty(n,\\\"__esModule\\\",{value:!0}),n.parseSplitAttributes=n.split=void 0;var a=t(952),o=t(387),i=t(163),c=t(75);n.split=function(e,n){!function(e){if(!e||e.length<1)throw new Error(\\\"too few inputs\\\")}(e.inputs),e.compute(function(e,n){var t=1===e.length?n:function(e,n){var t=[];return e[1].dims[0]>0&&e[1].getBigInt64Array().forEach((function(e){return t.push(Number(e))})),(0,o.createAttributeWithCacheKey)({numOutputs:n.numOutputs,axis:n.axis,splitSizes:t})}(e,n),u={name:\\\"Split\\\",inputTypes:[i.GpuDataType.default],cacheHint:t.cacheKey};return r(r({},u),{get:function(){return function(e,n,t,o){void 0===o&&(o=\\\"f32\\\");for(var u=n[0].dims,s=a.ShapeUtil.size(u),l=u.length,f=t.axis,p=f<0?u.length+f:f,d=new Array(t.numOutputs),h=new Array(t.numOutputs),g=(0,c.createIndicesHelper)(\\\"input\\\",u),v=new Array(t.numOutputs),m=[],y=[],b=0,w=0;w<t.numOutputs;w++){b+=t.splitSizes[w],v[w]=b,d[w]=\\\"@group(0) @binding(\\\".concat(w+1,\\\") var<storage, read_write> output\\\").concat(w,\\\" : array<\\\").concat(o,\\\">;\\\");var _=u.slice();_[t.axis]=t.splitSizes[w],y.push(_),h[w]=(0,c.createIndicesHelper)(\\\"output\\\".concat(w),y[w]),m.push({dims:y[w],dataType:n[0].dataType,gpuDataType:i.GpuDataType.default})}var S=l<2?\\\"indices\\\":\\\"indices[\\\".concat(p,\\\"]\\\");return r(r({},e),{getShaderSource:function(e){return\\\"\\\\n  @group(0) @binding(0) var<storage, read> input : array<\\\".concat(o,\\\">;\\\\n  \\\").concat(d.join(\\\"\\\\n\\\"),\\\"\\\\n  \\\").concat(g.o2iImpl,\\\"\\\\n  \\\").concat(h.map((function(e){return e.i2oImpl})).join(\\\"\\\\n\\\"),\\\"\\\\n  const sizeInConcatAxis = array<u32, \\\").concat(v.length,\\\">(\\\").concat(v.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n  \\\").concat((n=v.length,\\\"\\\\nfn calculateOutputIndex(index: u32) -> u32 {\\\\n    for (var i: u32 = 0u; i < \\\".concat(n,\\\"u; i += 1u ) {\\\\n    if (index < sizeInConcatAxis[i]) {\\\\n        return i;\\\\n    }\\\\n    }\\\\n    return \\\").concat(n,\\\"u;\\\\n}\\\")),\\\"\\\\n  \\\").concat(function(e){for(var n=e.length,t=[],r=0;r<n;++r){var a=\\\"output\\\".concat(r,\\\"[\\\").concat(e[r].i2oExpression(\\\"indices\\\",!0),\\\"] = input[global_idx];\\\");1===n?t.push(a):0===r?t.push(\\\"if (outputNumber == \\\".concat(r,\\\"u) { \\\").concat(a,\\\" }\\\")):r===n-1?t.push(\\\"else { \\\".concat(a,\\\" }\\\")):t.push(\\\"else if (outputNumber == \\\".concat(r,\\\") { \\\").concat(a,\\\" }\\\"))}return\\\"\\\\n      fn writeBufferData(outputNumber: u32, indices: ptr<function, \\\".concat(e[0].iType,\\\">, global_idx: u32) {\\\\n        \\\").concat(t.join(\\\"\\\\n\\\"),\\\"\\\\n      }\\\")}(h),\\\"\\\\n\\\\n  \\\").concat(e.mainStart(),\\\"\\\\n    \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(s),\\\"\\\\n\\\\n    \\\").concat(g.indicesVariableDeclaration(\\\"indices\\\"),\\\"\\\\n    \\\").concat(g.o2iCall(\\\"global_idx\\\",\\\"indices\\\"),\\\"\\\\n    let outputNumber = calculateOutputIndex(\\\").concat(S,\\\");\\\\n    if (outputNumber != 0) {\\\\n        \\\").concat(S,\\\" -= sizeInConcatAxis[outputNumber - 1u];\\\\n    }\\\\n    writeBufferData(outputNumber, &indices, global_idx);\\\\n  }\\\");var n},outputs:m,dispatchGroup:function(){return{x:Math.ceil(s/64)}}})}(u,[e[0]],n)}})}(e.inputs,n),{inputs:[0]})},n.parseSplitAttributes=function(e){var n=e.axis,t=e.splitSizes,r=e.numOutputs<0?t.length:e.numOutputs;if(r!==t.length)throw new Error(\\\"numOutputs and splitSizes lengh must be equal\\\");return(0,o.createAttributeWithCacheKey)({axis:n,numOutputs:r,splitSizes:t})}},625:function(e,n,t){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var a in n=arguments[t])Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a]);return e},r.apply(this,arguments)},a=this&&this.__read||function(e,n){var t=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var r,a,o=t.call(e),i=[];try{for(;(void 0===n||n-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(t=o.return)&&t.call(o)}finally{if(a)throw a.error}}return i},o=this&&this.__spreadArray||function(e,n,t){if(t||2===arguments.length)for(var r,a=0,o=n.length;a<o;a++)!r&&a in n||(r||(r=Array.prototype.slice.call(n,0,a)),r[a]=n[a]);return e.concat(r||Array.prototype.slice.call(n))};Object.defineProperty(n,\\\"__esModule\\\",{value:!0}),n.parseTransposeAttributes=n.transpose=n.createTransposeProgramInfo=n.transposeProgramMetadata=void 0;var i=t(952),c=t(387),u=t(163),s=t(75);n.transposeProgramMetadata={name:\\\"Transpose\\\",inputTypes:[u.GpuDataType.default]};var l=function(e,n){return n&&n.length!==e.length?o([],a(e.keys()),!1).reverse():n};n.createTransposeProgramInfo=function(e,t){var a=e.dims,o=l(a,t),c=function(e,n){return i.ShapeUtil.sortBasedOnPerm(e,l(e,n))}(a,o),f=a.length,p=i.ShapeUtil.size(c),d=(0,s.createIndicesHelper)(\\\"output\\\",c),h=(0,s.createIndicesHelper)(\\\"a\\\",a);return r(r({},n.transposeProgramMetadata),{outputs:[{dims:c,dataType:e.dataType,gpuDataType:u.GpuDataType.default}],getShaderSource:function(e){return\\\"\\\\n  @group(0) @binding(0) var<storage, read> a : array<\\\".concat(\\\"f32\\\",\\\">;\\\\n  @group(0) @binding(1) var<storage, read_write> output : array<\\\").concat(\\\"f32\\\",\\\">;\\\\n\\\\n  \\\").concat(function(e,n){var t=[];t.push(\\\"fn perm(a: ptr<function, array<u32, \\\".concat(n,\\\">>, i: ptr<function, array<u32, \\\").concat(n,\\\">>) {\\\"));for(var r=0;r<n;++r)t.push(\\\"\\\\t(*a)[\\\".concat(e[r],\\\"]=(*i)[\\\").concat(r,\\\"];\\\"));return t.push(\\\"\\\\t}\\\"),t.join(\\\"\\\\n\\\")}(o,f),\\\"\\\\n  \\\").concat(d.o2iImpl,\\\"\\\\n  \\\").concat(h.i2oImpl,\\\"\\\\n\\\\n  \\\").concat(e.mainStart(),\\\"\\\\n    \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(p),\\\"\\\\n\\\\n    \\\").concat(d.indicesVariableDeclaration(\\\"indices\\\"),\\\"\\\\n    \\\").concat(d.o2iCall(\\\"global_idx\\\",\\\"indices\\\"),\\\"\\\\n    \\\").concat(h.indicesVariableDeclaration(\\\"aIndices\\\"),\\\"\\\\n    perm(&aIndices, &indices);\\\\n\\\\n    output[global_idx] = a[\\\").concat(h.i2oExpression(\\\"aIndices\\\"),\\\"];\\\\n  }\\\")},dispatchGroup:function(){return{x:Math.ceil(p/64)}}})},n.transpose=function(e,t){!function(e){if(!e||1!==e.length)throw new Error(\\\"Transpose requires 1 input.\\\");if(1!==e[0].dataType)throw new Error(\\\"input should be float tensor\\\")}(e.inputs),e.compute(r(r({},n.transposeProgramMetadata),{cacheHint:t.cacheKey,get:function(){return(0,n.createTransposeProgramInfo)(e.inputs[0],t.perm)}}))},n.parseTransposeAttributes=function(e){return(0,c.createAttributeWithCacheKey)({perm:e.perm})}},302:function(e,n,t){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var a in n=arguments[t])Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a]);return e},r.apply(this,arguments)};Object.defineProperty(n,\\\"__esModule\\\",{value:!0}),n.thresholdedRelu=n.tanh=n.tan=n.sqrt=n.sinh=n.sin=n.sigmoid=n.relu=n.reciprocal=n.neg=n.leakyRelu=n.floor=n.exp=n.erf=n.elu=n.parseAlphaAttributes=n.cosh=n.cos=n.ceil=n.clip=n.clipV10=n.atanh=n.atan=n.asinh=n.asin=n.acosh=n.acos=n.abs=void 0;var a=t(952),o=t(387),i=t(163),c=function(e,n,t,o,c){var u={name:n,inputTypes:[i.GpuDataType.default],cacheHint:c};return r(r({},u),{get:function(){return function(e,n,t,o){return r(r({},e),{getShaderSource:function(e){return function(e,n,t,r){var a,o=Math.ceil(n/4);return a=\\\"string\\\"==typeof t?\\\"\\\".concat(t,\\\"(a)\\\"):t(\\\"a\\\"),\\\"\\\\n  @group(0) @binding(0) var<storage, read> inputData : array<vec4<f32>>;\\\\n  @group(0) @binding(1) var<storage, read_write> outputData : array<vec4<f32>>;\\\\n\\\\n  \\\".concat(null!=r?r:\\\"\\\",\\\"\\\\n\\\\n  \\\").concat(e.mainStart(),\\\"\\\\n    \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(o),\\\"\\\\n\\\\n    let a = inputData[global_idx];\\\\n    outputData[global_idx] = \\\").concat(a,\\\";\\\\n  }\\\")}(e,a.ShapeUtil.size(n.dims),t,o)},outputs:[{dims:n.dims,dataType:n.dataType,gpuDataType:i.GpuDataType.default}],dispatchGroup:function(e){return{x:Math.ceil(a.ShapeUtil.size(e[0].dims)/64/4)}}})}(u,e,t,o)}})};n.abs=function(e){e.compute(c(e.inputs[0],\\\"Abs\\\",\\\"abs\\\"))},n.acos=function(e){e.compute(c(e.inputs[0],\\\"Acos\\\",\\\"acos\\\"))},n.acosh=function(e){e.compute(c(e.inputs[0],\\\"Acosh\\\",\\\"acosh\\\"))},n.asin=function(e){e.compute(c(e.inputs[0],\\\"Asin\\\",\\\"asin\\\"))},n.asinh=function(e){e.compute(c(e.inputs[0],\\\"Asinh\\\",\\\"asinh\\\"))},n.atan=function(e){e.compute(c(e.inputs[0],\\\"Atan\\\",\\\"atan\\\"))},n.atanh=function(e){e.compute(c(e.inputs[0],\\\"Atanh\\\",\\\"atanh\\\"))},n.clipV10=function(e,n){e.compute(c(e.inputs[0],\\\"Clip\\\",(function(e){return\\\"clamp(\\\".concat(e,\\\", clip_min_, clip_max_)\\\")}),\\\"\\\\n    const clip_min_: vec4<f32> = vec4(f32(\\\".concat(n.min,\\\"));\\\\n    const clip_max_: vec4<f32> = vec4(f32(\\\").concat(n.max,\\\"));\\\\n\\\"),n.cacheKey),{inputs:[0]})},n.clip=function(e){var t,r,i,c=(r=(t=e.inputs).length>=2?t[1].getFloat32Array()[0]:a.MIN_CLIP,i=t.length>=3?t[2].getFloat32Array()[0]:a.MAX_CLIP,(0,o.createAttributeWithCacheKey)({min:r,max:i}));(0,n.clipV10)(e,c)},n.ceil=function(e){e.compute(c(e.inputs[0],\\\"Ceil\\\",\\\"ceil\\\"))},n.cos=function(e){e.compute(c(e.inputs[0],\\\"Cos\\\",\\\"cos\\\"))},n.cosh=function(e){e.compute(c(e.inputs[0],\\\"Cosh\\\",\\\"cosh\\\"))},n.parseAlphaAttributes=function(e){return(0,o.createAttributeWithCacheKey)(e)},n.elu=function(e,n){e.compute(c(e.inputs[0],\\\"Elu\\\",(function(e){return\\\"elu_vf32(\\\".concat(e,\\\")\\\")}),\\\"\\\\n  const elu_alpha_: f32 = f32(\\\".concat(n.alpha,\\\");\\\\n\\\\n  fn elu_f32(a: f32) -> f32 {\\\\n  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);\\\\n  }\\\\n\\\\n  fn elu_vf32(v: vec4<f32>) -> vec4<f32> {\\\\n  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));\\\\n  }\\\"),n.cacheKey))},n.erf=function(e){e.compute(c(e.inputs[0],\\\"Erf\\\",(function(e){return\\\"erf_vf32(\\\".concat(e,\\\")\\\")}),\\\"\\\\n  const r0: f32 = 0.3275911;\\\\n  const r1: f32 = 0.254829592;\\\\n  const r2: f32 = -0.284496736;\\\\n  const r3: f32 = 1.421413741;\\\\n  const r4: f32 = -1.453152027;\\\\n  const r5: f32 = 1.061405429;\\\\n\\\\n  fn erf_vf32(v: vec4<f32>) -> vec4<f32> {\\\\n    let absv = abs(v);\\\\n    let x = 1.0 / (1.0 + r0 * absv);\\\\n    return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));\\\\n  }\\\"))},n.exp=function(e){e.compute(c(e.inputs[0],\\\"Exp\\\",\\\"exp\\\"))},n.floor=function(e){e.compute(c(e.inputs[0],\\\"Floor\\\",\\\"floor\\\"))},n.leakyRelu=function(e,n){e.compute(c(e.inputs[0],\\\"LeakyRelu\\\",(function(e){return\\\"select(leaky_relu_alpha_ * \\\".concat(e,\\\", \\\").concat(e,\\\", \\\").concat(e,\\\" >= vec4<f32>(0.0))\\\")}),\\\"const leaky_relu_alpha_: f32 = f32(\\\".concat(n.alpha,\\\");\\\"),n.cacheKey))},n.neg=function(e){e.compute(c(e.inputs[0],\\\"Neg\\\",(function(e){return\\\"-\\\".concat(e)})))},n.reciprocal=function(e){e.compute(c(e.inputs[0],\\\"Reciprocal\\\",(function(e){return\\\"1.0/\\\".concat(e)})))},n.relu=function(e){e.compute(c(e.inputs[0],\\\"Relu\\\",(function(e){return\\\"select(vec4<f32>(0.0), \\\".concat(e,\\\", \\\").concat(e,\\\" > vec4<f32>(0.0))\\\")})))},n.sigmoid=function(e){e.compute(c(e.inputs[0],\\\"Sigmoid\\\",(function(e){return\\\"(1.0 / (1.0 + exp(-\\\".concat(e,\\\")))\\\")})))},n.sin=function(e){e.compute(c(e.inputs[0],\\\"Sin\\\",\\\"sin\\\"))},n.sinh=function(e){e.compute(c(e.inputs[0],\\\"Sinh\\\",\\\"sinh\\\"))},n.sqrt=function(e){e.compute(c(e.inputs[0],\\\"Sqrt\\\",\\\"sqrt\\\"))},n.tan=function(e){e.compute(c(e.inputs[0],\\\"Tan\\\",\\\"tan\\\"))},n.tanh=function(e){e.compute(c(e.inputs[0],\\\"Tanh\\\",\\\"tanh\\\"))},n.thresholdedRelu=function(e,n){return e.compute(c(e.inputs[0],\\\"ThresholdedRelu\\\",(function(e){return\\\"select(vec4<f32>(0.0), \\\".concat(e,\\\", \\\").concat(e,\\\" > thresholded_relu_alpha_)\\\")}),\\\"const thresholded_relu_alpha_: vec4<f32> = vec4<f32>(\\\".concat(n.alpha,\\\");\\\"),n.cacheKey)),0}},305:function(e,n,t){\\\"use strict\\\";var r=this&&this.__values||function(e){var n=\\\"function\\\"==typeof Symbol&&Symbol.iterator,t=n&&e[n],r=0;if(t)return t.call(e);if(e&&\\\"number\\\"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(n?\\\"Object is not iterable.\\\":\\\"Symbol.iterator is not defined.\\\")},a=this&&this.__read||function(e,n){var t=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var r,a,o=t.call(e),i=[];try{for(;(void 0===n||n-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(t=o.return)&&t.call(o)}finally{if(a)throw a.error}}return i},o=this&&this.__spreadArray||function(e,n,t){if(t||2===arguments.length)for(var r,a=0,o=n.length;a<o;a++)!r&&a in n||(r||(r=Array.prototype.slice.call(n,0,a)),r[a]=n[a]);return e.concat(r||Array.prototype.slice.call(n))};Object.defineProperty(n,\\\"__esModule\\\",{value:!0}),n.ProgramManager=void 0;var i=t(955),c=t(75),u=function(){function e(e){this.backend=e,this.repo=new Map,this.attributesBound=!1}return e.prototype.getArtifact=function(e){return this.repo.get(e)},e.prototype.setArtifact=function(e,n){this.repo.set(e,n)},e.prototype.run=function(e,n,t,i){var c,u,s,l,f=this,p=this.backend.device,d=this.backend.getComputePassEncoder();this.backend.profilingEnabled&&d.writeTimestamp(this.backend.profilingQuerySet,0),d.setPipeline(e.computePipeline);var h=[];try{for(var g=r(n),v=g.next();!v.done;v=g.next()){var m=v.value;h.push({binding:h.length,resource:{buffer:m.buffer}})}}catch(e){c={error:e}}finally{try{v&&!v.done&&(u=g.return)&&u.call(g)}finally{if(c)throw c.error}}try{for(var y=r(t),b=y.next();!b.done;b=y.next()){var w=b.value;h.push({binding:h.length,resource:{buffer:w.buffer}})}}catch(e){s={error:e}}finally{try{b&&!b.done&&(l=y.return)&&l.call(y)}finally{if(s)throw s.error}}var _=p.createBindGroup({layout:e.computePipeline.getBindGroupLayout(0),entries:h});if(d.setBindGroup(0,_),d.dispatchWorkgroups.apply(d,o([],a(i),!1)),this.backend.pendingDispatchNumber++,this.backend.profilingEnabled){d.writeTimestamp(this.backend.profilingQuerySet,1);var S=this.backend.gpuDataManager.create(16,GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE),A=this.backend.gpuDataManager.create(16,GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST);this.backend.endComputePass(),this.backend.getCommandEncoder().resolveQuerySet(this.backend.profilingQuerySet,0,2,S.buffer,0),this.backend.getCommandEncoder().copyBufferToBuffer(S.buffer,0,A.buffer,0,16),this.backend.flush();var C=this.backend.currentKernelId,x=this.backend.kernels.get(C)[0];A.buffer.mapAsync(GPUMapMode.READ).then((function(){var e=new BigUint64Array(A.buffer.getMappedRange()),n=e[0],t=e[1];A.buffer.unmap(),void 0===f.backend.profilingTimeBase&&(f.backend.profilingTimeBase=n);var r=Number(n-f.backend.profilingTimeBase),a=Number(t-f.backend.profilingTimeBase);if(!Number.isSafeInteger(r)||!Number.isSafeInteger(a))throw new RangeError(\\\"incorrect timestamp range\\\");f.backend.gpuDataManager.release(S.id),f.backend.gpuDataManager.release(A.id),console.log('[profiling] kernel \\\"'.concat(C,\\\"|\\\").concat(x,'\\\" execution time: ').concat(a-r,\\\" ns\\\"))}))}this.backend.pendingDispatchNumber>=16&&this.backend.flush()},e.prototype.dispose=function(){},e.prototype.build=function(e,n){var t=this.backend.device,r=e.getShaderSource((0,c.createShaderHelper)(n)),a=t.createShaderModule({code:r});return(0,i.LOG_DEBUG)(\\\"verbose\\\",(function(){return\\\"[WebGPU] shader code: \\\".concat(r)})),{programInfo:e,computePipeline:t.createComputePipeline({compute:{module:a,entryPoint:\\\"main\\\"},layout:\\\"auto\\\"})}},e.prototype.normalizeDispatchGroupSize=function(e){var n=\\\"number\\\"==typeof e?e:e.x,t=\\\"number\\\"==typeof e?1:e.y||1,r=\\\"number\\\"==typeof e?1:e.z||1,a=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(n<=a&&t<=a&&r<=a)return[n,t,r];var o=n*t*r,i=Math.ceil(Math.sqrt(o));if(i>a){if((i=Math.ceil(Math.cbrt(o)))>a)throw new Error(\\\"Total dispatch size exceeds WebGPU maximum.\\\");return[i,i,i]}return[i,i,1]},e}();n.ProgramManager=u},163:function(e,n){\\\"use strict\\\";var t;Object.defineProperty(n,\\\"__esModule\\\",{value:!0}),n.GpuDataType=void 0,(t=n.GpuDataType||(n.GpuDataType={}))[t.default=0]=\\\"default\\\",t[t.upload=1]=\\\"upload\\\",t[t.profile=2]=\\\"profile\\\"},918:function(e,n,t){\\\"use strict\\\";Object.defineProperty(n,\\\"__esModule\\\",{value:!0}),n.setRunOptions=void 0;var r=t(263),a=t(497);n.setRunOptions=function(e){var n=(0,r.getInstance)(),t=0,o=[],i=e||{};try{if(void 0===(null==e?void 0:e.logSeverityLevel))i.logSeverityLevel=2;else if(\\\"number\\\"!=typeof e.logSeverityLevel||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(\\\"log serverity level is not valid: \\\".concat(e.logSeverityLevel));if(void 0===(null==e?void 0:e.logVerbosityLevel))i.logVerbosityLevel=0;else if(\\\"number\\\"!=typeof e.logVerbosityLevel||!Number.isInteger(e.logVerbosityLevel))throw new Error(\\\"log verbosity level is not valid: \\\".concat(e.logVerbosityLevel));void 0===(null==e?void 0:e.terminate)&&(i.terminate=!1);var c=0;return void 0!==(null==e?void 0:e.tag)&&(c=(0,a.allocWasmString)(e.tag,o)),0===(t=n._OrtCreateRunOptions(i.logSeverityLevel,i.logVerbosityLevel,!!i.terminate,c))&&(0,a.checkLastError)(\\\"Can't create run options.\\\"),void 0!==(null==e?void 0:e.extra)&&(0,a.iterateExtraOptions)(e.extra,\\\"\\\",new WeakSet,(function(e,r){var i=(0,a.allocWasmString)(e,o),c=(0,a.allocWasmString)(r,o);0!==n._OrtAddRunConfigEntry(t,i,c)&&(0,a.checkLastError)(\\\"Can't set a run config entry: \\\".concat(e,\\\" - \\\").concat(r,\\\".\\\"))})),[t,o]}catch(e){throw 0!==t&&n._OrtReleaseRunOptions(t),o.forEach((function(e){return n._free(e)})),e}}},622:function(e,n,t){\\\"use strict\\\";var r=this&&this.__values||function(e){var n=\\\"function\\\"==typeof Symbol&&Symbol.iterator,t=n&&e[n],r=0;if(t)return t.call(e);if(e&&\\\"number\\\"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(n?\\\"Object is not iterable.\\\":\\\"Symbol.iterator is not defined.\\\")};Object.defineProperty(n,\\\"__esModule\\\",{value:!0}),n.setSessionOptions=void 0;var a=t(263),o=t(497);n.setSessionOptions=function(e){var n,t,i,c,u=(0,a.getInstance)(),s=0,l=[],f=e||{};!function(e){e.extra||(e.extra={}),e.extra.session||(e.extra.session={});var n=e.extra.session;n.use_ort_model_bytes_directly||(n.use_ort_model_bytes_directly=\\\"1\\\"),e.executionProviders&&e.executionProviders.some((function(e){return\\\"webgpu\\\"===(\\\"string\\\"==typeof e?e:e.name)}))&&(e.enableMemPattern=!1)}(f);try{var p=function(e){switch(e){case\\\"disabled\\\":return 0;case\\\"basic\\\":return 1;case\\\"extended\\\":return 2;case\\\"all\\\":return 99;default:throw new Error(\\\"unsupported graph optimization level: \\\".concat(e))}}(null!==(n=f.graphOptimizationLevel)&&void 0!==n?n:\\\"all\\\"),d=function(e){switch(e){case\\\"sequential\\\":return 0;case\\\"parallel\\\":return 1;default:throw new Error(\\\"unsupported execution mode: \\\".concat(e))}}(null!==(t=f.executionMode)&&void 0!==t?t:\\\"sequential\\\"),h=\\\"string\\\"==typeof f.logId?(0,o.allocWasmString)(f.logId,l):0,g=null!==(i=f.logSeverityLevel)&&void 0!==i?i:2;if(!Number.isInteger(g)||g<0||g>4)throw new Error(\\\"log serverity level is not valid: \\\".concat(g));var v=null!==(c=f.logVerbosityLevel)&&void 0!==c?c:0;if(!Number.isInteger(v)||v<0||v>4)throw new Error(\\\"log verbosity level is not valid: \\\".concat(v));var m=\\\"string\\\"==typeof f.optimizedModelFilePath?(0,o.allocWasmString)(f.optimizedModelFilePath,l):0;return 0===(s=u._OrtCreateSessionOptions(p,!!f.enableCpuMemArena,!!f.enableMemPattern,d,!!f.enableProfiling,0,h,g,v,m))&&(0,o.checkLastError)(\\\"Can't create session options.\\\"),f.executionProviders&&function(e,n,t){var i,c;try{for(var u=r(n),s=u.next();!s.done;s=u.next()){var l=s.value,f=\\\"string\\\"==typeof l?l:l.name;switch(f){case\\\"xnnpack\\\":f=\\\"XNNPACK\\\";break;case\\\"webnn\\\":if(f=\\\"WEBNN\\\",\\\"string\\\"!=typeof l){var p=l;if(null==p?void 0:p.deviceType){var d=(0,o.allocWasmString)(\\\"deviceType\\\",t),h=(0,o.allocWasmString)(p.deviceType,t);0!==(0,a.getInstance)()._OrtAddSessionConfigEntry(e,d,h)&&(0,o.checkLastError)(\\\"Can't set a session config entry: 'deviceType' - \\\".concat(p.deviceType,\\\".\\\"))}(null==p?void 0:p.powerPreference)&&(d=(0,o.allocWasmString)(\\\"powerPreference\\\",t),h=(0,o.allocWasmString)(p.powerPreference,t),0!==(0,a.getInstance)()._OrtAddSessionConfigEntry(e,d,h)&&(0,o.checkLastError)(\\\"Can't set a session config entry: 'powerPreference' - \\\".concat(p.powerPreference,\\\".\\\")))}break;case\\\"webgpu\\\":f=\\\"JS\\\";break;case\\\"wasm\\\":case\\\"cpu\\\":continue;default:throw new Error(\\\"not supported execution provider: \\\".concat(f))}var g=(0,o.allocWasmString)(f,t);0!==(0,a.getInstance)()._OrtAppendExecutionProvider(e,g)&&(0,o.checkLastError)(\\\"Can't append execution provider: \\\".concat(f,\\\".\\\"))}}catch(e){i={error:e}}finally{try{s&&!s.done&&(c=u.return)&&c.call(u)}finally{if(i)throw i.error}}}(s,f.executionProviders,l),void 0!==f.extra&&(0,o.iterateExtraOptions)(f.extra,\\\"\\\",new WeakSet,(function(e,n){var t=(0,o.allocWasmString)(e,l),r=(0,o.allocWasmString)(n,l);0!==u._OrtAddSessionConfigEntry(s,t,r)&&(0,o.checkLastError)(\\\"Can't set a session config entry: \\\".concat(e,\\\" - \\\").concat(n,\\\".\\\"))})),[s,l]}catch(e){throw 0!==s&&u._OrtReleaseSessionOptions(s),l.forEach((function(e){return u._free(e)})),e}}},917:function(e,n){\\\"use strict\\\";Object.defineProperty(n,\\\"__esModule\\\",{value:!0}),n.logLevelStringToEnum=n.tensorTypeToTypedArrayConstructor=n.getTensorElementSize=n.tensorDataTypeEnumToString=n.tensorDataTypeStringToEnum=void 0,n.tensorDataTypeStringToEnum=function(e){switch(e){case\\\"int8\\\":return 3;case\\\"uint8\\\":return 2;case\\\"bool\\\":return 9;case\\\"int16\\\":return 5;case\\\"uint16\\\":return 4;case\\\"int32\\\":return 6;case\\\"uint32\\\":return 12;case\\\"float16\\\":return 10;case\\\"float32\\\":return 1;case\\\"float64\\\":return 11;case\\\"string\\\":return 8;case\\\"int64\\\":return 7;case\\\"uint64\\\":return 13;default:throw new Error(\\\"unsupported data type: \\\".concat(e))}},n.tensorDataTypeEnumToString=function(e){switch(e){case 3:return\\\"int8\\\";case 2:return\\\"uint8\\\";case 9:return\\\"bool\\\";case 5:return\\\"int16\\\";case 4:return\\\"uint16\\\";case 6:return\\\"int32\\\";case 12:return\\\"uint32\\\";case 10:return\\\"float16\\\";case 1:return\\\"float32\\\";case 11:return\\\"float64\\\";case 8:return\\\"string\\\";case 7:return\\\"int64\\\";case 13:return\\\"uint64\\\";default:throw new Error(\\\"unsupported data type: \\\".concat(e))}},n.getTensorElementSize=function(e){return[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][e]},n.tensorTypeToTypedArrayConstructor=function(e){switch(e){case\\\"float16\\\":case\\\"uint16\\\":return Uint16Array;case\\\"float32\\\":return Float32Array;case\\\"uint8\\\":case\\\"bool\\\":return Uint8Array;case\\\"int8\\\":return Int8Array;case\\\"int16\\\":return Int16Array;case\\\"int32\\\":return Int32Array;case\\\"float64\\\":return Float64Array;case\\\"uint32\\\":return Uint32Array;case\\\"int64\\\":return BigInt64Array;case\\\"uint64\\\":return BigUint64Array;default:throw new Error(\\\"unsupported type: \\\".concat(e))}},n.logLevelStringToEnum=function(e){switch(e){case\\\"verbose\\\":return 0;case\\\"info\\\":return 1;case\\\"warning\\\":return 2;case\\\"error\\\":return 3;case\\\"fatal\\\":return 4;default:throw new Error(\\\"unsupported logging level: \\\".concat(e))}}},259:function(e,n,t){\\\"use strict\\\";var r=this&&this.__awaiter||function(e,n,t,r){return new(t||(t=Promise))((function(a,o){function i(e){try{u(r.next(e))}catch(e){o(e)}}function c(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){var n;e.done?a(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(i,c)}u((r=r.apply(e,n||[])).next())}))},a=this&&this.__generator||function(e,n){var t,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:c(0),throw:c(1),return:c(2)},\\\"function\\\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function c(c){return function(u){return function(c){if(t)throw new TypeError(\\\"Generator is already executing.\\\");for(;o&&(o=0,c[0]&&(i=0)),i;)try{if(t=1,r&&(a=2&c[0]?r.return:c[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,c[1])).done)return a;switch(r=0,a&&(c=[2&c[0],a.value]),c[0]){case 0:case 1:a=c;break;case 4:return i.label++,{value:c[1],done:!1};case 5:i.label++,r=c[1],c=[0];continue;case 7:c=i.ops.pop(),i.trys.pop();continue;default:if(!((a=(a=i.trys).length>0&&a[a.length-1])||6!==c[0]&&2!==c[0])){i=0;continue}if(3===c[0]&&(!a||c[1]>a[0]&&c[1]<a[3])){i.label=c[1];break}if(6===c[0]&&i.label<a[1]){i.label=a[1],a=c;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(c);break}a[2]&&i.ops.pop(),i.trys.pop();continue}c=n.call(e,i)}catch(e){c=[6,e],r=0}finally{t=a=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,u])}}},o=this&&this.__read||function(e,n){var t=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var r,a,o=t.call(e),i=[];try{for(;(void 0===n||n-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(t=o.return)&&t.call(o)}finally{if(a)throw a.error}}return i},i=this&&this.__values||function(e){var n=\\\"function\\\"==typeof Symbol&&Symbol.iterator,t=n&&e[n],r=0;if(t)return t.call(e);if(e&&\\\"number\\\"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(n?\\\"Object is not iterable.\\\":\\\"Symbol.iterator is not defined.\\\")};Object.defineProperty(n,\\\"__esModule\\\",{value:!0}),n.extractTransferableBuffers=n.endProfiling=n.run=n.releaseSession=n.createSession=n.createSessionFinalize=n.createSessionAllocate=n.initRuntime=void 0;var c=t(918),u=t(622),s=t(917),l=t(263),f=t(497);n.initRuntime=function(e){return r(void 0,void 0,void 0,(function(){return a(this,(function(n){switch(n.label){case 0:return t=e.wasm.numThreads,r=(0,s.logLevelStringToEnum)(e.logLevel),0!==(0,l.getInstance)()._OrtInit(t,r)&&(0,f.checkLastError)(\\\"Can't initialize onnxruntime.\\\"),[3,2];case 1:n.sent(),n.label=2;case 2:return[2]}var t,r}))}))};var p=new Map;n.createSessionAllocate=function(e){var n=(0,l.getInstance)(),t=n._malloc(e.byteLength);if(0===t)throw new Error(\\\"Can't create a session. failed to allocate a buffer of size \\\".concat(e.byteLength,\\\".\\\"));return n.HEAPU8.set(e,t),[t,e.byteLength]},n.createSessionFinalize=function(e,n){var t,r=(0,l.getInstance)(),a=0,i=0,c=[],s=[],d=[];try{i=(t=o((0,u.setSessionOptions)(n),2))[0],c=t[1],0===(a=r._OrtCreateSession(e[0],e[1],i))&&(0,f.checkLastError)(\\\"Can't create a session.\\\");for(var h=o(function(e){var n=(0,l.getInstance)(),t=n.stackSave();try{var r=n.stackAlloc(8);return 0!==n._OrtGetInputOutputCount(e,r,r+4)&&(0,f.checkLastError)(\\\"Can't get session input/output count.\\\"),[n.HEAP32[r/4],n.HEAP32[r/4+1]]}finally{n.stackRestore(t)}}(a),2),g=h[0],v=h[1],m=[],y=[],b=0;b<g;b++){var w=r._OrtGetInputName(a,b);0===w&&(0,f.checkLastError)(\\\"Can't get an input name.\\\"),s.push(w),m.push(r.UTF8ToString(w))}for(b=0;b<v;b++){var _=r._OrtGetOutputName(a,b);0===_&&(0,f.checkLastError)(\\\"Can't get an output name.\\\"),d.push(_),y.push(r.UTF8ToString(_))}return p.set(a,[a,s,d]),[a,m,y]}catch(e){throw s.forEach((function(e){return r._OrtFree(e)})),d.forEach((function(e){return r._OrtFree(e)})),0!==a&&r._OrtReleaseSession(a),e}finally{r._free(e[0]),0!==i&&r._OrtReleaseSessionOptions(i),c.forEach((function(e){return r._free(e)}))}},n.createSession=function(e,t){var r=(0,n.createSessionAllocate)(e);return(0,n.createSessionFinalize)(r,t)},n.releaseSession=function(e){var n=(0,l.getInstance)(),t=p.get(e);if(!t)throw new Error(\\\"cannot release session. invalid session id: \\\".concat(e));var r=o(t,3),a=r[0],i=r[1],c=r[2];i.forEach((function(e){return n._OrtFree(e)})),c.forEach((function(e){return n._OrtFree(e)})),n._OrtReleaseSession(a),p.delete(e)},n.run=function(e,n,t,i,u){return r(void 0,void 0,void 0,(function(){var r,d,h,g,v,m,y,b,w,_,S,A,C,x,T,P,E,O,I,k,R,D,M,U,W,j,B,G,z,L,F,H,V,N,K,Y,q,J,X,Q,Z,$,ee,ne,te,re;return a(this,(function(a){switch(a.label){case 0:if(r=(0,l.getInstance)(),!(d=p.get(e)))throw new Error(\\\"cannot run inference. invalid session id: \\\".concat(e));h=o(d,3),g=h[0],v=h[1],m=h[2],y=n.length,b=i.length,w=0,_=[],S=[],A=[],a.label=1;case 1:for(a.trys.push([1,,7,8]),re=o((0,c.setRunOptions)(u),2),w=re[0],_=re[1],C=function(e){var n=t[e][0],a=t[e][1],o=t[e][2],i=void 0,c=void 0;if(Array.isArray(o)){c=4*o.length,i=r._malloc(c),A.push(i);for(var u=i/4,l=0;l<o.length;l++){if(\\\"string\\\"!=typeof o[l])throw new TypeError(\\\"tensor data at index \\\".concat(l,\\\" is not a string\\\"));r.HEAPU32[u++]=(0,f.allocWasmString)(o[l],A)}}else c=o.byteLength,i=r._malloc(c),A.push(i),r.HEAPU8.set(new Uint8Array(o.buffer,o.byteOffset,c),i);var p=r.stackSave(),d=r.stackAlloc(4*a.length);try{var h=d/4;a.forEach((function(e){return r.HEAP32[h++]=e}));var g=r._OrtCreateTensor((0,s.tensorDataTypeStringToEnum)(n),i,c,d,a.length);0===g&&(0,f.checkLastError)(\\\"Can't create tensor for input[\\\".concat(e,\\\"].\\\")),S.push(g)}finally{r.stackRestore(p)}},j=0;j<y;j++)C(j);x=r.stackSave(),T=r.stackAlloc(4*y),P=r.stackAlloc(4*y),E=r.stackAlloc(4*b),O=r.stackAlloc(4*b),a.label=2;case 2:for(a.trys.push([2,,5,6]),I=T/4,k=P/4,R=E/4,D=O/4,j=0;j<y;j++)r.HEAPU32[I++]=S[j],r.HEAPU32[k++]=v[n[j]];for(j=0;j<b;j++)r.HEAPU32[R++]=0,r.HEAPU32[D++]=m[i[j]];return M=r._OrtRun(g,P,T,y,O,b,E,w),(U=r.jsepRunPromise)&&void 0!==U.then?[4,U]:[3,4];case 3:M=a.sent(),a.label=4;case 4:for(W=[],0!==M&&(0,f.checkLastError)(\\\"failed to call OrtRun().\\\"),j=0;j<b;j++){B=r.HEAPU32[E/4+j],G=r.stackSave(),z=r.stackAlloc(16),L=void 0,F=0;try{for(0!==(M=r._OrtGetTensorData(B,z,z+4,z+8,z+12))&&(0,f.checkLastError)(\\\"Can't access output tensor data on index \\\".concat(j,\\\".\\\")),H=z/4,V=r.HEAPU32[H++],F=r.HEAPU32[H++],N=r.HEAPU32[H++],K=r.HEAPU32[H++],Y=[],q=0;q<K;q++)Y.push(r.HEAPU32[N/4+q]);if(r._OrtFree(N),J=0===Y.length?1:Y.reduce((function(e,n){return e*n})),\\\"string\\\"===(L=(0,s.tensorDataTypeEnumToString)(V))){for(X=[],Q=F/4,Z=0;Z<J;Z++)$=r.HEAPU32[Q++],ee=Z===J-1?void 0:r.HEAPU32[Q]-$,X.push(r.UTF8ToString($,ee));W.push([L,Y,X])}else ne=(0,s.tensorTypeToTypedArrayConstructor)(L),te=new ne(J),new Uint8Array(te.buffer,te.byteOffset,te.byteLength).set(r.HEAPU8.subarray(F,F+te.byteLength)),W.push([L,Y,te])}finally{r.stackRestore(G),\\\"string\\\"===L&&F&&r._free(F),r._OrtReleaseTensor(B)}}return[2,W];case 5:return r.stackRestore(x),[7];case 6:return[3,8];case 7:return S.forEach((function(e){return r._OrtReleaseTensor(e)})),A.forEach((function(e){return r._free(e)})),0!==w&&r._OrtReleaseRunOptions(w),_.forEach((function(e){return r._free(e)})),[7];case 8:return[2]}}))}))},n.endProfiling=function(e){var n=(0,l.getInstance)(),t=p.get(e);if(!t)throw new Error(\\\"invalid session id\\\");var r=t[0],a=n._OrtEndProfiling(r);0===a&&(0,f.checkLastError)(\\\"Can't get an profile file name.\\\"),n._OrtFree(a)},n.extractTransferableBuffers=function(e){var n,t,r=[];try{for(var a=i(e),o=a.next();!o.done;o=a.next()){var c=o.value[2];!Array.isArray(c)&&c.buffer&&r.push(c.buffer)}}catch(e){n={error:e}}finally{try{o&&!o.done&&(t=a.return)&&t.call(a)}finally{if(n)throw n.error}}return r}},263:function(e,n,t){\\\"use strict\\\";var r=this&&this.__createBinding||(Object.create?function(e,n,t,r){void 0===r&&(r=t);var a=Object.getOwnPropertyDescriptor(n,t);a&&!(\\\"get\\\"in a?!n.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return n[t]}}),Object.defineProperty(e,r,a)}:function(e,n,t,r){void 0===r&&(r=t),e[r]=n[t]}),a=this&&this.__setModuleDefault||(Object.create?function(e,n){Object.defineProperty(e,\\\"default\\\",{enumerable:!0,value:n})}:function(e,n){e.default=n}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)\\\"default\\\"!==t&&Object.prototype.hasOwnProperty.call(e,t)&&r(n,e,t);return a(n,e),n},i=this&&this.__awaiter||function(e,n,t,r){return new(t||(t=Promise))((function(a,o){function i(e){try{u(r.next(e))}catch(e){o(e)}}function c(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){var n;e.done?a(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(i,c)}u((r=r.apply(e,n||[])).next())}))},c=this&&this.__generator||function(e,n){var t,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:c(0),throw:c(1),return:c(2)},\\\"function\\\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function c(c){return function(u){return function(c){if(t)throw new TypeError(\\\"Generator is already executing.\\\");for(;o&&(o=0,c[0]&&(i=0)),i;)try{if(t=1,r&&(a=2&c[0]?r.return:c[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,c[1])).done)return a;switch(r=0,a&&(c=[2&c[0],a.value]),c[0]){case 0:case 1:a=c;break;case 4:return i.label++,{value:c[1],done:!1};case 5:i.label++,r=c[1],c=[0];continue;case 7:c=i.ops.pop(),i.trys.pop();continue;default:if(!((a=(a=i.trys).length>0&&a[a.length-1])||6!==c[0]&&2!==c[0])){i=0;continue}if(3===c[0]&&(!a||c[1]>a[0]&&c[1]<a[3])){i.label=c[1];break}if(6===c[0]&&i.label<a[1]){i.label=a[1],a=c;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(c);break}a[2]&&i.ops.pop(),i.trys.pop();continue}c=n.call(e,i)}catch(e){c=[6,e],r=0}finally{t=a=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,u])}}};Object.defineProperty(n,\\\"__esModule\\\",{value:!0}),n.dispose=n.getInstance=n.initializeWebAssembly=void 0;var u,s=o(t(449)),l=t(932),f=t(474),p=!1,d=!1,h=!1;n.initializeWebAssembly=function(e){return i(void 0,void 0,void 0,(function(){var n,r,a,o,i,g,v,m,y,b,w;return c(this,(function(c){switch(c.label){case 0:if(p)return[2,Promise.resolve()];if(d)throw new Error(\\\"multiple calls to 'initializeWebAssembly()' detected.\\\");if(h)throw new Error(\\\"previous call to 'initializeWebAssembly()' failed.\\\");return d=!0,n=e.initTimeout,r=e.numThreads,a=e.simd,o=r>1&&function(){try{return\\\"undefined\\\"!=typeof SharedArrayBuffer&&(\\\"undefined\\\"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])))}catch(e){return!1}}(),i=a&&function(){try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch(e){return!1}}(),g=e.wasmPaths,v=\\\"string\\\"==typeof g?g:void 0,m=function(e,n){return n?e?\\\"ort-wasm-simd-threaded.wasm\\\":\\\"ort-wasm-threaded.wasm\\\":e?\\\"ort-wasm-simd.wasm\\\":\\\"ort-wasm.wasm\\\"}(i,o),y=\\\"object\\\"==typeof g?g[m]:void 0,b=!1,w=[],n>0&&w.push(new Promise((function(e){setTimeout((function(){b=!0,e()}),n)}))),w.push(new Promise((function(e,n){var r=o?f:l,a={locateFile:function(e,n){return o&&e.endsWith(\\\".worker.js\\\")&&\\\"undefined\\\"!=typeof Blob?URL.createObjectURL(new Blob([t(154)],{type:\\\"text/javascript\\\"})):e.endsWith(\\\".wasm\\\")?y||(null!=v?v:n)+m:n+e}};if(o)if(\\\"undefined\\\"==typeof Blob)a.mainScriptUrlOrBlob=s.join(__dirname,\\\"ort-wasm-threaded.js\\\");else{var i=\\\"var ortWasmThreaded=(function(){var _scriptDir;return \\\".concat(r.toString(),\\\"})();\\\");a.mainScriptUrlOrBlob=new Blob([i],{type:\\\"text/javascript\\\"})}r(a).then((function(n){d=!1,p=!0,u=n,e()}),(function(e){d=!1,h=!0,n(e)}))}))),[4,Promise.race(w)];case 1:if(c.sent(),b)throw new Error(\\\"WebAssembly backend initializing failed due to timeout: \\\".concat(n,\\\"ms\\\"));return[2]}}))}))},n.getInstance=function(){if(p&&u)return u;throw new Error(\\\"WebAssembly is not initialized yet.\\\")},n.dispose=function(){var e;!p||d||h||(d=!0,null===(e=u.PThread)||void 0===e||e.terminateAllThreads(),u=void 0,d=!1,p=!1,h=!0)}},497:function(e,n,t){\\\"use strict\\\";var r=this&&this.__read||function(e,n){var t=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var r,a,o=t.call(e),i=[];try{for(;(void 0===n||n-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(t=o.return)&&t.call(o)}finally{if(a)throw a.error}}return i};Object.defineProperty(n,\\\"__esModule\\\",{value:!0}),n.checkLastError=n.iterateExtraOptions=n.allocWasmString=void 0;var a=t(263);n.allocWasmString=function(e,n){var t=(0,a.getInstance)(),r=t.lengthBytesUTF8(e)+1,o=t._malloc(r);return t.stringToUTF8(e,o,r),n.push(o),o},n.iterateExtraOptions=function(e,t,a,o){if(\\\"object\\\"==typeof e&&null!==e){if(a.has(e))throw new Error(\\\"Circular reference in options\\\");a.add(e)}Object.entries(e).forEach((function(e){var i=r(e,2),c=i[0],u=i[1],s=t?t+c:c;if(\\\"object\\\"==typeof u)(0,n.iterateExtraOptions)(u,s+\\\".\\\",a,o);else if(\\\"string\\\"==typeof u||\\\"number\\\"==typeof u)o(s,u.toString());else{if(\\\"boolean\\\"!=typeof u)throw new Error(\\\"Can't handle extra config type: \\\".concat(typeof u));o(s,u?\\\"1\\\":\\\"0\\\")}}))},n.checkLastError=function(e){var n=(0,a.getInstance)(),t=n.stackSave();try{var r=n.stackAlloc(8);n._OrtGetLastError(r,r+4);var o=n.HEAP32[r/4],i=n.HEAPU32[r/4+1],c=i?n.UTF8ToString(i):\\\"\\\";throw new Error(\\\"\\\".concat(e,\\\" ERROR_CODE: \\\").concat(o,\\\", ERROR_MESSAGE: \\\").concat(c))}finally{n.stackRestore(t)}}},474:function(e,n,t){var _scriptDir,r=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\\\"undefined\\\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(e={}){function n(){return R.buffer!=U.buffer&&K(),U}function r(){return R.buffer!=U.buffer&&K(),W}function a(){return R.buffer!=U.buffer&&K(),j}function o(){return R.buffer!=U.buffer&&K(),B}function i(){return R.buffer!=U.buffer&&K(),G}function c(){return R.buffer!=U.buffer&&K(),z}function u(){return R.buffer!=U.buffer&&K(),V}var s,l,f;s||(s=void 0!==e?e:{}),s.ready=new Promise(((e,n)=>{l=e,f=n}));var p,d,h,g=Object.assign({},s),v=\\\"./this.program\\\",m=(e,n)=>{throw n},y=\\\"object\\\"==typeof window,b=\\\"function\\\"==typeof importScripts,w=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,_=s.ENVIRONMENT_IS_PTHREAD||!1,S=\\\"\\\";function A(e){return s.locateFile?s.locateFile(e,S):S+e}if(w){var C=t(384),x=t(908);let n;S=b?x.dirname(S)+\\\"/\\\":__dirname+\\\"/\\\",p=(e,n)=>(e=e.startsWith(\\\"file://\\\")?new URL(e):x.normalize(e),C.readFileSync(e,n?void 0:\\\"utf8\\\")),h=e=>((e=p(e,!0)).buffer||(e=new Uint8Array(e)),e),d=(e,n,t,r=!0)=>{e=e.startsWith(\\\"file://\\\")?new URL(e):x.normalize(e),C.readFile(e,r?void 0:\\\"utf8\\\",((e,a)=>{e?t(e):n(r?a.buffer:a)}))},!s.thisProgram&&1<process.argv.length&&(v=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),m=(e,n)=>{throw process.exitCode=e,n},s.inspect=()=>\\\"[Emscripten Module object]\\\";try{n=t(925)}catch(e){throw console.error('The \\\"worker_threads\\\" module is not supported in this node.js build - perhaps a newer version is needed?'),e}global.Worker=n.Worker}else(y||b)&&(b?S=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(S=document.currentScript.src),_scriptDir&&(S=_scriptDir),S=0!==S.indexOf(\\\"blob:\\\")?S.substr(0,S.replace(/[?#].*/,\\\"\\\").lastIndexOf(\\\"/\\\")+1):\\\"\\\",w||(p=e=>{var n=new XMLHttpRequest;return n.open(\\\"GET\\\",e,!1),n.send(null),n.responseText},b&&(h=e=>{var n=new XMLHttpRequest;return n.open(\\\"GET\\\",e,!1),n.responseType=\\\"arraybuffer\\\",n.send(null),new Uint8Array(n.response)}),d=(e,n,t)=>{var r=new XMLHttpRequest;r.open(\\\"GET\\\",e,!0),r.responseType=\\\"arraybuffer\\\",r.onload=()=>{200==r.status||0==r.status&&r.response?n(r.response):t()},r.onerror=t,r.send(null)}));w&&\\\"undefined\\\"==typeof performance&&(global.performance=t(953).performance);var T=console.log.bind(console),P=console.warn.bind(console);w&&(T=(...e)=>C.writeSync(1,e.join(\\\" \\\")+\\\"\\\\n\\\"),P=(...e)=>C.writeSync(2,e.join(\\\" \\\")+\\\"\\\\n\\\"));var E,O=s.print||T,I=s.printErr||P;Object.assign(s,g),g=null,s.thisProgram&&(v=s.thisProgram),s.quit&&(m=s.quit),s.wasmBinary&&(E=s.wasmBinary);var k=s.noExitRuntime||!0;\\\"object\\\"!=typeof WebAssembly&&oe(\\\"no native wasm support detected\\\");var R,D,M,U,W,j,B,G,z,L,F,H,V,N=!1;function K(){var e=R.buffer;s.HEAP8=U=new Int8Array(e),s.HEAP16=j=new Int16Array(e),s.HEAP32=G=new Int32Array(e),s.HEAPU8=W=new Uint8Array(e),s.HEAPU16=B=new Uint16Array(e),s.HEAPU32=z=new Uint32Array(e),s.HEAPF32=L=new Float32Array(e),s.HEAPF64=V=new Float64Array(e),s.HEAP64=F=new BigInt64Array(e),s.HEAPU64=H=new BigUint64Array(e)}var Y=s.INITIAL_MEMORY||16777216;if(5242880<=Y||oe(\\\"INITIAL_MEMORY should be larger than STACK_SIZE, was \\\"+Y+\\\"! (STACK_SIZE=5242880)\\\"),_)R=s.wasmMemory;else if(s.wasmMemory)R=s.wasmMemory;else if(!((R=new WebAssembly.Memory({initial:Y/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw I(\\\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\\\"),w&&I(\\\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)\\\"),Error(\\\"bad memory\\\");K(),Y=R.buffer.byteLength;var q,J=[],X=[],Q=[],Z=0;function $(){return k||0<Z}function ee(){var e=s.preRun.shift();J.unshift(e)}var ne,te=0,re=null,ae=null;function oe(e){throw s.onAbort&&s.onAbort(e),I(e=\\\"Aborted(\\\"+e+\\\")\\\"),N=!0,M=1,e=new WebAssembly.RuntimeError(e+\\\". Build with -sASSERTIONS for more info.\\\"),f(e),e}function ie(e){return e.startsWith(\\\"data:application/octet-stream;base64,\\\")}function ce(e){try{if(e==ne&&E)return new Uint8Array(E);if(h)return h(e);throw\\\"both async and sync fetching of the wasm failed\\\"}catch(e){oe(e)}}function ue(e,n,t){return function(e){if(!E&&(y||b)){if(\\\"function\\\"==typeof fetch&&!e.startsWith(\\\"file://\\\"))return fetch(e,{credentials:\\\"same-origin\\\"}).then((n=>{if(!n.ok)throw\\\"failed to load wasm binary file at '\\\"+e+\\\"'\\\";return n.arrayBuffer()})).catch((()=>ce(e)));if(d)return new Promise(((n,t)=>{d(e,(e=>n(new Uint8Array(e))),t)}))}return Promise.resolve().then((()=>ce(e)))}(e).then((e=>WebAssembly.instantiate(e,n))).then((e=>e)).then(t,(e=>{I(\\\"failed to asynchronously prepare wasm: \\\"+e),oe(e)}))}function se(e){this.name=\\\"ExitStatus\\\",this.message=\\\"Program terminated with exit(\\\"+e+\\\")\\\",this.status=e}function le(e){e.terminate(),e.onmessage=()=>{}}function fe(e){(e=be.hb[e])||oe(),be.Lb(e)}function pe(e){var n=be.Db();if(!n)return 6;be.kb.push(n),be.hb[e.jb]=n,n.jb=e.jb;var t={cmd:\\\"run\\\",start_routine:e.Mb,arg:e.Bb,pthread_ptr:e.jb};return w&&n.unref(),n.postMessage(t,e.Sb),0}ie(ne=\\\"ort-wasm-threaded.wasm\\\")||(ne=A(ne));var de=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf8\\\"):void 0;function he(e,n,t){var r=(n>>>=0)+t;for(t=n;e[t]&&!(t>=r);)++t;if(16<t-n&&e.buffer&&de)return de.decode(e.buffer instanceof SharedArrayBuffer?e.slice(n,t):e.subarray(n,t));for(r=\\\"\\\";n<t;){var a=e[n++];if(128&a){var o=63&e[n++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[n++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[n++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function ge(e,n){return(e>>>=0)?he(r(),e,n):\\\"\\\"}function ve(e){if(_)return Mn(1,1,e);M=e,$()||(be.Nb(),s.onExit&&s.onExit(e),N=!0),m(e,new se(e))}function me(e){if(M=e,_)throw _e(e),\\\"unwind\\\";ve(e)}function ye(e){e instanceof se||\\\"unwind\\\"==e||m(1,e)}var be={nb:[],kb:[],zb:[],hb:{},tb:function(){_&&be.Fb()},Vb:function(){},Fb:function(){be.receiveObjectTransfer=be.Kb,be.threadInitTLS=be.yb,be.setExitStatus=be.xb,k=!1},xb:function(e){M=e},Xb:[\\\"$terminateWorker\\\"],Nb:function(){for(var e of be.kb)le(e);for(e of be.nb)le(e);be.nb=[],be.kb=[],be.hb=[]},Lb:function(e){var n=e.jb;delete be.hb[n],be.nb.push(e),be.kb.splice(be.kb.indexOf(e),1),e.jb=0,ot(n)},Kb:function(){},yb:function(){be.zb.forEach((e=>e()))},Jb:e=>new Promise((n=>{e.onmessage=t=>{var r=(t=t.data).cmd;if(e.jb&&(be.Cb=e.jb),t.targetThread&&t.targetThread!=$n()){var a=be.hb[t.Wb];a?a.postMessage(t,t.transferList):I('Internal error! Worker sent a message \\\"'+r+'\\\" to target pthread '+t.targetThread+\\\", but that thread no longer exists!\\\")}else\\\"checkMailbox\\\"===r?mn():\\\"spawnThread\\\"===r?pe(t):\\\"cleanupThread\\\"===r?fe(t.thread):\\\"killThread\\\"===r?(t=t.thread,r=be.hb[t],delete be.hb[t],le(r),ot(t),be.kb.splice(be.kb.indexOf(r),1),r.jb=0):\\\"cancelThread\\\"===r?be.hb[t.thread].postMessage({cmd:\\\"cancel\\\"}):\\\"loaded\\\"===r?(e.loaded=!0,n(e)):\\\"print\\\"===r?O(\\\"Thread \\\"+t.threadId+\\\": \\\"+t.text):\\\"printErr\\\"===r?I(\\\"Thread \\\"+t.threadId+\\\": \\\"+t.text):\\\"alert\\\"===r?alert(\\\"Thread \\\"+t.threadId+\\\": \\\"+t.text):\\\"setimmediate\\\"===t.target?e.postMessage(t):\\\"callHandler\\\"===r?s[t.handler](...t.args):r&&I(\\\"worker sent an unknown command \\\"+r);be.Cb=void 0},e.onerror=e=>{throw I(\\\"worker sent an error! \\\"+e.filename+\\\":\\\"+e.lineno+\\\": \\\"+e.message),e},w&&(e.on(\\\"message\\\",(function(n){e.onmessage({data:n})})),e.on(\\\"error\\\",(function(n){e.onerror(n)})));var t,r=[];for(t of[\\\"onExit\\\",\\\"onAbort\\\",\\\"print\\\",\\\"printErr\\\"])s.hasOwnProperty(t)&&r.push(t);e.postMessage({cmd:\\\"load\\\",handlers:r,urlOrBlob:s.mainScriptUrlOrBlob||_scriptDir,wasmMemory:R,wasmModule:D})})),Ib:function(e){e()},Ab:function(){var e=A(\\\"ort-wasm-threaded.worker.js\\\");e=new Worker(e),be.nb.push(e)},Db:function(){return 0==be.nb.length&&(be.Ab(),be.Jb(be.nb[0])),be.nb.pop()}};function we(e){for(;0<e.length;)e.shift()(s)}function _e(e){if(_)return Mn(2,0,e);me(e)}s.PThread=be,s.establishStackSpace=function(){var e=$n(),n=i()[e+52>>2>>>0];st(n,n-(e=i()[e+56>>2>>>0])),ft(n)};var Se=[];function Ae(e){this.gb=e-24,this.ub=function(e){c()[this.gb+4>>2>>>0]=e},this.qb=function(e){c()[this.gb+8>>2>>>0]=e},this.tb=function(e,n){this.pb(),this.ub(e),this.qb(n)},this.pb=function(){c()[this.gb+16>>2>>>0]=0}}function Ce(e,n,t,r){return _?Mn(3,1,e,n,t,r):xe(e,n,t,r)}function xe(e,n,t,r){if(\\\"undefined\\\"==typeof SharedArrayBuffer)return I(\\\"Current environment does not support SharedArrayBuffer, pthreads are not available!\\\"),6;var a=[];return _&&0===a.length?Ce(e,n,t,r):(e={Mb:t,jb:e,Bb:r,Sb:a},_?(e.Ub=\\\"spawnThread\\\",postMessage(e,a),0):pe(e))}function Te(e,n,t){return _?Mn(4,1,e,n,t):0}function Pe(e,n){if(_)return Mn(5,1,e,n)}function Ee(e){for(var n=0,t=0;t<e.length;++t){var r=e.charCodeAt(t);127>=r?n++:2047>=r?n+=2:55296<=r&&57343>=r?(n+=4,++t):n+=3}return n}function Oe(e,n,t,r){if(!(0<r))return 0;var a=t>>>=0;r=t+r-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(t>=r)break;n[t++>>>0]=i}else{if(2047>=i){if(t+1>=r)break;n[t++>>>0]=192|i>>6}else{if(65535>=i){if(t+2>=r)break;n[t++>>>0]=224|i>>12}else{if(t+3>=r)break;n[t++>>>0]=240|i>>18,n[t++>>>0]=128|i>>12&63}n[t++>>>0]=128|i>>6&63}n[t++>>>0]=128|63&i}}return n[t>>>0]=0,t-a}function Ie(e,n,t){return Oe(e,r(),n,t)}function ke(e,n){if(_)return Mn(6,1,e,n)}function Re(e,n,t){if(_)return Mn(7,1,e,n,t)}function De(e,n,t){return _?Mn(8,1,e,n,t):0}function Me(e,n){if(_)return Mn(9,1,e,n)}function Ue(e,n,t){if(_)return Mn(10,1,e,n,t)}function We(e,n,t,r){if(_)return Mn(11,1,e,n,t,r)}function je(e,n,t,r){if(_)return Mn(12,1,e,n,t,r)}function Be(e,n,t,r){if(_)return Mn(13,1,e,n,t,r)}function Ge(e){if(_)return Mn(14,1,e)}function ze(e,n){if(_)return Mn(15,1,e,n)}function Le(e,n,t){if(_)return Mn(16,1,e,n,t)}function Fe(e){if(null===e)return\\\"null\\\";var n=typeof e;return\\\"object\\\"===n||\\\"array\\\"===n||\\\"function\\\"===n?e.toString():\\\"\\\"+e}s.invokeEntryPoint=function(e,n){var t=Se[e];t||(e>=Se.length&&(Se.length=e+1),Se[e]=t=q.get(e)),e=t(n),$()?be.xb(e):ct(e)};var He=void 0;function Ve(e){for(var n=\\\"\\\";r()[e>>>0];)n+=He[r()[e++>>>0]];return n}var Ne={},Ke={},Ye={};function qe(e){if(void 0===e)return\\\"_unknown\\\";var n=(e=e.replace(/[^a-zA-Z0-9_]/g,\\\"$\\\")).charCodeAt(0);return 48<=n&&57>=n?\\\"_\\\"+e:e}function Je(e,n){return{[e=qe(e)]:function(){return n.apply(this,arguments)}}[e]}function Xe(e){var n=Error,t=Je(e,(function(n){this.name=e,this.message=n,void 0!==(n=Error(n).stack)&&(this.stack=this.toString()+\\\"\\\\n\\\"+n.replace(/^Error(:[^\\\\n]*)?\\\\n/,\\\"\\\"))}));return t.prototype=Object.create(n.prototype),t.prototype.constructor=t,t.prototype.toString=function(){return void 0===this.message?this.name:this.name+\\\": \\\"+this.message},t}var Qe=void 0;function Ze(e){throw new Qe(e)}function $e(e,n,t={}){if(!(\\\"argPackAdvance\\\"in n))throw new TypeError(\\\"registerType registeredInstance requires argPackAdvance\\\");var r=n.name;if(e||Ze('type \\\"'+r+'\\\" must have a positive integer typeid pointer'),Ke.hasOwnProperty(e)){if(t.Eb)return;Ze(\\\"Cannot register type '\\\"+r+\\\"' twice\\\")}Ke[e]=n,delete Ye[e],Ne.hasOwnProperty(e)&&(n=Ne[e],delete Ne[e],n.forEach((e=>e())))}function en(e,t,u){switch(t){case 0:return u?function(e){return n()[e>>>0]}:function(e){return r()[e>>>0]};case 1:return u?function(e){return a()[e>>>1]}:function(e){return o()[e>>>1]};case 2:return u?function(e){return i()[e>>>2]}:function(e){return c()[e>>>2]};case 3:return u?function(e){return F[e>>3]}:function(e){return H[e>>3]};default:throw new TypeError(\\\"Unknown integer type: \\\"+e)}}function nn(e){switch(e){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError(\\\"Unknown type size: \\\"+e)}}var tn=new function(){this.gb=[void 0],this.pb=[],this.get=function(e){return this.gb[e]},this.ub=function(e){let n=this.pb.pop()||this.gb.length;return this.gb[n]=e,n},this.Hb=function(e){this.gb[e]=void 0,this.pb.push(e)}};function rn(e){e>=tn.qb&&0==--tn.get(e).wb&&tn.Hb(e)}var an=e=>(e||Ze(\\\"Cannot use deleted val. handle = \\\"+e),tn.get(e).value),on=e=>{switch(e){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:return tn.ub({wb:1,value:e})}};function cn(e){return this.fromWireType(i()[e>>2>>>0])}function un(e,n){switch(n){case 2:return function(e){var n=this.fromWireType;return R.buffer!=U.buffer&&K(),n.call(this,L[e>>>2])};case 3:return function(e){return this.fromWireType(u()[e>>>3])};default:throw new TypeError(\\\"Unknown float type: \\\"+e)}}var sn=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf-16le\\\"):void 0;function ln(e,n){for(var t=e>>1,i=t+n/2;!(t>=i)&&o()[t>>>0];)++t;if(32<(t<<=1)-e&&sn)return sn.decode(r().slice(e,t));for(t=\\\"\\\",i=0;!(i>=n/2);++i){var c=a()[e+2*i>>1>>>0];if(0==c)break;t+=String.fromCharCode(c)}return t}function fn(e,n,t){if(void 0===t&&(t=2147483647),2>t)return 0;var r=n;t=(t-=2)<2*e.length?t/2:e.length;for(var o=0;o<t;++o){var i=e.charCodeAt(o);a()[n>>1>>>0]=i,n+=2}return a()[n>>1>>>0]=0,n-r}function pn(e){return 2*e.length}function dn(e,n){for(var t=0,r=\\\"\\\";!(t>=n/4);){var a=i()[e+4*t>>2>>>0];if(0==a)break;++t,65536<=a?(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a)):r+=String.fromCharCode(a)}return r}function hn(e,n,t){if(void 0===t&&(t=2147483647),4>t)return 0;var r=n>>>=0;t=r+t-4;for(var a=0;a<e.length;++a){var o=e.charCodeAt(a);if(55296<=o&&57343>=o&&(o=65536+((1023&o)<<10)|1023&e.charCodeAt(++a)),i()[n>>2>>>0]=o,(n+=4)+4>t)break}return i()[n>>2>>>0]=0,n-r}function gn(e){for(var n=0,t=0;t<e.length;++t){var r=e.charCodeAt(t);55296<=r&&57343>=r&&++t,n+=4}return n}function vn(e){\\\"function\\\"==typeof Atomics.Tb&&(Atomics.Tb(i(),e>>2,e).value.then(mn),e+=128,Atomics.store(i(),e>>2,1))}function mn(){var e=$n();e&&(vn(e),function(e){if(!N)try{if(ut(),!$())try{_?ct(M):me(M)}catch(e){ye(e)}}catch(e){ye(e)}}())}function yn(e,n){var t=Ke[e];if(void 0===t){var r=Ve(e=tt(e));nt(e),Ze(n+\\\" has unknown type \\\"+r)}return t}s.__emscripten_thread_mailbox_await=vn,s.checkMailbox=mn;var bn={};function wn(e){var n=bn[e];return void 0===n?Ve(e):n}var _n=[];function Sn(){return\\\"object\\\"==typeof globalThis?globalThis:Function(\\\"return this\\\")()}var An=[],Cn={};function xn(e){return c()[e>>>2]+4294967296*i()[e+4>>>2]}function Tn(e){return 0==e%4&&(0!=e%100||0==e%400)}var Pn,En=[0,31,60,91,121,152,182,213,244,274,305,335],On=[0,31,59,90,120,151,181,212,243,273,304,334];function In(e){return(Tn(e.getFullYear())?En:On)[e.getMonth()]+e.getDate()-1}function kn(e,n,t,r,a,o,i){return _?Mn(17,1,e,n,t,r,a,o,i):-52}function Rn(e,n,t,r,a,o){if(_)return Mn(18,1,e,n,t,r,a,o)}function Dn(e){var n=Ee(e)+1,t=et(n);return t&&Ie(e,t,n),t}function Mn(e,n){var t=arguments.length-2,r=arguments;return function(e){var n=lt();return e=e(),ft(n),e}((()=>{for(var a=2*t,o=pt(8*a),i=o>>3,c=0;c<t;c++){var s=r[2+c];\\\"bigint\\\"==typeof s?(F[i+2*c]=1n,F[i+2*c+1]=s):(F[i+2*c]=0n,u()[i+2*c+1>>>0]=s)}return at(e,a,o,n)}))}Pn=w?()=>{var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:()=>performance.timeOrigin+performance.now();var Un,Wn=[],jn={};function Bn(){if(!Un){var e,n={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:v||\\\"./this.program\\\"};for(e in jn)void 0===jn[e]?delete n[e]:n[e]=jn[e];var t=[];for(e in n)t.push(e+\\\"=\\\"+n[e]);Un=t}return Un}function Gn(e,t){if(_)return Mn(19,1,e,t);var r=0;return Bn().forEach((function(a,o){var i=t+r;for(o=c()[e+4*o>>2>>>0]=i,i=0;i<a.length;++i)n()[o++>>0>>>0]=a.charCodeAt(i);n()[o>>0>>>0]=0,r+=a.length+1})),0}function zn(e,n){if(_)return Mn(20,1,e,n);var t=Bn();c()[e>>2>>>0]=t.length;var r=0;return t.forEach((function(e){r+=e.length+1})),c()[n>>2>>>0]=r,0}function Ln(e){return _?Mn(21,1,e):52}function Fn(e,n,t,r){return _?Mn(22,1,e,n,t,r):52}function Hn(e,n,t,r){return _?Mn(23,1,e,n,t,r):70}var Vn=[null,[],[]];function Nn(e,n,t,a){if(_)return Mn(24,1,e,n,t,a);for(var o=0,i=0;i<t;i++){var u=c()[n>>2>>>0],s=c()[n+4>>2>>>0];n+=8;for(var l=0;l<s;l++){var f=r()[u+l>>>0],p=Vn[e];0===f||10===f?((1===e?O:I)(he(p,0)),p.length=0):p.push(f)}o+=s}return c()[a>>2>>>0]=o,0}var Kn=[31,29,31,30,31,30,31,31,30,31,30,31],Yn=[31,28,31,30,31,30,31,31,30,31,30,31];function qn(e,t,r,a){function o(e,n,t){for(e=\\\"number\\\"==typeof e?e.toString():e||\\\"\\\";e.length<n;)e=t[0]+e;return e}function c(e,n){return o(e,n,\\\"0\\\")}function u(e,n){function t(e){return 0>e?-1:0<e?1:0}var r;return 0===(r=t(e.getFullYear()-n.getFullYear()))&&0===(r=t(e.getMonth()-n.getMonth()))&&(r=t(e.getDate()-n.getDate())),r}function s(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function l(e){var n=e.lb;for(e=new Date(new Date(e.mb+1900,0,1).getTime());0<n;){var t=e.getMonth(),r=(Tn(e.getFullYear())?Kn:Yn)[t];if(!(n>r-e.getDate())){e.setDate(e.getDate()+n);break}n-=r-e.getDate()+1,e.setDate(1),11>t?e.setMonth(t+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return t=new Date(e.getFullYear()+1,0,4),n=s(new Date(e.getFullYear(),0,4)),t=s(t),0>=u(n,e)?0>=u(t,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var f=i()[a+40>>2>>>0];for(var p in a={Qb:i()[a>>2>>>0],Pb:i()[a+4>>2>>>0],rb:i()[a+8>>2>>>0],vb:i()[a+12>>2>>>0],sb:i()[a+16>>2>>>0],mb:i()[a+20>>2>>>0],ib:i()[a+24>>2>>>0],lb:i()[a+28>>2>>>0],Yb:i()[a+32>>2>>>0],Ob:i()[a+36>>2>>>0],Rb:f?ge(f):\\\"\\\"},r=ge(r),f={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})r=r.replace(new RegExp(p,\\\"g\\\"),f[p]);var d=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),h=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(p in f={\\\"%a\\\":function(e){return d[e.ib].substring(0,3)},\\\"%A\\\":function(e){return d[e.ib]},\\\"%b\\\":function(e){return h[e.sb].substring(0,3)},\\\"%B\\\":function(e){return h[e.sb]},\\\"%C\\\":function(e){return c((e.mb+1900)/100|0,2)},\\\"%d\\\":function(e){return c(e.vb,2)},\\\"%e\\\":function(e){return o(e.vb,2,\\\" \\\")},\\\"%g\\\":function(e){return l(e).toString().substring(2)},\\\"%G\\\":function(e){return l(e)},\\\"%H\\\":function(e){return c(e.rb,2)},\\\"%I\\\":function(e){return 0==(e=e.rb)?e=12:12<e&&(e-=12),c(e,2)},\\\"%j\\\":function(e){for(var n=0,t=0;t<=e.sb-1;n+=(Tn(e.mb+1900)?Kn:Yn)[t++]);return c(e.vb+n,3)},\\\"%m\\\":function(e){return c(e.sb+1,2)},\\\"%M\\\":function(e){return c(e.Pb,2)},\\\"%n\\\":function(){return\\\"\\\\n\\\"},\\\"%p\\\":function(e){return 0<=e.rb&&12>e.rb?\\\"AM\\\":\\\"PM\\\"},\\\"%S\\\":function(e){return c(e.Qb,2)},\\\"%t\\\":function(){return\\\"\\\\t\\\"},\\\"%u\\\":function(e){return e.ib||7},\\\"%U\\\":function(e){return c(Math.floor((e.lb+7-e.ib)/7),2)},\\\"%V\\\":function(e){var n=Math.floor((e.lb+7-(e.ib+6)%7)/7);if(2>=(e.ib+371-e.lb-2)%7&&n++,n)53==n&&(4==(t=(e.ib+371-e.lb)%7)||3==t&&Tn(e.mb)||(n=1));else{n=52;var t=(e.ib+7-e.lb-1)%7;(4==t||5==t&&Tn(e.mb%400-1))&&n++}return c(n,2)},\\\"%w\\\":function(e){return e.ib},\\\"%W\\\":function(e){return c(Math.floor((e.lb+7-(e.ib+6)%7)/7),2)},\\\"%y\\\":function(e){return(e.mb+1900).toString().substring(2)},\\\"%Y\\\":function(e){return e.mb+1900},\\\"%z\\\":function(e){var n=0<=(e=e.Ob);return e=Math.abs(e)/60,(n?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(e/60*100+e%60)).slice(-4)},\\\"%Z\\\":function(e){return e.Rb},\\\"%%\\\":function(){return\\\"%\\\"}},r=r.replace(/%%/g,\\\"\\\\0\\\\0\\\"),f)r.includes(p)&&(r=r.replace(new RegExp(p,\\\"g\\\"),f[p](a)));return p=function(e){var n=Array(Ee(e)+1);return Oe(e,n,0,n.length),n}(r=r.replace(/\\\\0\\\\0/g,\\\"%\\\")),p.length>t?0:(function(e,t){n().set(e,t>>>0)}(p,e),p.length-1)}be.tb();for(var Jn=Array(256),Xn=0;256>Xn;++Xn)Jn[Xn]=String.fromCharCode(Xn);He=Jn,Qe=s.BindingError=Xe(\\\"BindingError\\\"),s.InternalError=Xe(\\\"InternalError\\\"),tn.gb.push({value:void 0},{value:null},{value:!0},{value:!1}),tn.qb=tn.gb.length,s.count_emval_handles=function(){for(var e=0,n=tn.qb;n<tn.gb.length;++n)void 0!==tn.gb[n]&&++e;return e};var Qn=[null,ve,_e,Ce,Te,Pe,ke,Re,De,Me,Ue,We,je,Be,Ge,ze,Le,kn,Rn,Gn,zn,Ln,Fn,Hn,Nn],Zn={b:function(e,n,t){throw new Ae(e).tb(n,t),e},ra:function(){oe(\\\"To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html\\\")},ga:function(e){rt(e,!b,1,!y),be.yb()},D:function(e){_?postMessage({cmd:\\\"cleanupThread\\\",thread:e}):fe(e)},W:xe,y:Te,na:Pe,S:ke,U:Re,L:De,ka:Me,ba:Ue,ja:We,F:je,T:Be,Q:Ge,la:ze,R:Le,I:function(e,n,t,r,a){n=Ve(n),t=nn(t);var o=-1!=n.indexOf(\\\"u\\\");o&&(a=(1n<<64n)-1n),$e(e,{name:n,fromWireType:function(e){return e},toWireType:function(e,t){if(\\\"bigint\\\"!=typeof t&&\\\"number\\\"!=typeof t)throw new TypeError('Cannot convert \\\"'+Fe(t)+'\\\" to '+this.name);if(t<r||t>a)throw new TypeError('Passing a number \\\"'+Fe(t)+'\\\" from JS side to C/C++ side to an argument of type \\\"'+n+'\\\", which is outside the valid range ['+r+\\\", \\\"+a+\\\"]!\\\");return t},argPackAdvance:8,readValueFromPointer:en(n,t,!o),ob:null})},ta:function(e,t,r,o,c){var u=nn(r);$e(e,{name:t=Ve(t),fromWireType:function(e){return!!e},toWireType:function(e,n){return n?o:c},argPackAdvance:8,readValueFromPointer:function(e){if(1===r)var o=n();else if(2===r)o=a();else{if(4!==r)throw new TypeError(\\\"Unknown boolean type size: \\\"+t);o=i()}return this.fromWireType(o[e>>>u])},ob:null})},sa:function(e,n){$e(e,{name:n=Ve(n),fromWireType:function(e){var n=an(e);return rn(e),n},toWireType:function(e,n){return on(n)},argPackAdvance:8,readValueFromPointer:cn,ob:null})},H:function(e,n,t){t=nn(t),$e(e,{name:n=Ve(n),fromWireType:function(e){return e},toWireType:function(e,n){return n},argPackAdvance:8,readValueFromPointer:un(n,t),ob:null})},u:function(e,n,t,r,a){n=Ve(n),-1===a&&(a=4294967295),a=nn(t);var o=e=>e;if(0===r){var i=32-8*t;o=e=>e<<i>>>i}t=n.includes(\\\"unsigned\\\")?function(e,n){return n>>>0}:function(e,n){return n},$e(e,{name:n,fromWireType:o,toWireType:t,argPackAdvance:8,readValueFromPointer:en(n,a,0!==r),ob:null})},m:function(e,n,t){function r(e){e>>=2;var n=c();return new a(n.buffer,n[e+1>>>0],n[e>>>0])}var a=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array][n];$e(e,{name:t=Ve(t),fromWireType:r,argPackAdvance:8,readValueFromPointer:r},{Eb:!0})},J:function(e,n){var t=\\\"std::string\\\"===(n=Ve(n));$e(e,{name:n,fromWireType:function(e){var n=c()[e>>2>>>0],a=e+4;if(t)for(var o=a,i=0;i<=n;++i){var u=a+i;if(i==n||0==r()[u>>>0]){if(o=ge(o,u-o),void 0===s)var s=o;else s+=String.fromCharCode(0),s+=o;o=u+1}}else{for(s=Array(n),i=0;i<n;++i)s[i]=String.fromCharCode(r()[a+i>>>0]);s=s.join(\\\"\\\")}return nt(e),s},toWireType:function(e,n){n instanceof ArrayBuffer&&(n=new Uint8Array(n));var a=\\\"string\\\"==typeof n;a||n instanceof Uint8Array||n instanceof Uint8ClampedArray||n instanceof Int8Array||Ze(\\\"Cannot pass non-string to std::string\\\");var o=t&&a?Ee(n):n.length,i=et(4+o+1),u=i+4>>>0;if(c()[i>>2>>>0]=o,t&&a)Ie(n,u,o+1);else if(a)for(a=0;a<o;++a){var s=n.charCodeAt(a);255<s&&(nt(u),Ze(\\\"String has UTF-16 code units that do not fit in 8 bits\\\")),r()[u+a>>>0]=s}else for(a=0;a<o;++a)r()[u+a>>>0]=n[a];return null!==e&&e.push(nt,i),i},argPackAdvance:8,readValueFromPointer:cn,ob:function(e){nt(e)}})},A:function(e,n,t){if(t=Ve(t),2===n)var r=ln,a=fn,i=pn,u=()=>o(),s=1;else 4===n&&(r=dn,a=hn,i=gn,u=()=>c(),s=2);$e(e,{name:t,fromWireType:function(e){for(var t,a=c()[e>>>2],o=u(),i=e+4,l=0;l<=a;++l){var f=e+4+l*n;l!=a&&0!=o[f>>>s]||(i=r(i,f-i),void 0===t?t=i:(t+=String.fromCharCode(0),t+=i),i=f+n)}return nt(e),t},toWireType:function(e,r){\\\"string\\\"!=typeof r&&Ze(\\\"Cannot pass non-string to C++ string type \\\"+t);var o=i(r),u=et(4+o+n);return u>>>=0,c()[u>>>2]=o>>s,a(r,u+4,o+n),null!==e&&e.push(nt,u),u},argPackAdvance:8,readValueFromPointer:cn,ob:function(e){nt(e)}})},ua:function(e,n){$e(e,{Gb:!0,name:n=Ve(n),argPackAdvance:0,fromWireType:function(){},toWireType:function(){}})},X:function(){return 131072},qa:function(){return!0},O:function(e,n){e==n?setTimeout((()=>mn())):_?postMessage({targetThread:e,cmd:\\\"checkMailbox\\\"}):(e=be.hb[e])&&e.postMessage({cmd:\\\"checkMailbox\\\"})},ea:function(){return-1},fa:vn,pa:function(e){w&&be.hb[e].ref()},r:function(e,n,t){e=an(e),n=yn(n,\\\"emval::as\\\");var r=[],a=on(r);return c()[t>>2>>>0]=a,n.toWireType(r,e)},i:function(e,n,t,r,a){e=_n[e],n=an(n),t=wn(t);var o=[];return c()[r>>2>>>0]=on(o),e(n,t,o,a)},s:function(e,n,t,r){(e=_n[e])(n=an(n),t=wn(t),null,r)},c:rn,K:function(e,n){return(e=an(e))==an(n)},o:function(e){return 0===e?on(Sn()):(e=wn(e),on(Sn()[e]))},g:function(e,n){var t=function(e,n){for(var t=Array(e),r=0;r<e;++r)t[r]=yn(c()[n+4*r>>2>>>0],\\\"parameter \\\"+r);return t}(e,n),r=t[0];n=r.name+\\\"_$\\\"+t.slice(1).map((function(e){return e.name})).join(\\\"_\\\")+\\\"$\\\";var a=An[n];if(void 0!==a)return a;a=[\\\"retType\\\"];for(var o=[r],i=\\\"\\\",u=0;u<e-1;++u)i+=(0!==u?\\\", \\\":\\\"\\\")+\\\"arg\\\"+u,a.push(\\\"argType\\\"+u),o.push(t[1+u]);var s=\\\"return function \\\"+qe(\\\"methodCaller_\\\"+n)+\\\"(handle, name, destructors, args) {\\\\n\\\",l=0;for(u=0;u<e-1;++u)s+=\\\"    var arg\\\"+u+\\\" = argType\\\"+u+\\\".readValueFromPointer(args\\\"+(l?\\\"+\\\"+l:\\\"\\\")+\\\");\\\\n\\\",l+=t[u+1].argPackAdvance;for(s+=\\\"    var rv = handle[name](\\\"+i+\\\");\\\\n\\\",u=0;u<e-1;++u)t[u+1].deleteObject&&(s+=\\\"    argType\\\"+u+\\\".deleteObject(arg\\\"+u+\\\");\\\\n\\\");return r.Gb||(s+=\\\"    return retType.toWireType(destructors, rv);\\\\n\\\"),a.push(s+\\\"};\\\\n\\\"),e=function(e){var n=Function;if(!(n instanceof Function))throw new TypeError(\\\"new_ called with constructor type \\\"+typeof n+\\\" which is not a function\\\");var t=Je(n.name||\\\"unknownFunctionName\\\",(function(){}));return t.prototype=n.prototype,t=new t,(e=n.apply(t,e))instanceof Object?e:t}(a).apply(null,o),a=function(e){var n=_n.length;return _n.push(e),n}(e),An[n]=a},t:function(e,n){return e=an(e),n=an(n),on(e[n])},d:function(e){4<e&&(tn.get(e).wb+=1)},x:function(e,n,t,r){e=an(e);var a=Cn[n];return a||(a=function(e){for(var n=\\\"\\\",t=0;t<e;++t)n+=(0!==t?\\\", \\\":\\\"\\\")+\\\"arg\\\"+t;var r=\\\"return function emval_allocator_\\\"+e+\\\"(constructor, argTypes, args) {\\\\n  var HEAPU32 = getMemory();\\\\n\\\";for(t=0;t<e;++t)r+=\\\"var argType\\\"+t+\\\" = requireRegisteredType(HEAPU32[((argTypes)>>2)], 'parameter \\\"+t+\\\"');\\\\nvar arg\\\"+t+\\\" = argType\\\"+t+\\\".readValueFromPointer(args);\\\\nargs += argType\\\"+t+\\\"['argPackAdvance'];\\\\nargTypes += 4;\\\\n\\\";return new Function(\\\"requireRegisteredType\\\",\\\"Module\\\",\\\"valueToHandle\\\",\\\"getMemory\\\",r+\\\"var obj = new constructor(\\\"+n+\\\");\\\\nreturn valueToHandle(obj);\\\\n}\\\\n\\\")(yn,s,on,(()=>c()))}(n),Cn[n]=a),a(e,t,r)},v:function(){return on([])},l:function(e){e=an(e);for(var n=Array(e.length),t=0;t<e.length;t++)n[t]=e[t];return on(n)},e:function(e){return on(wn(e))},k:function(){return on({})},h:function(e){for(var n=an(e);n.length;){var t=n.pop();n.pop()(t)}rn(e)},j:function(e,n,t){e=an(e),n=an(n),t=an(t),e[n]=t},f:function(e,n){return e=(e=yn(e,\\\"_emval_take_value\\\")).readValueFromPointer(n),on(e)},_:function(e,n){e=new Date(1e3*xn(e)),i()[n>>2>>>0]=e.getUTCSeconds(),i()[n+4>>2>>>0]=e.getUTCMinutes(),i()[n+8>>2>>>0]=e.getUTCHours(),i()[n+12>>2>>>0]=e.getUTCDate(),i()[n+16>>2>>>0]=e.getUTCMonth(),i()[n+20>>2>>>0]=e.getUTCFullYear()-1900,i()[n+24>>2>>>0]=e.getUTCDay(),e=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,i()[n+28>>2>>>0]=e},$:function(e,n){e=new Date(1e3*xn(e)),i()[n>>2>>>0]=e.getSeconds(),i()[n+4>>2>>>0]=e.getMinutes(),i()[n+8>>2>>>0]=e.getHours(),i()[n+12>>2>>>0]=e.getDate(),i()[n+16>>2>>>0]=e.getMonth(),i()[n+20>>2>>>0]=e.getFullYear()-1900,i()[n+24>>2>>>0]=e.getDay();var t=0|In(e);i()[n+28>>2>>>0]=t,i()[n+36>>2>>>0]=-60*e.getTimezoneOffset(),t=new Date(e.getFullYear(),6,1).getTimezoneOffset();var r=new Date(e.getFullYear(),0,1).getTimezoneOffset();e=0|(t!=r&&e.getTimezoneOffset()==Math.min(r,t)),i()[n+32>>2>>>0]=e},aa:function(e){var n=new Date(i()[e+20>>2>>>0]+1900,i()[e+16>>2>>>0],i()[e+12>>2>>>0],i()[e+8>>2>>>0],i()[e+4>>2>>>0],i()[e>>2>>>0],0),t=i()[e+32>>2>>>0],r=n.getTimezoneOffset(),a=new Date(n.getFullYear(),6,1).getTimezoneOffset(),o=new Date(n.getFullYear(),0,1).getTimezoneOffset(),c=Math.min(o,a);return 0>t?i()[e+32>>2>>>0]=Number(a!=o&&c==r):0<t!=(c==r)&&(a=Math.max(o,a),n.setTime(n.getTime()+6e4*((0<t?c:a)-r))),i()[e+24>>2>>>0]=n.getDay(),t=0|In(n),i()[e+28>>2>>>0]=t,i()[e>>2>>>0]=n.getSeconds(),i()[e+4>>2>>>0]=n.getMinutes(),i()[e+8>>2>>>0]=n.getHours(),i()[e+12>>2>>>0]=n.getDate(),i()[e+16>>2>>>0]=n.getMonth(),i()[e+20>>2>>>0]=n.getYear(),n.getTime()/1e3|0},Y:kn,Z:Rn,N:function(e,n,t){function r(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\\\"GMT\\\"}var a=(new Date).getFullYear(),o=new Date(a,0,1),u=new Date(a,6,1);a=o.getTimezoneOffset();var s=u.getTimezoneOffset(),l=Math.max(a,s);c()[e>>2>>>0]=60*l,i()[n>>2>>>0]=Number(a!=s),e=r(o),n=r(u),e=Dn(e),n=Dn(n),s<a?(c()[t>>2>>>0]=e,c()[t+4>>2>>>0]=n):(c()[t>>2>>>0]=n,c()[t+4>>2>>>0]=e)},n:function(){oe(\\\"\\\")},va:function(){oe(\\\"To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html\\\")},E:function(){},G:function(){return Date.now()},oa:function(){throw Z+=1,\\\"unwind\\\"},P:function(){return 4294901760},q:Pn,w:function(){return w?t(993).cpus().length:navigator.hardwareConcurrency},da:function(e,n,t){n/=2,Wn.length=n,t>>=3;for(var r=0;r<n;r++)Wn[r]=F[t+2*r]?F[t+2*r+1]:u()[t+2*r+1>>>0];return Qn[e].apply(null,Wn)},M:function(e){var n=r().length;if((e>>>=0)<=n||4294901760<e)return!1;for(var t=1;4>=t;t*=2){var a=n*(1+.2/t);a=Math.min(a,e+100663296);var o=Math,i=o.min;a=Math.max(e,a),a+=(65536-a%65536)%65536;e:{var c=R.buffer;try{R.grow(i.call(o,4294901760,a)-c.byteLength+65535>>>16),K();var u=1;break e}catch(e){}u=void 0}if(u)return!0}return!1},ha:Gn,ia:zn,V:me,z:Ln,C:Fn,ca:Hn,B:Nn,a:R||s.wasmMemory,ma:qn,p:function(e,n,t,r){return qn(e,n,t,r)}};!function(){function e(e,n){return e=e.exports,s.asm=e,be.zb.push(s.asm.Ua),q=s.asm.Xa,X.unshift(s.asm.wa),D=n,be.Ib((()=>{if(te--,s.monitorRunDependencies&&s.monitorRunDependencies(te),0==te&&(null!==re&&(clearInterval(re),re=null),ae)){var e=ae;ae=null,e()}})),e}var n={a:Zn};if(te++,s.monitorRunDependencies&&s.monitorRunDependencies(te),s.instantiateWasm)try{return s.instantiateWasm(n,e)}catch(e){I(\\\"Module.instantiateWasm callback failed with error: \\\"+e),f(e)}(function(e,n){var t=ne;return E||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||ie(t)||t.startsWith(\\\"file://\\\")||w||\\\"function\\\"!=typeof fetch?ue(t,e,n):fetch(t,{credentials:\\\"same-origin\\\"}).then((r=>WebAssembly.instantiateStreaming(r,e).then(n,(function(r){return I(\\\"wasm streaming compile failed: \\\"+r),I(\\\"falling back to ArrayBuffer instantiation\\\"),ue(t,e,n)}))))})(n,(function(n){e(n.instance,n.module)})).catch(f)}(),s._OrtInit=function(){return(s._OrtInit=s.asm.xa).apply(null,arguments)},s._OrtGetLastError=function(){return(s._OrtGetLastError=s.asm.ya).apply(null,arguments)},s._OrtCreateSessionOptions=function(){return(s._OrtCreateSessionOptions=s.asm.za).apply(null,arguments)},s._OrtAppendExecutionProvider=function(){return(s._OrtAppendExecutionProvider=s.asm.Aa).apply(null,arguments)},s._OrtAddSessionConfigEntry=function(){return(s._OrtAddSessionConfigEntry=s.asm.Ba).apply(null,arguments)},s._OrtReleaseSessionOptions=function(){return(s._OrtReleaseSessionOptions=s.asm.Ca).apply(null,arguments)},s._OrtCreateSession=function(){return(s._OrtCreateSession=s.asm.Da).apply(null,arguments)},s._OrtReleaseSession=function(){return(s._OrtReleaseSession=s.asm.Ea).apply(null,arguments)},s._OrtGetInputOutputCount=function(){return(s._OrtGetInputOutputCount=s.asm.Fa).apply(null,arguments)},s._OrtGetInputName=function(){return(s._OrtGetInputName=s.asm.Ga).apply(null,arguments)},s._OrtGetOutputName=function(){return(s._OrtGetOutputName=s.asm.Ha).apply(null,arguments)},s._OrtFree=function(){return(s._OrtFree=s.asm.Ia).apply(null,arguments)},s._OrtCreateTensor=function(){return(s._OrtCreateTensor=s.asm.Ja).apply(null,arguments)},s._OrtGetTensorData=function(){return(s._OrtGetTensorData=s.asm.Ka).apply(null,arguments)},s._OrtReleaseTensor=function(){return(s._OrtReleaseTensor=s.asm.La).apply(null,arguments)},s._OrtCreateRunOptions=function(){return(s._OrtCreateRunOptions=s.asm.Ma).apply(null,arguments)},s._OrtAddRunConfigEntry=function(){return(s._OrtAddRunConfigEntry=s.asm.Na).apply(null,arguments)},s._OrtReleaseRunOptions=function(){return(s._OrtReleaseRunOptions=s.asm.Oa).apply(null,arguments)},s._OrtRun=function(){return(s._OrtRun=s.asm.Pa).apply(null,arguments)},s._OrtEndProfiling=function(){return(s._OrtEndProfiling=s.asm.Qa).apply(null,arguments)};var $n=s._pthread_self=function(){return($n=s._pthread_self=s.asm.Ra).apply(null,arguments)},et=s._malloc=function(){return(et=s._malloc=s.asm.Sa).apply(null,arguments)},nt=s._free=function(){return(nt=s._free=s.asm.Ta).apply(null,arguments)};function tt(){return(tt=s.asm.Va).apply(null,arguments)}s.__emscripten_tls_init=function(){return(s.__emscripten_tls_init=s.asm.Ua).apply(null,arguments)},s.__embind_initialize_bindings=function(){return(s.__embind_initialize_bindings=s.asm.Wa).apply(null,arguments)};var rt=s.__emscripten_thread_init=function(){return(rt=s.__emscripten_thread_init=s.asm.Ya).apply(null,arguments)};function at(){return(at=s.asm._a).apply(null,arguments)}function ot(){return(ot=s.asm.$a).apply(null,arguments)}s.__emscripten_thread_crashed=function(){return(s.__emscripten_thread_crashed=s.asm.Za).apply(null,arguments)};var it,ct=s.__emscripten_thread_exit=function(){return(ct=s.__emscripten_thread_exit=s.asm.ab).apply(null,arguments)},ut=s.__emscripten_check_mailbox=function(){return(ut=s.__emscripten_check_mailbox=s.asm.bb).apply(null,arguments)};function st(){return(st=s.asm.cb).apply(null,arguments)}function lt(){return(lt=s.asm.db).apply(null,arguments)}function ft(){return(ft=s.asm.eb).apply(null,arguments)}function pt(){return(pt=s.asm.fb).apply(null,arguments)}function dt(){function e(){if(!it&&(it=!0,s.calledRun=!0,!N)&&(_||we(X),l(s),s.onRuntimeInitialized&&s.onRuntimeInitialized(),!_)){if(s.postRun)for(\\\"function\\\"==typeof s.postRun&&(s.postRun=[s.postRun]);s.postRun.length;){var e=s.postRun.shift();Q.unshift(e)}we(Q)}}if(!(0<te))if(_)l(s),_||we(X),startWorker(s);else{if(s.preRun)for(\\\"function\\\"==typeof s.preRun&&(s.preRun=[s.preRun]);s.preRun.length;)ee();we(J),0<te||(s.setStatus?(s.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){s.setStatus(\\\"\\\")}),1),e()}),1)):e())}}if(s.keepRuntimeAlive=$,s.wasmMemory=R,s.stackAlloc=pt,s.stackSave=lt,s.stackRestore=ft,s.UTF8ToString=ge,s.stringToUTF8=Ie,s.lengthBytesUTF8=Ee,s.ExitStatus=se,s.PThread=be,ae=function e(){it||dt(),it||(ae=e)},s.preInit)for(\\\"function\\\"==typeof s.preInit&&(s.preInit=[s.preInit]);0<s.preInit.length;)s.preInit.pop()();return dt(),e.ready});e.exports=r},932:function(e,n,t){var _scriptDir,r=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\\\"undefined\\\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(e={}){var n,r,a;n||(n=void 0!==e?e:{}),n.ready=new Promise(((e,n)=>{r=e,a=n}));var o,i,c,u=Object.assign({},n),s=\\\"./this.program\\\",l=\\\"object\\\"==typeof window,f=\\\"function\\\"==typeof importScripts,p=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,d=\\\"\\\";if(p){var h=t(384),g=t(908);d=f?g.dirname(d)+\\\"/\\\":__dirname+\\\"/\\\",o=(e,n)=>(e=e.startsWith(\\\"file://\\\")?new URL(e):g.normalize(e),h.readFileSync(e,n?void 0:\\\"utf8\\\")),c=e=>((e=o(e,!0)).buffer||(e=new Uint8Array(e)),e),i=(e,n,t,r=!0)=>{e=e.startsWith(\\\"file://\\\")?new URL(e):g.normalize(e),h.readFile(e,r?void 0:\\\"utf8\\\",((e,a)=>{e?t(e):n(r?a.buffer:a)}))},!n.thisProgram&&1<process.argv.length&&(s=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),n.inspect=()=>\\\"[Emscripten Module object]\\\"}else(l||f)&&(f?d=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(d=document.currentScript.src),_scriptDir&&(d=_scriptDir),d=0!==d.indexOf(\\\"blob:\\\")?d.substr(0,d.replace(/[?#].*/,\\\"\\\").lastIndexOf(\\\"/\\\")+1):\\\"\\\",o=e=>{var n=new XMLHttpRequest;return n.open(\\\"GET\\\",e,!1),n.send(null),n.responseText},f&&(c=e=>{var n=new XMLHttpRequest;return n.open(\\\"GET\\\",e,!1),n.responseType=\\\"arraybuffer\\\",n.send(null),new Uint8Array(n.response)}),i=(e,n,t)=>{var r=new XMLHttpRequest;r.open(\\\"GET\\\",e,!0),r.responseType=\\\"arraybuffer\\\",r.onload=()=>{200==r.status||0==r.status&&r.response?n(r.response):t()},r.onerror=t,r.send(null)});var v,m=n.print||console.log.bind(console),y=n.printErr||console.warn.bind(console);Object.assign(n,u),u=null,n.thisProgram&&(s=n.thisProgram),n.wasmBinary&&(v=n.wasmBinary),n.noExitRuntime,\\\"object\\\"!=typeof WebAssembly&&z(\\\"no native wasm support detected\\\");var b,w,_,S,A,C,x,T,P,E,O,I=!1;function k(){var e=b.buffer;n.HEAP8=w=new Int8Array(e),n.HEAP16=S=new Int16Array(e),n.HEAP32=C=new Int32Array(e),n.HEAPU8=_=new Uint8Array(e),n.HEAPU16=A=new Uint16Array(e),n.HEAPU32=x=new Uint32Array(e),n.HEAPF32=T=new Float32Array(e),n.HEAPF64=O=new Float64Array(e),n.HEAP64=P=new BigInt64Array(e),n.HEAPU64=E=new BigUint64Array(e)}var R=[],D=[],M=[];function U(){var e=n.preRun.shift();R.unshift(e)}var W,j=0,B=null,G=null;function z(e){throw n.onAbort&&n.onAbort(e),y(e=\\\"Aborted(\\\"+e+\\\")\\\"),I=!0,e=new WebAssembly.RuntimeError(e+\\\". Build with -sASSERTIONS for more info.\\\"),a(e),e}function L(e){return e.startsWith(\\\"data:application/octet-stream;base64,\\\")}if(!L(W=\\\"ort-wasm.wasm\\\")){var F=W;W=n.locateFile?n.locateFile(F,d):d+F}function H(e){try{if(e==W&&v)return new Uint8Array(v);if(c)return c(e);throw\\\"both async and sync fetching of the wasm failed\\\"}catch(e){z(e)}}function V(e,n,t){return function(e){if(!v&&(l||f)){if(\\\"function\\\"==typeof fetch&&!e.startsWith(\\\"file://\\\"))return fetch(e,{credentials:\\\"same-origin\\\"}).then((n=>{if(!n.ok)throw\\\"failed to load wasm binary file at '\\\"+e+\\\"'\\\";return n.arrayBuffer()})).catch((()=>H(e)));if(i)return new Promise(((n,t)=>{i(e,(e=>n(new Uint8Array(e))),t)}))}return Promise.resolve().then((()=>H(e)))}(e).then((e=>WebAssembly.instantiate(e,n))).then((e=>e)).then(t,(e=>{y(\\\"failed to asynchronously prepare wasm: \\\"+e),z(e)}))}function N(e){for(;0<e.length;)e.shift()(n)}function K(e){this.Ja=e-24,this.Wa=function(e){x[this.Ja+4>>2>>>0]=e},this.Va=function(e){x[this.Ja+8>>2>>>0]=e},this.Ra=function(e,n){this.Sa(),this.Wa(e),this.Va(n)},this.Sa=function(){x[this.Ja+16>>2>>>0]=0}}var Y=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf8\\\"):void 0;function q(e,n,t){var r=(n>>>=0)+t;for(t=n;e[t]&&!(t>=r);)++t;if(16<t-n&&e.buffer&&Y)return Y.decode(e.subarray(n,t));for(r=\\\"\\\";n<t;){var a=e[n++];if(128&a){var o=63&e[n++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[n++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[n++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function J(e,n){return(e>>>=0)?q(_,e,n):\\\"\\\"}function X(e){for(var n=0,t=0;t<e.length;++t){var r=e.charCodeAt(t);127>=r?n++:2047>=r?n+=2:55296<=r&&57343>=r?(n+=4,++t):n+=3}return n}function Q(e,n,t,r){if(!(0<r))return 0;var a=t>>>=0;r=t+r-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(t>=r)break;n[t++>>>0]=i}else{if(2047>=i){if(t+1>=r)break;n[t++>>>0]=192|i>>6}else{if(65535>=i){if(t+2>=r)break;n[t++>>>0]=224|i>>12}else{if(t+3>=r)break;n[t++>>>0]=240|i>>18,n[t++>>>0]=128|i>>12&63}n[t++>>>0]=128|i>>6&63}n[t++>>>0]=128|63&i}}return n[t>>>0]=0,t-a}function Z(e,n,t){return Q(e,_,n,t)}function $(e){if(null===e)return\\\"null\\\";var n=typeof e;return\\\"object\\\"===n||\\\"array\\\"===n||\\\"function\\\"===n?e.toString():\\\"\\\"+e}var ee=void 0;function ne(e){for(var n=\\\"\\\";_[e>>>0];)n+=ee[_[e++>>>0]];return n}var te={},re={},ae={};function oe(e){if(void 0===e)return\\\"_unknown\\\";var n=(e=e.replace(/[^a-zA-Z0-9_]/g,\\\"$\\\")).charCodeAt(0);return 48<=n&&57>=n?\\\"_\\\"+e:e}function ie(e,n){return{[e=oe(e)]:function(){return n.apply(this,arguments)}}[e]}function ce(e){var n=Error,t=ie(e,(function(n){this.name=e,this.message=n,void 0!==(n=Error(n).stack)&&(this.stack=this.toString()+\\\"\\\\n\\\"+n.replace(/^Error(:[^\\\\n]*)?\\\\n/,\\\"\\\"))}));return t.prototype=Object.create(n.prototype),t.prototype.constructor=t,t.prototype.toString=function(){return void 0===this.message?this.name:this.name+\\\": \\\"+this.message},t}var ue=void 0;function se(e){throw new ue(e)}function le(e,n,t={}){if(!(\\\"argPackAdvance\\\"in n))throw new TypeError(\\\"registerType registeredInstance requires argPackAdvance\\\");var r=n.name;if(e||se('type \\\"'+r+'\\\" must have a positive integer typeid pointer'),re.hasOwnProperty(e)){if(t.Za)return;se(\\\"Cannot register type '\\\"+r+\\\"' twice\\\")}re[e]=n,delete ae[e],te.hasOwnProperty(e)&&(n=te[e],delete te[e],n.forEach((e=>e())))}function fe(e,n,t){switch(n){case 0:return t?function(e){return w[e>>>0]}:function(e){return _[e>>>0]};case 1:return t?function(e){return S[e>>>1]}:function(e){return A[e>>>1]};case 2:return t?function(e){return C[e>>>2]}:function(e){return x[e>>>2]};case 3:return t?function(e){return P[e>>3]}:function(e){return E[e>>3]};default:throw new TypeError(\\\"Unknown integer type: \\\"+e)}}function pe(e){switch(e){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError(\\\"Unknown type size: \\\"+e)}}var de=new function(){this.Ja=[void 0],this.Ra=[],this.get=function(e){return this.Ja[e]},this.Va=function(e){let n=this.Ra.pop()||this.Ja.length;return this.Ja[n]=e,n},this.Wa=function(e){this.Ja[e]=void 0,this.Ra.push(e)}};function he(e){e>=de.Sa&&0==--de.get(e).Ya&&de.Wa(e)}var ge=e=>(e||se(\\\"Cannot use deleted val. handle = \\\"+e),de.get(e).value),ve=e=>{switch(e){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:return de.Va({Ya:1,value:e})}};function me(e){return this.fromWireType(C[e>>2>>>0])}function ye(e,n){switch(n){case 2:return function(e){return this.fromWireType(T[e>>>2])};case 3:return function(e){return this.fromWireType(O[e>>>3])};default:throw new TypeError(\\\"Unknown float type: \\\"+e)}}var be=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf-16le\\\"):void 0;function we(e,n){for(var t=e>>1,r=t+n/2;!(t>=r)&&A[t>>>0];)++t;if(32<(t<<=1)-e&&be)return be.decode(_.subarray(e>>>0,t>>>0));for(t=\\\"\\\",r=0;!(r>=n/2);++r){var a=S[e+2*r>>1>>>0];if(0==a)break;t+=String.fromCharCode(a)}return t}function _e(e,n,t){if(void 0===t&&(t=2147483647),2>t)return 0;var r=n;t=(t-=2)<2*e.length?t/2:e.length;for(var a=0;a<t;++a)S[n>>1>>>0]=e.charCodeAt(a),n+=2;return S[n>>1>>>0]=0,n-r}function Se(e){return 2*e.length}function Ae(e,n){for(var t=0,r=\\\"\\\";!(t>=n/4);){var a=C[e+4*t>>2>>>0];if(0==a)break;++t,65536<=a?(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a)):r+=String.fromCharCode(a)}return r}function Ce(e,n,t){if(void 0===t&&(t=2147483647),4>t)return 0;var r=n>>>=0;t=r+t-4;for(var a=0;a<e.length;++a){var o=e.charCodeAt(a);if(55296<=o&&57343>=o&&(o=65536+((1023&o)<<10)|1023&e.charCodeAt(++a)),C[n>>2>>>0]=o,(n+=4)+4>t)break}return C[n>>2>>>0]=0,n-r}function xe(e){for(var n=0,t=0;t<e.length;++t){var r=e.charCodeAt(t);55296<=r&&57343>=r&&++t,n+=4}return n}function Te(e,n){var t=re[e];if(void 0===t){var r=ne(e=Ze(e));Qe(e),se(n+\\\" has unknown type \\\"+r)}return t}var Pe={};function Ee(e){var n=Pe[e];return void 0===n?ne(e):n}var Oe=[];function Ie(){return\\\"object\\\"==typeof globalThis?globalThis:Function(\\\"return this\\\")()}var ke=[],Re={};function De(e){return 0==e%4&&(0!=e%100||0==e%400)}var Me,Ue=[0,31,60,91,121,152,182,213,244,274,305,335],We=[0,31,59,90,120,151,181,212,243,273,304,334];function je(e){return(De(e.getFullYear())?Ue:We)[e.getMonth()]+e.getDate()-1}function Be(e){var n=X(e)+1,t=Xe(n);return t&&Z(e,t,n),t}Me=p?()=>{var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:()=>performance.now();var Ge={};function ze(){if(!Le){var e,n={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:s||\\\"./this.program\\\"};for(e in Ge)void 0===Ge[e]?delete n[e]:n[e]=Ge[e];var t=[];for(e in n)t.push(e+\\\"=\\\"+n[e]);Le=t}return Le}var Le,Fe=[null,[],[]],He=[31,29,31,30,31,30,31,31,30,31,30,31],Ve=[31,28,31,30,31,30,31,31,30,31,30,31];function Ne(e,n,t,r){function a(e,n,t){for(e=\\\"number\\\"==typeof e?e.toString():e||\\\"\\\";e.length<n;)e=t[0]+e;return e}function o(e,n){return a(e,n,\\\"0\\\")}function i(e,n){function t(e){return 0>e?-1:0<e?1:0}var r;return 0===(r=t(e.getFullYear()-n.getFullYear()))&&0===(r=t(e.getMonth()-n.getMonth()))&&(r=t(e.getDate()-n.getDate())),r}function c(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function u(e){var n=e.Oa;for(e=new Date(new Date(e.Pa+1900,0,1).getTime());0<n;){var t=e.getMonth(),r=(De(e.getFullYear())?He:Ve)[t];if(!(n>r-e.getDate())){e.setDate(e.getDate()+n);break}n-=r-e.getDate()+1,e.setDate(1),11>t?e.setMonth(t+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return t=new Date(e.getFullYear()+1,0,4),n=c(new Date(e.getFullYear(),0,4)),t=c(t),0>=i(n,e)?0>=i(t,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var s=C[r+40>>2>>>0];for(var l in r={cb:C[r>>2>>>0],bb:C[r+4>>2>>>0],Ta:C[r+8>>2>>>0],Xa:C[r+12>>2>>>0],Ua:C[r+16>>2>>>0],Pa:C[r+20>>2>>>0],Na:C[r+24>>2>>>0],Oa:C[r+28>>2>>>0],fb:C[r+32>>2>>>0],ab:C[r+36>>2>>>0],eb:s?J(s):\\\"\\\"},t=J(t),s={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})t=t.replace(new RegExp(l,\\\"g\\\"),s[l]);var f=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),p=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(l in s={\\\"%a\\\":function(e){return f[e.Na].substring(0,3)},\\\"%A\\\":function(e){return f[e.Na]},\\\"%b\\\":function(e){return p[e.Ua].substring(0,3)},\\\"%B\\\":function(e){return p[e.Ua]},\\\"%C\\\":function(e){return o((e.Pa+1900)/100|0,2)},\\\"%d\\\":function(e){return o(e.Xa,2)},\\\"%e\\\":function(e){return a(e.Xa,2,\\\" \\\")},\\\"%g\\\":function(e){return u(e).toString().substring(2)},\\\"%G\\\":function(e){return u(e)},\\\"%H\\\":function(e){return o(e.Ta,2)},\\\"%I\\\":function(e){return 0==(e=e.Ta)?e=12:12<e&&(e-=12),o(e,2)},\\\"%j\\\":function(e){for(var n=0,t=0;t<=e.Ua-1;n+=(De(e.Pa+1900)?He:Ve)[t++]);return o(e.Xa+n,3)},\\\"%m\\\":function(e){return o(e.Ua+1,2)},\\\"%M\\\":function(e){return o(e.bb,2)},\\\"%n\\\":function(){return\\\"\\\\n\\\"},\\\"%p\\\":function(e){return 0<=e.Ta&&12>e.Ta?\\\"AM\\\":\\\"PM\\\"},\\\"%S\\\":function(e){return o(e.cb,2)},\\\"%t\\\":function(){return\\\"\\\\t\\\"},\\\"%u\\\":function(e){return e.Na||7},\\\"%U\\\":function(e){return o(Math.floor((e.Oa+7-e.Na)/7),2)},\\\"%V\\\":function(e){var n=Math.floor((e.Oa+7-(e.Na+6)%7)/7);if(2>=(e.Na+371-e.Oa-2)%7&&n++,n)53==n&&(4==(t=(e.Na+371-e.Oa)%7)||3==t&&De(e.Pa)||(n=1));else{n=52;var t=(e.Na+7-e.Oa-1)%7;(4==t||5==t&&De(e.Pa%400-1))&&n++}return o(n,2)},\\\"%w\\\":function(e){return e.Na},\\\"%W\\\":function(e){return o(Math.floor((e.Oa+7-(e.Na+6)%7)/7),2)},\\\"%y\\\":function(e){return(e.Pa+1900).toString().substring(2)},\\\"%Y\\\":function(e){return e.Pa+1900},\\\"%z\\\":function(e){var n=0<=(e=e.ab);return e=Math.abs(e)/60,(n?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(e/60*100+e%60)).slice(-4)},\\\"%Z\\\":function(e){return e.eb},\\\"%%\\\":function(){return\\\"%\\\"}},t=t.replace(/%%/g,\\\"\\\\0\\\\0\\\"),s)t.includes(l)&&(t=t.replace(new RegExp(l,\\\"g\\\"),s[l](r)));return l=function(e){var n=Array(X(e)+1);return Q(e,n,0,n.length),n}(t=t.replace(/\\\\0\\\\0/g,\\\"%\\\")),l.length>n?0:(w.set(l,e>>>0),l.length-1)}for(var Ke=Array(256),Ye=0;256>Ye;++Ye)Ke[Ye]=String.fromCharCode(Ye);ee=Ke,ue=n.BindingError=ce(\\\"BindingError\\\"),n.InternalError=ce(\\\"InternalError\\\"),de.Ja.push({value:void 0},{value:null},{value:!0},{value:!1}),de.Sa=de.Ja.length,n.count_emval_handles=function(){for(var e=0,n=de.Sa;n<de.Ja.length;++n)void 0!==de.Ja[n]&&++e;return e};var qe={a:function(e,n,t){throw new K(e).Ra(n,t),e},da:function(){z(\\\"To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html\\\")},v:function(){return 0},ba:function(){},N:function(){},P:function(){},H:function(){return 0},$:function(){},V:function(){},_:function(){},A:function(){},O:function(){},L:function(){},aa:function(){},M:function(){},D:function(e,n,t,r,a){n=ne(n),t=pe(t);var o=-1!=n.indexOf(\\\"u\\\");o&&(a=(1n<<64n)-1n),le(e,{name:n,fromWireType:function(e){return e},toWireType:function(e,t){if(\\\"bigint\\\"!=typeof t&&\\\"number\\\"!=typeof t)throw new TypeError('Cannot convert \\\"'+$(t)+'\\\" to '+this.name);if(t<r||t>a)throw new TypeError('Passing a number \\\"'+$(t)+'\\\" from JS side to C/C++ side to an argument of type \\\"'+n+'\\\", which is outside the valid range ['+r+\\\", \\\"+a+\\\"]!\\\");return t},argPackAdvance:8,readValueFromPointer:fe(n,t,!o),Qa:null})},ga:function(e,n,t,r,a){var o=pe(t);le(e,{name:n=ne(n),fromWireType:function(e){return!!e},toWireType:function(e,n){return n?r:a},argPackAdvance:8,readValueFromPointer:function(e){if(1===t)var r=w;else if(2===t)r=S;else{if(4!==t)throw new TypeError(\\\"Unknown boolean type size: \\\"+n);r=C}return this.fromWireType(r[e>>>o])},Qa:null})},fa:function(e,n){le(e,{name:n=ne(n),fromWireType:function(e){var n=ge(e);return he(e),n},toWireType:function(e,n){return ve(n)},argPackAdvance:8,readValueFromPointer:me,Qa:null})},C:function(e,n,t){t=pe(t),le(e,{name:n=ne(n),fromWireType:function(e){return e},toWireType:function(e,n){return n},argPackAdvance:8,readValueFromPointer:ye(n,t),Qa:null})},p:function(e,n,t,r,a){n=ne(n),-1===a&&(a=4294967295),a=pe(t);var o=e=>e;if(0===r){var i=32-8*t;o=e=>e<<i>>>i}t=n.includes(\\\"unsigned\\\")?function(e,n){return n>>>0}:function(e,n){return n},le(e,{name:n,fromWireType:o,toWireType:t,argPackAdvance:8,readValueFromPointer:fe(n,a,0!==r),Qa:null})},l:function(e,n,t){function r(e){e>>=2;var n=x;return new a(n.buffer,n[e+1>>>0],n[e>>>0])}var a=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array][n];le(e,{name:t=ne(t),fromWireType:r,argPackAdvance:8,readValueFromPointer:r},{Za:!0})},E:function(e,n){var t=\\\"std::string\\\"===(n=ne(n));le(e,{name:n,fromWireType:function(e){var n=x[e>>2>>>0],r=e+4;if(t)for(var a=r,o=0;o<=n;++o){var i=r+o;if(o==n||0==_[i>>>0]){if(a=J(a,i-a),void 0===c)var c=a;else c+=String.fromCharCode(0),c+=a;a=i+1}}else{for(c=Array(n),o=0;o<n;++o)c[o]=String.fromCharCode(_[r+o>>>0]);c=c.join(\\\"\\\")}return Qe(e),c},toWireType:function(e,n){n instanceof ArrayBuffer&&(n=new Uint8Array(n));var r=\\\"string\\\"==typeof n;r||n instanceof Uint8Array||n instanceof Uint8ClampedArray||n instanceof Int8Array||se(\\\"Cannot pass non-string to std::string\\\");var a=t&&r?X(n):n.length,o=Xe(4+a+1),i=o+4>>>0;if(x[o>>2>>>0]=a,t&&r)Z(n,i,a+1);else if(r)for(r=0;r<a;++r){var c=n.charCodeAt(r);255<c&&(Qe(i),se(\\\"String has UTF-16 code units that do not fit in 8 bits\\\")),_[i+r>>>0]=c}else for(r=0;r<a;++r)_[i+r>>>0]=n[r];return null!==e&&e.push(Qe,o),o},argPackAdvance:8,readValueFromPointer:me,Qa:function(e){Qe(e)}})},x:function(e,n,t){if(t=ne(t),2===n)var r=we,a=_e,o=Se,i=()=>A,c=1;else 4===n&&(r=Ae,a=Ce,o=xe,i=()=>x,c=2);le(e,{name:t,fromWireType:function(e){for(var t,a=x[e>>>2],o=i(),u=e+4,s=0;s<=a;++s){var l=e+4+s*n;s!=a&&0!=o[l>>>c]||(u=r(u,l-u),void 0===t?t=u:(t+=String.fromCharCode(0),t+=u),u=l+n)}return Qe(e),t},toWireType:function(e,r){\\\"string\\\"!=typeof r&&se(\\\"Cannot pass non-string to C++ string type \\\"+t);var i=o(r),u=Xe(4+i+n);return x[(u>>>=0)>>>2]=i>>c,a(r,u+4,i+n),null!==e&&e.push(Qe,u),u},argPackAdvance:8,readValueFromPointer:me,Qa:function(e){Qe(e)}})},ha:function(e,n){le(e,{$a:!0,name:n=ne(n),argPackAdvance:0,fromWireType:function(){},toWireType:function(){}})},ca:function(){return!0},o:function(e,n,t){e=ge(e),n=Te(n,\\\"emval::as\\\");var r=[],a=ve(r);return x[t>>2>>>0]=a,n.toWireType(r,e)},h:function(e,n,t,r,a){e=Oe[e],n=ge(n),t=Ee(t);var o=[];return x[r>>2>>>0]=ve(o),e(n,t,o,a)},q:function(e,n,t,r){(e=Oe[e])(n=ge(n),t=Ee(t),null,r)},b:he,F:function(e,n){return(e=ge(e))==ge(n)},u:function(e){return 0===e?ve(Ie()):(e=Ee(e),ve(Ie()[e]))},g:function(e,n){var t=function(e,n){for(var t=Array(e),r=0;r<e;++r)t[r]=Te(x[n+4*r>>2>>>0],\\\"parameter \\\"+r);return t}(e,n),r=t[0];n=r.name+\\\"_$\\\"+t.slice(1).map((function(e){return e.name})).join(\\\"_\\\")+\\\"$\\\";var a=ke[n];if(void 0!==a)return a;a=[\\\"retType\\\"];for(var o=[r],i=\\\"\\\",c=0;c<e-1;++c)i+=(0!==c?\\\", \\\":\\\"\\\")+\\\"arg\\\"+c,a.push(\\\"argType\\\"+c),o.push(t[1+c]);var u=\\\"return function \\\"+oe(\\\"methodCaller_\\\"+n)+\\\"(handle, name, destructors, args) {\\\\n\\\",s=0;for(c=0;c<e-1;++c)u+=\\\"    var arg\\\"+c+\\\" = argType\\\"+c+\\\".readValueFromPointer(args\\\"+(s?\\\"+\\\"+s:\\\"\\\")+\\\");\\\\n\\\",s+=t[c+1].argPackAdvance;for(u+=\\\"    var rv = handle[name](\\\"+i+\\\");\\\\n\\\",c=0;c<e-1;++c)t[c+1].deleteObject&&(u+=\\\"    argType\\\"+c+\\\".deleteObject(arg\\\"+c+\\\");\\\\n\\\");return r.$a||(u+=\\\"    return retType.toWireType(destructors, rv);\\\\n\\\"),a.push(u+\\\"};\\\\n\\\"),e=function(e){var n=Function;if(!(n instanceof Function))throw new TypeError(\\\"new_ called with constructor type \\\"+typeof n+\\\" which is not a function\\\");var t=ie(n.name||\\\"unknownFunctionName\\\",(function(){}));return t.prototype=n.prototype,t=new t,(e=n.apply(t,e))instanceof Object?e:t}(a).apply(null,o),a=function(e){var n=Oe.length;return Oe.push(e),n}(e),ke[n]=a},r:function(e,n){return e=ge(e),n=ge(n),ve(e[n])},c:function(e){4<e&&(de.get(e).Ya+=1)},G:function(e,t,r,a){e=ge(e);var o=Re[t];return o||(o=function(e){for(var t=\\\"\\\",r=0;r<e;++r)t+=(0!==r?\\\", \\\":\\\"\\\")+\\\"arg\\\"+r;var a=\\\"return function emval_allocator_\\\"+e+\\\"(constructor, argTypes, args) {\\\\n  var HEAPU32 = getMemory();\\\\n\\\";for(r=0;r<e;++r)a+=\\\"var argType\\\"+r+\\\" = requireRegisteredType(HEAPU32[((argTypes)>>2)], 'parameter \\\"+r+\\\"');\\\\nvar arg\\\"+r+\\\" = argType\\\"+r+\\\".readValueFromPointer(args);\\\\nargs += argType\\\"+r+\\\"['argPackAdvance'];\\\\nargTypes += 4;\\\\n\\\";return new Function(\\\"requireRegisteredType\\\",\\\"Module\\\",\\\"valueToHandle\\\",\\\"getMemory\\\",a+\\\"var obj = new constructor(\\\"+t+\\\");\\\\nreturn valueToHandle(obj);\\\\n}\\\\n\\\")(Te,n,ve,(()=>x))}(t),Re[t]=o),o(e,r,a)},s:function(){return ve([])},k:function(e){e=ge(e);for(var n=Array(e.length),t=0;t<e.length;t++)n[t]=e[t];return ve(n)},d:function(e){return ve(Ee(e))},j:function(){return ve({})},f:function(e){for(var n=ge(e);n.length;){var t=n.pop();n.pop()(t)}he(e)},i:function(e,n,t){e=ge(e),n=ge(n),t=ge(t),e[n]=t},e:function(e,n){return e=(e=Te(e,\\\"_emval_take_value\\\")).readValueFromPointer(n),ve(e)},S:function(e,n){e=new Date(1e3*(x[e>>>2]+4294967296*C[e+4>>>2])),C[n>>2>>>0]=e.getUTCSeconds(),C[n+4>>2>>>0]=e.getUTCMinutes(),C[n+8>>2>>>0]=e.getUTCHours(),C[n+12>>2>>>0]=e.getUTCDate(),C[n+16>>2>>>0]=e.getUTCMonth(),C[n+20>>2>>>0]=e.getUTCFullYear()-1900,C[n+24>>2>>>0]=e.getUTCDay(),C[n+28>>2>>>0]=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},T:function(e,n){e=new Date(1e3*(x[e>>>2]+4294967296*C[e+4>>>2])),C[n>>2>>>0]=e.getSeconds(),C[n+4>>2>>>0]=e.getMinutes(),C[n+8>>2>>>0]=e.getHours(),C[n+12>>2>>>0]=e.getDate(),C[n+16>>2>>>0]=e.getMonth(),C[n+20>>2>>>0]=e.getFullYear()-1900,C[n+24>>2>>>0]=e.getDay(),C[n+28>>2>>>0]=0|je(e),C[n+36>>2>>>0]=-60*e.getTimezoneOffset();var t=new Date(e.getFullYear(),6,1).getTimezoneOffset(),r=new Date(e.getFullYear(),0,1).getTimezoneOffset();C[n+32>>2>>>0]=0|(t!=r&&e.getTimezoneOffset()==Math.min(r,t))},U:function(e){var n=new Date(C[e+20>>2>>>0]+1900,C[e+16>>2>>>0],C[e+12>>2>>>0],C[e+8>>2>>>0],C[e+4>>2>>>0],C[e>>2>>>0],0),t=C[e+32>>2>>>0],r=n.getTimezoneOffset(),a=new Date(n.getFullYear(),6,1).getTimezoneOffset(),o=new Date(n.getFullYear(),0,1).getTimezoneOffset(),i=Math.min(o,a);return 0>t?C[e+32>>2>>>0]=Number(a!=o&&i==r):0<t!=(i==r)&&(a=Math.max(o,a),n.setTime(n.getTime()+6e4*((0<t?i:a)-r))),C[e+24>>2>>>0]=n.getDay(),C[e+28>>2>>>0]=0|je(n),C[e>>2>>>0]=n.getSeconds(),C[e+4>>2>>>0]=n.getMinutes(),C[e+8>>2>>>0]=n.getHours(),C[e+12>>2>>>0]=n.getDate(),C[e+16>>2>>>0]=n.getMonth(),C[e+20>>2>>>0]=n.getYear(),n.getTime()/1e3|0},Q:function(){return-52},R:function(){},J:function(e,n,t){function r(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\\\"GMT\\\"}var a=(new Date).getFullYear(),o=new Date(a,0,1),i=new Date(a,6,1);a=o.getTimezoneOffset();var c=i.getTimezoneOffset();x[e>>2>>>0]=60*Math.max(a,c),C[n>>2>>>0]=Number(a!=c),e=r(o),n=r(i),e=Be(e),n=Be(n),c<a?(x[t>>2>>>0]=e,x[t+4>>2>>>0]=n):(x[t>>2>>>0]=n,x[t+4>>2>>>0]=e)},t:function(){z(\\\"\\\")},ia:function(){z(\\\"To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html\\\")},B:function(){return Date.now()},K:function(){return 4294901760},n:Me,Z:function(e,n,t){_.copyWithin(e>>>0,n>>>0,n+t>>>0)},I:function(e){var n=_.length;if(4294901760<(e>>>=0))return!1;for(var t=1;4>=t;t*=2){var r=n*(1+.2/t);r=Math.min(r,e+100663296);var a=Math,o=a.min;r=Math.max(e,r),r+=(65536-r%65536)%65536;e:{var i=b.buffer;try{b.grow(o.call(a,4294901760,r)-i.byteLength+65535>>>16),k();var c=1;break e}catch(e){}c=void 0}if(c)return!0}return!1},X:function(e,n){var t=0;return ze().forEach((function(r,a){var o=n+t;for(a=x[e+4*a>>2>>>0]=o,o=0;o<r.length;++o)w[a++>>0>>>0]=r.charCodeAt(o);w[a>>0>>>0]=0,t+=r.length+1})),0},Y:function(e,n){var t=ze();x[e>>2>>>0]=t.length;var r=0;return t.forEach((function(e){r+=e.length+1})),x[n>>2>>>0]=r,0},w:function(){return 52},z:function(){return 52},W:function(){return 70},y:function(e,n,t,r){for(var a=0,o=0;o<t;o++){var i=x[n>>2>>>0],c=x[n+4>>2>>>0];n+=8;for(var u=0;u<c;u++){var s=_[i+u>>>0],l=Fe[e];0===s||10===s?((1===e?m:y)(q(l,0)),l.length=0):l.push(s)}a+=c}return x[r>>2>>>0]=a,0},ea:Ne,m:function(e,n,t,r){return Ne(e,n,t,r)}};!function(){function e(e){if(e=e.exports,n.asm=e,b=n.asm.ja,k(),D.unshift(n.asm.ka),j--,n.monitorRunDependencies&&n.monitorRunDependencies(j),0==j&&(null!==B&&(clearInterval(B),B=null),G)){var t=G;G=null,t()}return e}var t={a:qe};if(j++,n.monitorRunDependencies&&n.monitorRunDependencies(j),n.instantiateWasm)try{return n.instantiateWasm(t,e)}catch(e){y(\\\"Module.instantiateWasm callback failed with error: \\\"+e),a(e)}(function(e,n){var t=W;return v||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||L(t)||t.startsWith(\\\"file://\\\")||p||\\\"function\\\"!=typeof fetch?V(t,e,n):fetch(t,{credentials:\\\"same-origin\\\"}).then((r=>WebAssembly.instantiateStreaming(r,e).then(n,(function(r){return y(\\\"wasm streaming compile failed: \\\"+r),y(\\\"falling back to ArrayBuffer instantiation\\\"),V(t,e,n)}))))})(t,(function(n){e(n.instance)})).catch(a)}(),n._OrtInit=function(){return(n._OrtInit=n.asm.la).apply(null,arguments)},n._OrtGetLastError=function(){return(n._OrtGetLastError=n.asm.ma).apply(null,arguments)},n._OrtCreateSessionOptions=function(){return(n._OrtCreateSessionOptions=n.asm.na).apply(null,arguments)},n._OrtAppendExecutionProvider=function(){return(n._OrtAppendExecutionProvider=n.asm.oa).apply(null,arguments)},n._OrtAddSessionConfigEntry=function(){return(n._OrtAddSessionConfigEntry=n.asm.pa).apply(null,arguments)},n._OrtReleaseSessionOptions=function(){return(n._OrtReleaseSessionOptions=n.asm.qa).apply(null,arguments)},n._OrtCreateSession=function(){return(n._OrtCreateSession=n.asm.ra).apply(null,arguments)},n._OrtReleaseSession=function(){return(n._OrtReleaseSession=n.asm.sa).apply(null,arguments)},n._OrtGetInputOutputCount=function(){return(n._OrtGetInputOutputCount=n.asm.ta).apply(null,arguments)},n._OrtGetInputName=function(){return(n._OrtGetInputName=n.asm.ua).apply(null,arguments)},n._OrtGetOutputName=function(){return(n._OrtGetOutputName=n.asm.va).apply(null,arguments)},n._OrtFree=function(){return(n._OrtFree=n.asm.wa).apply(null,arguments)},n._OrtCreateTensor=function(){return(n._OrtCreateTensor=n.asm.xa).apply(null,arguments)},n._OrtGetTensorData=function(){return(n._OrtGetTensorData=n.asm.ya).apply(null,arguments)},n._OrtReleaseTensor=function(){return(n._OrtReleaseTensor=n.asm.za).apply(null,arguments)},n._OrtCreateRunOptions=function(){return(n._OrtCreateRunOptions=n.asm.Aa).apply(null,arguments)},n._OrtAddRunConfigEntry=function(){return(n._OrtAddRunConfigEntry=n.asm.Ba).apply(null,arguments)},n._OrtReleaseRunOptions=function(){return(n._OrtReleaseRunOptions=n.asm.Ca).apply(null,arguments)},n._OrtRun=function(){return(n._OrtRun=n.asm.Da).apply(null,arguments)},n._OrtEndProfiling=function(){return(n._OrtEndProfiling=n.asm.Ea).apply(null,arguments)};var Je,Xe=n._malloc=function(){return(Xe=n._malloc=n.asm.Fa).apply(null,arguments)},Qe=n._free=function(){return(Qe=n._free=n.asm.Ga).apply(null,arguments)};function Ze(){return(Ze=n.asm.Ha).apply(null,arguments)}function $e(){return($e=n.asm.Ka).apply(null,arguments)}function en(){return(en=n.asm.La).apply(null,arguments)}function nn(){return(nn=n.asm.Ma).apply(null,arguments)}function tn(){function e(){if(!Je&&(Je=!0,n.calledRun=!0,!I)){if(N(D),r(n),n.onRuntimeInitialized&&n.onRuntimeInitialized(),n.postRun)for(\\\"function\\\"==typeof n.postRun&&(n.postRun=[n.postRun]);n.postRun.length;){var e=n.postRun.shift();M.unshift(e)}N(M)}}if(!(0<j)){if(n.preRun)for(\\\"function\\\"==typeof n.preRun&&(n.preRun=[n.preRun]);n.preRun.length;)U();N(R),0<j||(n.setStatus?(n.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){n.setStatus(\\\"\\\")}),1),e()}),1)):e())}}if(n.__embind_initialize_bindings=function(){return(n.__embind_initialize_bindings=n.asm.Ia).apply(null,arguments)},n.stackAlloc=nn,n.stackSave=$e,n.stackRestore=en,n.UTF8ToString=J,n.stringToUTF8=Z,n.lengthBytesUTF8=X,G=function e(){Je||tn(),Je||(G=e)},n.preInit)for(\\\"function\\\"==typeof n.preInit&&(n.preInit=[n.preInit]);0<n.preInit.length;)n.preInit.pop()();return tn(),e.ready});e.exports=r},154:function(e){\\\"use strict\\\";e.exports='\\\"use strict\\\";var e={},a=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node;if(a){var r=require(\\\"worker_threads\\\"),t=r.parentPort;t.on(\\\"message\\\",(e=>onmessage({data:e})));var s=require(\\\"fs\\\");Object.assign(global,{self:global,require:require,Module:e,location:{href:__filename},Worker:r.Worker,importScripts:function(e){(0,eval)(s.readFileSync(e,\\\"utf8\\\")+\\\"//# sourceURL=\\\"+e)},postMessage:function(e){t.postMessage(e)},performance:global.performance||{now:function(){return Date.now()}}})}var o=!1,n=function(){var e=Array.prototype.slice.call(arguments).join(\\\" \\\");a?s.writeSync(2,e+\\\"\\\\\\\\n\\\"):console.error(e)};self.alert=function(){var a=Array.prototype.slice.call(arguments).join(\\\" \\\");postMessage({cmd:\\\"alert\\\",text:a,threadId:e._pthread_self()})},e.instantiateWasm=(a,r)=>{var t=e.wasmModule;return e.wasmModule=null,r(new WebAssembly.Instance(t,a))},self.onunhandledrejection=e=>{throw e.reason??e},self.onmessage=function a(r){try{if(\\\"load\\\"===r.data.cmd){let s=[];self.onmessage=e=>s.push(e),self.startWorker=r=>{e=r,postMessage({cmd:\\\"loaded\\\"});for(let e of s)a(e);self.onmessage=a},e.wasmModule=r.data.wasmModule;for(const a of r.data.handlers)e[a]=function(){postMessage({cmd:\\\"callHandler\\\",handler:a,args:[...arguments]})};if(e.wasmMemory=r.data.wasmMemory,e.buffer=e.wasmMemory.buffer,e.ENVIRONMENT_IS_PTHREAD=!0,\\\"string\\\"==typeof r.data.urlOrBlob)importScripts(r.data.urlOrBlob);else{var t=URL.createObjectURL(r.data.urlOrBlob);importScripts(t),URL.revokeObjectURL(t)}ortWasmThreaded(e)}else if(\\\"run\\\"===r.data.cmd){e.__emscripten_thread_init(r.data.pthread_ptr,0,0,1),e.__emscripten_thread_mailbox_await(r.data.pthread_ptr),e.establishStackSpace(),e.PThread.receiveObjectTransfer(r.data),e.PThread.threadInitTLS(),o||(e.__embind_initialize_bindings(),o=!0);try{e.invokeEntryPoint(r.data.start_routine,r.data.arg)}catch(e){if(\\\"unwind\\\"!=e)throw e}}else\\\"cancel\\\"===r.data.cmd?e._pthread_self()&&e.__emscripten_thread_exit(-1):\\\"setimmediate\\\"===r.data.target||(\\\"checkMailbox\\\"===r.data.cmd?o&&e.checkMailbox():r.data.cmd&&(n(\\\"worker.js received unknown command \\\"+r.data.cmd),n(r.data)))}catch(a){throw e.__emscripten_thread_crashed&&e.__emscripten_thread_crashed(),a}};\\\\n'},384:function(){},993:function(){},908:function(){},953:function(){},925:function(){},449:function(){}},n={};function t(r){var a=n[r];if(void 0!==a)return a.exports;var o=n[r]={exports:{}};return e[r].call(o.exports,o,o.exports,t),o.exports}!function(){\\\"use strict\\\";var e=t(259),n=t(263);self.onmessage=function(t){switch(t.data.type){case\\\"init-wasm\\\":try{(0,n.initializeWebAssembly)(t.data.in).then((function(){return postMessage({type:\\\"init-wasm\\\"})}),(function(e){return postMessage({type:\\\"init-wasm\\\",err:e})}))}catch(e){postMessage({type:\\\"init-wasm\\\",err:e})}break;case\\\"init-ort\\\":try{(0,e.initRuntime)(t.data.in).then((function(){return postMessage({type:\\\"init-ort\\\"})}),(function(e){return postMessage({type:\\\"init-ort\\\",err:e})})),postMessage({type:\\\"init-ort\\\"})}catch(e){postMessage({type:\\\"init-ort\\\",err:e})}break;case\\\"create_allocate\\\":try{var r=t.data.in.model,a=(0,e.createSessionAllocate)(r);postMessage({type:\\\"create_allocate\\\",out:a})}catch(e){postMessage({type:\\\"create_allocate\\\",err:e})}break;case\\\"create_finalize\\\":try{var o=t.data.in,i=(a=o.modeldata,o.options),c=(0,e.createSessionFinalize)(a,i);postMessage({type:\\\"create_finalize\\\",out:c})}catch(e){postMessage({type:\\\"create_finalize\\\",err:e})}break;case\\\"create\\\":try{var u=t.data.in;r=u.model,i=u.options,c=(0,e.createSession)(r,i),postMessage({type:\\\"create\\\",out:c})}catch(e){postMessage({type:\\\"create\\\",err:e})}break;case\\\"release\\\":try{var s=t.data.in;(0,e.releaseSession)(s),postMessage({type:\\\"release\\\"})}catch(e){postMessage({type:\\\"release\\\",err:e})}break;case\\\"run\\\":try{var l=t.data.in,f=l.sessionId,p=l.inputIndices,d=l.inputs,h=l.outputIndices;i=l.options,(0,e.run)(f,p,d,h,i).then((function(n){postMessage({type:\\\"run\\\",out:n},(0,e.extractTransferableBuffers)(n))}),(function(e){postMessage({type:\\\"run\\\",err:e})}))}catch(e){postMessage({type:\\\"run\\\",err:e})}break;case\\\"end-profiling\\\":try{s=t.data.in,(0,e.endProfiling)(s),postMessage({type:\\\"end-profiling\\\"})}catch(e){postMessage({type:\\\"end-profiling\\\",err:e})}}}}()}();\\n\", \"Worker\", undefined, undefined);\n}\n","\"use strict\";\n\n/* eslint-env browser */\n\n/* eslint-disable no-undef, no-use-before-define, new-cap */\nmodule.exports = function (content, workerConstructor, workerOptions, url) {\n  var globalScope = self || window;\n\n  try {\n    try {\n      var blob;\n\n      try {\n        // New API\n        blob = new globalScope.Blob([content]);\n      } catch (e) {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = globalScope.BlobBuilder || globalScope.WebKitBlobBuilder || globalScope.MozBlobBuilder || globalScope.MSBlobBuilder;\n        blob = new BlobBuilder();\n        blob.append(content);\n        blob = blob.getBlob();\n      }\n\n      var URL = globalScope.URL || globalScope.webkitURL;\n      var objectURL = URL.createObjectURL(blob);\n      var worker = new globalScope[workerConstructor](objectURL, workerOptions);\n      URL.revokeObjectURL(objectURL);\n      return worker;\n    } catch (e) {\n      return new globalScope[workerConstructor](\"data:application/javascript,\".concat(encodeURIComponent(content)), workerOptions);\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error(\"Inline worker is not supported\");\n    }\n\n    return new globalScope[workerConstructor](url, workerOptions);\n  }\n};","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.onnx = (function() {\n\n    /**\n     * Namespace onnx.\n     * @exports onnx\n     * @namespace\n     */\n    var onnx = {};\n\n    /**\n     * Version enum.\n     * @name onnx.Version\n     * @enum {number}\n     * @property {number} _START_VERSION=0 _START_VERSION value\n     * @property {number} IR_VERSION_2017_10_10=1 IR_VERSION_2017_10_10 value\n     * @property {number} IR_VERSION_2017_10_30=2 IR_VERSION_2017_10_30 value\n     * @property {number} IR_VERSION_2017_11_3=3 IR_VERSION_2017_11_3 value\n     * @property {number} IR_VERSION_2019_1_22=4 IR_VERSION_2019_1_22 value\n     * @property {number} IR_VERSION_2019_3_18=5 IR_VERSION_2019_3_18 value\n     * @property {number} IR_VERSION_2019_9_19=6 IR_VERSION_2019_9_19 value\n     * @property {number} IR_VERSION_2020_5_8=7 IR_VERSION_2020_5_8 value\n     * @property {number} IR_VERSION_2021_7_30=8 IR_VERSION_2021_7_30 value\n     * @property {number} IR_VERSION=9 IR_VERSION value\n     */\n    onnx.Version = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"_START_VERSION\"] = 0;\n        values[valuesById[1] = \"IR_VERSION_2017_10_10\"] = 1;\n        values[valuesById[2] = \"IR_VERSION_2017_10_30\"] = 2;\n        values[valuesById[3] = \"IR_VERSION_2017_11_3\"] = 3;\n        values[valuesById[4] = \"IR_VERSION_2019_1_22\"] = 4;\n        values[valuesById[5] = \"IR_VERSION_2019_3_18\"] = 5;\n        values[valuesById[6] = \"IR_VERSION_2019_9_19\"] = 6;\n        values[valuesById[7] = \"IR_VERSION_2020_5_8\"] = 7;\n        values[valuesById[8] = \"IR_VERSION_2021_7_30\"] = 8;\n        values[valuesById[9] = \"IR_VERSION\"] = 9;\n        return values;\n    })();\n\n    onnx.AttributeProto = (function() {\n\n        /**\n         * Properties of an AttributeProto.\n         * @memberof onnx\n         * @interface IAttributeProto\n         * @property {string|null} [name] AttributeProto name\n         * @property {string|null} [refAttrName] AttributeProto refAttrName\n         * @property {string|null} [docString] AttributeProto docString\n         * @property {onnx.AttributeProto.AttributeType|null} [type] AttributeProto type\n         * @property {number|null} [f] AttributeProto f\n         * @property {number|Long|null} [i] AttributeProto i\n         * @property {Uint8Array|null} [s] AttributeProto s\n         * @property {onnx.ITensorProto|null} [t] AttributeProto t\n         * @property {onnx.IGraphProto|null} [g] AttributeProto g\n         * @property {onnx.ISparseTensorProto|null} [sparseTensor] AttributeProto sparseTensor\n         * @property {onnx.ITypeProto|null} [tp] AttributeProto tp\n         * @property {Array.<number>|null} [floats] AttributeProto floats\n         * @property {Array.<number|Long>|null} [ints] AttributeProto ints\n         * @property {Array.<Uint8Array>|null} [strings] AttributeProto strings\n         * @property {Array.<onnx.ITensorProto>|null} [tensors] AttributeProto tensors\n         * @property {Array.<onnx.IGraphProto>|null} [graphs] AttributeProto graphs\n         * @property {Array.<onnx.ISparseTensorProto>|null} [sparseTensors] AttributeProto sparseTensors\n         * @property {Array.<onnx.ITypeProto>|null} [typeProtos] AttributeProto typeProtos\n         */\n\n        /**\n         * Constructs a new AttributeProto.\n         * @memberof onnx\n         * @classdesc Represents an AttributeProto.\n         * @implements IAttributeProto\n         * @constructor\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         */\n        function AttributeProto(properties) {\n            this.floats = [];\n            this.ints = [];\n            this.strings = [];\n            this.tensors = [];\n            this.graphs = [];\n            this.sparseTensors = [];\n            this.typeProtos = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * AttributeProto name.\n         * @member {string} name\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.name = \"\";\n\n        /**\n         * AttributeProto refAttrName.\n         * @member {string} refAttrName\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.refAttrName = \"\";\n\n        /**\n         * AttributeProto docString.\n         * @member {string} docString\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.docString = \"\";\n\n        /**\n         * AttributeProto type.\n         * @member {onnx.AttributeProto.AttributeType} type\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.type = 0;\n\n        /**\n         * AttributeProto f.\n         * @member {number} f\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.f = 0;\n\n        /**\n         * AttributeProto i.\n         * @member {number|Long} i\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.i = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * AttributeProto s.\n         * @member {Uint8Array} s\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.s = $util.newBuffer([]);\n\n        /**\n         * AttributeProto t.\n         * @member {onnx.ITensorProto|null|undefined} t\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.t = null;\n\n        /**\n         * AttributeProto g.\n         * @member {onnx.IGraphProto|null|undefined} g\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.g = null;\n\n        /**\n         * AttributeProto sparseTensor.\n         * @member {onnx.ISparseTensorProto|null|undefined} sparseTensor\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.sparseTensor = null;\n\n        /**\n         * AttributeProto tp.\n         * @member {onnx.ITypeProto|null|undefined} tp\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.tp = null;\n\n        /**\n         * AttributeProto floats.\n         * @member {Array.<number>} floats\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.floats = $util.emptyArray;\n\n        /**\n         * AttributeProto ints.\n         * @member {Array.<number|Long>} ints\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.ints = $util.emptyArray;\n\n        /**\n         * AttributeProto strings.\n         * @member {Array.<Uint8Array>} strings\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.strings = $util.emptyArray;\n\n        /**\n         * AttributeProto tensors.\n         * @member {Array.<onnx.ITensorProto>} tensors\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.tensors = $util.emptyArray;\n\n        /**\n         * AttributeProto graphs.\n         * @member {Array.<onnx.IGraphProto>} graphs\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.graphs = $util.emptyArray;\n\n        /**\n         * AttributeProto sparseTensors.\n         * @member {Array.<onnx.ISparseTensorProto>} sparseTensors\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.sparseTensors = $util.emptyArray;\n\n        /**\n         * AttributeProto typeProtos.\n         * @member {Array.<onnx.ITypeProto>} typeProtos\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.typeProtos = $util.emptyArray;\n\n        /**\n         * Creates a new AttributeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         * @returns {onnx.AttributeProto} AttributeProto instance\n         */\n        AttributeProto.create = function create(properties) {\n            return new AttributeProto(properties);\n        };\n\n        /**\n         * Encodes the specified AttributeProto message. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.f != null && Object.hasOwnProperty.call(message, \"f\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.f);\n            if (message.i != null && Object.hasOwnProperty.call(message, \"i\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.i);\n            if (message.s != null && Object.hasOwnProperty.call(message, \"s\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.s);\n            if (message.t != null && Object.hasOwnProperty.call(message, \"t\"))\n                $root.onnx.TensorProto.encode(message.t, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.g != null && Object.hasOwnProperty.call(message, \"g\"))\n                $root.onnx.GraphProto.encode(message.g, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.floats != null && message.floats.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.floats.length; ++i)\n                    writer.float(message.floats[i]);\n                writer.ldelim();\n            }\n            if (message.ints != null && message.ints.length) {\n                writer.uint32(/* id 8, wireType 2 =*/66).fork();\n                for (var i = 0; i < message.ints.length; ++i)\n                    writer.int64(message.ints[i]);\n                writer.ldelim();\n            }\n            if (message.strings != null && message.strings.length)\n                for (var i = 0; i < message.strings.length; ++i)\n                    writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.strings[i]);\n            if (message.tensors != null && message.tensors.length)\n                for (var i = 0; i < message.tensors.length; ++i)\n                    $root.onnx.TensorProto.encode(message.tensors[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.graphs != null && message.graphs.length)\n                for (var i = 0; i < message.graphs.length; ++i)\n                    $root.onnx.GraphProto.encode(message.graphs[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 13, wireType 2 =*/106).string(message.docString);\n            if (message.tp != null && Object.hasOwnProperty.call(message, \"tp\"))\n                $root.onnx.TypeProto.encode(message.tp, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            if (message.typeProtos != null && message.typeProtos.length)\n                for (var i = 0; i < message.typeProtos.length; ++i)\n                    $root.onnx.TypeProto.encode(message.typeProtos[i], writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();\n            if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\n                writer.uint32(/* id 20, wireType 0 =*/160).int32(message.type);\n            if (message.refAttrName != null && Object.hasOwnProperty.call(message, \"refAttrName\"))\n                writer.uint32(/* id 21, wireType 2 =*/170).string(message.refAttrName);\n            if (message.sparseTensor != null && Object.hasOwnProperty.call(message, \"sparseTensor\"))\n                $root.onnx.SparseTensorProto.encode(message.sparseTensor, writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();\n            if (message.sparseTensors != null && message.sparseTensors.length)\n                for (var i = 0; i < message.sparseTensors.length; ++i)\n                    $root.onnx.SparseTensorProto.encode(message.sparseTensors[i], writer.uint32(/* id 23, wireType 2 =*/186).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified AttributeProto message, length delimited. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.AttributeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 21: {\n                        message.refAttrName = reader.string();\n                        break;\n                    }\n                case 13: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                case 20: {\n                        message.type = reader.int32();\n                        break;\n                    }\n                case 2: {\n                        message.f = reader.float();\n                        break;\n                    }\n                case 3: {\n                        message.i = reader.int64();\n                        break;\n                    }\n                case 4: {\n                        message.s = reader.bytes();\n                        break;\n                    }\n                case 5: {\n                        message.t = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 6: {\n                        message.g = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 22: {\n                        message.sparseTensor = $root.onnx.SparseTensorProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 14: {\n                        message.tp = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 7: {\n                        if (!(message.floats && message.floats.length))\n                            message.floats = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.floats.push(reader.float());\n                        } else\n                            message.floats.push(reader.float());\n                        break;\n                    }\n                case 8: {\n                        if (!(message.ints && message.ints.length))\n                            message.ints = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.ints.push(reader.int64());\n                        } else\n                            message.ints.push(reader.int64());\n                        break;\n                    }\n                case 9: {\n                        if (!(message.strings && message.strings.length))\n                            message.strings = [];\n                        message.strings.push(reader.bytes());\n                        break;\n                    }\n                case 10: {\n                        if (!(message.tensors && message.tensors.length))\n                            message.tensors = [];\n                        message.tensors.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 11: {\n                        if (!(message.graphs && message.graphs.length))\n                            message.graphs = [];\n                        message.graphs.push($root.onnx.GraphProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 23: {\n                        if (!(message.sparseTensors && message.sparseTensors.length))\n                            message.sparseTensors = [];\n                        message.sparseTensors.push($root.onnx.SparseTensorProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 15: {\n                        if (!(message.typeProtos && message.typeProtos.length))\n                            message.typeProtos = [];\n                        message.typeProtos.push($root.onnx.TypeProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an AttributeProto message.\n         * @function verify\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        AttributeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                if (!$util.isString(message.refAttrName))\n                    return \"refAttrName: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                switch (message.type) {\n                default:\n                    return \"type: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 11:\n                case 13:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                case 12:\n                case 14:\n                    break;\n                }\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                if (typeof message.f !== \"number\")\n                    return \"f: number expected\";\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (!$util.isInteger(message.i) && !(message.i && $util.isInteger(message.i.low) && $util.isInteger(message.i.high)))\n                    return \"i: integer|Long expected\";\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                if (!(message.s && typeof message.s.length === \"number\" || $util.isString(message.s)))\n                    return \"s: buffer expected\";\n            if (message.t != null && message.hasOwnProperty(\"t\")) {\n                var error = $root.onnx.TensorProto.verify(message.t);\n                if (error)\n                    return \"t.\" + error;\n            }\n            if (message.g != null && message.hasOwnProperty(\"g\")) {\n                var error = $root.onnx.GraphProto.verify(message.g);\n                if (error)\n                    return \"g.\" + error;\n            }\n            if (message.sparseTensor != null && message.hasOwnProperty(\"sparseTensor\")) {\n                var error = $root.onnx.SparseTensorProto.verify(message.sparseTensor);\n                if (error)\n                    return \"sparseTensor.\" + error;\n            }\n            if (message.tp != null && message.hasOwnProperty(\"tp\")) {\n                var error = $root.onnx.TypeProto.verify(message.tp);\n                if (error)\n                    return \"tp.\" + error;\n            }\n            if (message.floats != null && message.hasOwnProperty(\"floats\")) {\n                if (!Array.isArray(message.floats))\n                    return \"floats: array expected\";\n                for (var i = 0; i < message.floats.length; ++i)\n                    if (typeof message.floats[i] !== \"number\")\n                        return \"floats: number[] expected\";\n            }\n            if (message.ints != null && message.hasOwnProperty(\"ints\")) {\n                if (!Array.isArray(message.ints))\n                    return \"ints: array expected\";\n                for (var i = 0; i < message.ints.length; ++i)\n                    if (!$util.isInteger(message.ints[i]) && !(message.ints[i] && $util.isInteger(message.ints[i].low) && $util.isInteger(message.ints[i].high)))\n                        return \"ints: integer|Long[] expected\";\n            }\n            if (message.strings != null && message.hasOwnProperty(\"strings\")) {\n                if (!Array.isArray(message.strings))\n                    return \"strings: array expected\";\n                for (var i = 0; i < message.strings.length; ++i)\n                    if (!(message.strings[i] && typeof message.strings[i].length === \"number\" || $util.isString(message.strings[i])))\n                        return \"strings: buffer[] expected\";\n            }\n            if (message.tensors != null && message.hasOwnProperty(\"tensors\")) {\n                if (!Array.isArray(message.tensors))\n                    return \"tensors: array expected\";\n                for (var i = 0; i < message.tensors.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.tensors[i]);\n                    if (error)\n                        return \"tensors.\" + error;\n                }\n            }\n            if (message.graphs != null && message.hasOwnProperty(\"graphs\")) {\n                if (!Array.isArray(message.graphs))\n                    return \"graphs: array expected\";\n                for (var i = 0; i < message.graphs.length; ++i) {\n                    var error = $root.onnx.GraphProto.verify(message.graphs[i]);\n                    if (error)\n                        return \"graphs.\" + error;\n                }\n            }\n            if (message.sparseTensors != null && message.hasOwnProperty(\"sparseTensors\")) {\n                if (!Array.isArray(message.sparseTensors))\n                    return \"sparseTensors: array expected\";\n                for (var i = 0; i < message.sparseTensors.length; ++i) {\n                    var error = $root.onnx.SparseTensorProto.verify(message.sparseTensors[i]);\n                    if (error)\n                        return \"sparseTensors.\" + error;\n                }\n            }\n            if (message.typeProtos != null && message.hasOwnProperty(\"typeProtos\")) {\n                if (!Array.isArray(message.typeProtos))\n                    return \"typeProtos: array expected\";\n                for (var i = 0; i < message.typeProtos.length; ++i) {\n                    var error = $root.onnx.TypeProto.verify(message.typeProtos[i]);\n                    if (error)\n                        return \"typeProtos.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an AttributeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.AttributeProto} AttributeProto\n         */\n        AttributeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.AttributeProto)\n                return object;\n            var message = new $root.onnx.AttributeProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.refAttrName != null)\n                message.refAttrName = String(object.refAttrName);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            switch (object.type) {\n            default:\n                if (typeof object.type === \"number\") {\n                    message.type = object.type;\n                    break;\n                }\n                break;\n            case \"UNDEFINED\":\n            case 0:\n                message.type = 0;\n                break;\n            case \"FLOAT\":\n            case 1:\n                message.type = 1;\n                break;\n            case \"INT\":\n            case 2:\n                message.type = 2;\n                break;\n            case \"STRING\":\n            case 3:\n                message.type = 3;\n                break;\n            case \"TENSOR\":\n            case 4:\n                message.type = 4;\n                break;\n            case \"GRAPH\":\n            case 5:\n                message.type = 5;\n                break;\n            case \"SPARSE_TENSOR\":\n            case 11:\n                message.type = 11;\n                break;\n            case \"TYPE_PROTO\":\n            case 13:\n                message.type = 13;\n                break;\n            case \"FLOATS\":\n            case 6:\n                message.type = 6;\n                break;\n            case \"INTS\":\n            case 7:\n                message.type = 7;\n                break;\n            case \"STRINGS\":\n            case 8:\n                message.type = 8;\n                break;\n            case \"TENSORS\":\n            case 9:\n                message.type = 9;\n                break;\n            case \"GRAPHS\":\n            case 10:\n                message.type = 10;\n                break;\n            case \"SPARSE_TENSORS\":\n            case 12:\n                message.type = 12;\n                break;\n            case \"TYPE_PROTOS\":\n            case 14:\n                message.type = 14;\n                break;\n            }\n            if (object.f != null)\n                message.f = Number(object.f);\n            if (object.i != null)\n                if ($util.Long)\n                    (message.i = $util.Long.fromValue(object.i)).unsigned = false;\n                else if (typeof object.i === \"string\")\n                    message.i = parseInt(object.i, 10);\n                else if (typeof object.i === \"number\")\n                    message.i = object.i;\n                else if (typeof object.i === \"object\")\n                    message.i = new $util.LongBits(object.i.low >>> 0, object.i.high >>> 0).toNumber();\n            if (object.s != null)\n                if (typeof object.s === \"string\")\n                    $util.base64.decode(object.s, message.s = $util.newBuffer($util.base64.length(object.s)), 0);\n                else if (object.s.length >= 0)\n                    message.s = object.s;\n            if (object.t != null) {\n                if (typeof object.t !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.t: object expected\");\n                message.t = $root.onnx.TensorProto.fromObject(object.t);\n            }\n            if (object.g != null) {\n                if (typeof object.g !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.g: object expected\");\n                message.g = $root.onnx.GraphProto.fromObject(object.g);\n            }\n            if (object.sparseTensor != null) {\n                if (typeof object.sparseTensor !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.sparseTensor: object expected\");\n                message.sparseTensor = $root.onnx.SparseTensorProto.fromObject(object.sparseTensor);\n            }\n            if (object.tp != null) {\n                if (typeof object.tp !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.tp: object expected\");\n                message.tp = $root.onnx.TypeProto.fromObject(object.tp);\n            }\n            if (object.floats) {\n                if (!Array.isArray(object.floats))\n                    throw TypeError(\".onnx.AttributeProto.floats: array expected\");\n                message.floats = [];\n                for (var i = 0; i < object.floats.length; ++i)\n                    message.floats[i] = Number(object.floats[i]);\n            }\n            if (object.ints) {\n                if (!Array.isArray(object.ints))\n                    throw TypeError(\".onnx.AttributeProto.ints: array expected\");\n                message.ints = [];\n                for (var i = 0; i < object.ints.length; ++i)\n                    if ($util.Long)\n                        (message.ints[i] = $util.Long.fromValue(object.ints[i])).unsigned = false;\n                    else if (typeof object.ints[i] === \"string\")\n                        message.ints[i] = parseInt(object.ints[i], 10);\n                    else if (typeof object.ints[i] === \"number\")\n                        message.ints[i] = object.ints[i];\n                    else if (typeof object.ints[i] === \"object\")\n                        message.ints[i] = new $util.LongBits(object.ints[i].low >>> 0, object.ints[i].high >>> 0).toNumber();\n            }\n            if (object.strings) {\n                if (!Array.isArray(object.strings))\n                    throw TypeError(\".onnx.AttributeProto.strings: array expected\");\n                message.strings = [];\n                for (var i = 0; i < object.strings.length; ++i)\n                    if (typeof object.strings[i] === \"string\")\n                        $util.base64.decode(object.strings[i], message.strings[i] = $util.newBuffer($util.base64.length(object.strings[i])), 0);\n                    else if (object.strings[i].length >= 0)\n                        message.strings[i] = object.strings[i];\n            }\n            if (object.tensors) {\n                if (!Array.isArray(object.tensors))\n                    throw TypeError(\".onnx.AttributeProto.tensors: array expected\");\n                message.tensors = [];\n                for (var i = 0; i < object.tensors.length; ++i) {\n                    if (typeof object.tensors[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.tensors: object expected\");\n                    message.tensors[i] = $root.onnx.TensorProto.fromObject(object.tensors[i]);\n                }\n            }\n            if (object.graphs) {\n                if (!Array.isArray(object.graphs))\n                    throw TypeError(\".onnx.AttributeProto.graphs: array expected\");\n                message.graphs = [];\n                for (var i = 0; i < object.graphs.length; ++i) {\n                    if (typeof object.graphs[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.graphs: object expected\");\n                    message.graphs[i] = $root.onnx.GraphProto.fromObject(object.graphs[i]);\n                }\n            }\n            if (object.sparseTensors) {\n                if (!Array.isArray(object.sparseTensors))\n                    throw TypeError(\".onnx.AttributeProto.sparseTensors: array expected\");\n                message.sparseTensors = [];\n                for (var i = 0; i < object.sparseTensors.length; ++i) {\n                    if (typeof object.sparseTensors[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.sparseTensors: object expected\");\n                    message.sparseTensors[i] = $root.onnx.SparseTensorProto.fromObject(object.sparseTensors[i]);\n                }\n            }\n            if (object.typeProtos) {\n                if (!Array.isArray(object.typeProtos))\n                    throw TypeError(\".onnx.AttributeProto.typeProtos: array expected\");\n                message.typeProtos = [];\n                for (var i = 0; i < object.typeProtos.length; ++i) {\n                    if (typeof object.typeProtos[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.typeProtos: object expected\");\n                    message.typeProtos[i] = $root.onnx.TypeProto.fromObject(object.typeProtos[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an AttributeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.AttributeProto} message AttributeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AttributeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.floats = [];\n                object.ints = [];\n                object.strings = [];\n                object.tensors = [];\n                object.graphs = [];\n                object.typeProtos = [];\n                object.sparseTensors = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.f = 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.i = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.i = options.longs === String ? \"0\" : 0;\n                if (options.bytes === String)\n                    object.s = \"\";\n                else {\n                    object.s = [];\n                    if (options.bytes !== Array)\n                        object.s = $util.newBuffer(object.s);\n                }\n                object.t = null;\n                object.g = null;\n                object.docString = \"\";\n                object.tp = null;\n                object.type = options.enums === String ? \"UNDEFINED\" : 0;\n                object.refAttrName = \"\";\n                object.sparseTensor = null;\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                object.f = options.json && !isFinite(message.f) ? String(message.f) : message.f;\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (typeof message.i === \"number\")\n                    object.i = options.longs === String ? String(message.i) : message.i;\n                else\n                    object.i = options.longs === String ? $util.Long.prototype.toString.call(message.i) : options.longs === Number ? new $util.LongBits(message.i.low >>> 0, message.i.high >>> 0).toNumber() : message.i;\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                object.s = options.bytes === String ? $util.base64.encode(message.s, 0, message.s.length) : options.bytes === Array ? Array.prototype.slice.call(message.s) : message.s;\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                object.t = $root.onnx.TensorProto.toObject(message.t, options);\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                object.g = $root.onnx.GraphProto.toObject(message.g, options);\n            if (message.floats && message.floats.length) {\n                object.floats = [];\n                for (var j = 0; j < message.floats.length; ++j)\n                    object.floats[j] = options.json && !isFinite(message.floats[j]) ? String(message.floats[j]) : message.floats[j];\n            }\n            if (message.ints && message.ints.length) {\n                object.ints = [];\n                for (var j = 0; j < message.ints.length; ++j)\n                    if (typeof message.ints[j] === \"number\")\n                        object.ints[j] = options.longs === String ? String(message.ints[j]) : message.ints[j];\n                    else\n                        object.ints[j] = options.longs === String ? $util.Long.prototype.toString.call(message.ints[j]) : options.longs === Number ? new $util.LongBits(message.ints[j].low >>> 0, message.ints[j].high >>> 0).toNumber() : message.ints[j];\n            }\n            if (message.strings && message.strings.length) {\n                object.strings = [];\n                for (var j = 0; j < message.strings.length; ++j)\n                    object.strings[j] = options.bytes === String ? $util.base64.encode(message.strings[j], 0, message.strings[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.strings[j]) : message.strings[j];\n            }\n            if (message.tensors && message.tensors.length) {\n                object.tensors = [];\n                for (var j = 0; j < message.tensors.length; ++j)\n                    object.tensors[j] = $root.onnx.TensorProto.toObject(message.tensors[j], options);\n            }\n            if (message.graphs && message.graphs.length) {\n                object.graphs = [];\n                for (var j = 0; j < message.graphs.length; ++j)\n                    object.graphs[j] = $root.onnx.GraphProto.toObject(message.graphs[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.tp != null && message.hasOwnProperty(\"tp\"))\n                object.tp = $root.onnx.TypeProto.toObject(message.tp, options);\n            if (message.typeProtos && message.typeProtos.length) {\n                object.typeProtos = [];\n                for (var j = 0; j < message.typeProtos.length; ++j)\n                    object.typeProtos[j] = $root.onnx.TypeProto.toObject(message.typeProtos[j], options);\n            }\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = options.enums === String ? $root.onnx.AttributeProto.AttributeType[message.type] === undefined ? message.type : $root.onnx.AttributeProto.AttributeType[message.type] : message.type;\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                object.refAttrName = message.refAttrName;\n            if (message.sparseTensor != null && message.hasOwnProperty(\"sparseTensor\"))\n                object.sparseTensor = $root.onnx.SparseTensorProto.toObject(message.sparseTensor, options);\n            if (message.sparseTensors && message.sparseTensors.length) {\n                object.sparseTensors = [];\n                for (var j = 0; j < message.sparseTensors.length; ++j)\n                    object.sparseTensors[j] = $root.onnx.SparseTensorProto.toObject(message.sparseTensors[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this AttributeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.AttributeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AttributeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for AttributeProto\n         * @function getTypeUrl\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        AttributeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.AttributeProto\";\n        };\n\n        /**\n         * AttributeType enum.\n         * @name onnx.AttributeProto.AttributeType\n         * @enum {number}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} INT=2 INT value\n         * @property {number} STRING=3 STRING value\n         * @property {number} TENSOR=4 TENSOR value\n         * @property {number} GRAPH=5 GRAPH value\n         * @property {number} SPARSE_TENSOR=11 SPARSE_TENSOR value\n         * @property {number} TYPE_PROTO=13 TYPE_PROTO value\n         * @property {number} FLOATS=6 FLOATS value\n         * @property {number} INTS=7 INTS value\n         * @property {number} STRINGS=8 STRINGS value\n         * @property {number} TENSORS=9 TENSORS value\n         * @property {number} GRAPHS=10 GRAPHS value\n         * @property {number} SPARSE_TENSORS=12 SPARSE_TENSORS value\n         * @property {number} TYPE_PROTOS=14 TYPE_PROTOS value\n         */\n        AttributeProto.AttributeType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"INT\"] = 2;\n            values[valuesById[3] = \"STRING\"] = 3;\n            values[valuesById[4] = \"TENSOR\"] = 4;\n            values[valuesById[5] = \"GRAPH\"] = 5;\n            values[valuesById[11] = \"SPARSE_TENSOR\"] = 11;\n            values[valuesById[13] = \"TYPE_PROTO\"] = 13;\n            values[valuesById[6] = \"FLOATS\"] = 6;\n            values[valuesById[7] = \"INTS\"] = 7;\n            values[valuesById[8] = \"STRINGS\"] = 8;\n            values[valuesById[9] = \"TENSORS\"] = 9;\n            values[valuesById[10] = \"GRAPHS\"] = 10;\n            values[valuesById[12] = \"SPARSE_TENSORS\"] = 12;\n            values[valuesById[14] = \"TYPE_PROTOS\"] = 14;\n            return values;\n        })();\n\n        return AttributeProto;\n    })();\n\n    onnx.ValueInfoProto = (function() {\n\n        /**\n         * Properties of a ValueInfoProto.\n         * @memberof onnx\n         * @interface IValueInfoProto\n         * @property {string|null} [name] ValueInfoProto name\n         * @property {onnx.ITypeProto|null} [type] ValueInfoProto type\n         * @property {string|null} [docString] ValueInfoProto docString\n         */\n\n        /**\n         * Constructs a new ValueInfoProto.\n         * @memberof onnx\n         * @classdesc Represents a ValueInfoProto.\n         * @implements IValueInfoProto\n         * @constructor\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         */\n        function ValueInfoProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ValueInfoProto name.\n         * @member {string} name\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.name = \"\";\n\n        /**\n         * ValueInfoProto type.\n         * @member {onnx.ITypeProto|null|undefined} type\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.type = null;\n\n        /**\n         * ValueInfoProto docString.\n         * @member {string} docString\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new ValueInfoProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         * @returns {onnx.ValueInfoProto} ValueInfoProto instance\n         */\n        ValueInfoProto.create = function create(properties) {\n            return new ValueInfoProto(properties);\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\n                $root.onnx.TypeProto.encode(message.type, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.docString);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message, length delimited. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ValueInfoProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.type = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 3: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ValueInfoProto message.\n         * @function verify\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ValueInfoProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\")) {\n                var error = $root.onnx.TypeProto.verify(message.type);\n                if (error)\n                    return \"type.\" + error;\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ValueInfoProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         */\n        ValueInfoProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ValueInfoProto)\n                return object;\n            var message = new $root.onnx.ValueInfoProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.type != null) {\n                if (typeof object.type !== \"object\")\n                    throw TypeError(\".onnx.ValueInfoProto.type: object expected\");\n                message.type = $root.onnx.TypeProto.fromObject(object.type);\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ValueInfoProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.ValueInfoProto} message ValueInfoProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ValueInfoProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.name = \"\";\n                object.type = null;\n                object.docString = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = $root.onnx.TypeProto.toObject(message.type, options);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            return object;\n        };\n\n        /**\n         * Converts this ValueInfoProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ValueInfoProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ValueInfoProto\n         * @function getTypeUrl\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ValueInfoProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.ValueInfoProto\";\n        };\n\n        return ValueInfoProto;\n    })();\n\n    onnx.NodeProto = (function() {\n\n        /**\n         * Properties of a NodeProto.\n         * @memberof onnx\n         * @interface INodeProto\n         * @property {Array.<string>|null} [input] NodeProto input\n         * @property {Array.<string>|null} [output] NodeProto output\n         * @property {string|null} [name] NodeProto name\n         * @property {string|null} [opType] NodeProto opType\n         * @property {string|null} [domain] NodeProto domain\n         * @property {Array.<onnx.IAttributeProto>|null} [attribute] NodeProto attribute\n         * @property {string|null} [docString] NodeProto docString\n         */\n\n        /**\n         * Constructs a new NodeProto.\n         * @memberof onnx\n         * @classdesc Represents a NodeProto.\n         * @implements INodeProto\n         * @constructor\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         */\n        function NodeProto(properties) {\n            this.input = [];\n            this.output = [];\n            this.attribute = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * NodeProto input.\n         * @member {Array.<string>} input\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.input = $util.emptyArray;\n\n        /**\n         * NodeProto output.\n         * @member {Array.<string>} output\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.output = $util.emptyArray;\n\n        /**\n         * NodeProto name.\n         * @member {string} name\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.name = \"\";\n\n        /**\n         * NodeProto opType.\n         * @member {string} opType\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.opType = \"\";\n\n        /**\n         * NodeProto domain.\n         * @member {string} domain\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.domain = \"\";\n\n        /**\n         * NodeProto attribute.\n         * @member {Array.<onnx.IAttributeProto>} attribute\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.attribute = $util.emptyArray;\n\n        /**\n         * NodeProto docString.\n         * @member {string} docString\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new NodeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         * @returns {onnx.NodeProto} NodeProto instance\n         */\n        NodeProto.create = function create(properties) {\n            return new NodeProto(properties);\n        };\n\n        /**\n         * Encodes the specified NodeProto message. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.input[i]);\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.output[i]);\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);\n            if (message.opType != null && Object.hasOwnProperty.call(message, \"opType\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.opType);\n            if (message.attribute != null && message.attribute.length)\n                for (var i = 0; i < message.attribute.length; ++i)\n                    $root.onnx.AttributeProto.encode(message.attribute[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.domain);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified NodeProto message, length delimited. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.NodeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        if (!(message.input && message.input.length))\n                            message.input = [];\n                        message.input.push(reader.string());\n                        break;\n                    }\n                case 2: {\n                        if (!(message.output && message.output.length))\n                            message.output = [];\n                        message.output.push(reader.string());\n                        break;\n                    }\n                case 3: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 4: {\n                        message.opType = reader.string();\n                        break;\n                    }\n                case 7: {\n                        message.domain = reader.string();\n                        break;\n                    }\n                case 5: {\n                        if (!(message.attribute && message.attribute.length))\n                            message.attribute = [];\n                        message.attribute.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 6: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a NodeProto message.\n         * @function verify\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        NodeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i)\n                    if (!$util.isString(message.input[i]))\n                        return \"input: string[] expected\";\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i)\n                    if (!$util.isString(message.output[i]))\n                        return \"output: string[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                if (!$util.isString(message.opType))\n                    return \"opType: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\n                if (!Array.isArray(message.attribute))\n                    return \"attribute: array expected\";\n                for (var i = 0; i < message.attribute.length; ++i) {\n                    var error = $root.onnx.AttributeProto.verify(message.attribute[i]);\n                    if (error)\n                        return \"attribute.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a NodeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.NodeProto} NodeProto\n         */\n        NodeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.NodeProto)\n                return object;\n            var message = new $root.onnx.NodeProto();\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.NodeProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i)\n                    message.input[i] = String(object.input[i]);\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.NodeProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i)\n                    message.output[i] = String(object.output[i]);\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.opType != null)\n                message.opType = String(object.opType);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.attribute) {\n                if (!Array.isArray(object.attribute))\n                    throw TypeError(\".onnx.NodeProto.attribute: array expected\");\n                message.attribute = [];\n                for (var i = 0; i < object.attribute.length; ++i) {\n                    if (typeof object.attribute[i] !== \"object\")\n                        throw TypeError(\".onnx.NodeProto.attribute: object expected\");\n                    message.attribute[i] = $root.onnx.AttributeProto.fromObject(object.attribute[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a NodeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.NodeProto} message NodeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        NodeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.input = [];\n                object.output = [];\n                object.attribute = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.opType = \"\";\n                object.docString = \"\";\n                object.domain = \"\";\n            }\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = message.input[j];\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = message.output[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                object.opType = message.opType;\n            if (message.attribute && message.attribute.length) {\n                object.attribute = [];\n                for (var j = 0; j < message.attribute.length; ++j)\n                    object.attribute[j] = $root.onnx.AttributeProto.toObject(message.attribute[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            return object;\n        };\n\n        /**\n         * Converts this NodeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.NodeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        NodeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for NodeProto\n         * @function getTypeUrl\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        NodeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.NodeProto\";\n        };\n\n        return NodeProto;\n    })();\n\n    onnx.TrainingInfoProto = (function() {\n\n        /**\n         * Properties of a TrainingInfoProto.\n         * @memberof onnx\n         * @interface ITrainingInfoProto\n         * @property {onnx.IGraphProto|null} [initialization] TrainingInfoProto initialization\n         * @property {onnx.IGraphProto|null} [algorithm] TrainingInfoProto algorithm\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [initializationBinding] TrainingInfoProto initializationBinding\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [updateBinding] TrainingInfoProto updateBinding\n         */\n\n        /**\n         * Constructs a new TrainingInfoProto.\n         * @memberof onnx\n         * @classdesc Represents a TrainingInfoProto.\n         * @implements ITrainingInfoProto\n         * @constructor\n         * @param {onnx.ITrainingInfoProto=} [properties] Properties to set\n         */\n        function TrainingInfoProto(properties) {\n            this.initializationBinding = [];\n            this.updateBinding = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TrainingInfoProto initialization.\n         * @member {onnx.IGraphProto|null|undefined} initialization\n         * @memberof onnx.TrainingInfoProto\n         * @instance\n         */\n        TrainingInfoProto.prototype.initialization = null;\n\n        /**\n         * TrainingInfoProto algorithm.\n         * @member {onnx.IGraphProto|null|undefined} algorithm\n         * @memberof onnx.TrainingInfoProto\n         * @instance\n         */\n        TrainingInfoProto.prototype.algorithm = null;\n\n        /**\n         * TrainingInfoProto initializationBinding.\n         * @member {Array.<onnx.IStringStringEntryProto>} initializationBinding\n         * @memberof onnx.TrainingInfoProto\n         * @instance\n         */\n        TrainingInfoProto.prototype.initializationBinding = $util.emptyArray;\n\n        /**\n         * TrainingInfoProto updateBinding.\n         * @member {Array.<onnx.IStringStringEntryProto>} updateBinding\n         * @memberof onnx.TrainingInfoProto\n         * @instance\n         */\n        TrainingInfoProto.prototype.updateBinding = $util.emptyArray;\n\n        /**\n         * Creates a new TrainingInfoProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {onnx.ITrainingInfoProto=} [properties] Properties to set\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto instance\n         */\n        TrainingInfoProto.create = function create(properties) {\n            return new TrainingInfoProto(properties);\n        };\n\n        /**\n         * Encodes the specified TrainingInfoProto message. Does not implicitly {@link onnx.TrainingInfoProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {onnx.ITrainingInfoProto} message TrainingInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TrainingInfoProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.initialization != null && Object.hasOwnProperty.call(message, \"initialization\"))\n                $root.onnx.GraphProto.encode(message.initialization, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.algorithm != null && Object.hasOwnProperty.call(message, \"algorithm\"))\n                $root.onnx.GraphProto.encode(message.algorithm, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.initializationBinding != null && message.initializationBinding.length)\n                for (var i = 0; i < message.initializationBinding.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.initializationBinding[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.updateBinding != null && message.updateBinding.length)\n                for (var i = 0; i < message.updateBinding.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.updateBinding[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TrainingInfoProto message, length delimited. Does not implicitly {@link onnx.TrainingInfoProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {onnx.ITrainingInfoProto} message TrainingInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TrainingInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TrainingInfoProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TrainingInfoProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TrainingInfoProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.initialization = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 2: {\n                        message.algorithm = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 3: {\n                        if (!(message.initializationBinding && message.initializationBinding.length))\n                            message.initializationBinding = [];\n                        message.initializationBinding.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 4: {\n                        if (!(message.updateBinding && message.updateBinding.length))\n                            message.updateBinding = [];\n                        message.updateBinding.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TrainingInfoProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TrainingInfoProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TrainingInfoProto message.\n         * @function verify\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TrainingInfoProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.initialization != null && message.hasOwnProperty(\"initialization\")) {\n                var error = $root.onnx.GraphProto.verify(message.initialization);\n                if (error)\n                    return \"initialization.\" + error;\n            }\n            if (message.algorithm != null && message.hasOwnProperty(\"algorithm\")) {\n                var error = $root.onnx.GraphProto.verify(message.algorithm);\n                if (error)\n                    return \"algorithm.\" + error;\n            }\n            if (message.initializationBinding != null && message.hasOwnProperty(\"initializationBinding\")) {\n                if (!Array.isArray(message.initializationBinding))\n                    return \"initializationBinding: array expected\";\n                for (var i = 0; i < message.initializationBinding.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.initializationBinding[i]);\n                    if (error)\n                        return \"initializationBinding.\" + error;\n                }\n            }\n            if (message.updateBinding != null && message.hasOwnProperty(\"updateBinding\")) {\n                if (!Array.isArray(message.updateBinding))\n                    return \"updateBinding: array expected\";\n                for (var i = 0; i < message.updateBinding.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.updateBinding[i]);\n                    if (error)\n                        return \"updateBinding.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TrainingInfoProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto\n         */\n        TrainingInfoProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TrainingInfoProto)\n                return object;\n            var message = new $root.onnx.TrainingInfoProto();\n            if (object.initialization != null) {\n                if (typeof object.initialization !== \"object\")\n                    throw TypeError(\".onnx.TrainingInfoProto.initialization: object expected\");\n                message.initialization = $root.onnx.GraphProto.fromObject(object.initialization);\n            }\n            if (object.algorithm != null) {\n                if (typeof object.algorithm !== \"object\")\n                    throw TypeError(\".onnx.TrainingInfoProto.algorithm: object expected\");\n                message.algorithm = $root.onnx.GraphProto.fromObject(object.algorithm);\n            }\n            if (object.initializationBinding) {\n                if (!Array.isArray(object.initializationBinding))\n                    throw TypeError(\".onnx.TrainingInfoProto.initializationBinding: array expected\");\n                message.initializationBinding = [];\n                for (var i = 0; i < object.initializationBinding.length; ++i) {\n                    if (typeof object.initializationBinding[i] !== \"object\")\n                        throw TypeError(\".onnx.TrainingInfoProto.initializationBinding: object expected\");\n                    message.initializationBinding[i] = $root.onnx.StringStringEntryProto.fromObject(object.initializationBinding[i]);\n                }\n            }\n            if (object.updateBinding) {\n                if (!Array.isArray(object.updateBinding))\n                    throw TypeError(\".onnx.TrainingInfoProto.updateBinding: array expected\");\n                message.updateBinding = [];\n                for (var i = 0; i < object.updateBinding.length; ++i) {\n                    if (typeof object.updateBinding[i] !== \"object\")\n                        throw TypeError(\".onnx.TrainingInfoProto.updateBinding: object expected\");\n                    message.updateBinding[i] = $root.onnx.StringStringEntryProto.fromObject(object.updateBinding[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TrainingInfoProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {onnx.TrainingInfoProto} message TrainingInfoProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TrainingInfoProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.initializationBinding = [];\n                object.updateBinding = [];\n            }\n            if (options.defaults) {\n                object.initialization = null;\n                object.algorithm = null;\n            }\n            if (message.initialization != null && message.hasOwnProperty(\"initialization\"))\n                object.initialization = $root.onnx.GraphProto.toObject(message.initialization, options);\n            if (message.algorithm != null && message.hasOwnProperty(\"algorithm\"))\n                object.algorithm = $root.onnx.GraphProto.toObject(message.algorithm, options);\n            if (message.initializationBinding && message.initializationBinding.length) {\n                object.initializationBinding = [];\n                for (var j = 0; j < message.initializationBinding.length; ++j)\n                    object.initializationBinding[j] = $root.onnx.StringStringEntryProto.toObject(message.initializationBinding[j], options);\n            }\n            if (message.updateBinding && message.updateBinding.length) {\n                object.updateBinding = [];\n                for (var j = 0; j < message.updateBinding.length; ++j)\n                    object.updateBinding[j] = $root.onnx.StringStringEntryProto.toObject(message.updateBinding[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TrainingInfoProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TrainingInfoProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TrainingInfoProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TrainingInfoProto\n         * @function getTypeUrl\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TrainingInfoProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.TrainingInfoProto\";\n        };\n\n        return TrainingInfoProto;\n    })();\n\n    onnx.ModelProto = (function() {\n\n        /**\n         * Properties of a ModelProto.\n         * @memberof onnx\n         * @interface IModelProto\n         * @property {number|Long|null} [irVersion] ModelProto irVersion\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] ModelProto opsetImport\n         * @property {string|null} [producerName] ModelProto producerName\n         * @property {string|null} [producerVersion] ModelProto producerVersion\n         * @property {string|null} [domain] ModelProto domain\n         * @property {number|Long|null} [modelVersion] ModelProto modelVersion\n         * @property {string|null} [docString] ModelProto docString\n         * @property {onnx.IGraphProto|null} [graph] ModelProto graph\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [metadataProps] ModelProto metadataProps\n         * @property {Array.<onnx.ITrainingInfoProto>|null} [trainingInfo] ModelProto trainingInfo\n         * @property {Array.<onnx.IFunctionProto>|null} [functions] ModelProto functions\n         */\n\n        /**\n         * Constructs a new ModelProto.\n         * @memberof onnx\n         * @classdesc Represents a ModelProto.\n         * @implements IModelProto\n         * @constructor\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         */\n        function ModelProto(properties) {\n            this.opsetImport = [];\n            this.metadataProps = [];\n            this.trainingInfo = [];\n            this.functions = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ModelProto irVersion.\n         * @member {number|Long} irVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.irVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto opsetImport.\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.opsetImport = $util.emptyArray;\n\n        /**\n         * ModelProto producerName.\n         * @member {string} producerName\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerName = \"\";\n\n        /**\n         * ModelProto producerVersion.\n         * @member {string} producerVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerVersion = \"\";\n\n        /**\n         * ModelProto domain.\n         * @member {string} domain\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.domain = \"\";\n\n        /**\n         * ModelProto modelVersion.\n         * @member {number|Long} modelVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.modelVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto docString.\n         * @member {string} docString\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.docString = \"\";\n\n        /**\n         * ModelProto graph.\n         * @member {onnx.IGraphProto|null|undefined} graph\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.graph = null;\n\n        /**\n         * ModelProto metadataProps.\n         * @member {Array.<onnx.IStringStringEntryProto>} metadataProps\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.metadataProps = $util.emptyArray;\n\n        /**\n         * ModelProto trainingInfo.\n         * @member {Array.<onnx.ITrainingInfoProto>} trainingInfo\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.trainingInfo = $util.emptyArray;\n\n        /**\n         * ModelProto functions.\n         * @member {Array.<onnx.IFunctionProto>} functions\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.functions = $util.emptyArray;\n\n        /**\n         * Creates a new ModelProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         * @returns {onnx.ModelProto} ModelProto instance\n         */\n        ModelProto.create = function create(properties) {\n            return new ModelProto(properties);\n        };\n\n        /**\n         * Encodes the specified ModelProto message. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.irVersion != null && Object.hasOwnProperty.call(message, \"irVersion\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.irVersion);\n            if (message.producerName != null && Object.hasOwnProperty.call(message, \"producerName\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.producerName);\n            if (message.producerVersion != null && Object.hasOwnProperty.call(message, \"producerVersion\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.producerVersion);\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.domain);\n            if (message.modelVersion != null && Object.hasOwnProperty.call(message, \"modelVersion\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.modelVersion);\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.graph != null && Object.hasOwnProperty.call(message, \"graph\"))\n                $root.onnx.GraphProto.encode(message.graph, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.opsetImport != null && message.opsetImport.length)\n                for (var i = 0; i < message.opsetImport.length; ++i)\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.metadataProps != null && message.metadataProps.length)\n                for (var i = 0; i < message.metadataProps.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.metadataProps[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            if (message.trainingInfo != null && message.trainingInfo.length)\n                for (var i = 0; i < message.trainingInfo.length; ++i)\n                    $root.onnx.TrainingInfoProto.encode(message.trainingInfo[i], writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();\n            if (message.functions != null && message.functions.length)\n                for (var i = 0; i < message.functions.length; ++i)\n                    $root.onnx.FunctionProto.encode(message.functions[i], writer.uint32(/* id 25, wireType 2 =*/202).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ModelProto message, length delimited. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ModelProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.irVersion = reader.int64();\n                        break;\n                    }\n                case 8: {\n                        if (!(message.opsetImport && message.opsetImport.length))\n                            message.opsetImport = [];\n                        message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 2: {\n                        message.producerName = reader.string();\n                        break;\n                    }\n                case 3: {\n                        message.producerVersion = reader.string();\n                        break;\n                    }\n                case 4: {\n                        message.domain = reader.string();\n                        break;\n                    }\n                case 5: {\n                        message.modelVersion = reader.int64();\n                        break;\n                    }\n                case 6: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                case 7: {\n                        message.graph = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 14: {\n                        if (!(message.metadataProps && message.metadataProps.length))\n                            message.metadataProps = [];\n                        message.metadataProps.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 20: {\n                        if (!(message.trainingInfo && message.trainingInfo.length))\n                            message.trainingInfo = [];\n                        message.trainingInfo.push($root.onnx.TrainingInfoProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 25: {\n                        if (!(message.functions && message.functions.length))\n                            message.functions = [];\n                        message.functions.push($root.onnx.FunctionProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ModelProto message.\n         * @function verify\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ModelProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (!$util.isInteger(message.irVersion) && !(message.irVersion && $util.isInteger(message.irVersion.low) && $util.isInteger(message.irVersion.high)))\n                    return \"irVersion: integer|Long expected\";\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\n                if (!Array.isArray(message.opsetImport))\n                    return \"opsetImport: array expected\";\n                for (var i = 0; i < message.opsetImport.length; ++i) {\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n                    if (error)\n                        return \"opsetImport.\" + error;\n                }\n            }\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                if (!$util.isString(message.producerName))\n                    return \"producerName: string expected\";\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                if (!$util.isString(message.producerVersion))\n                    return \"producerVersion: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (!$util.isInteger(message.modelVersion) && !(message.modelVersion && $util.isInteger(message.modelVersion.low) && $util.isInteger(message.modelVersion.high)))\n                    return \"modelVersion: integer|Long expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.graph != null && message.hasOwnProperty(\"graph\")) {\n                var error = $root.onnx.GraphProto.verify(message.graph);\n                if (error)\n                    return \"graph.\" + error;\n            }\n            if (message.metadataProps != null && message.hasOwnProperty(\"metadataProps\")) {\n                if (!Array.isArray(message.metadataProps))\n                    return \"metadataProps: array expected\";\n                for (var i = 0; i < message.metadataProps.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.metadataProps[i]);\n                    if (error)\n                        return \"metadataProps.\" + error;\n                }\n            }\n            if (message.trainingInfo != null && message.hasOwnProperty(\"trainingInfo\")) {\n                if (!Array.isArray(message.trainingInfo))\n                    return \"trainingInfo: array expected\";\n                for (var i = 0; i < message.trainingInfo.length; ++i) {\n                    var error = $root.onnx.TrainingInfoProto.verify(message.trainingInfo[i]);\n                    if (error)\n                        return \"trainingInfo.\" + error;\n                }\n            }\n            if (message.functions != null && message.hasOwnProperty(\"functions\")) {\n                if (!Array.isArray(message.functions))\n                    return \"functions: array expected\";\n                for (var i = 0; i < message.functions.length; ++i) {\n                    var error = $root.onnx.FunctionProto.verify(message.functions[i]);\n                    if (error)\n                        return \"functions.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ModelProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ModelProto} ModelProto\n         */\n        ModelProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ModelProto)\n                return object;\n            var message = new $root.onnx.ModelProto();\n            if (object.irVersion != null)\n                if ($util.Long)\n                    (message.irVersion = $util.Long.fromValue(object.irVersion)).unsigned = false;\n                else if (typeof object.irVersion === \"string\")\n                    message.irVersion = parseInt(object.irVersion, 10);\n                else if (typeof object.irVersion === \"number\")\n                    message.irVersion = object.irVersion;\n                else if (typeof object.irVersion === \"object\")\n                    message.irVersion = new $util.LongBits(object.irVersion.low >>> 0, object.irVersion.high >>> 0).toNumber();\n            if (object.opsetImport) {\n                if (!Array.isArray(object.opsetImport))\n                    throw TypeError(\".onnx.ModelProto.opsetImport: array expected\");\n                message.opsetImport = [];\n                for (var i = 0; i < object.opsetImport.length; ++i) {\n                    if (typeof object.opsetImport[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.opsetImport: object expected\");\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n                }\n            }\n            if (object.producerName != null)\n                message.producerName = String(object.producerName);\n            if (object.producerVersion != null)\n                message.producerVersion = String(object.producerVersion);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.modelVersion != null)\n                if ($util.Long)\n                    (message.modelVersion = $util.Long.fromValue(object.modelVersion)).unsigned = false;\n                else if (typeof object.modelVersion === \"string\")\n                    message.modelVersion = parseInt(object.modelVersion, 10);\n                else if (typeof object.modelVersion === \"number\")\n                    message.modelVersion = object.modelVersion;\n                else if (typeof object.modelVersion === \"object\")\n                    message.modelVersion = new $util.LongBits(object.modelVersion.low >>> 0, object.modelVersion.high >>> 0).toNumber();\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.graph != null) {\n                if (typeof object.graph !== \"object\")\n                    throw TypeError(\".onnx.ModelProto.graph: object expected\");\n                message.graph = $root.onnx.GraphProto.fromObject(object.graph);\n            }\n            if (object.metadataProps) {\n                if (!Array.isArray(object.metadataProps))\n                    throw TypeError(\".onnx.ModelProto.metadataProps: array expected\");\n                message.metadataProps = [];\n                for (var i = 0; i < object.metadataProps.length; ++i) {\n                    if (typeof object.metadataProps[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.metadataProps: object expected\");\n                    message.metadataProps[i] = $root.onnx.StringStringEntryProto.fromObject(object.metadataProps[i]);\n                }\n            }\n            if (object.trainingInfo) {\n                if (!Array.isArray(object.trainingInfo))\n                    throw TypeError(\".onnx.ModelProto.trainingInfo: array expected\");\n                message.trainingInfo = [];\n                for (var i = 0; i < object.trainingInfo.length; ++i) {\n                    if (typeof object.trainingInfo[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.trainingInfo: object expected\");\n                    message.trainingInfo[i] = $root.onnx.TrainingInfoProto.fromObject(object.trainingInfo[i]);\n                }\n            }\n            if (object.functions) {\n                if (!Array.isArray(object.functions))\n                    throw TypeError(\".onnx.ModelProto.functions: array expected\");\n                message.functions = [];\n                for (var i = 0; i < object.functions.length; ++i) {\n                    if (typeof object.functions[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.functions: object expected\");\n                    message.functions[i] = $root.onnx.FunctionProto.fromObject(object.functions[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ModelProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.ModelProto} message ModelProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ModelProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.opsetImport = [];\n                object.metadataProps = [];\n                object.trainingInfo = [];\n                object.functions = [];\n            }\n            if (options.defaults) {\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.irVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.irVersion = options.longs === String ? \"0\" : 0;\n                object.producerName = \"\";\n                object.producerVersion = \"\";\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.modelVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.modelVersion = options.longs === String ? \"0\" : 0;\n                object.docString = \"\";\n                object.graph = null;\n            }\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (typeof message.irVersion === \"number\")\n                    object.irVersion = options.longs === String ? String(message.irVersion) : message.irVersion;\n                else\n                    object.irVersion = options.longs === String ? $util.Long.prototype.toString.call(message.irVersion) : options.longs === Number ? new $util.LongBits(message.irVersion.low >>> 0, message.irVersion.high >>> 0).toNumber() : message.irVersion;\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                object.producerName = message.producerName;\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                object.producerVersion = message.producerVersion;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (typeof message.modelVersion === \"number\")\n                    object.modelVersion = options.longs === String ? String(message.modelVersion) : message.modelVersion;\n                else\n                    object.modelVersion = options.longs === String ? $util.Long.prototype.toString.call(message.modelVersion) : options.longs === Number ? new $util.LongBits(message.modelVersion.low >>> 0, message.modelVersion.high >>> 0).toNumber() : message.modelVersion;\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                object.graph = $root.onnx.GraphProto.toObject(message.graph, options);\n            if (message.opsetImport && message.opsetImport.length) {\n                object.opsetImport = [];\n                for (var j = 0; j < message.opsetImport.length; ++j)\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n            }\n            if (message.metadataProps && message.metadataProps.length) {\n                object.metadataProps = [];\n                for (var j = 0; j < message.metadataProps.length; ++j)\n                    object.metadataProps[j] = $root.onnx.StringStringEntryProto.toObject(message.metadataProps[j], options);\n            }\n            if (message.trainingInfo && message.trainingInfo.length) {\n                object.trainingInfo = [];\n                for (var j = 0; j < message.trainingInfo.length; ++j)\n                    object.trainingInfo[j] = $root.onnx.TrainingInfoProto.toObject(message.trainingInfo[j], options);\n            }\n            if (message.functions && message.functions.length) {\n                object.functions = [];\n                for (var j = 0; j < message.functions.length; ++j)\n                    object.functions[j] = $root.onnx.FunctionProto.toObject(message.functions[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ModelProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ModelProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ModelProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ModelProto\n         * @function getTypeUrl\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ModelProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.ModelProto\";\n        };\n\n        return ModelProto;\n    })();\n\n    onnx.StringStringEntryProto = (function() {\n\n        /**\n         * Properties of a StringStringEntryProto.\n         * @memberof onnx\n         * @interface IStringStringEntryProto\n         * @property {string|null} [key] StringStringEntryProto key\n         * @property {string|null} [value] StringStringEntryProto value\n         */\n\n        /**\n         * Constructs a new StringStringEntryProto.\n         * @memberof onnx\n         * @classdesc Represents a StringStringEntryProto.\n         * @implements IStringStringEntryProto\n         * @constructor\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         */\n        function StringStringEntryProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * StringStringEntryProto key.\n         * @member {string} key\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.key = \"\";\n\n        /**\n         * StringStringEntryProto value.\n         * @member {string} value\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.value = \"\";\n\n        /**\n         * Creates a new StringStringEntryProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto instance\n         */\n        StringStringEntryProto.create = function create(properties) {\n            return new StringStringEntryProto(properties);\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && Object.hasOwnProperty.call(message, \"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);\n            if (message.value != null && Object.hasOwnProperty.call(message, \"value\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message, length delimited. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.StringStringEntryProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.key = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.value = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a StringStringEntryProto message.\n         * @function verify\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        StringStringEntryProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!$util.isString(message.key))\n                    return \"key: string expected\";\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                if (!$util.isString(message.value))\n                    return \"value: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a StringStringEntryProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         */\n        StringStringEntryProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.StringStringEntryProto)\n                return object;\n            var message = new $root.onnx.StringStringEntryProto();\n            if (object.key != null)\n                message.key = String(object.key);\n            if (object.value != null)\n                message.value = String(object.value);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a StringStringEntryProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.StringStringEntryProto} message StringStringEntryProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        StringStringEntryProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.key = \"\";\n                object.value = \"\";\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = message.key;\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                object.value = message.value;\n            return object;\n        };\n\n        /**\n         * Converts this StringStringEntryProto to JSON.\n         * @function toJSON\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        StringStringEntryProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for StringStringEntryProto\n         * @function getTypeUrl\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        StringStringEntryProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.StringStringEntryProto\";\n        };\n\n        return StringStringEntryProto;\n    })();\n\n    onnx.TensorAnnotation = (function() {\n\n        /**\n         * Properties of a TensorAnnotation.\n         * @memberof onnx\n         * @interface ITensorAnnotation\n         * @property {string|null} [tensorName] TensorAnnotation tensorName\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [quantParameterTensorNames] TensorAnnotation quantParameterTensorNames\n         */\n\n        /**\n         * Constructs a new TensorAnnotation.\n         * @memberof onnx\n         * @classdesc Represents a TensorAnnotation.\n         * @implements ITensorAnnotation\n         * @constructor\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         */\n        function TensorAnnotation(properties) {\n            this.quantParameterTensorNames = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorAnnotation tensorName.\n         * @member {string} tensorName\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.tensorName = \"\";\n\n        /**\n         * TensorAnnotation quantParameterTensorNames.\n         * @member {Array.<onnx.IStringStringEntryProto>} quantParameterTensorNames\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.quantParameterTensorNames = $util.emptyArray;\n\n        /**\n         * Creates a new TensorAnnotation instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         * @returns {onnx.TensorAnnotation} TensorAnnotation instance\n         */\n        TensorAnnotation.create = function create(properties) {\n            return new TensorAnnotation(properties);\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorName != null && Object.hasOwnProperty.call(message, \"tensorName\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.tensorName);\n            if (message.quantParameterTensorNames != null && message.quantParameterTensorNames.length)\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.quantParameterTensorNames[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message, length delimited. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorAnnotation();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.tensorName = reader.string();\n                        break;\n                    }\n                case 2: {\n                        if (!(message.quantParameterTensorNames && message.quantParameterTensorNames.length))\n                            message.quantParameterTensorNames = [];\n                        message.quantParameterTensorNames.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorAnnotation message.\n         * @function verify\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorAnnotation.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                if (!$util.isString(message.tensorName))\n                    return \"tensorName: string expected\";\n            if (message.quantParameterTensorNames != null && message.hasOwnProperty(\"quantParameterTensorNames\")) {\n                if (!Array.isArray(message.quantParameterTensorNames))\n                    return \"quantParameterTensorNames: array expected\";\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.quantParameterTensorNames[i]);\n                    if (error)\n                        return \"quantParameterTensorNames.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorAnnotation message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         */\n        TensorAnnotation.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorAnnotation)\n                return object;\n            var message = new $root.onnx.TensorAnnotation();\n            if (object.tensorName != null)\n                message.tensorName = String(object.tensorName);\n            if (object.quantParameterTensorNames) {\n                if (!Array.isArray(object.quantParameterTensorNames))\n                    throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: array expected\");\n                message.quantParameterTensorNames = [];\n                for (var i = 0; i < object.quantParameterTensorNames.length; ++i) {\n                    if (typeof object.quantParameterTensorNames[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: object expected\");\n                    message.quantParameterTensorNames[i] = $root.onnx.StringStringEntryProto.fromObject(object.quantParameterTensorNames[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorAnnotation message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.TensorAnnotation} message TensorAnnotation\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorAnnotation.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.quantParameterTensorNames = [];\n            if (options.defaults)\n                object.tensorName = \"\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                object.tensorName = message.tensorName;\n            if (message.quantParameterTensorNames && message.quantParameterTensorNames.length) {\n                object.quantParameterTensorNames = [];\n                for (var j = 0; j < message.quantParameterTensorNames.length; ++j)\n                    object.quantParameterTensorNames[j] = $root.onnx.StringStringEntryProto.toObject(message.quantParameterTensorNames[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorAnnotation to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorAnnotation.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TensorAnnotation\n         * @function getTypeUrl\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TensorAnnotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.TensorAnnotation\";\n        };\n\n        return TensorAnnotation;\n    })();\n\n    onnx.GraphProto = (function() {\n\n        /**\n         * Properties of a GraphProto.\n         * @memberof onnx\n         * @interface IGraphProto\n         * @property {Array.<onnx.INodeProto>|null} [node] GraphProto node\n         * @property {string|null} [name] GraphProto name\n         * @property {Array.<onnx.ITensorProto>|null} [initializer] GraphProto initializer\n         * @property {Array.<onnx.ISparseTensorProto>|null} [sparseInitializer] GraphProto sparseInitializer\n         * @property {string|null} [docString] GraphProto docString\n         * @property {Array.<onnx.IValueInfoProto>|null} [input] GraphProto input\n         * @property {Array.<onnx.IValueInfoProto>|null} [output] GraphProto output\n         * @property {Array.<onnx.IValueInfoProto>|null} [valueInfo] GraphProto valueInfo\n         * @property {Array.<onnx.ITensorAnnotation>|null} [quantizationAnnotation] GraphProto quantizationAnnotation\n         */\n\n        /**\n         * Constructs a new GraphProto.\n         * @memberof onnx\n         * @classdesc Represents a GraphProto.\n         * @implements IGraphProto\n         * @constructor\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         */\n        function GraphProto(properties) {\n            this.node = [];\n            this.initializer = [];\n            this.sparseInitializer = [];\n            this.input = [];\n            this.output = [];\n            this.valueInfo = [];\n            this.quantizationAnnotation = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * GraphProto node.\n         * @member {Array.<onnx.INodeProto>} node\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.node = $util.emptyArray;\n\n        /**\n         * GraphProto name.\n         * @member {string} name\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.name = \"\";\n\n        /**\n         * GraphProto initializer.\n         * @member {Array.<onnx.ITensorProto>} initializer\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.initializer = $util.emptyArray;\n\n        /**\n         * GraphProto sparseInitializer.\n         * @member {Array.<onnx.ISparseTensorProto>} sparseInitializer\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.sparseInitializer = $util.emptyArray;\n\n        /**\n         * GraphProto docString.\n         * @member {string} docString\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.docString = \"\";\n\n        /**\n         * GraphProto input.\n         * @member {Array.<onnx.IValueInfoProto>} input\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.input = $util.emptyArray;\n\n        /**\n         * GraphProto output.\n         * @member {Array.<onnx.IValueInfoProto>} output\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.output = $util.emptyArray;\n\n        /**\n         * GraphProto valueInfo.\n         * @member {Array.<onnx.IValueInfoProto>} valueInfo\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.valueInfo = $util.emptyArray;\n\n        /**\n         * GraphProto quantizationAnnotation.\n         * @member {Array.<onnx.ITensorAnnotation>} quantizationAnnotation\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.quantizationAnnotation = $util.emptyArray;\n\n        /**\n         * Creates a new GraphProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         * @returns {onnx.GraphProto} GraphProto instance\n         */\n        GraphProto.create = function create(properties) {\n            return new GraphProto(properties);\n        };\n\n        /**\n         * Encodes the specified GraphProto message. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.node != null && message.node.length)\n                for (var i = 0; i < message.node.length; ++i)\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n            if (message.initializer != null && message.initializer.length)\n                for (var i = 0; i < message.initializer.length; ++i)\n                    $root.onnx.TensorProto.encode(message.initializer[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.docString);\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.input[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.output[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.valueInfo != null && message.valueInfo.length)\n                for (var i = 0; i < message.valueInfo.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.valueInfo[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.quantizationAnnotation != null && message.quantizationAnnotation.length)\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i)\n                    $root.onnx.TensorAnnotation.encode(message.quantizationAnnotation[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            if (message.sparseInitializer != null && message.sparseInitializer.length)\n                for (var i = 0; i < message.sparseInitializer.length; ++i)\n                    $root.onnx.SparseTensorProto.encode(message.sparseInitializer[i], writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified GraphProto message, length delimited. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.GraphProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        if (!(message.node && message.node.length))\n                            message.node = [];\n                        message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 2: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 5: {\n                        if (!(message.initializer && message.initializer.length))\n                            message.initializer = [];\n                        message.initializer.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 15: {\n                        if (!(message.sparseInitializer && message.sparseInitializer.length))\n                            message.sparseInitializer = [];\n                        message.sparseInitializer.push($root.onnx.SparseTensorProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 10: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                case 11: {\n                        if (!(message.input && message.input.length))\n                            message.input = [];\n                        message.input.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 12: {\n                        if (!(message.output && message.output.length))\n                            message.output = [];\n                        message.output.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 13: {\n                        if (!(message.valueInfo && message.valueInfo.length))\n                            message.valueInfo = [];\n                        message.valueInfo.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 14: {\n                        if (!(message.quantizationAnnotation && message.quantizationAnnotation.length))\n                            message.quantizationAnnotation = [];\n                        message.quantizationAnnotation.push($root.onnx.TensorAnnotation.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a GraphProto message.\n         * @function verify\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        GraphProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\n                if (!Array.isArray(message.node))\n                    return \"node: array expected\";\n                for (var i = 0; i < message.node.length; ++i) {\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\n                    if (error)\n                        return \"node.\" + error;\n                }\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.initializer != null && message.hasOwnProperty(\"initializer\")) {\n                if (!Array.isArray(message.initializer))\n                    return \"initializer: array expected\";\n                for (var i = 0; i < message.initializer.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.initializer[i]);\n                    if (error)\n                        return \"initializer.\" + error;\n                }\n            }\n            if (message.sparseInitializer != null && message.hasOwnProperty(\"sparseInitializer\")) {\n                if (!Array.isArray(message.sparseInitializer))\n                    return \"sparseInitializer: array expected\";\n                for (var i = 0; i < message.sparseInitializer.length; ++i) {\n                    var error = $root.onnx.SparseTensorProto.verify(message.sparseInitializer[i]);\n                    if (error)\n                        return \"sparseInitializer.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.input[i]);\n                    if (error)\n                        return \"input.\" + error;\n                }\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.output[i]);\n                    if (error)\n                        return \"output.\" + error;\n                }\n            }\n            if (message.valueInfo != null && message.hasOwnProperty(\"valueInfo\")) {\n                if (!Array.isArray(message.valueInfo))\n                    return \"valueInfo: array expected\";\n                for (var i = 0; i < message.valueInfo.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.valueInfo[i]);\n                    if (error)\n                        return \"valueInfo.\" + error;\n                }\n            }\n            if (message.quantizationAnnotation != null && message.hasOwnProperty(\"quantizationAnnotation\")) {\n                if (!Array.isArray(message.quantizationAnnotation))\n                    return \"quantizationAnnotation: array expected\";\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i) {\n                    var error = $root.onnx.TensorAnnotation.verify(message.quantizationAnnotation[i]);\n                    if (error)\n                        return \"quantizationAnnotation.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a GraphProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.GraphProto} GraphProto\n         */\n        GraphProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.GraphProto)\n                return object;\n            var message = new $root.onnx.GraphProto();\n            if (object.node) {\n                if (!Array.isArray(object.node))\n                    throw TypeError(\".onnx.GraphProto.node: array expected\");\n                message.node = [];\n                for (var i = 0; i < object.node.length; ++i) {\n                    if (typeof object.node[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.node: object expected\");\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n                }\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.initializer) {\n                if (!Array.isArray(object.initializer))\n                    throw TypeError(\".onnx.GraphProto.initializer: array expected\");\n                message.initializer = [];\n                for (var i = 0; i < object.initializer.length; ++i) {\n                    if (typeof object.initializer[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.initializer: object expected\");\n                    message.initializer[i] = $root.onnx.TensorProto.fromObject(object.initializer[i]);\n                }\n            }\n            if (object.sparseInitializer) {\n                if (!Array.isArray(object.sparseInitializer))\n                    throw TypeError(\".onnx.GraphProto.sparseInitializer: array expected\");\n                message.sparseInitializer = [];\n                for (var i = 0; i < object.sparseInitializer.length; ++i) {\n                    if (typeof object.sparseInitializer[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.sparseInitializer: object expected\");\n                    message.sparseInitializer[i] = $root.onnx.SparseTensorProto.fromObject(object.sparseInitializer[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.GraphProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i) {\n                    if (typeof object.input[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.input: object expected\");\n                    message.input[i] = $root.onnx.ValueInfoProto.fromObject(object.input[i]);\n                }\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.GraphProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i) {\n                    if (typeof object.output[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.output: object expected\");\n                    message.output[i] = $root.onnx.ValueInfoProto.fromObject(object.output[i]);\n                }\n            }\n            if (object.valueInfo) {\n                if (!Array.isArray(object.valueInfo))\n                    throw TypeError(\".onnx.GraphProto.valueInfo: array expected\");\n                message.valueInfo = [];\n                for (var i = 0; i < object.valueInfo.length; ++i) {\n                    if (typeof object.valueInfo[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.valueInfo: object expected\");\n                    message.valueInfo[i] = $root.onnx.ValueInfoProto.fromObject(object.valueInfo[i]);\n                }\n            }\n            if (object.quantizationAnnotation) {\n                if (!Array.isArray(object.quantizationAnnotation))\n                    throw TypeError(\".onnx.GraphProto.quantizationAnnotation: array expected\");\n                message.quantizationAnnotation = [];\n                for (var i = 0; i < object.quantizationAnnotation.length; ++i) {\n                    if (typeof object.quantizationAnnotation[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.quantizationAnnotation: object expected\");\n                    message.quantizationAnnotation[i] = $root.onnx.TensorAnnotation.fromObject(object.quantizationAnnotation[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a GraphProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.GraphProto} message GraphProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        GraphProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.node = [];\n                object.initializer = [];\n                object.input = [];\n                object.output = [];\n                object.valueInfo = [];\n                object.quantizationAnnotation = [];\n                object.sparseInitializer = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.docString = \"\";\n            }\n            if (message.node && message.node.length) {\n                object.node = [];\n                for (var j = 0; j < message.node.length; ++j)\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.initializer && message.initializer.length) {\n                object.initializer = [];\n                for (var j = 0; j < message.initializer.length; ++j)\n                    object.initializer[j] = $root.onnx.TensorProto.toObject(message.initializer[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = $root.onnx.ValueInfoProto.toObject(message.input[j], options);\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = $root.onnx.ValueInfoProto.toObject(message.output[j], options);\n            }\n            if (message.valueInfo && message.valueInfo.length) {\n                object.valueInfo = [];\n                for (var j = 0; j < message.valueInfo.length; ++j)\n                    object.valueInfo[j] = $root.onnx.ValueInfoProto.toObject(message.valueInfo[j], options);\n            }\n            if (message.quantizationAnnotation && message.quantizationAnnotation.length) {\n                object.quantizationAnnotation = [];\n                for (var j = 0; j < message.quantizationAnnotation.length; ++j)\n                    object.quantizationAnnotation[j] = $root.onnx.TensorAnnotation.toObject(message.quantizationAnnotation[j], options);\n            }\n            if (message.sparseInitializer && message.sparseInitializer.length) {\n                object.sparseInitializer = [];\n                for (var j = 0; j < message.sparseInitializer.length; ++j)\n                    object.sparseInitializer[j] = $root.onnx.SparseTensorProto.toObject(message.sparseInitializer[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this GraphProto to JSON.\n         * @function toJSON\n         * @memberof onnx.GraphProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        GraphProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for GraphProto\n         * @function getTypeUrl\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        GraphProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.GraphProto\";\n        };\n\n        return GraphProto;\n    })();\n\n    onnx.TensorProto = (function() {\n\n        /**\n         * Properties of a TensorProto.\n         * @memberof onnx\n         * @interface ITensorProto\n         * @property {Array.<number|Long>|null} [dims] TensorProto dims\n         * @property {number|null} [dataType] TensorProto dataType\n         * @property {onnx.TensorProto.ISegment|null} [segment] TensorProto segment\n         * @property {Array.<number>|null} [floatData] TensorProto floatData\n         * @property {Array.<number>|null} [int32Data] TensorProto int32Data\n         * @property {Array.<Uint8Array>|null} [stringData] TensorProto stringData\n         * @property {Array.<number|Long>|null} [int64Data] TensorProto int64Data\n         * @property {string|null} [name] TensorProto name\n         * @property {string|null} [docString] TensorProto docString\n         * @property {Uint8Array|null} [rawData] TensorProto rawData\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [externalData] TensorProto externalData\n         * @property {onnx.TensorProto.DataLocation|null} [dataLocation] TensorProto dataLocation\n         * @property {Array.<number>|null} [doubleData] TensorProto doubleData\n         * @property {Array.<number|Long>|null} [uint64Data] TensorProto uint64Data\n         */\n\n        /**\n         * Constructs a new TensorProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorProto.\n         * @implements ITensorProto\n         * @constructor\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         */\n        function TensorProto(properties) {\n            this.dims = [];\n            this.floatData = [];\n            this.int32Data = [];\n            this.stringData = [];\n            this.int64Data = [];\n            this.externalData = [];\n            this.doubleData = [];\n            this.uint64Data = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorProto dims.\n         * @member {Array.<number|Long>} dims\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dims = $util.emptyArray;\n\n        /**\n         * TensorProto dataType.\n         * @member {number} dataType\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataType = 0;\n\n        /**\n         * TensorProto segment.\n         * @member {onnx.TensorProto.ISegment|null|undefined} segment\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.segment = null;\n\n        /**\n         * TensorProto floatData.\n         * @member {Array.<number>} floatData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.floatData = $util.emptyArray;\n\n        /**\n         * TensorProto int32Data.\n         * @member {Array.<number>} int32Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int32Data = $util.emptyArray;\n\n        /**\n         * TensorProto stringData.\n         * @member {Array.<Uint8Array>} stringData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.stringData = $util.emptyArray;\n\n        /**\n         * TensorProto int64Data.\n         * @member {Array.<number|Long>} int64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int64Data = $util.emptyArray;\n\n        /**\n         * TensorProto name.\n         * @member {string} name\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.name = \"\";\n\n        /**\n         * TensorProto docString.\n         * @member {string} docString\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.docString = \"\";\n\n        /**\n         * TensorProto rawData.\n         * @member {Uint8Array} rawData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.rawData = $util.newBuffer([]);\n\n        /**\n         * TensorProto externalData.\n         * @member {Array.<onnx.IStringStringEntryProto>} externalData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.externalData = $util.emptyArray;\n\n        /**\n         * TensorProto dataLocation.\n         * @member {onnx.TensorProto.DataLocation} dataLocation\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataLocation = 0;\n\n        /**\n         * TensorProto doubleData.\n         * @member {Array.<number>} doubleData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.doubleData = $util.emptyArray;\n\n        /**\n         * TensorProto uint64Data.\n         * @member {Array.<number|Long>} uint64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.uint64Data = $util.emptyArray;\n\n        /**\n         * Creates a new TensorProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         * @returns {onnx.TensorProto} TensorProto instance\n         */\n        TensorProto.create = function create(properties) {\n            return new TensorProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorProto message. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dims != null && message.dims.length) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork();\n                for (var i = 0; i < message.dims.length; ++i)\n                    writer.int64(message.dims[i]);\n                writer.ldelim();\n            }\n            if (message.dataType != null && Object.hasOwnProperty.call(message, \"dataType\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.dataType);\n            if (message.segment != null && Object.hasOwnProperty.call(message, \"segment\"))\n                $root.onnx.TensorProto.Segment.encode(message.segment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.floatData != null && message.floatData.length) {\n                writer.uint32(/* id 4, wireType 2 =*/34).fork();\n                for (var i = 0; i < message.floatData.length; ++i)\n                    writer.float(message.floatData[i]);\n                writer.ldelim();\n            }\n            if (message.int32Data != null && message.int32Data.length) {\n                writer.uint32(/* id 5, wireType 2 =*/42).fork();\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    writer.int32(message.int32Data[i]);\n                writer.ldelim();\n            }\n            if (message.stringData != null && message.stringData.length)\n                for (var i = 0; i < message.stringData.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.stringData[i]);\n            if (message.int64Data != null && message.int64Data.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    writer.int64(message.int64Data[i]);\n                writer.ldelim();\n            }\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.name);\n            if (message.rawData != null && Object.hasOwnProperty.call(message, \"rawData\"))\n                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.rawData);\n            if (message.doubleData != null && message.doubleData.length) {\n                writer.uint32(/* id 10, wireType 2 =*/82).fork();\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    writer.double(message.doubleData[i]);\n                writer.ldelim();\n            }\n            if (message.uint64Data != null && message.uint64Data.length) {\n                writer.uint32(/* id 11, wireType 2 =*/90).fork();\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    writer.uint64(message.uint64Data[i]);\n                writer.ldelim();\n            }\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 12, wireType 2 =*/98).string(message.docString);\n            if (message.externalData != null && message.externalData.length)\n                for (var i = 0; i < message.externalData.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.externalData[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.dataLocation != null && Object.hasOwnProperty.call(message, \"dataLocation\"))\n                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.dataLocation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorProto message, length delimited. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        if (!(message.dims && message.dims.length))\n                            message.dims = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.dims.push(reader.int64());\n                        } else\n                            message.dims.push(reader.int64());\n                        break;\n                    }\n                case 2: {\n                        message.dataType = reader.int32();\n                        break;\n                    }\n                case 3: {\n                        message.segment = $root.onnx.TensorProto.Segment.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 4: {\n                        if (!(message.floatData && message.floatData.length))\n                            message.floatData = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.floatData.push(reader.float());\n                        } else\n                            message.floatData.push(reader.float());\n                        break;\n                    }\n                case 5: {\n                        if (!(message.int32Data && message.int32Data.length))\n                            message.int32Data = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.int32Data.push(reader.int32());\n                        } else\n                            message.int32Data.push(reader.int32());\n                        break;\n                    }\n                case 6: {\n                        if (!(message.stringData && message.stringData.length))\n                            message.stringData = [];\n                        message.stringData.push(reader.bytes());\n                        break;\n                    }\n                case 7: {\n                        if (!(message.int64Data && message.int64Data.length))\n                            message.int64Data = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.int64Data.push(reader.int64());\n                        } else\n                            message.int64Data.push(reader.int64());\n                        break;\n                    }\n                case 8: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 12: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                case 9: {\n                        message.rawData = reader.bytes();\n                        break;\n                    }\n                case 13: {\n                        if (!(message.externalData && message.externalData.length))\n                            message.externalData = [];\n                        message.externalData.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 14: {\n                        message.dataLocation = reader.int32();\n                        break;\n                    }\n                case 10: {\n                        if (!(message.doubleData && message.doubleData.length))\n                            message.doubleData = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.doubleData.push(reader.double());\n                        } else\n                            message.doubleData.push(reader.double());\n                        break;\n                    }\n                case 11: {\n                        if (!(message.uint64Data && message.uint64Data.length))\n                            message.uint64Data = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.uint64Data.push(reader.uint64());\n                        } else\n                            message.uint64Data.push(reader.uint64());\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorProto message.\n         * @function verify\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                if (!Array.isArray(message.dims))\n                    return \"dims: array expected\";\n                for (var i = 0; i < message.dims.length; ++i)\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\n                        return \"dims: integer|Long[] expected\";\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                if (!$util.isInteger(message.dataType))\n                    return \"dataType: integer expected\";\n            if (message.segment != null && message.hasOwnProperty(\"segment\")) {\n                var error = $root.onnx.TensorProto.Segment.verify(message.segment);\n                if (error)\n                    return \"segment.\" + error;\n            }\n            if (message.floatData != null && message.hasOwnProperty(\"floatData\")) {\n                if (!Array.isArray(message.floatData))\n                    return \"floatData: array expected\";\n                for (var i = 0; i < message.floatData.length; ++i)\n                    if (typeof message.floatData[i] !== \"number\")\n                        return \"floatData: number[] expected\";\n            }\n            if (message.int32Data != null && message.hasOwnProperty(\"int32Data\")) {\n                if (!Array.isArray(message.int32Data))\n                    return \"int32Data: array expected\";\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    if (!$util.isInteger(message.int32Data[i]))\n                        return \"int32Data: integer[] expected\";\n            }\n            if (message.stringData != null && message.hasOwnProperty(\"stringData\")) {\n                if (!Array.isArray(message.stringData))\n                    return \"stringData: array expected\";\n                for (var i = 0; i < message.stringData.length; ++i)\n                    if (!(message.stringData[i] && typeof message.stringData[i].length === \"number\" || $util.isString(message.stringData[i])))\n                        return \"stringData: buffer[] expected\";\n            }\n            if (message.int64Data != null && message.hasOwnProperty(\"int64Data\")) {\n                if (!Array.isArray(message.int64Data))\n                    return \"int64Data: array expected\";\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    if (!$util.isInteger(message.int64Data[i]) && !(message.int64Data[i] && $util.isInteger(message.int64Data[i].low) && $util.isInteger(message.int64Data[i].high)))\n                        return \"int64Data: integer|Long[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                if (!(message.rawData && typeof message.rawData.length === \"number\" || $util.isString(message.rawData)))\n                    return \"rawData: buffer expected\";\n            if (message.externalData != null && message.hasOwnProperty(\"externalData\")) {\n                if (!Array.isArray(message.externalData))\n                    return \"externalData: array expected\";\n                for (var i = 0; i < message.externalData.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.externalData[i]);\n                    if (error)\n                        return \"externalData.\" + error;\n                }\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                switch (message.dataLocation) {\n                default:\n                    return \"dataLocation: enum value expected\";\n                case 0:\n                case 1:\n                    break;\n                }\n            if (message.doubleData != null && message.hasOwnProperty(\"doubleData\")) {\n                if (!Array.isArray(message.doubleData))\n                    return \"doubleData: array expected\";\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    if (typeof message.doubleData[i] !== \"number\")\n                        return \"doubleData: number[] expected\";\n            }\n            if (message.uint64Data != null && message.hasOwnProperty(\"uint64Data\")) {\n                if (!Array.isArray(message.uint64Data))\n                    return \"uint64Data: array expected\";\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    if (!$util.isInteger(message.uint64Data[i]) && !(message.uint64Data[i] && $util.isInteger(message.uint64Data[i].low) && $util.isInteger(message.uint64Data[i].high)))\n                        return \"uint64Data: integer|Long[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorProto} TensorProto\n         */\n        TensorProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorProto)\n                return object;\n            var message = new $root.onnx.TensorProto();\n            if (object.dims) {\n                if (!Array.isArray(object.dims))\n                    throw TypeError(\".onnx.TensorProto.dims: array expected\");\n                message.dims = [];\n                for (var i = 0; i < object.dims.length; ++i)\n                    if ($util.Long)\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n                    else if (typeof object.dims[i] === \"string\")\n                        message.dims[i] = parseInt(object.dims[i], 10);\n                    else if (typeof object.dims[i] === \"number\")\n                        message.dims[i] = object.dims[i];\n                    else if (typeof object.dims[i] === \"object\")\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n            }\n            if (object.dataType != null)\n                message.dataType = object.dataType | 0;\n            if (object.segment != null) {\n                if (typeof object.segment !== \"object\")\n                    throw TypeError(\".onnx.TensorProto.segment: object expected\");\n                message.segment = $root.onnx.TensorProto.Segment.fromObject(object.segment);\n            }\n            if (object.floatData) {\n                if (!Array.isArray(object.floatData))\n                    throw TypeError(\".onnx.TensorProto.floatData: array expected\");\n                message.floatData = [];\n                for (var i = 0; i < object.floatData.length; ++i)\n                    message.floatData[i] = Number(object.floatData[i]);\n            }\n            if (object.int32Data) {\n                if (!Array.isArray(object.int32Data))\n                    throw TypeError(\".onnx.TensorProto.int32Data: array expected\");\n                message.int32Data = [];\n                for (var i = 0; i < object.int32Data.length; ++i)\n                    message.int32Data[i] = object.int32Data[i] | 0;\n            }\n            if (object.stringData) {\n                if (!Array.isArray(object.stringData))\n                    throw TypeError(\".onnx.TensorProto.stringData: array expected\");\n                message.stringData = [];\n                for (var i = 0; i < object.stringData.length; ++i)\n                    if (typeof object.stringData[i] === \"string\")\n                        $util.base64.decode(object.stringData[i], message.stringData[i] = $util.newBuffer($util.base64.length(object.stringData[i])), 0);\n                    else if (object.stringData[i].length >= 0)\n                        message.stringData[i] = object.stringData[i];\n            }\n            if (object.int64Data) {\n                if (!Array.isArray(object.int64Data))\n                    throw TypeError(\".onnx.TensorProto.int64Data: array expected\");\n                message.int64Data = [];\n                for (var i = 0; i < object.int64Data.length; ++i)\n                    if ($util.Long)\n                        (message.int64Data[i] = $util.Long.fromValue(object.int64Data[i])).unsigned = false;\n                    else if (typeof object.int64Data[i] === \"string\")\n                        message.int64Data[i] = parseInt(object.int64Data[i], 10);\n                    else if (typeof object.int64Data[i] === \"number\")\n                        message.int64Data[i] = object.int64Data[i];\n                    else if (typeof object.int64Data[i] === \"object\")\n                        message.int64Data[i] = new $util.LongBits(object.int64Data[i].low >>> 0, object.int64Data[i].high >>> 0).toNumber();\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.rawData != null)\n                if (typeof object.rawData === \"string\")\n                    $util.base64.decode(object.rawData, message.rawData = $util.newBuffer($util.base64.length(object.rawData)), 0);\n                else if (object.rawData.length >= 0)\n                    message.rawData = object.rawData;\n            if (object.externalData) {\n                if (!Array.isArray(object.externalData))\n                    throw TypeError(\".onnx.TensorProto.externalData: array expected\");\n                message.externalData = [];\n                for (var i = 0; i < object.externalData.length; ++i) {\n                    if (typeof object.externalData[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorProto.externalData: object expected\");\n                    message.externalData[i] = $root.onnx.StringStringEntryProto.fromObject(object.externalData[i]);\n                }\n            }\n            switch (object.dataLocation) {\n            default:\n                if (typeof object.dataLocation === \"number\") {\n                    message.dataLocation = object.dataLocation;\n                    break;\n                }\n                break;\n            case \"DEFAULT\":\n            case 0:\n                message.dataLocation = 0;\n                break;\n            case \"EXTERNAL\":\n            case 1:\n                message.dataLocation = 1;\n                break;\n            }\n            if (object.doubleData) {\n                if (!Array.isArray(object.doubleData))\n                    throw TypeError(\".onnx.TensorProto.doubleData: array expected\");\n                message.doubleData = [];\n                for (var i = 0; i < object.doubleData.length; ++i)\n                    message.doubleData[i] = Number(object.doubleData[i]);\n            }\n            if (object.uint64Data) {\n                if (!Array.isArray(object.uint64Data))\n                    throw TypeError(\".onnx.TensorProto.uint64Data: array expected\");\n                message.uint64Data = [];\n                for (var i = 0; i < object.uint64Data.length; ++i)\n                    if ($util.Long)\n                        (message.uint64Data[i] = $util.Long.fromValue(object.uint64Data[i])).unsigned = true;\n                    else if (typeof object.uint64Data[i] === \"string\")\n                        message.uint64Data[i] = parseInt(object.uint64Data[i], 10);\n                    else if (typeof object.uint64Data[i] === \"number\")\n                        message.uint64Data[i] = object.uint64Data[i];\n                    else if (typeof object.uint64Data[i] === \"object\")\n                        message.uint64Data[i] = new $util.LongBits(object.uint64Data[i].low >>> 0, object.uint64Data[i].high >>> 0).toNumber(true);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.TensorProto} message TensorProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.dims = [];\n                object.floatData = [];\n                object.int32Data = [];\n                object.stringData = [];\n                object.int64Data = [];\n                object.doubleData = [];\n                object.uint64Data = [];\n                object.externalData = [];\n            }\n            if (options.defaults) {\n                object.dataType = 0;\n                object.segment = null;\n                object.name = \"\";\n                if (options.bytes === String)\n                    object.rawData = \"\";\n                else {\n                    object.rawData = [];\n                    if (options.bytes !== Array)\n                        object.rawData = $util.newBuffer(object.rawData);\n                }\n                object.docString = \"\";\n                object.dataLocation = options.enums === String ? \"DEFAULT\" : 0;\n            }\n            if (message.dims && message.dims.length) {\n                object.dims = [];\n                for (var j = 0; j < message.dims.length; ++j)\n                    if (typeof message.dims[j] === \"number\")\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n                    else\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                object.dataType = message.dataType;\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                object.segment = $root.onnx.TensorProto.Segment.toObject(message.segment, options);\n            if (message.floatData && message.floatData.length) {\n                object.floatData = [];\n                for (var j = 0; j < message.floatData.length; ++j)\n                    object.floatData[j] = options.json && !isFinite(message.floatData[j]) ? String(message.floatData[j]) : message.floatData[j];\n            }\n            if (message.int32Data && message.int32Data.length) {\n                object.int32Data = [];\n                for (var j = 0; j < message.int32Data.length; ++j)\n                    object.int32Data[j] = message.int32Data[j];\n            }\n            if (message.stringData && message.stringData.length) {\n                object.stringData = [];\n                for (var j = 0; j < message.stringData.length; ++j)\n                    object.stringData[j] = options.bytes === String ? $util.base64.encode(message.stringData[j], 0, message.stringData[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.stringData[j]) : message.stringData[j];\n            }\n            if (message.int64Data && message.int64Data.length) {\n                object.int64Data = [];\n                for (var j = 0; j < message.int64Data.length; ++j)\n                    if (typeof message.int64Data[j] === \"number\")\n                        object.int64Data[j] = options.longs === String ? String(message.int64Data[j]) : message.int64Data[j];\n                    else\n                        object.int64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.int64Data[j]) : options.longs === Number ? new $util.LongBits(message.int64Data[j].low >>> 0, message.int64Data[j].high >>> 0).toNumber() : message.int64Data[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                object.rawData = options.bytes === String ? $util.base64.encode(message.rawData, 0, message.rawData.length) : options.bytes === Array ? Array.prototype.slice.call(message.rawData) : message.rawData;\n            if (message.doubleData && message.doubleData.length) {\n                object.doubleData = [];\n                for (var j = 0; j < message.doubleData.length; ++j)\n                    object.doubleData[j] = options.json && !isFinite(message.doubleData[j]) ? String(message.doubleData[j]) : message.doubleData[j];\n            }\n            if (message.uint64Data && message.uint64Data.length) {\n                object.uint64Data = [];\n                for (var j = 0; j < message.uint64Data.length; ++j)\n                    if (typeof message.uint64Data[j] === \"number\")\n                        object.uint64Data[j] = options.longs === String ? String(message.uint64Data[j]) : message.uint64Data[j];\n                    else\n                        object.uint64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.uint64Data[j]) : options.longs === Number ? new $util.LongBits(message.uint64Data[j].low >>> 0, message.uint64Data[j].high >>> 0).toNumber(true) : message.uint64Data[j];\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.externalData && message.externalData.length) {\n                object.externalData = [];\n                for (var j = 0; j < message.externalData.length; ++j)\n                    object.externalData[j] = $root.onnx.StringStringEntryProto.toObject(message.externalData[j], options);\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                object.dataLocation = options.enums === String ? $root.onnx.TensorProto.DataLocation[message.dataLocation] === undefined ? message.dataLocation : $root.onnx.TensorProto.DataLocation[message.dataLocation] : message.dataLocation;\n            return object;\n        };\n\n        /**\n         * Converts this TensorProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TensorProto\n         * @function getTypeUrl\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TensorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.TensorProto\";\n        };\n\n        /**\n         * DataType enum.\n         * @name onnx.TensorProto.DataType\n         * @enum {number}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} UINT8=2 UINT8 value\n         * @property {number} INT8=3 INT8 value\n         * @property {number} UINT16=4 UINT16 value\n         * @property {number} INT16=5 INT16 value\n         * @property {number} INT32=6 INT32 value\n         * @property {number} INT64=7 INT64 value\n         * @property {number} STRING=8 STRING value\n         * @property {number} BOOL=9 BOOL value\n         * @property {number} FLOAT16=10 FLOAT16 value\n         * @property {number} DOUBLE=11 DOUBLE value\n         * @property {number} UINT32=12 UINT32 value\n         * @property {number} UINT64=13 UINT64 value\n         * @property {number} COMPLEX64=14 COMPLEX64 value\n         * @property {number} COMPLEX128=15 COMPLEX128 value\n         * @property {number} BFLOAT16=16 BFLOAT16 value\n         * @property {number} FLOAT8E4M3FN=17 FLOAT8E4M3FN value\n         * @property {number} FLOAT8E4M3FNUZ=18 FLOAT8E4M3FNUZ value\n         * @property {number} FLOAT8E5M2=19 FLOAT8E5M2 value\n         * @property {number} FLOAT8E5M2FNUZ=20 FLOAT8E5M2FNUZ value\n         */\n        TensorProto.DataType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"UINT8\"] = 2;\n            values[valuesById[3] = \"INT8\"] = 3;\n            values[valuesById[4] = \"UINT16\"] = 4;\n            values[valuesById[5] = \"INT16\"] = 5;\n            values[valuesById[6] = \"INT32\"] = 6;\n            values[valuesById[7] = \"INT64\"] = 7;\n            values[valuesById[8] = \"STRING\"] = 8;\n            values[valuesById[9] = \"BOOL\"] = 9;\n            values[valuesById[10] = \"FLOAT16\"] = 10;\n            values[valuesById[11] = \"DOUBLE\"] = 11;\n            values[valuesById[12] = \"UINT32\"] = 12;\n            values[valuesById[13] = \"UINT64\"] = 13;\n            values[valuesById[14] = \"COMPLEX64\"] = 14;\n            values[valuesById[15] = \"COMPLEX128\"] = 15;\n            values[valuesById[16] = \"BFLOAT16\"] = 16;\n            values[valuesById[17] = \"FLOAT8E4M3FN\"] = 17;\n            values[valuesById[18] = \"FLOAT8E4M3FNUZ\"] = 18;\n            values[valuesById[19] = \"FLOAT8E5M2\"] = 19;\n            values[valuesById[20] = \"FLOAT8E5M2FNUZ\"] = 20;\n            return values;\n        })();\n\n        TensorProto.Segment = (function() {\n\n            /**\n             * Properties of a Segment.\n             * @memberof onnx.TensorProto\n             * @interface ISegment\n             * @property {number|Long|null} [begin] Segment begin\n             * @property {number|Long|null} [end] Segment end\n             */\n\n            /**\n             * Constructs a new Segment.\n             * @memberof onnx.TensorProto\n             * @classdesc Represents a Segment.\n             * @implements ISegment\n             * @constructor\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             */\n            function Segment(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Segment begin.\n             * @member {number|Long} begin\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.begin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Segment end.\n             * @member {number|Long} end\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.end = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Creates a new Segment instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             * @returns {onnx.TensorProto.Segment} Segment instance\n             */\n            Segment.create = function create(properties) {\n                return new Segment(properties);\n            };\n\n            /**\n             * Encodes the specified Segment message. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.begin != null && Object.hasOwnProperty.call(message, \"begin\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.begin);\n                if (message.end != null && Object.hasOwnProperty.call(message, \"end\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.end);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Segment message, length delimited. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto.Segment();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.begin = reader.int64();\n                            break;\n                        }\n                    case 2: {\n                            message.end = reader.int64();\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Segment message.\n             * @function verify\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Segment.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (!$util.isInteger(message.begin) && !(message.begin && $util.isInteger(message.begin.low) && $util.isInteger(message.begin.high)))\n                        return \"begin: integer|Long expected\";\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (!$util.isInteger(message.end) && !(message.end && $util.isInteger(message.end.low) && $util.isInteger(message.end.high)))\n                        return \"end: integer|Long expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Segment message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorProto.Segment} Segment\n             */\n            Segment.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorProto.Segment)\n                    return object;\n                var message = new $root.onnx.TensorProto.Segment();\n                if (object.begin != null)\n                    if ($util.Long)\n                        (message.begin = $util.Long.fromValue(object.begin)).unsigned = false;\n                    else if (typeof object.begin === \"string\")\n                        message.begin = parseInt(object.begin, 10);\n                    else if (typeof object.begin === \"number\")\n                        message.begin = object.begin;\n                    else if (typeof object.begin === \"object\")\n                        message.begin = new $util.LongBits(object.begin.low >>> 0, object.begin.high >>> 0).toNumber();\n                if (object.end != null)\n                    if ($util.Long)\n                        (message.end = $util.Long.fromValue(object.end)).unsigned = false;\n                    else if (typeof object.end === \"string\")\n                        message.end = parseInt(object.end, 10);\n                    else if (typeof object.end === \"number\")\n                        message.end = object.end;\n                    else if (typeof object.end === \"object\")\n                        message.end = new $util.LongBits(object.end.low >>> 0, object.end.high >>> 0).toNumber();\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Segment message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.Segment} message Segment\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Segment.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.begin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.begin = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.end = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.end = options.longs === String ? \"0\" : 0;\n                }\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (typeof message.begin === \"number\")\n                        object.begin = options.longs === String ? String(message.begin) : message.begin;\n                    else\n                        object.begin = options.longs === String ? $util.Long.prototype.toString.call(message.begin) : options.longs === Number ? new $util.LongBits(message.begin.low >>> 0, message.begin.high >>> 0).toNumber() : message.begin;\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (typeof message.end === \"number\")\n                        object.end = options.longs === String ? String(message.end) : message.end;\n                    else\n                        object.end = options.longs === String ? $util.Long.prototype.toString.call(message.end) : options.longs === Number ? new $util.LongBits(message.end.low >>> 0, message.end.high >>> 0).toNumber() : message.end;\n                return object;\n            };\n\n            /**\n             * Converts this Segment to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Segment.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Segment\n             * @function getTypeUrl\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Segment.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TensorProto.Segment\";\n            };\n\n            return Segment;\n        })();\n\n        /**\n         * DataLocation enum.\n         * @name onnx.TensorProto.DataLocation\n         * @enum {number}\n         * @property {number} DEFAULT=0 DEFAULT value\n         * @property {number} EXTERNAL=1 EXTERNAL value\n         */\n        TensorProto.DataLocation = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"DEFAULT\"] = 0;\n            values[valuesById[1] = \"EXTERNAL\"] = 1;\n            return values;\n        })();\n\n        return TensorProto;\n    })();\n\n    onnx.SparseTensorProto = (function() {\n\n        /**\n         * Properties of a SparseTensorProto.\n         * @memberof onnx\n         * @interface ISparseTensorProto\n         * @property {onnx.ITensorProto|null} [values] SparseTensorProto values\n         * @property {onnx.ITensorProto|null} [indices] SparseTensorProto indices\n         * @property {Array.<number|Long>|null} [dims] SparseTensorProto dims\n         */\n\n        /**\n         * Constructs a new SparseTensorProto.\n         * @memberof onnx\n         * @classdesc Represents a SparseTensorProto.\n         * @implements ISparseTensorProto\n         * @constructor\n         * @param {onnx.ISparseTensorProto=} [properties] Properties to set\n         */\n        function SparseTensorProto(properties) {\n            this.dims = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * SparseTensorProto values.\n         * @member {onnx.ITensorProto|null|undefined} values\n         * @memberof onnx.SparseTensorProto\n         * @instance\n         */\n        SparseTensorProto.prototype.values = null;\n\n        /**\n         * SparseTensorProto indices.\n         * @member {onnx.ITensorProto|null|undefined} indices\n         * @memberof onnx.SparseTensorProto\n         * @instance\n         */\n        SparseTensorProto.prototype.indices = null;\n\n        /**\n         * SparseTensorProto dims.\n         * @member {Array.<number|Long>} dims\n         * @memberof onnx.SparseTensorProto\n         * @instance\n         */\n        SparseTensorProto.prototype.dims = $util.emptyArray;\n\n        /**\n         * Creates a new SparseTensorProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {onnx.ISparseTensorProto=} [properties] Properties to set\n         * @returns {onnx.SparseTensorProto} SparseTensorProto instance\n         */\n        SparseTensorProto.create = function create(properties) {\n            return new SparseTensorProto(properties);\n        };\n\n        /**\n         * Encodes the specified SparseTensorProto message. Does not implicitly {@link onnx.SparseTensorProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {onnx.ISparseTensorProto} message SparseTensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SparseTensorProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.values != null && Object.hasOwnProperty.call(message, \"values\"))\n                $root.onnx.TensorProto.encode(message.values, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.indices != null && Object.hasOwnProperty.call(message, \"indices\"))\n                $root.onnx.TensorProto.encode(message.indices, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.dims != null && message.dims.length) {\n                writer.uint32(/* id 3, wireType 2 =*/26).fork();\n                for (var i = 0; i < message.dims.length; ++i)\n                    writer.int64(message.dims[i]);\n                writer.ldelim();\n            }\n            return writer;\n        };\n\n        /**\n         * Encodes the specified SparseTensorProto message, length delimited. Does not implicitly {@link onnx.SparseTensorProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {onnx.ISparseTensorProto} message SparseTensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SparseTensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a SparseTensorProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.SparseTensorProto} SparseTensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SparseTensorProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.SparseTensorProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.values = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 2: {\n                        message.indices = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 3: {\n                        if (!(message.dims && message.dims.length))\n                            message.dims = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.dims.push(reader.int64());\n                        } else\n                            message.dims.push(reader.int64());\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a SparseTensorProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.SparseTensorProto} SparseTensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SparseTensorProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a SparseTensorProto message.\n         * @function verify\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        SparseTensorProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.values != null && message.hasOwnProperty(\"values\")) {\n                var error = $root.onnx.TensorProto.verify(message.values);\n                if (error)\n                    return \"values.\" + error;\n            }\n            if (message.indices != null && message.hasOwnProperty(\"indices\")) {\n                var error = $root.onnx.TensorProto.verify(message.indices);\n                if (error)\n                    return \"indices.\" + error;\n            }\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                if (!Array.isArray(message.dims))\n                    return \"dims: array expected\";\n                for (var i = 0; i < message.dims.length; ++i)\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\n                        return \"dims: integer|Long[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a SparseTensorProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.SparseTensorProto} SparseTensorProto\n         */\n        SparseTensorProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.SparseTensorProto)\n                return object;\n            var message = new $root.onnx.SparseTensorProto();\n            if (object.values != null) {\n                if (typeof object.values !== \"object\")\n                    throw TypeError(\".onnx.SparseTensorProto.values: object expected\");\n                message.values = $root.onnx.TensorProto.fromObject(object.values);\n            }\n            if (object.indices != null) {\n                if (typeof object.indices !== \"object\")\n                    throw TypeError(\".onnx.SparseTensorProto.indices: object expected\");\n                message.indices = $root.onnx.TensorProto.fromObject(object.indices);\n            }\n            if (object.dims) {\n                if (!Array.isArray(object.dims))\n                    throw TypeError(\".onnx.SparseTensorProto.dims: array expected\");\n                message.dims = [];\n                for (var i = 0; i < object.dims.length; ++i)\n                    if ($util.Long)\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n                    else if (typeof object.dims[i] === \"string\")\n                        message.dims[i] = parseInt(object.dims[i], 10);\n                    else if (typeof object.dims[i] === \"number\")\n                        message.dims[i] = object.dims[i];\n                    else if (typeof object.dims[i] === \"object\")\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a SparseTensorProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {onnx.SparseTensorProto} message SparseTensorProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        SparseTensorProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.dims = [];\n            if (options.defaults) {\n                object.values = null;\n                object.indices = null;\n            }\n            if (message.values != null && message.hasOwnProperty(\"values\"))\n                object.values = $root.onnx.TensorProto.toObject(message.values, options);\n            if (message.indices != null && message.hasOwnProperty(\"indices\"))\n                object.indices = $root.onnx.TensorProto.toObject(message.indices, options);\n            if (message.dims && message.dims.length) {\n                object.dims = [];\n                for (var j = 0; j < message.dims.length; ++j)\n                    if (typeof message.dims[j] === \"number\")\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n                    else\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\n            }\n            return object;\n        };\n\n        /**\n         * Converts this SparseTensorProto to JSON.\n         * @function toJSON\n         * @memberof onnx.SparseTensorProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        SparseTensorProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for SparseTensorProto\n         * @function getTypeUrl\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        SparseTensorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.SparseTensorProto\";\n        };\n\n        return SparseTensorProto;\n    })();\n\n    onnx.TensorShapeProto = (function() {\n\n        /**\n         * Properties of a TensorShapeProto.\n         * @memberof onnx\n         * @interface ITensorShapeProto\n         * @property {Array.<onnx.TensorShapeProto.IDimension>|null} [dim] TensorShapeProto dim\n         */\n\n        /**\n         * Constructs a new TensorShapeProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorShapeProto.\n         * @implements ITensorShapeProto\n         * @constructor\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         */\n        function TensorShapeProto(properties) {\n            this.dim = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorShapeProto dim.\n         * @member {Array.<onnx.TensorShapeProto.IDimension>} dim\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         */\n        TensorShapeProto.prototype.dim = $util.emptyArray;\n\n        /**\n         * Creates a new TensorShapeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         * @returns {onnx.TensorShapeProto} TensorShapeProto instance\n         */\n        TensorShapeProto.create = function create(properties) {\n            return new TensorShapeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dim != null && message.dim.length)\n                for (var i = 0; i < message.dim.length; ++i)\n                    $root.onnx.TensorShapeProto.Dimension.encode(message.dim[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        if (!(message.dim && message.dim.length))\n                            message.dim = [];\n                        message.dim.push($root.onnx.TensorShapeProto.Dimension.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorShapeProto message.\n         * @function verify\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorShapeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dim != null && message.hasOwnProperty(\"dim\")) {\n                if (!Array.isArray(message.dim))\n                    return \"dim: array expected\";\n                for (var i = 0; i < message.dim.length; ++i) {\n                    var error = $root.onnx.TensorShapeProto.Dimension.verify(message.dim[i]);\n                    if (error)\n                        return \"dim.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorShapeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         */\n        TensorShapeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorShapeProto)\n                return object;\n            var message = new $root.onnx.TensorShapeProto();\n            if (object.dim) {\n                if (!Array.isArray(object.dim))\n                    throw TypeError(\".onnx.TensorShapeProto.dim: array expected\");\n                message.dim = [];\n                for (var i = 0; i < object.dim.length; ++i) {\n                    if (typeof object.dim[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorShapeProto.dim: object expected\");\n                    message.dim[i] = $root.onnx.TensorShapeProto.Dimension.fromObject(object.dim[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorShapeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.TensorShapeProto} message TensorShapeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorShapeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.dim = [];\n            if (message.dim && message.dim.length) {\n                object.dim = [];\n                for (var j = 0; j < message.dim.length; ++j)\n                    object.dim[j] = $root.onnx.TensorShapeProto.Dimension.toObject(message.dim[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorShapeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorShapeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TensorShapeProto\n         * @function getTypeUrl\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TensorShapeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.TensorShapeProto\";\n        };\n\n        TensorShapeProto.Dimension = (function() {\n\n            /**\n             * Properties of a Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @interface IDimension\n             * @property {number|Long|null} [dimValue] Dimension dimValue\n             * @property {string|null} [dimParam] Dimension dimParam\n             * @property {string|null} [denotation] Dimension denotation\n             */\n\n            /**\n             * Constructs a new Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @classdesc Represents a Dimension.\n             * @implements IDimension\n             * @constructor\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             */\n            function Dimension(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Dimension dimValue.\n             * @member {number|Long|null|undefined} dimValue\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimValue = null;\n\n            /**\n             * Dimension dimParam.\n             * @member {string|null|undefined} dimParam\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimParam = null;\n\n            /**\n             * Dimension denotation.\n             * @member {string} denotation\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.denotation = \"\";\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * Dimension value.\n             * @member {\"dimValue\"|\"dimParam\"|undefined} value\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Object.defineProperty(Dimension.prototype, \"value\", {\n                get: $util.oneOfGetter($oneOfFields = [\"dimValue\", \"dimParam\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new Dimension instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension instance\n             */\n            Dimension.create = function create(properties) {\n                return new Dimension(properties);\n            };\n\n            /**\n             * Encodes the specified Dimension message. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.dimValue != null && Object.hasOwnProperty.call(message, \"dimValue\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.dimValue);\n                if (message.dimParam != null && Object.hasOwnProperty.call(message, \"dimParam\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.dimParam);\n                if (message.denotation != null && Object.hasOwnProperty.call(message, \"denotation\"))\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.denotation);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Dimension message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto.Dimension();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.dimValue = reader.int64();\n                            break;\n                        }\n                    case 2: {\n                            message.dimParam = reader.string();\n                            break;\n                        }\n                    case 3: {\n                            message.denotation = reader.string();\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Dimension message.\n             * @function verify\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Dimension.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    properties.value = 1;\n                    if (!$util.isInteger(message.dimValue) && !(message.dimValue && $util.isInteger(message.dimValue.low) && $util.isInteger(message.dimValue.high)))\n                        return \"dimValue: integer|Long expected\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    if (properties.value === 1)\n                        return \"value: multiple values\";\n                    properties.value = 1;\n                    if (!$util.isString(message.dimParam))\n                        return \"dimParam: string expected\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    if (!$util.isString(message.denotation))\n                        return \"denotation: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Dimension message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             */\n            Dimension.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorShapeProto.Dimension)\n                    return object;\n                var message = new $root.onnx.TensorShapeProto.Dimension();\n                if (object.dimValue != null)\n                    if ($util.Long)\n                        (message.dimValue = $util.Long.fromValue(object.dimValue)).unsigned = false;\n                    else if (typeof object.dimValue === \"string\")\n                        message.dimValue = parseInt(object.dimValue, 10);\n                    else if (typeof object.dimValue === \"number\")\n                        message.dimValue = object.dimValue;\n                    else if (typeof object.dimValue === \"object\")\n                        message.dimValue = new $util.LongBits(object.dimValue.low >>> 0, object.dimValue.high >>> 0).toNumber();\n                if (object.dimParam != null)\n                    message.dimParam = String(object.dimParam);\n                if (object.denotation != null)\n                    message.denotation = String(object.denotation);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Dimension message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.Dimension} message Dimension\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Dimension.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.denotation = \"\";\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    if (typeof message.dimValue === \"number\")\n                        object.dimValue = options.longs === String ? String(message.dimValue) : message.dimValue;\n                    else\n                        object.dimValue = options.longs === String ? $util.Long.prototype.toString.call(message.dimValue) : options.longs === Number ? new $util.LongBits(message.dimValue.low >>> 0, message.dimValue.high >>> 0).toNumber() : message.dimValue;\n                    if (options.oneofs)\n                        object.value = \"dimValue\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    object.dimParam = message.dimParam;\n                    if (options.oneofs)\n                        object.value = \"dimParam\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    object.denotation = message.denotation;\n                return object;\n            };\n\n            /**\n             * Converts this Dimension to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Dimension.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Dimension\n             * @function getTypeUrl\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Dimension.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TensorShapeProto.Dimension\";\n            };\n\n            return Dimension;\n        })();\n\n        return TensorShapeProto;\n    })();\n\n    onnx.TypeProto = (function() {\n\n        /**\n         * Properties of a TypeProto.\n         * @memberof onnx\n         * @interface ITypeProto\n         * @property {onnx.TypeProto.ITensor|null} [tensorType] TypeProto tensorType\n         * @property {onnx.TypeProto.ISequence|null} [sequenceType] TypeProto sequenceType\n         * @property {onnx.TypeProto.IMap|null} [mapType] TypeProto mapType\n         * @property {onnx.TypeProto.IOptional|null} [optionalType] TypeProto optionalType\n         * @property {onnx.TypeProto.ISparseTensor|null} [sparseTensorType] TypeProto sparseTensorType\n         * @property {string|null} [denotation] TypeProto denotation\n         */\n\n        /**\n         * Constructs a new TypeProto.\n         * @memberof onnx\n         * @classdesc Represents a TypeProto.\n         * @implements ITypeProto\n         * @constructor\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         */\n        function TypeProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TypeProto tensorType.\n         * @member {onnx.TypeProto.ITensor|null|undefined} tensorType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.tensorType = null;\n\n        /**\n         * TypeProto sequenceType.\n         * @member {onnx.TypeProto.ISequence|null|undefined} sequenceType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.sequenceType = null;\n\n        /**\n         * TypeProto mapType.\n         * @member {onnx.TypeProto.IMap|null|undefined} mapType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.mapType = null;\n\n        /**\n         * TypeProto optionalType.\n         * @member {onnx.TypeProto.IOptional|null|undefined} optionalType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.optionalType = null;\n\n        /**\n         * TypeProto sparseTensorType.\n         * @member {onnx.TypeProto.ISparseTensor|null|undefined} sparseTensorType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.sparseTensorType = null;\n\n        /**\n         * TypeProto denotation.\n         * @member {string} denotation\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.denotation = \"\";\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * TypeProto value.\n         * @member {\"tensorType\"|\"sequenceType\"|\"mapType\"|\"optionalType\"|\"sparseTensorType\"|undefined} value\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        Object.defineProperty(TypeProto.prototype, \"value\", {\n            get: $util.oneOfGetter($oneOfFields = [\"tensorType\", \"sequenceType\", \"mapType\", \"optionalType\", \"sparseTensorType\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new TypeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         * @returns {onnx.TypeProto} TypeProto instance\n         */\n        TypeProto.create = function create(properties) {\n            return new TypeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TypeProto message. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorType != null && Object.hasOwnProperty.call(message, \"tensorType\"))\n                $root.onnx.TypeProto.Tensor.encode(message.tensorType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.sequenceType != null && Object.hasOwnProperty.call(message, \"sequenceType\"))\n                $root.onnx.TypeProto.Sequence.encode(message.sequenceType, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            if (message.mapType != null && Object.hasOwnProperty.call(message, \"mapType\"))\n                $root.onnx.TypeProto.Map.encode(message.mapType, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.denotation != null && Object.hasOwnProperty.call(message, \"denotation\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.denotation);\n            if (message.sparseTensorType != null && Object.hasOwnProperty.call(message, \"sparseTensorType\"))\n                $root.onnx.TypeProto.SparseTensor.encode(message.sparseTensorType, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.optionalType != null && Object.hasOwnProperty.call(message, \"optionalType\"))\n                $root.onnx.TypeProto.Optional.encode(message.optionalType, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TypeProto message, length delimited. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.tensorType = $root.onnx.TypeProto.Tensor.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 4: {\n                        message.sequenceType = $root.onnx.TypeProto.Sequence.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 5: {\n                        message.mapType = $root.onnx.TypeProto.Map.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 9: {\n                        message.optionalType = $root.onnx.TypeProto.Optional.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 8: {\n                        message.sparseTensorType = $root.onnx.TypeProto.SparseTensor.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 6: {\n                        message.denotation = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TypeProto message.\n         * @function verify\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TypeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Tensor.verify(message.tensorType);\n                    if (error)\n                        return \"tensorType.\" + error;\n                }\n            }\n            if (message.sequenceType != null && message.hasOwnProperty(\"sequenceType\")) {\n                if (properties.value === 1)\n                    return \"value: multiple values\";\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Sequence.verify(message.sequenceType);\n                    if (error)\n                        return \"sequenceType.\" + error;\n                }\n            }\n            if (message.mapType != null && message.hasOwnProperty(\"mapType\")) {\n                if (properties.value === 1)\n                    return \"value: multiple values\";\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Map.verify(message.mapType);\n                    if (error)\n                        return \"mapType.\" + error;\n                }\n            }\n            if (message.optionalType != null && message.hasOwnProperty(\"optionalType\")) {\n                if (properties.value === 1)\n                    return \"value: multiple values\";\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Optional.verify(message.optionalType);\n                    if (error)\n                        return \"optionalType.\" + error;\n                }\n            }\n            if (message.sparseTensorType != null && message.hasOwnProperty(\"sparseTensorType\")) {\n                if (properties.value === 1)\n                    return \"value: multiple values\";\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.SparseTensor.verify(message.sparseTensorType);\n                    if (error)\n                        return \"sparseTensorType.\" + error;\n                }\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                if (!$util.isString(message.denotation))\n                    return \"denotation: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a TypeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TypeProto} TypeProto\n         */\n        TypeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TypeProto)\n                return object;\n            var message = new $root.onnx.TypeProto();\n            if (object.tensorType != null) {\n                if (typeof object.tensorType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.tensorType: object expected\");\n                message.tensorType = $root.onnx.TypeProto.Tensor.fromObject(object.tensorType);\n            }\n            if (object.sequenceType != null) {\n                if (typeof object.sequenceType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.sequenceType: object expected\");\n                message.sequenceType = $root.onnx.TypeProto.Sequence.fromObject(object.sequenceType);\n            }\n            if (object.mapType != null) {\n                if (typeof object.mapType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.mapType: object expected\");\n                message.mapType = $root.onnx.TypeProto.Map.fromObject(object.mapType);\n            }\n            if (object.optionalType != null) {\n                if (typeof object.optionalType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.optionalType: object expected\");\n                message.optionalType = $root.onnx.TypeProto.Optional.fromObject(object.optionalType);\n            }\n            if (object.sparseTensorType != null) {\n                if (typeof object.sparseTensorType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.sparseTensorType: object expected\");\n                message.sparseTensorType = $root.onnx.TypeProto.SparseTensor.fromObject(object.sparseTensorType);\n            }\n            if (object.denotation != null)\n                message.denotation = String(object.denotation);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TypeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.TypeProto} message TypeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TypeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.denotation = \"\";\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                object.tensorType = $root.onnx.TypeProto.Tensor.toObject(message.tensorType, options);\n                if (options.oneofs)\n                    object.value = \"tensorType\";\n            }\n            if (message.sequenceType != null && message.hasOwnProperty(\"sequenceType\")) {\n                object.sequenceType = $root.onnx.TypeProto.Sequence.toObject(message.sequenceType, options);\n                if (options.oneofs)\n                    object.value = \"sequenceType\";\n            }\n            if (message.mapType != null && message.hasOwnProperty(\"mapType\")) {\n                object.mapType = $root.onnx.TypeProto.Map.toObject(message.mapType, options);\n                if (options.oneofs)\n                    object.value = \"mapType\";\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                object.denotation = message.denotation;\n            if (message.sparseTensorType != null && message.hasOwnProperty(\"sparseTensorType\")) {\n                object.sparseTensorType = $root.onnx.TypeProto.SparseTensor.toObject(message.sparseTensorType, options);\n                if (options.oneofs)\n                    object.value = \"sparseTensorType\";\n            }\n            if (message.optionalType != null && message.hasOwnProperty(\"optionalType\")) {\n                object.optionalType = $root.onnx.TypeProto.Optional.toObject(message.optionalType, options);\n                if (options.oneofs)\n                    object.value = \"optionalType\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TypeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TypeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TypeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TypeProto\n         * @function getTypeUrl\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TypeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.TypeProto\";\n        };\n\n        TypeProto.Tensor = (function() {\n\n            /**\n             * Properties of a Tensor.\n             * @memberof onnx.TypeProto\n             * @interface ITensor\n             * @property {number|null} [elemType] Tensor elemType\n             * @property {onnx.ITensorShapeProto|null} [shape] Tensor shape\n             */\n\n            /**\n             * Constructs a new Tensor.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Tensor.\n             * @implements ITensor\n             * @constructor\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             */\n            function Tensor(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Tensor elemType.\n             * @member {number} elemType\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.elemType = 0;\n\n            /**\n             * Tensor shape.\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.shape = null;\n\n            /**\n             * Creates a new Tensor instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Tensor} Tensor instance\n             */\n            Tensor.create = function create(properties) {\n                return new Tensor(properties);\n            };\n\n            /**\n             * Encodes the specified Tensor message. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\n                if (message.shape != null && Object.hasOwnProperty.call(message, \"shape\"))\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Tensor message, length delimited. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Tensor();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.elemType = reader.int32();\n                            break;\n                        }\n                    case 2: {\n                            message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Tensor message.\n             * @function verify\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Tensor.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    if (!$util.isInteger(message.elemType))\n                        return \"elemType: integer expected\";\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\n                    if (error)\n                        return \"shape.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Tensor message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             */\n            Tensor.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Tensor)\n                    return object;\n                var message = new $root.onnx.TypeProto.Tensor();\n                if (object.elemType != null)\n                    message.elemType = object.elemType | 0;\n                if (object.shape != null) {\n                    if (typeof object.shape !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Tensor.shape: object expected\");\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Tensor message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.Tensor} message Tensor\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Tensor.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.elemType = 0;\n                    object.shape = null;\n                }\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = message.elemType;\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n                return object;\n            };\n\n            /**\n             * Converts this Tensor to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Tensor.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Tensor\n             * @function getTypeUrl\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Tensor.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TypeProto.Tensor\";\n            };\n\n            return Tensor;\n        })();\n\n        TypeProto.Sequence = (function() {\n\n            /**\n             * Properties of a Sequence.\n             * @memberof onnx.TypeProto\n             * @interface ISequence\n             * @property {onnx.ITypeProto|null} [elemType] Sequence elemType\n             */\n\n            /**\n             * Constructs a new Sequence.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Sequence.\n             * @implements ISequence\n             * @constructor\n             * @param {onnx.TypeProto.ISequence=} [properties] Properties to set\n             */\n            function Sequence(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Sequence elemType.\n             * @member {onnx.ITypeProto|null|undefined} elemType\n             * @memberof onnx.TypeProto.Sequence\n             * @instance\n             */\n            Sequence.prototype.elemType = null;\n\n            /**\n             * Creates a new Sequence instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {onnx.TypeProto.ISequence=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Sequence} Sequence instance\n             */\n            Sequence.create = function create(properties) {\n                return new Sequence(properties);\n            };\n\n            /**\n             * Encodes the specified Sequence message. Does not implicitly {@link onnx.TypeProto.Sequence.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {onnx.TypeProto.ISequence} message Sequence message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Sequence.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\n                    $root.onnx.TypeProto.encode(message.elemType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Sequence message, length delimited. Does not implicitly {@link onnx.TypeProto.Sequence.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {onnx.TypeProto.ISequence} message Sequence message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Sequence.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Sequence message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Sequence} Sequence\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Sequence.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Sequence();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.elemType = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Sequence message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Sequence} Sequence\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Sequence.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Sequence message.\n             * @function verify\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Sequence.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\")) {\n                    var error = $root.onnx.TypeProto.verify(message.elemType);\n                    if (error)\n                        return \"elemType.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Sequence message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Sequence} Sequence\n             */\n            Sequence.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Sequence)\n                    return object;\n                var message = new $root.onnx.TypeProto.Sequence();\n                if (object.elemType != null) {\n                    if (typeof object.elemType !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Sequence.elemType: object expected\");\n                    message.elemType = $root.onnx.TypeProto.fromObject(object.elemType);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Sequence message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {onnx.TypeProto.Sequence} message Sequence\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Sequence.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.elemType = null;\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = $root.onnx.TypeProto.toObject(message.elemType, options);\n                return object;\n            };\n\n            /**\n             * Converts this Sequence to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Sequence\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Sequence.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Sequence\n             * @function getTypeUrl\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Sequence.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TypeProto.Sequence\";\n            };\n\n            return Sequence;\n        })();\n\n        TypeProto.Map = (function() {\n\n            /**\n             * Properties of a Map.\n             * @memberof onnx.TypeProto\n             * @interface IMap\n             * @property {number|null} [keyType] Map keyType\n             * @property {onnx.ITypeProto|null} [valueType] Map valueType\n             */\n\n            /**\n             * Constructs a new Map.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Map.\n             * @implements IMap\n             * @constructor\n             * @param {onnx.TypeProto.IMap=} [properties] Properties to set\n             */\n            function Map(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Map keyType.\n             * @member {number} keyType\n             * @memberof onnx.TypeProto.Map\n             * @instance\n             */\n            Map.prototype.keyType = 0;\n\n            /**\n             * Map valueType.\n             * @member {onnx.ITypeProto|null|undefined} valueType\n             * @memberof onnx.TypeProto.Map\n             * @instance\n             */\n            Map.prototype.valueType = null;\n\n            /**\n             * Creates a new Map instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {onnx.TypeProto.IMap=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Map} Map instance\n             */\n            Map.create = function create(properties) {\n                return new Map(properties);\n            };\n\n            /**\n             * Encodes the specified Map message. Does not implicitly {@link onnx.TypeProto.Map.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {onnx.TypeProto.IMap} message Map message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Map.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.keyType != null && Object.hasOwnProperty.call(message, \"keyType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.keyType);\n                if (message.valueType != null && Object.hasOwnProperty.call(message, \"valueType\"))\n                    $root.onnx.TypeProto.encode(message.valueType, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Map message, length delimited. Does not implicitly {@link onnx.TypeProto.Map.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {onnx.TypeProto.IMap} message Map message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Map.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Map message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Map} Map\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Map.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Map();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.keyType = reader.int32();\n                            break;\n                        }\n                    case 2: {\n                            message.valueType = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Map message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Map} Map\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Map.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Map message.\n             * @function verify\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Map.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.keyType != null && message.hasOwnProperty(\"keyType\"))\n                    if (!$util.isInteger(message.keyType))\n                        return \"keyType: integer expected\";\n                if (message.valueType != null && message.hasOwnProperty(\"valueType\")) {\n                    var error = $root.onnx.TypeProto.verify(message.valueType);\n                    if (error)\n                        return \"valueType.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Map message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Map} Map\n             */\n            Map.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Map)\n                    return object;\n                var message = new $root.onnx.TypeProto.Map();\n                if (object.keyType != null)\n                    message.keyType = object.keyType | 0;\n                if (object.valueType != null) {\n                    if (typeof object.valueType !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Map.valueType: object expected\");\n                    message.valueType = $root.onnx.TypeProto.fromObject(object.valueType);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Map message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {onnx.TypeProto.Map} message Map\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Map.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.keyType = 0;\n                    object.valueType = null;\n                }\n                if (message.keyType != null && message.hasOwnProperty(\"keyType\"))\n                    object.keyType = message.keyType;\n                if (message.valueType != null && message.hasOwnProperty(\"valueType\"))\n                    object.valueType = $root.onnx.TypeProto.toObject(message.valueType, options);\n                return object;\n            };\n\n            /**\n             * Converts this Map to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Map\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Map.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Map\n             * @function getTypeUrl\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Map.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TypeProto.Map\";\n            };\n\n            return Map;\n        })();\n\n        TypeProto.Optional = (function() {\n\n            /**\n             * Properties of an Optional.\n             * @memberof onnx.TypeProto\n             * @interface IOptional\n             * @property {onnx.ITypeProto|null} [elemType] Optional elemType\n             */\n\n            /**\n             * Constructs a new Optional.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents an Optional.\n             * @implements IOptional\n             * @constructor\n             * @param {onnx.TypeProto.IOptional=} [properties] Properties to set\n             */\n            function Optional(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Optional elemType.\n             * @member {onnx.ITypeProto|null|undefined} elemType\n             * @memberof onnx.TypeProto.Optional\n             * @instance\n             */\n            Optional.prototype.elemType = null;\n\n            /**\n             * Creates a new Optional instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {onnx.TypeProto.IOptional=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Optional} Optional instance\n             */\n            Optional.create = function create(properties) {\n                return new Optional(properties);\n            };\n\n            /**\n             * Encodes the specified Optional message. Does not implicitly {@link onnx.TypeProto.Optional.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {onnx.TypeProto.IOptional} message Optional message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Optional.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\n                    $root.onnx.TypeProto.encode(message.elemType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Optional message, length delimited. Does not implicitly {@link onnx.TypeProto.Optional.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {onnx.TypeProto.IOptional} message Optional message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Optional.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes an Optional message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Optional} Optional\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Optional.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Optional();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.elemType = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes an Optional message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Optional} Optional\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Optional.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies an Optional message.\n             * @function verify\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Optional.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\")) {\n                    var error = $root.onnx.TypeProto.verify(message.elemType);\n                    if (error)\n                        return \"elemType.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates an Optional message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Optional} Optional\n             */\n            Optional.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Optional)\n                    return object;\n                var message = new $root.onnx.TypeProto.Optional();\n                if (object.elemType != null) {\n                    if (typeof object.elemType !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Optional.elemType: object expected\");\n                    message.elemType = $root.onnx.TypeProto.fromObject(object.elemType);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from an Optional message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {onnx.TypeProto.Optional} message Optional\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Optional.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.elemType = null;\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = $root.onnx.TypeProto.toObject(message.elemType, options);\n                return object;\n            };\n\n            /**\n             * Converts this Optional to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Optional\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Optional.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Optional\n             * @function getTypeUrl\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Optional.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TypeProto.Optional\";\n            };\n\n            return Optional;\n        })();\n\n        TypeProto.SparseTensor = (function() {\n\n            /**\n             * Properties of a SparseTensor.\n             * @memberof onnx.TypeProto\n             * @interface ISparseTensor\n             * @property {number|null} [elemType] SparseTensor elemType\n             * @property {onnx.ITensorShapeProto|null} [shape] SparseTensor shape\n             */\n\n            /**\n             * Constructs a new SparseTensor.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a SparseTensor.\n             * @implements ISparseTensor\n             * @constructor\n             * @param {onnx.TypeProto.ISparseTensor=} [properties] Properties to set\n             */\n            function SparseTensor(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * SparseTensor elemType.\n             * @member {number} elemType\n             * @memberof onnx.TypeProto.SparseTensor\n             * @instance\n             */\n            SparseTensor.prototype.elemType = 0;\n\n            /**\n             * SparseTensor shape.\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\n             * @memberof onnx.TypeProto.SparseTensor\n             * @instance\n             */\n            SparseTensor.prototype.shape = null;\n\n            /**\n             * Creates a new SparseTensor instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {onnx.TypeProto.ISparseTensor=} [properties] Properties to set\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor instance\n             */\n            SparseTensor.create = function create(properties) {\n                return new SparseTensor(properties);\n            };\n\n            /**\n             * Encodes the specified SparseTensor message. Does not implicitly {@link onnx.TypeProto.SparseTensor.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {onnx.TypeProto.ISparseTensor} message SparseTensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            SparseTensor.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\n                if (message.shape != null && Object.hasOwnProperty.call(message, \"shape\"))\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified SparseTensor message, length delimited. Does not implicitly {@link onnx.TypeProto.SparseTensor.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {onnx.TypeProto.ISparseTensor} message SparseTensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            SparseTensor.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a SparseTensor message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            SparseTensor.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.SparseTensor();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.elemType = reader.int32();\n                            break;\n                        }\n                    case 2: {\n                            message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a SparseTensor message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            SparseTensor.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a SparseTensor message.\n             * @function verify\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            SparseTensor.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    if (!$util.isInteger(message.elemType))\n                        return \"elemType: integer expected\";\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\n                    if (error)\n                        return \"shape.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a SparseTensor message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor\n             */\n            SparseTensor.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.SparseTensor)\n                    return object;\n                var message = new $root.onnx.TypeProto.SparseTensor();\n                if (object.elemType != null)\n                    message.elemType = object.elemType | 0;\n                if (object.shape != null) {\n                    if (typeof object.shape !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.SparseTensor.shape: object expected\");\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a SparseTensor message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {onnx.TypeProto.SparseTensor} message SparseTensor\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            SparseTensor.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.elemType = 0;\n                    object.shape = null;\n                }\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = message.elemType;\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n                return object;\n            };\n\n            /**\n             * Converts this SparseTensor to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.SparseTensor\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            SparseTensor.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for SparseTensor\n             * @function getTypeUrl\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            SparseTensor.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TypeProto.SparseTensor\";\n            };\n\n            return SparseTensor;\n        })();\n\n        return TypeProto;\n    })();\n\n    onnx.OperatorSetIdProto = (function() {\n\n        /**\n         * Properties of an OperatorSetIdProto.\n         * @memberof onnx\n         * @interface IOperatorSetIdProto\n         * @property {string|null} [domain] OperatorSetIdProto domain\n         * @property {number|Long|null} [version] OperatorSetIdProto version\n         */\n\n        /**\n         * Constructs a new OperatorSetIdProto.\n         * @memberof onnx\n         * @classdesc Represents an OperatorSetIdProto.\n         * @implements IOperatorSetIdProto\n         * @constructor\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         */\n        function OperatorSetIdProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * OperatorSetIdProto domain.\n         * @member {string} domain\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.domain = \"\";\n\n        /**\n         * OperatorSetIdProto version.\n         * @member {number|Long} version\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new OperatorSetIdProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto instance\n         */\n        OperatorSetIdProto.create = function create(properties) {\n            return new OperatorSetIdProto(properties);\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.domain);\n            if (message.version != null && Object.hasOwnProperty.call(message, \"version\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.version);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message, length delimited. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.OperatorSetIdProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.domain = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.version = reader.int64();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an OperatorSetIdProto message.\n         * @function verify\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        OperatorSetIdProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))\n                    return \"version: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates an OperatorSetIdProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         */\n        OperatorSetIdProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.OperatorSetIdProto)\n                return object;\n            var message = new $root.onnx.OperatorSetIdProto();\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.version != null)\n                if ($util.Long)\n                    (message.version = $util.Long.fromValue(object.version)).unsigned = false;\n                else if (typeof object.version === \"string\")\n                    message.version = parseInt(object.version, 10);\n                else if (typeof object.version === \"number\")\n                    message.version = object.version;\n                else if (typeof object.version === \"object\")\n                    message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an OperatorSetIdProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.OperatorSetIdProto} message OperatorSetIdProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        OperatorSetIdProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.version = options.longs === String ? \"0\" : 0;\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (typeof message.version === \"number\")\n                    object.version = options.longs === String ? String(message.version) : message.version;\n                else\n                    object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;\n            return object;\n        };\n\n        /**\n         * Converts this OperatorSetIdProto to JSON.\n         * @function toJSON\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        OperatorSetIdProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for OperatorSetIdProto\n         * @function getTypeUrl\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        OperatorSetIdProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.OperatorSetIdProto\";\n        };\n\n        return OperatorSetIdProto;\n    })();\n\n    /**\n     * OperatorStatus enum.\n     * @name onnx.OperatorStatus\n     * @enum {number}\n     * @property {number} EXPERIMENTAL=0 EXPERIMENTAL value\n     * @property {number} STABLE=1 STABLE value\n     */\n    onnx.OperatorStatus = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"EXPERIMENTAL\"] = 0;\n        values[valuesById[1] = \"STABLE\"] = 1;\n        return values;\n    })();\n\n    onnx.FunctionProto = (function() {\n\n        /**\n         * Properties of a FunctionProto.\n         * @memberof onnx\n         * @interface IFunctionProto\n         * @property {string|null} [name] FunctionProto name\n         * @property {Array.<string>|null} [input] FunctionProto input\n         * @property {Array.<string>|null} [output] FunctionProto output\n         * @property {Array.<string>|null} [attribute] FunctionProto attribute\n         * @property {Array.<onnx.IAttributeProto>|null} [attributeProto] FunctionProto attributeProto\n         * @property {Array.<onnx.INodeProto>|null} [node] FunctionProto node\n         * @property {string|null} [docString] FunctionProto docString\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] FunctionProto opsetImport\n         * @property {string|null} [domain] FunctionProto domain\n         */\n\n        /**\n         * Constructs a new FunctionProto.\n         * @memberof onnx\n         * @classdesc Represents a FunctionProto.\n         * @implements IFunctionProto\n         * @constructor\n         * @param {onnx.IFunctionProto=} [properties] Properties to set\n         */\n        function FunctionProto(properties) {\n            this.input = [];\n            this.output = [];\n            this.attribute = [];\n            this.attributeProto = [];\n            this.node = [];\n            this.opsetImport = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * FunctionProto name.\n         * @member {string} name\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.name = \"\";\n\n        /**\n         * FunctionProto input.\n         * @member {Array.<string>} input\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.input = $util.emptyArray;\n\n        /**\n         * FunctionProto output.\n         * @member {Array.<string>} output\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.output = $util.emptyArray;\n\n        /**\n         * FunctionProto attribute.\n         * @member {Array.<string>} attribute\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.attribute = $util.emptyArray;\n\n        /**\n         * FunctionProto attributeProto.\n         * @member {Array.<onnx.IAttributeProto>} attributeProto\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.attributeProto = $util.emptyArray;\n\n        /**\n         * FunctionProto node.\n         * @member {Array.<onnx.INodeProto>} node\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.node = $util.emptyArray;\n\n        /**\n         * FunctionProto docString.\n         * @member {string} docString\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.docString = \"\";\n\n        /**\n         * FunctionProto opsetImport.\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.opsetImport = $util.emptyArray;\n\n        /**\n         * FunctionProto domain.\n         * @member {string} domain\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.domain = \"\";\n\n        /**\n         * Creates a new FunctionProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {onnx.IFunctionProto=} [properties] Properties to set\n         * @returns {onnx.FunctionProto} FunctionProto instance\n         */\n        FunctionProto.create = function create(properties) {\n            return new FunctionProto(properties);\n        };\n\n        /**\n         * Encodes the specified FunctionProto message. Does not implicitly {@link onnx.FunctionProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {onnx.IFunctionProto} message FunctionProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FunctionProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.input[i]);\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.output[i]);\n            if (message.attribute != null && message.attribute.length)\n                for (var i = 0; i < message.attribute.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.attribute[i]);\n            if (message.node != null && message.node.length)\n                for (var i = 0; i < message.node.length; ++i)\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.docString);\n            if (message.opsetImport != null && message.opsetImport.length)\n                for (var i = 0; i < message.opsetImport.length; ++i)\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.domain);\n            if (message.attributeProto != null && message.attributeProto.length)\n                for (var i = 0; i < message.attributeProto.length; ++i)\n                    $root.onnx.AttributeProto.encode(message.attributeProto[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified FunctionProto message, length delimited. Does not implicitly {@link onnx.FunctionProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {onnx.IFunctionProto} message FunctionProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FunctionProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a FunctionProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.FunctionProto} FunctionProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FunctionProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.FunctionProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 4: {\n                        if (!(message.input && message.input.length))\n                            message.input = [];\n                        message.input.push(reader.string());\n                        break;\n                    }\n                case 5: {\n                        if (!(message.output && message.output.length))\n                            message.output = [];\n                        message.output.push(reader.string());\n                        break;\n                    }\n                case 6: {\n                        if (!(message.attribute && message.attribute.length))\n                            message.attribute = [];\n                        message.attribute.push(reader.string());\n                        break;\n                    }\n                case 11: {\n                        if (!(message.attributeProto && message.attributeProto.length))\n                            message.attributeProto = [];\n                        message.attributeProto.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 7: {\n                        if (!(message.node && message.node.length))\n                            message.node = [];\n                        message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 8: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                case 9: {\n                        if (!(message.opsetImport && message.opsetImport.length))\n                            message.opsetImport = [];\n                        message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 10: {\n                        message.domain = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a FunctionProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.FunctionProto} FunctionProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FunctionProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a FunctionProto message.\n         * @function verify\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        FunctionProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i)\n                    if (!$util.isString(message.input[i]))\n                        return \"input: string[] expected\";\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i)\n                    if (!$util.isString(message.output[i]))\n                        return \"output: string[] expected\";\n            }\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\n                if (!Array.isArray(message.attribute))\n                    return \"attribute: array expected\";\n                for (var i = 0; i < message.attribute.length; ++i)\n                    if (!$util.isString(message.attribute[i]))\n                        return \"attribute: string[] expected\";\n            }\n            if (message.attributeProto != null && message.hasOwnProperty(\"attributeProto\")) {\n                if (!Array.isArray(message.attributeProto))\n                    return \"attributeProto: array expected\";\n                for (var i = 0; i < message.attributeProto.length; ++i) {\n                    var error = $root.onnx.AttributeProto.verify(message.attributeProto[i]);\n                    if (error)\n                        return \"attributeProto.\" + error;\n                }\n            }\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\n                if (!Array.isArray(message.node))\n                    return \"node: array expected\";\n                for (var i = 0; i < message.node.length; ++i) {\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\n                    if (error)\n                        return \"node.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\n                if (!Array.isArray(message.opsetImport))\n                    return \"opsetImport: array expected\";\n                for (var i = 0; i < message.opsetImport.length; ++i) {\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n                    if (error)\n                        return \"opsetImport.\" + error;\n                }\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a FunctionProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.FunctionProto} FunctionProto\n         */\n        FunctionProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.FunctionProto)\n                return object;\n            var message = new $root.onnx.FunctionProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.FunctionProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i)\n                    message.input[i] = String(object.input[i]);\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.FunctionProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i)\n                    message.output[i] = String(object.output[i]);\n            }\n            if (object.attribute) {\n                if (!Array.isArray(object.attribute))\n                    throw TypeError(\".onnx.FunctionProto.attribute: array expected\");\n                message.attribute = [];\n                for (var i = 0; i < object.attribute.length; ++i)\n                    message.attribute[i] = String(object.attribute[i]);\n            }\n            if (object.attributeProto) {\n                if (!Array.isArray(object.attributeProto))\n                    throw TypeError(\".onnx.FunctionProto.attributeProto: array expected\");\n                message.attributeProto = [];\n                for (var i = 0; i < object.attributeProto.length; ++i) {\n                    if (typeof object.attributeProto[i] !== \"object\")\n                        throw TypeError(\".onnx.FunctionProto.attributeProto: object expected\");\n                    message.attributeProto[i] = $root.onnx.AttributeProto.fromObject(object.attributeProto[i]);\n                }\n            }\n            if (object.node) {\n                if (!Array.isArray(object.node))\n                    throw TypeError(\".onnx.FunctionProto.node: array expected\");\n                message.node = [];\n                for (var i = 0; i < object.node.length; ++i) {\n                    if (typeof object.node[i] !== \"object\")\n                        throw TypeError(\".onnx.FunctionProto.node: object expected\");\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.opsetImport) {\n                if (!Array.isArray(object.opsetImport))\n                    throw TypeError(\".onnx.FunctionProto.opsetImport: array expected\");\n                message.opsetImport = [];\n                for (var i = 0; i < object.opsetImport.length; ++i) {\n                    if (typeof object.opsetImport[i] !== \"object\")\n                        throw TypeError(\".onnx.FunctionProto.opsetImport: object expected\");\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n                }\n            }\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a FunctionProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {onnx.FunctionProto} message FunctionProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        FunctionProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.input = [];\n                object.output = [];\n                object.attribute = [];\n                object.node = [];\n                object.opsetImport = [];\n                object.attributeProto = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.docString = \"\";\n                object.domain = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = message.input[j];\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = message.output[j];\n            }\n            if (message.attribute && message.attribute.length) {\n                object.attribute = [];\n                for (var j = 0; j < message.attribute.length; ++j)\n                    object.attribute[j] = message.attribute[j];\n            }\n            if (message.node && message.node.length) {\n                object.node = [];\n                for (var j = 0; j < message.node.length; ++j)\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.opsetImport && message.opsetImport.length) {\n                object.opsetImport = [];\n                for (var j = 0; j < message.opsetImport.length; ++j)\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.attributeProto && message.attributeProto.length) {\n                object.attributeProto = [];\n                for (var j = 0; j < message.attributeProto.length; ++j)\n                    object.attributeProto[j] = $root.onnx.AttributeProto.toObject(message.attributeProto[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this FunctionProto to JSON.\n         * @function toJSON\n         * @memberof onnx.FunctionProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        FunctionProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for FunctionProto\n         * @function getTypeUrl\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        FunctionProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.FunctionProto\";\n        };\n\n        return FunctionProto;\n    })();\n\n    return onnx;\n})();\n\nmodule.exports = $root;\n","var _scriptDir,e=(_scriptDir=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\"undefined\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(e={}){function n(){return P.buffer!=x.buffer&&L(),x}function r(){return P.buffer!=x.buffer&&L(),W}function t(){return P.buffer!=x.buffer&&L(),I}function a(){return P.buffer!=x.buffer&&L(),U}function o(){return P.buffer!=x.buffer&&L(),j}function i(){return P.buffer!=x.buffer&&L(),H}function u(){return P.buffer!=x.buffer&&L(),q}var f,s,c;f||(f=void 0!==e?e:{}),f.ready=new Promise(((e,n)=>{s=e,c=n}));var l,p,d,h=Object.assign({},f),m=\"./this.program\",b=(e,n)=>{throw n},g=\"object\"==typeof window,y=\"function\"==typeof importScripts,v=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,w=f.ENVIRONMENT_IS_PTHREAD||!1,_=\"\";function T(e){return f.locateFile?f.locateFile(e,_):_+e}if(v){var A=require(\"fs\"),O=require(\"path\");let e;_=y?O.dirname(_)+\"/\":__dirname+\"/\",l=(e,n)=>(e=e.startsWith(\"file://\")?new URL(e):O.normalize(e),A.readFileSync(e,n?void 0:\"utf8\")),d=e=>((e=l(e,!0)).buffer||(e=new Uint8Array(e)),e),p=(e,n,r,t=!0)=>{e=e.startsWith(\"file://\")?new URL(e):O.normalize(e),A.readFile(e,t?void 0:\"utf8\",((e,a)=>{e?r(e):n(t?a.buffer:a)}))},!f.thisProgram&&1<process.argv.length&&(m=process.argv[1].replace(/\\\\/g,\"/\")),process.argv.slice(2),b=(e,n)=>{throw process.exitCode=e,n},f.inspect=()=>\"[Emscripten Module object]\";try{e=require(\"worker_threads\")}catch(e){throw console.error('The \"worker_threads\" module is not supported in this node.js build - perhaps a newer version is needed?'),e}global.Worker=e.Worker}else(g||y)&&(y?_=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(_=document.currentScript.src),_scriptDir&&(_=_scriptDir),_=0!==_.indexOf(\"blob:\")?_.substr(0,_.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):\"\",v||(l=e=>{var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.send(null),n.responseText},y&&(d=e=>{var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.responseType=\"arraybuffer\",n.send(null),new Uint8Array(n.response)}),p=(e,n,r)=>{var t=new XMLHttpRequest;t.open(\"GET\",e,!0),t.responseType=\"arraybuffer\",t.onload=()=>{200==t.status||0==t.status&&t.response?n(t.response):r()},t.onerror=r,t.send(null)}));v&&\"undefined\"==typeof performance&&(global.performance=require(\"perf_hooks\").performance);var S=console.log.bind(console),E=console.warn.bind(console);v&&(S=(...e)=>A.writeSync(1,e.join(\" \")+\"\\n\"),E=(...e)=>A.writeSync(2,e.join(\" \")+\"\\n\"));var M,C=f.print||S,k=f.printErr||E;Object.assign(f,h),h=null,f.thisProgram&&(m=f.thisProgram),f.quit&&(b=f.quit),f.wasmBinary&&(M=f.wasmBinary);var F=f.noExitRuntime||!0;\"object\"!=typeof WebAssembly&&ae(\"no native wasm support detected\");var P,R,D,x,W,I,U,j,H,Y,B,z,q,G=!1;function L(){var e=P.buffer;f.HEAP8=x=new Int8Array(e),f.HEAP16=I=new Int16Array(e),f.HEAP32=j=new Int32Array(e),f.HEAPU8=W=new Uint8Array(e),f.HEAPU16=U=new Uint16Array(e),f.HEAPU32=H=new Uint32Array(e),f.HEAPF32=Y=new Float32Array(e),f.HEAPF64=q=new Float64Array(e),f.HEAP64=B=new BigInt64Array(e),f.HEAPU64=z=new BigUint64Array(e)}var N=f.INITIAL_MEMORY||16777216;if(5242880<=N||ae(\"INITIAL_MEMORY should be larger than STACK_SIZE, was \"+N+\"! (STACK_SIZE=5242880)\"),w)P=f.wasmMemory;else if(f.wasmMemory)P=f.wasmMemory;else if(!((P=new WebAssembly.Memory({initial:N/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw k(\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\"),v&&k(\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)\"),Error(\"bad memory\");L(),N=P.buffer.byteLength;var V,J=[],X=[],Z=[],$=0;function K(){return F||0<$}function Q(){var e=f.preRun.shift();J.unshift(e)}var ee,ne=0,re=null,te=null;function ae(e){throw f.onAbort&&f.onAbort(e),k(e=\"Aborted(\"+e+\")\"),G=!0,D=1,e=new WebAssembly.RuntimeError(e+\". Build with -sASSERTIONS for more info.\"),c(e),e}function oe(e){return e.startsWith(\"data:application/octet-stream;base64,\")}function ie(e){try{if(e==ee&&M)return new Uint8Array(M);if(d)return d(e);throw\"both async and sync fetching of the wasm failed\"}catch(e){ae(e)}}function ue(e,n,r){return function(e){if(!M&&(g||y)){if(\"function\"==typeof fetch&&!e.startsWith(\"file://\"))return fetch(e,{credentials:\"same-origin\"}).then((n=>{if(!n.ok)throw\"failed to load wasm binary file at '\"+e+\"'\";return n.arrayBuffer()})).catch((()=>ie(e)));if(p)return new Promise(((n,r)=>{p(e,(e=>n(new Uint8Array(e))),r)}))}return Promise.resolve().then((()=>ie(e)))}(e).then((e=>WebAssembly.instantiate(e,n))).then((e=>e)).then(r,(e=>{k(\"failed to asynchronously prepare wasm: \"+e),ae(e)}))}function fe(e){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+e+\")\",this.status=e}function se(e){e.terminate(),e.onmessage=()=>{}}function ce(e){(e=ye.hb[e])||ae(),ye.Lb(e)}function le(e){var n=ye.Db();if(!n)return 6;ye.kb.push(n),ye.hb[e.jb]=n,n.jb=e.jb;var r={cmd:\"run\",start_routine:e.Mb,arg:e.Bb,pthread_ptr:e.jb};return v&&n.unref(),n.postMessage(r,e.Sb),0}oe(ee=\"ort-wasm-threaded.wasm\")||(ee=T(ee));var pe=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;function de(e,n,r){var t=(n>>>=0)+r;for(r=n;e[r]&&!(r>=t);)++r;if(16<r-n&&e.buffer&&pe)return pe.decode(e.buffer instanceof SharedArrayBuffer?e.slice(n,r):e.subarray(n,r));for(t=\"\";n<r;){var a=e[n++];if(128&a){var o=63&e[n++];if(192==(224&a))t+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[n++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[n++])?t+=String.fromCharCode(a):(a-=65536,t+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else t+=String.fromCharCode(a)}return t}function he(e,n){return(e>>>=0)?de(r(),e,n):\"\"}function me(e){if(w)return Dn(1,1,e);D=e,K()||(ye.Nb(),f.onExit&&f.onExit(e),G=!0),b(e,new fe(e))}function be(e){if(D=e,w)throw we(e),\"unwind\";me(e)}function ge(e){e instanceof fe||\"unwind\"==e||b(1,e)}var ye={nb:[],kb:[],zb:[],hb:{},tb:function(){w&&ye.Fb()},Vb:function(){},Fb:function(){ye.receiveObjectTransfer=ye.Kb,ye.threadInitTLS=ye.yb,ye.setExitStatus=ye.xb,F=!1},xb:function(e){D=e},Xb:[\"$terminateWorker\"],Nb:function(){for(var e of ye.kb)se(e);for(e of ye.nb)se(e);ye.nb=[],ye.kb=[],ye.hb=[]},Lb:function(e){var n=e.jb;delete ye.hb[n],ye.nb.push(e),ye.kb.splice(ye.kb.indexOf(e),1),e.jb=0,ar(n)},Kb:function(){},yb:function(){ye.zb.forEach((e=>e()))},Jb:e=>new Promise((n=>{e.onmessage=r=>{var t=(r=r.data).cmd;if(e.jb&&(ye.Cb=e.jb),r.targetThread&&r.targetThread!=Kn()){var a=ye.hb[r.Wb];a?a.postMessage(r,r.transferList):k('Internal error! Worker sent a message \"'+t+'\" to target pthread '+r.targetThread+\", but that thread no longer exists!\")}else\"checkMailbox\"===t?bn():\"spawnThread\"===t?le(r):\"cleanupThread\"===t?ce(r.thread):\"killThread\"===t?(r=r.thread,t=ye.hb[r],delete ye.hb[r],se(t),ar(r),ye.kb.splice(ye.kb.indexOf(t),1),t.jb=0):\"cancelThread\"===t?ye.hb[r.thread].postMessage({cmd:\"cancel\"}):\"loaded\"===t?(e.loaded=!0,n(e)):\"print\"===t?C(\"Thread \"+r.threadId+\": \"+r.text):\"printErr\"===t?k(\"Thread \"+r.threadId+\": \"+r.text):\"alert\"===t?alert(\"Thread \"+r.threadId+\": \"+r.text):\"setimmediate\"===r.target?e.postMessage(r):\"callHandler\"===t?f[r.handler](...r.args):t&&k(\"worker sent an unknown command \"+t);ye.Cb=void 0},e.onerror=e=>{throw k(\"worker sent an error! \"+e.filename+\":\"+e.lineno+\": \"+e.message),e},v&&(e.on(\"message\",(function(n){e.onmessage({data:n})})),e.on(\"error\",(function(n){e.onerror(n)})));var r,t=[];for(r of[\"onExit\",\"onAbort\",\"print\",\"printErr\"])f.hasOwnProperty(r)&&t.push(r);e.postMessage({cmd:\"load\",handlers:t,urlOrBlob:f.mainScriptUrlOrBlob||_scriptDir,wasmMemory:P,wasmModule:R})})),Ib:function(e){e()},Ab:function(){var e=T(\"ort-wasm-threaded.worker.js\");e=new Worker(e),ye.nb.push(e)},Db:function(){return 0==ye.nb.length&&(ye.Ab(),ye.Jb(ye.nb[0])),ye.nb.pop()}};function ve(e){for(;0<e.length;)e.shift()(f)}function we(e){if(w)return Dn(2,0,e);be(e)}f.PThread=ye,f.establishStackSpace=function(){var e=Kn(),n=o()[e+52>>2>>>0];fr(n,n-(e=o()[e+56>>2>>>0])),cr(n)};var _e=[];function Te(e){this.gb=e-24,this.ub=function(e){i()[this.gb+4>>2>>>0]=e},this.qb=function(e){i()[this.gb+8>>2>>>0]=e},this.tb=function(e,n){this.pb(),this.ub(e),this.qb(n)},this.pb=function(){i()[this.gb+16>>2>>>0]=0}}function Ae(e,n,r,t){return w?Dn(3,1,e,n,r,t):Oe(e,n,r,t)}function Oe(e,n,r,t){if(\"undefined\"==typeof SharedArrayBuffer)return k(\"Current environment does not support SharedArrayBuffer, pthreads are not available!\"),6;var a=[];return w&&0===a.length?Ae(e,n,r,t):(e={Mb:r,jb:e,Bb:t,Sb:a},w?(e.Ub=\"spawnThread\",postMessage(e,a),0):le(e))}function Se(e,n,r){return w?Dn(4,1,e,n,r):0}function Ee(e,n){if(w)return Dn(5,1,e,n)}function Me(e){for(var n=0,r=0;r<e.length;++r){var t=e.charCodeAt(r);127>=t?n++:2047>=t?n+=2:55296<=t&&57343>=t?(n+=4,++r):n+=3}return n}function Ce(e,n,r,t){if(!(0<t))return 0;var a=r>>>=0;t=r+t-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(r>=t)break;n[r++>>>0]=i}else{if(2047>=i){if(r+1>=t)break;n[r++>>>0]=192|i>>6}else{if(65535>=i){if(r+2>=t)break;n[r++>>>0]=224|i>>12}else{if(r+3>=t)break;n[r++>>>0]=240|i>>18,n[r++>>>0]=128|i>>12&63}n[r++>>>0]=128|i>>6&63}n[r++>>>0]=128|63&i}}return n[r>>>0]=0,r-a}function ke(e,n,t){return Ce(e,r(),n,t)}function Fe(e,n){if(w)return Dn(6,1,e,n)}function Pe(e,n,r){if(w)return Dn(7,1,e,n,r)}function Re(e,n,r){return w?Dn(8,1,e,n,r):0}function De(e,n){if(w)return Dn(9,1,e,n)}function xe(e,n,r){if(w)return Dn(10,1,e,n,r)}function We(e,n,r,t){if(w)return Dn(11,1,e,n,r,t)}function Ie(e,n,r,t){if(w)return Dn(12,1,e,n,r,t)}function Ue(e,n,r,t){if(w)return Dn(13,1,e,n,r,t)}function je(e){if(w)return Dn(14,1,e)}function He(e,n){if(w)return Dn(15,1,e,n)}function Ye(e,n,r){if(w)return Dn(16,1,e,n,r)}function Be(e){if(null===e)return\"null\";var n=typeof e;return\"object\"===n||\"array\"===n||\"function\"===n?e.toString():\"\"+e}f.invokeEntryPoint=function(e,n){var r=_e[e];r||(e>=_e.length&&(_e.length=e+1),_e[e]=r=V.get(e)),e=r(n),K()?ye.xb(e):ir(e)};var ze=void 0;function qe(e){for(var n=\"\";r()[e>>>0];)n+=ze[r()[e++>>>0]];return n}var Ge={},Le={},Ne={};function Ve(e){if(void 0===e)return\"_unknown\";var n=(e=e.replace(/[^a-zA-Z0-9_]/g,\"$\")).charCodeAt(0);return 48<=n&&57>=n?\"_\"+e:e}function Je(e,n){return{[e=Ve(e)]:function(){return n.apply(this,arguments)}}[e]}function Xe(e){var n=Error,r=Je(e,(function(n){this.name=e,this.message=n,void 0!==(n=Error(n).stack)&&(this.stack=this.toString()+\"\\n\"+n.replace(/^Error(:[^\\n]*)?\\n/,\"\"))}));return r.prototype=Object.create(n.prototype),r.prototype.constructor=r,r.prototype.toString=function(){return void 0===this.message?this.name:this.name+\": \"+this.message},r}var Ze=void 0;function $e(e){throw new Ze(e)}function Ke(e,n,r={}){if(!(\"argPackAdvance\"in n))throw new TypeError(\"registerType registeredInstance requires argPackAdvance\");var t=n.name;if(e||$e('type \"'+t+'\" must have a positive integer typeid pointer'),Le.hasOwnProperty(e)){if(r.Eb)return;$e(\"Cannot register type '\"+t+\"' twice\")}Le[e]=n,delete Ne[e],Ge.hasOwnProperty(e)&&(n=Ge[e],delete Ge[e],n.forEach((e=>e())))}function Qe(e,u,f){switch(u){case 0:return f?function(e){return n()[e>>>0]}:function(e){return r()[e>>>0]};case 1:return f?function(e){return t()[e>>>1]}:function(e){return a()[e>>>1]};case 2:return f?function(e){return o()[e>>>2]}:function(e){return i()[e>>>2]};case 3:return f?function(e){return B[e>>3]}:function(e){return z[e>>3]};default:throw new TypeError(\"Unknown integer type: \"+e)}}function en(e){switch(e){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError(\"Unknown type size: \"+e)}}var nn=new function(){this.gb=[void 0],this.pb=[],this.get=function(e){return this.gb[e]},this.ub=function(e){let n=this.pb.pop()||this.gb.length;return this.gb[n]=e,n},this.Hb=function(e){this.gb[e]=void 0,this.pb.push(e)}};function rn(e){e>=nn.qb&&0==--nn.get(e).wb&&nn.Hb(e)}var tn=e=>(e||$e(\"Cannot use deleted val. handle = \"+e),nn.get(e).value),an=e=>{switch(e){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:return nn.ub({wb:1,value:e})}};function on(e){return this.fromWireType(o()[e>>2>>>0])}function un(e,n){switch(n){case 2:return function(e){var n=this.fromWireType;return P.buffer!=x.buffer&&L(),n.call(this,Y[e>>>2])};case 3:return function(e){return this.fromWireType(u()[e>>>3])};default:throw new TypeError(\"Unknown float type: \"+e)}}var fn=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf-16le\"):void 0;function sn(e,n){for(var o=e>>1,i=o+n/2;!(o>=i)&&a()[o>>>0];)++o;if(32<(o<<=1)-e&&fn)return fn.decode(r().slice(e,o));for(o=\"\",i=0;!(i>=n/2);++i){var u=t()[e+2*i>>1>>>0];if(0==u)break;o+=String.fromCharCode(u)}return o}function cn(e,n,r){if(void 0===r&&(r=2147483647),2>r)return 0;var a=n;r=(r-=2)<2*e.length?r/2:e.length;for(var o=0;o<r;++o){var i=e.charCodeAt(o);t()[n>>1>>>0]=i,n+=2}return t()[n>>1>>>0]=0,n-a}function ln(e){return 2*e.length}function pn(e,n){for(var r=0,t=\"\";!(r>=n/4);){var a=o()[e+4*r>>2>>>0];if(0==a)break;++r,65536<=a?(a-=65536,t+=String.fromCharCode(55296|a>>10,56320|1023&a)):t+=String.fromCharCode(a)}return t}function dn(e,n,r){if(void 0===r&&(r=2147483647),4>r)return 0;var t=n>>>=0;r=t+r-4;for(var a=0;a<e.length;++a){var i=e.charCodeAt(a);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++a)),o()[n>>2>>>0]=i,(n+=4)+4>r)break}return o()[n>>2>>>0]=0,n-t}function hn(e){for(var n=0,r=0;r<e.length;++r){var t=e.charCodeAt(r);55296<=t&&57343>=t&&++r,n+=4}return n}function mn(e){\"function\"==typeof Atomics.Tb&&(Atomics.Tb(o(),e>>2,e).value.then(bn),e+=128,Atomics.store(o(),e>>2,1))}function bn(){var e=Kn();e&&(mn(e),function(e){if(!G)try{if(ur(),!K())try{w?ir(D):be(D)}catch(e){ge(e)}}catch(e){ge(e)}}())}function gn(e,n){var r=Le[e];if(void 0===r){var t=qe(e=nr(e));er(e),$e(n+\" has unknown type \"+t)}return r}f.__emscripten_thread_mailbox_await=mn,f.checkMailbox=bn;var yn={};function vn(e){var n=yn[e];return void 0===n?qe(e):n}var wn=[];function _n(){return\"object\"==typeof globalThis?globalThis:Function(\"return this\")()}var Tn=[],An={};function On(e){return i()[e>>>2]+4294967296*o()[e+4>>>2]}function Sn(e){return 0==e%4&&(0!=e%100||0==e%400)}var En,Mn=[0,31,60,91,121,152,182,213,244,274,305,335],Cn=[0,31,59,90,120,151,181,212,243,273,304,334];function kn(e){return(Sn(e.getFullYear())?Mn:Cn)[e.getMonth()]+e.getDate()-1}function Fn(e,n,r,t,a,o,i){return w?Dn(17,1,e,n,r,t,a,o,i):-52}function Pn(e,n,r,t,a,o){if(w)return Dn(18,1,e,n,r,t,a,o)}function Rn(e){var n=Me(e)+1,r=Qn(n);return r&&ke(e,r,n),r}function Dn(e,n){var r=arguments.length-2,t=arguments;return function(e){var n=sr();return e=e(),cr(n),e}((()=>{for(var a=2*r,o=lr(8*a),i=o>>3,f=0;f<r;f++){var s=t[2+f];\"bigint\"==typeof s?(B[i+2*f]=1n,B[i+2*f+1]=s):(B[i+2*f]=0n,u()[i+2*f+1>>>0]=s)}return tr(e,a,o,n)}))}En=v?()=>{var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:()=>performance.timeOrigin+performance.now();var xn,Wn=[],In={};function Un(){if(!xn){var e,n={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:m||\"./this.program\"};for(e in In)void 0===In[e]?delete n[e]:n[e]=In[e];var r=[];for(e in n)r.push(e+\"=\"+n[e]);xn=r}return xn}function jn(e,r){if(w)return Dn(19,1,e,r);var t=0;return Un().forEach((function(a,o){var u=r+t;for(o=i()[e+4*o>>2>>>0]=u,u=0;u<a.length;++u)n()[o++>>0>>>0]=a.charCodeAt(u);n()[o>>0>>>0]=0,t+=a.length+1})),0}function Hn(e,n){if(w)return Dn(20,1,e,n);var r=Un();i()[e>>2>>>0]=r.length;var t=0;return r.forEach((function(e){t+=e.length+1})),i()[n>>2>>>0]=t,0}function Yn(e){return w?Dn(21,1,e):52}function Bn(e,n,r,t){return w?Dn(22,1,e,n,r,t):52}function zn(e,n,r,t){return w?Dn(23,1,e,n,r,t):70}var qn=[null,[],[]];function Gn(e,n,t,a){if(w)return Dn(24,1,e,n,t,a);for(var o=0,u=0;u<t;u++){var f=i()[n>>2>>>0],s=i()[n+4>>2>>>0];n+=8;for(var c=0;c<s;c++){var l=r()[f+c>>>0],p=qn[e];0===l||10===l?((1===e?C:k)(de(p,0)),p.length=0):p.push(l)}o+=s}return i()[a>>2>>>0]=o,0}var Ln=[31,29,31,30,31,30,31,31,30,31,30,31],Nn=[31,28,31,30,31,30,31,31,30,31,30,31];function Vn(e,r,t,a){function i(e,n,r){for(e=\"number\"==typeof e?e.toString():e||\"\";e.length<n;)e=r[0]+e;return e}function u(e,n){return i(e,n,\"0\")}function f(e,n){function r(e){return 0>e?-1:0<e?1:0}var t;return 0===(t=r(e.getFullYear()-n.getFullYear()))&&0===(t=r(e.getMonth()-n.getMonth()))&&(t=r(e.getDate()-n.getDate())),t}function s(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function c(e){var n=e.lb;for(e=new Date(new Date(e.mb+1900,0,1).getTime());0<n;){var r=e.getMonth(),t=(Sn(e.getFullYear())?Ln:Nn)[r];if(!(n>t-e.getDate())){e.setDate(e.getDate()+n);break}n-=t-e.getDate()+1,e.setDate(1),11>r?e.setMonth(r+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return r=new Date(e.getFullYear()+1,0,4),n=s(new Date(e.getFullYear(),0,4)),r=s(r),0>=f(n,e)?0>=f(r,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var l=o()[a+40>>2>>>0];for(var p in a={Qb:o()[a>>2>>>0],Pb:o()[a+4>>2>>>0],rb:o()[a+8>>2>>>0],vb:o()[a+12>>2>>>0],sb:o()[a+16>>2>>>0],mb:o()[a+20>>2>>>0],ib:o()[a+24>>2>>>0],lb:o()[a+28>>2>>>0],Yb:o()[a+32>>2>>>0],Ob:o()[a+36>>2>>>0],Rb:l?he(l):\"\"},t=he(t),l={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"})t=t.replace(new RegExp(p,\"g\"),l[p]);var d=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),h=\"January February March April May June July August September October November December\".split(\" \");for(p in l={\"%a\":function(e){return d[e.ib].substring(0,3)},\"%A\":function(e){return d[e.ib]},\"%b\":function(e){return h[e.sb].substring(0,3)},\"%B\":function(e){return h[e.sb]},\"%C\":function(e){return u((e.mb+1900)/100|0,2)},\"%d\":function(e){return u(e.vb,2)},\"%e\":function(e){return i(e.vb,2,\" \")},\"%g\":function(e){return c(e).toString().substring(2)},\"%G\":function(e){return c(e)},\"%H\":function(e){return u(e.rb,2)},\"%I\":function(e){return 0==(e=e.rb)?e=12:12<e&&(e-=12),u(e,2)},\"%j\":function(e){for(var n=0,r=0;r<=e.sb-1;n+=(Sn(e.mb+1900)?Ln:Nn)[r++]);return u(e.vb+n,3)},\"%m\":function(e){return u(e.sb+1,2)},\"%M\":function(e){return u(e.Pb,2)},\"%n\":function(){return\"\\n\"},\"%p\":function(e){return 0<=e.rb&&12>e.rb?\"AM\":\"PM\"},\"%S\":function(e){return u(e.Qb,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(e){return e.ib||7},\"%U\":function(e){return u(Math.floor((e.lb+7-e.ib)/7),2)},\"%V\":function(e){var n=Math.floor((e.lb+7-(e.ib+6)%7)/7);if(2>=(e.ib+371-e.lb-2)%7&&n++,n)53==n&&(4==(r=(e.ib+371-e.lb)%7)||3==r&&Sn(e.mb)||(n=1));else{n=52;var r=(e.ib+7-e.lb-1)%7;(4==r||5==r&&Sn(e.mb%400-1))&&n++}return u(n,2)},\"%w\":function(e){return e.ib},\"%W\":function(e){return u(Math.floor((e.lb+7-(e.ib+6)%7)/7),2)},\"%y\":function(e){return(e.mb+1900).toString().substring(2)},\"%Y\":function(e){return e.mb+1900},\"%z\":function(e){var n=0<=(e=e.Ob);return e=Math.abs(e)/60,(n?\"+\":\"-\")+String(\"0000\"+(e/60*100+e%60)).slice(-4)},\"%Z\":function(e){return e.Rb},\"%%\":function(){return\"%\"}},t=t.replace(/%%/g,\"\\0\\0\"),l)t.includes(p)&&(t=t.replace(new RegExp(p,\"g\"),l[p](a)));return p=function(e){var n=Array(Me(e)+1);return Ce(e,n,0,n.length),n}(t=t.replace(/\\0\\0/g,\"%\")),p.length>r?0:(function(e,r){n().set(e,r>>>0)}(p,e),p.length-1)}ye.tb();for(var Jn=Array(256),Xn=0;256>Xn;++Xn)Jn[Xn]=String.fromCharCode(Xn);ze=Jn,Ze=f.BindingError=Xe(\"BindingError\"),f.InternalError=Xe(\"InternalError\"),nn.gb.push({value:void 0},{value:null},{value:!0},{value:!1}),nn.qb=nn.gb.length,f.count_emval_handles=function(){for(var e=0,n=nn.qb;n<nn.gb.length;++n)void 0!==nn.gb[n]&&++e;return e};var Zn=[null,me,we,Ae,Se,Ee,Fe,Pe,Re,De,xe,We,Ie,Ue,je,He,Ye,Fn,Pn,jn,Hn,Yn,Bn,zn,Gn],$n={b:function(e,n,r){throw new Te(e).tb(n,r),e},ra:function(){ae(\"To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html\")},ga:function(e){rr(e,!y,1,!g),ye.yb()},D:function(e){w?postMessage({cmd:\"cleanupThread\",thread:e}):ce(e)},W:Oe,y:Se,na:Ee,S:Fe,U:Pe,L:Re,ka:De,ba:xe,ja:We,F:Ie,T:Ue,Q:je,la:He,R:Ye,I:function(e,n,r,t,a){n=qe(n),r=en(r);var o=-1!=n.indexOf(\"u\");o&&(a=(1n<<64n)-1n),Ke(e,{name:n,fromWireType:function(e){return e},toWireType:function(e,r){if(\"bigint\"!=typeof r&&\"number\"!=typeof r)throw new TypeError('Cannot convert \"'+Be(r)+'\" to '+this.name);if(r<t||r>a)throw new TypeError('Passing a number \"'+Be(r)+'\" from JS side to C/C++ side to an argument of type \"'+n+'\", which is outside the valid range ['+t+\", \"+a+\"]!\");return r},argPackAdvance:8,readValueFromPointer:Qe(n,r,!o),ob:null})},ta:function(e,r,a,i,u){var f=en(a);Ke(e,{name:r=qe(r),fromWireType:function(e){return!!e},toWireType:function(e,n){return n?i:u},argPackAdvance:8,readValueFromPointer:function(e){if(1===a)var i=n();else if(2===a)i=t();else{if(4!==a)throw new TypeError(\"Unknown boolean type size: \"+r);i=o()}return this.fromWireType(i[e>>>f])},ob:null})},sa:function(e,n){Ke(e,{name:n=qe(n),fromWireType:function(e){var n=tn(e);return rn(e),n},toWireType:function(e,n){return an(n)},argPackAdvance:8,readValueFromPointer:on,ob:null})},H:function(e,n,r){r=en(r),Ke(e,{name:n=qe(n),fromWireType:function(e){return e},toWireType:function(e,n){return n},argPackAdvance:8,readValueFromPointer:un(n,r),ob:null})},u:function(e,n,r,t,a){n=qe(n),-1===a&&(a=4294967295),a=en(r);var o=e=>e;if(0===t){var i=32-8*r;o=e=>e<<i>>>i}r=n.includes(\"unsigned\")?function(e,n){return n>>>0}:function(e,n){return n},Ke(e,{name:n,fromWireType:o,toWireType:r,argPackAdvance:8,readValueFromPointer:Qe(n,a,0!==t),ob:null})},m:function(e,n,r){function t(e){e>>=2;var n=i();return new a(n.buffer,n[e+1>>>0],n[e>>>0])}var a=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array][n];Ke(e,{name:r=qe(r),fromWireType:t,argPackAdvance:8,readValueFromPointer:t},{Eb:!0})},J:function(e,n){var t=\"std::string\"===(n=qe(n));Ke(e,{name:n,fromWireType:function(e){var n=i()[e>>2>>>0],a=e+4;if(t)for(var o=a,u=0;u<=n;++u){var f=a+u;if(u==n||0==r()[f>>>0]){if(o=he(o,f-o),void 0===s)var s=o;else s+=String.fromCharCode(0),s+=o;o=f+1}}else{for(s=Array(n),u=0;u<n;++u)s[u]=String.fromCharCode(r()[a+u>>>0]);s=s.join(\"\")}return er(e),s},toWireType:function(e,n){n instanceof ArrayBuffer&&(n=new Uint8Array(n));var a=\"string\"==typeof n;a||n instanceof Uint8Array||n instanceof Uint8ClampedArray||n instanceof Int8Array||$e(\"Cannot pass non-string to std::string\");var o=t&&a?Me(n):n.length,u=Qn(4+o+1),f=u+4>>>0;if(i()[u>>2>>>0]=o,t&&a)ke(n,f,o+1);else if(a)for(a=0;a<o;++a){var s=n.charCodeAt(a);255<s&&(er(f),$e(\"String has UTF-16 code units that do not fit in 8 bits\")),r()[f+a>>>0]=s}else for(a=0;a<o;++a)r()[f+a>>>0]=n[a];return null!==e&&e.push(er,u),u},argPackAdvance:8,readValueFromPointer:on,ob:function(e){er(e)}})},A:function(e,n,r){if(r=qe(r),2===n)var t=sn,o=cn,u=ln,f=()=>a(),s=1;else 4===n&&(t=pn,o=dn,u=hn,f=()=>i(),s=2);Ke(e,{name:r,fromWireType:function(e){for(var r,a=i()[e>>>2],o=f(),u=e+4,c=0;c<=a;++c){var l=e+4+c*n;c!=a&&0!=o[l>>>s]||(u=t(u,l-u),void 0===r?r=u:(r+=String.fromCharCode(0),r+=u),u=l+n)}return er(e),r},toWireType:function(e,t){\"string\"!=typeof t&&$e(\"Cannot pass non-string to C++ string type \"+r);var a=u(t),f=Qn(4+a+n);return f>>>=0,i()[f>>>2]=a>>s,o(t,f+4,a+n),null!==e&&e.push(er,f),f},argPackAdvance:8,readValueFromPointer:on,ob:function(e){er(e)}})},ua:function(e,n){Ke(e,{Gb:!0,name:n=qe(n),argPackAdvance:0,fromWireType:function(){},toWireType:function(){}})},X:function(){return 131072},qa:function(){return!0},O:function(e,n){e==n?setTimeout((()=>bn())):w?postMessage({targetThread:e,cmd:\"checkMailbox\"}):(e=ye.hb[e])&&e.postMessage({cmd:\"checkMailbox\"})},ea:function(){return-1},fa:mn,pa:function(e){v&&ye.hb[e].ref()},r:function(e,n,r){e=tn(e),n=gn(n,\"emval::as\");var t=[],a=an(t);return i()[r>>2>>>0]=a,n.toWireType(t,e)},i:function(e,n,r,t,a){e=wn[e],n=tn(n),r=vn(r);var o=[];return i()[t>>2>>>0]=an(o),e(n,r,o,a)},s:function(e,n,r,t){(e=wn[e])(n=tn(n),r=vn(r),null,t)},c:rn,K:function(e,n){return(e=tn(e))==tn(n)},o:function(e){return 0===e?an(_n()):(e=vn(e),an(_n()[e]))},g:function(e,n){var r=function(e,n){for(var r=Array(e),t=0;t<e;++t)r[t]=gn(i()[n+4*t>>2>>>0],\"parameter \"+t);return r}(e,n),t=r[0];n=t.name+\"_$\"+r.slice(1).map((function(e){return e.name})).join(\"_\")+\"$\";var a=Tn[n];if(void 0!==a)return a;a=[\"retType\"];for(var o=[t],u=\"\",f=0;f<e-1;++f)u+=(0!==f?\", \":\"\")+\"arg\"+f,a.push(\"argType\"+f),o.push(r[1+f]);var s=\"return function \"+Ve(\"methodCaller_\"+n)+\"(handle, name, destructors, args) {\\n\",c=0;for(f=0;f<e-1;++f)s+=\"    var arg\"+f+\" = argType\"+f+\".readValueFromPointer(args\"+(c?\"+\"+c:\"\")+\");\\n\",c+=r[f+1].argPackAdvance;for(s+=\"    var rv = handle[name](\"+u+\");\\n\",f=0;f<e-1;++f)r[f+1].deleteObject&&(s+=\"    argType\"+f+\".deleteObject(arg\"+f+\");\\n\");return t.Gb||(s+=\"    return retType.toWireType(destructors, rv);\\n\"),a.push(s+\"};\\n\"),e=function(e){var n=Function;if(!(n instanceof Function))throw new TypeError(\"new_ called with constructor type \"+typeof n+\" which is not a function\");var r=Je(n.name||\"unknownFunctionName\",(function(){}));return r.prototype=n.prototype,r=new r,(e=n.apply(r,e))instanceof Object?e:r}(a).apply(null,o),a=function(e){var n=wn.length;return wn.push(e),n}(e),Tn[n]=a},t:function(e,n){return e=tn(e),n=tn(n),an(e[n])},d:function(e){4<e&&(nn.get(e).wb+=1)},x:function(e,n,r,t){e=tn(e);var a=An[n];return a||(a=function(e){for(var n=\"\",r=0;r<e;++r)n+=(0!==r?\", \":\"\")+\"arg\"+r;var t=\"return function emval_allocator_\"+e+\"(constructor, argTypes, args) {\\n  var HEAPU32 = getMemory();\\n\";for(r=0;r<e;++r)t+=\"var argType\"+r+\" = requireRegisteredType(HEAPU32[((argTypes)>>2)], 'parameter \"+r+\"');\\nvar arg\"+r+\" = argType\"+r+\".readValueFromPointer(args);\\nargs += argType\"+r+\"['argPackAdvance'];\\nargTypes += 4;\\n\";return new Function(\"requireRegisteredType\",\"Module\",\"valueToHandle\",\"getMemory\",t+\"var obj = new constructor(\"+n+\");\\nreturn valueToHandle(obj);\\n}\\n\")(gn,f,an,(()=>i()))}(n),An[n]=a),a(e,r,t)},v:function(){return an([])},l:function(e){e=tn(e);for(var n=Array(e.length),r=0;r<e.length;r++)n[r]=e[r];return an(n)},e:function(e){return an(vn(e))},k:function(){return an({})},h:function(e){for(var n=tn(e);n.length;){var r=n.pop();n.pop()(r)}rn(e)},j:function(e,n,r){e=tn(e),n=tn(n),r=tn(r),e[n]=r},f:function(e,n){return e=(e=gn(e,\"_emval_take_value\")).readValueFromPointer(n),an(e)},_:function(e,n){e=new Date(1e3*On(e)),o()[n>>2>>>0]=e.getUTCSeconds(),o()[n+4>>2>>>0]=e.getUTCMinutes(),o()[n+8>>2>>>0]=e.getUTCHours(),o()[n+12>>2>>>0]=e.getUTCDate(),o()[n+16>>2>>>0]=e.getUTCMonth(),o()[n+20>>2>>>0]=e.getUTCFullYear()-1900,o()[n+24>>2>>>0]=e.getUTCDay(),e=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,o()[n+28>>2>>>0]=e},$:function(e,n){e=new Date(1e3*On(e)),o()[n>>2>>>0]=e.getSeconds(),o()[n+4>>2>>>0]=e.getMinutes(),o()[n+8>>2>>>0]=e.getHours(),o()[n+12>>2>>>0]=e.getDate(),o()[n+16>>2>>>0]=e.getMonth(),o()[n+20>>2>>>0]=e.getFullYear()-1900,o()[n+24>>2>>>0]=e.getDay();var r=0|kn(e);o()[n+28>>2>>>0]=r,o()[n+36>>2>>>0]=-60*e.getTimezoneOffset(),r=new Date(e.getFullYear(),6,1).getTimezoneOffset();var t=new Date(e.getFullYear(),0,1).getTimezoneOffset();e=0|(r!=t&&e.getTimezoneOffset()==Math.min(t,r)),o()[n+32>>2>>>0]=e},aa:function(e){var n=new Date(o()[e+20>>2>>>0]+1900,o()[e+16>>2>>>0],o()[e+12>>2>>>0],o()[e+8>>2>>>0],o()[e+4>>2>>>0],o()[e>>2>>>0],0),r=o()[e+32>>2>>>0],t=n.getTimezoneOffset(),a=new Date(n.getFullYear(),6,1).getTimezoneOffset(),i=new Date(n.getFullYear(),0,1).getTimezoneOffset(),u=Math.min(i,a);return 0>r?o()[e+32>>2>>>0]=Number(a!=i&&u==t):0<r!=(u==t)&&(a=Math.max(i,a),n.setTime(n.getTime()+6e4*((0<r?u:a)-t))),o()[e+24>>2>>>0]=n.getDay(),r=0|kn(n),o()[e+28>>2>>>0]=r,o()[e>>2>>>0]=n.getSeconds(),o()[e+4>>2>>>0]=n.getMinutes(),o()[e+8>>2>>>0]=n.getHours(),o()[e+12>>2>>>0]=n.getDate(),o()[e+16>>2>>>0]=n.getMonth(),o()[e+20>>2>>>0]=n.getYear(),n.getTime()/1e3|0},Y:Fn,Z:Pn,N:function(e,n,r){function t(e){return(e=e.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?e[1]:\"GMT\"}var a=(new Date).getFullYear(),u=new Date(a,0,1),f=new Date(a,6,1);a=u.getTimezoneOffset();var s=f.getTimezoneOffset(),c=Math.max(a,s);i()[e>>2>>>0]=60*c,o()[n>>2>>>0]=Number(a!=s),e=t(u),n=t(f),e=Rn(e),n=Rn(n),s<a?(i()[r>>2>>>0]=e,i()[r+4>>2>>>0]=n):(i()[r>>2>>>0]=n,i()[r+4>>2>>>0]=e)},n:function(){ae(\"\")},va:function(){ae(\"To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html\")},E:function(){},G:function(){return Date.now()},oa:function(){throw $+=1,\"unwind\"},P:function(){return 4294901760},q:En,w:function(){return v?require(\"os\").cpus().length:navigator.hardwareConcurrency},da:function(e,n,r){n/=2,Wn.length=n,r>>=3;for(var t=0;t<n;t++)Wn[t]=B[r+2*t]?B[r+2*t+1]:u()[r+2*t+1>>>0];return Zn[e].apply(null,Wn)},M:function(e){var n=r().length;if((e>>>=0)<=n||4294901760<e)return!1;for(var t=1;4>=t;t*=2){var a=n*(1+.2/t);a=Math.min(a,e+100663296);var o=Math,i=o.min;a=Math.max(e,a),a+=(65536-a%65536)%65536;e:{var u=P.buffer;try{P.grow(i.call(o,4294901760,a)-u.byteLength+65535>>>16),L();var f=1;break e}catch(e){}f=void 0}if(f)return!0}return!1},ha:jn,ia:Hn,V:be,z:Yn,C:Bn,ca:zn,B:Gn,a:P||f.wasmMemory,ma:Vn,p:function(e,n,r,t){return Vn(e,n,r,t)}};!function(){function e(e,n){return e=e.exports,f.asm=e,ye.zb.push(f.asm.Ua),V=f.asm.Xa,X.unshift(f.asm.wa),R=n,ye.Ib((()=>{if(ne--,f.monitorRunDependencies&&f.monitorRunDependencies(ne),0==ne&&(null!==re&&(clearInterval(re),re=null),te)){var e=te;te=null,e()}})),e}var n={a:$n};if(ne++,f.monitorRunDependencies&&f.monitorRunDependencies(ne),f.instantiateWasm)try{return f.instantiateWasm(n,e)}catch(e){k(\"Module.instantiateWasm callback failed with error: \"+e),c(e)}(function(e,n){var r=ee;return M||\"function\"!=typeof WebAssembly.instantiateStreaming||oe(r)||r.startsWith(\"file://\")||v||\"function\"!=typeof fetch?ue(r,e,n):fetch(r,{credentials:\"same-origin\"}).then((t=>WebAssembly.instantiateStreaming(t,e).then(n,(function(t){return k(\"wasm streaming compile failed: \"+t),k(\"falling back to ArrayBuffer instantiation\"),ue(r,e,n)}))))})(n,(function(n){e(n.instance,n.module)})).catch(c)}(),f._OrtInit=function(){return(f._OrtInit=f.asm.xa).apply(null,arguments)},f._OrtGetLastError=function(){return(f._OrtGetLastError=f.asm.ya).apply(null,arguments)},f._OrtCreateSessionOptions=function(){return(f._OrtCreateSessionOptions=f.asm.za).apply(null,arguments)},f._OrtAppendExecutionProvider=function(){return(f._OrtAppendExecutionProvider=f.asm.Aa).apply(null,arguments)},f._OrtAddSessionConfigEntry=function(){return(f._OrtAddSessionConfigEntry=f.asm.Ba).apply(null,arguments)},f._OrtReleaseSessionOptions=function(){return(f._OrtReleaseSessionOptions=f.asm.Ca).apply(null,arguments)},f._OrtCreateSession=function(){return(f._OrtCreateSession=f.asm.Da).apply(null,arguments)},f._OrtReleaseSession=function(){return(f._OrtReleaseSession=f.asm.Ea).apply(null,arguments)},f._OrtGetInputOutputCount=function(){return(f._OrtGetInputOutputCount=f.asm.Fa).apply(null,arguments)},f._OrtGetInputName=function(){return(f._OrtGetInputName=f.asm.Ga).apply(null,arguments)},f._OrtGetOutputName=function(){return(f._OrtGetOutputName=f.asm.Ha).apply(null,arguments)},f._OrtFree=function(){return(f._OrtFree=f.asm.Ia).apply(null,arguments)},f._OrtCreateTensor=function(){return(f._OrtCreateTensor=f.asm.Ja).apply(null,arguments)},f._OrtGetTensorData=function(){return(f._OrtGetTensorData=f.asm.Ka).apply(null,arguments)},f._OrtReleaseTensor=function(){return(f._OrtReleaseTensor=f.asm.La).apply(null,arguments)},f._OrtCreateRunOptions=function(){return(f._OrtCreateRunOptions=f.asm.Ma).apply(null,arguments)},f._OrtAddRunConfigEntry=function(){return(f._OrtAddRunConfigEntry=f.asm.Na).apply(null,arguments)},f._OrtReleaseRunOptions=function(){return(f._OrtReleaseRunOptions=f.asm.Oa).apply(null,arguments)},f._OrtRun=function(){return(f._OrtRun=f.asm.Pa).apply(null,arguments)},f._OrtEndProfiling=function(){return(f._OrtEndProfiling=f.asm.Qa).apply(null,arguments)};var Kn=f._pthread_self=function(){return(Kn=f._pthread_self=f.asm.Ra).apply(null,arguments)},Qn=f._malloc=function(){return(Qn=f._malloc=f.asm.Sa).apply(null,arguments)},er=f._free=function(){return(er=f._free=f.asm.Ta).apply(null,arguments)};function nr(){return(nr=f.asm.Va).apply(null,arguments)}f.__emscripten_tls_init=function(){return(f.__emscripten_tls_init=f.asm.Ua).apply(null,arguments)},f.__embind_initialize_bindings=function(){return(f.__embind_initialize_bindings=f.asm.Wa).apply(null,arguments)};var rr=f.__emscripten_thread_init=function(){return(rr=f.__emscripten_thread_init=f.asm.Ya).apply(null,arguments)};function tr(){return(tr=f.asm._a).apply(null,arguments)}function ar(){return(ar=f.asm.$a).apply(null,arguments)}f.__emscripten_thread_crashed=function(){return(f.__emscripten_thread_crashed=f.asm.Za).apply(null,arguments)};var or,ir=f.__emscripten_thread_exit=function(){return(ir=f.__emscripten_thread_exit=f.asm.ab).apply(null,arguments)},ur=f.__emscripten_check_mailbox=function(){return(ur=f.__emscripten_check_mailbox=f.asm.bb).apply(null,arguments)};function fr(){return(fr=f.asm.cb).apply(null,arguments)}function sr(){return(sr=f.asm.db).apply(null,arguments)}function cr(){return(cr=f.asm.eb).apply(null,arguments)}function lr(){return(lr=f.asm.fb).apply(null,arguments)}function pr(){function e(){if(!or&&(or=!0,f.calledRun=!0,!G)&&(w||ve(X),s(f),f.onRuntimeInitialized&&f.onRuntimeInitialized(),!w)){if(f.postRun)for(\"function\"==typeof f.postRun&&(f.postRun=[f.postRun]);f.postRun.length;){var e=f.postRun.shift();Z.unshift(e)}ve(Z)}}if(!(0<ne))if(w)s(f),w||ve(X),startWorker(f);else{if(f.preRun)for(\"function\"==typeof f.preRun&&(f.preRun=[f.preRun]);f.preRun.length;)Q();ve(J),0<ne||(f.setStatus?(f.setStatus(\"Running...\"),setTimeout((function(){setTimeout((function(){f.setStatus(\"\")}),1),e()}),1)):e())}}if(f.keepRuntimeAlive=K,f.wasmMemory=P,f.stackAlloc=lr,f.stackSave=sr,f.stackRestore=cr,f.UTF8ToString=he,f.stringToUTF8=ke,f.lengthBytesUTF8=Me,f.ExitStatus=fe,f.PThread=ye,te=function e(){or||pr(),or||(te=e)},f.preInit)for(\"function\"==typeof f.preInit&&(f.preInit=[f.preInit]);0<f.preInit.length;)f.preInit.pop()();return pr(),e.ready});\"object\"==typeof exports&&\"object\"==typeof module?module.exports=e:\"function\"==typeof define&&define.amd?define([],(function(){return e})):\"object\"==typeof exports&&(exports.ortWasmThreaded=e);\n","\nvar ortWasm = (() => {\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\n  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;\n  return (\nfunction(ortWasm = {})  {\n\nvar e;e||(e=typeof ortWasm !== 'undefined' ? ortWasm : {});var aa,m;e.ready=new Promise((a,b)=>{aa=a;m=b});var ba=Object.assign({},e),ca=\"./this.program\",da=\"object\"==typeof window,r=\"function\"==typeof importScripts,ea=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,v=\"\",fa,w,y;\nif(ea){var fs=require(\"fs\"),ha=require(\"path\");v=r?ha.dirname(v)+\"/\":__dirname+\"/\";fa=(a,b)=>{a=a.startsWith(\"file://\")?new URL(a):ha.normalize(a);return fs.readFileSync(a,b?void 0:\"utf8\")};y=a=>{a=fa(a,!0);a.buffer||(a=new Uint8Array(a));return a};w=(a,b,c,d=!0)=>{a=a.startsWith(\"file://\")?new URL(a):ha.normalize(a);fs.readFile(a,d?void 0:\"utf8\",(g,h)=>{g?c(g):b(d?h.buffer:h)})};!e.thisProgram&&1<process.argv.length&&(ca=process.argv[1].replace(/\\\\/g,\"/\"));process.argv.slice(2);e.inspect=()=>\"[Emscripten Module object]\"}else if(da||\nr)r?v=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(v=document.currentScript.src),_scriptDir&&(v=_scriptDir),0!==v.indexOf(\"blob:\")?v=v.substr(0,v.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):v=\"\",fa=a=>{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.send(null);return b.responseText},r&&(y=a=>{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.responseType=\"arraybuffer\";b.send(null);return new Uint8Array(b.response)}),w=(a,b,c)=>{var d=new XMLHttpRequest;d.open(\"GET\",a,!0);d.responseType=\n\"arraybuffer\";d.onload=()=>{200==d.status||0==d.status&&d.response?b(d.response):c()};d.onerror=c;d.send(null)};var ia=e.print||console.log.bind(console),z=e.printErr||console.warn.bind(console);Object.assign(e,ba);ba=null;e.thisProgram&&(ca=e.thisProgram);var A;e.wasmBinary&&(A=e.wasmBinary);var noExitRuntime=e.noExitRuntime||!0;\"object\"!=typeof WebAssembly&&B(\"no native wasm support detected\");var C,ja=!1,D,F,G,I,J,K,ka,la,ma,na;\nfunction oa(){var a=C.buffer;e.HEAP8=D=new Int8Array(a);e.HEAP16=G=new Int16Array(a);e.HEAP32=J=new Int32Array(a);e.HEAPU8=F=new Uint8Array(a);e.HEAPU16=I=new Uint16Array(a);e.HEAPU32=K=new Uint32Array(a);e.HEAPF32=ka=new Float32Array(a);e.HEAPF64=na=new Float64Array(a);e.HEAP64=la=new BigInt64Array(a);e.HEAPU64=ma=new BigUint64Array(a)}var pa=[],qa=[],ra=[];function sa(){var a=e.preRun.shift();pa.unshift(a)}var L=0,ta=null,M=null;\nfunction B(a){if(e.onAbort)e.onAbort(a);a=\"Aborted(\"+a+\")\";z(a);ja=!0;a=new WebAssembly.RuntimeError(a+\". Build with -sASSERTIONS for more info.\");m(a);throw a;}function ua(a){return a.startsWith(\"data:application/octet-stream;base64,\")}var N;N=\"ort-wasm.wasm\";if(!ua(N)){var va=N;N=e.locateFile?e.locateFile(va,v):v+va}function wa(a){try{if(a==N&&A)return new Uint8Array(A);if(y)return y(a);throw\"both async and sync fetching of the wasm failed\";}catch(b){B(b)}}\nfunction xa(a){if(!A&&(da||r)){if(\"function\"==typeof fetch&&!a.startsWith(\"file://\"))return fetch(a,{credentials:\"same-origin\"}).then(b=>{if(!b.ok)throw\"failed to load wasm binary file at '\"+a+\"'\";return b.arrayBuffer()}).catch(()=>wa(a));if(w)return new Promise((b,c)=>{w(a,d=>b(new Uint8Array(d)),c)})}return Promise.resolve().then(()=>wa(a))}function ya(a,b,c){return xa(a).then(d=>WebAssembly.instantiate(d,b)).then(d=>d).then(c,d=>{z(\"failed to asynchronously prepare wasm: \"+d);B(d)})}\nfunction za(a,b){var c=N;return A||\"function\"!=typeof WebAssembly.instantiateStreaming||ua(c)||c.startsWith(\"file://\")||ea||\"function\"!=typeof fetch?ya(c,a,b):fetch(c,{credentials:\"same-origin\"}).then(d=>WebAssembly.instantiateStreaming(d,a).then(b,function(g){z(\"wasm streaming compile failed: \"+g);z(\"falling back to ArrayBuffer instantiation\");return ya(c,a,b)}))}function Aa(a){for(;0<a.length;)a.shift()(e)}\nfunction Ba(a){this.Ja=a-24;this.Wa=function(b){K[this.Ja+4>>2>>>0]=b};this.Va=function(b){K[this.Ja+8>>2>>>0]=b};this.Ra=function(b,c){this.Sa();this.Wa(b);this.Va(c)};this.Sa=function(){K[this.Ja+16>>2>>>0]=0}}var Ca=0,Da=0,Ea=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;\nfunction Fa(a,b,c){b>>>=0;var d=b+c;for(c=b;a[c]&&!(c>=d);)++c;if(16<c-b&&a.buffer&&Ea)return Ea.decode(a.subarray(b,c));for(d=\"\";b<c;){var g=a[b++];if(g&128){var h=a[b++]&63;if(192==(g&224))d+=String.fromCharCode((g&31)<<6|h);else{var l=a[b++]&63;g=224==(g&240)?(g&15)<<12|h<<6|l:(g&7)<<18|h<<12|l<<6|a[b++]&63;65536>g?d+=String.fromCharCode(g):(g-=65536,d+=String.fromCharCode(55296|g>>10,56320|g&1023))}}else d+=String.fromCharCode(g)}return d}function O(a,b){return(a>>>=0)?Fa(F,a,b):\"\"}\nfunction P(a){for(var b=0,c=0;c<a.length;++c){var d=a.charCodeAt(c);127>=d?b++:2047>=d?b+=2:55296<=d&&57343>=d?(b+=4,++c):b+=3}return b}\nfunction Ga(a,b,c,d){c>>>=0;if(!(0<d))return 0;var g=c;d=c+d-1;for(var h=0;h<a.length;++h){var l=a.charCodeAt(h);if(55296<=l&&57343>=l){var k=a.charCodeAt(++h);l=65536+((l&1023)<<10)|k&1023}if(127>=l){if(c>=d)break;b[c++>>>0]=l}else{if(2047>=l){if(c+1>=d)break;b[c++>>>0]=192|l>>6}else{if(65535>=l){if(c+2>=d)break;b[c++>>>0]=224|l>>12}else{if(c+3>=d)break;b[c++>>>0]=240|l>>18;b[c++>>>0]=128|l>>12&63}b[c++>>>0]=128|l>>6&63}b[c++>>>0]=128|l&63}}b[c>>>0]=0;return c-g}\nfunction Ha(a,b,c){return Ga(a,F,b,c)}function Ia(a){if(null===a)return\"null\";var b=typeof a;return\"object\"===b||\"array\"===b||\"function\"===b?a.toString():\"\"+a}var Ja=void 0;function Q(a){for(var b=\"\";F[a>>>0];)b+=Ja[F[a++>>>0]];return b}var Ka={},La={},Ma={};function Na(a){if(void 0===a)return\"_unknown\";a=a.replace(/[^a-zA-Z0-9_]/g,\"$\");var b=a.charCodeAt(0);return 48<=b&&57>=b?\"_\"+a:a}function Oa(a,b){a=Na(a);return{[a]:function(){return b.apply(this,arguments)}}[a]}\nfunction Pa(a){var b=Error,c=Oa(a,function(d){this.name=a;this.message=d;d=Error(d).stack;void 0!==d&&(this.stack=this.toString()+\"\\n\"+d.replace(/^Error(:[^\\n]*)?\\n/,\"\"))});c.prototype=Object.create(b.prototype);c.prototype.constructor=c;c.prototype.toString=function(){return void 0===this.message?this.name:this.name+\": \"+this.message};return c}var Qa=void 0;function R(a){throw new Qa(a);}\nfunction S(a,b,c={}){if(!(\"argPackAdvance\"in b))throw new TypeError(\"registerType registeredInstance requires argPackAdvance\");var d=b.name;a||R('type \"'+d+'\" must have a positive integer typeid pointer');if(La.hasOwnProperty(a)){if(c.Za)return;R(\"Cannot register type '\"+d+\"' twice\")}La[a]=b;delete Ma[a];Ka.hasOwnProperty(a)&&(b=Ka[a],delete Ka[a],b.forEach(g=>g()))}\nfunction Ra(a,b,c){switch(b){case 0:return c?function(d){return D[d>>>0]}:function(d){return F[d>>>0]};case 1:return c?function(d){return G[d>>>1]}:function(d){return I[d>>>1]};case 2:return c?function(d){return J[d>>>2]}:function(d){return K[d>>>2]};case 3:return c?function(d){return la[d>>3]}:function(d){return ma[d>>3]};default:throw new TypeError(\"Unknown integer type: \"+a);}}\nfunction T(a){switch(a){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError(\"Unknown type size: \"+a);}}var U=new function(){this.Ja=[void 0];this.Ra=[];this.get=function(a){return this.Ja[a]};this.Va=function(a){let b=this.Ra.pop()||this.Ja.length;this.Ja[b]=a;return b};this.Wa=function(a){this.Ja[a]=void 0;this.Ra.push(a)}};function Sa(a){a>=U.Sa&&0===--U.get(a).Ya&&U.Wa(a)}\nvar V=a=>{a||R(\"Cannot use deleted val. handle = \"+a);return U.get(a).value},W=a=>{switch(a){case void 0:return 1;case null:return 2;case !0:return 3;case !1:return 4;default:return U.Va({Ya:1,value:a})}};function Ta(a){return this.fromWireType(J[a>>2>>>0])}function Ua(a,b){switch(b){case 2:return function(c){return this.fromWireType(ka[c>>>2])};case 3:return function(c){return this.fromWireType(na[c>>>3])};default:throw new TypeError(\"Unknown float type: \"+a);}}\nvar Va=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf-16le\"):void 0;function Wa(a,b){var c=a>>1;for(var d=c+b/2;!(c>=d)&&I[c>>>0];)++c;c<<=1;if(32<c-a&&Va)return Va.decode(F.subarray(a>>>0,c>>>0));c=\"\";for(d=0;!(d>=b/2);++d){var g=G[a+2*d>>1>>>0];if(0==g)break;c+=String.fromCharCode(g)}return c}function Xa(a,b,c){void 0===c&&(c=2147483647);if(2>c)return 0;c-=2;var d=b;c=c<2*a.length?c/2:a.length;for(var g=0;g<c;++g)G[b>>1>>>0]=a.charCodeAt(g),b+=2;G[b>>1>>>0]=0;return b-d}\nfunction Ya(a){return 2*a.length}function Za(a,b){for(var c=0,d=\"\";!(c>=b/4);){var g=J[a+4*c>>2>>>0];if(0==g)break;++c;65536<=g?(g-=65536,d+=String.fromCharCode(55296|g>>10,56320|g&1023)):d+=String.fromCharCode(g)}return d}function $a(a,b,c){b>>>=0;void 0===c&&(c=2147483647);if(4>c)return 0;var d=b;c=d+c-4;for(var g=0;g<a.length;++g){var h=a.charCodeAt(g);if(55296<=h&&57343>=h){var l=a.charCodeAt(++g);h=65536+((h&1023)<<10)|l&1023}J[b>>2>>>0]=h;b+=4;if(b+4>c)break}J[b>>2>>>0]=0;return b-d}\nfunction ab(a){for(var b=0,c=0;c<a.length;++c){var d=a.charCodeAt(c);55296<=d&&57343>=d&&++c;b+=4}return b}function X(a,b){var c=La[a];if(void 0===c){a=bb(a);var d=Q(a);Y(a);R(b+\" has unknown type \"+d)}return c}var cb={};function db(a){var b=cb[a];return void 0===b?Q(a):b}var eb=[];function gb(){return\"object\"==typeof globalThis?globalThis:Function(\"return this\")()}function hb(a){var b=eb.length;eb.push(a);return b}\nfunction ib(a,b){for(var c=Array(a),d=0;d<a;++d)c[d]=X(K[b+4*d>>2>>>0],\"parameter \"+d);return c}var jb=[];function kb(a){var b=Function;if(!(b instanceof Function))throw new TypeError(\"new_ called with constructor type \"+typeof b+\" which is not a function\");var c=Oa(b.name||\"unknownFunctionName\",function(){});c.prototype=b.prototype;c=new c;a=b.apply(c,a);return a instanceof Object?a:c}\nfunction lb(a){for(var b=\"\",c=0;c<a;++c)b+=(0!==c?\", \":\"\")+\"arg\"+c;var d=\"return function emval_allocator_\"+a+\"(constructor, argTypes, args) {\\n  var HEAPU32 = getMemory();\\n\";for(c=0;c<a;++c)d+=\"var argType\"+c+\" = requireRegisteredType(HEAPU32[((argTypes)>>2)], 'parameter \"+c+\"');\\nvar arg\"+c+\" = argType\"+c+\".readValueFromPointer(args);\\nargs += argType\"+c+\"['argPackAdvance'];\\nargTypes += 4;\\n\";return(new Function(\"requireRegisteredType\",\"Module\",\"valueToHandle\",\"getMemory\",d+(\"var obj = new constructor(\"+\nb+\");\\nreturn valueToHandle(obj);\\n}\\n\")))(X,e,W,()=>K)}var mb={};function Z(a){return 0===a%4&&(0!==a%100||0===a%400)}var nb=[0,31,60,91,121,152,182,213,244,274,305,335],ob=[0,31,59,90,120,151,181,212,243,273,304,334];function pb(a){return(Z(a.getFullYear())?nb:ob)[a.getMonth()]+a.getDate()-1}function qb(a){var b=P(a)+1,c=rb(b);c&&Ha(a,c,b);return c}var sb;sb=ea?()=>{var a=process.hrtime();return 1E3*a[0]+a[1]/1E6}:()=>performance.now();var tb={};\nfunction ub(){if(!vb){var a={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:ca||\"./this.program\"},b;for(b in tb)void 0===tb[b]?delete a[b]:a[b]=tb[b];var c=[];for(b in a)c.push(b+\"=\"+a[b]);vb=c}return vb}var vb,wb=[null,[],[]],xb=[31,29,31,30,31,30,31,31,30,31,30,31],yb=[31,28,31,30,31,30,31,31,30,31,30,31];\nfunction zb(a){var b=Array(P(a)+1);Ga(a,b,0,b.length);return b}\nfunction Ab(a,b,c,d){function g(f,q,t){for(f=\"number\"==typeof f?f.toString():f||\"\";f.length<q;)f=t[0]+f;return f}function h(f,q){return g(f,q,\"0\")}function l(f,q){function t(fb){return 0>fb?-1:0<fb?1:0}var H;0===(H=t(f.getFullYear()-q.getFullYear()))&&0===(H=t(f.getMonth()-q.getMonth()))&&(H=t(f.getDate()-q.getDate()));return H}function k(f){switch(f.getDay()){case 0:return new Date(f.getFullYear()-1,11,29);case 1:return f;case 2:return new Date(f.getFullYear(),0,3);case 3:return new Date(f.getFullYear(),\n0,2);case 4:return new Date(f.getFullYear(),0,1);case 5:return new Date(f.getFullYear()-1,11,31);case 6:return new Date(f.getFullYear()-1,11,30)}}function n(f){var q=f.Oa;for(f=new Date((new Date(f.Pa+1900,0,1)).getTime());0<q;){var t=f.getMonth(),H=(Z(f.getFullYear())?xb:yb)[t];if(q>H-f.getDate())q-=H-f.getDate()+1,f.setDate(1),11>t?f.setMonth(t+1):(f.setMonth(0),f.setFullYear(f.getFullYear()+1));else{f.setDate(f.getDate()+q);break}}t=new Date(f.getFullYear()+1,0,4);q=k(new Date(f.getFullYear(),\n0,4));t=k(t);return 0>=l(q,f)?0>=l(t,f)?f.getFullYear()+1:f.getFullYear():f.getFullYear()-1}var p=J[d+40>>2>>>0];d={cb:J[d>>2>>>0],bb:J[d+4>>2>>>0],Ta:J[d+8>>2>>>0],Xa:J[d+12>>2>>>0],Ua:J[d+16>>2>>>0],Pa:J[d+20>>2>>>0],Na:J[d+24>>2>>>0],Oa:J[d+28>>2>>>0],fb:J[d+32>>2>>>0],ab:J[d+36>>2>>>0],eb:p?O(p):\"\"};c=O(c);p={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\n\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var u in p)c=c.replace(new RegExp(u,\"g\"),p[u]);var x=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),E=\"January February March April May June July August September October November December\".split(\" \");p={\"%a\":function(f){return x[f.Na].substring(0,3)},\"%A\":function(f){return x[f.Na]},\"%b\":function(f){return E[f.Ua].substring(0,\n3)},\"%B\":function(f){return E[f.Ua]},\"%C\":function(f){return h((f.Pa+1900)/100|0,2)},\"%d\":function(f){return h(f.Xa,2)},\"%e\":function(f){return g(f.Xa,2,\" \")},\"%g\":function(f){return n(f).toString().substring(2)},\"%G\":function(f){return n(f)},\"%H\":function(f){return h(f.Ta,2)},\"%I\":function(f){f=f.Ta;0==f?f=12:12<f&&(f-=12);return h(f,2)},\"%j\":function(f){for(var q=0,t=0;t<=f.Ua-1;q+=(Z(f.Pa+1900)?xb:yb)[t++]);return h(f.Xa+q,3)},\"%m\":function(f){return h(f.Ua+1,2)},\"%M\":function(f){return h(f.bb,\n2)},\"%n\":function(){return\"\\n\"},\"%p\":function(f){return 0<=f.Ta&&12>f.Ta?\"AM\":\"PM\"},\"%S\":function(f){return h(f.cb,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(f){return f.Na||7},\"%U\":function(f){return h(Math.floor((f.Oa+7-f.Na)/7),2)},\"%V\":function(f){var q=Math.floor((f.Oa+7-(f.Na+6)%7)/7);2>=(f.Na+371-f.Oa-2)%7&&q++;if(q)53==q&&(t=(f.Na+371-f.Oa)%7,4==t||3==t&&Z(f.Pa)||(q=1));else{q=52;var t=(f.Na+7-f.Oa-1)%7;(4==t||5==t&&Z(f.Pa%400-1))&&q++}return h(q,2)},\"%w\":function(f){return f.Na},\"%W\":function(f){return h(Math.floor((f.Oa+\n7-(f.Na+6)%7)/7),2)},\"%y\":function(f){return(f.Pa+1900).toString().substring(2)},\"%Y\":function(f){return f.Pa+1900},\"%z\":function(f){f=f.ab;var q=0<=f;f=Math.abs(f)/60;return(q?\"+\":\"-\")+String(\"0000\"+(f/60*100+f%60)).slice(-4)},\"%Z\":function(f){return f.eb},\"%%\":function(){return\"%\"}};c=c.replace(/%%/g,\"\\x00\\x00\");for(u in p)c.includes(u)&&(c=c.replace(new RegExp(u,\"g\"),p[u](d)));c=c.replace(/\\0\\0/g,\"%\");u=zb(c);if(u.length>b)return 0;D.set(u,a>>>0);return u.length-1}\nfor(var Bb=Array(256),Cb=0;256>Cb;++Cb)Bb[Cb]=String.fromCharCode(Cb);Ja=Bb;Qa=e.BindingError=Pa(\"BindingError\");e.InternalError=Pa(\"InternalError\");U.Ja.push({value:void 0},{value:null},{value:!0},{value:!1});U.Sa=U.Ja.length;e.count_emval_handles=function(){for(var a=0,b=U.Sa;b<U.Ja.length;++b)void 0!==U.Ja[b]&&++a;return a};\nvar Db={a:function(a,b,c){(new Ba(a)).Ra(b,c);Ca=a;Da++;throw Ca;},da:function(){B(\"To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html\")},v:function(){return 0},ba:function(){},N:function(){},P:function(){},H:function(){return 0},$:function(){},V:function(){},_:function(){},A:function(){},O:function(){},L:function(){},aa:function(){},M:function(){},D:function(a,b,c,d,g){b=Q(b);c=T(c);var h=-1!=b.indexOf(\"u\");h&&(g=(1n<<64n)-1n);S(a,{name:b,\nfromWireType:function(l){return l},toWireType:function(l,k){if(\"bigint\"!=typeof k&&\"number\"!=typeof k)throw new TypeError('Cannot convert \"'+Ia(k)+'\" to '+this.name);if(k<d||k>g)throw new TypeError('Passing a number \"'+Ia(k)+'\" from JS side to C/C++ side to an argument of type \"'+b+'\", which is outside the valid range ['+d+\", \"+g+\"]!\");return k},argPackAdvance:8,readValueFromPointer:Ra(b,c,!h),Qa:null})},ga:function(a,b,c,d,g){var h=T(c);b=Q(b);S(a,{name:b,fromWireType:function(l){return!!l},toWireType:function(l,\nk){return k?d:g},argPackAdvance:8,readValueFromPointer:function(l){if(1===c)var k=D;else if(2===c)k=G;else if(4===c)k=J;else throw new TypeError(\"Unknown boolean type size: \"+b);return this.fromWireType(k[l>>>h])},Qa:null})},fa:function(a,b){b=Q(b);S(a,{name:b,fromWireType:function(c){var d=V(c);Sa(c);return d},toWireType:function(c,d){return W(d)},argPackAdvance:8,readValueFromPointer:Ta,Qa:null})},C:function(a,b,c){c=T(c);b=Q(b);S(a,{name:b,fromWireType:function(d){return d},toWireType:function(d,\ng){return g},argPackAdvance:8,readValueFromPointer:Ua(b,c),Qa:null})},p:function(a,b,c,d,g){b=Q(b);-1===g&&(g=4294967295);g=T(c);var h=k=>k;if(0===d){var l=32-8*c;h=k=>k<<l>>>l}c=b.includes(\"unsigned\")?function(k,n){return n>>>0}:function(k,n){return n};S(a,{name:b,fromWireType:h,toWireType:c,argPackAdvance:8,readValueFromPointer:Ra(b,g,0!==d),Qa:null})},l:function(a,b,c){function d(h){h>>=2;var l=K;return new g(l.buffer,l[h+1>>>0],l[h>>>0])}var g=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,\nUint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array][b];c=Q(c);S(a,{name:c,fromWireType:d,argPackAdvance:8,readValueFromPointer:d},{Za:!0})},E:function(a,b){b=Q(b);var c=\"std::string\"===b;S(a,{name:b,fromWireType:function(d){var g=K[d>>2>>>0],h=d+4;if(c)for(var l=h,k=0;k<=g;++k){var n=h+k;if(k==g||0==F[n>>>0]){l=O(l,n-l);if(void 0===p)var p=l;else p+=String.fromCharCode(0),p+=l;l=n+1}}else{p=Array(g);for(k=0;k<g;++k)p[k]=String.fromCharCode(F[h+k>>>0]);p=p.join(\"\")}Y(d);return p},toWireType:function(d,\ng){g instanceof ArrayBuffer&&(g=new Uint8Array(g));var h=\"string\"==typeof g;h||g instanceof Uint8Array||g instanceof Uint8ClampedArray||g instanceof Int8Array||R(\"Cannot pass non-string to std::string\");var l=c&&h?P(g):g.length;var k=rb(4+l+1);var n=k+4>>>0;K[k>>2>>>0]=l;if(c&&h)Ha(g,n,l+1);else if(h)for(h=0;h<l;++h){var p=g.charCodeAt(h);255<p&&(Y(n),R(\"String has UTF-16 code units that do not fit in 8 bits\"));F[n+h>>>0]=p}else for(h=0;h<l;++h)F[n+h>>>0]=g[h];null!==d&&d.push(Y,k);return k},argPackAdvance:8,\nreadValueFromPointer:Ta,Qa:function(d){Y(d)}})},x:function(a,b,c){c=Q(c);if(2===b){var d=Wa;var g=Xa;var h=Ya;var l=()=>I;var k=1}else 4===b&&(d=Za,g=$a,h=ab,l=()=>K,k=2);S(a,{name:c,fromWireType:function(n){for(var p=K[n>>>2],u=l(),x,E=n+4,f=0;f<=p;++f){var q=n+4+f*b;if(f==p||0==u[q>>>k])E=d(E,q-E),void 0===x?x=E:(x+=String.fromCharCode(0),x+=E),E=q+b}Y(n);return x},toWireType:function(n,p){\"string\"!=typeof p&&R(\"Cannot pass non-string to C++ string type \"+c);var u=h(p),x=rb(4+u+b);x>>>=0;K[x>>>\n2]=u>>k;g(p,x+4,u+b);null!==n&&n.push(Y,x);return x},argPackAdvance:8,readValueFromPointer:Ta,Qa:function(n){Y(n)}})},ha:function(a,b){b=Q(b);S(a,{$a:!0,name:b,argPackAdvance:0,fromWireType:function(){},toWireType:function(){}})},ca:function(){return!0},o:function(a,b,c){a=V(a);b=X(b,\"emval::as\");var d=[],g=W(d);K[c>>2>>>0]=g;return b.toWireType(d,a)},h:function(a,b,c,d,g){a=eb[a];b=V(b);c=db(c);var h=[];K[d>>2>>>0]=W(h);return a(b,c,h,g)},q:function(a,b,c,d){a=eb[a];b=V(b);c=db(c);a(b,c,null,d)},\nb:Sa,F:function(a,b){a=V(a);b=V(b);return a==b},u:function(a){if(0===a)return W(gb());a=db(a);return W(gb()[a])},g:function(a,b){var c=ib(a,b),d=c[0];b=d.name+\"_$\"+c.slice(1).map(function(u){return u.name}).join(\"_\")+\"$\";var g=jb[b];if(void 0!==g)return g;g=[\"retType\"];for(var h=[d],l=\"\",k=0;k<a-1;++k)l+=(0!==k?\", \":\"\")+\"arg\"+k,g.push(\"argType\"+k),h.push(c[1+k]);var n=\"return function \"+Na(\"methodCaller_\"+b)+\"(handle, name, destructors, args) {\\n\",p=0;for(k=0;k<a-1;++k)n+=\"    var arg\"+k+\" = argType\"+\nk+\".readValueFromPointer(args\"+(p?\"+\"+p:\"\")+\");\\n\",p+=c[k+1].argPackAdvance;n+=\"    var rv = handle[name](\"+l+\");\\n\";for(k=0;k<a-1;++k)c[k+1].deleteObject&&(n+=\"    argType\"+k+\".deleteObject(arg\"+k+\");\\n\");d.$a||(n+=\"    return retType.toWireType(destructors, rv);\\n\");g.push(n+\"};\\n\");a=kb(g).apply(null,h);g=hb(a);return jb[b]=g},r:function(a,b){a=V(a);b=V(b);return W(a[b])},c:function(a){4<a&&(U.get(a).Ya+=1)},G:function(a,b,c,d){a=V(a);var g=mb[b];g||(g=lb(b),mb[b]=g);return g(a,c,d)},s:function(){return W([])},\nk:function(a){a=V(a);for(var b=Array(a.length),c=0;c<a.length;c++)b[c]=a[c];return W(b)},d:function(a){return W(db(a))},j:function(){return W({})},f:function(a){for(var b=V(a);b.length;){var c=b.pop();b.pop()(c)}Sa(a)},i:function(a,b,c){a=V(a);b=V(b);c=V(c);a[b]=c},e:function(a,b){a=X(a,\"_emval_take_value\");a=a.readValueFromPointer(b);return W(a)},S:function(a,b){a=new Date(1E3*(K[a>>>2]+4294967296*J[a+4>>>2]));J[b>>2>>>0]=a.getUTCSeconds();J[b+4>>2>>>0]=a.getUTCMinutes();J[b+8>>2>>>0]=a.getUTCHours();\nJ[b+12>>2>>>0]=a.getUTCDate();J[b+16>>2>>>0]=a.getUTCMonth();J[b+20>>2>>>0]=a.getUTCFullYear()-1900;J[b+24>>2>>>0]=a.getUTCDay();J[b+28>>2>>>0]=(a.getTime()-Date.UTC(a.getUTCFullYear(),0,1,0,0,0,0))/864E5|0},T:function(a,b){a=new Date(1E3*(K[a>>>2]+4294967296*J[a+4>>>2]));J[b>>2>>>0]=a.getSeconds();J[b+4>>2>>>0]=a.getMinutes();J[b+8>>2>>>0]=a.getHours();J[b+12>>2>>>0]=a.getDate();J[b+16>>2>>>0]=a.getMonth();J[b+20>>2>>>0]=a.getFullYear()-1900;J[b+24>>2>>>0]=a.getDay();J[b+28>>2>>>0]=pb(a)|0;J[b+36>>\n2>>>0]=-(60*a.getTimezoneOffset());var c=(new Date(a.getFullYear(),6,1)).getTimezoneOffset(),d=(new Date(a.getFullYear(),0,1)).getTimezoneOffset();J[b+32>>2>>>0]=(c!=d&&a.getTimezoneOffset()==Math.min(d,c))|0},U:function(a){var b=new Date(J[a+20>>2>>>0]+1900,J[a+16>>2>>>0],J[a+12>>2>>>0],J[a+8>>2>>>0],J[a+4>>2>>>0],J[a>>2>>>0],0),c=J[a+32>>2>>>0],d=b.getTimezoneOffset(),g=(new Date(b.getFullYear(),6,1)).getTimezoneOffset(),h=(new Date(b.getFullYear(),0,1)).getTimezoneOffset(),l=Math.min(h,g);0>c?\nJ[a+32>>2>>>0]=Number(g!=h&&l==d):0<c!=(l==d)&&(g=Math.max(h,g),b.setTime(b.getTime()+6E4*((0<c?l:g)-d)));J[a+24>>2>>>0]=b.getDay();J[a+28>>2>>>0]=pb(b)|0;J[a>>2>>>0]=b.getSeconds();J[a+4>>2>>>0]=b.getMinutes();J[a+8>>2>>>0]=b.getHours();J[a+12>>2>>>0]=b.getDate();J[a+16>>2>>>0]=b.getMonth();J[a+20>>2>>>0]=b.getYear();return b.getTime()/1E3|0},Q:function(){return-52},R:function(){},J:function(a,b,c){function d(n){return(n=n.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?n[1]:\"GMT\"}var g=(new Date).getFullYear(),\nh=new Date(g,0,1),l=new Date(g,6,1);g=h.getTimezoneOffset();var k=l.getTimezoneOffset();K[a>>2>>>0]=60*Math.max(g,k);J[b>>2>>>0]=Number(g!=k);a=d(h);b=d(l);a=qb(a);b=qb(b);k<g?(K[c>>2>>>0]=a,K[c+4>>2>>>0]=b):(K[c>>2>>>0]=b,K[c+4>>2>>>0]=a)},t:function(){B(\"\")},ia:function(){B(\"To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html\")},B:function(){return Date.now()},K:function(){return 4294901760},n:sb,Z:function(a,b,c){F.copyWithin(a>>>0,b>>>\n0,b+c>>>0)},I:function(a){var b=F.length;a>>>=0;if(4294901760<a)return!1;for(var c=1;4>=c;c*=2){var d=b*(1+.2/c);d=Math.min(d,a+100663296);var g=Math,h=g.min;d=Math.max(a,d);d+=(65536-d%65536)%65536;a:{var l=C.buffer;try{C.grow(h.call(g,4294901760,d)-l.byteLength+65535>>>16);oa();var k=1;break a}catch(n){}k=void 0}if(k)return!0}return!1},X:function(a,b){var c=0;ub().forEach(function(d,g){var h=b+c;g=K[a+4*g>>2>>>0]=h;for(h=0;h<d.length;++h)D[g++>>0>>>0]=d.charCodeAt(h);D[g>>0>>>0]=0;c+=d.length+1});\nreturn 0},Y:function(a,b){var c=ub();K[a>>2>>>0]=c.length;var d=0;c.forEach(function(g){d+=g.length+1});K[b>>2>>>0]=d;return 0},w:function(){return 52},z:function(){return 52},W:function(){return 70},y:function(a,b,c,d){for(var g=0,h=0;h<c;h++){var l=K[b>>2>>>0],k=K[b+4>>2>>>0];b+=8;for(var n=0;n<k;n++){var p=F[l+n>>>0],u=wb[a];0===p||10===p?((1===a?ia:z)(Fa(u,0)),u.length=0):u.push(p)}g+=k}K[d>>2>>>0]=g;return 0},ea:Ab,m:function(a,b,c,d){return Ab(a,b,c,d)}};\n(function(){function a(c){c=c.exports;e.asm=c;C=e.asm.ja;oa();qa.unshift(e.asm.ka);L--;e.monitorRunDependencies&&e.monitorRunDependencies(L);if(0==L&&(null!==ta&&(clearInterval(ta),ta=null),M)){var d=M;M=null;d()}return c}var b={a:Db};L++;e.monitorRunDependencies&&e.monitorRunDependencies(L);if(e.instantiateWasm)try{return e.instantiateWasm(b,a)}catch(c){z(\"Module.instantiateWasm callback failed with error: \"+c),m(c)}za(b,function(c){a(c.instance)}).catch(m);return{}})();\ne._OrtInit=function(){return(e._OrtInit=e.asm.la).apply(null,arguments)};e._OrtGetLastError=function(){return(e._OrtGetLastError=e.asm.ma).apply(null,arguments)};e._OrtCreateSessionOptions=function(){return(e._OrtCreateSessionOptions=e.asm.na).apply(null,arguments)};e._OrtAppendExecutionProvider=function(){return(e._OrtAppendExecutionProvider=e.asm.oa).apply(null,arguments)};e._OrtAddSessionConfigEntry=function(){return(e._OrtAddSessionConfigEntry=e.asm.pa).apply(null,arguments)};\ne._OrtReleaseSessionOptions=function(){return(e._OrtReleaseSessionOptions=e.asm.qa).apply(null,arguments)};e._OrtCreateSession=function(){return(e._OrtCreateSession=e.asm.ra).apply(null,arguments)};e._OrtReleaseSession=function(){return(e._OrtReleaseSession=e.asm.sa).apply(null,arguments)};e._OrtGetInputOutputCount=function(){return(e._OrtGetInputOutputCount=e.asm.ta).apply(null,arguments)};e._OrtGetInputName=function(){return(e._OrtGetInputName=e.asm.ua).apply(null,arguments)};\ne._OrtGetOutputName=function(){return(e._OrtGetOutputName=e.asm.va).apply(null,arguments)};e._OrtFree=function(){return(e._OrtFree=e.asm.wa).apply(null,arguments)};e._OrtCreateTensor=function(){return(e._OrtCreateTensor=e.asm.xa).apply(null,arguments)};e._OrtGetTensorData=function(){return(e._OrtGetTensorData=e.asm.ya).apply(null,arguments)};e._OrtReleaseTensor=function(){return(e._OrtReleaseTensor=e.asm.za).apply(null,arguments)};\ne._OrtCreateRunOptions=function(){return(e._OrtCreateRunOptions=e.asm.Aa).apply(null,arguments)};e._OrtAddRunConfigEntry=function(){return(e._OrtAddRunConfigEntry=e.asm.Ba).apply(null,arguments)};e._OrtReleaseRunOptions=function(){return(e._OrtReleaseRunOptions=e.asm.Ca).apply(null,arguments)};e._OrtRun=function(){return(e._OrtRun=e.asm.Da).apply(null,arguments)};e._OrtEndProfiling=function(){return(e._OrtEndProfiling=e.asm.Ea).apply(null,arguments)};\nvar rb=e._malloc=function(){return(rb=e._malloc=e.asm.Fa).apply(null,arguments)},Y=e._free=function(){return(Y=e._free=e.asm.Ga).apply(null,arguments)};function bb(){return(bb=e.asm.Ha).apply(null,arguments)}e.__embind_initialize_bindings=function(){return(e.__embind_initialize_bindings=e.asm.Ia).apply(null,arguments)};function Eb(){return(Eb=e.asm.Ka).apply(null,arguments)}function Fb(){return(Fb=e.asm.La).apply(null,arguments)}function Gb(){return(Gb=e.asm.Ma).apply(null,arguments)}\ne.stackAlloc=Gb;e.stackSave=Eb;e.stackRestore=Fb;e.UTF8ToString=O;e.stringToUTF8=Ha;e.lengthBytesUTF8=P;var Hb;M=function Ib(){Hb||Jb();Hb||(M=Ib)};\nfunction Jb(){function a(){if(!Hb&&(Hb=!0,e.calledRun=!0,!ja)){Aa(qa);aa(e);if(e.onRuntimeInitialized)e.onRuntimeInitialized();if(e.postRun)for(\"function\"==typeof e.postRun&&(e.postRun=[e.postRun]);e.postRun.length;){var b=e.postRun.shift();ra.unshift(b)}Aa(ra)}}if(!(0<L)){if(e.preRun)for(\"function\"==typeof e.preRun&&(e.preRun=[e.preRun]);e.preRun.length;)sa();Aa(pa);0<L||(e.setStatus?(e.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){e.setStatus(\"\")},1);a()},1)):a())}}\nif(e.preInit)for(\"function\"==typeof e.preInit&&(e.preInit=[e.preInit]);0<e.preInit.length;)e.preInit.pop()();Jb();\n\n\n  return ortWasm.ready\n}\n\n);\n})();\nif (typeof exports === 'object' && typeof module === 'object')\n  module.exports = ortWasm;\nelse if (typeof define === 'function' && define['amd'])\n  define([], function() { return ortWasm; });\nelse if (typeof exports === 'object')\n  exports[\"ortWasm\"] = ortWasm;\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nexports.__esModule = true;\r\nvar Guid = /** @class */ (function () {\r\n    function Guid(guid) {\r\n        if (!guid) {\r\n            throw new TypeError(\"Invalid argument; `value` has no value.\");\r\n        }\r\n        this.value = Guid.EMPTY;\r\n        if (guid && Guid.isGuid(guid)) {\r\n            this.value = guid;\r\n        }\r\n    }\r\n    Guid.isGuid = function (guid) {\r\n        var value = guid.toString();\r\n        return guid && (guid instanceof Guid || Guid.validator.test(value));\r\n    };\r\n    Guid.create = function () {\r\n        return new Guid([Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\"));\r\n    };\r\n    Guid.createEmpty = function () {\r\n        return new Guid(\"emptyguid\");\r\n    };\r\n    Guid.parse = function (guid) {\r\n        return new Guid(guid);\r\n    };\r\n    Guid.raw = function () {\r\n        return [Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\");\r\n    };\r\n    Guid.gen = function (count) {\r\n        var out = \"\";\r\n        for (var i = 0; i < count; i++) {\r\n            // tslint:disable-next-line:no-bitwise\r\n            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n        }\r\n        return out;\r\n    };\r\n    Guid.prototype.equals = function (other) {\r\n        // Comparing string `value` against provided `guid` will auto-call\r\n        // toString on `guid` for comparison\r\n        return Guid.isGuid(other) && this.value === other.toString();\r\n    };\r\n    Guid.prototype.isEmpty = function () {\r\n        return this.value === Guid.EMPTY;\r\n    };\r\n    Guid.prototype.toString = function () {\r\n        return this.value;\r\n    };\r\n    Guid.prototype.toJSON = function () {\r\n        return {\r\n            value: this.value\r\n        };\r\n    };\r\n    Guid.validator = new RegExp(\"^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$\", \"i\");\r\n    Guid.EMPTY = \"00000000-0000-0000-0000-000000000000\";\r\n    return Guid;\r\n}());\r\nexports.Guid = Guid;\r\n","// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available across modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    CustomError.prototype = Object.create(Error.prototype, {\n        constructor: {\n            value: CustomError,\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n        name: {\n            get: function get() { return name; },\n            set: undefined,\n            enumerable: false,\n            // configurable: false would accurately preserve the behavior of\n            // the original, but I'm guessing that was not intentional.\n            // For an actual error subclass, this property would\n            // be configurable.\n            configurable: true,\n        },\n        toString: {\n            value: function value() { return this.name + \": \" + this.message; },\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n    });\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","module.exports = __WEBPACK_EXTERNAL_MODULE__1670__;","// GENERATED FILE. DO NOT EDIT.\nvar Long = (function(exports) {\n  \"use strict\";\n  \n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  \n  /**\n   * @license\n   * Copyright 2009 The Closure Library Authors\n   * Copyright 2020 Daniel Wirtz / The long.js Authors.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *\n   * SPDX-License-Identifier: Apache-2.0\n   */\n  // WebAssembly optimizations to do native i64 multiplication and divide\n  var wasm = null;\n  \n  try {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;\n  } catch (e) {// no wasm support :(\n  }\n  /**\n   * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n   *  See the from* functions below for more convenient ways of constructing Longs.\n   * @exports Long\n   * @class A Long class for representing a 64 bit two's-complement integer value.\n   * @param {number} low The low (signed) 32 bits of the long\n   * @param {number} high The high (signed) 32 bits of the long\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @constructor\n   */\n  \n  \n  function Long(low, high, unsigned) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     */\n    this.low = low | 0;\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     */\n  \n    this.high = high | 0;\n    /**\n     * Whether unsigned or not.\n     * @type {boolean}\n     */\n  \n    this.unsigned = !!unsigned;\n  } // The internal representation of a long is the two given signed, 32-bit values.\n  // We use 32-bit pieces because these are the size of integers on which\n  // Javascript performs bit-operations.  For operations like addition and\n  // multiplication, we split each number into 16 bit pieces, which can easily be\n  // multiplied within Javascript's floating-point representation without overflow\n  // or change in sign.\n  //\n  // In the algorithms below, we frequently reduce the negative case to the\n  // positive case by negating the input(s) and then post-processing the result.\n  // Note that we must ALWAYS check specially whether those values are MIN_VALUE\n  // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n  // a positive number, it overflows back into a negative).  Not handling this\n  // case would often result in infinite recursion.\n  //\n  // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n  // methods on which they depend.\n  \n  /**\n   * An indicator used to reliably determine if an object is a Long or not.\n   * @type {boolean}\n   * @const\n   * @private\n   */\n  \n  \n  Long.prototype.__isLong__;\n  Object.defineProperty(Long.prototype, \"__isLong__\", {\n    value: true\n  });\n  /**\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   * @inner\n   */\n  \n  function isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n  }\n  /**\n   * @function\n   * @param {*} value number\n   * @returns {number}\n   * @inner\n   */\n  \n  \n  function ctz32(value) {\n    var c = Math.clz32(value & -value);\n    return value ? 31 - c : c;\n  }\n  /**\n   * Tests if the specified object is a Long.\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   */\n  \n  \n  Long.isLong = isLong;\n  /**\n   * A cache of the Long representations of small integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var INT_CACHE = {};\n  /**\n   * A cache of the Long representations of small unsigned integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var UINT_CACHE = {};\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromInt(value, unsigned) {\n    var obj, cachedObj, cache;\n  \n    if (unsigned) {\n      value >>>= 0;\n  \n      if (cache = 0 <= value && value < 256) {\n        cachedObj = UINT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, 0, true);\n      if (cache) UINT_CACHE[value] = obj;\n      return obj;\n    } else {\n      value |= 0;\n  \n      if (cache = -128 <= value && value < 128) {\n        cachedObj = INT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, value < 0 ? -1 : 0, false);\n      if (cache) INT_CACHE[value] = obj;\n      return obj;\n    }\n  }\n  /**\n   * Returns a Long representing the given 32 bit integer value.\n   * @function\n   * @param {number} value The 32 bit integer in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromInt = fromInt;\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromNumber(value, unsigned) {\n    if (isNaN(value)) return unsigned ? UZERO : ZERO;\n  \n    if (unsigned) {\n      if (value < 0) return UZERO;\n      if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;\n    } else {\n      if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;\n      if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;\n    }\n  \n    if (value < 0) return fromNumber(-value, unsigned).neg();\n    return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);\n  }\n  /**\n   * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n   * @function\n   * @param {number} value The number in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromNumber = fromNumber;\n  /**\n   * @param {number} lowBits\n   * @param {number} highBits\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n  }\n  /**\n   * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n   *  assumed to use 32 bits.\n   * @function\n   * @param {number} lowBits The low 32 bits\n   * @param {number} highBits The high 32 bits\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBits = fromBits;\n  /**\n   * @function\n   * @param {number} base\n   * @param {number} exponent\n   * @returns {number}\n   * @inner\n   */\n  \n  var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n  \n  /**\n   * @param {string} str\n   * @param {(boolean|number)=} unsigned\n   * @param {number=} radix\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromString(str, unsigned, radix) {\n    if (str.length === 0) throw Error('empty string');\n  \n    if (typeof unsigned === 'number') {\n      // For goog.math.long compatibility\n      radix = unsigned;\n      unsigned = false;\n    } else {\n      unsigned = !!unsigned;\n    }\n  \n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\") return unsigned ? UZERO : ZERO;\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    var p;\n    if ((p = str.indexOf('-')) > 0) throw Error('interior hyphen');else if (p === 0) {\n      return fromString(str.substring(1), unsigned, radix).neg();\n    } // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n  \n    for (var i = 0; i < str.length; i += 8) {\n      var size = Math.min(8, str.length - i),\n          value = parseInt(str.substring(i, i + size), radix);\n  \n      if (size < 8) {\n        var power = fromNumber(pow_dbl(radix, size));\n        result = result.mul(power).add(fromNumber(value));\n      } else {\n        result = result.mul(radixToPower);\n        result = result.add(fromNumber(value));\n      }\n    }\n  \n    result.unsigned = unsigned;\n    return result;\n  }\n  /**\n   * Returns a Long representation of the given string, written using the specified radix.\n   * @function\n   * @param {string} str The textual representation of the Long\n   * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n   * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromString = fromString;\n  /**\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromValue(val, unsigned) {\n    if (typeof val === 'number') return fromNumber(val, unsigned);\n    if (typeof val === 'string') return fromString(val, unsigned); // Throws for non-objects, converts non-instanceof Long:\n  \n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n  }\n  /**\n   * Converts the specified value to a Long using the appropriate from* function for its type.\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long}\n   */\n  \n  \n  Long.fromValue = fromValue; // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n  // no runtime penalty for these.\n  \n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_16_DBL = 1 << 16;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24_DBL = 1 << 24;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n  /**\n   * @type {!Long}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ZERO = fromInt(0);\n  /**\n   * Signed zero.\n   * @type {!Long}\n   */\n  \n  Long.ZERO = ZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UZERO = fromInt(0, true);\n  /**\n   * Unsigned zero.\n   * @type {!Long}\n   */\n  \n  Long.UZERO = UZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ONE = fromInt(1);\n  /**\n   * Signed one.\n   * @type {!Long}\n   */\n  \n  Long.ONE = ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UONE = fromInt(1, true);\n  /**\n   * Unsigned one.\n   * @type {!Long}\n   */\n  \n  Long.UONE = UONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var NEG_ONE = fromInt(-1);\n  /**\n   * Signed negative one.\n   * @type {!Long}\n   */\n  \n  Long.NEG_ONE = NEG_ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n  /**\n   * Maximum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_VALUE = MAX_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n  /**\n   * Maximum unsigned value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n  /**\n   * Minimum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MIN_VALUE = MIN_VALUE;\n  /**\n   * @alias Long.prototype\n   * @inner\n   */\n  \n  var LongPrototype = Long.prototype;\n  /**\n   * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  LongPrototype.toInt = function toInt() {\n    return this.unsigned ? this.low >>> 0 : this.low;\n  };\n  /**\n   * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.toNumber = function toNumber() {\n    if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n  };\n  /**\n   * Converts the Long to a string written in the specified radix.\n   * @this {!Long}\n   * @param {number=} radix Radix (2-36), defaults to 10\n   * @returns {string}\n   * @override\n   * @throws {RangeError} If `radix` is out of range\n   */\n  \n  \n  LongPrototype.toString = function toString(radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    if (this.isZero()) return '0';\n  \n    if (this.isNegative()) {\n      // Unsigned Longs are never negative\n      if (this.eq(MIN_VALUE)) {\n        // We need to change the Long value before it can be negated, so we remove\n        // the bottom-most digit in this base and then recurse to do the rest.\n        var radixLong = fromNumber(radix),\n            div = this.div(radixLong),\n            rem1 = div.mul(radixLong).sub(this);\n        return div.toString(radix) + rem1.toInt().toString(radix);\n      } else return '-' + this.neg().toString(radix);\n    } // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n  \n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n        rem = this;\n    var result = '';\n  \n    while (true) {\n      var remDiv = rem.div(radixToPower),\n          intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n          digits = intval.toString(radix);\n      rem = remDiv;\n      if (rem.isZero()) return digits + result;else {\n        while (digits.length < 6) digits = '0' + digits;\n  \n        result = '' + digits + result;\n      }\n    }\n  };\n  /**\n   * Gets the high 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed high bits\n   */\n  \n  \n  LongPrototype.getHighBits = function getHighBits() {\n    return this.high;\n  };\n  /**\n   * Gets the high 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned high bits\n   */\n  \n  \n  LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n    return this.high >>> 0;\n  };\n  /**\n   * Gets the low 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed low bits\n   */\n  \n  \n  LongPrototype.getLowBits = function getLowBits() {\n    return this.low;\n  };\n  /**\n   * Gets the low 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned low bits\n   */\n  \n  \n  LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n    return this.low >>> 0;\n  };\n  /**\n   * Gets the number of bits needed to represent the absolute value of this Long.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n    if (this.isNegative()) // Unsigned Longs are never negative\n      return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n    var val = this.high != 0 ? this.high : this.low;\n  \n    for (var bit = 31; bit > 0; bit--) if ((val & 1 << bit) != 0) break;\n  \n    return this.high != 0 ? bit + 33 : bit + 1;\n  };\n  /**\n   * Tests if this Long's value equals zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isZero = function isZero() {\n    return this.high === 0 && this.low === 0;\n  };\n  /**\n   * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eqz = LongPrototype.isZero;\n  /**\n   * Tests if this Long's value is negative.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  LongPrototype.isNegative = function isNegative() {\n    return !this.unsigned && this.high < 0;\n  };\n  /**\n   * Tests if this Long's value is positive or zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isPositive = function isPositive() {\n    return this.unsigned || this.high >= 0;\n  };\n  /**\n   * Tests if this Long's value is odd.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isOdd = function isOdd() {\n    return (this.low & 1) === 1;\n  };\n  /**\n   * Tests if this Long's value is even.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isEven = function isEven() {\n    return (this.low & 1) === 0;\n  };\n  /**\n   * Tests if this Long's value equals the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.equals = function equals(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\n    return this.high === other.high && this.low === other.low;\n  };\n  /**\n   * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eq = LongPrototype.equals;\n  /**\n   * Tests if this Long's value differs from the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.notEquals = function notEquals(other) {\n    return !this.eq(\n    /* validates */\n    other);\n  };\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.neq = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ne = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value is less than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThan = function lessThan(other) {\n    return this.comp(\n    /* validates */\n    other) < 0;\n  };\n  /**\n   * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lt = LongPrototype.lessThan;\n  /**\n   * Tests if this Long's value is less than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) <= 0;\n  };\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lte = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.le = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThan = function greaterThan(other) {\n    return this.comp(\n    /* validates */\n    other) > 0;\n  };\n  /**\n   * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gt = LongPrototype.greaterThan;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) >= 0;\n  };\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ge = LongPrototype.greaterThanOrEqual;\n  /**\n   * Compares this Long's value with the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  LongPrototype.compare = function compare(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.eq(other)) return 0;\n    var thisNeg = this.isNegative(),\n        otherNeg = other.isNegative();\n    if (thisNeg && !otherNeg) return -1;\n    if (!thisNeg && otherNeg) return 1; // At this point the sign bits are the same\n  \n    if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1; // Both are positive if at least one is unsigned\n  \n    return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n  };\n  /**\n   * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  \n  LongPrototype.comp = LongPrototype.compare;\n  /**\n   * Negates this Long's value.\n   * @this {!Long}\n   * @returns {!Long} Negated Long\n   */\n  \n  LongPrototype.negate = function negate() {\n    if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;\n    return this.not().add(ONE);\n  };\n  /**\n   * Negates this Long's value. This is an alias of {@link Long#negate}.\n   * @function\n   * @returns {!Long} Negated Long\n   */\n  \n  \n  LongPrototype.neg = LongPrototype.negate;\n  /**\n   * Returns the sum of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} addend Addend\n   * @returns {!Long} Sum\n   */\n  \n  LongPrototype.add = function add(addend) {\n    if (!isLong(addend)) addend = fromValue(addend); // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the difference of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.subtract = function subtract(subtrahend) {\n    if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);\n    return this.add(subtrahend.neg());\n  };\n  /**\n   * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n   * @function\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.sub = LongPrototype.subtract;\n  /**\n   * Returns the product of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  LongPrototype.multiply = function multiply(multiplier) {\n    if (this.isZero()) return this;\n    if (!isLong(multiplier)) multiplier = fromValue(multiplier); // use wasm support if present\n  \n    if (wasm) {\n      var low = wasm[\"mul\"](this.low, this.high, multiplier.low, multiplier.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (multiplier.isZero()) return this.unsigned ? UZERO : ZERO;\n    if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;\n    if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;\n  \n    if (this.isNegative()) {\n      if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());else return this.neg().mul(multiplier).neg();\n    } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg(); // If both longs are small, use float multiplication\n  \n  \n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24)) return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned); // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n   * @function\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  \n  LongPrototype.mul = LongPrototype.multiply;\n  /**\n   * Returns this Long divided by the specified. The result is signed if this Long is signed or\n   *  unsigned if this Long is unsigned.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  LongPrototype.divide = function divide(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor);\n    if (divisor.isZero()) throw Error('division by zero'); // use wasm support if present\n  \n    if (wasm) {\n      // guard against signed division overflow: the largest\n      // negative number / -1 would be 1 larger than the largest\n      // positive number, due to two's complement.\n      if (!this.unsigned && this.high === -0x80000000 && divisor.low === -1 && divisor.high === -1) {\n        // be consistent with non-wasm code path\n        return this;\n      }\n  \n      var low = (this.unsigned ? wasm[\"div_u\"] : wasm[\"div_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (this.isZero()) return this.unsigned ? UZERO : ZERO;\n    var approx, rem, res;\n  \n    if (!this.unsigned) {\n      // This section is only relevant for signed longs and is derived from the\n      // closure library as a whole.\n      if (this.eq(MIN_VALUE)) {\n        if (divisor.eq(ONE) || divisor.eq(NEG_ONE)) return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n        else if (divisor.eq(MIN_VALUE)) return ONE;else {\n          // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n          var halfThis = this.shr(1);\n          approx = halfThis.div(divisor).shl(1);\n  \n          if (approx.eq(ZERO)) {\n            return divisor.isNegative() ? ONE : NEG_ONE;\n          } else {\n            rem = this.sub(divisor.mul(approx));\n            res = approx.add(rem.div(divisor));\n            return res;\n          }\n        }\n      } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;\n  \n      if (this.isNegative()) {\n        if (divisor.isNegative()) return this.neg().div(divisor.neg());\n        return this.neg().div(divisor).neg();\n      } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();\n  \n      res = ZERO;\n    } else {\n      // The algorithm below has not been made for unsigned longs. It's therefore\n      // required to take special care of the MSB prior to running it.\n      if (!divisor.unsigned) divisor = divisor.toUnsigned();\n      if (divisor.gt(this)) return UZERO;\n      if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n        return UONE;\n      res = UZERO;\n    } // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n  \n  \n    rem = this;\n  \n    while (rem.gte(divisor)) {\n      // Approximate the result of division. This may be a little greater or\n      // smaller than the actual value.\n      approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber())); // We will tweak the approximate result by changing it in the 48-th digit or\n      // the smallest non-fractional digit, whichever is larger.\n  \n      var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n          delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),\n          // Decrease the approximation until it is smaller than the remainder.  Note\n      // that if it is too large, the product overflows and is negative.\n      approxRes = fromNumber(approx),\n          approxRem = approxRes.mul(divisor);\n  \n      while (approxRem.isNegative() || approxRem.gt(rem)) {\n        approx -= delta;\n        approxRes = fromNumber(approx, this.unsigned);\n        approxRem = approxRes.mul(divisor);\n      } // We know the answer can't be zero... and actually, zero would cause\n      // infinite recursion since we would make no progress.\n  \n  \n      if (approxRes.isZero()) approxRes = ONE;\n      res = res.add(approxRes);\n      rem = rem.sub(approxRem);\n    }\n  \n    return res;\n  };\n  /**\n   * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  \n  LongPrototype.div = LongPrototype.divide;\n  /**\n   * Returns this Long modulo the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.modulo = function modulo(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor); // use wasm support if present\n  \n    if (wasm) {\n      var low = (this.unsigned ? wasm[\"rem_u\"] : wasm[\"rem_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    return this.sub(this.div(divisor).mul(divisor));\n  };\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  \n  LongPrototype.mod = LongPrototype.modulo;\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.rem = LongPrototype.modulo;\n  /**\n   * Returns the bitwise NOT of this Long.\n   * @this {!Long}\n   * @returns {!Long}\n   */\n  \n  LongPrototype.not = function not() {\n    return fromBits(~this.low, ~this.high, this.unsigned);\n  };\n  /**\n   * Returns count leading zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.countLeadingZeros = function countLeadingZeros() {\n    return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;\n  };\n  /**\n   * Returns count leading zeros. This is an alias of {@link Long#countLeadingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.clz = LongPrototype.countLeadingZeros;\n  /**\n   * Returns count trailing zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  LongPrototype.countTrailingZeros = function countTrailingZeros() {\n    return this.low ? ctz32(this.low) : ctz32(this.high) + 32;\n  };\n  /**\n   * Returns count trailing zeros. This is an alias of {@link Long#countTrailingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.ctz = LongPrototype.countTrailingZeros;\n  /**\n   * Returns the bitwise AND of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  LongPrototype.and = function and(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise OR of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.or = function or(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise XOR of this Long and the given one.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.xor = function xor(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shiftLeft = function shiftLeft(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);else return fromBits(0, this.low << numBits - 32, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shl = LongPrototype.shiftLeft;\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRight = function shiftRight(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);else return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shr = LongPrototype.shiftRight;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >>> numBits, this.unsigned);\n    if (numBits === 32) return fromBits(this.high, 0, this.unsigned);\n    return fromBits(this.high >>> numBits - 32, 0, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits rotated to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateLeft = function rotateLeft(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.low << numBits | this.high >>> b, this.high << numBits | this.low >>> b, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.high << numBits | this.low >>> b, this.low << numBits | this.high >>> b, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotl = LongPrototype.rotateLeft;\n  /**\n   * Returns this Long with bits rotated to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateRight = function rotateRight(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.high << b | this.low >>> numBits, this.low << b | this.high >>> numBits, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.low << b | this.high >>> numBits, this.high << b | this.low >>> numBits, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotr = LongPrototype.rotateRight;\n  /**\n   * Converts this Long to signed.\n   * @this {!Long}\n   * @returns {!Long} Signed long\n   */\n  \n  LongPrototype.toSigned = function toSigned() {\n    if (!this.unsigned) return this;\n    return fromBits(this.low, this.high, false);\n  };\n  /**\n   * Converts this Long to unsigned.\n   * @this {!Long}\n   * @returns {!Long} Unsigned long\n   */\n  \n  \n  LongPrototype.toUnsigned = function toUnsigned() {\n    if (this.unsigned) return this;\n    return fromBits(this.low, this.high, true);\n  };\n  /**\n   * Converts this Long to its byte representation.\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @this {!Long}\n   * @returns {!Array.<number>} Byte representation\n   */\n  \n  \n  LongPrototype.toBytes = function toBytes(le) {\n    return le ? this.toBytesLE() : this.toBytesBE();\n  };\n  /**\n   * Converts this Long to its little endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Little endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesLE = function toBytesLE() {\n    var hi = this.high,\n        lo = this.low;\n    return [lo & 0xff, lo >>> 8 & 0xff, lo >>> 16 & 0xff, lo >>> 24, hi & 0xff, hi >>> 8 & 0xff, hi >>> 16 & 0xff, hi >>> 24];\n  };\n  /**\n   * Converts this Long to its big endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Big endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesBE = function toBytesBE() {\n    var hi = this.high,\n        lo = this.low;\n    return [hi >>> 24, hi >>> 16 & 0xff, hi >>> 8 & 0xff, hi & 0xff, lo >>> 24, lo >>> 16 & 0xff, lo >>> 8 & 0xff, lo & 0xff];\n  };\n  /**\n   * Creates a Long from its byte representation.\n   * @param {!Array.<number>} bytes Byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytes = function fromBytes(bytes, unsigned, le) {\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\n  };\n  /**\n   * Creates a Long from its little endian byte representation.\n   * @param {!Array.<number>} bytes Little endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {\n    return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);\n  };\n  /**\n   * Creates a Long from its big endian byte representation.\n   * @param {!Array.<number>} bytes Big endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {\n    return new Long(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);\n  };\n  \n  var _default = Long;\n  exports.default = _default;\n  return \"default\" in exports ? exports.default : exports;\n})({});\nif (typeof define === 'function' && define.amd) define([], function() { return Long; });\nelse if (typeof module === 'object' && typeof exports === 'object') module.exports = Long;\n","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZE_PREFIX_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {!flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {!Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {!flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n * @param {boolean=} opt_size_prefix\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier, opt_size_prefix) {\n  var size_prefix = opt_size_prefix ? flatbuffers.SIZE_PREFIX_LENGTH : 0;\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH + size_prefix);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT + size_prefix);\n  this.addOffset(root_table);\n  if (size_prefix) {\n    this.addInt32(this.bb.capacity() - this.space);\n  }\n  this.bb.setPosition(this.space);\n};\n\n/**\n * Finalize a size prefixed buffer, pointing to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finishSizePrefixed = function (root_table, opt_file_identifier) {\n  this.finish(root_table, opt_file_identifier, true);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {!flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|!Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(1057);\n"],"names":["root","factory","exports","module","require","define","amd","a","i","self","__WEBPACK_EXTERNAL_MODULE__1670__","init","createSessionHandler","pathOrBuffer","options","session","Session","loadModel","OnnxjsSessionHandler","onnxjsBackend","OnnxjsBackend","initializeFlags","env","wasm","initTimeout","simd","proxy","numThreads","Number","isInteger","numCpuLogicalCores","navigator","cpus","length","hardwareConcurrency","Math","min","ceil","initializeWebAssemblyInstance","handler","OnnxruntimeWebAssemblySessionHandler","Promise","resolve","wasmBackend","OnnxruntimeWebAssemblyBackend","registerBackend","versions","web","version","attribute","Object","assign","this","_cacheKey","getOwnPropertyNames","sort","map","name","join","createAttributeWithCacheKey","AttributeWithCacheKeyImpl","ortFbs","onnxruntime","experimental","fbs","attributes","_attributes","Map","attr","onnx","AttributeProto","set","Attribute","getValue","getType","size","Error","key","type","value","delete","getFloat","defaultValue","get","getInt","getString","getTensor","getFloats","getInts","getStrings","getTensors","valueAndType","undefined","AttributeType","FLOAT","INT","STRING","TENSOR","FLOATS","INTS","STRINGS","TENSORS","attrType","GRAPH","GRAPHS","getValueNoCheck","LongUtil","isLong","longToNumber","arr","numberValue","Array","maybeLong","Tensor","fromProto","fromOrtTensor","utf8String","decodeUtf8String","getValueNoCheckFromOnnxFormat","getValueNoCheckFromOrtFormat","f","s","t","g","floats","ints","strings","tensors","graphs","floatsArray","intsLength","push","stringsLength","tensorsLength","backendsCache","tryLoadBackend","backendHint","backendObj","backend","obj","o","initialize","dispose","webgl","WebGLBackend","resolveBackend","hint","hints","cache","contextId","matmulMaxBatchSize","textureCacheMode","pack","async","glContext","createWebGLContext","Logger","setWithEnv","verbose","e","warning","context","WebGLSessionHandler","getFunctions","offsetToCoords","coordsToOffset","toVec","valueFrom","getCommonUtilFuncs","getInputsSamplingSnippets","getOutputSamplingSnippet","getCustomTypes","GlslLibRoutine","outputLayout","outputTextureLayout","isPacked","getPackedOutputSamplingSnippet","getUnpackedOutputSamplingSnippet","outShape","unpackedShape","outTexShape","width","height","result","funcName","getOutputScalarCoords","getOutputPacked1DCoords","getOutputPacked2DCoords","getOutputPacked3DCoords","getOutputPackedNDCoords","glsl","getGlsl","floatTextureSetRGBASource","output","getOutputUnpacked1DCoords","getOutputUnpacked2DCoords","getOutputUnpacked3DCoords","getOutputUnpacked4DCoords","getOutputUnpacked5DCoords","getOutputUnpacked6DCoords","floatTextureSetRSource","shape","texShape","packedTexShape","source","ArrayUtil","arraysEqual","texelsInLogicalRow","texelsInBatch","texelsInBatchN","batches","coords","b","rank","strides","coordsToCompute","coordsFromIndexSnippet","stride","line1","line2","texture2D","programInfo","inputNames","forEach","samplerName","inputLayout","inputTextureLayouts","generateShaderFuncNameFromInputSamplerName","getPackedSamplerFromInput","getUnpackedSamplerFromInput","outCoordFuncName","generateShaderFuncNameFromInputSamplerNameAtOutCoords","getPackedSamplerAtOutputCoords","getUnpackedSamplerAtOutputCoords","coordsSnippet","inShape","texName","texFuncSnippet","inRank","outRank","broadcastDims","BroadcastUtil","getBroadcastDims","getCoordsDataType","rankDiff","fields","getGlChannels","d","unpackedCoordsSnippet","isInputScalar","ShapeUtil","isOutputScalar","rows","cols","indexOf","swapLastDimsSnippet","inTexShape","getPackedSamplerScalar","getPackedSampler1D","getPackedSampler2D","getPackedSampler3D","getPackedSamplerND","getUnpackedSamplerScalar","getUnpackedSampler1D","getUnpackedSampler2D","getUnpackedSampler3D","getUnpackedSampler4D","getUnpackedSampler5D","getUnpackedSampler6D","texNumR","texNumC","valuesPerRow","squeezedShape","slice","newInputShape","squeezeInputShape","newInputLayout","JSON","parse","stringify","samplerRoutine","routineBody","getSqueezedParams","dependencies","params","index","tNumR","tNumC","squeezeShape","newShape","keptDims","stride0","stride1","routine","revDims","reverse","stride2","stride3","stride4","xScale","yScale","stridesBlock","body","layout","getValueFromSingle","varName","transpose","getPackedValueFrom","GlslLib","CoordsGlslLib","FunctionType","GlslContext","addDependency","node","GlslLibRoutineNode","returnOrderedNodes","nodes","cycleCheck","Set","alreadyTraversed","createOrderedNodes","graphNodes","dfsTraverse","has","add","TopologicalSortGlslRoutines","encodeFloat32","decodeFloat32","encode","decode","encodeUint8","endianness","EncodingGlslLib","isLittleEndian","decodeUint8","ArrayBuffer","Uint32Array","c","Uint8Array","setFragColor","getColorAsFloat","FragColorGlslLib","INLINE_FUNC_DEF_REGEX","script","match","inlineDefs","exec","split","tokens","trim","filter","v","regexString","replace","regex","RegExp","variable","declLine","newBody","paramRedecLine","replacement","libs","glslLibRoutineDependencyGraph","keys","glslRegistry","lib","libName","routinesInLib","currentNode","preprocess","shaderSource","hasMain","getDefaultFragShaderMain","replaceInlines","getFragShaderPreamble","getUniforms","variables","getImports","routinesIncluded","selectGlslLibRoutinesToBeIncluded","routines","classAndRoutine","samplers","uniformLines","sampler","arrayLength","GlslPreprocessor","VecGlslLib","ShapeUtilsGlslLib","bcastIndex","bcastMatmulIndex","offsetToIndices","indicesToOffset","incrementIndices","outputRank","dimOffset","block","indexToOffsetSingle","offsetToIndicesSingle","shapeInit","GLSL_ES_2_0","varyingVertex","varyingFrag","outputDeclaration","GLSL_ES_3_0","outputShapeLength","binaryVecFunctions","copyVec","setVecItem","getVecItem","nameOp","sub","mul","div","fname","assignmentBlock","packedTextureDataCache","unpackedTextureDataCache","calculateTextureWidthAndHeight","textureType","layoutStrategy","executeProgram","program","inputs","inputTypes","inputTextureDatas","getOrCreateTextureData","texture","cacheHint","getProgramInfoUniqueKey","artifact","programManager","getArtifact","createTextureLayoutFromTextureType","dims","outputTextureData","createTextureData","build","setArtifact","runProgram","run","tensor","TextureType","packed","td","getTextureData","dataId","unpack","packedLastDimension","adjustedKernelShape","adjustedLayout","buffer","numberData","numFeatureMaps","oldRowSize","newRowSize","Float32Array","oldOffset","newOffset","subarray","unpackedTextureLayout","createTextureLayoutFromShape","reverseWH","unpackedTextureData","createTextureDataFromLayoutBindTensor","dataType","data","usage","textureManager","createTextureFromLayout","createTextureDataFromTexture","reshapeUnpacked","input","reshapedDims","inputTD","unpacked","newTextureLayout","channels","computeStrides","reshapePacked","isReshapeCheap","squeezedInputShape","processDims3D","squeezedOutputShape","squeezedInputTensor","squeezedOutputTensor","createPackedReshape3DProgramInfoLoader","cast","tensorId","textureData","_id","readTexture","readTextureAsync","setTextureData","isInitializer","isTextureLayoutCached","clearActiveTextures","releaseTexture","isFloat32DownloadSupported","readUint8TextureAsFloat","encodeAsUint8","createPackProgramInfoLoader","createUnpackProgramInfoLoader","WebGLInferenceHandler","WEBGL_OP_RESOLVE_RULES","unaryOps","abs","acos","binaryOps","and","asin","atan","averagePool","parseAveragePoolAttributes","batchNormalization","parseBatchNormalizationAttributes","parseCastAttributes","clip","parseClipAttributes","clipV11","concat","parseConcatAttributes","conv","parseConvAttributes","convTranspose","parseConvTransposeAttributes","cos","identity","depthToSpace","parseDepthToSpaceAttributes","equal","elu","parseEluAttributes","exp","flatten","parseFlattenAttributes","floor","gather","parseGatherAttributes","gemm","parseGemmAttributesV7","parseGemmAttributesV11","globalAveragePool","parseGlobalAveragePoolAttributes","globalMaxPool","greater","imageScaler","parseImageScalerAttributes","instanceNormalization","parseInstanceNormalizationAttributes","leakyRelu","parseLeakyReluAttributes","less","lrn","parseLrnAttributes","log","matMul","parseMatMulAttributes","maxPool","parseMaxPoolAttributes","neg","not","or","padV2","parsePadAttributesV2","padV11","parsePadAttributesV11","pow","pRelu","reduceLogSum","parseReduceAttributes","reduceMax","reduceMean","reduceMin","reduceProd","reduceSum","reduceLogSumSquare","relu","reshape","resize","parseResizeAttributesV10","parseResizeAttributesV11","sigmoid","sin","sliceV10","parseSliceAttributes","softmax","parseSoftmaxAttributes","softmaxV13","parseSoftmaxAttributesV13","parseSplitAttributes","sqrt","squeeze","parseSqueezeAttributes","squeezeV13","sum","tan","tanh","tile","parseTransposeAttributes","upsample","parseUpsampleAttributesV7","parseUpsampleAttributesV9","unsqueeze","parseUnsqueezeAttributes","unsqueezeV13","xor","batchNormalizationProgramMetadata","inferenceHandler","validateInputs","cacheKey","createBatchNormalizationProgramInfo","epsilon","momentum","spatial","scaleWidth","scaleHeight","X","scale","B","mean","var_","glslAdd","ValueBased","glslDiv","glslMul","glslSub","glslEqual","glslGreater","glslLess","glslAnd","glslOr","glslXor","glslPow","glslBuiltinBinary","glslPRelu","createBinaryProgramInfoLoader","glslFunc","outputTensorType","createBinaryProgramInfo","isBroadcast","areEqual","outputShape","usePackedTexture","calculatedShape","calcShape","aRank","bRank","aBcast","bBcast","to","ProtoUtil","tensorDataTypeFromProto","createPackedConcatProgramInfoLoader","inputCount","metadata","from","fill","axis","inputShape","dataNShape","axisIndex","getChannels","dtype","unpackChannel","unpackFromChannel","shapes","offsets","channel","lastChannels","allChannels","getValueSnippet","getShiftedChannelsSnippet","lastIndex","shift","x","createPackedConcatProgramInfo","channelIdx","idx","createUnpackedConcatProgramInfoLoader","sizeInConcatAxis","previousSum","getTextureIndexWhereDataResidesMethod","getTextureIndexWhereDataResidesLinearSearch","getTextureIndexWhereDataResidesBinarySearch","fetchDataFromCorrectTextureMethod","getFetchDataFromCorrectTextureMethod","getSizeInConcatAxisValueFromIndexMethod","getGetSizeInConcatAxisValueFromIndexMethod","createUnpackedConcatProgramInfo","searchAxis","numberOfTensors","tensorRank","codeLines","inputType","inputDimensionality","createUnpackedGroupedConvProgramInfoLoader","hasBias","processBias","xShape","wShape","outputChannelsPerGroup","group","autoPad","dilations","kernelShape","pads","calculateOutputShape","getActivationSnippet","activationFunction","applyActivation","createUnpackedGroupedConvProgramInfo","conv2DPackedPointwise","xshape","kshape","reshapedX","reshapedK","matmulInputs","matmulOutput","createPackedMatmulProgramInfoLoader","conv2DPacked","im2colOutput","createPackedIm2ColProgramInfoLoader","kernelReshaped","computeTotalPad","inDim","adj","kernel","dilation","outSize","distributePadding","totalPad","head","tail","smallPad","convTranspose2d","adjustedAttributes","getAdjustedConvTransposeAttributes","convTranspose2DUnpacked","valueInit","inputChannelsPerGroup","createUnpackedConvTransposeProgramInfo","createUnpackedConvTransposeProgramInfoLoader","outputPadding","spatialRank","updateShape","calculateOutputShapeAndPads","newAttributes","activationAttributes","parseInternalActivationAttributes","featureMaps","adjustPads","batchSize","inputSpatialShape","outChannels","dilatedKernelShape","outputSpatialShape","conv2d","getAdjustedConvAttributes","packMode","isPointwise","conv2DUnpackedPointwise","conv2DUnpacked","createMatmulProgramInfoLoader","xIm2Col","createIm2ColProgramInfoLoader","dotProductInputs","createDotProductProgramInfoLoader","PoolConvUtil","adjustPadsBasedOnAutoPad","blocksize","blocksizeSqr","transposePerm","mode","firstReshapeShape","firstReshapedTensor","transposeAttributes","perm","transposeOutput","secondReshapeShape","TypeError","activationCacheKey","createDotProductProgramMetadata","im2colShape","calculateIm2ColDims","kWidth","kHeight","im2colStrides","im2colWidth","im2colHeight","initValue","sharedDim","createDotProductProgramInfo","outputDims","flattenShape","r","func","activation","glslRelu","glslSigmoid","glslClip","clipMin","clipMax","activationName","MIN_CLIP","MAX_CLIP","createGatherProgramInfoLoader","gatherProgramMetadata","indexDataShape","normalizeAxis","indexCopyOps","orank","irank","iDrank","createGatherProgramInfo","NUMBER_TYPES","createGemmProgramInfoLoader","parseGemmAttributes","isOptionalC","transA","transB","alpha","beta","createGemmProgramInfo","aShape","bShape","GemmUtil","getShapeOfGemmResult","line","declareC","broadcastC","calculateC","w","wshape","kernelSize","unrolled","row","col","createPackedIm2ColProgramInfo","im2colDims","createIm2ColProgramInfo","createImageScalerProgramInfoLoader","bias","imageScalerProgramMetadata","getBiasMethod","createGetBiasMethod","createImageScalerProgramInfo","numChannels","meanAndVariance","createMeanAndVarianceProgramInfoLoader","createComputeOutputProgramInfoLoader","meanAndVarianceProgramMetadata","xDims","channelSize","createMeanAndVarianceProgramInfo","computeOutputProgramMetadata","meanAndVarianceShape","textureWidth","textureHeight","meanAndVarianceWidth","meanAndVarianceHeight","createComputeOutputProgramInfo","createLrnProgramInfoLoader","lrnProgramMetadata","C","createLrnProgramInfo","sharedDimIndex","coordsDataType","allGlChannels","getBiasForMatmulSnippet","getBiasForMatmul","getBcastedSamplerForMatmulSnippet","unpackedACoordsSnippet","unpackedBCoordsSnippet","inAShape","inBShape","inARank","inBRank","rankADiff","rankBDiff","broadcastADims","broadcastBDims","coordsASnippet","coordsBSnippet","swapDimSnippet","getBcastSamplerForMatmul","getSamplerAInLoopSnippet","res","getA","getSamplerBInLoopSnippet","getB","getOutputCoordsSnippet","createPackedMatmulProgramInfo","createMatmulProgramMetadata","arank","brank","createMatmulProgramInfo","packProgramMetadata","unpackedReversed","inputRank","setup","outOfBoundsCondition","cond","getOutOfBoundsCondition","D","getOutput","createPackProgramInfo","getVecChannels","padProgramMetadata","validateInputsV2","createPadProgramInfo","validateInputsV11","attrubutes","generatePadAttributesFromInputs","integerData","floatData","padShape","padFunction","getPadFunction","getPadConstant","getPadReflect","getPadEdge","createAveragePoolProgramInfo","ceilMode","countIncludePad","isGlobalOperator","getAdjustedPoolAttributesAndOutputShape","op2","poolingCode","generatePoolingCode","createMaxPoolProgramInfo","storageOrder","hasDilations","hasOwnProperty","call","adjustPoolAttributes","computePoolOutputShape","globalMaxPoolAttributes","globalMaxPoolMetadata","inputDims","op1","start","codeW","kw","sw","pwStart","pwEnd","dimW","codeH","codeHEnd","kh","sh","phStart","phEnd","dimH","padCode","kernelStrides","stridesRank","padsRank","offsetToIndicesFunction","copyInputDims","copyArray","copyPads","copyKernelStrides","copyStrides","reduce","cur","array","arrayName","reduceOp","reduceProgramMetadata","createReduceProgramInfo","axes","keepDims","iRank","idxCopy","normalizeAxes","ops","reduceOps","k","oRank","idxZero","input3D","outputShape3D","createPackedReshape3DProgramMetadata","inputShape3D","mainLoop","outputCoords","getFlattenedIndexFrom3D","createPackedReshape3DProgramInfo","batch","calculateReshapedDims","resizeProgramMetadata","createPackedResizeProgramInfo","parseUpsampleAttributes","prepareInputs","scales","every","coordinateTransformMode","dim","outputHeight","outputWidth","inputHeight","inputWidth","scalesHeight","scalesWidth","getSourceFracIndex","outputSizes","scalesTensor","scalesInputIdx","sizesInputIdx","parseScalesData","isResize","sizesTensor","parseScalesDataFromOutputSize","yDims","scalesValidation","end","Int32Array","sliceProgramMetadata","createSliceProgramInfo","starts","ends","val","normalizedAxes","sliceOps","validateInputsV10","generateSliceAttributesFromInputs","some","softmaxComputeMaxProgramMetadata","softmaxComputeScaleProgramMetadata","softmaxProgramMetadata","logicalRowCount","sizeToDimension","featureCount","sizeFromDimension","computeSoftmax","transposeAttribute","isTransposeRequired","transposedInputShape","transposedInputs","_","p","computeMaxProgramInfo","createComputeMaxProgramInfo","max","computeScaleProgramInfo","createComputScaleProgramInfo","softMaxProgramInfo","createSoftMaxProgramInfo","maxElementPerLogicalRow","normalizationPerLogicalRow","splitProgramMetadata","count","getProgramCount","createSplitProgramInfo","numOutputs","outputs","SplitUtil","splitShape","offset","validateInputsV13","sumProgramMetadata","createSumProgramInfo","sumLine","j","tileProgramMetadata","createTileProgramInfo","tileOps","transposeProgramMetadata","createTransposeProgramInfo","getAdjustedPerm","unpackedOutputShape","getOutputShape","getPermFunctionBody","sortBasedOnPerm","reverseFunc","downloadUint8AsFloat","glslAbs","glslBuiltinUnary","glslAcos","glslAsin","glslAtan","glslCeil","glslCos","glslElu","glslExp","glslFloor","glslIdentity","glslLeakyRelu","glslLog","glslNeg","glslNot","glslSin","glslSqrt","glslTan","glslTanh","createElementwiseProgramInfoLoader","createElementwiseProgramInfo","generateClipAttributesFromInputs","unpackProgramMetadata","createUnpackProgramInfo","innerDims","sourceCoords","getSourceCoords","unsqueezeShape","upsampleProgramMetadata","createUpsampleProgramInfo","opset","extrapolationValue","needRoiInput","useExtrapolation","nearestMode","cubicCoefficientA","excludeOutside","useNearest2xOptimization","roiInputIdx","outputPitches","inputPitches","precalculatedPitches","getInputFloatFunction","profiler","textureLayoutStrategy","repo","attributesBound","buildArtifact","event","gl","useProgram","bindOutput","bindAttributes","attribLocations","bindUniforms","uniformLocations","err","error","draw","vertexShader","deleteShader","deleteProgram","preprocessor","fragScript","compile","getUniformLocations","getAttribLocations","fragShaderScript","vertexShaderScript","getVertexShaderSource","compileShader","VERTEX_SHADER","debug","fragShader","FRAGMENT_SHADER","createProgram","attachFramebuffer","positionHandle","position","textureCoordHandle","textureCoord","setVertexAttributes","textures","texturePosition","find","bindTexture","uniform1fv","uniform1f","uniform1iv","uniform1i","uniformHandle","bindTextureToUniform","getAttribLocation","location","getUniformLocation","reference","ProgramManager","PreferLogicalStrategy","maxTextureSize","TextureManager","reuseTextures","pack2unpackMap","unpack2packMap","createInferenceHandler","onGraphInitialized","graph","initializers","getValues","addInitializer","opsets","op","resolveOperator","impl","opImpl","opInit","internalFormat","R32F","format","RED","RGBA32F","RGBA","src","textureSize","constructor","allocate","dataSize","RedFloat32DataEncoder","dest","RGBAFloatDataEncoder","ALPHA","UNSIGNED_BYTE","_textureSize","byteOffset","byteLength","Uint8DataEncoder","computeTextureWH","prefs","breakAxis","wsize","hsize","totalSize","AlwaysKeepOriginalSizeStrategy","wh","computeTexture","logShape","squeezeResult","sizeFromShape","sizeToSquarishShape","isEmptyArray","isArray","parseAxisParam","assert","ax","isInt","dimsToSkip","inferredDims","reversedWH","config","pendingRead","inUseTextures","idleTextures","textureLookup","textureDataType","toEncoderType","encoder","getEncoder","pop","updateTexture","toTextureData","allocateTexture","toTensorData","createAndWaitForFence","tensorData","subscribers","deleteTexture","splice","Int16Array","Int8Array","Uint16Array","Float64Array","_dataType","len","checkFn","delayFn","maxCounter","_counter","reject","tryCount","tryFn","nextBackoff","setTimeout","charAt","toUpperCase","createNewWebGLContext","canvas","ca","depth","antialias","stencil","preserveDrawingBuffer","premultipliedAlpha","failIfMajorPerformanceCaveat","getContext","WebGLContext","webgl2","OffscreenCanvas","createOffscreenCanvas","document","createElement","createCanvas","isContextLost","disable","DEPTH_TEST","STENCIL_TEST","BLEND","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","enable","SCISSOR_TEST","CULL_FACE","cullFace","BACK","linearSearchLastTrue","frameBufferBound","itemsToPoll","getExtensions","vertexbuffer","createVertexbuffer","framebuffer","createFramebuffer","queryVitalParameters","createTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","checkError","texSubImage2D","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","viewport","scissor","readPixels","isFramebufferReady","getActiveTexture","n","getParameter","ACTIVE_TEXTURE","TEXTURE0","getTextureBinding","TEXTURE_BINDING_2D","getFramebufferBinding","FRAMEBUFFER_BINDING","vertexAttribPointer","enableVertexAttribArray","attachShader","linkProgram","shaderType","shader","createShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","activeTexture","drawArrays","TRIANGLE_STRIP","getError","label","toString","DataEncoders","isRenderFloat32Supported","textureHalfFloatExtension","HALF_FLOAT_OES","unit","maxTextureImageUnits","disposed","deleteFramebuffer","bindBuffer","ARRAY_BUFFER","deleteBuffer","ELEMENT_ARRAY_BUFFER","finish","createDefaultGeometry","createBuffer","geometry","bufferData","STATIC_DRAW","fb","isFloatTextureAttachableToFrameBuffer","checkFloatTextureAttachableToFrameBuffer","checkRenderFloat32","checkFloat32Download","isBlendSupported","checkFloat32Blend","MAX_TEXTURE_SIZE","MAX_TEXTURE_IMAGE_UNITS","colorBufferFloatExtension","getExtension","disjointTimerQueryWebgl2Extension","textureFloatExtension","frameBuffer","isComplete","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","fragmentShader","POINTS","NO_ERROR","beginTimer","gl2","ext","query","createQuery","beginQuery","TIME_ELAPSED_EXT","endTimer","endQuery","isTimerResultAvailable","available","disjoint","getQueryParameter","QUERY_RESULT_AVAILABLE","GPU_DISJOINT_EXT","getTimerResult","timeElapsed","QUERY_RESULT","deleteQuery","waitForQueryAndGetTime","repeatedTry","fenceContext","createFence","pollFence","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","isFencePassed","status","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","addItemToPoll","pollItems","isDoneFn","resolveFn","getNodes","_ops","KernelOp","reset","_starter","resolved","_values","getInputIndices","execute","sessionHandler","modelInputs","graphInputs","sequence","graphValues","rear","thisOpIndex","thisOp","inputList","inputTensors","outputList","downstreamNodes","currentDownstreamNodeIndex","currentDownstreamNode","getOutputIndices","outputIndex","outputTensor","getData","ExecutionPlan","Graph","graphProto","initializer","GraphImpl","valueInfo","_from","_to","tensorValueTypeFromProto","tensorType","_nodeProto","NodeProto","opType","Node","tensorAttributesFromORTFormat","executeNode","graphInitializer","buildGraph","transformGraph","checkIsAcyclic","_allInputIndices","getInputNames","_allInputNames","_allOutputIndices","getOutputNames","_allOutputNames","_allData","_nodes","GraphProto","buildGraphFromOnnxFormat","buildGraphFromOrtFormat","dataIndices","nodesIndices","inputValueNames","currentIndex","Value","tensorDimsFromProto","nodeProto","pick","dataIndex","inputsLength","inputName","nodeArgsLength","nodeArgs","valueType","TypeInfoValue","tensor_type","TensorTypeAndShape","elemType","dimLength","dimValue","initializersLength","tensorDimsFromORTFormat","outputsLength","outputName","nodesLength","attributesLength","starters","nodesStack","nodesState","nodeIndex","outgoingEdgeIndex","downstreamNodeIndex","removeAllIdentityNodes","removeAllDropoutNodes","fuseConvActivationNodes","finalizeGraph","newIndices","nodePossition","ind","currentData","deleteNode","inputValueIndex","outputValueIndex","nodesConsumingOutput","delIndex","replaceIndex","isActivation","next","child","_severity","_content","_category","severity","content","category","console","color","SEVERITY_VALUE","info","fatal","LOGGER_PROVIDER_MAP","NoOpLoggerProvider","ConsoleLoggerProvider","LOGGER_DEFAULT_CONFIG","provider","minimalSeverity","logDateTime","logSourceLocation","LOGGER_CONFIG_MAP","arg0","arg1","arg2","arg3","bind","logInternal","stack","Date","toISOString","previousConfig","logLevel","startTime","endCallback","timer","ctx","checkTimer","endTime","maxNumberEvents","flushBatchSize","flushIntervalInMilliseconds","_started","_flushPointer","_maxNumberEvents","_flushBatchSize","_flushIntervalInMilliseconds","create","_timingEvents","_flushTime","now","stop","logOneEvent","begin","isPromise","then","reason","Event","endSync","EventRecord","toFixed","currentTime","previousPointer","Profiler","performance","load","buf","isOrtFormat","loadFromOnnxFormat","loadFromOrtFormat","modelProto","ModelProto","irVersion","_opsets","opsetImport","domain","_graph","flatbuffers","ByteBuffer","ortModel","InferenceSession","getRootAsInferenceSession","model","opsetImportLength","opsetId","Model","INT_TYPES","FLOAT_TYPES","matchSelector","selector","endsWith","rangeStart","parseInt","substring","isNaN","pair","rangeEnd","rules","rule","versionSelector","DimensionValueType","TensorDataType","NodeType","bb","bb_pos","__init","getRootAsShape","Shape","readInt32","getSizePrefixedRootAsShape","setPosition","SIZE_PREFIX_LENGTH","__offset","Dimension","__indirect","__vector","__vector_len","startShape","builder","startObject","addDim","addFieldOffset","createDimVector","startVector","addOffset","endVector","startDimVector","numElems","endShape","endObject","createShape","getRootAsDimension","getSizePrefixedRootAsDimension","DimensionValue","denotation","optionalEncoding","__string","startDimension","addValue","valueOffset","addDenotation","denotationOffset","endDimension","createDimension","getRootAsDimensionValue","getSizePrefixedRootAsDimensionValue","dimType","readInt8","UNKNOWN","readInt64","createLong","dimParam","startDimensionValue","addDimType","addFieldInt8","addDimValue","addFieldInt64","addDimParam","dimParamOffset","endDimensionValue","createDimensionValue","getRootAsTensorTypeAndShape","getSizePrefixedRootAsTensorTypeAndShape","UNDEFINED","startTensorTypeAndShape","addElemType","addFieldInt32","addShape","shapeOffset","endTensorTypeAndShape","createTensorTypeAndShape","getRootAsMapType","MapType","getSizePrefixedRootAsMapType","keyType","TypeInfo","startMapType","addKeyType","addValueType","valueTypeOffset","endMapType","createMapType","getRootAsSequenceType","SequenceType","getSizePrefixedRootAsSequenceType","startSequenceType","elemTypeOffset","endSequenceType","createSequenceType","readUint32","srcArgIndex","dstArgIndex","createEdgeEnd","node_index","src_arg_index","dst_arg_index","prep","writeInt32","EdgeEnd","getRootAsNodeEdge","NodeEdge","getSizePrefixedRootAsNodeEdge","inputEdges","inputEdgesLength","outputEdges","outputEdgesLength","startNodeEdge","addNodeIndex","addInputEdges","inputEdgesOffset","startInputEdgesVector","addOutputEdges","outputEdgesOffset","startOutputEdgesVector","endNodeEdge","createNodeEdge","getRootAsNode","getSizePrefixedRootAsNode","docString","sinceVersion","Primitive","executionProviderType","inputArgCounts","inputArgCountsLength","inputArgCountsArray","bytes","implicitInputs","implicitInputsLength","startNode","addName","nameOffset","addDocString","docStringOffset","addDomain","domainOffset","addSinceVersion","addIndex","addOpType","opTypeOffset","addType","addExecutionProviderType","executionProviderTypeOffset","addInputs","inputsOffset","createInputsVector","startInputsVector","addOutputs","outputsOffset","createOutputsVector","startOutputsVector","addAttributes","attributesOffset","createAttributesVector","startAttributesVector","addInputArgCounts","inputArgCountsOffset","createInputArgCountsVector","addInt32","startInputArgCountsVector","addImplicitInputs","implicitInputsOffset","createImplicitInputsVector","startImplicitInputsVector","endNode","createNode","getRootAsValueInfo","ValueInfo","getSizePrefixedRootAsValueInfo","startValueInfo","typeOffset","endValueInfo","createValueInfo","getRootAsTypeInfo","getSizePrefixedRootAsTypeInfo","readUint8","NONE","__union","startTypeInfo","endTypeInfo","createTypeInfo","getRootAsOperatorSetId","OperatorSetId","getSizePrefixedRootAsOperatorSetId","startOperatorSetId","addVersion","endOperatorSetId","createOperatorSetId","getRootAsTensor","getSizePrefixedRootAsTensor","dimsLength","rawData","rawDataLength","rawDataArray","stringData","stringDataLength","startTensor","addDims","dimsOffset","createDimsVector","addInt64","startDimsVector","addDataType","addRawData","rawDataOffset","createRawDataVector","addInt8","startRawDataVector","addStringData","stringDataOffset","createStringDataVector","startStringDataVector","endTensor","createTensor","getRootAsSparseTensor","SparseTensor","getSizePrefixedRootAsSparseTensor","values","indices","startSparseTensor","addValues","valuesOffset","addIndices","indicesOffset","endSparseTensor","createSparseTensor","getRootAsAttribute","getSizePrefixedRootAsAttribute","readFloat32","floatsLength","graphsLength","startAttribute","addF","addFieldFloat32","addI","addS","sOffset","addT","tOffset","addG","gOffset","addFloats","floatsOffset","createFloatsVector","addFloat32","startFloatsVector","addInts","intsOffset","createIntsVector","startIntsVector","addStrings","stringsOffset","createStringsVector","startStringsVector","addTensors","tensorsOffset","createTensorsVector","startTensorsVector","addGraphs","graphsOffset","createGraphsVector","startGraphsVector","endAttribute","createAttribute","getRootAsGraph","getSizePrefixedRootAsGraph","maxNodeIndex","nodeEdges","nodeEdgesLength","sparseInitializers","sparseInitializersLength","startGraph","addInitializers","initializersOffset","createInitializersVector","startInitializersVector","addNodeArgs","nodeArgsOffset","createNodeArgsVector","startNodeArgsVector","addNodes","nodesOffset","createNodesVector","startNodesVector","addMaxNodeIndex","addNodeEdges","nodeEdgesOffset","createNodeEdgesVector","startNodeEdgesVector","addSparseInitializers","sparseInitializersOffset","createSparseInitializersVector","startSparseInitializersVector","endGraph","createGraph","getRootAsModel","getSizePrefixedRootAsModel","producerName","producerVersion","modelVersion","graphDocString","startModel","addIrVersion","addOpsetImport","opsetImportOffset","createOpsetImportVector","startOpsetImportVector","addProducerName","producerNameOffset","addProducerVersion","producerVersionOffset","addModelVersion","addGraph","graphOffset","addGraphDocString","graphDocStringOffset","endModel","createModel","getRootAsKernelCreateInfos","KernelCreateInfos","getSizePrefixedRootAsKernelCreateInfos","nodeIndices","nodeIndicesLength","nodeIndicesArray","kernelDefHashes","readUint64","kernelDefHashesLength","startKernelCreateInfos","addNodeIndices","nodeIndicesOffset","createNodeIndicesVector","startNodeIndicesVector","addKernelDefHashes","kernelDefHashesOffset","createKernelDefHashesVector","startKernelDefHashesVector","endKernelCreateInfos","createKernelCreateInfos","getRootAsSubGraphSessionState","SubGraphSessionState","getSizePrefixedRootAsSubGraphSessionState","graphId","sessionState","SessionState","startSubGraphSessionState","addGraphId","graphIdOffset","addSessionState","sessionStateOffset","endSubGraphSessionState","requiredField","createSubGraphSessionState","getRootAsSessionState","getSizePrefixedRootAsSessionState","kernels","subGraphSessionStates","subGraphSessionStatesLength","startSessionState","addKernels","kernelsOffset","addSubGraphSessionStates","subGraphSessionStatesOffset","createSubGraphSessionStatesVector","startSubGraphSessionStatesVector","endSessionState","createSessionState","getSizePrefixedRootAsInferenceSession","bufferHasIdentifier","__has_identifier","ortVersion","startInferenceSession","addOrtVersion","ortVersionOffset","addModel","modelOffset","endInferenceSession","finishInferenceSessionBuffer","finishSizePrefixedInferenceSessionBuffer","createInferenceSession","outputNames","feeds","_fetches","_options","inputMap","feed","outputMap","startProfiling","endProfiling","_initialized","graphInputTypes","graphInputDims","_model","arg","process","promisify","readFile","fetch","arrayBuffer","isView","modelProtoBlob","initializeOps","_executionPlan","normalizeAndValidateInputs","outputTensors","createOutput","modelInputNames","sortedInputs","sortedInputsIndex","validateInputTensorDims","modelInputIndices","modelValues","graphInput","validateInputTensorTypes","givenInputs","expectedType","actualType","noneDimSupported","expectedDims","actualDims","compareTensorDims","modelOutputNames","dataProvider","asyncDataProvider","Guid","validateDimsAndCalcSize","empty","RangeError","dataviewConstructor","sizeof","dataBuffer","createView","_strides","tensorProto","str","dataDest","dataSource","DataView","elementSize","sizeofProto","readProto","TensorProto","DataType","INT32","INT16","UINT16","INT8","UINT8","BOOL","int32Data","INT64","int64Data","DOUBLE","doubleData","UINT32","UINT64","uint64Data","element","fromData","ortTensor","greaterThanOrEqual","lessThan","toNumber","view","getUint8","getInt8","getUint16","getInt16","getFloat32","getInt32","getUint32","fromBits","getFloat64","expectedDimensions","expr","msg","n1","n2","preprocessInputShapes","dimsA","dimsB","postprocessOutputShape","calcMatMulShape","MatMulUtil","adims","bdims","isMatMul","crank","cdims","cShapeMatMul","aLen","bLen","broadcastedIndices","originalShape","originalIndices","fillIndex","calc","inplace","resultType","outputIndices","originalIndicesA","originalIndicesB","valA","valB","isAScalar","isBScalar","rest","isValidBroadcast","finalShape","finalRank","unshift","target","targetIndex","sourceIndex","blockSize","leftShape","transLeft","rightShape","transRight","biasShape","M","K","N","kDim","typeProto","tensorDataTypeStringToEnum","unsigned","Long","fromValue","low","high","getSizeFromDimensionRange","incrementIndex","axisToIncrementOn","originalDims","shapeHints","nDims","unknownDimension","newTensorSize","oldTensorSize","pad","shape1","shape2","total","y","right","inSqueezeList","inputDimsIterator","sqr","axpy","powx","MathUtil","determineSplit","numElementsAlongAxis","calcReduce","keepdims","ReduceUtil","calcReduceShape","inputStrides","indicesY","calcReduceByAxis","curAxisInd","pos","step","adjustPadAndReturnShape","computeShapeHelper","computeConvOutputShape","filterDims","inSize","padHeadIndex","padTailIndex","dkernel","padNeeded","TextDecoder","currentKernelId","commandEncoder","computePassEncoder","pendingDispatchNumber","profilingEnabled","kernelCustomData","gpu","requestAdapter","adapter","deviceDescriptor","requiredLimits","maxComputeWorkgroupStorageSize","limits","maxComputeWorkgroupsPerDimension","maxStorageBufferBindingSize","features","webgpu","profilingMode","requiredFeatures","requestDevice","device","gpuDataManager","createGpuDataManager","kernelPersistentData","configureLogger","onuncapturederror","ev","GPUValidationError","message","profilingQuerySet","createQuerySet","getCommandEncoder","createCommandEncoder","getComputePassEncoder","beginComputePass","endComputePass","queue","submit","refreshPendingBuffers","createKernelOutput","createIntermediateOutput","inputDatas","gpuData","inputTensorShapes","inputGpuDataTypes","inputTensorShapesToString","inputGpuDataTypesToString","validatedOutputIndices","outputTensorViews","outputDatas","isTemporary","isPersistent","tensorView","temporaryData","persistentData","normalizedDispatchGroup","normalizeDispatchGroupSize","dispatchGroup","LOG_DEBUG","upload","gpuDataId","memcpy","dst","download","getTargetBuffer","alloc","id","free","ptr","release","createKernel","kernelId","WEBGPU_OP_RESOLVE_RULES","releaseKernel","computeKernel","kernelEntry","WebGpuBackend","getFloat32Array","elementCount","HEAP8","getBigInt64Array","BigInt64Array","getInt32Array","newDims","TensorViewImpl","contextDataOffset","customDataOffset","customDataSize","heapU32","HEAPU32","opKernelContext","currentKernelCustomData","HEAPU8","compute","inputsOutputsMapping","mappedInputs","getTensorElementSize","bufferSize","stackSave","stackAlloc","_JsepOutput","stackRestore","jsepInit","isSourceGpu","dataOffset","ComputeContextImpl","configLogLevel","logLevelPrefix","$configLogLevel","$debug","LOG","level","messageLevel","logLevelStringToEnum","args","isChannelLast","calcNormalizedBufferSize","guid","storageCache","downloadCache","freeBuffers","buffersForUploadingPending","buffersPending","srcArrayBuffer","srcOffset","srcLength","gpuDataCache","originalSize","gpuBufferForUploading","mappedAtCreation","GPUBufferUsage","MAP_WRITE","COPY_SRC","getMappedRange","unmap","copyBufferToBuffer","sourceId","destinationId","sourceGpuDataCache","destinationGpuDataCache","STORAGE","COPY_DST","gpuBuffer","buffers","GpuDataType","default","cachedData","downloadData","gpuReadBuffer","MAP_READ","readDataPromise","mapAsync","GPUMapMode","READ","destroy","storage","GpuDataManagerImpl","acosh","asinh","atanh","pool","clipV10","cosh","parseAlphaAttributes","erf","expand","parseGlobalMaxPoolAttributes","reciprocal","reduceL1","reduceL2","reduceLogSumExp","reduceSumSquare","sinh","thresholdedRelu","typeSnippet","component","activationFnSnippet","_hasPreluActivationWeights","_packed","_coordsLength","biasActivationSnippet","createConv2DMatMulProgramInfo","dimAOuter","dimBOuter","dimInner","sequentialAccessByThreads","isChannelsLast","inChannels","outWidth","outHeight","isVec4","dispatchX","dispatchY","workGroupSize","elementsPerThread","dispatch","innerElementSize","tileAOuter","tileBOuter","tileInner","fitAOuter","fitBOuter","fitInner","elementsSize","declareInputs","declareFunctions","gpuDataType","z","getShaderSource","utilFunctions","addBias","hasPreluActivationWeights","innerElementSizeX","innerElementSizeW","coordASnippet","coordResSnippet","xHeight","xWidth","readXSnippet","getXSnippet","sampleX","sampleW","getWSnippet","resType","aType","bType","conv2dCommonSnippet","makeMatMulPackedVec4Source","makeMatMulPackedSource","createConvTranspose2DProgramInfo","squeezeOutputShapeFunction","shaderHelper","rowDim","colDim","channelDim","outputSize","workPerThread","wIndicesHelper","createIndicesHelper","dyIndicesHelper","outputIndicesHelper","codeSnippet4","indicesVariableDeclaration","i2oExpression","codeSnippet","o2iCall","i2oImpl","o2iImpl","mainStart","guardAgainstOutOfBoundsWorkgroupSizes","createConvTranspose2DOpProgramShaderSource","workgroupSize","transposeA","splitK","splitedDimInner","isVectorA","tileAWidth","tileAHight","rowPerThreadB","calculateResultSnippet","writeDataToSubASnippet","rowPerThreadA","colPerThreadA","matmulSnippet","readDataFromSubASnippet","createBinaryOpProgramInfoLoader","funcCall","additionalImplementation","outputDataType","vectorize","sharedDimension","dimA","dimsOutput","doBroadcast","typeA","typeB","typeOutput","expressionScalar","expressionVector","vecSize","scalar","vector","assignment","broadcastImpl","calcOffsetImpl","iType","singleAssignment","expressionA","expressionB","createBinaryOpProgramShader","createBinaryOpProgramInfo","WORKGROUP_SIZE","o2iSnippet","varOffset","varIndices","isPtr","sizeInCode","workgroupSizeX","workgroupSizeY","workgroupSizeZ","is1DimensionDispatch","paramList","globalIdxDefinition","createShaderHelper","ShaderHelperImpl","adjustedAxis","inputStorageBuffersDeclarations","inputIndicesHelpers","indicesAxis","indicesHelper","returnSnippet","readBufferDataImpl","createConcatProgramInfo","createConcatProgramInfoLoader","createGroupedConvProgramInfoLoader","getActicationSnippet","xIndicesHelper","createGroupedConvProgramInfo","updateOutputShape","wIsConst","createConvTranspose2DProgramInfoLoader","convTranspose1d","weightTransposeAttribute","auto_pad","kernel_shape","w_is_const","conv1d","inputChannels","weightHeight","weightWidth","transposedWeight","wT","convInputs","createConv2DMatMulProgramInfoLoader","createConv2DMatMulProgramMetadata","expandProgramMetadata","getAdjustedShape","diff","shapeIndex","inputShapeIndex","inputIndicesHelper","createExpandProgramInfo","activation_params","calculateAlpha","m","broadcastM","broadcastN","offsetC","inputShapeAsChannelFirst","outputShapeAsChannelFirst","dimIdxW","dimIdxH","parsePoolCommonAttributes","ceil_mode","count_include_pad","globalPoolAttributes","storage_order","noOp","createReduceProgramInfoLoader","updatedAttributes","noopWithEmptyAxes","createReduceAttributesFromInputs","outputDimsLength","initInputIdx","reduceOnAllAxes","readInput","fixStartEndValues","steps","newValue","createSliceProgramInfoLoader","createSliceAttributesFromInputs","inputSize","includes","signs","sign","numSteps","newEnd","newStart","calculateInputIndicesImpl","splitSizes","createSplitAttributesFromInputs","outputStorageBuffersDeclarations","outputIndicesHelpers","outputShapes","writeBufferDataImpl","createSplitProgramInfoLoader","permAttr","permFunctionBody","datasize","expression","createElementwiseProgramShader","writeTimestamp","setPipeline","computePipeline","entries","binding","resource","bindGroup","createBindGroup","getBindGroupLayout","setBindGroup","dispatchWorkgroups","QUERY_RESOLVE","resolveQuerySet","mappedData","BigUint64Array","startTimeU64","endTimeU64","profilingTimeBase","isSafeInteger","normalizedDispatchGroupSize","code","shaderModule","createShaderModule","createComputePipeline","entryPoint","limitPerDimension","dispatchAverage","cbrt","proxyWorker","initWasmCallbacks","initOrtCallbacks","isProxy","initializing","initialized","aborted","createSessionAllocateCallbacks","createSessionFinalizeCallbacks","createSessionCallbacks","releaseSessionCallbacks","runCallbacks","endProfilingCallbacks","ensureWorker","onProxyWorkerMessage","out","scriptSrc","currentScript","wasmPaths","substr","lastIndexOf","terminate","onmessage","in","postMessage","initializeWebAssembly","initializeRuntime","core","initRuntime","createSessionAllocate","createSessionFinalize","modeldata","createSession","releaseSession","sessionId","inputIndices","extractTransferableBuffers","setRunOptions","getInstance","runOptionsHandle","allocs","runOptions","logSeverityLevel","logVerbosityLevel","tagDataOffset","tag","allocWasmString","_OrtCreateRunOptions","checkLastError","extra","iterateExtraOptions","WeakSet","keyDataOffset","valueDataOffset","_OrtAddRunConfigEntry","_OrtReleaseRunOptions","_free","runtimeInitialized","path","modelData","fetches","inputArray","kvp","setSessionOptions","sessionOptionsHandle","sessionOptions","use_ort_model_bytes_directly","executionProviders","ep","enableMemPattern","appendDefaultOptions","graphOptimizationLevel","getGraphOptimzationLevel","executionMode","getExecutionMode","logIdDataOffset","logId","optimizedModelFilePathOffset","optimizedModelFilePath","_OrtCreateSessionOptions","enableCpuMemArena","enableProfiling","epName","webnnOptions","deviceType","_OrtAddSessionConfigEntry","powerPreference","epNameDataOffset","_OrtAppendExecutionProvider","setExecutionProviders","_OrtReleaseSessionOptions","tensorDataTypeEnumToString","dateType","tensorTypeToTypedArrayConstructor","loggingLevel","_OrtInit","activeSessions","modelDataOffset","_malloc","sessionHandle","inputNamesUTF8Encoded","outputNamesUTF8Encoded","_OrtCreateSession","_OrtGetInputOutputCount","HEAP32","getSessionInputOutputCount","outputCount","_OrtGetInputName","UTF8ToString","_OrtGetOutputName","_OrtFree","_OrtReleaseSession","runOptionsAllocs","inputValues","inputAllocs","dataByteLength","_OrtCreateTensor","beforeRunStack","inputValuesOffset","inputNamesOffset","outputValuesOffset","outputNamesOffset","inputValuesIndex","inputNamesIndex","outputValuesIndex","outputNamesIndex","errorCode","_OrtRun","runPromise","jsepRunPromise","beforeGetTensorDataStack","tensorDataOffset","_OrtGetTensorData","tensorDataIndex","maxBytesToRead","typedArrayConstructor","_OrtReleaseTensor","profileFileName","_OrtEndProfiling","ortWasmFactory","ortWasmFactoryThreaded","flags","timeout","useThreads","SharedArrayBuffer","MessageChannel","port1","WebAssembly","validate","isMultiThreadSupported","useSimd","isSimdSupported","wasmPrefixOverride","wasmFileName","getWasmFileName","wasmPathOverride","isTimeout","tasks","locateFile","fileName","scriptDirectory","Blob","URL","createObjectURL","mainScriptUrlOrBlob","__dirname","scriptSourceCode","what","race","PThread","terminateAllThreads","dataLength","lengthBytesUTF8","stringToUTF8","prefix","seen","paramsOffset","_OrtGetLastError","errorMessagePointer","errorMessage","Worker_fn","workerConstructor","workerOptions","url","globalScope","window","blob","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","append","getBlob","webkitURL","objectURL","worker","revokeObjectURL","encodeURIComponent","valuesById","$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Version","properties","sparseTensors","typeProtos","prototype","refAttrName","newBuffer","sparseTensor","tp","emptyArray","writer","uint32","string","float","int64","fork","ldelim","TypeProto","int32","SparseTensorProto","encodeDelimited","reader","end2","skipType","decodeDelimited","verify","isString","fromObject","object","String","LongBits","base64","toObject","arrays","defaults","long","longs","enums","json","isFinite","toJSON","toJSONOptions","getTypeUrl","typeUrlPrefix","ValueInfoProto","TrainingInfoProto","initializationBinding","updateBinding","initialization","algorithm","StringStringEntryProto","metadataProps","trainingInfo","functions","OperatorSetIdProto","FunctionProto","TensorAnnotation","quantParameterTensorNames","tensorName","sparseInitializer","quantizationAnnotation","externalData","segment","dataLocation","Segment","double","uint64","DataLocation","TensorShapeProto","$oneOfFields","defineProperty","oneOfGetter","oneOfSetter","oneofs","sequenceType","mapType","optionalType","sparseTensorType","Sequence","Optional","OperatorStatus","attributeProto","_scriptDir","__filename","P","L","W","I","U","H","u","q","ready","l","h","importScripts","ENVIRONMENT_IS_PTHREAD","T","A","O","dirname","startsWith","normalize","readFileSync","thisProgram","argv","exitCode","inspect","global","Worker","href","XMLHttpRequest","open","send","responseText","responseType","response","onload","onerror","S","E","warn","writeSync","print","printErr","quit","wasmBinary","F","noExitRuntime","ae","R","Y","G","HEAP16","HEAPU16","HEAPF32","HEAPF64","HEAP64","HEAPU64","INITIAL_MEMORY","wasmMemory","Memory","initial","maximum","shared","V","J","Z","$","Q","preRun","ee","ne","re","te","onAbort","RuntimeError","oe","ie","ue","credentials","ok","catch","instantiate","fe","se","ce","ye","hb","Lb","le","Db","kb","jb","cmd","start_routine","Mb","Bb","pthread_ptr","unref","Sb","pe","de","fromCharCode","he","me","Dn","Nb","onExit","be","we","ge","nb","zb","tb","Fb","Vb","receiveObjectTransfer","Kb","threadInitTLS","yb","setExitStatus","xb","Xb","ar","Jb","Cb","targetThread","Kn","Wb","transferList","bn","thread","loaded","threadId","text","alert","filename","lineno","on","handlers","urlOrBlob","wasmModule","Ib","Ab","ve","establishStackSpace","fr","cr","_e","Te","gb","ub","qb","pb","Ae","Oe","Ub","Se","Ee","Me","charCodeAt","Ce","ke","Fe","Pe","Re","De","xe","We","Ie","Ue","je","He","Ye","Be","invokeEntryPoint","ir","ze","qe","Ge","Le","Ne","Ve","Je","apply","arguments","Xe","Ze","$e","Ke","Eb","Qe","en","nn","Hb","rn","wb","tn","an","fromWireType","un","fn","sn","cn","ln","pn","dn","hn","mn","Atomics","Tb","store","ur","gn","nr","er","__emscripten_thread_mailbox_await","checkMailbox","yn","vn","wn","_n","globalThis","Function","Tn","An","On","Sn","En","Mn","Cn","kn","getFullYear","getMonth","getDate","Fn","Pn","Rn","Qn","sr","lr","tr","hrtime","timeOrigin","xn","Wn","In","Un","USER","LOGNAME","PATH","PWD","HOME","LANG","languages","jn","Hn","Yn","Bn","zn","qn","Gn","Ln","Nn","Vn","getDay","lb","mb","getTime","setDate","setMonth","setFullYear","Qb","Pb","rb","vb","sb","ib","Yb","Ob","Rb","Jn","Xn","BindingError","InternalError","count_emval_handles","Zn","$n","ra","ga","rr","na","ka","ba","ja","la","toWireType","argPackAdvance","readValueFromPointer","ob","ta","sa","Uint8ClampedArray","ua","Gb","qa","ea","fa","pa","ref","deleteObject","getUTCSeconds","getUTCMinutes","getUTCHours","getUTCDate","getUTCMonth","getUTCFullYear","getUTCDay","UTC","getSeconds","getMinutes","getHours","getTimezoneOffset","aa","setTime","getYear","toTimeString","va","oa","da","grow","ha","ia","ma","asm","Ua","Xa","wa","monitorRunDependencies","clearInterval","instantiateWasm","instantiateStreaming","instance","xa","ya","za","Aa","Ba","Ca","Da","Ea","Fa","Ga","Ha","Ia","Ja","Ka","La","Ma","Na","Oa","Pa","Qa","_pthread_self","Ra","Sa","Ta","Va","__emscripten_tls_init","__embind_initialize_bindings","Wa","__emscripten_thread_init","Ya","_a","$a","__emscripten_thread_crashed","Za","__emscripten_thread_exit","ab","__emscripten_check_mailbox","cb","db","eb","pr","calledRun","onRuntimeInitialized","postRun","startWorker","setStatus","keepRuntimeAlive","ExitStatus","preInit","ortWasm","fs","copyWithin","pending","b64","s64","parts","chunk","invalidEncoding","test","EventEmitter","_listeners","evt","off","listeners","emit","f32","f8b","writeFloat_f32_cpy","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","round","exponent","LN2","readFloat_ieee754","readUint","uint","mantissa","NaN","Infinity","writeUintLE","writeUintBE","readUintLE","readUintBE","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","inquire","moduleName","mod","eval","SIZE","MAX","slab","utf8","read","write","c1","c2","__esModule","EMPTY","isGuid","validator","gen","createEmpty","raw","random","equals","other","isEmpty","protobuf","configure","_configure","BufferWriter","BufferReader","rpc","indexOutOfRange","writeLength","create_array","Buffer","isBuffer","readLongVarint","bits","readFixed32_end","readFixed64","_slice","sint32","bool","fixed32","sfixed32","skip","wireType","BufferReader_","merge","sint64","zzDecode","fixed64","sfixed64","utf8Slice","Service","rpcImpl","requestDelimited","responseDelimited","Boolean","rpcCall","method","requestCtor","responseCtor","request","callback","asPromise","endedByRPC","zero","zzEncode","zeroHash","fromNumber","fromString","toLong","fromHash","hash","toHash","mask","part0","part1","part2","ifNotSet","newError","CustomError","captureStackTrace","writable","enumerable","configurable","isNode","freeze","emptyObject","isObject","isset","isSet","prop","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","lcFirst","toLowerCase","ProtocolError","fieldNames","fieldMap","encoding","allocUnsafe","Op","noop","State","states","writeByte","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","Instance","Module","ctz32","clz32","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","radix","radixToPower","power","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","eq","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","comp","lt","lessThanOrEqual","lte","greaterThan","gt","gte","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","b00","divide","divisor","approx","toUnsigned","shru","shr","shl","log2","delta","approxRes","approxRem","modulo","countLeadingZeros","clz","countTrailingZeros","ctz","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","rotateLeft","rotl","rotateRight","rotr","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","_default","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","float32","float64","toFloat64","Builder","opt_initial_size","initial_size","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","clear","capacity","forceDefaults","asUint8Array","additional_bytes","align_size","old_buf_size","growByteBuffer","byte_size","writeInt8","writeInt16","writeInt64","writeFloat32","writeFloat64","addInt16","addFloat64","voffset","slot","addFieldInt16","addFieldFloat64","addFieldStruct","nested","notNested","new_buf_size","nbb","numfields","vtableloc","trimmed_size","existing_vtable","vt1","outer_loop","vt2","readInt16","root_table","opt_file_identifier","opt_size_prefix","size_prefix","file_identifier","finishSizePrefixed","table","field","table_start","vtable_start","elem_size","num_elems","alignment","createString","codePoint","bytes_","position_","readUint16","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","vtable_offset","opt_encoding","ident","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","definition","Symbol","toStringTag","__webpack_exports__"],"sourceRoot":""}