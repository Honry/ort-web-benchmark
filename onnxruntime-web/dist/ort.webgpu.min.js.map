{"version":3,"file":"ort.webgpu.min.js","mappings":"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I,EAAG,IAAK,IAAK,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,IAAK,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAA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","sources":["webpack://ort/webpack/universalModuleDefinition","webpack://ort/./lib/backend-onnxjs.ts","webpack://ort/./lib/backend-wasm.ts","webpack://ort/./lib/index.ts","webpack://ort/./lib/onnxjs/attribute-with-cache-key.ts","webpack://ort/./lib/onnxjs/attribute.ts","webpack://ort/./lib/onnxjs/backend.ts","webpack://ort/./lib/onnxjs/backends/backend-webgl.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-coordinate-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-definitions.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-encoding-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-fragcolor-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-function-inliner.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-preprocessor.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-registered-libs.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-shape-utils-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-source.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-vec-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/inference-handler.ts","webpack://ort/./lib/onnxjs/backends/webgl/op-resolve-rules.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/batch-normalization.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/binary-op.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/cast.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/concat-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/concat.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-grouped.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-transpose.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/depth-to-space.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/dot-product.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/flatten.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/fuse-utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/gather.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/gemm.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/im2col-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/im2col.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/image-scaler.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/instance-normalization.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/lrn.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/matmul-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/matmul.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/packing-utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pad.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pool.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reduce.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reshape-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reshape.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/resize-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/shape.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/slice.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/softmax.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/split.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/squeeze.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/sum.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/tile.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/transpose.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/uint8-encode.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unary-op.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unpack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unsqueeze.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/upsample.ts","webpack://ort/./lib/onnxjs/backends/webgl/program-manager.ts","webpack://ort/./lib/onnxjs/backends/webgl/session-handler.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-data-encoder.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-layout-strategy.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-layout.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-manager.ts","webpack://ort/./lib/onnxjs/backends/webgl/types.ts","webpack://ort/./lib/onnxjs/backends/webgl/utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/webgl-context-factory.ts","webpack://ort/./lib/onnxjs/backends/webgl/webgl-context.ts","webpack://ort/./lib/onnxjs/execution-plan.ts","webpack://ort/./lib/onnxjs/graph.ts","webpack://ort/./lib/onnxjs/instrument.ts","webpack://ort/./lib/onnxjs/model.ts","webpack://ort/./lib/onnxjs/operators.ts","webpack://ort/./lib/onnxjs/opset.ts","webpack://ort/./lib/onnxjs/ort-schema/flatbuffers/ort-generated.ts","webpack://ort/./lib/onnxjs/session-handler.ts","webpack://ort/./lib/onnxjs/session.ts","webpack://ort/./lib/onnxjs/tensor.ts","webpack://ort/./lib/onnxjs/util.ts","webpack://ort/./lib/version.ts","webpack://ort/./lib/wasm/jsep/backend-webgpu.ts","webpack://ort/./lib/wasm/jsep/init.ts","webpack://ort/./lib/wasm/jsep/log.ts","webpack://ort/./lib/wasm/jsep/util.ts","webpack://ort/./lib/wasm/jsep/webgpu/attribute-with-cache-key.ts","webpack://ort/./lib/wasm/jsep/webgpu/gpu-data-manager.ts","webpack://ort/./lib/wasm/jsep/webgpu/op-resolve-rules.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/3rd-party/activation_util.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/3rd-party/conv2d_mm_webgpu.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/3rd-party/conv_backprop_webgpu.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/3rd-party/conv_util.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/3rd-party/matmul_packed_webgpu.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/binary-op.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/common.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/concat.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/conv-grouped.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/conv-transpose.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/conv.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/conv2d-mm.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/expand.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/fuse-utils.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/gemm.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/matmul.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/pool.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/reduce.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/slice.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/split.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/transpose.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/unary-op.ts","webpack://ort/./lib/wasm/jsep/webgpu/program-manager.ts","webpack://ort/./lib/wasm/jsep/webgpu/types.ts","webpack://ort/./lib/wasm/proxy-wrapper.ts","webpack://ort/./lib/wasm/run-options.ts","webpack://ort/./lib/wasm/session-handler.ts","webpack://ort/./lib/wasm/session-options.ts","webpack://ort/./lib/wasm/wasm-common.ts","webpack://ort/./lib/wasm/wasm-core-impl.ts","webpack://ort/./lib/wasm/wasm-factory.ts","webpack://ort/./lib/wasm/wasm-utils.ts","webpack://ort/./lib/wasm/proxy-worker/main.ts","webpack://ort/../node_modules/worker-loader/dist/runtime/inline.js","webpack://ort/./lib/onnxjs/ort-schema/protobuf/onnx.js","webpack://ort/./lib/wasm/binding/ort-wasm-simd-threaded.jsep.js","webpack://ort/./lib/wasm/binding/ort-wasm-simd.jsep.js","webpack://ort/./node_modules/@protobufjs/aspromise/index.js","webpack://ort/./node_modules/@protobufjs/base64/index.js","webpack://ort/./node_modules/@protobufjs/eventemitter/index.js","webpack://ort/./node_modules/@protobufjs/float/index.js","webpack://ort/./node_modules/@protobufjs/inquire/index.js","webpack://ort/./node_modules/@protobufjs/pool/index.js","webpack://ort/./node_modules/@protobufjs/utf8/index.js","webpack://ort/./node_modules/guid-typescript/dist/guid.js","webpack://ort/./node_modules/protobufjs/minimal.js","webpack://ort/./node_modules/protobufjs/src/index-minimal.js","webpack://ort/./node_modules/protobufjs/src/reader.js","webpack://ort/./node_modules/protobufjs/src/reader_buffer.js","webpack://ort/./node_modules/protobufjs/src/roots.js","webpack://ort/./node_modules/protobufjs/src/rpc.js","webpack://ort/./node_modules/protobufjs/src/rpc/service.js","webpack://ort/./node_modules/protobufjs/src/util/longbits.js","webpack://ort/./node_modules/protobufjs/src/util/minimal.js","webpack://ort/./node_modules/protobufjs/src/writer.js","webpack://ort/./node_modules/protobufjs/src/writer_buffer.js","webpack://ort/../common/dist/cjs/backend-impl.js","webpack://ort/../common/dist/cjs/backend.js","webpack://ort/../common/dist/cjs/env-impl.js","webpack://ort/../common/dist/cjs/env.js","webpack://ort/../common/dist/cjs/index.js","webpack://ort/../common/dist/cjs/inference-session-impl.js","webpack://ort/../common/dist/cjs/inference-session.js","webpack://ort/../common/dist/cjs/onnx-value.js","webpack://ort/../common/dist/cjs/tensor-conversion-impl.js","webpack://ort/../common/dist/cjs/tensor-factory-impl.js","webpack://ort/../common/dist/cjs/tensor-impl.js","webpack://ort/../common/dist/cjs/tensor-utils-impl.js","webpack://ort/../common/dist/cjs/tensor.js","webpack://ort/../common/dist/cjs/version.js","webpack://ort/./node_modules/long/umd/index.js","webpack://ort/./node_modules/flatbuffers/js/flatbuffers.mjs","webpack://ort/webpack/bootstrap","webpack://ort/webpack/runtime/compat get default export","webpack://ort/webpack/runtime/define property getters","webpack://ort/webpack/runtime/hasOwnProperty shorthand","webpack://ort/webpack/runtime/make namespace object","webpack://ort/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ort\"] = factory();\n\telse\n\t\troot[\"ort\"] = factory();\n})(self, () => {\nreturn ","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable import/no-internal-modules */\nimport {Backend, InferenceSession, SessionHandler} from 'onnxruntime-common';\n\nimport {Session} from './onnxjs/session';\nimport {OnnxjsSessionHandler} from './onnxjs/session-handler';\n\nclass OnnxjsBackend implements Backend {\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  async init(): Promise<void> {}\n\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    // NOTE: Session.Config(from onnx.js) is not compatible with InferenceSession.SessionOptions(from\n    // onnxruntime-common).\n    //       In future we should remove Session.Config and use InferenceSession.SessionOptions.\n    //       Currently we allow this to happen to make test runner work.\n    const session = new Session(options as unknown as Session.Config);\n\n    // typescript cannot merge method override correctly (so far in 4.2.3). need if-else to call the method.\n    if (typeof pathOrBuffer === 'string') {\n      await session.loadModel(pathOrBuffer);\n    } else {\n      await session.loadModel(pathOrBuffer);\n    }\n\n    return new OnnxjsSessionHandler(session);\n  }\n}\n\nexport const onnxjsBackend = new OnnxjsBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Backend, env, InferenceSession, SessionHandler} from 'onnxruntime-common';\nimport {cpus} from 'os';\n\nimport {initializeWebAssemblyInstance} from './wasm/proxy-wrapper';\nimport {OnnxruntimeWebAssemblySessionHandler} from './wasm/session-handler';\n\n/**\n * This function initializes all flags for WebAssembly.\n *\n * Those flags are accessible from `ort.env.wasm`. Users are allow to set those flags before the first inference session\n * being created, to override default value.\n */\nexport const initializeFlags = (): void => {\n  if (typeof env.wasm.initTimeout !== 'number' || env.wasm.initTimeout < 0) {\n    env.wasm.initTimeout = 0;\n  }\n\n  if (typeof env.wasm.simd !== 'boolean') {\n    env.wasm.simd = true;\n  }\n\n  if (typeof env.wasm.proxy !== 'boolean') {\n    env.wasm.proxy = false;\n  }\n\n  if (typeof env.wasm.numThreads !== 'number' || !Number.isInteger(env.wasm.numThreads) || env.wasm.numThreads <= 0) {\n    const numCpuLogicalCores = typeof navigator === 'undefined' ? cpus().length : navigator.hardwareConcurrency;\n    env.wasm.numThreads = Math.min(4, Math.ceil((numCpuLogicalCores || 1) / 2));\n  }\n};\n\nclass OnnxruntimeWebAssemblyBackend implements Backend {\n  async init(): Promise<void> {\n    // populate wasm flags\n    initializeFlags();\n\n    // init wasm\n    await initializeWebAssemblyInstance();\n  }\n  createSessionHandler(path: string, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\n  createSessionHandler(buffer: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    const handler = new OnnxruntimeWebAssemblySessionHandler();\n    await handler.loadModel(pathOrBuffer, options);\n    return Promise.resolve(handler);\n  }\n}\n\nexport const wasmBackend = new OnnxruntimeWebAssemblyBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports */\n// We use \"require\" instead of \"import\" here because import statement must be put in top level. Our current code does\n// not allow terser to tree-shaking code as expected because some codes are treated as having side effects.\n// So we import code inside the if-clause to allow terser remove the code safely.\n\nexport * from 'onnxruntime-common';\nimport {registerBackend, env} from 'onnxruntime-common';\nimport {version} from './version';\n\nif (!BUILD_DEFS.DISABLE_WEBGL) {\n  const onnxjsBackend = require('./backend-onnxjs').onnxjsBackend;\n  registerBackend('webgl', onnxjsBackend, -10);\n}\n\nif (!BUILD_DEFS.DISABLE_WASM) {\n  const wasmBackend = require('./backend-wasm').wasmBackend;\n  if (!BUILD_DEFS.DISABLE_WEBGPU && typeof navigator !== 'undefined' && navigator.gpu) {\n    registerBackend('webgpu', wasmBackend, 5);\n  }\n  registerBackend('cpu', wasmBackend, 10);\n  registerBackend('wasm', wasmBackend, 10);\n  registerBackend('xnnpack', wasmBackend, 9);\n  registerBackend('webnn', wasmBackend, 9);\n}\n\nenv.versions.web = version;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nclass AttributeWithCacheKeyImpl {\n  constructor(attribute: Record<string, unknown>) {\n    Object.assign(this, attribute);\n  }\n\n  private _cacheKey: string;\n  public get cacheKey(): string {\n    if (!this._cacheKey) {\n      this._cacheKey =\n          Object.getOwnPropertyNames(this).sort().map(name => `${(this as Record<string, unknown>)[name]}`).join(';');\n    }\n    return this._cacheKey;\n  }\n}\n\nexport interface AttributeWithCacheKey {\n  readonly cacheKey: string;\n}\n\nexport const createAttributeWithCacheKey = <T extends Record<string, unknown>>(attribute: T): T&AttributeWithCacheKey =>\n    new AttributeWithCacheKeyImpl(attribute) as unknown as T & AttributeWithCacheKey;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport Long from 'long';\n\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\nimport {onnx} from './ort-schema/protobuf/onnx';\nimport {Tensor} from './tensor';\nimport {decodeUtf8String, LongUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Attribute {\n  export interface DataTypeMap {\n    float: number;\n    int: number;\n    string: string;\n    tensor: Tensor;\n    floats: number[];\n    ints: number[];\n    strings: string[];\n    tensors: Tensor[];\n  }\n\n  export type DataType = keyof DataTypeMap;\n}\n\ntype ValueTypes = Attribute.DataTypeMap[Attribute.DataType];\n\ntype Value = [ValueTypes, Attribute.DataType];\n\nexport class Attribute {\n  constructor(attributes: onnx.IAttributeProto[]|ortFbs.Attribute[]|null|undefined) {\n    this._attributes = new Map();\n    if (attributes !== null && attributes !== undefined) {\n      for (const attr of attributes) {\n        if (attr instanceof onnx.AttributeProto) {\n          this._attributes.set(attr.name, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        } else if (attr instanceof ortFbs.Attribute) {\n          this._attributes.set(attr.name()!, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        }\n      }\n      if (this._attributes.size < attributes.length) {\n        throw new Error('duplicated attribute names');\n      }\n    }\n  }\n\n  set(key: string, type: Attribute.DataType, value: ValueTypes): void {\n    this._attributes.set(key, [value, type]);\n  }\n  delete(key: string): void {\n    this._attributes.delete(key);\n  }\n  getFloat(key: string, defaultValue?: Attribute.DataTypeMap['float']) {\n    return this.get(key, 'float', defaultValue);\n  }\n\n  getInt(key: string, defaultValue?: Attribute.DataTypeMap['int']) {\n    return this.get(key, 'int', defaultValue);\n  }\n\n  getString(key: string, defaultValue?: Attribute.DataTypeMap['string']) {\n    return this.get(key, 'string', defaultValue);\n  }\n\n  getTensor(key: string, defaultValue?: Attribute.DataTypeMap['tensor']) {\n    return this.get(key, 'tensor', defaultValue);\n  }\n\n  getFloats(key: string, defaultValue?: Attribute.DataTypeMap['floats']) {\n    return this.get(key, 'floats', defaultValue);\n  }\n\n  getInts(key: string, defaultValue?: Attribute.DataTypeMap['ints']) {\n    return this.get(key, 'ints', defaultValue);\n  }\n\n  getStrings(key: string, defaultValue?: Attribute.DataTypeMap['strings']) {\n    return this.get(key, 'strings', defaultValue);\n  }\n\n  getTensors(key: string, defaultValue?: Attribute.DataTypeMap['tensors']) {\n    return this.get(key, 'tensors', defaultValue);\n  }\n\n  private get<V extends Attribute.DataTypeMap[Attribute.DataType]>(\n      key: string, type: Attribute.DataType, defaultValue?: V): V {\n    const valueAndType = this._attributes.get(key);\n    if (valueAndType === undefined) {\n      if (defaultValue !== undefined) {\n        return defaultValue;\n      }\n      throw new Error(`required attribute not found: ${key}`);\n    }\n    if (valueAndType[1] !== type) {\n      throw new Error(`type mismatch: expected ${type} but got ${valueAndType[1]}`);\n    }\n    return valueAndType[0] as V;\n  }\n\n  private static getType(attr: onnx.IAttributeProto|ortFbs.Attribute): Attribute.DataType {\n    const type = attr instanceof onnx.AttributeProto ? (attr).type : (attr as ortFbs.Attribute).type();\n    switch (type) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return 'float';\n      case onnx.AttributeProto.AttributeType.INT:\n        return 'int';\n      case onnx.AttributeProto.AttributeType.STRING:\n        return 'string';\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return 'tensor';\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return 'floats';\n      case onnx.AttributeProto.AttributeType.INTS:\n        return 'ints';\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return 'strings';\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return 'tensors';\n      default:\n        throw new Error(`attribute type is not supported yet: ${onnx.AttributeProto.AttributeType[type]}`);\n    }\n  }\n\n  private static getValue(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    const attrType = attr instanceof onnx.AttributeProto ? attr.type : (attr as ortFbs.Attribute).type();\n    if (attrType === onnx.AttributeProto.AttributeType.GRAPH || attrType === onnx.AttributeProto.AttributeType.GRAPHS) {\n      throw new Error('graph attribute is not supported yet');\n    }\n\n    const value = this.getValueNoCheck(attr);\n\n    // cast LONG to number\n    if (attrType === onnx.AttributeProto.AttributeType.INT && LongUtil.isLong(value)) {\n      return LongUtil.longToNumber(value as Long | flatbuffers.Long);\n    }\n\n    // cast LONG[] to number[]\n    if (attrType === onnx.AttributeProto.AttributeType.INTS) {\n      const arr = (value as Array<number|Long|flatbuffers.Long>);\n      const numberValue: number[] = new Array<number>(arr.length);\n\n      for (let i = 0; i < arr.length; i++) {\n        const maybeLong = arr[i];\n        numberValue[i] = LongUtil.longToNumber(maybeLong);\n      }\n\n      return numberValue;\n    }\n\n    // cast onnx.TensorProto to onnxjs.Tensor\n    if (attrType === onnx.AttributeProto.AttributeType.TENSOR) {\n      return attr instanceof onnx.AttributeProto ? Tensor.fromProto(value as onnx.ITensorProto) :\n                                                   Tensor.fromOrtTensor(value as ortFbs.Tensor);\n    }\n\n    // cast onnx.TensorProto[] to onnxjs.Tensor[]\n    if (attrType === onnx.AttributeProto.AttributeType.TENSORS) {\n      if (attr instanceof onnx.AttributeProto) {\n        const tensorProtos = value as onnx.ITensorProto[];\n        return tensorProtos.map(value => Tensor.fromProto(value));\n      } else if (attr instanceof ortFbs.Attribute) {\n        const tensorProtos = value as ortFbs.Tensor[];\n        return tensorProtos.map(value => Tensor.fromOrtTensor(value));\n      }\n    }\n\n    // cast Uint8Array to string\n    if (attrType === onnx.AttributeProto.AttributeType.STRING) {\n      // string in onnx attribute is of uint8array type, so we need to convert it to string below. While in ort format,\n      // string attributes are returned as string, so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8String = value as Uint8Array;\n        return decodeUtf8String(utf8String);\n      }\n    }\n\n    // cast Uint8Array[] to string[]\n    if (attrType === onnx.AttributeProto.AttributeType.STRINGS) {\n      // strings in onnx attribute is returned as uint8array[], so we need to convert it to string[] below. While in ort\n      // format strings attributes are returned as string[], so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8Strings = value as Uint8Array[];\n        return utf8Strings.map(decodeUtf8String);\n      }\n    }\n\n    return value as ValueTypes;\n  }\n\n  private static getValueNoCheck(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    return attr instanceof (onnx.AttributeProto) ? this.getValueNoCheckFromOnnxFormat(attr) :\n                                                   this.getValueNoCheckFromOrtFormat(attr as ortFbs.Attribute);\n  }\n\n  private static getValueNoCheckFromOnnxFormat(attr: onnx.IAttributeProto) {\n    switch (attr.type!) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return attr.f;\n      case onnx.AttributeProto.AttributeType.INT:\n        return attr.i;\n      case onnx.AttributeProto.AttributeType.STRING:\n        return attr.s;\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return attr.t;\n      case onnx.AttributeProto.AttributeType.GRAPH:\n        return attr.g;\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return attr.floats;\n      case onnx.AttributeProto.AttributeType.INTS:\n        return attr.ints;\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return attr.strings;\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return attr.tensors;\n      case onnx.AttributeProto.AttributeType.GRAPHS:\n        return attr.graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${onnx.AttributeProto.AttributeType[attr.type!]}`);\n    }\n  }\n\n  private static getValueNoCheckFromOrtFormat(attr: ortFbs.Attribute) {\n    switch (attr.type()) {\n      case ortFbs.AttributeType.FLOAT:\n        return attr.f();\n      case ortFbs.AttributeType.INT:\n        return attr.i();\n      case ortFbs.AttributeType.STRING:\n        return attr.s();\n      case ortFbs.AttributeType.TENSOR:\n        return attr.t();\n      case ortFbs.AttributeType.GRAPH:\n        return attr.g();\n      case ortFbs.AttributeType.FLOATS:\n        return attr.floatsArray();\n      case ortFbs.AttributeType.INTS: {\n        const ints = [];\n        for (let i = 0; i < attr.intsLength(); i++) {\n          ints.push(attr.ints(i)!);\n        }\n        return ints;\n      }\n      case ortFbs.AttributeType.STRINGS: {\n        const strings = [];\n        for (let i = 0; i < attr.stringsLength(); i++) {\n          strings.push(attr.strings(i));\n        }\n        return strings;\n      }\n      case ortFbs.AttributeType.TENSORS: {\n        const tensors = [];\n        for (let i = 0; i < attr.tensorsLength(); i++) {\n          tensors.push(attr.tensors(i)!);\n        }\n        return tensors;\n      }\n      // case ortFbs.AttributeType.GRAPHS:\n      // TODO: Subgraph not supported yet.\n      // const graphs = [];\n      // for (let i = 0; i < attr.graphsLength(); i++) {\n      //   graphs.push(attr.graphs(i)!);\n      // }\n      // return graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${ortFbs.AttributeType[attr.type()]}`);\n    }\n  }\n\n  protected _attributes: Map<string, Value>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {WebGLBackend} from './backends/backend-webgl';\nimport {Graph} from './graph';\nimport {Operator} from './operators';\nimport {OpSet} from './opset';\nimport {Session} from './session';\n\nexport interface InferenceHandler {\n  /**\n   * dispose the inference handler. it will be called as the last step in Session.run()\n   */\n  dispose(): void;\n}\n\nexport interface SessionHandler {\n  /**\n   * transform the graph at initialization time\n   * @param graphTransformer the graph transformer to manipulate the model graph\n   */\n  transformGraph?(graphTransformer: Graph.Transformer): void;\n\n  /**\n   * create an instance of InferenceHandler to use in a Session.run() call\n   */\n  createInferenceHandler(): InferenceHandler;\n\n  /**\n   * dispose the session handler. it will be called when a session is being disposed explicitly\n   */\n  dispose(): void;\n\n  /**\n   * Resolves the operator from the name and opset version; backend specific\n   * @param node the node to resolve\n   * @param opsets a list of opsets that exported from the model\n   * @param graph the completely initialized graph\n   */\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator;\n\n  /**\n   * This method let's the sessionHandler know that the graph initialization is complete\n   * @param graph the completely initialized graph\n   */\n  onGraphInitialized?(graph: Graph): void;\n\n  /**\n   * a reference to the corresponding backend\n   */\n  readonly backend: Backend;\n\n  /**\n   * a reference to the session context\n   */\n  readonly context: Session.Context;\n}\n\nexport interface Backend {\n  /**\n   * initialize the backend. will be called only once, when the first time the\n   * backend it to be used\n   */\n  initialize(): boolean|Promise<boolean>;\n\n  /**\n   * create an instance of SessionHandler to use in a Session object's lifecycle\n   */\n  createSessionHandler(context: Session.Context): SessionHandler;\n\n  /**\n   * dispose the backend. currently this will not be called\n   */\n  dispose(): void;\n}\n\n// caches all initialized backend instances\nconst backendsCache: Map<string, Backend> = new Map();\n\nexport const backend: {[name: string]: Backend} = {\n  webgl: new WebGLBackend()\n};\n\n/**\n * Resolve a reference to the backend. If a hint is specified, the corresponding\n * backend will be used.\n */\nexport async function resolveBackend(hint?: string|readonly string[]): Promise<Backend> {\n  if (!hint) {\n    return resolveBackend(['webgl']);\n  } else {\n    const hints = typeof hint === 'string' ? [hint] : hint;\n\n    for (const backendHint of hints) {\n      const cache = backendsCache.get(backendHint);\n      if (cache) {\n        return cache;\n      }\n\n      const backend = await tryLoadBackend(backendHint);\n      if (backend) {\n        return backend;\n      }\n    }\n  }\n\n  throw new Error('no available backend to use');\n}\n\nasync function tryLoadBackend(backendHint: string): Promise<Backend|undefined> {\n  const backendObj = backend;\n\n  if (typeof backendObj[backendHint] !== 'undefined' && isBackend(backendObj[backendHint])) {\n    const backend = backendObj[backendHint];\n    let init = backend.initialize();\n    if (typeof init === 'object' && 'then' in init) {\n      init = await init;\n    }\n    if (init) {\n      backendsCache.set(backendHint, backend);\n      return backend;\n    }\n  }\n\n  return undefined;\n}\n\nfunction isBackend(obj: unknown) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const o = obj as any;\n\n  // check if an object is a Backend instance\n  if (\n      'initialize' in o && typeof o.initialize === 'function' &&                      // initialize()\n      'createSessionHandler' in o && typeof o.createSessionHandler === 'function' &&  // createSessionHandler()\n      'dispose' in o && typeof o.dispose === 'function'                               // dispose()\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nexport type BackendType = Backend;\nexport type SessionHandlerType = ReturnType<BackendType['createSessionHandler']>;\nexport type InferenceHandlerType = ReturnType<SessionHandlerType['createInferenceHandler']>;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {Backend, SessionHandler} from '../backend';\nimport {Logger} from '../instrument';\nimport {Session} from '../session';\n\nimport {WebGLSessionHandler} from './webgl/session-handler';\nimport {WebGLContext} from './webgl/webgl-context';\nimport {createWebGLContext} from './webgl/webgl-context-factory';\n\n/**\n * WebGLBackend is the entry point for all WebGL opeartions\n * When it starts it created the WebGLRenderingContext\n * and other main framework components such as Program and Texture Managers\n */\nexport class WebGLBackend implements Backend {\n  glContext: WebGLContext;\n\n  get contextId(): 'webgl'|'webgl2'|undefined {\n    return env.webgl.contextId;\n  }\n  set contextId(value: 'webgl'|'webgl2'|undefined) {\n    env.webgl.contextId = value;\n  }\n\n  get matmulMaxBatchSize(): number|undefined {\n    return env.webgl.matmulMaxBatchSize;\n  }\n  set matmulMaxBatchSize(value: number|undefined) {\n    env.webgl.matmulMaxBatchSize = value;\n  }\n\n  get textureCacheMode(): 'initializerOnly'|'full'|undefined {\n    return env.webgl.textureCacheMode;\n  }\n  set textureCacheMode(value: 'initializerOnly'|'full'|undefined) {\n    env.webgl.textureCacheMode = value;\n  }\n\n  get pack(): boolean|undefined {\n    return env.webgl.pack;\n  }\n  set pack(value: boolean|undefined) {\n    env.webgl.pack = value;\n  }\n\n  get async(): boolean|undefined {\n    return env.webgl.async;\n  }\n  set async(value: boolean|undefined) {\n    env.webgl.async = value;\n  }\n\n  initialize(): boolean {\n    try {\n      this.glContext = createWebGLContext(this.contextId);\n      if (typeof this.matmulMaxBatchSize !== 'number') {\n        this.matmulMaxBatchSize = 16;\n      }\n      if (typeof this.textureCacheMode !== 'string') {\n        this.textureCacheMode = 'full';\n      }\n      if (typeof this.pack !== 'boolean') {\n        this.pack = false;\n      }\n      if (typeof this.async !== 'boolean') {\n        this.async = false;\n      }\n\n      Logger.setWithEnv(env);\n\n      Logger.verbose(\n          'WebGLBackend',\n          `Created WebGLContext: ${typeof this.glContext} with matmulMaxBatchSize: ${\n              this.matmulMaxBatchSize}; textureCacheMode: ${this.textureCacheMode}; pack: ${this.pack}; async: ${\n              this.async}.`);\n      return true;\n    } catch (e) {\n      Logger.warning('WebGLBackend', `Unable to initialize WebGLBackend. ${e}`);\n      return false;\n    }\n  }\n  createSessionHandler(context: Session.Context): SessionHandler {\n    return new WebGLSessionHandler(this, context);\n  }\n  dispose(): void {\n    this.glContext.dispose();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ArrayUtil, BroadcastUtil, ShapeUtil} from '../../util';\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\nimport {squeezeShape} from './texture-layout-strategy';\nimport {TextureLayout} from './types';\nimport {generateShaderFuncNameFromInputSamplerName, generateShaderFuncNameFromInputSamplerNameAtOutCoords, getCoordsDataType, getGlChannels, getSqueezedParams, squeezeInputShape} from './utils';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class CoordsGlslLib extends GlslLib {\n  returnType: string;\n\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.offsetToCoords(),\n      ...this.coordsToOffset(),\n      ...this.toVec(),\n      ...this.valueFrom(),\n      // TODO return these only when packing is enabled.\n      ...this.getCommonUtilFuncs(),\n      ...this.getInputsSamplingSnippets(),\n      ...this.getOutputSamplingSnippet()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected offsetToCoords(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'offsetToCoords';\n    return {\n      offsetToCoords: new GlslLibRoutine(`\n      vec2 ${funcName}(int offset, int width, int height) {\n        int t = offset / width;\n        int s = offset - t*width;\n        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);\n        return coords;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected coordsToOffset(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'coordsToOffset';\n    return {\n      coordsToOffset: new GlslLibRoutine(`\n      int ${funcName}(vec2 coords, int width, int height) {\n        float s = coords.s * float(width);\n        float t = coords.t * float(height);\n        int offset = int(t) * width + int(s);\n        return offset;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Generates code for output sampler.\n   */\n\n  protected getOutputSamplingSnippet(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    if (outputLayout.isPacked) {\n      return this.getPackedOutputSamplingSnippet(outputLayout);\n    } else {\n      return this.getUnpackedOutputSamplingSnippet(outputLayout);\n    }\n  }\n\n  /**\n   * Generates code for packed output sampler.\n   */\n  protected getPackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputPacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] = this.getOutputPacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputPacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        result[funcName] = this.getOutputPackedNDCoords(outShape, outTexShape as [number, number]);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRGBASource = `\n      void setOutput(vec4 val) {\n        ${glsl.output} = val;\n      }\n    `;\n    const floatTextureSetRGBAFuncName = 'floatTextureSetRGBA';\n    result[floatTextureSetRGBAFuncName] = new GlslLibRoutine(floatTextureSetRGBASource);\n    return result;\n  }\n\n  /**\n   * Generates code for unpacked output sampler.\n   */\n  protected getUnpackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputUnpacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] =\n            this.getOutputUnpacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputUnpacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      case 4:\n        result[funcName] = this.getOutputUnpacked4DCoords(\n            outShape as [number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 5:\n        result[funcName] = this.getOutputUnpacked5DCoords(\n            outShape as [number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 6:\n        result[funcName] = this.getOutputUnpacked6DCoords(\n            outShape as [number, number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        throw new Error(`Unsupported output dimensionality: ${outShape.length}`);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRSource = `\n        void setOutput(float val) {\n          ${glsl.output} = vec4(val, 0, 0, 0);\n        }\n    `;\n    const floatTextureSetRFuncName = 'floatTextureSetR';\n    result[floatTextureSetRFuncName] = new GlslLibRoutine(floatTextureSetRSource);\n    return result;\n  }\n\n  /**\n   * Scalar output coordinates.\n   */\n  protected getOutputScalarCoords(): GlslLibRoutine {\n    return new GlslLibRoutine(`\n      int getOutputCoords() {\n        return 0;\n      }\n    `);\n  }\n\n  /**\n   * 1D packed output coordinates.\n   */\n  protected getOutputPacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = texShape;\n    let source = '';\n    if (packedTexShape[0] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.y * ${packedTexShape[1]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    if (packedTexShape[1] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.x * ${packedTexShape[0]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                 vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          return 2 * (resTexRC.y * ${packedTexShape[0]} + resTexRC.x);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 2D packed output coordinates.\n   */\n  protected getOutputPacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    if (ArrayUtil.arraysEqual(shape, texShape)) {\n      source = `\n        ivec2 getOutputCoords() {\n          return 2 * ivec2(TexCoords.xy * vec2(${texShape[0]}, ${texShape[1]}));\n        }\n      `;\n      return new GlslLibRoutine(source);\n    }\n\n    const packedTexShape = texShape;\n    // texels needed to accommodate a logical row\n    const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n    /**\n     * getOutputCoords\n     *\n     * resTexRC: The rows and columns of the texels. If you move over one\n     * texel to the right in the packed texture, you are moving over one column\n     * (not two).\n     *\n     * index: The texel index\n     */\n    source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 3D packed output coordinates.\n   */\n  protected getOutputPacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n    const source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          int b = index / ${texelsInBatch};\n          index -= b * ${texelsInBatch};\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec3(b, r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * ND packed output coordinates.\n   */\n  protected getOutputPackedNDCoords(shape: readonly number[], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n\n    const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n    let texelsInBatchN = texelsInBatch;\n    let batches = '';\n    let coords = 'b, r, c';\n\n    for (let b = 2; b < shape.length - 1; b++) {\n      texelsInBatchN *= shape[shape.length - b - 1];\n      batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n      coords = `b${b}, ` + coords;\n    }\n    const source = `\n      ivec${shape.length} getOutputCoords() {\n        ivec2 resTexRC = ivec2(TexCoords.xy *\n                              vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n        int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n        ${batches}\n\n        int b = index / ${texelsInBatch};\n        index -= b * ${texelsInBatch};\n\n        // reverse r and c order for packed texture\n        int r = imod(index, ${texelsInLogicalRow}) * 2;\n        int c = 2 * (index / ${texelsInLogicalRow});\n\n        return ivec${shape.length}(${coords});\n      }\n    `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 1D output coordinates.\n   */\n  protected getOutputUnpacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          return resTexRC.y * ${texShape[0]} + resTexRC.x;\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 2D output coordinates.\n   */\n  protected getOutputUnpacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          int r = index / ${shape[1]};\n          int c = index - r * ${shape[1]};\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 3D output coordinates.\n   */\n  protected getOutputUnpacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec3(r, c, d);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 4D output coordinates.\n   */\n  protected getOutputUnpacked4DCoords(shape: [number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec4 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec4(r, c, d, d2);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 5D output coordinates.\n   */\n  protected getOutputUnpacked5DCoords(shape: [number, number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec5 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec5(r, c, d, d2, d3);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 6D output coordinates.\n   */\n  protected getOutputUnpacked6DCoords(shape: [number, number, number, number, number, number], texShape: [\n    number, number\n  ]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3', 'd4'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n     ivec6 getOutputCoords() {\n         ivec2 resTexRC = ivec2(TexCoords.xy *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n         int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n         ${coordsFromIndexSnippet}\n         return ivec6(r, c, d, d2, d3, d4);\n       }\n     `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Generates code for common UV coords computation utility functions.\n   */\n  protected getCommonUtilFuncs(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    let funcName = 'uvFromFlat';\n    result[funcName] = new GlslLibRoutine(`\n    vec2 uvFromFlat(int texNumR, int texNumC, int index) {\n      int texC = index / texNumR;\n      int texR = index - texC * texNumR;\n      // TODO: swap texR, texC order in following function so row is corresponding to u and column is corresponding to\n      //       v.\n      return (vec2(texR, texC) + halfCR) / vec2(texNumR, texNumC);\n    }\n    `);\n    funcName = 'packedUVfrom1D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n        int texelIndex = index / 2;\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom2D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom2D(int texNumR, int texNumC, int texelsInLogicalRow, int row, int col) {\n        int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom3D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom3D(int texNumR, int texNumC,\n          int texelsInBatch, int texelsInLogicalRow, int b,\n          int row, int col) {\n        int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = index / texNumC;\n        int texC = index - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'sampleTexture';\n    const glsl = getGlsl(this.context.glContext.version);\n    result[funcName] = new GlslLibRoutine(`\n        float sampleTexture(sampler2D textureSampler, vec2 uv) {\n            return ${glsl.texture2D}(textureSampler, uv).r;\n        }`);\n    return result;\n  }\n\n  /**\n   * Constructing snippets for inputs\n   */\n  protected getInputsSamplingSnippets(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const outputLayout = this.context.outputTextureLayout;\n    this.context.programInfo.inputNames.forEach((samplerName, i) => {\n      const inputLayout = this.context.inputTextureLayouts[i];\n      const funcName = generateShaderFuncNameFromInputSamplerName(samplerName);\n      if (inputLayout.isPacked) {\n        result[funcName] = this.getPackedSamplerFromInput(funcName, samplerName, inputLayout);\n      } else {\n        result[funcName] = this.getUnpackedSamplerFromInput(funcName, samplerName, inputLayout);\n      }\n\n      const outCoordFuncName = generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName);\n      if (inputLayout.unpackedShape.length <= outputLayout.unpackedShape.length) {\n        if (inputLayout.isPacked) {\n          result[outCoordFuncName] =\n              this.getPackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        } else {\n          result[outCoordFuncName] =\n              this.getUnpackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        }\n      }\n    });\n\n    return result;\n  }\n\n  /**\n   * Constructing snippets for output coordinates of samplers\n   */\n  protected getPackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texName = name;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(texName);\n\n    const inRank = inShape.length;\n    const outRank = outShape.length;\n\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n\n    const type = getCoordsDataType(outRank);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n\n    let output = 'return outputValue;';\n    const inSize = ShapeUtil.size(inShape);\n    const isInputScalar = inSize === 1;\n    const outSize = ShapeUtil.size(outShape);\n    const isOutputScalar = outSize === 1;\n\n    if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n      output = `\n        return vec4(outputValue.xy, outputValue.xy);\n      `;\n    } else if (isInputScalar && !isOutputScalar) {\n      if (outRank === 1) {\n        output = `\n          return vec4(outputValue.x, outputValue.x, 0., 0.);\n        `;\n      } else {\n        output = `\n          return vec4(outputValue.x);\n        `;\n      }\n    } else if (broadcastDims.length) {\n      const rows = inRank - 2;\n      const cols = inRank - 1;\n\n      if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.x);';\n      } else if (broadcastDims.indexOf(rows) > -1) {\n        output = 'return vec4(outputValue.x, outputValue.y, ' +\n            'outputValue.x, outputValue.y);';\n      } else if (broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.xx, outputValue.zz);';\n      }\n    }\n\n    const swapLastDimsSnippet = `\n        int lastDim = coords.${fields[outRank - 1]};\n        coords.${fields[outRank - 1]} = coords.${fields[outRank - 2]};\n        coords.${fields[outRank - 2]} = lastDim;\n      `;\n    const source = `\n      vec4 ${funcName}() {\n        ${type} coords = getOutputCoords();\n        ${swapLastDimsSnippet}\n        ${coordsSnippet}\n        vec4 outputValue = ${texFuncSnippet}(${unpackedCoordsSnippet});\n        ${output}\n      }\n    `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for unpacked output coordinates of samplers\n   */\n  protected getUnpackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const inTexShape = [inputLayout.width, inputLayout.height];\n    const inRank = inputLayout.unpackedShape.length;\n    const outRank = outputLayout.unpackedShape.length;\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(name);\n\n    if (inRank === outRank && ArrayUtil.arraysEqual(inTexShape, outTexShape)) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, TexCoords);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const type = getCoordsDataType(outRank);\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inputLayout.unpackedShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n    const source = `\n        float ${funcName}() {\n          ${type} coords = getOutputCoords();\n          ${coordsSnippet}\n          return ${texFuncSnippet}(${unpackedCoordsSnippet});\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for packed operations.\n   */\n  protected getPackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    switch (inputLayout.unpackedShape.length) {\n      case 0:\n        return this.getPackedSamplerScalar(funcName, name);\n      case 1:\n        return this.getPackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getPackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getPackedSampler3D(funcName, name, inputLayout);\n      default:\n        return this.getPackedSamplerND(funcName, name, inputLayout);\n    }\n  }\n\n  /**\n   * Constructing snippets for unpacked operations.\n   */\n  protected getUnpackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    switch (shape.length) {\n      case 0:\n        return this.getUnpackedSamplerScalar(funcName, name, inputLayout);\n      case 1:\n        return this.getUnpackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getUnpackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getUnpackedSampler3D(funcName, name, inputLayout);\n      case 4:\n        return this.getUnpackedSampler4D(funcName, name, inputLayout);\n      case 5:\n        return this.getUnpackedSampler5D(funcName, name, inputLayout);\n      case 6:\n        return this.getUnpackedSampler6D(funcName, name, inputLayout);\n      default:\n        // TODO support more dimensionalities\n        throw new Error(`Unsupported dimension ${shape.length}-D`);\n    }\n  }\n\n  /**\n   * Packed scalar snippet.\n   */\n  protected getPackedSamplerScalar(funcName: string, name: string): GlslLibRoutine {\n    const glsl = getGlsl(this.context.glContext.version);\n    const source = `\n          vec4 ${funcName}() {\n            return ${glsl.texture2D}(${name}, halfCR);\n          }\n        `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Packed 1D snippet.\n   */\n  protected getPackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[1], texShape[0]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedSampler = `vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n      ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom1D']);\n  }\n\n  /**\n   * Packed 2D snippet.\n   */\n  protected getPackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const packedSampler = `vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n        return ${glsl.texture2D}(${name}, uv);\n      }`;\n\n      return new GlslLibRoutine(packedSampler);\n    }\n    const packedTexShape = texShape;\n    const valuesPerRow = Math.ceil(shape[1] / 2);\n    const packedSampler = `vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${packedTexShape[1]}, ${packedTexShape[0]}, ${valuesPerRow}, row, col);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom2D']);\n  }\n\n  /**\n   * Packed 3D snippet.\n   */\n  protected getPackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[0], texShape[1]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    if (shape[0] === 1) {\n      const squeezedShape = shape.slice(1);\n      const keptDims = [1, 2];\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['b', 'row', 'col'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const samplerRoutine = this.getPackedSamplerFromInput(funcName, name, newInputLayout);\n      const packedSampler = `${samplerRoutine.routineBody}\n      vec4 ${funcName}(int b, int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      } `;\n      const source = packedSampler;\n      return new GlslLibRoutine(source, samplerRoutine.dependencies);\n    }\n    const texNumR = packedTexShape[0];\n    const texNumC = packedTexShape[1];\n\n    const valuesPerRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n\n    const packedSampler = `vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumC}, ${texNumR}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${name}, uv);}`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom3D']);\n  }\n  /*\n   * Packed ND snippet.\n   */\n  protected getPackedSamplerND(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const rank = shape.length;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texNumR = packedTexShape[1];\n    const texNumC = packedTexShape[0];\n    const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n    let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n    let params = 'int b, int row, int col';\n    let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n    for (let b = 2; b < rank - 1; b++) {\n      params = `int b${b}, ` + params;\n      texelsInBatch *= shape[rank - b - 1];\n      index = `b${b} * ${texelsInBatch} + ` + index;\n    }\n    const packedSampler = `vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked scalar snippet.\n   */\n  protected getUnpackedSamplerScalar(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const [texNumR, texNumC] = [inputLayout.width, inputLayout.height];\n    if (texNumR === 1 && texNumC === 1) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, halfCR);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const source = `\n        float ${funcName}() {\n          int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, offset_${name});\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 1D snippet.\n   */\n  protected getUnpackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const tNumR = inputLayout.width;\n    const tNumC = inputLayout.height;\n\n    if (tNumC === 1 && tNumR === 1) {\n      const source = `\n        float ${funcName}(int index) {\n          return sampleTexture(${name}, halfCR);\n        }\n      `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    if (tNumC === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2((float(index) + 0.5) / ${tNumR}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    if (tNumR === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2(0.5, (float(index) + 0.5) / ${tNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    const source = `\n        float ${funcName}(int index) {\n          vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 2D snippet.\n   */\n\n  protected getUnpackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n\n    // TODO: modify row/col order for other dimensions.\n    const texShape = [inputLayout.height, inputLayout.width];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const texNumR = texShape[1];\n      const texNumC = texShape[0];\n      const source = `\n          float ${funcName}(int row, int col) {\n            vec2 uv = (vec2(row, col) + halfCR) / vec2(${texNumR}.0, ${texNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const params = ['col', 'row'];\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const texNumR = texShape[1];\n    const texNumC = texShape[0];\n    if (texNumC === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    if (texNumR === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    const source = `\n        float ${funcName}(int row, int col) {\n          int index = col * ${shape[1]} + row;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 3D snippet.\n   */\n\n  protected getUnpackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride0 = shape[1] * shape[2];\n    const stride1 = shape[2];\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['batch', 'col', 'row'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const routine = this.getUnpackedSamplerFromInput(funcName, name, newInputLayout);\n      // TODO: revisit the logic here to make it simpler\n      const revDims = keptDims.reverse();\n      const source = `\n          ${routine.routineBody}\n          float ${funcName}(int batch, int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, revDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, routine.dependencies);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int depth, int row, int col) {\n            // Explicitly use integer operations as dot() only works on floats.\n            int index = depth * ${stride0} + col * ${stride1} + row;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 4D snippet.\n   */\n\n  protected getUnpackedSampler4D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride2 = shape[3];\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    //\n    // TODO: re-enable this shortcut once the index calculation bug is fixed.\n    //\n    // const {newShape, keptDims} = squeezeShape(shape as number[]);\n    // if (newShape.length < shape.length) {\n    //   const newInputShape = squeezeInputShape(shape, newShape);\n    //   const params = ['row', 'col', 'depth', 'depth2'];\n    //   // Deep copy of input texture layout.\n    //   const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n    //   newInputLayout.unpackedShape = newInputShape;\n    //   const source = `\n    //       ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n    //       float ${funcName}(int row, int col, int depth, int depth2) {\n    //         return ${funcName}(${getSqueezedParams(params, keptDims)});\n    //       }\n    //     `;\n    //   return new GlslLibRoutine(\n    //       source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    // }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2) {\n          int index = row * ${stride0} + col * ${stride1} +\n              depth2 * ${stride2} + depth;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 5D snippet.\n   */\n  protected getUnpackedSampler5D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride3 = shape[4];\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n          int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth3 * ${stride3} + depth2;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n  }\n\n  /**\n   * Unpacked 6D snippet.\n   */\n  protected getUnpackedSampler6D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride4 = shape[5];\n    const stride3 = shape[4] * stride4;\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n            ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n            float ${funcName}(int row, int col, int depth,\n              int depth2, int depth3, int depth4) {\n              return ${funcName}(${getSqueezedParams(params, keptDims)});\n            }\n          `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int row, int col, int depth,\n            int depth2, int depth3, int depth4) {\n            int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n            depth2 * ${stride3} + depth3 * ${stride4} + depth4;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * This is the main function to map from the given texture coordiantes (s,t)\n   * to logical indices for the output\n   * There will only be one single variation of this\n   * Also see coordsToOffset and offsetToIndices for input-specific versions\n   */\n  protected toVec(): {[name: string]: GlslLibRoutine} {\n    const output = this.context.outputTextureLayout;\n    const rank = output.shape.length;\n    const strides = output.strides;\n    const xScale = output.width;\n    const yScale = output.height;\n\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n        c[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= c[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n        c[${rank - 1}] = offset;`);\n    const body = `\n      void toVec(vec2 texCoords, out int c[${rank}]) {\n        int offset = coordsToOffset(texCoords, ${xScale}, ${yScale});\n        ${stridesBlock.join('')}\n      }\n      void toVec(int offset, out int c[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n    `;\n    return {toVec: new GlslLibRoutine(body, ['coordinates.coordsToOffset'])};\n  }\n  /**\n   * These are value getter functions generated for each input\n   * Each function is hardwired to the name and dimensions of the input\n   * An '_T' variation is also produced which accesses values as if the\n   * input was transposed\n   */\n  protected valueFrom(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const layout = this.context.inputTextureLayouts[i];\n      const shape = layout.unpackedShape.length > 0 ? layout.unpackedShape : layout.shape;\n      const rank = shape.length;\n      let funcName = `_${name}`;\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, false),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n      funcName = funcName + '_T';\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, true),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n    });\n    return result;\n  }\n  /**\n   * Produces one value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getValueFromSingle(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        float ${name}(int m[${rank}]) {\n          int offset = indicesToOffset${name}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          float value = getColorAsFloat(${glsl.texture2D}(${varName}, coords));\n          return value;\n        }\n        `;\n  }\n\n  /**\n   * Produces a packed value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getPackedValueFrom(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}_Pack`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        vec4 ${name}(int m[${rank}]) {\n          int offset = indicesToOffset_${varName}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          return ${glsl.texture2D}(${varName}, coords);\n        }\n        `;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ProgramInfo, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport enum FunctionType {\n  ValueBased,\n  Positional\n}\nexport interface GlslFunction<T extends FunctionType> {\n  body: string;\n  name: string;\n  type: T;\n}\nexport type GlslValueFunction = GlslFunction<FunctionType.ValueBased>;\nexport interface GlslPositionalFunction extends GlslFunction<FunctionType.Positional> {\n  inputShape: readonly number[];\n  outputShape: readonly number[];\n}\n\nexport class GlslContext {\n  constructor(\n      public glContext: WebGLContext, public programInfo: ProgramInfo, public inputTextureLayouts: TextureLayout[],\n      public outputTextureLayout: TextureLayout) {}\n}\nexport abstract class GlslLib {\n  constructor(public context: GlslContext) {}\n  abstract getFunctions(): {[name: string]: GlslLibRoutine};\n  abstract getCustomTypes(): {[name: string]: string};\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies\nexport class GlslLibRoutine {\n  constructor(public routineBody: string, public dependencies?: string[]) {}\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies AS GRAPH Nodes\n// this level of abstraction is used to topologically sort routines before fragment shade inclusion\nexport class GlslLibRoutineNode {\n  dependencies: GlslLibRoutineNode[];\n  routineBody: string;\n  constructor(public name: string, routineBody?: string, dependencies?: GlslLibRoutineNode[]) {\n    if (dependencies) {\n      this.dependencies = dependencies;\n    } else {\n      this.dependencies = [];\n    }\n\n    if (routineBody) {\n      this.routineBody = routineBody;\n    }\n  }\n  addDependency(node: GlslLibRoutineNode) {\n    if (node) {\n      this.dependencies.push(node);\n    }\n  }\n}\n\n// topologically sort GLSL library routines (graph nodes abstraction) before shader script inclusion\nexport class TopologicalSortGlslRoutines {\n  static returnOrderedNodes(nodes: GlslLibRoutineNode[]): GlslLibRoutineNode[] {\n    if (!nodes || nodes.length === 0) {\n      return [];\n    }\n\n    if (nodes.length === 1) {\n      return nodes;\n    }\n\n    const cycleCheck = new Set<string>();\n    const alreadyTraversed = new Set<string>();\n    const result = new Array<GlslLibRoutineNode>();\n\n    this.createOrderedNodes(nodes, cycleCheck, alreadyTraversed, result);\n    return result;\n  }\n\n  private static createOrderedNodes(\n      graphNodes: GlslLibRoutineNode[], cycleCheck: Set<string>, alreadyTraversed: Set<string>,\n      result: GlslLibRoutineNode[]) {\n    for (let i = 0; i < graphNodes.length; ++i) {\n      this.dfsTraverse(graphNodes[i], cycleCheck, alreadyTraversed, result);\n    }\n  }\n\n  private static dfsTraverse(\n      root: GlslLibRoutineNode, cycleCheck: Set<string>, alreadyTraversed: Set<string>, result: GlslLibRoutineNode[]) {\n    // if this root has already been traversed return\n    if (!root || alreadyTraversed.has(root.name)) {\n      return;\n    }\n\n    // cyclic dependency has been detected\n    if (cycleCheck.has(root.name)) {\n      throw new Error('Cyclic dependency detected. Can\\'t topologically sort routines needed for shader.');\n    }\n\n    // hold this node to detect cycles if any\n    cycleCheck.add(root.name);\n\n    // traverse children in a dfs fashion\n    const dependencies = root.dependencies;\n    if (dependencies && dependencies.length > 0) {\n      for (let i = 0; i < dependencies.length; ++i) {\n        this.dfsTraverse(dependencies[i], cycleCheck, alreadyTraversed, result);\n      }\n    }\n\n    // add to result holder\n    result.push(root);\n\n    // mark this node as traversed so that we don't traverse from this again\n    alreadyTraversed.add(root.name);\n\n    // release the hold\n    cycleCheck.delete(root.name);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * This GLSL library handles routines converting\n * float32 to/from Unsigned byte or float 16\n */\nexport class EncodingGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.encodeFloat32(), ...this.decodeFloat32()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected encodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      encode: new GlslLibRoutine(`highp vec4 encode(highp float f) {\n        return vec4(f, 0.0, 0.0, 0.0);\n      }\n        `)\n    };\n  }\n  protected decodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      decode: new GlslLibRoutine(`highp float decode(highp vec4 rgba) {\n        return rgba.r;\n      }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode encode a 32bit float to a vec4 (of unsigned bytes)\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected encodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      encode: new GlslLibRoutine(`\n      highp vec4 encode(highp float f) {\n        highp float F = abs(f);\n        highp float Sign = step(0.0,-f);\n        highp float Exponent = floor(log2(F));\n        highp float Mantissa = (exp2(- Exponent) * F);\n        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));\n        highp vec4 rgba;\n        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));\n        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);\n        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));\n        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));\n        ${endianness}\n        rgba = rgba / 255.0; // values need to be normalized to [0,1]\n        return rgba;\n    }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode a vec4 of unsigned bytes to float32\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected decodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      decode: new GlslLibRoutine(`\n        highp float decode(highp vec4 rgba) {\n          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]\n          ${endianness}\n          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;\n          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;\n          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);\n          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));\n          return Result;\n      }\n        `)\n    };\n  }\n  /**\n   * Determines if the machine is little endian or not\n   * @credit: https://gist.github.com/TooTallNate/4750953\n   */\n  static isLittleEndian(): boolean {\n    const b = new ArrayBuffer(4);\n    const a = new Uint32Array(b);\n    const c = new Uint8Array(b);\n    a[0] = 0xdeadbeef;\n    if (c[0] === 0xef) {\n      return true;\n    }\n    if (c[0] === 0xde) {\n      return false;\n    }\n    throw new Error('unknown endianness');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\n\n/**\n * This GLSL library handles routines around reading a texlet and writing to it\n * Reading and writing could be more than just dealing with one channel\n * It may require encoding/decoding to/from 4 channels into one\n */\nexport class FragColorGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.setFragColor(), ...this.getColorAsFloat()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected setFragColor(): {[name: string]: GlslLibRoutine} {\n    const glsl = getGlsl(this.context.glContext.version);\n    return {\n      setFragColor: new GlslLibRoutine(\n          `\n        void setFragColor(float value) {\n            ${glsl.output} = encode(value);\n        }\n        `,\n          ['encoding.encode'])\n    };\n  }\n  protected getColorAsFloat(): {[name: string]: GlslLibRoutine} {\n    return {\n      getColorAsFloat: new GlslLibRoutine(\n          `\n        float getColorAsFloat(vec4 color) {\n            return decode(color);\n        }\n        `,\n          ['encoding.decode'])\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nconst INLINE_FUNC_DEF_REGEX = /@inline[\\s\\n\\r]+(\\w+)[\\s\\n\\r]+([0-9a-zA-Z_]+)\\s*\\(([^)]*)\\)\\s*{(([^}]|[\\n\\r])*)}/gm;\nconst FUNC_CALL_REGEX = '(\\\\w+)?\\\\s+([_0-9a-zA-Z]+)\\\\s+=\\\\s+__FUNC__\\\\((.*)\\\\)\\\\s*;';\n/**\n * GLSL preprocessor responsible for resolving @inline directives\n */\nexport function replaceInlines(script: string): string {\n  const inlineDefs: {[name: string]: {params: Array<{type: string; name: string}|null>; body: string}} = {};\n  let match;\n  while ((match = INLINE_FUNC_DEF_REGEX.exec(script)) !== null) {\n    const params = match[3]\n                       .split(',')\n                       .map(s => {\n                         const tokens = s.trim().split(' ');\n                         if (tokens && tokens.length === 2) {\n                           return {type: tokens[0], name: tokens[1]};\n                         }\n                         return null;\n                       })\n                       .filter(v => v !== null);\n    inlineDefs[match[2]] = {params, body: match[4]};\n  }\n  for (const name in inlineDefs) {\n    const regexString = FUNC_CALL_REGEX.replace('__FUNC__', name);\n    const regex = new RegExp(regexString, 'gm');\n    while ((match = regex.exec(script)) !== null) {\n      const type = match[1];\n      const variable = match[2];\n      const params = match[3].split(',');\n      const declLine = (type) ? `${type} ${variable};` : '';\n      let newBody: string = inlineDefs[name].body;\n      let paramRedecLine = '';\n      inlineDefs[name].params.forEach((v, i) => {\n        if (v) {\n          paramRedecLine += `${v.type} ${v.name} = ${params[i]};\\n`;\n        }\n      });\n      newBody = `${paramRedecLine}\\n ${newBody}`;\n      newBody = newBody.replace('return', `${variable} = `);\n      const replacement = `\n      ${declLine}\n      {\n        ${newBody}\n      }\n      `;\n      script = script.replace(match[0], replacement);\n    }\n  }\n  script = script.replace(INLINE_FUNC_DEF_REGEX, '');\n  return script;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutineNode, TopologicalSortGlslRoutines} from './glsl-definitions';\nimport {replaceInlines} from './glsl-function-inliner';\nimport {glslRegistry} from './glsl-registered-libs';\nimport {getDefaultFragShaderMain, getFragShaderPreamble} from './glsl-source';\nimport {ProgramInfo, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * Preprocessor for the additions to the GLSL language\n * It deals with:\n *  @include directives\n *  @inline\n *  Loop unrolling (not implemented)\n *  Macro resolution (not implemented)\n */\nexport class GlslPreprocessor {\n  readonly context: GlslContext;\n  readonly libs: {[name: string]: GlslLib} = {};\n  readonly glslLibRoutineDependencyGraph: {[routineName: string]: GlslLibRoutineNode} = {};\n\n  constructor(\n      glContext: WebGLContext, programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[],\n      outputTextureLayout: TextureLayout) {\n    this.context = new GlslContext(glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n\n    // construct GlslLibs\n    Object.keys(glslRegistry).forEach((name: string) => {\n      const lib = new glslRegistry[name](this.context);\n      this.libs[name] = lib;\n    });\n\n    // construct GlslRoutineDependencyGraph\n    const map = this.glslLibRoutineDependencyGraph;\n    for (const libName in this.libs) {\n      const lib = this.libs[libName];\n      const routinesInLib = lib.getFunctions();\n      for (const routine in routinesInLib) {\n        const key = libName + '.' + routine;\n        let currentNode: GlslLibRoutineNode;\n        if (map[key]) {\n          currentNode = map[key];\n          currentNode.routineBody = routinesInLib[routine].routineBody;\n        } else {\n          currentNode = new GlslLibRoutineNode(key, routinesInLib[routine].routineBody);\n          map[key] = currentNode;\n        }\n        const dependencies = routinesInLib[routine].dependencies;\n        if (dependencies) {\n          for (let i = 0; i < dependencies.length; ++i) {\n            if (!map[dependencies[i]]) {\n              const node = new GlslLibRoutineNode(dependencies[i]);\n              map[dependencies[i]] = node;\n              currentNode.addDependency(node);\n            } else {\n              currentNode.addDependency(map[dependencies[i]]);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  preprocess(): string {\n    const programInfo = this.context.programInfo;\n    let source = programInfo.shaderSource;\n\n    // append main() function\n    if (!this.context.programInfo.hasMain) {\n      source = `${source}\n      ${getDefaultFragShaderMain(this.context.glContext.version, this.context.outputTextureLayout.shape.length)}`;\n    }\n    // replace inlines\n    source = replaceInlines(source);\n\n    // concat final source string\n    return `${getFragShaderPreamble(this.context.glContext.version)}\n    ${this.getUniforms(programInfo.inputNames, programInfo.variables)}\n    ${this.getImports(source)}\n    ${source}`;\n  }\n\n  protected getImports(script: string): string {\n    const routinesIncluded = this.selectGlslLibRoutinesToBeIncluded(script);\n\n    if (routinesIncluded.length === 0) {\n      return '';\n    }\n\n    let routines = '';\n    for (let i = 0; i < routinesIncluded.length; ++i) {\n      if (routinesIncluded[i].routineBody) {\n        routines += routinesIncluded[i].routineBody + '\\n';\n      } else {\n        throw new Error(`Missing body for the Glsl Library routine: ${routinesIncluded[i].name}`);\n      }\n    }\n\n    return routines;\n  }\n  private selectGlslLibRoutinesToBeIncluded(script: string): GlslLibRoutineNode[] {\n    const nodes: GlslLibRoutineNode[] = [];\n\n    Object.keys(this.glslLibRoutineDependencyGraph).forEach(classAndRoutine => {\n      const routine = classAndRoutine.split('.')[1];\n      if (script.indexOf(routine) !== -1) {\n        nodes.push(this.glslLibRoutineDependencyGraph[classAndRoutine]);\n      }\n    });\n\n    return TopologicalSortGlslRoutines.returnOrderedNodes(nodes);\n  }\n\n  protected getUniforms(samplers?: string[], variables?: VariableInfo[]): string {\n    const uniformLines: string[] = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLines.push(`uniform sampler2D ${sampler};`);\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLines.push(\n            `uniform ${variable.type} ${variable.name}${variable.arrayLength ? `[${variable.arrayLength}]` : ''};`);\n      }\n    }\n    return uniformLines.join('\\n');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {CoordsGlslLib} from './glsl-coordinate-lib';\nimport {GlslContext, GlslLib} from './glsl-definitions';\nimport {EncodingGlslLib} from './glsl-encoding-lib';\nimport {FragColorGlslLib} from './glsl-fragcolor-lib';\nimport {ShapeUtilsGlslLib} from './glsl-shape-utils-lib';\nimport {VecGlslLib} from './glsl-vec-lib';\n\nexport const glslRegistry: {[name: string]: new (context: GlslContext) => GlslLib} = {\n  'encoding': EncodingGlslLib,\n  'fragcolor': FragColorGlslLib,\n  'vec': VecGlslLib,\n  'shapeUtils': ShapeUtilsGlslLib,\n  'coordinates': CoordsGlslLib,\n  //  'arrays': ArrayGlslSLib\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class ShapeUtilsGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.bcastIndex(),\n      ...this.bcastMatmulIndex(),\n      ...this.offsetToIndices(),\n      ...this.indicesToOffset(),\n      ...this.incrementIndices()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  protected bcastIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].unpackedShape;\n      if (shape.length <= outputRank) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName} (int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected bcastMatmulIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      if (!(shape.length < 2 || shape.length > outputRank)) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastMatmulIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank - 2; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName}(int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n          realIndices[${rank - 1}] = bcastedIndices[${outputRank - 1}];\n          realIndices[${rank - 2}] = bcastedIndices[${outputRank - 2}];\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected indicesToOffset(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `indicesToOffset_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides));\n      funcName = `indicesToOffset_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static indexToOffsetSingle(name: string, rank: number, strides: readonly number[]): string {\n    let block = '';\n    for (let i = rank - 1; i >= 0; --i) {\n      block += `\n        offset += indices[${i}] * ${strides[i]};\n        `;\n    }\n    return `\n      int ${name}(int indices[${rank}]) {\n        int offset = 0;\n        ${block}\n        return offset;\n      }\n      `;\n  }\n  protected offsetToIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `offsetToIndices_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides));\n      funcName = `offsetToIndices_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static offsetToIndicesSingle(name: string, rank: number, strides: readonly number[]): string {\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n      indices[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= indices[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n      indices[${rank - 1}] = offset;`);\n    return `\n      void ${name}(int offset, out int indices[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n      `;\n  }\n  protected incrementIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const rank = shape.length;\n      const funcName = `incrementIndices_${name}`;\n      let shapeInit = '';\n      for (let i = 0; i < rank; ++i) {\n        shapeInit += `\n        shape[${i}] = ${shape[i]};`;\n      }\n      const body = `\n        void ${funcName}(int axis, out int indices[${rank}]) {\n          int shape[${rank}];\n          ${shapeInit};\n          for(int i = ${rank} -1 ; i >= 0; --i) {\n            if(i > axis) continue;\n            indices[i] += 1;\n            if(indices[i] < shape[i]) {\n              break;\n            }\n            indices[i] = 0;\n          }\n        }\n        `;\n      result[funcName] = new GlslLibRoutine(body);\n    });\n    return result;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/**\n * represent a version irrelevant abstraction of for GLSL source code\n */\nexport interface Glsl {\n  readonly version: string;\n  readonly attribute: string;\n  readonly varyingVertex: string;\n  readonly varyingFrag: string;\n  readonly texture2D: string;\n  readonly output: string;\n  readonly outputDeclaration: string;\n}\n\nconst GLSL_ES_2_0: Glsl = {\n  version: '',\n  attribute: 'attribute',\n  varyingVertex: 'varying',\n  varyingFrag: 'varying',\n  texture2D: 'texture2D',\n  output: 'gl_FragColor',\n  outputDeclaration: '',\n};\nconst GLSL_ES_3_0: Glsl = {\n  version: '#version 300 es',\n  attribute: 'in',\n  varyingVertex: 'out',\n  varyingFrag: 'in',\n  texture2D: 'texture',\n  output: 'outputColor',\n  outputDeclaration: 'out vec4 outputColor;',\n};\n\nexport function getGlsl(version: 1|2) {\n  return version === 1 ? GLSL_ES_2_0 : GLSL_ES_3_0;\n}\n\nexport function getVertexShaderSource(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n      precision highp float;\n      ${glsl.attribute} vec3 position;\n      ${glsl.attribute} vec2 textureCoord;\n\n      ${glsl.varyingVertex} vec2 TexCoords;\n\n      void main()\n      {\n          gl_Position = vec4(position, 1.0);\n          TexCoords = textureCoord;\n      }`;\n}\n\nexport function getFragShaderPreamble(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFrag} vec2 TexCoords;\n    ${glsl.outputDeclaration}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    // Custom vector types to handle higher dimenalities.\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    `;\n}\n\nexport function getDefaultFragShaderMain(version: 1|2, outputShapeLength: number): string {\n  const glsl = getGlsl(version);\n  return `\n  void main() {\n    int indices[${outputShapeLength}];\n    toVec(TexCoords, indices);\n    vec4 result = vec4(process(indices));\n    ${glsl.output} = result;\n  }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for vec routines\n * Vec is an varible length int array. The length is fixed at the time of\n * generating the library functions from the dimensions of the output.\n */\nexport class VecGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.binaryVecFunctions(), ...this.copyVec(), ...this.setVecItem(), ...this.getVecItem()};\n  }\n  protected binaryVecFunctions(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    const nameOp: {[name: string]: string} = {add: '+=', sub: '-=', mul: '*=', div: '/='};\n    const result: {[name: string]: GlslLibRoutine} = {};\n    for (const name in nameOp) {\n      const fname = `${name}Vec`;\n      let assignmentBlock = '';\n      for (let i = 0; i < rank; ++i) {\n        assignmentBlock += `\n          dest[${i}] ${nameOp[name]} src[${i}];\n          `;\n      }\n      const body = `\n        void ${fname}(int src[${rank}], out int dest[${rank}]) {\n          ${assignmentBlock}\n        }\n        `;\n      result[fname] = new GlslLibRoutine(body);\n    }\n\n    return result;\n  }\n  protected copyVec(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let assignmentBlock = '';\n    for (let i = 0; i < rank; ++i) {\n      assignmentBlock += `\n        dest[${i}] = src[${i}];\n        `;\n    }\n    const body = `\n      void copyVec(int src[${rank}], out int dest[${rank}]) {\n        ${assignmentBlock}\n      }\n      `;\n    return {copyVec: new GlslLibRoutine(body)};\n  }\n\n  protected setVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index =${rank} + index;\n        if (index == 0)\n            m[0] = value;\n        `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            m[${i}] = value;\n            `;\n    }\n    block += `\n        else\n            m[${rank - 1}] = value;\n        `;\n    const body = `\n      void setVecItem(out int m[${rank}], int index, int value) {\n        ${block}\n      }\n        `;\n    return {setVecItem: new GlslLibRoutine(body)};\n  }\n  protected getVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index = ${rank} + index;\n        if (index == 0)\n            return m[0];\n      `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            return m[${i}];\n      `;\n    }\n    block += `\n        else\n            return m[${rank - 1}];\n        `;\n    const body = `\n      int getVecItem(int m[${rank}], int index) {\n        ${block}\n      }\n    `;\n    return {getVecItem: new GlslLibRoutine(body)};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from '../../backend';\nimport {Logger} from '../../instrument';\nimport {Tensor} from '../../tensor';\nimport {ShapeUtil} from '../../util';\n\nimport {createPackProgramInfoLoader} from './ops/pack';\nimport {createPackedReshape3DProgramInfoLoader, isReshapeCheap, processDims3D} from './ops/reshape-packed';\nimport {encodeAsUint8} from './ops/uint8-encode';\nimport {createUnpackProgramInfoLoader} from './ops/unpack';\nimport {WebGLSessionHandler} from './session-handler';\nimport {Encoder} from './texture-data-encoder';\nimport {calculateTextureWidthAndHeight, createTextureLayoutFromShape, createTextureLayoutFromTextureType} from './texture-layout';\nimport {Artifact, ProgramInfo, ProgramInfoLoader, TextureData, TextureLayout, TextureType} from './types';\n\nconst getProgramInfoUniqueKey =\n    (programInfo: ProgramInfo|ProgramInfoLoader, inputTextureDatas: TextureData[]): string => {\n      const inputs =\n          inputTextureDatas.map(texture => `${texture.unpackedShape.join(',')};${texture.width}x${texture.height}`)\n              .join('_');\n      let key = programInfo.name;\n      if (programInfo.cacheHint) {\n        key += '[' + programInfo.cacheHint + ']';\n      }\n      key += ':' + inputs;\n      return key;\n    };\n\nexport class WebGLInferenceHandler implements InferenceHandler {\n  private packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  private unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  constructor(public session: WebGLSessionHandler) {\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  /**\n   * @returns [width, height]\n   */\n  calculateTextureWidthAndHeight(shape: readonly number[], textureType: TextureType): [number, number] {\n    return calculateTextureWidthAndHeight(this.session.layoutStrategy, shape, textureType);\n  }\n\n  executeProgram(program: ProgramInfo|ProgramInfoLoader, inputs: readonly Tensor[]): TextureData {\n    if (inputs.length < program.inputNames.length) {\n      throw new Error(`Input size mustn't be less than ${program.inputNames.length}.`);\n    }\n    if (program.inputNames.length !== program.inputTypes.length) {\n      throw new Error('input names size does not match input types');\n    }\n\n    // create texture info for input\n    const inputTextureDatas: TextureData[] = [];\n    for (let i = 0; i < program.inputNames.length; ++i) {\n      inputTextureDatas[i] = this.getOrCreateTextureData(inputs[i], program.inputTypes[i]);\n    }\n\n    const key = getProgramInfoUniqueKey(program, inputTextureDatas);\n    let artifact = this.session.programManager.getArtifact(key);\n    const programInfo = artifact ?\n        artifact.programInfo :\n        (typeof (program as ProgramInfoLoader).get === 'function' ? (program as ProgramInfoLoader).get() :\n                                                                    (program as ProgramInfo));\n\n    // create texture info for output\n    const outputTextureLayout = createTextureLayoutFromTextureType(\n        this.session.layoutStrategy, programInfo.output.dims, programInfo.output.textureType);\n    const outputTextureData = this.createTextureData(outputTextureLayout, programInfo.output.type);\n\n    if (!artifact) {\n      artifact = this.session.programManager.build(programInfo, inputTextureDatas, outputTextureData);\n      this.session.programManager.setArtifact(key, artifact);\n    }\n\n    this.runProgram(artifact, inputTextureDatas, outputTextureData);\n    return outputTextureData;\n  }\n\n  run(program: ProgramInfoLoader, inputs: readonly Tensor[]): Tensor {\n    const outputTextureData = this.executeProgram(program, inputs);\n    return outputTextureData.tensor;\n  }\n\n  private runProgram(artifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    // input should match\n    for (let i = 0; i < inputs.length; ++i) {\n      if (!!inputs[i].isPacked !== (artifact.programInfo.inputTypes[i] === TextureType.packed)) {\n        throw new Error(`input[${i}] property packed inconsistent`);\n      }\n    }\n\n    // output should match\n    if (!!output.isPacked !== (artifact.programInfo.output.textureType === TextureType.packed)) {\n      throw new Error('output property packed inconsistent');\n    }\n\n    this.session.programManager.run(artifact, inputs, output);\n  }\n\n  /**\n   * Create a TextureData object from a tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * If a related texture data is found in cache, returns it;\n   * Otherwise:\n   *   Creates a new texture layout if not provided;\n   *   Creates WebGLTexture with the layout;\n   *   Upload tensor data to the texture;\n   *   Creates a texture data object associated with the given tensor.\n   * @param tensor the tensor with data to upload\n   */\n  private getOrCreateTextureData(tensor: Tensor, textureType: TextureType) {\n    let td = this.getTextureData(tensor.dataId, textureType === TextureType.packed);\n\n    if (!td) {\n      // check if we have texture data in different type\n      td = this.getTextureData(tensor.dataId, textureType !== TextureType.packed);\n      if (td) {\n        if (textureType === TextureType.packed) {\n          return this.pack(td);\n        } else {\n          return this.unpack(td);\n        }\n      }\n    }\n\n    if (!td) {\n      const layout = createTextureLayoutFromTextureType(this.session.layoutStrategy, tensor.dims, textureType);\n\n      if (textureType === TextureType.packedLastDimension) {\n        const group = 1;\n        const channels = 4;\n        const shape = tensor.dims;\n        if (shape.length === 4) {\n          // pre-processing for kernel data of Conv.\n          //\n          // TODO: currently this is a hacking to overwrite Conv's weight. The correct way to do this should be:\n          // 1. implement texture based const-folding\n          // 2. create a WebGL program \"preprocessConvWeight\" to do the same work as below\n          // 3. run the program before dotProduct.\n          //\n          const adjustedKernelShape = [shape[0], Math.ceil((shape[1] * shape[2] * shape[3]) / channels)];\n          const adjustedLayout =\n              createTextureLayoutFromTextureType(this.session.layoutStrategy, adjustedKernelShape, textureType);\n          let buffer = tensor.numberData;\n          if (shape[1] * shape[2] * shape[3] % channels !== 0) {\n            const numFeatureMaps = shape[0];\n            const oldRowSize = shape[1] * shape[2] * shape[3];\n            const newRowSize = Math.ceil(oldRowSize * group / channels) * channels;\n            const newSize = numFeatureMaps * newRowSize;\n            buffer = new Float32Array(newSize);\n            for (let f = 0; f < numFeatureMaps; ++f) {\n              const oldOffset = f * oldRowSize;\n              const newOffset = f * newRowSize + f % group * oldRowSize;\n              buffer.set(tensor.numberData.subarray(oldOffset, oldOffset + oldRowSize), newOffset);\n            }\n          }\n          return this.createTextureData(adjustedLayout, tensor.type, buffer, tensor, Encoder.Usage.UploadOnly);\n        }\n      }\n\n      if (textureType === TextureType.packed) {\n        const unpackedTextureLayout =\n            createTextureLayoutFromShape(this.session.layoutStrategy, tensor.dims, 1, [], {reverseWH: true});\n        const unpackedTextureData = this.createTextureData(\n            unpackedTextureLayout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n        td = this.pack(unpackedTextureData);\n      } else {\n        td = this.createTextureData(layout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n      }\n    }\n    return td;\n  }\n\n  /**\n   * Create a TextureData object using the given data and bind to the given tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * NOTE: this function is a hack for Conv implementation. should remove this function, after rewriting Conv\n   * implementation by Graph.Transformer\n   * @param dataType the tensor data type\n   * @param data the actual data to upload\n   * @param tensor the tensor to bind. tensor's data is ignored.\n   */\n  createTextureDataFromLayoutBindTensor(\n      layout: TextureLayout, dataType: Tensor.DataType, data: Tensor.NumberType, tensor: Tensor): TextureData {\n    return this.createTextureData(layout, dataType, data, tensor, Encoder.Usage.UploadOnly);\n  }\n\n  private createTextureData(\n      layout: TextureLayout, dataType: Tensor.DataType, data?: Tensor.NumberType, tensor?: Tensor,\n      usage?: Encoder.Usage): TextureData {\n    Logger.verbose('InferenceHandler', `Creating TextureData: layout:[${JSON.stringify(layout)}]`);\n    const texture = this.session.textureManager.createTextureFromLayout(dataType, layout, data, usage);\n    return this.createTextureDataFromTexture(layout, dataType, texture, tensor);\n  }\n\n  reshapeUnpacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureLayout: TextureLayout = {\n      channels: inputTD.channels,\n      height: inputTD.height,\n      width: inputTD.width,\n      // handle reshaping into scalar Tensors\n      shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n      strides: ShapeUtil.computeStrides(reshapedDims),\n      unpackedShape: reshapedDims,\n    };\n    const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  reshapePacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.packed);\n\n    // check if the reshape is 'cheap'\n    if (isReshapeCheap(input.dims, reshapedDims)) {\n      const newTextureLayout: TextureLayout = {\n        channels: inputTD.channels,\n        height: inputTD.height,\n        width: inputTD.width,\n        // handle reshaping into scalar Tensors\n        shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n        strides: ShapeUtil.computeStrides(reshapedDims),\n        unpackedShape: reshapedDims,\n        isPacked: true\n      };\n      const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n      return newTextureData.tensor;\n    }\n\n    const squeezedInputShape = processDims3D(input.dims);\n    const squeezedOutputShape = processDims3D(reshapedDims);\n\n    const squeezedInputTensor = this.reshapePacked(input, squeezedInputShape);\n    const squeezedOutputTensor = this.run(\n        createPackedReshape3DProgramInfoLoader(this, squeezedInputTensor, squeezedOutputShape), [squeezedInputTensor]);\n    const outputTensor = this.reshapePacked(squeezedOutputTensor, reshapedDims);\n    return outputTensor;\n  }\n\n  cast(input: Tensor, type: Tensor.DataType): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureData = this.createTextureDataFromTexture(inputTD as TextureLayout, type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  private createTextureDataFromTexture(\n      layout: TextureLayout, dataType: Tensor.DataType, texture: WebGLTexture, tensor?: Tensor, tensorId?: Tensor.Id) {\n    const textureData: TextureData = {\n      ...layout,\n      tensor: tensor ||\n          new Tensor(\n                  layout.unpackedShape, dataType, (_id: Tensor.Id) => this.readTexture(textureData),\n                  async (_id: Tensor.Id) => this.readTextureAsync(textureData), undefined, tensorId),\n      texture\n    };\n    this.setTextureData(textureData.tensor.dataId, textureData, layout.isPacked);\n    return textureData;\n  }\n\n  private getTextureData(tensorId: Tensor.Id, isPacked = false): TextureData|undefined {\n    return this.session.isInitializer(tensorId) ? this.session.getTextureData(tensorId, isPacked) :\n        isPacked                                ? this.packedTextureDataCache.get(tensorId) :\n                                                  this.unpackedTextureDataCache.get(tensorId);\n  }\n  setTextureData(tensorId: Tensor.Id, td: TextureData, isPacked = false): void {\n    if (this.session.isInitializer(tensorId)) {\n      this.session.setTextureData(tensorId, td, isPacked);\n    } else {\n      (isPacked ? this.packedTextureDataCache : this.unpackedTextureDataCache).set(tensorId, td);\n    }\n  }\n  isTextureLayoutCached(tensor: Tensor, isPacked = false): boolean {\n    return !!this.getTextureData(tensor.dataId, isPacked);\n  }\n\n  dispose(): void {\n    this.session.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  readTexture(textureData: TextureData): Tensor.NumberType {\n    if (textureData.isPacked) {\n      return this.readTexture(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTexture(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  async readTextureAsync(textureData: TextureData): Promise<Tensor.NumberType> {\n    if (textureData.isPacked) {\n      return this.readTextureAsync(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTextureAsync(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  pack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createPackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n\n  unpack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createUnpackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {OpSet} from '../../opset';\n\nimport {batchNormalization, parseBatchNormalizationAttributes} from './ops/batch-normalization';\nimport * as binaryOps from './ops/binary-op';\nimport {cast, parseCastAttributes} from './ops/cast';\nimport {concat, parseConcatAttributes} from './ops/concat';\nimport {conv, parseConvAttributes} from './ops/conv';\nimport {convTranspose, parseConvTransposeAttributes} from './ops/conv-transpose';\nimport {depthToSpace, parseDepthToSpaceAttributes} from './ops/depth-to-space';\nimport {flatten, parseFlattenAttributes} from './ops/flatten';\nimport {gather, parseGatherAttributes} from './ops/gather';\nimport {gemm, parseGemmAttributesV11, parseGemmAttributesV7} from './ops/gemm';\nimport {imageScaler, parseImageScalerAttributes} from './ops/image-scaler';\nimport {instanceNormalization, parseInstanceNormalizationAttributes} from './ops/instance-normalization';\nimport {lrn, parseLrnAttributes} from './ops/lrn';\nimport {matMul, parseMatMulAttributes} from './ops/matmul';\nimport {padV11, padV2, parsePadAttributesV11, parsePadAttributesV2} from './ops/pad';\nimport {averagePool, globalAveragePool, globalMaxPool, maxPool, parseAveragePoolAttributes, parseGlobalAveragePoolAttributes, parseMaxPoolAttributes} from './ops/pool';\nimport {parseReduceAttributes, reduceLogSum, reduceLogSumSquare, reduceMax, reduceMean, reduceMin, reduceProd, reduceSum} from './ops/reduce';\nimport {reshape} from './ops/reshape';\nimport {parseResizeAttributesV10, parseResizeAttributesV11, resize} from './ops/resize-packed';\nimport {shape} from './ops/shape';\nimport {parseSliceAttributes, slice, sliceV10} from './ops/slice';\nimport {parseSoftmaxAttributes, parseSoftmaxAttributesV13, softmax, softmaxV13} from './ops/softmax';\nimport {parseSplitAttributes, split} from './ops/split';\nimport {parseSqueezeAttributes, squeeze, squeezeV13} from './ops/squeeze';\nimport {sum} from './ops/sum';\nimport {tile} from './ops/tile';\nimport {parseTransposeAttributes, transpose} from './ops/transpose';\nimport * as unaryOps from './ops/unary-op';\nimport {parseUnsqueezeAttributes, unsqueeze, unsqueezeV13} from './ops/unsqueeze';\nimport {parseUpsampleAttributesV7, parseUpsampleAttributesV9, upsample} from './ops/upsample';\n\nexport const WEBGL_OP_RESOLVE_RULES: readonly OpSet.ResolveRule[] = [\n  ['Abs', '', '6+', unaryOps.abs],\n  ['Acos', '', '7+', unaryOps.acos],\n  ['Add', '', '7+', binaryOps.add],\n  ['And', '', '7+', binaryOps.and],\n  ['Asin', '', '7+', unaryOps.asin],\n  ['Atan', '', '7+', unaryOps.atan],\n  // TODO: support new attributes for AveragePool-10\n  ['AveragePool', '', '7+', averagePool, parseAveragePoolAttributes],\n  ['BatchNormalization', '', '7+', batchNormalization, parseBatchNormalizationAttributes],\n  ['Cast', '', '6+', cast, parseCastAttributes],\n  ['Ceil', '', '6+', unaryOps.ceil],\n  ['Clip', '', '6-10', unaryOps.clip, unaryOps.parseClipAttributes],\n  ['Clip', '', '11+', unaryOps.clipV11],\n  ['Concat', '', '4+', concat, parseConcatAttributes],\n  ['Conv', '', '1+', conv, parseConvAttributes],\n  ['ConvTranspose', '', '1+', convTranspose, parseConvTransposeAttributes],\n  ['Cos', '', '7+', unaryOps.cos],\n  ['Div', '', '7+', binaryOps.div],\n  ['Dropout', '', '7+', unaryOps.identity],\n  ['DepthToSpace', '', '1+', depthToSpace, parseDepthToSpaceAttributes],\n  ['Equal', '', '7+', binaryOps.equal],\n  ['Elu', '', '6+', unaryOps.elu, unaryOps.parseEluAttributes],\n  ['Exp', '', '6+', unaryOps.exp],\n  ['Flatten', '', '1+', flatten, parseFlattenAttributes],\n  ['Floor', '', '6+', unaryOps.floor],\n  ['FusedConv', 'com.microsoft', '1+', conv, parseConvAttributes],\n  ['Gather', '', '1+', gather, parseGatherAttributes],\n  ['Gemm', '', '7-10', gemm, parseGemmAttributesV7],\n  ['Gemm', '', '11+', gemm, parseGemmAttributesV11],\n  ['GlobalAveragePool', '', '1+', globalAveragePool, parseGlobalAveragePoolAttributes],\n  ['GlobalMaxPool', '', '1+', globalMaxPool],\n  ['Greater', '', '7+', binaryOps.greater],\n  ['Identity', '', '1+', unaryOps.identity],\n  ['ImageScaler', '', '1+', imageScaler, parseImageScalerAttributes],\n  ['InstanceNormalization', '', '6+', instanceNormalization, parseInstanceNormalizationAttributes],\n  ['LeakyRelu', '', '6+', unaryOps.leakyRelu, unaryOps.parseLeakyReluAttributes],\n  ['Less', '', '7+', binaryOps.less],\n  ['LRN', '', '1+', lrn, parseLrnAttributes],\n  ['Log', '', '6+', unaryOps.log],\n  ['MatMul', '', '1+', matMul, parseMatMulAttributes],\n  // TODO: support new attributes for MaxPool-8 and MaxPool-10\n  ['MaxPool', '', '1+', maxPool, parseMaxPoolAttributes],\n  ['Mul', '', '7+', binaryOps.mul],\n  ['Neg', '', '6+', unaryOps.neg],\n  ['Not', '', '1+', unaryOps.not],\n  ['Or', '', '7+', binaryOps.or],\n  ['Pad', '', '2-10', padV2, parsePadAttributesV2],\n  ['Pad', '', '11+', padV11, parsePadAttributesV11],\n  ['Pow', '', '7+', binaryOps.pow],\n  ['PRelu', '', '7+', binaryOps.pRelu],\n  ['ReduceLogSum', '', '1+', reduceLogSum, parseReduceAttributes],\n  ['ReduceMax', '', '1+', reduceMax, parseReduceAttributes],\n  ['ReduceMean', '', '1+', reduceMean, parseReduceAttributes],\n  ['ReduceMin', '', '1+', reduceMin, parseReduceAttributes],\n  ['ReduceProd', '', '1+', reduceProd, parseReduceAttributes],\n  ['ReduceSum', '', '1-12', reduceSum, parseReduceAttributes],\n  ['ReduceSumSquare', '', '1+', reduceLogSumSquare, parseReduceAttributes],\n  ['Relu', '', '6+', unaryOps.relu],\n  ['Reshape', '', '5+', reshape],\n  ['Resize', '', '10', resize, parseResizeAttributesV10],\n  ['Resize', '', '11+', resize, parseResizeAttributesV11],\n  ['Shape', '', '1+', shape],\n  ['Sigmoid', '', '6+', unaryOps.sigmoid],\n  ['Sin', '', '7+', unaryOps.sin],\n  ['Slice', '', '10+', sliceV10],  // TODO: support 'steps' for Slice-10\n  ['Slice', '', '1-9', slice, parseSliceAttributes],\n  // The \"semantic\" meaning of axis has changed in opset-13.\n  ['Softmax', '', '1-12', softmax, parseSoftmaxAttributes],\n  ['Softmax', '', '13+', softmaxV13, parseSoftmaxAttributesV13],\n  // 'Split' operator has an optional attribute 'split'\n  // this attribute determines how the specified axis of input data is split.\n  // When the attribute is missing, we need the count of number of outputs\n  // so that we can determine the 'split' attribute from the runtime input to the Operator\n  ['Split', '', '2-12', split, parseSplitAttributes],\n  ['Sqrt', '', '6+', unaryOps.sqrt],\n  ['Squeeze', '', '1-12', squeeze, parseSqueezeAttributes],\n  ['Squeeze', '', '13+', squeezeV13],\n  ['Sub', '', '7+', binaryOps.sub],\n  ['Sum', '', '6+', sum],\n  ['Tan', '', '7+', unaryOps.tan],\n  ['Tanh', '', '6+', unaryOps.tanh],\n  ['Tile', '', '6+', tile],\n  ['Transpose', '', '1+', transpose, parseTransposeAttributes],\n  ['Upsample', '', '7-8', upsample, parseUpsampleAttributesV7],\n  ['Upsample', '', '9', upsample, parseUpsampleAttributesV9],\n  ['Unsqueeze', '', '1-12', unsqueeze, parseUnsqueezeAttributes],\n  ['Unsqueeze', '', '13+', unsqueezeV13],\n  ['Xor', '', '7+', binaryOps.xor],\n];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface BatchNormalizationAttributes extends AttributeWithCacheKey {\n  epsilon: number;\n  momentum: number;\n  spatial: number;\n}\n\nconst batchNormalizationProgramMetadata = {\n  name: 'BatchNormalization',\n  inputNames: ['A', 'Scale', 'B', 'Mean', 'Variance'],\n  inputTypes:\n      [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked]\n};\n\nexport const batchNormalization: OperatorImplementation<BatchNormalizationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...batchNormalizationProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createBatchNormalizationProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseBatchNormalizationAttributes: OperatorInitialization<BatchNormalizationAttributes> =\n    (node: Graph.Node): BatchNormalizationAttributes => {\n      const epsilon = node.attributes.getFloat('epsilon', 1e-5);\n      const momentum = node.attributes.getFloat('momentum', 0.9);\n      const spatial = node.attributes.getInt('spatial', 1);\n      return createAttributeWithCacheKey({epsilon, momentum, spatial});\n    };\n\nconst createBatchNormalizationProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes):\n        ProgramInfo => {\n          const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n          const rank = inputs[0].dims.length;\n          const [scaleWidth, scaleHeight] =\n              inferenceHandler.calculateTextureWidthAndHeight(inputs[1].dims, TextureType.unpacked);\n          const shaderSource = `\n  float process(int[${rank}] indices) {\n    vec2 position = offsetToCoords(indices[1], ${scaleWidth}, ${scaleHeight});\n    float scale = getColorAsFloat(${glsl.texture2D}(Scale, position));\n    float mean = getColorAsFloat(${glsl.texture2D}(Mean, position));\n    float variance = getColorAsFloat(${glsl.texture2D}(Variance, position));\n    float b = getColorAsFloat(${glsl.texture2D}(B, position));\n\n    return scale * ( (_A(indices) - mean) / sqrt(variance + float(${attributes.epsilon})) ) + b;\n  }`;\n          return {\n            ...batchNormalizationProgramMetadata,\n            output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 5) {\n    throw new Error('BatchNormalization requires 5 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n  const mean = inputs[3];\n  const var_ = inputs[4];\n\n  // input should atleast have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1 || mean.dims.length !== 1 ||\n      var_.dims.length !== 1) {\n    throw new Error('invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1] || mean.dims[0] !== X.dims[1] ||\n      var_.dims[0] !== X.dims[1]) {\n    throw new Error('invalid input shape.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64') || (mean.type !== 'float32' && mean.type !== 'float64') ||\n      (var_.type !== 'float32' && var_.type !== 'float64')) {\n    throw new Error('invalid input tensor types.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\n\nexport function glslAdd(): GlslValueFunction {\n  const name = 'add_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a + b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 + v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslDiv(): GlslValueFunction {\n  const name = 'div_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a / b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 / v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslMul(): GlslValueFunction {\n  const name = 'mul_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a * b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 * v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSub(): GlslValueFunction {\n  const name = 'sub_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a - b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 - v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslEqual(): GlslValueFunction {\n  const name = 'equal_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a == b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(equal(v1, v2));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslGreater(): GlslValueFunction {\n  const name = 'greater_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a > b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r > v2.r ,\n      v1.g > v2.g,\n      v1.b > v2.b,\n      v1.a > v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLess(): GlslValueFunction {\n  const name = 'less_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a < b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r < v2.r ,\n                v1.g < v2.g,\n                v1.b < v2.b,\n                v1.a < v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslAnd(): GlslValueFunction {\n  const name = 'and_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) && bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r && b2.r ,\n                b1.g && b2.g,\n                b1.b && b2.b,\n                b1.a && b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslOr(): GlslValueFunction {\n  const name = 'or_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) || bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r || b2.r ,\n                b1.g || b2.g,\n                b1.b || b2.b,\n                b1.a || b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslXor(): GlslValueFunction {\n  const name = 'xor_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) ^^ bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r ^^ b2.r ,\n                b1.g ^^ b2.g,\n                b1.b ^^ b2.b,\n                b1.a ^^ b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslPow(): GlslValueFunction {\n  return glslBuiltinBinary('pow');\n}\nexport function glslPRelu(): GlslValueFunction {\n  const name = 'prelu_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a < 0.0 ? a * b: a;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(\n      v1.r < 0.0 ? v1.r * v2.r: v1.r,\n      v1.g < 0.0 ? v1.g * v2.g: v1.g,\n      v1.b < 0.0 ? v1.b * v2.b: v1.b,\n      v1.a < 0.0 ? v1.a * v2.a: v1.a\n      );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nfunction glslBuiltinBinary(fname: string): GlslValueFunction {\n  const name = `${fname}_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return ${fname}(a, b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return ${fname}(v1, v2);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nconst createBinaryProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type, cacheKey?: string): ProgramInfoLoader => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        cacheHint: cacheKey,\n        get: () => createBinaryProgramInfo(handler, inputs, glslFunc, outputTensorType)\n      };\n    };\n\nconst createBinaryProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type): ProgramInfo => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n      let outputShape = inputs[0].dims;\n\n      const usePackedTexture = handler.session.pack;\n\n      if (isBroadcast) {\n        const calculatedShape = BroadcastUtil.calcShape(inputs[0].dims, inputs[1].dims, false);\n        if (!calculatedShape) {\n          throw new Error('Can\\'t perform binary op on the given tensors');\n        }\n        outputShape = calculatedShape;\n        const outputRank = outputShape.length;\n        const aRank = inputs[0].dims.length !== 0 ? inputs[0].dims.length : 1;\n        const bRank = inputs[1].dims.length !== 0 ? inputs[1].dims.length : 1;\n        const aBcast = inputs[0].dims.length !== 0 ? 'bcastIndices_A(indices, aindices);' : 'aindices[0] = 0;';\n        const bBcast = inputs[1].dims.length !== 0 ? 'bcastIndices_B(indices, bindices);' : 'bindices[0] = 0;';\n\n        const glsl = getGlsl(handler.session.backend.glContext.version);\n        const shaderSource = usePackedTexture ? `\n      ${glslFunc.body}\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n        vec4 result = ${glslFunc.name}(a, b);\n        ${glsl.output} = result;\n      }` :\n                                                `\n      ${glslFunc.body}\n      float process(int indices[${outputRank}]) {\n        int aindices[${aRank}];\n        int bindices[${bRank}];\n        ${aBcast}\n        ${bBcast}\n        return ${glslFunc.name}(_A(aindices), _B(bindices));\n      }`;\n\n        return {\n          name: glslFunc.name,\n          inputNames: ['A', 'B'],\n          inputTypes: [textureType, textureType],\n          output: {dims: outputShape, type: outputTensorType, textureType},\n          shaderSource,\n          hasMain: usePackedTexture\n        };\n      }\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n      const shaderSource = `\n    ${glslFunc.body}\n    void main() {\n      vec4 v1 = ${glsl.texture2D}(A, TexCoords);\n      vec4 v2 = ${glsl.texture2D}(B, TexCoords);\n      vec4 result = ${glslFunc.name}(v1, v2);\n      ${glsl.output} = result;\n    }\n    `;\n\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        output: {dims: inputs[0].dims, type: outputTensorType, textureType},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const add = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAdd()), inputs)];\n\nexport const and = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAnd(), 'bool'), inputs)];\n\nexport const div = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslDiv()), inputs)];\n\nexport const equal = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslEqual(), 'bool'), inputs)];\n\nexport const greater = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslGreater(), 'bool'), inputs)];\n\nexport const less = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslLess(), 'bool'), inputs)];\n\nexport const mul = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslMul()), inputs)];\n\nexport const or = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslOr(), 'bool'), inputs)];\n\nexport const pow = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPow()), inputs)];\n\nexport const pRelu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPRelu()), inputs)];\n\nexport const sub = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslSub()), inputs)];\n\nexport const xor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslXor(), 'bool'), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ProtoUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const cast: OperatorImplementation<Tensor.DataType> =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], to: Tensor.DataType): Tensor[] => {\n      validateInputs(inputs);\n      return [handler.cast(inputs[0], to)];\n    };\n\nexport const parseCastAttributes: OperatorInitialization<Tensor.DataType> = (node: Graph.Node): Tensor.DataType =>\n    ProtoUtil.tensorDataTypeFromProto(node.attributes.getInt('to'));\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Cast requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {ConcatAttributes} from './concat';\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst createPackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat (packed)',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.packed),\n  cacheHint\n});\n\nconst createPackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n      const coords = getChannels('coords', rank);\n      const dtype = getCoordsDataType(rank);\n      const unpackChannel = unpackFromChannel();\n\n      const shapes = inputs.map(i => i.dims);\n      const channels = getGlChannels(rank);\n      const offsets: number[] = new Array(shapes.length - 1);\n\n      offsets[0] = shapes[0][axis];\n      for (let i = 1; i < offsets.length; i++) {\n        offsets[i] = offsets[i - 1] + shapes[i][axis];\n      }\n\n      const channel = channels[axis];\n      const lastChannels = channels.slice(-2);\n      const allChannels = channels.join();\n\n      let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getX0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n      for (let i = 1; i < offsets.length; i++) {\n        const shift = offsets[i - 1];\n        getValueSnippet += `\n            if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n              return getChannel(\n                getX${i}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n                vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));\n            }`;\n      }\n      const lastIndex = offsets.length;\n      const shift = offsets[offsets.length - 1];\n      getValueSnippet += `\n            return getChannel(\n              getX${lastIndex}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n              vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));`;\n\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n\n      const shaderSource = `\n          ${unpackChannel}\n          float getValue(${channels.map(x => 'int ' + x)}) {\n            ${getValueSnippet}\n          }\n\n          void main() {\n            ${dtype} coords = getOutputCoords();\n            int lastDim = coords.${channels[rank - 1]};\n            coords.${channels[rank - 1]} = coords.${channels[rank - 2]};\n            coords.${channels[rank - 2]} = lastDim;\n\n            vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n            if (${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.g = getValue(${coords});\n            }\n\n            ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]}) {\n              result.a = getValue(${coords});\n            }\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]} &&\n                ${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.b = getValue(${coords});\n            }\n            ${glsl.output} = result;\n          }\n        `;\n\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createPackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createPackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createPackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getShiftedChannelsSnippet = (channels: string[], channel: string, shift: number): string => {\n  const channelIdx = channels.indexOf(channel);\n  const res = channels.map((c, idx) => {\n    if (idx === channelIdx) {\n      return `${c} - ${shift}`;\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {createPackedConcatProgramInfoLoader} from './concat-packed';\n\nexport interface ConcatAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const concat: OperatorImplementation<ConcatAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): Tensor[] => {\n      validateInputs(inputs);\n      if (inferenceHandler.session.pack && inputs[0].dims.length > 1) {\n        const output =\n            inferenceHandler.run(createPackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      } else {\n        const output =\n            inferenceHandler.run(createUnpackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      }\n    };\n\nconst createUnpackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.unpacked),\n  cacheHint\n});\n\nconst createUnpackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n\n      const sizeInConcatAxis = new Array<number>(inputs.length);\n      let previousSum = 0;\n      for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n        previousSum += inputs[i].dims[axis];\n        sizeInConcatAxis[i] = previousSum;\n      }\n\n      let getTextureIndexWhereDataResidesMethod = '';\n      // in most cases linear search is sufficient, as in most scenarios, only 2 tensors are concatenated\n      if (inputs.length < 5) {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n      } else {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesBinarySearch(sizeInConcatAxis);\n      }\n\n      const fetchDataFromCorrectTextureMethod = getFetchDataFromCorrectTextureMethod(inputs.length, rank);\n      const getSizeInConcatAxisValueFromIndexMethod = getGetSizeInConcatAxisValueFromIndexMethod(sizeInConcatAxis);\n      const shaderSource = `\n        ${fetchDataFromCorrectTextureMethod}\n        ${getSizeInConcatAxisValueFromIndexMethod}\n        ${getTextureIndexWhereDataResidesMethod}\n        float process(int indices[${rank}]) {\n          int textureIndex = getTextureWhereDataResides (indices[${axis}]);\n\n          if(textureIndex != 0) {\n            indices[${axis}] = indices[${axis}] - int(getSizeInConcatAxisValueFromIndex(textureIndex-int(1)));\n          }\n\n          return fetchDataFromCorrectTexture(textureIndex, indices);\n        }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n      };\n    };\n\nconst createUnpackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createUnpackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createUnpackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getTextureIndexWhereDataResidesLinearSearch = (sizeInConcatAxis: number[]): string => {\n  const searchAxis = sizeInConcatAxis.map((size, i) => `if(index<${size}) {return ${i};}\n`);\n  return `int getTextureWhereDataResides(int index) {\n      ${searchAxis.join('')}\n    }`;\n};\n\n// TODO: Implement BinarySearch in GLSL\nconst getTextureIndexWhereDataResidesBinarySearch = (sizeInConcatAxis: number[]): string =>\n    getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n\nconst getFetchDataFromCorrectTextureMethod = (numberOfTensors: number, tensorRank: number) => {\n  const codeLines: string[] = [`float fetchDataFromCorrectTexture(int textureIndex, int indices[${tensorRank}]) {`];\n  for (let i = 0; i < numberOfTensors; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    } else if (i === numberOfTensors - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return _X${i}(indices); }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst getGetSizeInConcatAxisValueFromIndexMethod = (sizeInConcatAxis: number[]): string => {\n  const codeLines: string[] = ['int getSizeInConcatAxisValueFromIndex(int index) {'];\n  for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    } else if (i === sizeInConcatAxis.length - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return ${sizeInConcatAxis[i]}; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n\n  return codeLines.join('\\n');\n};\n\nexport const parseConcatAttributes: OperatorInitialization<ConcatAttributes> = (node: Graph.Node): ConcatAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis')});\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 1) {\n    throw new Error('too few inputs');\n  }\n\n  const inputType = inputs[0].type;\n  const inputDimensionality = inputs[0].dims.length;\n\n  // TODO: Support string concat\n  if (inputType === 'string') {\n    throw new Error('string tensor is not supported yet');\n  }\n\n  for (const input of inputs) {\n    // make sure types of all inputs match\n    if (input.type !== inputType) {\n      throw new Error('input tensors should be one type');\n    }\n\n    // make sure the dimensionality of all inputs are the same\n    if (input.dims.length !== inputDimensionality) {\n      throw new Error('input tensors should have the same shape');\n    }\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../../instrument';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {getActivationSnippet} from './fuse-utils';\n\nconst createUnpackedGroupedConvProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'GroupedConv',\n  inputNames: hasBias ? ['X', 'W', 'Bias'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedGroupedConvProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBias(output_channel);' : '';\n      const xShape = inputs[0].dims.slice();\n      const wShape = inputs[1].dims.slice();\n      const outputChannelsPerGroup = wShape[0] / attributes.group;\n      Logger.verbose(\n          'GroupedConv',\n          `autpPad:${attributes.autoPad}, dilations:${attributes.dilations}, group:${attributes.group}, kernelShape:${\n              attributes.kernelShape}, pads:${attributes.pads}, strides:${attributes.strides}`);\n      const outputShape =\n          calculateOutputShape(xShape, wShape, attributes.dilations, attributes.pads, attributes.strides);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n    ivec2 xRCCorner = coords.zw * strides - pads;\n    int group_id = output_channel / ${outputChannelsPerGroup};\n\n    float value = 0.0;\n    for (int wInChannel = 0; wInChannel < ${wShape[1]}; wInChannel++) {\n      int input_channel = group_id * ${wShape[1]} + wInChannel;\n      for (int wHeight = 0; wHeight < ${wShape[2]}; wHeight++) {\n        int xHeight = xRCCorner.x + wHeight * ${attributes.dilations[0]};\n\n        if (xHeight < 0 || xHeight >= ${xShape[2]}) {\n          continue;\n        }\n\n        for (int wWidth = 0; wWidth < ${wShape[3]}; wWidth++) {\n          int xWidth = xRCCorner.y + wWidth * ${attributes.dilations[1]};\n          if (xWidth < 0 || xWidth >= ${xShape[3]}) {\n            continue;\n          }\n\n          float xVal = getX(batch, input_channel, xWidth, xHeight);\n          float wVal = getW(output_channel, wInChannel, wWidth, wHeight);\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${processBias}\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createUnpackedGroupedConvProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes):\n        ProgramInfoLoader => {\n          const metadata = createUnpackedGroupedConvProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedGroupedConvProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {createPackedIm2ColProgramInfoLoader} from './im2col-pack';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const conv2DPackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapePacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapePacked(matmulOutput, outputShape);\n    };\n\nexport const conv2DPacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n\n      // run im2col\n      const im2colOutput = inferenceHandler.run(\n          createPackedIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes),\n          [inputs[0]]);\n\n      // reshape kernel\n      const kernelReshaped = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1] * kshape[2] * kshape[3]]);\n\n      // run matmul\n      const matmulInputs =\n          (inputs.length === 3) ? [kernelReshaped, im2colOutput, inputs[2]] : [kernelReshaped, im2colOutput];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n\n      // reshape output\n      const outputReshaped = inferenceHandler.reshapePacked(matmulOutput, outputShape);\n      return outputReshaped;\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\nimport {getActivationSnippet, parseInternalActivationAttributes} from './fuse-utils';\n\nconst computeTotalPad =\n    (inDim: number, stride: number, adj: number, kernel: number, dilation: number, outSize: number) =>\n        (inDim - 1) * stride + adj + (kernel - 1) * dilation + 1 - outSize;\n\nconst distributePadding = (totalPad: number, autoPad: string, pads: number[], head: number, tail: number) => {\n  const smallPad = Math.floor(totalPad / 2);\n  if (autoPad === 'SAME_UPPER') {\n    pads[head] = smallPad;\n    pads[tail] = totalPad - smallPad;\n  } else if (autoPad === 'SAME_LOWER') {\n    pads[head] = totalPad - smallPad;\n    pads[tail] = smallPad;\n  }\n};\n\nconst calculateOutputShapeAndPads =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[], autoPad: string,\n     pads: number[], strides: readonly number[], outputPadding: readonly number[], outputShape: number[]) => {\n      const spatialRank = inputShape.length - 2;\n      const updateShape = outputShape.length === 0;\n      for (let i = 0; i < spatialRank; ++i) {\n        const outSize = updateShape ? inputShape[i + 2] * strides[i] : outputShape[i];\n        const totalPad = computeTotalPad(inputShape[i + 2], strides[i], pads[i], kernelShape[i], dilations[i], outSize);\n        distributePadding(totalPad, autoPad, pads, i, i + spatialRank);\n        if (updateShape) {\n          outputShape.push(\n              strides[i] * (inputShape[i + 2] - 1) + outputPadding[i] + (kernelShape[i] - 1) * dilations[i] + 1 -\n              pads[i] - pads[i + spatialRank]);\n        }\n      }\n    };\n\nexport interface ConvTransposeAttributes extends ConvAttributes {\n  readonly outputPadding: readonly number[];\n  readonly outputShape: readonly number[];\n}\n\nexport const convTranspose: OperatorImplementation<ConvTransposeAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not convTranspose2D\n      return convTranspose2d(inferenceHandler, inputs, attributes);\n    };\n\nconst convTranspose2d: OperatorImplementation<ConvTransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvTransposeAttributes(attributes, inputs);\n      return [convTranspose2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n    };\n\nconst createConvTransposeProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'ConvTranspose',\n  inputNames: hasBias ? ['X', 'W', 'B'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedConvTransposeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvTransposeAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const valueInit = hasBias ? 'getB(output_channel)' : '0.0';\n      const xShape = inputs[0].dims;\n      const wShape = inputs[1].dims;\n      const outputChannelsPerGroup = wShape[1];\n      const inputChannelsPerGroup = wShape[0] / attributes.group;\n      const outputShape = [inputs[0].dims[0], inputs[1].dims[1] * attributes.group, ...attributes.outputShape];\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n\n    ivec2 loc = coords.zw + pads;\n\n    int group_id = output_channel / ${outputChannelsPerGroup};\n    int wOutChannel = output_channel - group_id * ${outputChannelsPerGroup};\n\n    float value = ${valueInit};\n    for (int inChannelOffset = 0; inChannelOffset < ${inputChannelsPerGroup}; inChannelOffset++) {\n      int input_channel = group_id * ${inputChannelsPerGroup} + inChannelOffset;\n      for (int wWOff = 0; wWOff < ${wShape[2]}; wWOff++) {\n        for (int wHOff = 0; wHOff < ${wShape[3]}; wHOff++) {\n          ivec2 wOff = ivec2(wWOff * ${attributes.dilations[0]}, wHOff * ${attributes.dilations[1]});\n          ivec2 wLoc = loc - wOff;\n          ivec2 wLocIn = wLoc / strides;\n          if (\n            wLocIn * strides == wLoc &&\n            wLocIn.x >= 0 && wLocIn.x < ${xShape[2]} &&\n            wLocIn.y >= 0 && wLocIn.y < ${xShape[3]}\n          ) {\n            float xVal = getX(batch, input_channel, wLocIn.y, wLocIn.x);\n            float wVal = getW(input_channel, wOutChannel, wHOff, wWOff);\n            value += xVal * wVal;\n          }\n        }\n      }\n    }\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nconst createUnpackedConvTransposeProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\n        ProgramInfoLoader => {\n          const metadata = createConvTransposeProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedConvTransposeProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n\n\nconst convTranspose2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\n        Tensor => {\n          const result = inferenceHandler.run(\n              createUnpackedConvTransposeProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n          return result;\n        };\n\nconst getAdjustedConvTransposeAttributes = <T extends ConvTransposeAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n\n  const pads = attributes.pads.slice();\n  const outputShape = attributes.outputShape.slice();\n  const inputShape = inputs[0].dims;\n  // If outputShape is not specified in the attributes of this op, infer it from the parameters\n  // Similarly, automatically infer pads if not specified\n  calculateOutputShapeAndPads(\n      inputShape, kernelShape, attributes.dilations, attributes.autoPad, pads, attributes.strides,\n      attributes.outputPadding, outputShape);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, outputShape, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvTransposeAttributes: OperatorInitialization<ConvTransposeAttributes> =\n    (node: Graph.Node): ConvTransposeAttributes => {\n      const attributes = node.attributes;\n      const activationAttributes = parseInternalActivationAttributes(attributes);\n      // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n      const autoPad = attributes.getString('auto_pad', 'NOTSET');\n      const dilations = attributes.getInts('dilations', [1, 1]);\n      const group = attributes.getInt('group', 1);\n      const kernelShape = attributes.getInts('kernel_shape', []);\n      const outputPadding = attributes.getInts('output_padding', [0, 0]);\n      const outputShape = attributes.getInts('output_shape', []);\n      const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n      const strides = attributes.getInts('strides', [1, 1]);\n\n      return createAttributeWithCacheKey(\n          {autoPad, dilations, group, kernelShape, outputPadding, outputShape, pads, strides, ...activationAttributes});\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvTransposeAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[0];\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  const featureMaps = inputs[1].dims[1] * attributes.group;\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[2].dims[0] !== featureMaps)) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // Wrong output padding dimension\n  if (attributes.outputPadding.length !== spatialRank) {\n    throw new Error(`output_padding should be ${spatialRank}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // as with kernelShape, must have same number of spatial dims as input\n  if (attributes.outputShape.length !== 0 && attributes.outputShape.length !== inputs[0].dims.length - 2) {\n    throw new Error('invalid output shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('ConvTranspose input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('ConvTranspose input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {createUnpackedGroupedConvProgramInfoLoader} from './conv-grouped';\nimport {conv2DPacked} from './conv-pack';\nimport {createDotProductProgramInfoLoader} from './dot-product';\nimport {InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createIm2ColProgramInfoLoader} from './im2col';\nimport {createMatmulProgramInfoLoader} from './matmul';\n\n\nexport const calculateOutputShape =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[],\n     adjustPads: readonly number[], strides: readonly number[]): number[] => {\n      const batchSize = inputShape[0];\n      const inputSpatialShape = inputShape.slice(2);\n      const spatialRank = inputSpatialShape.length;\n      const outChannels = kernelShape[0];\n      const kernelSpatialShape = kernelShape.slice(2);\n      const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\n      const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\n      const outputSpatialShape =\n          inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\n      const outputShape = [batchSize, outChannels].concat(...outputSpatialShape);\n      return outputShape;\n    };\n\nexport interface ConvAttributes extends InternalActivationAttributes, AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly dilations: readonly number[];\n  readonly group: number;\n  readonly kernelShape: readonly number[];\n  readonly pads: readonly number[];\n  readonly strides: readonly number[];\n}\n\nexport const conv: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not conv2D\n      return conv2d(inferenceHandler, inputs, attributes);\n    };\n\nconst conv2d: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvAttributes(attributes, inputs);\n      const packMode = inferenceHandler.session.pack;\n      const isPointwise = adjustedAttributes.kernelShape[0] === 1 && adjustedAttributes.kernelShape[1] === 1;\n      if (adjustedAttributes.group > 1) {\n        const result = inferenceHandler.run(\n            createUnpackedGroupedConvProgramInfoLoader(inferenceHandler, inputs, adjustedAttributes), inputs);\n        return [result];\n      } else if (isPointwise && packMode) {\n        return [conv2DUnpackedPointwise(inferenceHandler, inputs, adjustedAttributes)];\n      } else if (packMode && inputs[0].dims.length === 4 && inputs[0].dims[0] === 1 && !isPointwise) {\n        return [conv2DPacked(inferenceHandler, inputs, adjustedAttributes)];\n      } else {\n        return [conv2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n      }\n    };\n\nconst conv2DUnpackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapeUnpacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapeUnpacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(createMatmulProgramInfoLoader(matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapeUnpacked(matmulOutput, outputShape);\n    };\n\nconst conv2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const xIm2Col = inferenceHandler.run(\n          createIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes), [inputs[0]]);\n\n      const dotProductInputs = inputs.length === 3 ? [xIm2Col, inputs[1], inputs[2]] : [xIm2Col, inputs[1]];\n      const output = inferenceHandler.run(\n          createDotProductProgramInfoLoader(inferenceHandler, inputs, outputShape, attributes), dotProductInputs);\n      return output;\n    };\n\nconst getAdjustedConvAttributes = <T extends ConvAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPadsBasedOnAutoPad(\n      inputs[0].dims, attributes.strides, attributes.dilations, kernelShape, pads, attributes.autoPad);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvAttributes: OperatorInitialization<ConvAttributes> = (node: Graph.Node): ConvAttributes => {\n  const attributes = node.attributes;\n  const activationAttributes = parseInternalActivationAttributes(attributes);\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n  const autoPad = attributes.getString('auto_pad', 'NOTSET');\n  const dilations = attributes.getInts('dilations', [1, 1]);\n  const group = attributes.getInt('group', 1);\n  const kernelShape = attributes.getInts('kernel_shape', []);\n  const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n  const strides = attributes.getInts('strides', [1, 1]);\n\n  return createAttributeWithCacheKey({autoPad, dilations, group, kernelShape, pads, strides, ...activationAttributes});\n};\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[1] * attributes.group;\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('Conv input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('Conv input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface DepthToSpaceAttributes {\n  mode: 'DCR'|'CRD';\n  blocksize: number;\n}\n\nexport const depthToSpace: OperatorImplementation<DepthToSpaceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: DepthToSpaceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const blocksize = attributes.blocksize;\n      const blocksizeSqr = blocksize * blocksize;\n      const transposePerm = attributes.mode === 'DCR' ? [0, 3, 4, 1, 5, 2] : [0, 1, 4, 2, 5, 3];\n      const firstReshapeShape = attributes.mode === 'DCR' ?\n          [\n            inputs[0].dims[0], blocksize, blocksize, inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ] :\n          [\n            inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, blocksize, blocksize, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ];\n\n      // const transpose = new WebGLTranspose();\n      // const attributes = new Attribute(undefined);\n      // attributes.set('perm', 'ints', transposePerm);\n      // transpose.initialize(attributes);\n\n      // First reshape\n      const firstReshapedTensor = inferenceHandler.reshapeUnpacked(inputs[0], firstReshapeShape);\n\n      // transpose\n      const transposeAttributes: TransposeAttributes = {perm: transposePerm, cacheKey: `${transposePerm}`};\n      const [transposeOutput] = transpose(inferenceHandler, [firstReshapedTensor], transposeAttributes);\n\n      // Second reshape\n      const secondReshapeShape = [\n        inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2] * blocksize,\n        inputs[0].dims[3] * blocksize\n      ];\n      const result = inferenceHandler.reshapeUnpacked(transposeOutput, secondReshapeShape);\n      return [result];\n    };\n\nexport const parseDepthToSpaceAttributes: OperatorInitialization<DepthToSpaceAttributes> =\n    (node: Graph.Node): DepthToSpaceAttributes => {\n      // processing node attributes\n      const blocksize = node.attributes.getInt('blocksize');\n      if (blocksize < 1) {\n        throw new Error(`blocksize must be >= 1, but got : ${blocksize} for DepthToSpace`);\n      }\n      const mode = node.attributes.getString('mode', 'DCR');\n      if (mode !== 'DCR' && mode !== 'CRD') {\n        throw new Error(`unrecognized mode: ${mode} for DepthToSpace`);\n      }\n      return {mode, blocksize};\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (inputs.length !== 1) {\n    throw new Error(`DepthToSpace expect 1 inputs, but got ${inputs.length}`);\n  }\n\n  // Input has to be a 4-D tensor\n  // TODO: Support string depth-to-space.\n  if (inputs[0].type === 'string' || inputs[0].dims.length !== 4) {\n    throw new TypeError('DepthToSpace input should be a 4-D numeric tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {calculateIm2ColDims} from './im2col';\n\nconst createDotProductProgramMetadata = (hasBias: boolean, attributes: InternalActivationAttributes) => ({\n  name: 'ConvDotProduct',\n  inputNames: hasBias ? ['Im2Col', 'K', 'B'] : ['Im2Col', 'K'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.packedLastDimension],\n  cacheKey: attributes.activationCacheKey\n});\n\nconst createDotProductProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: readonly Tensor[],\n     outputShape: number[], attributes: InternalActivationAttributes): ProgramInfo => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const adjustedKernelShape = [kshape[0], Math.ceil((xshape[1] * kshape[2] * kshape[3]) / 4)];\n      const im2colShape = calculateIm2ColDims(xshape, kshape, outputShape);\n      const [kWidth, kHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(adjustedKernelShape, TextureType.packedLastDimension);\n\n      const im2colStrides = ShapeUtil.computeStrides(im2colShape);\n      const [im2colWidth, im2colHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(im2colShape, TextureType.packedLastDimension);\n      const rank = outputShape.length;\n\n      const initValue = (inputs.length < 3) ? '0.0' : '_B(b)';\n      const sharedDim = Math.ceil(xshape[1] * kshape[2] * kshape[3] / 4);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n${activationFunction}\nfloat process(int indices[${rank}]) {\n  int b[1];\n  b[0] = indices[1];\n  int im2col[4];\n  im2col[0] = indices[0];\n  im2col[1] = indices[2];\n  im2col[2] = indices[3];\n  int im2colOffset = im2col[0] * ${im2colStrides[0]} + im2col[1] * ${im2colStrides[1]} + im2col[2] * ${\n          im2colStrides[2]};\n  int kernelOffset = indices[1] * ${adjustedKernelShape[1]};\n  float value = ${initValue};\n  for (int i = 0; i < ${sharedDim}; ++i) {\n    vec2 im2colCoords = offsetToCoords(im2colOffset, ${im2colWidth}, ${im2colHeight});\n    vec2 kernelCoords = offsetToCoords(kernelOffset, ${kWidth}, ${kHeight});\n    value += dot(${glsl.texture2D}(Im2Col, im2colCoords), ${glsl.texture2D}(K, kernelCoords));\n    ++im2colOffset;\n    ++kernelOffset;\n  }\n  ${applyActivation}\n  return value;\n}`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nexport const createDotProductProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], outputShape: number[],\n     attributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createDotProductProgramMetadata(inputs.length > 2, attributes);\n      return {\n        ...metadata,\n        get: () => createDotProductProgramInfo(inferenceHandler, metadata, inputs, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const flatten: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number): Tensor[] => {\n      validateInputs(inputs, axis);\n\n      const outputDims = ShapeUtil.flattenShape(inputs[0].dims, axis);\n      return [inferenceHandler.reshapeUnpacked(inputs[0], outputDims)];\n    };\n\nexport const parseFlattenAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getInt('axis', 1);  // default axis is 1\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Flatten requires 1 input.');\n  }\n\n  const r = inputs[0].dims.length;\n  if (r === 0) {\n    throw new Error('scalar tensor is not supported.');\n  }\n\n  if (axis < -r || axis > r) {\n    throw new Error('Invalid axis');\n  }\n\n  // TODO: Support string type\n  if (inputs[0].type === 'string') {\n    throw new Error('string tensor is not supported.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../../../attribute';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {GlslValueFunction} from '../glsl-definitions';\n\nimport {glslClip, glslRelu, glslSigmoid} from './unary-op';\n\nexport interface InternalActivationAttributes {\n  readonly activation: string;\n  readonly clipMin?: number;\n  readonly clipMax?: number;\n  readonly activationCacheKey: string;\n}\n\nexport function getActivationSnippet(attributes: InternalActivationAttributes) {\n  let func: GlslValueFunction;\n  switch (attributes.activation) {\n    case 'Relu':\n      func = glslRelu();\n      break;\n    case 'Sigmoid':\n      func = glslSigmoid();\n      break;\n    case 'Clip':\n      func = glslClip(attributes.clipMin!, attributes.clipMax!);\n      break;\n    // TODO: adding other activations that can be fused.\n    default:\n      return {activationFunction: '', applyActivation: ''};\n  }\n\n  const activationName = func.name;\n  const activationFunction = func.body;\n  const applyActivation = `value = ${activationName}_(value);`;\n  return {activationFunction, applyActivation};\n}\n\nexport const parseInternalActivationAttributes = (attributes: Attribute): InternalActivationAttributes => {\n  const activation = attributes.getString('activation', '');\n\n  if (activation === 'Clip') {\n    const [clipMin, clipMax] = attributes.getFloats('activation_params', [MIN_CLIP, MAX_CLIP]);\n    return {activation, clipMax, clipMin, activationCacheKey: `${activation}:${clipMin},${clipMax}`};\n  }\n  return {activation, activationCacheKey: activation};\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\ninterface GatherAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const gather: OperatorImplementation<GatherAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): Tensor[] => {\n      validateInputs(inputs, attributes.axis);\n      const output = inferenceHandler.run(createGatherProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseGatherAttributes: OperatorInitialization<GatherAttributes> = (node: Graph.Node): GatherAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 0)});\n\nconst gatherProgramMetadata = {\n  name: 'Gather',\n  inputNames: ['A', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createGatherProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const indexDataShape = inputs[1].dims.slice();\n      const outputShape = new Array(inputShape.length + indexDataShape.length - 1);\n\n      axis = ShapeUtil.normalizeAxis(axis, inputShape.length);\n      const indexCopyOps: string[] = [];\n      for (let i = 0; i < outputShape.length; i++) {\n        // outputShape is divided into three parts: A, B, C\n        // |0        axis|  axis + indexDataShape.length |          end|\n        // |     A       |             B                 |      C      |\n        //\n        // inputIdx: [A, inputs[1][B], C]\n        if (i < axis) {  // A\n          outputShape[i] = inputShape[i];\n          indexCopyOps.push(`inputIdx[${i}] = outputIdx[${i}];`);\n        } else {\n          if (i < axis + indexDataShape.length) {  // B\n            outputShape[i] = indexDataShape[i - axis];\n            indexCopyOps.push(`indexDataIdx[${i - axis}] = outputIdx[${i}];`);\n          } else {                                                       // C\n            outputShape[i] = inputShape[i - indexDataShape.length + 1];  // skip 1 for axis\n            indexCopyOps.push(`inputIdx[${i - indexDataShape.length + 1}] = outputIdx[${i}];`);\n          }\n        }\n      }\n\n      const orank = outputShape.length || 1;\n      const irank = inputShape.length;\n      const iDrank = indexDataShape.length || 1;\n      const shaderSource = `\n      float process(int outputIdx[${orank}]) {\n        int inputIdx[${irank}];\n        int indexDataIdx[${iDrank}];\n        indexDataIdx[0] = 0;\n        ${indexCopyOps.join('\\n        ')}\n        int idx = int(_B(indexDataIdx));\n        inputIdx[${axis}] = idx < 0 ? idx + ${inputShape[axis]} : idx;\n        return _A(inputIdx);\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createGatherProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): ProgramInfoLoader => {\n      const metadata = {...gatherProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createGatherProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Gather requires 2 inputs.');\n  }\n  const tensorRank = inputs[0].dims.length;\n  if (tensorRank < 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (axis < -tensorRank || axis > tensorRank - 1) {\n    throw new Error('Invalid axis.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invaid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invaid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {GemmUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface GemmAttributes extends AttributeWithCacheKey {\n  transA: boolean;\n  transB: boolean;\n  alpha: number;\n  beta: number;\n  isOptionalC: boolean;  // in opset 11, C becomes optional\n}\n\nexport const gemm: OperatorImplementation<GemmAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GemmAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(createGemmProgramInfoLoader(inputs, attributes), inputs);\n      return [output];\n    };\n\nconst parseGemmAttributes = (node: Graph.Node, isOptionalC: boolean): GemmAttributes => {\n  const transA = node.attributes.getInt('transA', 0) !== 0;\n  const transB = node.attributes.getInt('transB', 0) !== 0;\n  const alpha = node.attributes.getFloat('alpha', 1.0);\n  const beta = node.attributes.getFloat('beta', 1.0);\n  return createAttributeWithCacheKey({transA, transB, alpha, beta, isOptionalC});\n};\n\nexport const parseGemmAttributesV7: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, false);\n\nexport const parseGemmAttributesV11: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, true);\n\nconst createGemmProgramInfoLoader = (inputs: Tensor[], attributes: GemmAttributes): ProgramInfoLoader => {\n  const metadata = {\n    name: 'Gemm',\n    inputNames: inputs.length === 3 ? ['A', 'B', 'C'] : ['A', 'B'],\n    inputTypes: inputs.length === 3 ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                                      [TextureType.unpacked, TextureType.unpacked],\n    key: attributes.cacheKey\n  };\n\n  return {...metadata, get: () => createGemmProgramInfo(metadata, inputs, attributes)};\n};\n\nconst createGemmProgramInfo =\n    (metadata: ProgramMetadata, inputs: Tensor[], attributes: GemmAttributes): ProgramInfo => {\n      const aShape = inputs[0].dims.slice();\n      const bShape = inputs[1].dims.slice();\n      const [M, N] = GemmUtil.getShapeOfGemmResult(\n          aShape, attributes.transA, bShape, attributes.transB, inputs.length === 3 ? inputs[2].dims : undefined);\n      const outputShape = [M, N];\n      if (!outputShape) {\n        throw new Error('Can\\'t use gemm on the given tensors');\n      }\n      let sharedDim = aShape[aShape.length - 1];\n      let line = '';\n      if (attributes.transA) {\n        sharedDim = aShape[0];\n      }\n      if (attributes.transA && attributes.transB) {\n        line = 'value += _A_T(a) * _B_T(b);';\n      } else if (attributes.transA && !attributes.transB) {\n        line = 'value += _A_T(a) * _B(b);';\n      } else if (!attributes.transA && attributes.transB) {\n        line = 'value += _A(a) * _B_T(b);';\n      } else if (!attributes.transA && !attributes.transB) {\n        line = 'value += _A(a) * _B(b);';\n      }\n      const rank = outputShape.length;\n      const declareC = inputs.length === 3 ? `int c[${inputs[2].dims.length}];` : '';\n      const broadcastC = inputs.length === 3 ? 'bcastIndices_C(indices, c);' : '';\n      const calculateC = inputs.length === 3 ? 'value += beta * _C(c);' : '';\n      const shaderSource = `\n      float process(int indices[${rank}]) {\n          int a[${rank}];\n          int b[${rank}];\n          ${declareC}\n\n          copyVec(indices, a);\n          copyVec(indices, b);\n          ${broadcastC}\n\n          float value = 0.0;\n          for (int k=0; k<${sharedDim}; ++k) {\n              a[${rank - 1}] = k;\n              b[${rank - 2}] = k;\n              ${line}\n          }\n\n          value = value * alpha;\n          ${calculateC}\n          return value;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        variables: [\n          {name: 'alpha', type: 'float', data: attributes.alpha}, {name: 'beta', type: 'float', data: attributes.beta}\n        ],\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: GemmAttributes): void => {\n  if (!inputs) {\n    throw new Error('Input is missing');\n  }\n  if (attributes.isOptionalC && (inputs.length < 2 || inputs.length > 3)) {\n    throw new Error('Invaid input shape.');\n  }\n  if (!attributes.isOptionalC && inputs.length !== 3) {\n    throw new Error('Gemm requires 3 inputs');\n  }\n\n  // 'C' can be of dimensionality 1 or 2 only\n  if (inputs.length === 3 && inputs[2].dims.length !== 1 && inputs[2].dims.length !== 2) {\n    throw new Error('Invalid input shape of C');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') ||\n      (inputs.length === 3 && inputs[2].type !== 'float32' && inputs[2].type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n\n  if ((inputs[0].type !== inputs[1].type) || (inputs.length === 3 && inputs[0].type !== inputs[2].type)) {\n    throw new Error('Input types are mismatched');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col (packed)',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed],\n  cacheHint,\n});\n\nconst createPackedIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n      const rowDim = 2;\n      const colDim = 3;\n      const rank = outputShape.length;\n      const im2colShape = [wshape[1] * wshape[2] * wshape[3], outputShape[2] * outputShape[3]];\n      const kernelSize = wshape[2] * wshape[3];\n      const unpackChannel = unpackFromChannel();\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      let unrolled = '';\n\n      for (let row = 0; row <= 1; row++) {\n        for (let col = 0; col <= 1; col++) {\n          unrolled += `\n            blockIndex = rc.x + ${col};\n            pos = rc.y + ${row};\n\n            if(blockIndex < ${im2colShape[1]} && pos < ${im2colShape[0]}) {\n              offsetY = int(blockIndex / (${outputShape[rank - 1]})) * ${attributes.strides[0]} -\n                ${attributes.pads[0]};\n              d0 = offsetY + ${attributes.dilations[0]} * (imod(pos, ${kernelSize}) / ${wshape[2]});\n\n              if(d0 < ${xshape[rowDim]} && d0 >= 0) {\n                offsetX = imod(blockIndex, ${outputShape[rank - 1]}) * ${attributes.strides[1]} -\n                  ${attributes.pads[1]};\n                d1 = offsetX + ${attributes.dilations[1]} * imod(imod(pos, ${kernelSize}), ${wshape[2]});\n\n                if(d1 < ${xshape[colDim]} && d1 >= 0) {\n\n                  ch = int(float(pos)/ ${kernelSize}.);\n                    innerDims = vec2(d0, d1);\n                    result[${row * 2 + col}] = getChannel(\n                      getA(0, ch, int(innerDims.x),\n                      int(innerDims.y)), innerDims);\n                }\n              }\n            }\n\n          `;\n        }\n      }\n\n      const shaderSource = `\n      ${unpackChannel}\n\n      void main() {\n        ivec2 rc = getOutputCoords();\n          vec4 result = vec4(0.0);\n          int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n          vec2 innerDims;\n          ${unrolled}\n          ${glsl.output} = result;\n      }\n            `;\n      return {\n        ...metadata,\n        output: {dims: im2colShape, type: x.type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createPackedIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\n\nconst createIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n  cacheHint,\n});\n\nconst createIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n\n      const rank = outputShape.length;\n      const im2colDims = calculateIm2ColDims(xshape, wshape, outputShape, 4);\n\n      const shaderSource = `\n        const int XC = ${xshape[1]};\n        const int XH = ${xshape[2]};\n        const int XW = ${xshape[3]};\n        const int KH = ${attributes.kernelShape[0]};\n        const int KW = ${attributes.kernelShape[1]};\n        const int dilationH = ${attributes.dilations[0]};\n        const int dilationW = ${attributes.dilations[1]};\n        const int strideH = ${attributes.strides[0]};\n        const int strideW = ${attributes.strides[1]};\n        const int padH = ${attributes.pads[0]};\n        const int padW = ${attributes.pads[1]};\n        const int KHKW = KH*KW;\n        const int XCKHKW = XC * KHKW;\n        const int outputChannels = 4;\n        vec4 process(int indices[${rank}]) {\n          int b  = indices[0]; // batch size\n          int oh = indices[1] * strideH - padH; //output height\n          int ow = indices[2] * strideW - padW; //output width\n          int p = indices[3] * outputChannels; //patch\n          vec4 value = vec4(0.0);\n          for(int i=0; i < outputChannels; ++i) {\n            if(p < XCKHKW) {\n              int patchC = p / KHKW;\n              int patchH = (p - patchC*KHKW) / KW;\n              int patchW = (p - patchC*KHKW) - patchH * KW;\n              int xh2 = oh + patchH * dilationH;\n              int xw2 = ow + patchW * dilationW;\n              int x[${xshape.length}];\n              x[0] = b;\n              x[1] = patchC;\n              x[2] = xh2;\n              x[3] = xw2;\n              if(xh2 >= 0 &&\n                  xh2 < XH &&\n                  xw2 >= 0 &&\n                  xw2 < XW) {\n                value[i] = _X(x);\n              }\n            }\n            ++p;\n          }\n          return value;\n        }\n        `;\n      return {\n        ...metadata,\n        output: {dims: im2colDims, type: x.type, textureType: TextureType.packedLastDimension},\n        shaderSource\n      };\n    };\n\nexport const createIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n\n\nexport const calculateIm2ColDims =\n    (inputShape: readonly number[], kernelShape: readonly number[], outputShape: readonly number[], channels = 4):\n        number[] =>\n            [outputShape[0], outputShape[2], outputShape[3],\n             Math.ceil(inputShape[1] * kernelShape[2] * kernelShape[3] / channels)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface ImageScalerAttributes extends AttributeWithCacheKey {\n  scale: number;\n  bias: number[];\n}\n\nexport const imageScaler: OperatorImplementation<ImageScalerAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output =\n          inferenceHandler.run(createImageScalerProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseImageScalerAttributes: OperatorInitialization<ImageScalerAttributes> =\n    (node: Graph.Node): ImageScalerAttributes => {\n      const scale = node.attributes.getFloat('scale');\n      const bias = node.attributes.getFloats('bias');\n      return createAttributeWithCacheKey({scale, bias});\n    };\n\nconst imageScalerProgramMetadata = {\n  name: 'ImageScaler',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createImageScalerProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], attributes: ImageScalerAttributes):\n        ProgramInfo => {\n          const outputShape = inputs[0].dims.slice();\n          const rank = outputShape.length;\n          const getBiasMethod = createGetBiasMethod(attributes.bias.length);\n          const shaderSource = `\n      ${getBiasMethod}\n      float process(int indices[${rank}]) {\n        return _X(indices) * scale + getBias(bias, indices[1]);\n      }`;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            variables: [\n              {name: 'bias', type: 'float', arrayLength: attributes.bias.length, data: attributes.bias},\n              {name: 'scale', type: 'float', data: attributes.scale}\n            ],\n            shaderSource\n          };\n        };\n\nconst createImageScalerProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): ProgramInfoLoader => {\n      const metadata = {...imageScalerProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createImageScalerProgramInfo(handler, metadata, inputs, attributes)};\n    };\n\nconst createGetBiasMethod = (numChannels: number): string => {\n  const codeLines: string[] = [`float getBias(float bias[${numChannels}], int channel) {`];\n  for (let i = 0; i < numChannels; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (channel == ${i}) { return bias[${i}]; }`);\n    } else if (i === numChannels - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return bias[${i}]; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (channel == ${i}) { return bias[${i}]; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('ImageScaler requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Invalid input shape.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport const instanceNormalization: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], epsilon: number): Tensor[] => {\n      validateInputs(inputs);\n\n      const meanAndVariance = inferenceHandler.run(createMeanAndVarianceProgramInfoLoader(inputs[0]), inputs);\n      const output = inferenceHandler.run(\n          createComputeOutputProgramInfoLoader(inferenceHandler, inputs[0], epsilon, meanAndVariance.dims),\n          [inputs[0], meanAndVariance, inputs[1], inputs[2]]);\n      return [output];\n    };\n\nexport const parseInstanceNormalizationAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getFloat('epsilon', 1e-5);\n\nconst meanAndVarianceProgramMetadata = {\n  name: 'InstanceNormalization_MeanAndVariance',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createMeanAndVarianceProgramInfo = (metadata: ProgramMetadata, input: Tensor): ProgramInfo => {\n  const xDims = input.dims.slice();\n  const channel = xDims[1];\n  const channelSize = xDims[2] * xDims[3];\n  const outputShape = [xDims[0], channel];\n\n  const shaderSource = `\n      vec4 process(int[2] indices) {\n        vec4 v = vec4(0.0);\n        int a[4];\n        a[0] = indices[0];\n        a[1] = indices[1];\n        float temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += x;\n          }\n        }\n        float mean = temp / float(${channelSize});\n        temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += (x - mean) * (x - mean);\n          }\n        }\n        v.r = mean;\n        v.g = temp / float(${channelSize});\n\n        return v;\n      }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: input.type, textureType: TextureType.packedLastDimension},\n    shaderSource\n  };\n};\n\nconst createMeanAndVarianceProgramInfoLoader = (input: Tensor): ProgramInfoLoader => ({\n  ...meanAndVarianceProgramMetadata,\n  get: () => createMeanAndVarianceProgramInfo(meanAndVarianceProgramMetadata, input)\n});\n\nconst computeOutputProgramMetadata = {\n  name: 'InstanceNormalization_ComputeOutput',\n  inputNames: ['X', 'MeanAndVariance', 'Scale', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createComputeOutputProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, epsilon: number,\n     meanAndVarianceShape: readonly number[]): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(meanAndVarianceShape, TextureType.packedLastDimension);\n      const [meanAndVarianceWidth, meanAndVarianceHeight] = [textureWidth / 4, textureHeight];\n      const shaderSource = `\n      vec4 get_MeanAndVariance(int[2] mv) {\n        int offset = indicesToOffset_MeanAndVariance(mv);\n        vec2 coords = offsetToCoords(offset, ${meanAndVarianceWidth}, ${meanAndVarianceHeight});\n        return ${glsl.texture2D}(MeanAndVariance, coords);\n      }\n\n      float process(int[4] indices) {\n        int mv[2];\n        mv[0] = indices[0];\n        mv[1] = indices[1];\n        vec4 mean_and_variance = get_MeanAndVariance(mv);\n        float mean = mean_and_variance.r;\n        float variance = mean_and_variance.g;\n\n        int sb[1];\n        sb[0] = indices[1];\n        float scale = _Scale(sb);\n        float b = _B(sb);\n\n        return scale * (_X(indices) - mean) / sqrt(variance + epsilon) + b;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        variables: [{name: 'epsilon', type: 'float', data: epsilon}],\n        shaderSource\n      };\n    };\n\nconst createComputeOutputProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, epsilon: number, meanAndVarianceShape: readonly number[]):\n        ProgramInfoLoader => {\n          const metadata = {...computeOutputProgramMetadata, cacheHint: `${epsilon}`};\n          return {\n            ...metadata,\n            get: () => createComputeOutputProgramInfo(inferenceHandler, metadata, input, epsilon, meanAndVarianceShape)\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 3) {\n    throw new Error('InstanceNormalization requires 3 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n\n  // input should at least have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1]) {\n    throw new Error('Input shapes are mismatched.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Only support 4-D input shape.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\n\nexport interface LrnAttributes extends AttributeWithCacheKey {\n  alpha: number;\n  beta: number;\n  bias: number;\n  size: number;\n}\n\nexport const lrn: OperatorImplementation<LrnAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: LrnAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      // if (inferenceHandler.session.pack) {\n      //   return [inferenceHandler.run(createPackedLrnProgramInfoLoader(inferenceHandler, inputs, attributes),\n      //   inputs)];\n      // } else {\n      return [inferenceHandler.run(createLrnProgramInfoLoader(inputs, attributes), inputs)];\n      //}\n    };\n\nexport const parseLrnAttributes: OperatorInitialization<LrnAttributes> = (node: Graph.Node): LrnAttributes => {\n  const alpha = node.attributes.getFloat('alpha', 0.0001);\n  const beta = node.attributes.getFloat('beta', 0.75);\n  const bias = node.attributes.getFloat('bias', 1.0);\n  const size = node.attributes.getInt('size');\n\n  return createAttributeWithCacheKey({alpha, beta, bias, size});\n};\n\nconst lrnProgramMetadata = {\n  name: 'LRN',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked]\n};\n\nfunction createLrnProgramInfo(inputs: Tensor[], attributes: LrnAttributes): ProgramInfo {\n  const C = inputs[0].dims[1];\n  const rank = inputs[0].dims.length;\n  const from = -Math.floor((attributes.size - 1) / 2);\n  const to = Math.ceil((attributes.size - 1) / 2);\n  const alpha = `float(${attributes.alpha}) / float(${attributes.size})`;\n  const bias = `float(${attributes.bias})`;\n  const beta = `float(${attributes.beta})`;\n\n  const shaderSource = `\n    float process(int indices[${rank}]) {\n        int c = indices[1];\n        float x = _X(indices);\n        float square_sum = 0.0;\n\n        for (int i = ${from}; i <= ${to}; i++) {\n          int idx = c + i;\n          if (c >= 0 && c < ${C}) {\n            indices[1] = idx;\n            float j = _X(indices);\n            square_sum += j * j;\n          }\n        }\n        return x / pow(${bias} + ${alpha} * square_sum, ${beta});\n    }`;\n  return {\n    ...lrnProgramMetadata,\n    cacheHint: attributes.cacheKey,\n    output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\n    shaderSource,\n  };\n}\n\nexport function createLrnProgramInfoLoader(inputs: Tensor[], attributes: LrnAttributes): ProgramInfoLoader {\n  return {...lrnProgramMetadata, cacheHint: attributes.cacheKey, get: () => createLrnProgramInfo(inputs, attributes)};\n}\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('LRN requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('currently only support LRN for input with \"NCHW\" format');\n  }\n  if (inputs[0].type !== 'float32') {\n    throw new Error('input should be float type');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {getBiasForMatmul} from './matmul';\n\nconst createPackedMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul (packed)',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.packed, TextureType.packed, TextureType.packed] :\n                        [TextureType.packed, TextureType.packed],\n  cacheHint\n});\n\nconst createPackedMatmulProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n      const aShape = inputs[0].dims;\n      const bShape = inputs[1].dims;\n      const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n\n      if (!outputShape) {\n        throw new Error('Can\\'t use matmul on the given tensors');\n      }\n      const sharedDim = aShape[aShape.length - 1];\n      const sharedDimIndex = Math.ceil(sharedDim / 2);\n      const aRank = aShape.length;\n      const bRank = bShape.length;\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const coordsDataType = getCoordsDataType(outputShape.length);\n      const outRank = outputShape.length;\n      const allGlChannels = getGlChannels();\n      const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\n\n      const getBiasForMatmulSnippet =\n          hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, true)}` : '';\n\n      const getBcastedSamplerForMatmulSnippet =\n          isBroadcast ? `${getBcastSamplerForMatmul(coordsDataType, allGlChannels, inputs, outputShape)}` : '';\n\n      const getSamplerAInLoopSnippet = isBroadcast ? 'getAAtOutCoordsMatmul(i)' : `getA(${getA(allGlChannels, aRank)})`;\n      const getSamplerBInLoopSnippet = isBroadcast ? 'getBAtOutCoordsMatmul(i)' : `getB(${getB(allGlChannels, bRank)})`;\n      const getOutputCoordsSnippet = isBroadcast ? '' : `${coordsDataType} rc =\n          getOutputCoords(); int lastDim = rc.${allGlChannels[outRank - 1]}; rc.${allGlChannels[outRank - 1]} =\n          rc.${allGlChannels[outRank - 2]}; rc.${allGlChannels[outRank - 2]} = lastDim;\n      `;\n      const shaderSource = `\n            ${getBcastedSamplerForMatmulSnippet}\n            ${getBiasForMatmulSnippet}\n            ${activationFunction}\n            void main() {\n              ${getOutputCoordsSnippet}\n\n              vec4 value = vec4(0);\n              for (int i = 0; i < ${sharedDimIndex}; i++) {\n                vec4 a = ${getSamplerAInLoopSnippet};\n                vec4 b = ${getSamplerBInLoopSnippet};\n\n                value += (a.rrbb * b.rgrg);\n                value += (a.ggaa * b.baba);\n              }\n              ${processBias}\n              ${applyActivation}\n              ${glsl.output} = value;\n            }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedMatmulProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createPackedMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedMatmulProgramInfo(inferenceHandler, metadata, inputs, activationAttributes)\n      };\n    };\n\nfunction getBcastSamplerForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inputs: Tensor[], outShape: readonly number[]): string {\n  let unpackedACoordsSnippet = [];\n  let unpackedBCoordsSnippet = [];\n\n  const inAShape = inputs[0].dims;\n  const inBShape = inputs[1].dims;\n\n  const inARank = inAShape.length;\n  const inBRank = inBShape.length;\n\n  const outRank = outShape.length;\n  const rankADiff = outRank - inARank;\n  const rankBDiff = outRank - inBRank;\n\n  unpackedACoordsSnippet = inAShape.map((s, i) => `coords.${allGlChannels[i + rankADiff]}`);\n  unpackedACoordsSnippet[inARank - 1] = 'i*2';\n  unpackedACoordsSnippet.join(', ');\n  unpackedBCoordsSnippet = inBShape.map((s, i) => `coords.${allGlChannels[i + rankBDiff]}`);\n  unpackedBCoordsSnippet[inBRank - 2] = 'i*2';\n  unpackedBCoordsSnippet.join(', ');\n\n  const broadcastADims = BroadcastUtil.getBroadcastDims(inAShape, outShape);\n  const broadcastBDims = BroadcastUtil.getBroadcastDims(inBShape, outShape);\n\n  const coordsASnippet = broadcastADims.map(d => `coords.${allGlChannels[d + rankADiff]} = 0;`).join('\\n');\n  const coordsBSnippet = broadcastBDims.map(d => `coords.${allGlChannels[d + rankBDiff]} = 0;`).join('\\n');\n  const swapDimSnippet = `int lastDim = coords.${allGlChannels[outRank - 1]};\n  coords.${allGlChannels[outRank - 1]} = coords.${allGlChannels[outRank - 2]};\n  coords.${allGlChannels[outRank - 2]} = lastDim;`;\n\n  const getBcastSamplerMatmulSource = `\nvec4 getAAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsASnippet}\n  vec4 outputValue = getA(${unpackedACoordsSnippet});\n  return outputValue;\n}\n\nvec4 getBAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsBSnippet}\n  vec4 outputValue = getB(${unpackedBCoordsSnippet});\n  return outputValue;\n}`;\n\n  return getBcastSamplerMatmulSource;\n}\n\nfunction getA(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += `rc.${allGlChannels[rank - 2]}, ` +\n      'i*2';\n  return res;\n}\n\nfunction getB(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += 'i*2, ' +\n      `rc.${allGlChannels[rank - 1]}`;\n  return res;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActivationSnippet, InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const matMul: OperatorImplementation<InternalActivationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: InternalActivationAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      if (inferenceHandler.session.pack) {\n        return [inferenceHandler.run(\n            createPackedMatmulProgramInfoLoader(inferenceHandler, inputs, attributes), inputs)];\n      } else {\n        return [inferenceHandler.run(createMatmulProgramInfoLoader(inputs, attributes), inputs)];\n      }\n    };\n\nexport const parseMatMulAttributes: OperatorInitialization<InternalActivationAttributes> =\n    (node: Graph.Node): InternalActivationAttributes => parseInternalActivationAttributes(node.attributes);\n\nconst createMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nfunction createMatmulProgramInfo(\n    metadata: ProgramMetadata, inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfo {\n  const aShape = inputs[0].dims;\n  const bShape = inputs[1].dims;\n  const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n  if (!outputShape) {\n    throw new Error('Can\\'t use matmul on the given tensors');\n  }\n  const coordsDataType = getCoordsDataType(outputShape.length);\n  const allGlChannels = getGlChannels();\n  const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\n\n  const hasBias = inputs.length > 2;\n  const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n  const getBiasForMatmulSnippet =\n      hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, false)}` : '';\n\n  const rank = outputShape.length;\n  const arank = aShape.length;\n  const brank = bShape.length;\n  const sharedDim = aShape[aShape.length - 1];\n  const shaderSource = `\n    ${activationFunction}\n    ${getBiasForMatmulSnippet}\n    float process(int indices[${rank}]) {\n        int a[${arank}];\n        int b[${brank}];\n        bcastMatmulIndices_A(indices, a);\n        bcastMatmulIndices_B(indices, b);\n\n        float value;\n        for (int k=0; k<${sharedDim}; ++k) {\n            a[${arank - 1}] = k;\n            b[${brank - 2}] = k;\n            value += _A(a) * _B(b);\n        }\n        ${processBias}\n        ${applyActivation}\n        return value;\n    }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n    shaderSource,\n  };\n}\n\nexport function createMatmulProgramInfoLoader(\n    inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfoLoader {\n  const metadata = createMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n  return {...metadata, get: () => createMatmulProgramInfo(metadata, inputs, activationAttributes)};\n}\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('MatMul requires 2 inputs.');\n  }\n\n  if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\n    throw new Error('shared dimension does not match.');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64')) {\n    throw new Error('inputs should be float type');\n  }\n\n  if (inputs[0].type !== inputs[1].type) {\n    throw new Error('inputs types should match');\n  }\n};\n\nexport function getBiasForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inShape: readonly number[], outShape: readonly number[],\n    isPacked: boolean): string {\n  let unpackedCoordsSnippet = '';\n  const inRank = inShape.length;\n  const outRank = outShape.length;\n  const rankDiff = outRank - inRank;\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inShape.map((s, i) => `coords.${allGlChannels[i + rankDiff]}`).join(', ');\n  }\n  const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n  const coordsSnippet = broadcastDims.map(d => `coords.${allGlChannels[d + rankDiff]} = 0;`).join('\\n');\n  const inSize = ShapeUtil.size(inShape);\n  const isInputScalar = inSize === 1;\n  let output = 'vec4(outputValue.xx, outputValue.yy)';\n  if (isInputScalar) {\n    output = 'vec4(outputValue.x)';\n  }\n  const getBiasForMatmulSource = isPacked ? `\nvec4 getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  vec4 outputValue = getBias(${unpackedCoordsSnippet});\n  return ${output};\n}` :\n                                            `\nfloat getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  return getBias(coords.x);\n}`;\n\n  return getBiasForMatmulSource;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels} from './packing-utils';\n\nconst packProgramMetadata = {\n  name: 'pack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpackedReversed]\n};\n\nconst createPackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const inputShape = input.dims;\n\n  const inputRank = inputShape.length;\n  // createTextureLayoutFromShape won't change output rank. Need to verify by running tests\n  const outputRank = input.dims.length;\n\n  const coordsDataType = getCoordsDataType(outputRank);\n  const channels = getChannels('rc', outputRank);\n  const setup = getSetup(outputRank, channels, inputShape[inputShape.length - 2], inputShape[inputShape.length - 1]);\n\n  let reversedInputWH;\n  if (inputRank === 0) {\n    reversedInputWH = [1, 1];\n  } else if (inputRank === 1) {\n    reversedInputWH = [inputShape[0], 1];\n  } else {\n    reversedInputWH = [inputShape[outputRank - 1], inputShape[outputRank - 2]];\n  }\n  const outOfBoundsCondition = getOutOfBoundsCondition(outputRank, reversedInputWH, channels);\n  const output = getOutput(inputShape, channels);\n\n  const shaderSource = `\n        void main() {\n          ${coordsDataType} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            ${glsl.output} = vec4(0);\n          } else {\n            ${setup}\n\n            ${glsl.output} = vec4(${output});\n          }\n        }\n      `;\n  return {\n    ...packProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.packed},\n    shaderSource\n  };\n};\n\nexport const createPackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...packProgramMetadata, get: () => createPackProgramInfo(handler, input)});\n\n/**\n * check output coordinate location and return false if it is outside input's width/height boundary\n */\nfunction getOutOfBoundsCondition(rank: number, shape: readonly number[], dims: string[]): string {\n  if (rank === 0) {\n    return 'false';\n  }\n  if (rank === 1) {\n    return `rc > ${shape[0]}`;\n  }\n\n  let cond = '';\n  for (let i = rank - 2; i < rank; i++) {\n    cond += `${dims[i]} >= ${shape[i - rank + 2]}`;\n    if (i < rank - 1) {\n      cond += '||';\n    }\n  }\n\n  return cond;\n}\n\n/**\n * code snippet to sample input texture with output coordiantes\n */\nfunction getOutput(shape: readonly number[], dims: string[]): string {\n  const rank = shape.length;\n\n  if (rank === 0) {\n    return 'getA(), 0, 0, 0';\n  }\n\n  if (rank === 1) {\n    return `getA(rc),\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\n            0, 0`;\n  }\n\n  const coord00 = 'r, c';\n  const coord01 = 'r, cp1';\n  const coord10 = 'rp1, c';\n  const coord11 = 'rp1, cp1';\n  let D = '';\n  if (rank > 2) {\n    for (let i = 0; i < rank - 2; ++i) {\n      D = D + `${dims[i]},`;\n    }\n  }\n  return `getA(${D}${coord00}),\n          rEdge ? 0. : getA(${D}${coord10}),\n          cEdge ? 0. : getA(${D}${coord01}),\n          rEdge || cEdge ? 0. : getA(${D}${coord11})`;\n}\n\n/**\n * code snippet to setup 4 coordinates and edge conditions\n */\nfunction getSetup(rank: number, dims: string[], rows: number, cols: number): string {\n  if (rank === 0 || rank === 1) {\n    return '';\n  }\n  // rank >= 2 for width+height pack.\n  else {\n    const setup = `\n    int r = ${dims[rank - 2]};\n    int c = ${dims[rank - 1]};\n    int rp1 = ${dims[rank - 2]} + 1;\n    int cp1 = ${dims[rank - 1]} + 1;\n    bool rEdge = rp1 >= ${cols};\n    bool cEdge = cp1 >= ${rows};\n    `;\n    return setup;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlChannels} from '../utils';\n\nexport function getVecChannels(name: string, rank: number): string[] {\n  return getGlChannels(rank).map(d => `${name}.${d}`);\n}\n\nexport function getChannels(name: string, rank: number): string[] {\n  if (rank === 1) {\n    return [name];\n  }\n  return getVecChannels(name, rank);\n}\n\nexport function unpackFromChannel(): string {\n  return `\n    float getChannel(vec4 frag, int dim) {\n      int modCoord = imod(dim, 2);\n      return modCoord == 0 ? frag.r : frag.g;\n    }\n\n    float getChannel(vec4 frag, vec2 innerDims) {\n      vec2 modCoord = mod(innerDims, 2.);\n      return modCoord.x == 0. ?\n        (modCoord.y == 0. ? frag.r : frag.g) :\n        (modCoord.y == 0. ? frag.b : frag.a);\n    }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl, Glsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface PadAttributes extends AttributeWithCacheKey {\n  readonly mode: string;\n  readonly pads: number[];\n  readonly value: number;\n}\n\nconst padProgramMetadata = {\n  name: 'Pad',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const padV2: OperatorImplementation<PadAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: PadAttributes): Tensor[] => {\n      validateInputsV2(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...padProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPadProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parsePadAttributesV2: OperatorInitialization<PadAttributes> = (node: Graph.Node): PadAttributes => {\n  const mode = node.attributes.getString('mode', 'constant');\n  const value = node.attributes.getFloat('value', 0.0);\n  const pads = node.attributes.getInts('pads');\n  return createAttributeWithCacheKey({mode, value, pads});\n};\n\nexport const padV11: OperatorImplementation<string> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): Tensor[] => {\n      validateInputsV11(inputs);\n      const attrubutes = generatePadAttributesFromInputs(inferenceHandler, inputs, mode);\n      return padV2(inferenceHandler, [inputs[0]], attrubutes);\n    };\n\nexport const parsePadAttributesV11: OperatorInitialization<string> = (node: Graph.Node): string =>\n    node.attributes.getString('mode', 'constant');\n\nconst generatePadAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): PadAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          (inputs.length >= 3 && !inferenceHandler.session.isInitializer(inputs[2].dataId))) {\n        throw new Error('dynamic pad attributes are not allowed');\n      }\n\n      const pads = Array.from(inputs[1].integerData);\n      const value = (inputs.length >= 3) ? inputs[2].floatData[0] : 0.0;\n\n      return createAttributeWithCacheKey({mode, pads, value});\n    };\n\nconst createPadProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): ProgramInfo => {\n      const outputShape = ShapeUtil.padShape(input.dims.slice(), attributes.pads);\n      const rank = outputShape.length;\n      const padFunction = getPadFunction(inferenceHandler, input, attributes);\n      const shaderSource = `\n      ${padFunction}\n      float process(int[${rank}] indices) {\n          return padA(indices);\n      }`;\n      return {\n        name: 'Pad',\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputsV2 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pad requires 1 input');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst validateInputsV11 = (inputs: Tensor[]): void => {\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Pad requires 2 or 3 inputs');\n  }\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 3 && inputs[2].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst getPadFunction = (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): string => {\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  const [width, height] = inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n  const strides = ShapeUtil.computeStrides(input.dims);\n\n  switch (attributes.mode) {\n    case 'constant':\n      return getPadConstant(glsl, input.dims, strides, width, height, attributes.pads, attributes.value);\n    case 'reflect':\n      return getPadReflect(glsl, input.dims, strides, width, height, attributes.pads);\n    case 'edge':\n      return getPadEdge(glsl, input.dims, strides, width, height, attributes.pads);\n    default:\n      throw new Error('Invalid mode');\n  }\n};\n\nconst getPadConstant =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[],\n     value: number): string => {\n      const rank = shape.length;\n      let block = '';\n      for (let i = rank - 1; i >= 0; --i) {\n        block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  return constant;\n        if (k >= ${shape[i]}) return constant;\n        offset += k * ${strides[i]};\n        `;\n      }\n      return `\n      float padA(int m[${rank}]) {\n        const float constant = float(${value});\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n    };\n\nconst getPadReflect =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0) { k = -k; }\n        {\n          const int _2n_1 = ${2 * (shape[i] - 1)};\n          k = int( mod( float(k), float(_2n_1) ) ) ;\n          if(k >= ${shape[i]}) { k = _2n_1 - k; }\n        }\n        offset += k * ${strides[i]};\n        `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n\nconst getPadEdge =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  k = 0;\n        if (k >= ${shape[i]}) k = ${shape[i] - 1};\n        offset += k * ${strides[i]};\n      `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface AveragePoolAttributes extends AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly ceilMode: number;\n  readonly countIncludePad: boolean;\n  readonly kernelShape: readonly number[];\n  readonly strides: readonly number[];\n  readonly pads: readonly number[];\n}\n\nexport const averagePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'AveragePool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n\n      // TODO: support attribute 'ceil_mode'\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\n      }\n\n      return createAttributeWithCacheKey({autoPad, ceilMode, countIncludePad, kernelShape, strides, pads});\n    };\n\nconst createAveragePoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: AveragePoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const kernelSize = ShapeUtil.size(adjustedAttributes.kernelShape);\n          const op1 = 'value += _X(x);';\n          let op2 = '';\n          if (adjustedAttributes.countIncludePad) {\n            op2 += `value /= float(${kernelSize});`;\n          } else {\n            op2 += `value /= float(${kernelSize} - pad);`;\n          }\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '0.0');\n          const shaderSource = `\n        ${poolingCode}\n      `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nexport const globalAveragePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata = {\n        name: 'GlobalAveragePool',\n        inputNames: ['X'],\n        inputTypes: [TextureType.unpacked],\n        cacheHint: `${attributes.countIncludePad}`\n      };\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, true, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseGlobalAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      return createAttributeWithCacheKey(\n          {autoPad: '', ceilMode: 0, countIncludePad, kernelShape: [], strides: [], pads: []});\n    };\n\nexport interface MaxPoolAttributes extends AveragePoolAttributes {\n  readonly storageOrder: number;\n  readonly dilations: number[];\n}\n\nexport const maxPool: OperatorImplementation<MaxPoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: MaxPoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'MaxPool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createMaxPoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseMaxPoolAttributes: OperatorInitialization<MaxPoolAttributes> =\n    (node: Graph.Node): MaxPoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n      const storageOrder = node.attributes.getInt('storage_order', 0);\n      const dilations = node.attributes.getInts('dilations', []);\n\n      // TODO: support attribute 'ceil_mode' and 'storage_order'\n      if (storageOrder !== 0) {\n        throw new Error('column major storage order is not yet supported for MaxPool');\n      }\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\n      }\n\n      return createAttributeWithCacheKey(\n          {autoPad, ceilMode, countIncludePad: false, kernelShape, strides, pads, storageOrder, dilations});\n    };\n\nconst createMaxPoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: MaxPoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const op1 = `\n      value = max(_X(x), value);\n    `;\n          const op2 = '';\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '-1e5');\n          const shaderSource = `\n      ${poolingCode}\n    `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst getAdjustedPoolAttributesAndOutputShape =\n    (inputs: Tensor[], attributes: AveragePoolAttributes|MaxPoolAttributes, isGlobalOperator: boolean):\n        [AveragePoolAttributes|MaxPoolAttributes, number[]] => {\n          const inputShape = inputs[0].dims.slice();\n          const hasDilations = Object.hasOwnProperty.call(attributes, 'dilations');\n          const kernelShape = attributes.kernelShape.slice();\n          const strides = attributes.strides.slice();\n          const dilations: number[] = hasDilations ? (attributes as MaxPoolAttributes).dilations.slice() : [];\n          const pads = attributes.pads.slice();\n          PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, dilations, pads);\n\n          const outputShape = PoolConvUtil.computePoolOutputShape(\n              isGlobalOperator, inputShape, strides, dilations, kernelShape, pads, attributes.autoPad);\n\n          const newAttributes = Object.assign({}, attributes);\n          if (hasDilations) {\n            Object.assign(newAttributes, {kernelShape, strides, pads, dilations, cacheKey: attributes.cacheKey});\n          } else {\n            Object.assign(newAttributes, {kernelShape, strides, pads, cacheKey: attributes.cacheKey});\n          }\n          return [newAttributes, outputShape];\n        };\n\nconst globalMaxPoolAttributes = {\n  autoPad: '',\n  ceilMode: 0,\n  countIncludePad: false,\n  kernelShape: [],\n  strides: [],\n  pads: [],\n  storageOrder: 0,\n  dilations: [],\n  cacheKey: ''\n};\n\nconst globalMaxPoolMetadata = {\n  name: 'GlobalMaxPool',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const globalMaxPool = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  const output = inferenceHandler.run(\n      {\n        ...globalMaxPoolMetadata,\n        get: () => createMaxPoolProgramInfo(inputs, globalMaxPoolMetadata, true, globalMaxPoolAttributes)\n      },\n      inputs);\n  return [output];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pool ops requires 1 input.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst generatePoolingCode =\n    (inputDims: readonly number[], attributes: AveragePoolAttributes, op1: string, op2: string, start: string):\n        string => {\n          const rank = inputDims.length;\n          if (attributes.kernelShape.length <= 2) {\n            const kw = attributes.kernelShape[attributes.kernelShape.length - 1];\n            const sw = attributes.strides[attributes.strides.length - 1];\n            const pwStart = attributes.pads[attributes.pads.length / 2 - 1];\n            const pwEnd = attributes.pads[attributes.pads.length - 1];\n            const dimW = inputDims[rank - 1];\n            let codeW = '';\n            let codeH = '';\n            let codeHEnd = '';\n            if (pwStart + pwEnd !== 0) {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            if (x[${rank} - 1] < 0 || x[${rank} - 1] >= ${dimW}) {\n              pad++;\n              continue;\n            }\n            ${op1}\n          }`;\n            } else {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            ${op1}\n          }`;\n            }\n\n            if (attributes.kernelShape.length === 2) {\n              const kh = attributes.kernelShape[attributes.kernelShape.length - 2];\n              const sh = attributes.strides[attributes.strides.length - 2];\n              const phStart = attributes.pads[attributes.pads.length / 2 - 2];\n              const phEnd = attributes.pads[attributes.pads.length - 2];\n              const dimH = inputDims[rank - 2];\n              if (phStart + phEnd !== 0) {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n              if (x[${rank} - 2] < 0 || x[${rank} - 2] >= ${dimH}) {\n                pad+= ${kw};\n                continue;\n              }\n          `;\n              } else {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n            `;\n              }\n              codeHEnd = `\n          }\n        `;\n            }\n\n            const poolingCode = `\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n\n          float value = ${start};\n          int pad = 0;\n          ${codeH}\n          ${codeW}\n          ${codeHEnd}\n          ${op2}\n          return value;\n        }\n      `;\n            return poolingCode;\n          } else {\n            const kernelSize = ShapeUtil.size(attributes.kernelShape);\n            const kernelStrides = ShapeUtil.computeStrides(attributes.kernelShape);\n            const stridesRank = kernelStrides.length;\n            const padsRank = attributes.pads.length;\n            const offsetToIndicesFunction = offsetToIndices(stridesRank);\n            const copyInputDims = copyArray(inputDims, 'inputDims');\n            const copyPads = copyArray(attributes.pads, 'pads');\n            const copyKernelStrides = copyArray(kernelStrides, 'kernelStrides');\n            const copyStrides = copyArray(attributes.strides, 'strides');\n            const hasPads = attributes.pads.reduce((sum, cur) => sum + cur);\n            let padCode = '';\n            if (hasPads) {\n              padCode = `\n            if (x[j] >= inputDims[j] || x[j] < 0) {\n              pad++;\n              isPad = true;\n              break;\n            }\n          }\n          if (!isPad) {\n            ${op1}\n          }`;\n            } else {\n              padCode = `\n          }\n          ${op1}\n        `;\n            }\n            const poolingCode = `\n        ${offsetToIndicesFunction}\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n          int offset[${stridesRank}];\n          int pads[${padsRank}];\n          int inputDims[${rank}];\n          int kernelStrides[${stridesRank}];\n          int strides[${stridesRank}];\n          ${copyPads}\n          ${copyInputDims}\n          ${copyStrides}\n          ${copyKernelStrides}\n\n          float value = ${start};\n          int pad = 0;\n          bool isPad = false;\n          for (int i = 0; i < ${kernelSize}; i++) {\n            offsetToIndices(i, kernelStrides, offset);\n            isPad = false;\n            for (int j = ${rank} - ${stridesRank}; j < ${rank}; j++) {\n              x[j] = indices[j] * strides[j - ${rank} + ${stridesRank}]\n                + offset[j - ${rank} + ${stridesRank}] - pads[j - 2];\n              ${padCode}\n          }\n          ${op2}\n\n          return value;\n        }\n      `;\n            return poolingCode;\n          }\n        };\n\nconst copyArray = (array: readonly number[], arrayName: string): string => {\n  let block = '';\n  for (let i = 0; i < array.length; i++) {\n    block += `\n      ${arrayName}[${i}] = ${array[i]};\n    `;\n  }\n  return block;\n};\n\nconst offsetToIndices = (rank: number): string => `\n  void offsetToIndices(int offset, int[${rank}] strides, out int[${rank}] indices) {\n    if (${rank} == 0) {\n      return;\n    }\n    for (int i = 0; i < ${rank} - 1; ++i) {\n      indices[i] = offset / strides[i];\n      offset -= indices[i] * strides[i];\n    }\n    indices[${rank} - 1] = offset;\n  }`;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface ReduceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly keepDims: boolean;\n}\n\n// return [init ops, reduce ops, final ops]\ntype ReduceOp = (inputs: Tensor[], axes: number[]) => string[];\n\nconst reduce =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string,\n     reduceOp: ReduceOp): Tensor[] => {\n      validateInputs(inputs);\n\n      const reduceProgramMetadata = {\n        name,\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n      };\n\n      const output = inferenceHandler.run(\n          {\n            ...reduceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () =>\n                createReduceProgramInfo(inferenceHandler, inputs, attributes, name, reduceOp, reduceProgramMetadata)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseReduceAttributes: OperatorInitialization<ReduceAttributes> = (node: Graph.Node): ReduceAttributes => {\n  const axes = node.attributes.getInts('axes', []);\n  const keepDims = node.attributes.getInt('keepdims', 1) === 1;\n  return createAttributeWithCacheKey({axes, keepDims});\n};\n\nconst createReduceProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string, reduceOp: ReduceOp,\n     reduceProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const outputShape: number[] = [];\n      const iRank = inputs[0].dims.length || 1;\n\n      const idxCopy = [];  // copy output indexes to input indexes\n\n      const axes = ShapeUtil.normalizeAxes(attributes.axes, inputs[0].dims.length);\n      const ops = reduceOp(inputs, axes);\n      let reduceOps = ops[1];\n\n      for (let k = 0; k < inputs[0].dims.length; k++) {\n        // if this axis is reduced\n        if (axes.indexOf(k) >= 0 || axes.length === 0) {\n          if (attributes.keepDims) {\n            outputShape.push(1);\n          }  // else { remove the axis from outputShape; }\n\n          // loop over the d-th axis\n          reduceOps = `\n          for(int j${k} = 0; j${k} < ${inputs[0].dims[k]}; j${k}++) {\n            inputIdx[${k}] = j${k};\n            ${reduceOps}\n          }`;\n        } else {\n          idxCopy.push(`inputIdx[${k}] = outputIdx[${outputShape.length}];`);\n\n          outputShape.push(inputs[0].dims[k]);\n        }\n      }\n\n      const oRank = outputShape.length || 1;\n\n      const shaderSource = `\n      float process(int outputIdx[${oRank}]) {\n        float value;                 // final result\n        int inputIdx[${iRank}];      // addressing input data\n        ${idxCopy.join('\\n')}\n        ${ops[0]}       // init ops for reduce max/min\n        ${reduceOps}\n        ${ops[2]}       // final computation for reduce mean\n        return value;\n      }`;\n\n      return {\n        ...reduceProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  // TODO: support Reduce* operators with 2 inputs.\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Reduce op requires 1 input.');\n  }\n\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const reduceSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceSum', reduceOp);\n    };\n\nexport const reduceMean: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        let size = 1.0;\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            size *= inputs[0].dims[k];\n          }\n        }\n\n        return ['value = 0.0;', 'value += _A(inputIdx);', `value /= ${size}.;`];  // ensure real number with `.`\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMean', reduceOp);\n    };\n\nexport const reduceMax: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = max(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMax', reduceOp);\n    };\n\nexport const reduceMin: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = min(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMin', reduceOp);\n    };\n\nexport const reduceProd: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 1.0;', 'value *= _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceProd', reduceOp);\n    };\n\nexport const reduceLogSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', 'value = log(value);'];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSum', reduceOp);\n    };\n\nexport const reduceLogSumSquare: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['float t; value = 0.0;', 't = _A(inputIdx); value += t * t;', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSumSquare', reduceOp);\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedReshape3DProgramMetadata = (outputShape3D: readonly number[]) =>\n    ({name: 'Reshape (packed)', inputTypes: [TextureType.packed], inputNames: ['A'], cacheHint: `${outputShape3D}`});\n\nconst createPackedReshape3DProgramInfo =\n    (handler: WebGLInferenceHandler, input3D: Tensor, metadata: ProgramMetadata, outputShape3D: readonly number[]):\n        ProgramInfo => {\n          const inputShape3D = input3D.dims as [number, number, number];\n          const squeezedOutputShape = outputShape3D as [number, number, number];\n\n          let mainLoop = '';\n          for (let i = 0; i < 4; i++) {\n            let outputCoords = '';\n            switch (i) {\n              case 0:\n                outputCoords = 'outputCoords = rc;';\n                break;\n              case 1:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z);';\n                break;\n              case 2:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y, rc.z+1);';\n                break;\n              case 3:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z+1);';\n                break;\n              default:\n                throw new Error();\n            }\n\n            mainLoop += `\n        ${outputCoords}\n        ${i > 0 ? 'if(outputCoords.y < rows && outputCoords.z < cols){' : ''}\n          int flattenedIndex = getFlattenedIndex(outputCoords);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flattenedIndex);\n          vec2 innerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] = getChannel(getA(inputRC.x, inputRC.y, inputRC.z), innerDims);\n\n        ${i > 0 ? '}' : ''}\n      `;\n          }\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n\n          const shaderSource = `\n      ${getReshapedInputCoords(inputShape3D)}\n      ${getFlattenedIndexFrom3D(squeezedOutputShape)}\n      ${unpackFromChannel()}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.0);\n\n        ivec3 outputCoords;\n        int rows = ${squeezedOutputShape[2]};\n        int cols = ${squeezedOutputShape[1]};\n\n        ${mainLoop}\n        ${glsl.output} = result;\n      }\n    `;\n\n          return {\n            ...metadata,\n            output: {dims: squeezedOutputShape, type: input3D.type, textureType: TextureType.packed},\n            shaderSource,\n            hasMain: true\n          };\n        };\n\nexport const createPackedReshape3DProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input3D: Tensor, outputShape3D: readonly number[]): ProgramInfoLoader => {\n      const metadata = createPackedReshape3DProgramMetadata(outputShape3D);\n      return {...metadata, get: () => createPackedReshape3DProgramInfo(handler, input3D, metadata, outputShape3D)};\n    };\n\nexport function processDims3D(shape: ArrayLike<number>): [number, number, number] {\n  if (shape.length === 0) {\n    return [1, 1, 1];\n  }\n  // TODO: squeeze other shapes to 2D case\n  let batch = 1;\n  for (let i = 0; i < shape.length - 2; ++i) {\n    batch *= shape[i];\n  }\n  return [batch, shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\n\n// For packed reshape, we need to re-arrange texel data for output shape.\n// Our pack is designed to pack a 2x2 tile in last h and w dimension, so\n// for the reshaped new tensor, we just need to re-arrange the last h and\n// w dimension. For any shape that is not in 3D, i.e. [batch, W, H], we\n// first convert it to 3D by collapsing other dimension to batch dim, then\n// process with the last two dimensions.\n// Note: we only need the shape tensor to calculate output shape, so the\n// content in shape tensor is never uploaded to GPU. It is always kept in CPU.\n// TODO: optimize the algorithm -- in some cases, if the last two dims are\n// the same between input shape and output shape, the packed reshape can be\n// treated as no-op.\nexport function isReshapeCheap(dims: readonly number[], reshapedDims: readonly number[]) {\n  let isCheapReshape = false;\n  if (dims.length === 0 || reshapedDims.length === 0) {  // scalar\n    isCheapReshape = true;\n  } else if (dims.length < 2 || reshapedDims.length < 2) {  // 1D\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1];\n  } else {  // 2D +\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1] &&\n        dims[dims.length - 2] === reshapedDims[reshapedDims.length - 2];\n  }\n\n  return isCheapReshape;\n}\n\nfunction getReshapedInputCoords(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n  const coords = ['b', 'r', 'c'];\n  const index = 'index';\n  const coordsFromIndexSnippet = strides\n                                     .map((stride, i) => {\n                                       const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n                                       const line2 = i === strides.length - 1 ?\n                                           `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n                                           `index -= ${coords[i]} * ${stride}`;\n                                       return `${line1}; ${line2};`;\n                                     })\n                                     .join('');\n\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getFlattenedIndexFrom3D(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n\n  return `\n  int getFlattenedIndex(ivec3 coords) {\n    // reverse y, z order\n    return coords.x * ${strides[0]} + coords.z * ${strides[1]} + coords.y;\n  }\n`;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const reshape = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const reshapedDims = ShapeUtil.calculateReshapedDims(inputs[0].dims, inputs[1].integerData);\n  if (handler.session.pack) {\n    return [handler.reshapePacked(inputs[0], reshapedDims)];\n  } else {\n    return [handler.reshapeUnpacked(inputs[0], reshapedDims)];\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {unpackFromChannel} from './packing-utils';\nimport {parseUpsampleAttributes, scalesValidation, UpsampleAttributes, validateInputs} from './upsample';\n\nconst resizeProgramMetadata = {\n  name: 'Resize',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const resize: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...resizeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPackedResizeProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseResizeAttributesV10: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 10);\n\nexport const parseResizeAttributesV11: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 11);\n\nconst createPackedResizeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [scales, outputShape] = prepareInputs(inputs, attributes);\n\n      const isSame =\n          scales.every((s: number) => s === 1) && attributes.coordinateTransformMode !== 'tf_crop_and_resize';\n      if (isSame) {\n        return {\n          ...resizeProgramMetadata,\n          output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n          hasMain: true,\n          shaderSource: `void main() {\n                    vec4 v = ${glsl.texture2D}(X, TexCoords);\n                    ${glsl.output} = v;\n                }`\n        };\n      }\n\n      const dim = outputShape.length;\n      if (dim < 2) {\n        throw new Error(`output dimension should be at least 2, but got ${dim}`);\n      }\n\n      const outputHeight = outputShape[dim - 2];\n      const outputWidth = outputShape[dim - 1];\n\n      const inputShape = inputs[0].dims;\n      if (dim !== inputShape.length) {\n        throw new Error(`output dimension should match input ${inputShape.length}, but got ${dim}`);\n      }\n      const inputHeight = inputShape[dim - 2];\n      const inputWidth = inputShape[dim - 1];\n\n      const scalesHeight = scales[dim - 2];\n      const scalesWidth = scales[dim - 1];\n\n      let getSourceFracIndex = '';\n\n      if (attributes.mode !== 'linear') {\n        // TODO: support other modes\n        throw new Error(`resize (packed) does not support mode: '${attributes.mode}'`);\n      }\n      switch (attributes.coordinateTransformMode) {\n        case 'asymmetric':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return vec4(coords) / scaleWHWH;\n                    }\n                `;\n          break;\n        case 'half_pixel':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return (vec4(coords) + 0.5) / scaleWHWH - 0.5;\n                    }\n                `;\n          break;\n        case 'pytorch_half_pixel':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 fcoords = vec4(coords);\n                        return vec4(\n                            ${outputWidth}.0 > 1.0 ? (fcoords.x + 0.5) / scaleWHWH.x - 0.5 : 0.0,\n                            ${outputHeight}.0 > 1.0 ? (fcoords.y + 0.5) / scaleWHWH.y - 0.5 : 0.0,\n                            ${outputWidth}.0 > 1.0 ? (fcoords.z + 0.5) / scaleWHWH.z - 0.5 : 0.0,\n                            ${outputHeight}.0 > 1.0 ? (fcoords.w + 0.5) / scaleWHWH.w - 0.5 : 0.0\n                          );\n                    }\n                `;\n          break;\n        case 'align_corners':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 resized = vec4(${outputWidth}.0 - 1.0, ${outputHeight}.0 - 1.0, ${outputWidth}.0 - 1.0,\n                            ${outputHeight}.0 - 1.0);\n                        vec4 original = vec4(${inputWidth}.0 - 1.0, ${inputHeight}.0 - 1.0, ${inputWidth}.0 - 1.0,\n                            ${inputHeight}.0 - 1.0);\n                        vec4 new_scale = original / resized;\n                        return vec4(coords) * new_scale;\n                    }\n                `;\n          break;\n        default:\n          // TODO:supporting other coordinateTransformModes\n          throw new Error(`resize (packed) does not support coordinateTransformMode: \\\n                                '${attributes.coordinateTransformMode}'`);\n      }\n\n      const coordsDataType = getCoordsDataType(dim);\n      const unpackChannel = unpackFromChannel();\n      const shaderSource = `\n            const vec2 inputWH = vec2(${inputHeight}.0, ${inputWidth}.0);\n            const vec4 scaleWHWH = vec4(float(${scalesHeight}), float(${scalesWidth}), float(${scalesHeight}), float(${\n          scalesWidth}));\n            ${unpackChannel}\n            ${getSourceFracIndex}\n            float getAValue(int x10, int r, int c, int d) {\n                return getChannel(getA(x10, r, c, d), vec2(c, d));\n            }\n            void main() {\n                ${coordsDataType} rc = getOutputCoords();\n\n                int batch = rc[0];\n                int depth = rc[1];\n\n                // retrieve the 4 coordinates that is used in the 4 packed output values.\n                ivec4 coords = ivec4(rc.wz, rc.w + 1, rc.z + 1);\n\n                // calculate the source index in fraction\n                vec4 sourceFrac = getSourceFracIndex(coords);\n\n                // get the lower and upper bound of the 4 values that will be packed into one texel.\n                ivec4 x00 = ivec4(max(sourceFrac.xy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xy)));\n                ivec4 x01 = ivec4(max(sourceFrac.xw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xw)));\n                ivec4 x10 = ivec4(max(sourceFrac.zy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zy)));\n                ivec4 x11 = ivec4(max(sourceFrac.zw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zw)));\n\n                bool hasNextRow = rc.w < ${outputHeight - 1};\n                bool hasNextCol = rc.z < ${outputWidth - 1};\n\n                // pack x00, x01, x10, x11's top-left corner into one vec4 structure\n                vec4 topLeft = vec4(\n                    getAValue(batch, depth, x00.x, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's top-right corner into one vec4 structure\n                vec4 topRight = vec4(\n                    getAValue(batch, depth, x00.x, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.w) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-left corner into one vec4 structure\n                vec4 bottomLeft = vec4(\n                    getAValue(batch, depth, x00.z, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-right corner into one vec4 structure\n                vec4 bottomRight = vec4(\n                    getAValue(batch, depth, x00.z, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.w) : 0.0);\n\n                // calculate the interpolation fraction on u and v direction\n                vec4 frac = vec4(sourceFrac) - floor(sourceFrac);\n                vec4 clampFrac = clamp(frac, vec4(0.0), vec4(1.0));\n\n                vec4 top = mix(topLeft, topRight, clampFrac.ywyw);\n                vec4 bottom = mix(bottomLeft, bottomRight, clampFrac.ywyw);\n                vec4 newValue = mix(top, bottom, clampFrac.xxzz);\n\n                ${glsl.output} = vec4(newValue);\n            }\n        `;\n      return {\n        ...resizeProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\n\nconst prepareInputs = (inputs: Tensor[], attributes: UpsampleAttributes): [readonly number[], readonly number[]] => {\n  const x = inputs[0];\n  const xDims = x.dims;\n\n  let scales = attributes.scales;\n  let outputSizes: number[]|undefined;\n  if (scales.length === 0) {\n    const scalesTensor = inputs[attributes.scalesInputIdx];\n    if (scalesTensor && scalesTensor.size !== 0) {\n      if (inputs[attributes.sizesInputIdx]) {\n        throw new Error('Only one of scales or sizes must be provided as input.');\n      }\n      scales = parseScalesData(scalesTensor, attributes.mode, attributes.isResize);\n    } else {\n      const sizesTensor = inputs[attributes.sizesInputIdx];\n      if (!sizesTensor || sizesTensor.size === 0) {\n        throw new Error('Either scales or sizes MUST be provided as input.');\n      }\n\n      outputSizes = Array.from(sizesTensor.integerData);\n      scales = parseScalesDataFromOutputSize(outputSizes, xDims, attributes.mode, attributes.isResize);\n    }\n  } else {\n    if (inputs[attributes.sizesInputIdx]) {\n      throw new Error('Only one of scales or sizes must be provided as input.');\n    }\n  }\n\n  const yDims = outputSizes || (xDims.map((dim, i) => Math.floor(dim * scales[i])));\n\n  return [scales, yDims];\n};\n\nconst parseScalesData = (scale: Tensor, mode: string, isResize: boolean): number[] => {\n  const scales = Array.from(scale.floatData);\n  scalesValidation(scales, mode, isResize);\n  return scales;\n};\n\nconst parseScalesDataFromOutputSize =\n    (yDims: readonly number[], xDims: readonly number[], mode: string, isResize: boolean): number[] => {\n      const length = xDims.length;\n      const scales = new Array<number>(length);\n\n      for (let i = 0, end = length; i < end; i++) {\n        if (xDims[i] === 0) {\n          if (yDims[i] !== 0) {\n            throw new Error('Input dim is zero but required output dim is non-zero.');\n          }\n          scales[i] = 1;\n        } else {\n          scales[i] = yDims[i] / xDims[i];\n        }\n      }\n      scalesValidation(scales, mode, isResize);\n      return scales;\n    };\n\n// roi data is not used yet. but leave here for future usage.\n// const getRoi = (inputs: Tensor[], attributes: UpsampleAttributes) : number[] => {\n//     let roi: number[] = [];\n//     if (attributes.needRoiInput) {\n//         if (attributes.roiInputIdx <= 0) {\n//             throw new Error('Invalid roi input index.');\n//         }\n//         const roiTensor = inputs[attributes.roiInputIdx];\n//         roi = roiTensor.size > 0 ? Array.from(roiTensor.floatData) : [];\n//     } else {\n//         roi = new Array(inputs[0].dims.length * 2).fill(0);\n//     }\n//     return roi;\n// };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const shape = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  return [new Tensor([inputs[0].dims.length], 'int32', undefined, undefined, new Int32Array(inputs[0].dims))];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Shape requires 1 input.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SliceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly ends: number[];\n  readonly starts: number[];\n}\n\nconst sliceProgramMetadata = {\n  name: 'Slice',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const slice: OperatorImplementation<SliceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SliceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...sliceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseSliceAttributes: OperatorInitialization<SliceAttributes> = (node: Graph.Node): SliceAttributes => {\n  const starts = node.attributes.getInts('starts');\n  const ends = node.attributes.getInts('ends');\n  const axes = node.attributes.getInts('axes', []);\n  return createAttributeWithCacheKey({starts, ends, axes});\n};\n\nconst createSliceProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SliceAttributes): ProgramInfo => {\n      const axes = (attributes.axes.length === 0) ? input.dims.slice(0).map((val, i) => i) : attributes.axes;\n      const normalizedAxes = ShapeUtil.normalizeAxes(axes, input.dims.length);\n      const starts = attributes.starts.map((start, i) => {\n        if (start > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(start, input.dims[normalizedAxes[i]]);\n      });\n      const ends = attributes.ends.map((end, i) => {\n        if (end > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(end, input.dims[normalizedAxes[i]]);\n      });\n\n      const outputShape = input.dims.slice();\n\n      const sliceOps: string[] = [];\n      for (let i = 0; i < normalizedAxes.length; i++) {\n        outputShape[normalizedAxes[i]] = ends[i] - starts[i];\n        if (starts[i] > 0) {\n          sliceOps.push(`outputIdx[${normalizedAxes[i]}] += ${starts[i]};`);\n        }  // else { sliceOps.push(`outputIdx[${normalizedAxes[i]}] += 0;`); }\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        ${sliceOps.join('\\n      ')}\n        return _A(outputIdx);\n      }`;\n      return {\n        ...sliceProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Slice requires 1 input.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const sliceV10 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV10(inputs);\n  const attributes = generateSliceAttributesFromInputs(inferenceHandler, inputs);\n  const output = inferenceHandler.run(\n      {\n        ...sliceProgramMetadata,\n        cacheHint: attributes.cacheKey,\n        get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n      },\n      [inputs[0]]);\n  return [output];\n};\n\nconst generateSliceAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): SliceAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          !inferenceHandler.session.isInitializer(inputs[2].dataId) ||\n          (inputs.length >= 4 && !inferenceHandler.session.isInitializer(inputs[3].dataId)) ||\n          (inputs.length >= 5 && !inferenceHandler.session.isInitializer(inputs[4].dataId))) {\n        throw new Error('dynamic slice attributes are not allowed');\n      }\n\n      if (inputs.length >= 5 && inputs[4].integerData.some((i: number) => i !== 1)) {\n        throw new Error('currently non-1 steps is not supported for Slice');\n      }\n\n      const starts = Array.from(inputs[1].integerData);\n      const ends = Array.from(inputs[2].integerData);\n      const axes = inputs.length >= 4 ? Array.from(inputs[3].integerData) : [];\n      const cacheKey = `${axes};${starts};${ends}`;\n      return {starts, ends, axes, cacheKey};\n    };\n\nconst validateInputsV10 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 3 || inputs.length > 5) {\n    throw new Error('Invalid input number.');\n  }\n  if (inputs[1].type !== 'int32' || inputs[1].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[2].type !== 'int32' || inputs[2].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 4 && (inputs[3].type !== 'int32' || inputs[3].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 5 && (inputs[4].type !== 'int32' || inputs[4].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface SoftmaxAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nconst softmaxComputeMaxProgramMetadata = {\n  name: 'SoftmaxComputeMax',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst softmaxComputeScaleProgramMetadata = {\n  name: 'SoftmaxComputeScale',\n  inputNames: ['A', 'Max'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst softmaxProgramMetadata = {\n  name: 'SoftMax',\n  inputNames: ['A', 'Max', 'Norm'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked],\n};\n\nexport const softmax: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const logicalRowCount = ShapeUtil.sizeToDimension(inputShape, axis);\n      const featureCount = ShapeUtil.sizeFromDimension(inputShape, axis);\n\n      const output = computeSoftmax(inferenceHandler, inputs, attributes, logicalRowCount, featureCount);\n      return output;\n    };\n\nexport const parseSoftmaxAttributes: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 1)});\n\nexport const parseSoftmaxAttributesV13: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', -1)});\n\n// The \"semantic\" meaning of axis has changed in opset-13.\n// Please compare: https://github.com/onnx/onnx/blob/main/docs/Operators.md#Softmax\n// with https://github.com/onnx/onnx/blob/main/docs/Changelog.md#Softmax-11 for detailed explanations\n// To account for the opset-13 behavior, our plan will be to transpose the \"axis\" dim to the innermost dim\n// and perform softmax and then reverse the transpose. We can skip the transposing aspect if the axis is already\n// the innermost dim\nexport const softmaxV13: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const rank = inputShape.length;\n\n      const isTransposeRequired = (axis !== rank - 1) ? true : false;\n      const transposedInputShape: number[] = [];\n      let perm: number[] = [];\n      let transposedInputs: Tensor[] = [];\n      let transposeAttribute: TransposeAttributes;\n\n      if (isTransposeRequired) {\n        perm = Array.from({length: rank}).map((_, i) => i);\n\n        // swap the innermost dim with the dim corresponding to axis\n        perm[axis] = rank - 1;\n        perm[rank - 1] = axis;\n\n        perm.map(p => transposedInputShape.push(inputShape[p]));\n\n        transposeAttribute = createAttributeWithCacheKey({perm});\n        transposedInputs = transpose(inferenceHandler, inputs, transposeAttribute);\n      }\n\n      const logicalRowCount = isTransposeRequired ? ShapeUtil.sizeToDimension(transposedInputShape, rank - 1) :\n                                                    ShapeUtil.sizeToDimension(inputShape, rank - 1);\n      const featureCount = isTransposeRequired ? ShapeUtil.sizeFromDimension(transposedInputShape, rank - 1) :\n                                                 ShapeUtil.sizeFromDimension(inputShape, rank - 1);\n\n      const output = computeSoftmax(\n          inferenceHandler, isTransposeRequired ? transposedInputs : inputs, attributes, logicalRowCount, featureCount);\n\n      if (isTransposeRequired) {\n        const reversedOutput = transpose(inferenceHandler, output, transposeAttribute!);\n        return reversedOutput;\n      } else {\n        return output;\n      }\n    };\n\nconst computeSoftmax =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes, logicalRowCount: number,\n     featureCount: number): Tensor[] => {\n      const computeMaxProgramInfo =\n          createComputeMaxProgramInfo(inferenceHandler, inputs[0], logicalRowCount, featureCount, [logicalRowCount]);\n      const max = inferenceHandler.run(\n          {...softmaxComputeMaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeMaxProgramInfo},\n          inputs);\n\n      const computeScaleProgramInfo = createComputScaleProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          [logicalRowCount]);\n      const scale = inferenceHandler.run(\n          {...softmaxComputeScaleProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeScaleProgramInfo},\n          [inputs[0], max]);\n\n      const softMaxProgramInfo = createSoftMaxProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          computeScaleProgramInfo.output.dims);\n      const output = inferenceHandler.run(\n          {...softmaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => softMaxProgramInfo},\n          [inputs[0], max, scale]);\n      return [output];\n    };\n\n/**\n * Create a texture that contains the maximum value of each of the 'N' rows\n */\nconst createComputeMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float max = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset, ${textureWidth},\n        ${textureHeight} )));\n        for(int i=1; i<${featureCount}; ++i)\n        {\n          float current = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight})));\n          if(current > max)\n          max = current;\n        }\n\n        return max;\n      }`;\n      return {\n        ...softmaxComputeMaxProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\n/**\n * Create a texture that contains the normalization factor for each of the 'N' rows\n */\nconst createComputScaleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float norm_factor = 0.0;\n        float max = _Max(indices);\n        for(int i=0; i<${featureCount}; ++i)\n        {\n          norm_factor += exp(getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight}))) - max);\n        }\n\n        return norm_factor;\n      }`;\n      return {\n        ...softmaxComputeScaleProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createSoftMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], normalizationPerLogicalRow: readonly number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = input.dims.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1 || normalizationPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount || normalizationPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n\n      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)\n      int offset = coordsToOffset(TexCoords, ${textureWidth}, ${textureHeight});\n\n      //determine the logical row for this index\n      int logical_row_index[1];\n      logical_row_index[0] = offset / ${featureCount};\n\n      float norm_factor = _Norm(logical_row_index);\n\n      // avoid possible division by 0\n      // if norm_facor is 0, all elements are zero\n      // if so, return 0\n      if(norm_factor == 0.0)\n        return 0.0;\n\n      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;\n    }`;\n      return {\n        ...softmaxProgramMetadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Softmax requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil, SplitUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SplitAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n  readonly split: number[];\n  readonly numOutputs: number;\n}\n\nconst splitProgramMetadata = {\n  name: 'Split',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const split: OperatorImplementation<SplitAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SplitAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputs[0].dims.length);\n      const count = getProgramCount(inferenceHandler, inputs, axis, attributes);\n      const output: Tensor[] = [];\n      for (let i = 0; i < count; ++i) {\n        output.push(inferenceHandler.run(\n            {\n              ...splitProgramMetadata,\n              cacheHint: `${attributes.cacheKey};${i}`,\n              get: () => createSplitProgramInfo(inferenceHandler, inputs[0], attributes, axis, i)\n            },\n            inputs));\n      }\n\n      return output;\n    };\n\nexport const parseSplitAttributes: OperatorInitialization<SplitAttributes> = (node: Graph.Node): SplitAttributes => {\n  const axis = node.attributes.getInt('axis', 0);\n  const split = node.attributes.getInts('split', []);\n  const numOutputs = node.outputs.length;\n  return createAttributeWithCacheKey({axis, split, numOutputs});\n};\n\nconst getProgramCount =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number, attributes: SplitAttributes): number => {\n      const [, offsets] = SplitUtil.splitShape(inputs[0].dims, axis, attributes.split, attributes.numOutputs);\n      return offsets.length;\n    };\n\nconst createSplitProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SplitAttributes, axis: number, index: number):\n        ProgramInfo => {\n          const [shapes, offsets] = SplitUtil.splitShape(input.dims, axis, attributes.split, attributes.numOutputs);\n          const offset = offsets[index];\n          const outputShape = shapes[index];\n          const rank = outputShape.length;\n          const shaderSource = `\n      float process(int indices[${rank}]) {\n        indices[${axis}] += ${offset};\n        return _A(indices);\n      }\n    `;\n          return {\n            ...splitProgramMetadata,\n            cacheHint: `${attributes.cacheKey}:${index}`,\n            output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Split requires one input.');\n  }\n\n  if (inputs[0].type !== 'int8' && inputs[0].type !== 'uint8' && inputs[0].type !== 'int16' &&\n      inputs[0].type !== 'uint16' && inputs[0].type !== 'int32' && inputs[0].type !== 'uint32' &&\n      inputs[0].type !== 'float32' && inputs[0].type !== 'float64' && inputs[0].type !== 'bool') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const squeeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.squeezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const squeezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return squeeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseSqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Squeeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Squeeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const sum = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const sumProgramMetadata = {\n    name: 'Sum',\n    inputNames: inputs.map((v, i) => `X${i}`),\n    inputTypes: new Array(inputs.length).fill(TextureType.unpacked)\n  };\n\n  const output = inferenceHandler.run(\n      {...sumProgramMetadata, get: () => createSumProgramInfo(inferenceHandler, inputs, sumProgramMetadata)}, inputs);\n  return [output];\n};\n\nconst createSumProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], sumProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const outputShape = inputs[0].dims.slice();\n      const sumLine = inputs.map((v, i) => `${glsl.texture2D}(X${i},TexCoords)`).join(' + ');\n      const shaderSource = `\n      void main() {\n        vec4 result = ${sumLine};\n        ${glsl.output} = result;\n      }\n    `;\n      return {\n        ...sumProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length === 0) {\n    throw new Error('Sum requires inputs.');\n  }\n\n  const length = inputs[0].dims.length;\n  for (let i = 1; i < inputs.length; i++) {\n    if (length !== inputs[i].dims.length) {\n      throw new Error('Input shapes are mismatched.');\n    }\n\n    for (let j = 0; j < length; j++) {\n      if (inputs[0].dims[j] !== inputs[i].dims[j]) {\n        throw new Error('Input shapes are not matched.');\n      }\n    }\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n  for (let i = 1; i < inputs.length; i++) {\n    if (inputs[0].type !== inputs[i].type) {\n      throw new Error('Input types are not matched.');\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {NUMBER_TYPES} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const tile = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const tileProgramMetadata = {\n    name: 'Tile',\n    inputNames: ['A'],\n    inputTypes: [TextureType.unpacked],\n  };\n\n  const output = inferenceHandler.run(\n      {...tileProgramMetadata, get: () => createTileProgramInfo(inferenceHandler, inputs, tileProgramMetadata)},\n      inputs);\n  return [output];\n};\n\nconst createTileProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], tileProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const outputShape = new Array(inputShape.length);\n\n      const tileOps: string[] = [];\n      for (let i = 0; i < inputShape.length; i++) {\n        outputShape[i] = inputShape[i] * inputs[1].numberData[i];\n        tileOps.push(`inputIdx[${i}] = int(mod(float(outputIdx[${i}]), ${inputShape[i]}.));`);\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        int inputIdx[${rank}];\n        ${tileOps.join('\\n')}\n        return _A(inputIdx);\n      }\n    `;\n      return {\n        ...tileProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Tile requires 2 input.');\n  }\n  if (inputs[1].dims.length !== 1) {\n    throw new Error('The second input shape must 1 dimension.');\n  }\n  if (inputs[1].dims[0] !== inputs[0].dims.length) {\n    throw new Error('Invalid input shape.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invalid repeat type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface TransposeAttributes extends AttributeWithCacheKey {\n  readonly perm: number[];\n}\n\nconst transposeProgramMetadata = {\n  name: 'Transpose',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const transpose: OperatorImplementation<TransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: TransposeAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...transposeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createTransposeProgramInfo(inferenceHandler, inputs[0], attributes.perm)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseTransposeAttributes: OperatorInitialization<TransposeAttributes> =\n    (node: Graph.Node): TransposeAttributes => createAttributeWithCacheKey({perm: node.attributes.getInts('perm', [])});\n\nconst createTransposeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, perm: number[]): ProgramInfo => {\n      const inputShape = input.dims;\n      perm = getAdjustedPerm(inputShape, perm);\n      const unpackedOutputShape = getOutputShape(inputShape, perm);\n      const rank = inputShape.length;\n      // A dims=[${inputs[0].dims.toString()}]\n      // out Dims=[${unpackedOutputShape.toString()}]\n      // based on perm=[${perm.toString()}]\n      const shaderSource = `\n      ${getPermFunctionBody('perm', perm, rank)}\n      float process(int indices[${rank}]) {\n        int a[${rank}];\n        perm(a, indices);\n        return _A(a);\n      }`;\n      return {\n        ...transposeProgramMetadata,\n        output: {dims: unpackedOutputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst getAdjustedPerm = (inputShape: readonly number[], perm: number[]): number[] => {\n  if (perm && perm.length !== inputShape.length) {\n    perm = [...(inputShape.keys())].reverse();\n  }\n  return perm;\n};\n\nconst getOutputShape = (inputShape: readonly number[], perm: number[]): readonly number[] => {\n  perm = getAdjustedPerm(inputShape, perm);\n  return ShapeUtil.sortBasedOnPerm(inputShape, perm);\n};\n\nconst getPermFunctionBody = (name: string, perm: number[], rank: number): string => {\n  const reverseFunc = [];\n  reverseFunc.push(`void ${name}(out int a[${rank}], int src[${rank}]) {`);\n  for (let i = 0; i < rank; ++i) {\n    reverseFunc.push(`\\ta[${perm[i]}]=src[${i}];`);\n  }\n  reverseFunc.push('\\t}');\n  return reverseFunc.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Transpose requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('input should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {TextureData, TextureType} from '../types';\n\nexport const encodeAsUint8 = (inferenceHandler: WebGLInferenceHandler, input: TextureData): TextureData => {\n  const outputShape = input.shape;\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  /**\n   * https://github.com/tensorflow/tfjs-core/blob/master/src/kernels/webgl/encode_float_gpu.ts\n   */\n  const shaderSource = `\n    const float FLOAT_MAX = 1.70141184e38;\n    const float FLOAT_MIN = 1.17549435e-38;\n\n    bool isNaN(float val) {\n      return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;\n    }\n\n    highp vec4 encodeAsUint8(highp float v) {\n      if (isNaN(v)) {\n        return vec4(255, 255, 255, 255);\n      }\n\n      highp float av = abs(v);\n\n      if(av < FLOAT_MIN) {\n        return vec4(0.0, 0.0, 0.0, 0.0);\n      } else if(v > FLOAT_MAX) {\n        return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n      } else if(v < -FLOAT_MAX) {\n        return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n      }\n\n      highp vec4 c = vec4(0,0,0,0);\n\n      highp float e = floor(log2(av));\n      highp float m = exp2(fract(log2(av))) - 1.0;\n\n      c[2] = floor(128.0 * m);\n      m -= c[2] / 128.0;\n      c[1] = floor(32768.0 * m);\n      m -= c[1] / 32768.0;\n      c[0] = floor(8388608.0 * m);\n\n      highp float ebias = e + 127.0;\n      c[3] = floor(ebias / 2.0);\n      ebias -= c[3] * 2.0;\n      c[2] += floor(ebias) * 128.0;\n\n      c[3] += 128.0 * step(0.0, -v);\n\n      return c / 255.0;\n    }\n\n    void main() {\n      float value = ${glsl.texture2D}(X,TexCoords).r;\n      ${glsl.output} = encodeAsUint8(value);\n    }`;\n  const programInfo = {\n    name: 'Uint8Encode',\n    inputTypes: [TextureType.unpacked],\n    inputNames: ['X'],\n    output: {dims: outputShape, type: input.tensor.type, textureType: TextureType.downloadUint8AsFloat},\n    shaderSource,\n    hasMain: true\n  };\n  return inferenceHandler.executeProgram(programInfo, [input.tensor]);\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {Tensor} from '../../../tensor';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport function glslAbs(): GlslValueFunction {\n  return glslBuiltinUnary('abs');\n}\nexport function glslAcos(): GlslValueFunction {\n  return glslBuiltinUnary('acos');\n}\nexport function glslAsin(): GlslValueFunction {\n  return glslBuiltinUnary('asin');\n}\nexport function glslAtan(): GlslValueFunction {\n  return glslBuiltinUnary('atan');\n}\nexport function glslCeil(): GlslValueFunction {\n  return glslBuiltinUnary('ceil');\n}\nexport function glslCos(): GlslValueFunction {\n  return glslBuiltinUnary('cos');\n}\nexport function glslElu(alpha: number): GlslValueFunction {\n  const name = 'elu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a >= 0.0 ? a: (exp(a) - 1.0) * alpha;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslExp(): GlslValueFunction {\n  return glslBuiltinUnary('exp');\n}\nexport function glslFloor(): GlslValueFunction {\n  return glslBuiltinUnary('floor');\n}\nexport function glslClip(min: number, max: number): GlslValueFunction {\n  const name = 'clip';\n  const body = `\n  const float min = float(${min});\n  const float max = float(${max});\n\n  float ${name}_(float a) {\n    return clamp(a, min, max);\n  }\n  vec4 ${name}_(vec4 v) {\n    return clamp(v, min, max);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslIdentity(): GlslValueFunction {\n  const name = 'indentity';\n  const body = `\n  float ${name}_(float a) {\n    return a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLeakyRelu(alpha: number): GlslValueFunction {\n  const name = 'leakyRelu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a < 0.0 ? a * alpha : a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLog(): GlslValueFunction {\n  return glslBuiltinUnary('log');\n}\nexport function glslNeg(): GlslValueFunction {\n  const name = 'neg';\n  const body = `\n  float ${name}_(float a) {\n    return -a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return -v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslNot(): GlslValueFunction {\n  const name = 'not';\n  const body = `\n  float ${name}_(float a) {\n    return float( ! bool(a) );\n  }\n  bool ${name}_(bool a) {\n    return !a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));\n  }\n  bvec4 ${name}_(bvec4 v) {\n    return bvec4(!v.x, !v.y, !v.z, !v.w);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSin(): GlslValueFunction {\n  return glslBuiltinUnary('sin');\n}\nexport function glslRelu(): GlslValueFunction {\n  const name = 'relu';\n  const body = `\n  float ${name}_(float a) {\n    return max( a, 0.0 );\n  }\n  vec4 ${name}_(vec4 v) {\n    return max( v, 0.0 );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSigmoid(): GlslValueFunction {\n  const name = 'sigmoid';\n  const body = `\n  float ${name}_(float a) {\n    return 1.0 / (1.0 + exp(-a));\n  }\n  vec4 ${name}_(vec4 v) {\n    return 1.0 / (1.0 + exp(-v));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSqrt(): GlslValueFunction {\n  return glslBuiltinUnary('sqrt');\n}\nexport function glslTan(): GlslValueFunction {\n  return glslBuiltinUnary('tan');\n}\nexport function glslTanh(): GlslValueFunction {\n  const name = 'tanh';\n  const body = `\n  float ${name}_(float a) {\n    a = clamp(a, -10., 10.);\n    a = exp(2.*a);\n    return (a - 1.) / (a + 1.);\n  }\n  vec4 ${name}_(vec4 v) {\n    v = clamp(v, -10., 10.);\n    v = exp(2.*v);\n    return (v - 1.) / (v + 1.);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nfunction glslBuiltinUnary(name: string): GlslValueFunction {\n  const body = `\n  float ${name}_(float a) {\n    return ${name}(a);\n  }\n  vec4 ${name}_(vec4 v) {\n    return ${name}(v);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\n/////\n/////\n/////\n\nconst createElementwiseProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, glslFunc: GlslValueFunction):\n        ProgramInfo => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n          return {\n            ...metadata,\n            output: {dims: input.dims, type: input.type, textureType},\n            shaderSource: `\n     ${glslFunc.body}\n     void main() {\n       vec4 v = ${glsl.texture2D}(A, TexCoords);\n       v = ${glslFunc.name}_(v);\n       ${glsl.output} = v;\n     }\n     `,\n            hasMain: true\n          };\n        };\n\nconst createElementwiseProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input: Tensor, glslFunc: GlslValueFunction, cacheKey?: string):\n        ProgramInfoLoader => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const metadata = {name: glslFunc.name, inputTypes: [textureType], inputNames: ['A'], cacheHint: cacheKey};\n          return {...metadata, get: () => createElementwiseProgramInfo(handler, metadata, input, glslFunc)};\n        };\n\nexport const abs = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAbs()), inputs)];\n\nexport const acos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAcos()), inputs)];\n\nexport const asin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAsin()), inputs)];\n\nexport const atan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAtan()), inputs)];\n\nexport interface ClipAttributes extends AttributeWithCacheKey {\n  readonly min: number;\n  readonly max: number;\n}\n\nexport const clip =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ClipAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(\n            handler, inputs[0], glslClip(attributes.min, attributes.max), attributes.cacheKey),\n        inputs)];\n\nexport const parseClipAttributes = (node: Graph.Node): ClipAttributes => createAttributeWithCacheKey(\n    {min: node.attributes.getFloat('min', MIN_CLIP), max: node.attributes.getFloat('max', MAX_CLIP)});\n\nexport const clipV11 = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const attributes = generateClipAttributesFromInputs(handler, inputs);\n  return clip(handler, [inputs[0]], attributes);\n};\n\nconst generateClipAttributesFromInputs = (handler: WebGLInferenceHandler, inputs: Tensor[]): ClipAttributes => {\n  if (inputs.length >= 3 &&\n      (!handler.session.isInitializer(inputs[1].dataId) || !handler.session.isInitializer(inputs[2].dataId))) {\n    throw new Error('dynamic clip attributes are not allowed');\n  }\n\n  const min = (inputs.length >= 3) ? inputs[1].numberData[0] : MIN_CLIP;\n  const max = (inputs.length >= 3) ? inputs[2].numberData[0] : MAX_CLIP;\n  return createAttributeWithCacheKey({min, max});\n};\n\nexport const ceil = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCeil()), inputs)];\n\nexport const cos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCos()), inputs)];\n\nexport interface EluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const elu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: EluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslElu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseEluAttributes = (node: Graph.Node): EluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 1.0)});\n\nexport const exp = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslExp()), inputs)];\n\nexport const floor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslFloor()), inputs)];\n\nexport const identity = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslIdentity()), inputs)];\n\nexport interface LeakyReluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const leakyRelu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: LeakyReluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslLeakyRelu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseLeakyReluAttributes = (node: Graph.Node): LeakyReluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 0.01)});\n\nexport const log = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslLog()), inputs)];\n\nexport const neg = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNeg()), inputs)];\n\nexport const not = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNot()), inputs)];\n\nexport const relu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslRelu()), inputs)];\n\nexport const sigmoid = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSigmoid()), inputs)];\n\nexport const sin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSin()), inputs)];\n\nexport const sqrt = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSqrt()), inputs)];\n\nexport const tan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTan()), inputs)];\n\nexport const tanh = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTanh()), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst unpackProgramMetadata = {\n  name: 'unpack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const createUnpackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const rank = input.dims.length;\n\n  const channels = getChannels('rc', rank);\n  const innerDims = channels.slice(-2);\n  const coordsDataType = getCoordsDataType(rank);\n  const unpackChannel = unpackFromChannel();\n  const isScalar = (input.dims.length === 0);\n  const sourceCoords = isScalar ? '' : getSourceCoords(rank, channels);\n  const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const shaderSource = `\n    ${unpackChannel}\n    void main() {\n      ${coordsDataType} rc = getOutputCoords();\n\n       // Sample the texture with the coords to get the rgba channel value.\n       vec4 packedInput = getA(${sourceCoords});\n\n       ${glsl.output} = vec4(getChannel(packedInput, ${coords}), 0, 0, 0);\n     }\n   `;\n\n  return {\n    ...unpackProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n    shaderSource\n  };\n};\n\nexport const createUnpackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...unpackProgramMetadata, get: () => createUnpackProgramInfo(handler, input)});\n\nfunction getSourceCoords(rank: number, dims: string[]): string {\n  if (rank === 1) {\n    return 'rc';\n  }\n\n  let coords = '';\n  for (let i = 0; i < rank; i++) {\n    coords += dims[i];\n    if (i < rank - 1) {\n      coords += ',';\n    }\n  }\n  return coords;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const unsqueeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.unsqueezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const unsqueezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return unsqueeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseUnsqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Unsqueeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Unsqueeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface UpsampleAttributes extends AttributeWithCacheKey {\n  readonly opset: number;\n  readonly isResize: boolean;\n  readonly mode: string;\n  readonly scales: number[];\n  readonly extrapolationValue: number;\n  readonly coordinateTransformMode: string;\n  readonly useExtrapolation: boolean;\n  readonly needRoiInput: boolean;\n  readonly nearestMode: string;\n  readonly cubicCoefficientA: number;\n  readonly excludeOutside: boolean;\n  readonly useNearest2xOptimization: boolean;\n  readonly roiInputIdx: number;\n  readonly scalesInputIdx: number;\n  readonly sizesInputIdx: number;\n}\n\nconst upsampleProgramMetadata = {\n  name: 'Upsample',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const upsample: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...upsampleProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createUpsampleProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseUpsampleAttributesV7: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 7);\n\nexport const parseUpsampleAttributesV9: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 9);\n\nexport const parseUpsampleAttributes = (node: Graph.Node, opset: number): UpsampleAttributes => {\n  const isResize = (opset >= 10);\n\n  // processing node attributes\n  const mode = node.attributes.getString('mode', 'nearest');\n  if (mode !== 'nearest' && mode !== 'linear' && (opset < 11 || mode !== 'cubic')) {\n    throw new Error(`unrecognized mode: ${mode}`);\n  }\n\n  let scales: number[] = [];\n  if (opset < 9) {\n    scales = node.attributes.getFloats('scales');\n    scalesValidation(scales, mode, isResize);\n  }\n\n  const extrapolationValue = node.attributes.getFloat('extrapolation_value', 0.0);\n\n  const coordinateTransformMode =\n      opset > 10 ? node.attributes.getString('coordinate_transformation_mode', 'half_pixel') : 'asymmetric';\n  if ([\n        'asymmetric', 'pytorch_half_pixel', 'tf_half_pixel_for_nn', 'align_corners', 'tf_crop_and_resize', 'half_pixel'\n      ].indexOf(coordinateTransformMode) === -1) {\n    throw new Error(`coordinate_transform_mode '${coordinateTransformMode}' is not supported`);\n  }\n  const needRoiInput = (coordinateTransformMode === 'tf_crop_and_resize');\n  const useExtrapolation = needRoiInput;\n\n  const nearestMode =\n      (mode === 'nearest' && opset >= 11) ? node.attributes.getString('nearest_mode', 'round_prefer_floor') : '';\n  if (['round_prefer_floor', 'round_prefer_ceil', 'floor', 'ceil', ''].indexOf(nearestMode) === -1) {\n    throw new Error(`nearest_mode '${nearestMode}' is not supported`);\n  }\n\n  const cubicCoefficientA = node.attributes.getFloat('cubic_coeff_a', -0.75);\n  const excludeOutside = node.attributes.getInt('exclude_outside', 0) !== 0;\n  if (excludeOutside && mode !== 'cubic') {\n    throw new Error('exclude_outside can be set to 1 only when mode is CUBIC.');\n  }\n\n  const useNearest2xOptimization =\n      (opset < 11) ? true : (mode === 'nearest' && coordinateTransformMode === 'asymmetric' && nearestMode === 'floor');\n\n  let roiInputIdx = 0;\n  let scalesInputIdx = 0;\n  let sizesInputIdx = 0;\n\n  if (opset > 10) {\n    // handle when roiInput is not given\n    if (node.inputs.length > 2) {\n      roiInputIdx = 1;\n      scalesInputIdx = 2;\n      sizesInputIdx = 3;\n    } else {\n      scalesInputIdx = 1;\n      sizesInputIdx = 2;\n    }\n  } else if (opset === 9) {\n    scalesInputIdx = 1;\n  }\n\n  return createAttributeWithCacheKey({\n    opset,\n    isResize,\n    mode,\n    scales,\n    extrapolationValue,\n    coordinateTransformMode,\n    useExtrapolation,\n    needRoiInput,\n    nearestMode,\n    cubicCoefficientA,\n    excludeOutside,\n    useNearest2xOptimization,\n    roiInputIdx,\n    scalesInputIdx,\n    sizesInputIdx\n  });\n};\n\nconst createUpsampleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [inputWidth, inputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(inputs[0].dims, TextureType.unpacked);\n\n      const outputShape = inputs[0].dims.map((dim, i) => Math.floor(dim * attributes.scales[i]));\n      const [outputWidth, outputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(outputShape, TextureType.unpacked);\n      const dim = outputShape.length;\n\n      const outputPitches = new Array<number>(dim);\n      const inputPitches = new Array<number>(dim);\n      let precalculatedPitches = `\n      int output_pitches[${dim}];\n      int input_pitches[${dim}];\n      `;\n      for (let d = dim - 1; d >= 0; d--) {\n        outputPitches[d] = (d === dim - 1) ? 1 : outputPitches[d + 1] * outputShape[d + 1];\n        inputPitches[d] = (d === dim - 1) ? 1 : inputPitches[d + 1] * inputs[0].dims[d + 1];\n\n        precalculatedPitches += `\n        output_pitches[${d}] = ${outputPitches[d]};\n        input_pitches[${d}] = ${inputPitches[d]};\n        `;\n      }\n      const getInputFloatFunction = `\n      float getInputFloat(int index) {\n        vec2 coords = offsetToCoords(index, ${inputWidth}, ${inputHeight});\n        float value = getColorAsFloat(${glsl.texture2D}(X, coords));\n        return value;\n      }\n      `;\n\n      const shaderSource = attributes.mode === 'nearest' ?\n          // nearest\n          `\n    ${getInputFloatFunction}\n    float process(int indices[${dim}]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int d, m;\n      for (int dim = 0; dim < ${dim}; ++dim) {\n        d = output_index / output_pitches[dim];\n        m = output_index - d * output_pitches[dim];\n        output_index = m;\n\n        if (scales[dim] != 1 && d > 0) {\n          int d2 = d / scales[dim];\n          m = d - d2 * scales[dim];\n          d = d2;\n        }\n        input_index += input_pitches[dim] * d;\n      }\n\n      return getInputFloat(input_index);\n    }` :\n          dim === 4 ?\n          // bilinear 4D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[4]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1, index_of_dim2, index_of_dim3;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m / output_pitches[1];\n      m = m - index_of_dim1 * output_pitches[1];\n      index_of_dim2 = m / output_pitches[2];\n      m = m - index_of_dim2 * output_pitches[2];\n      index_of_dim3 = m;\n\n      int index_of_input_dim2, index_of_input_dim3, x_offset, y_offset;\n      index_of_input_dim2 = index_of_dim2 / scales[2];\n      y_offset = index_of_dim2 - index_of_input_dim2 * scales[2];\n      index_of_input_dim3 = index_of_dim3 / scales[3];\n      x_offset = index_of_dim3 - index_of_input_dim3 * scales[3];\n\n      input_index = index_of_dim0 * input_pitches[0] +\n            index_of_dim1 * input_pitches[1] +\n            index_of_input_dim2 * input_pitches[2] +\n            index_of_input_dim3;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim2 = false;\n      if (index_of_input_dim2 == (${inputs[0].dims[2]} - 1)) {\n        // It's the end in dimension 2\n        x01 = x00;\n        end_of_dim2 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[2]);\n      }\n\n      if (index_of_input_dim3 == (input_pitches[2] - 1)) {\n        // It's the end in dimension 3\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim2 ? x10 : getInputFloat(input_index + input_pitches[2] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[2]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[2]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[3]);\n    }` :\n              // bilinear 2D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[2]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m;\n\n      int index_of_input_dim0, index_of_input_dim1, x_offset, y_offset;\n      index_of_input_dim0 = index_of_dim0 / scales[0];\n      y_offset = index_of_dim0 - index_of_input_dim0 * scales[0];\n      index_of_input_dim1 = index_of_dim1 / scales[1];\n      x_offset = index_of_dim1 - index_of_input_dim1 * scales[1];\n\n      input_index = index_of_input_dim0 * input_pitches[0] + index_of_input_dim1;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim0 = false;\n      if (index_of_input_dim0 == (${inputs[0].dims[0]} - 1)) {\n        // It's the end in dimension 0\n        x01 = x00;\n        end_of_dim0 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[0]);\n      }\n\n      if (index_of_input_dim1 == (input_pitches[0] - 1)) {\n        // It's the end in dimension 1\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim0 ? x10 : getInputFloat(input_index + input_pitches[0] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[0]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[0]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[1]);\n    }`;\n      return {\n        ...upsampleProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        variables: [{\n          name: 'scales',\n          type: 'int',\n          arrayLength: attributes.scales.length,\n          data: attributes.scales.map(x => Math.ceil(x))\n        }]\n      };\n    };\n\nexport const validateInputs = (inputs: Tensor[], attribute: UpsampleAttributes): void => {\n  if (!inputs || (attribute.opset < 9 && inputs.length !== 1) ||\n      (attribute.opset >= 9 && attribute.opset < 11 && inputs.length !== 2) ||\n      (attribute.opset >= 11 && inputs.length < 2)) {\n    throw new Error('invalid inputs.');\n  }\n\n  if (attribute.scales.length > 0 && inputs[0].dims.length !== attribute.scales.length) {\n    throw new Error('Invalid input shape.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input tensor types.');\n  }\n};\n\nexport const scalesValidation = (scales: number[], mode: string, isResize: boolean): void => {\n  if (!isResize) {\n    for (const scale of scales) {\n      if (scale < 1) {\n        throw new Error('Scale value should be greater than or equal to 1.');\n      }\n    }\n  } else {\n    for (const scale of scales) {\n      if (scale <= 0) {\n        throw new Error('Scale value should be greater than 0.');\n      }\n    }\n  }\n  if (mode === 'linear' || mode === 'cubic') {\n    if (scales.length !== 2 && (scales.length !== 4 || scales[0] !== 1 || scales[1] !== 1)) {\n      throw new Error(`'Linear' mode and 'Cubic' mode only support 2-D inputs ('Bilinear', 'Bicubic') \\\n        or 4-D inputs with the corresponding outermost 2 scale values being 1 \\\n        in the ${isResize ? 'Resize' : 'Upsample'} opeartor.`);\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {Logger, Profiler} from '../../instrument';\n\nimport {GlslPreprocessor} from './glsl-preprocessor';\nimport {getVertexShaderSource} from './glsl-source';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {Artifact, ProgramInfo, ProgramVariable, TextureData, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * ProgramManager is the main class behind running computations\n * It builds ProgramInfo's into Artifacts\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\n * Uses the artifact to run the computation by calling Draw on\n * the WebGL drawing buffer\n * ProgramManager automatically maps (binds) input variables to their\n * corresponding Location's in the binary program\n */\nexport class ProgramManager {\n  repo: Map<unknown, Artifact>;  // this should be per-session object\n  vertexShader: WebGLShader;\n  attributesBound: boolean;\n\n  constructor(\n      public profiler: Readonly<Profiler>, public glContext: WebGLContext,\n      public textureLayoutStrategy: TextureLayoutStrategy) {\n    this.repo = new Map();\n    this.attributesBound = false;\n  }\n  getArtifact(key: unknown): Artifact|undefined {\n    return this.repo.get(key);\n  }\n  setArtifact(key: unknown, artifact: Artifact): void {\n    this.repo.set(key, artifact);\n  }\n  run(buildArtifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    this.profiler.event('op', `ProgramManager.run ${buildArtifact.programInfo.name ?? 'unknown kernel'}`, () => {\n      const gl = this.glContext.gl;\n      const program = buildArtifact.program;\n      gl.useProgram(program);\n      try {\n        this.bindOutput(output);\n        if (!this.attributesBound) {\n          this.bindAttributes(buildArtifact.attribLocations);\n        }\n        this.bindUniforms(buildArtifact.uniformLocations, buildArtifact.programInfo.variables ?? [], inputs);\n      } catch (err) {\n        Logger.error('ProgramManager', buildArtifact.programInfo.shaderSource);\n        throw err;\n      }\n      this.profiler.event('backend', 'GlContext.draw()', () => {\n        this.glContext.draw();\n      });\n    }, this.glContext);\n  }\n  dispose(): void {\n    if (this.vertexShader) {\n      this.glContext.deleteShader(this.vertexShader);\n    }\n    this.repo.forEach(a => this.glContext.deleteProgram(a.program));\n  }\n  build(programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[], outputTextureLayout: TextureLayout): Artifact {\n    return this.profiler.event('backend', 'ProgramManager.build', () => {\n      const preprocessor = new GlslPreprocessor(this.glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n      const fragScript = preprocessor.preprocess();\n      const program = this.compile(fragScript);\n      const artifact = {\n        programInfo,\n        program,\n        uniformLocations: this.getUniformLocations(\n            program, preprocessor.context.programInfo.inputNames, preprocessor.context.programInfo.variables),\n        attribLocations: this.getAttribLocations(program)\n      };\n      return artifact;\n    });\n  }\n  protected compile(fragShaderScript: string): WebGLProgram {\n    if (!this.vertexShader) {\n      Logger.verbose('ProrgramManager', 'Compiling and caching Vertex shader for the first time');\n      const vertexShaderScript = getVertexShaderSource(this.glContext.version);\n      this.vertexShader = this.glContext.compileShader(vertexShaderScript, this.glContext.gl.VERTEX_SHADER);\n    }\n    if (env.debug) {\n      Logger.verbose('ProrgramManager', `FragShader:\n${fragShaderScript}\n`);\n    }\n    const fragShader = this.glContext.compileShader(fragShaderScript, this.glContext.gl.FRAGMENT_SHADER);\n    const program = this.glContext.createProgram(this.vertexShader, fragShader);\n    this.glContext.deleteShader(fragShader);\n    return program;\n  }\n  bindOutput(td: TextureData): void {\n    const width = td.width;\n    const height = td.height;\n    Logger.verbose(\n        'ProrgramManager',\n        `Binding output texture to Framebuffer: w/h=${width}/${height}, shape=${td.shape}, type=${td.tensor.type}`);\n    this.glContext.attachFramebuffer(td.texture, width, height);\n  }\n  bindAttributes(attribLocations: Artifact.AttribLocations): void {\n    const positionHandle = attribLocations.position;\n    const textureCoordHandle = attribLocations.textureCoord;\n    this.glContext.setVertexAttributes(positionHandle, textureCoordHandle);\n    this.attributesBound = true;\n  }\n  bindUniforms(uniformLocations: Artifact.UniformLocations, variables: ProgramVariable[], textures: TextureData[]):\n      void {\n    const gl = this.glContext.gl;\n    let texturePosition = 0;\n    for (const {name, type, location, arrayLength} of uniformLocations) {\n      const value = variables.find(v => v.name === name)?.data;\n      if (type !== 'sampler2D' && !value) {\n        throw new Error(`variable '${name}' does not have data defined in program info`);\n      }\n      switch (type) {\n        case 'sampler2D':\n          this.bindTexture(textures[texturePosition], location, texturePosition);\n          texturePosition++;\n          break;\n        case 'float':\n          if (arrayLength) {\n            gl.uniform1fv(location, value as number[]);\n          } else {\n            gl.uniform1f(location, value as number);\n          }\n          break;\n        case 'int':\n          if (arrayLength) {\n            gl.uniform1iv(location, value as number[]);\n          } else {\n            gl.uniform1i(location, value as number);\n          }\n          break;\n        default:\n          throw new Error(`Uniform not implemented: ${type}`);\n      }\n    }\n  }\n  bindTexture(td: TextureData, uniformHandle: WebGLUniformLocation, position: number): void {\n    this.glContext.bindTextureToUniform(td.texture, position, uniformHandle);\n  }\n  getAttribLocations(program: WebGLProgram): Artifact.AttribLocations {\n    return {\n      position: this.getAttribLocation(program, 'position'),\n      textureCoord: this.getAttribLocation(program, 'textureCoord')\n    };\n  }\n  getUniformLocations(program: WebGLProgram, samplers?: string[], variables?: VariableInfo[]):\n      Artifact.UniformLocations {\n    const uniformLocations: Artifact.UniformLocations = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLocations.push({name: sampler, type: 'sampler2D', location: this.getUniformLocation(program, sampler)});\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLocations.push({...variable, location: this.getUniformLocation(program, variable.name)});\n      }\n    }\n    return uniformLocations;\n  }\n  getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation {\n    const gl = this.glContext.gl;\n    const reference = gl.getUniformLocation(program, name);\n    if (reference === null) {\n      throw new Error(`Uniform ${name} not found.`);\n    }\n    return reference;\n  }\n  getAttribLocation(program: WebGLProgram, name: string): number {\n    const gl = this.glContext.gl;\n    const attributeLocation: number = gl.getAttribLocation(program, name);\n    return attributeLocation;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from '../../backend';\nimport {Graph} from '../../graph';\nimport {Logger} from '../../instrument';\nimport {Operator} from '../../operators';\nimport {OpSet, resolveOperator} from '../../opset';\nimport {Session} from '../../session';\nimport {Tensor} from '../../tensor';\nimport {WebGLBackend} from '../backend-webgl';\n\nimport {WebGLInferenceHandler} from './inference-handler';\nimport {WEBGL_OP_RESOLVE_RULES} from './op-resolve-rules';\nimport {ProgramManager} from './program-manager';\nimport {PreferLogicalStrategy, TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureManager} from './texture-manager';\nimport {TextureData} from './types';\n\nexport class WebGLSessionHandler implements SessionHandler {\n  programManager: ProgramManager;\n  textureManager: TextureManager;\n  layoutStrategy: TextureLayoutStrategy;\n  packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  pack2unpackMap: Map<Tensor.Id, Tensor.Id>;\n  unpack2packMap: Map<Tensor.Id, Tensor.Id>;\n  initializers: Set<Tensor.Id>;\n  pack?: boolean;\n\n  constructor(public readonly backend: WebGLBackend, public readonly context: Session.Context) {\n    this.layoutStrategy = new PreferLogicalStrategy(backend.glContext.maxTextureSize);\n    this.programManager = new ProgramManager(this.context.profiler, backend.glContext, this.layoutStrategy);\n    this.textureManager = new TextureManager(\n        backend.glContext, this.layoutStrategy, this.context.profiler,\n        {reuseTextures: backend.textureCacheMode === 'full'});\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n    this.pack = backend.pack;\n    this.pack2unpackMap = new Map();\n    this.unpack2packMap = new Map();\n  }\n\n  createInferenceHandler() {\n    return new WebGLInferenceHandler(this);\n  }\n  onGraphInitialized(graph: Graph): void {\n    const initializers = graph.getValues().filter(v => v.from === -1 && v.tensor).map(v => v.tensor!.dataId);\n    this.initializers = new Set(initializers);\n  }\n  isInitializer(tensorId: Tensor.Id): boolean {\n    return this.initializers ? this.initializers.has(tensorId) : false;\n  }\n  addInitializer(tensorId: Tensor.Id): void {\n    this.initializers.add(tensorId);\n  }\n  getTextureData(tensorId: Tensor.Id, isPacked: boolean): TextureData|undefined {\n    if (isPacked) {\n      return this.packedTextureDataCache.get(tensorId);\n    } else {\n      return this.unpackedTextureDataCache.get(tensorId);\n    }\n  }\n  setTextureData(tensorId: Tensor.Id, textureData: TextureData, isPacked = false): void {\n    Logger.verbose('WebGLSessionHandler', 'Storing Texture data in cache');\n    if (isPacked) {\n      this.packedTextureDataCache.set(tensorId, textureData);\n    } else {\n      this.unpackedTextureDataCache.set(tensorId, textureData);\n    }\n  }\n  dispose(): void {\n    this.programManager.dispose();\n    this.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.unpackedTextureDataCache = new Map();\n  }\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator {\n    const op = resolveOperator(node, opsets, WEBGL_OP_RESOLVE_RULES);\n    return {impl: op.opImpl, context: op.opInit ? op.opInit(node, graph) : node};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nexport declare namespace Encoder {\n  export interface DataTypeMap {\n    float: Float32Array;\n    byte: Uint8Array;\n    int: Uint32Array;\n  }\n  export type DataType = keyof DataTypeMap;\n  type DataArrayType = DataTypeMap[DataType];\n\n  /* eslint-disable @typescript-eslint/naming-convention */\n  export const enum Usage {\n    Default = 0,\n    UploadOnly,\n    Download4BytesAsFloat32,\n  }\n}\n\n/**\n * Abstraction for mapping data types to texture texlets\n * Encoding means how a Float32 is mapped to 1 or 4 channels for each texlet\n * Decoding means how a texlet's channels are mapped to a resulting Float32\n */\nexport interface DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType;\n  allocate(size: number): Encoder.DataArrayType;\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Encoder.DataArrayType;\n}\n/**\n * WebGL2 data encoder\n * Uses R32F as the format for texlet\n */\nexport class RedFloat32DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGL2RenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.R32F;\n      this.format = gl.RED;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA32F;\n      this.format = gl.RGBA;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType {\n    let result: Float32Array;\n    let source: Float32Array;\n    if (src.constructor !== Float32Array) {\n      Logger.warning('Encoder', 'data was not of type Float32; creating new Float32Array');\n      source = new Float32Array(src);\n    }\n    if (textureSize * this.channelSize > src.length) {\n      Logger.warning('Encoder', 'Source data too small. Allocating larger array');\n      source = src as Float32Array;\n      result = this.allocate(textureSize * this.channelSize) as Float32Array;\n      source.forEach((v, i) => result[i] = v);\n    } else {\n      source = src as Float32Array;\n      result = source;\n    }\n    return result;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n/**\n * Data encoder for WebGL 1 with support for floating point texture\n */\nexport class RGBAFloatDataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGLRenderingContext, channels = 1, textureType?: number) {\n    if (channels !== 1 && channels !== 4) {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n    this.internalFormat = gl.RGBA;\n    this.format = gl.RGBA;\n    this.channelSize = channels;\n    this.textureType = textureType || gl.FLOAT;\n  }\n  encode(src: Float32Array, textureSize: number): Encoder.DataArrayType {\n    let dest = src;\n    if (this.channelSize === 1) {\n      Logger.verbose('Encoder', 'Exploding into a larger array');\n      dest = this.allocate(textureSize) as Float32Array;\n      src.forEach((v, i) => dest[i * 4] = v);\n    }\n    return dest;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n\nexport class Uint8DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize = 4;\n  constructor(gl: WebGLRenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.ALPHA;\n      this.format = gl.ALPHA;  // not tested\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA;\n      this.format = gl.RGBA;\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Uint8Array, _textureSize: number): Encoder.DataArrayType {\n    return new Uint8Array(src.buffer, src.byteOffset, src.byteLength);\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Uint8Array(size * this.channelSize);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Uint8Array {\n    if (buffer instanceof Uint8Array) {\n      return buffer.subarray(0, dataSize);\n    }\n    throw new Error(`Invalid array type: ${buffer.constructor}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\nimport {assert} from '../../util';\n\n/** Layout preferences */\nexport interface WidthHeightPrefs {\n  breakAxis?: number;\n  isPacked?: boolean;\n  reverseWH?: boolean;\n}\n/**\n * TextureLayoutStrategy is an abstraction for different plans\n * for mapping n-dimensional arrays to 2D textures (and back)\n */\nexport interface TextureLayoutStrategy {\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number];\n}\n\n/**\n * This strategy try to find the minimal max(W,H) that fulfills (W * H == totalSize)\n */\nexport class AlwaysKeepOriginalSizeStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    // scalar tensor\n    if (shape.length === 0) {\n      return [1, 1];\n    }\n    const maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    const totalSize = shape.reduce((a, b) => a * b);\n\n    let width = Math.floor(Math.sqrt(totalSize));\n\n    for (; width < maxTextureSize && width < totalSize; width++) {\n      if (totalSize % width === 0) {\n        break;\n      }\n    }\n\n    if (width >= maxTextureSize || totalSize % width !== 0) {\n      throw new Error(`The given dimensions are outside this GPU's boundaries: ${shape}`);\n    }\n    return [width, totalSize / width];\n  }\n}\n\nexport class PreferLogicalStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const wh = this.computeTexture(shape, prefs);\n    if (prefs && prefs.isPacked) {\n      wh[0] /= 2;\n      wh[1] /= 2;\n    }\n    if (prefs && prefs.reverseWH) {\n      return [wh[1], wh[0]];\n    }\n    return wh;\n  }\n\n  computeTexture(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const isPacked = prefs && prefs.isPacked;\n    // scalar tensor\n    if (shape.length === 0) {\n      return isPacked ? [2, 2] : [1, 1];\n    }\n    let maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    let logShape = shape.slice(0);\n    if (isPacked) {\n      maxTextureSize = maxTextureSize * 2;\n\n      // This logic ensures we accurately count the number of packed texels needed\n      // to accommodate the tensor. We can only pack values in the same texel if\n      // they are from adjacent pairs of rows/cols within the same batch. So if a\n      // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n      // fact that the texels containing the third row are half empty.\n      logShape = logShape.map(\n          (d, i) => i >= logShape.length - 2 ? (logShape[i] % 2 === 0 ? logShape[i] : logShape[i] + 1) : logShape[i]);\n\n      // Packed texture height is at least 2 (the channel height of a single\n      // texel).\n      if (logShape.length === 1) {\n        logShape = [2, logShape[0]];\n      }\n    }\n\n    // If logical shape is 2, we don't squeeze, since we want to match physical.\n    if (logShape.length !== 2) {\n      const squeezeResult = squeezeShape(logShape);\n      logShape = squeezeResult.newShape;\n    }\n\n    const size = sizeFromShape(logShape);\n    if (logShape.length <= 1 && size <= maxTextureSize) {\n      return [1, size];\n    } else if (logShape.length === 2 && logShape[0] <= maxTextureSize && logShape[1] <= maxTextureSize) {\n      return logShape as [number, number];\n    } else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTextureSize && logShape[2] <= maxTextureSize) {\n      return [logShape[0] * logShape[1], logShape[2]];\n    } else if (logShape.length === 3 && logShape[0] <= maxTextureSize && logShape[1] * logShape[2] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2]];\n    } else if (\n        logShape.length === 4 && logShape[0] * logShape[1] * logShape[2] <= maxTextureSize &&\n        logShape[3] <= maxTextureSize) {\n      return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n    } else if (\n        logShape.length === 4 && logShape[0] <= maxTextureSize &&\n        logShape[1] * logShape[2] * logShape[3] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n    } else {\n      if (isPacked) {\n        // For packed textures size equals the number of channels required to\n        // accommodate the texture data. However in order to squarify such that\n        // inner dimensions stay even, we rewrite size to equal the number of\n        // texels. Then in the return statement we rehydrate the squarified\n        // dimensions to channel units.\n        return sizeToSquarishShape(size / 4).map(d => d * 2) as [number, number];\n      }\n      return sizeToSquarishShape(size);\n    }\n  }\n}\n\nexport function squeezeShape(shape: number[], axis?: number[]): {newShape: number[]; keptDims: number[]} {\n  const newShape: number[] = [];\n  const keptDims: number[] = [];\n  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\n  const axes = (axis == null || isEmptyArray) ? null : parseAxisParam(axis, shape).sort();\n  let j = 0;\n  for (let i = 0; i < shape.length; ++i) {\n    if (axes != null) {\n      if (axes[j] === i && shape[i] !== 1) {\n        throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\n      }\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\n        newShape.push(shape[i]);\n        keptDims.push(i);\n      }\n      if (axes[j] <= i) {\n        j++;\n      }\n    }\n    if (shape[i] !== 1) {\n      newShape.push(shape[i]);\n      keptDims.push(i);\n    }\n  }\n  return {newShape, keptDims};\n}\n\nexport function parseAxisParam(axis: number|number[], shape: number[]): number[] {\n  const rank = shape.length;\n\n  // Normalize input\n  axis = axis == null ? shape.map((s, i) => i) : ([] as number[]).concat(axis);\n\n  // Check for valid range\n  assert(\n      axis.every(ax => ax >= -rank && ax < rank),\n      () => `All values in axis param must be in range [-${rank}, ${rank}) but ` +\n          `got axis ${axis}`);\n\n  // Check for only integers\n  assert(\n      axis.every(isInt),\n      () => 'All values in axis param must be integers but ' +\n          `got axis ${axis}`);\n\n  // Handle negative axis.\n  return axis.map(a => a < 0 ? rank + a : a);\n}\nexport function isInt(a: number): boolean {\n  return a % 1 === 0;\n}\nexport function sizeFromShape(shape: number[]): number {\n  if (shape.length === 0) {\n    // Scalar.\n    return 1;\n  }\n  let size = shape[0];\n  for (let i = 1; i < shape.length; i++) {\n    size *= shape[i];\n  }\n  return size;\n}\nexport function getRowsCols(shape: number[]): [number, number] {\n  if (shape.length === 0) {\n    throw Error('Cannot get rows and columns of an empty shape array.');\n  }\n\n  return [shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\nexport function sizeToSquarishShape(size: number): [number, number] {\n  const width = Math.ceil(Math.sqrt(size));\n  return [width, Math.ceil(size / width)];\n}\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\n  return sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ShapeUtil} from '../../util';\n\nimport {TextureLayoutStrategy, WidthHeightPrefs} from './texture-layout-strategy';\nimport {TextureLayout, TextureType} from './types';\n\nexport const createTextureLayoutFromTextureType =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[],\n     textureType: TextureType): TextureLayout => {\n      const channel = (textureType === TextureType.unpacked || textureType === TextureType.unpackedReversed) ? 1 : 4;\n      const isPacked = textureType === TextureType.packed;\n      const reverseWH = (textureType === TextureType.unpackedReversed || textureType === TextureType.packed);\n      const breakAxis = textureType === TextureType.packedLastDimension ? shape.length - 1 : undefined;\n      const unpackedShape = textureType === TextureType.packedLastDimension ?\n          shape.map((d, i) => i === shape.length - 1 ? d * 4 : d) :\n          undefined;\n      return createTextureLayoutFromShape(\n          textureLayoutStrategy, shape, channel, unpackedShape, {isPacked, reverseWH, breakAxis});\n    };\n\nexport const calculateTextureWidthAndHeight =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], textureType: TextureType):\n        [number, number] => {\n          const layout = createTextureLayoutFromTextureType(textureLayoutStrategy, shape, textureType);\n          return [layout.width, layout.height];\n        };\n\n/**\n * Create a TextureLayout object from shape.\n */\nexport const createTextureLayoutFromShape =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], channels: 1|4 = 1,\n     unpackedShape?: readonly number[], prefs?: WidthHeightPrefs): TextureLayout => {\n      const isPacked = !!(prefs && prefs.isPacked);\n      const [width, height] = textureLayoutStrategy.computeTextureWH(isPacked ? unpackedShape || shape : shape, prefs);\n      const rank = shape.length;\n      let inferredDims = shape.slice(0);\n      if (rank === 0) {\n        inferredDims = [1];\n      }\n      if (channels === 1) {\n        // unpackedShape will take `shape` and not `inferredDims` so as to create a scalar Tensor if need be\n        unpackedShape = shape;\n      } else if (isPacked) {\n        if (channels !== 4) {\n          throw new Error('a packed texture must be 4-channel');\n        }\n        unpackedShape = shape;\n        if (rank > 0) {\n          inferredDims[rank - 1] = Math.ceil(inferredDims[rank - 1] / 2);\n        }\n        if (rank > 1) {\n          inferredDims[rank - 2] = Math.ceil(inferredDims[rank - 2] / 2);\n        }\n      } else if (!unpackedShape) {\n        throw new Error('Unpacked shape is needed when using channels > 1');\n      }\n      return {\n        width,\n        height,\n        channels,\n        isPacked,\n        shape: inferredDims,\n        strides: ShapeUtil.computeStrides(inferredDims),\n        unpackedShape,\n        reversedWH: (prefs && prefs.reverseWH)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger, Profiler} from '../../instrument';\nimport {Tensor} from '../../tensor';\n\nimport {Encoder} from './texture-data-encoder';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureData, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\nexport interface TextureManagerConfig {\n  reuseTextures?: boolean;\n}\n\n/**\n * TextureManager is the mainly responsible for caching Textures\n * Textures are cached in 2 levels:\n *   1. the texures which are associated with a dataId (from Tensor)\n *    Caching these is crucial to performance. These are In-use Textures\n *   2. textures which are not in use by any current ProgramInfo/Tensor\n *     These are called Free Textures\n * TextureManager is also used to help creating textures. For this it\n * uses WebGLContext and TextureLayoutStrategy\n */\nexport class TextureManager {\n  private readonly inUseTextures: Map<string, WebGLTexture[]>;\n  private readonly idleTextures: Map<string, WebGLTexture[]>;\n  private readonly textureLookup: Map<WebGLTexture, string>;\n  private readonly pendingRead: Map<Tensor.Id, Array<(arr: Tensor.NumberType) => void>> = new Map();\n\n  constructor(\n      public glContext: WebGLContext, public layoutStrategy: TextureLayoutStrategy, public profiler: Readonly<Profiler>,\n      private config: TextureManagerConfig) {\n    if (config.reuseTextures) {\n      this.inUseTextures = new Map();\n      this.idleTextures = new Map();\n      this.textureLookup = new Map();\n    }\n  }\n  createTextureFromLayout(\n      dataType: Tensor.DataType, layout: TextureLayout, data?: Tensor.NumberType, usage?: Encoder.Usage) {\n    const textureDataType = this.toEncoderType(dataType);\n\n    const encoder = this.glContext.getEncoder(textureDataType, layout.channels || 1, usage);\n    if (layout.isPacked && usage === Encoder.Usage.UploadOnly) {\n      throw new Error('not implemented');\n    }\n    const width = layout.width;\n    const height = layout.height;\n\n    let key: string|undefined;\n    let inUseTextures: WebGLTexture[]|undefined;\n    if (this.config.reuseTextures) {\n      key = `${width}x${height}_${encoder.format}_${encoder.internalFormat}_${encoder.textureType}`;\n      inUseTextures = this.inUseTextures.get(key);\n      if (!inUseTextures) {\n        inUseTextures = [];\n        this.inUseTextures.set(key, inUseTextures);\n      }\n\n      const idleTextures = this.idleTextures.get(key);\n      if (idleTextures && idleTextures.length > 0) {\n        const texture = idleTextures.pop()!;\n        inUseTextures.push(texture);\n        if (usage === Encoder.Usage.UploadOnly) {\n          this.glContext.updateTexture(texture, width, height, encoder, this.toTextureData(dataType, data)!);\n        }\n        return texture;\n      }\n    }\n\n    Logger.verbose('TextureManager', `Creating new texture of size ${layout.width}x${layout.height}`);\n    const texture = this.glContext.allocateTexture(width, height, encoder, this.toTextureData(dataType, data));\n\n    if (this.config.reuseTextures) {\n      inUseTextures!.push(texture);\n      this.textureLookup.set(texture, key!);\n    }\n    return texture;\n  }\n  readTexture(td: TextureData, dataType: Tensor.DataType, channels?: number): Tensor.NumberType {\n    if (!channels) {\n      channels = 1;\n    }\n    return this.profiler.event('backend', 'TextureManager.readTexture', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      return this.toTensorData(dataType, data);\n    });\n  }\n  async readTextureAsync(td: TextureData, dataType: Tensor.DataType, channels?: number): Promise<Tensor.NumberType> {\n    const dataId = td.tensor.dataId;\n    if (!channels) {\n      channels = 1;\n    }\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<Tensor.NumberType>(resolve => subscribers?.push(resolve));\n    }\n    return this.profiler.event('backend', 'TextureManager.readTextureAsync', async () => {\n      this.pendingRead.set(dataId, []);\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      // add a fence waiting for the data to be ready\n      await this.glContext.createAndWaitForFence();\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      const tensorData = this.toTensorData(dataType, data);\n      const subscribers = this.pendingRead.get(dataId);\n      this.pendingRead.delete(dataId);\n      subscribers?.forEach(resolve => resolve(tensorData));\n      return tensorData;\n    });\n  }\n  readUint8TextureAsFloat(td: TextureData): Float32Array {\n    return this.profiler.event('backend', 'TextureManager.readUint8TextureAsFloat', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b);\n      const data = this.glContext.readTexture(td.texture, td.width, td.height, dataSize * 4, 'byte', 4);\n      return new Float32Array(data.buffer, data.byteOffset, dataSize);\n    });\n  }\n  releaseTexture(textureData: TextureData, deleteTexture?: boolean): void {\n    let key: string|undefined;\n    if (this.config.reuseTextures) {\n      key = this.textureLookup.get(textureData.texture);\n      if (key) {\n        if (deleteTexture) {\n          this.textureLookup.delete(key);\n        }\n        const inUseTextures = this.inUseTextures.get(key);\n        if (inUseTextures) {\n          const index = inUseTextures.indexOf(textureData.texture);\n          if (index !== -1) {\n            inUseTextures.splice(index, 1);\n            let idleTextures = this.idleTextures.get(key);\n            if (!idleTextures) {\n              idleTextures = [];\n              this.idleTextures.set(key, idleTextures);\n            }\n            idleTextures.push(textureData.texture);\n          }\n        }\n      }\n    }\n\n    if (!key || deleteTexture) {\n      Logger.verbose('TextureManager', `Deleting texture of size ${textureData.width}x${textureData.height}`);\n      this.glContext.deleteTexture(textureData.texture);\n    }\n  }\n  toTensorData(dataType: Tensor.DataType, data: Encoder.DataArrayType): Tensor.NumberType {\n    switch (dataType) {\n      case 'int16':\n        return data instanceof Int16Array ? data : Int16Array.from(data);\n      case 'int32':\n        return data instanceof Int32Array ? data : Int32Array.from(data);\n      case 'int8':\n        return data instanceof Int8Array ? data : Int8Array.from(data);\n      case 'uint16':\n        return data instanceof Uint16Array ? data : Uint16Array.from(data);\n      case 'uint32':\n        return data instanceof Uint32Array ? data : Uint32Array.from(data);\n      case 'uint8':\n      case 'bool':\n        return data instanceof Uint8Array ? data : Uint8Array.from(data);\n      case 'float32':\n        return data instanceof Float32Array ? data : Float32Array.from(data);\n      case 'float64':\n        return data instanceof Float64Array ? data : Float64Array.from(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n  }\n  toTextureData(dataType: Tensor.DataType, data: Tensor.NumberType|undefined): Encoder.DataArrayType|undefined {\n    if (!data) {\n      return undefined;\n    }\n    return (data instanceof Float32Array) ? data : new Float32Array(data);\n    /*\n    switch (dataType) {\n      case 'int16':\n      case 'int32':\n      case 'uint16':\n      case 'uint32':\n        return (data.constructor === Uint32Array) ? data as Uint32Array : new Uint32Array(data);\n      case 'int8':\n      case 'uint8':\n      case 'bool':\n        return (data.constructor === Uint8Array) ? data as Uint8Array : new Uint8Array(data);\n      case 'float32':\n      case 'float64':\n        return (data.constructor === Float32Array) ? data as Float32Array : new Float32Array(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n    */\n  }\n  toEncoderType(_dataType: Tensor.DataType): Encoder.DataType {\n    return 'float';\n    // switch (dataType) {\n    //   case 'int16':\n    //   case 'int32':\n    //   case 'uint16':\n    //   case 'uint32':\n    //     return 'int';\n    //   case 'uint8':\n    //   case 'bool':\n    //     return 'byte';\n    //   case 'float32':\n    //   case 'float64':\n    //     return 'float';\n    //   default:\n    //     throw new Error(`TensorData type ${dataType} is not supported`);\n    // }\n  }\n  clearActiveTextures(): void {\n    this.glContext.clearActiveTextures();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../tensor';\n\n/**\n * Layout info is used for mapping n-dimensional array to 2D textures\n * The layout is created by the TextureLayoutStrategy based on\n * the Tensor's dimensions and strides\n */\nexport interface TextureLayout {\n  width: number;\n  height: number;\n  /**\n   * specify the number of value that encoded in a single pixel\n   */\n  channels: 1|2|3|4;\n  /**\n   * whether in packed mode or not\n   */\n  isPacked?: boolean;\n  /**\n   * the normalized shape\n   */\n  shape: readonly number[];\n  /**\n   * the stride of each dimensions, calculated according to shape\n   */\n  strides: readonly number[];\n  /**\n   * the original shape(dims) of the corresponding tensor\n   */\n  unpackedShape: readonly number[];\n\n  reversedWH?: boolean;\n}\nexport interface TextureData extends TextureLayout {\n  tensor: Tensor;\n  texture: WebGLTexture;\n}\n\nexport enum TextureType {\n  unpacked,              // <-- normal unpacked texture\n  unpackedReversed,      // <-- unpacked texture used in old ONNX.js implementation (deprecated)\n  packed,                // <-- normal packed texture\n  downloadUint8AsFloat,  // <-- ONLY used in texture downloading for iOS devices\n  packedLastDimension    // <-- ONLY used in old ONNX.js Conv implementation for input W (deprecated)\n}\n\nexport interface TensorInfo {\n  id?: Tensor.Id;\n  dims: readonly number[];\n  type: Tensor.DataType;\n  textureType: TextureType;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * A set of metadata of a shader program.\n */\nexport interface ProgramMetadata {\n  /**\n   * the name of the program. used for debugging and profiling\n   */\n  name: string;\n  /**\n   * texture types for each input\n   */\n  inputTypes: TextureType[];\n  /**\n   * names of each input\n   */\n  inputNames: string[];\n  /**\n   * an optional string as a cache hint in the artifact cache\n   */\n  cacheHint?: string;\n}\n\n/**\n * A ProgramInfoLoader allows\n */\nexport interface ProgramInfoLoader extends ProgramMetadata {\n  /**\n   * a function to get the program info\n   */\n  get(): ProgramInfo;\n}\n\n/**\n * A set of data that represent a shader program\n */\nexport interface ProgramInfo extends ProgramMetadata {\n  /**\n   * information of uniform variables\n   */\n  variables?: ProgramVariable[];\n  /**\n   * tensor info for output\n   */\n  output: TensorInfo;\n  /**\n   * the shader's processing source code\n   */\n  shaderSource: string;\n  /**\n   * whether the shader source contains a customized main function implementation\n   */\n  hasMain?: boolean;\n}\n\nexport interface VariableInfo {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * Information of uniforms that shader uses\n */\nexport interface UniformInfo {\n  type: 'sampler2D'|VariableInfo['type'];\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface UniformLocation extends UniformInfo {\n  location: WebGLUniformLocation;\n}\n\n/**\n * Artifact is the result of compilation\n * It does not contain input of output data\n * However anything that could be run as a \"program\"\n */\nexport interface Artifact {\n  programInfo: ProgramInfo;\n  program: WebGLProgram;\n  uniformLocations: UniformLocation[];\n  attribLocations: {position: number; textureCoord: number};\n}\nexport declare namespace Artifact {\n  type UniformLocations = Artifact['uniformLocations'];\n  type AttribLocations = Artifact['attribLocations'];\n}\n\nexport interface UniformData {\n  [name: string]: number|number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {assert} from '../../util';\n/**\n * Given a non RGBA shape calculate the R version\n * It is assumed that the dimensions are multiples of given channels\n * NOTE: it is always the last dim that gets packed.\n * @param unpackedShape original shape to create a packed version from\n */\nexport function getPackedShape(unpackedShape: readonly number[]): readonly number[] {\n  const len = unpackedShape.length;\n  return unpackedShape.slice(0, len - 1).concat(unpackedShape[len - 1] / 4);\n}\n\nexport async function repeatedTry(\n    checkFn: () => boolean, delayFn = (_counter: number) => 0, maxCounter?: number): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    let tryCount = 0;\n\n    const tryFn = () => {\n      if (checkFn()) {\n        resolve();\n        return;\n      }\n\n      tryCount++;\n\n      const nextBackoff = delayFn(tryCount);\n\n      if (maxCounter != null && tryCount >= maxCounter) {\n        reject();\n        return;\n      }\n      setTimeout(tryFn, nextBackoff);\n    };\n\n    tryFn();\n  });\n}\n\n/**\n * Generates the function name from an input sampler name.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerName(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1);\n}\n\n/**\n * Generates the function name from an input sampler name at output coordinates.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1) + 'AtOutCoords';\n}\n\n/** Returns a new input shape (a copy) that has a squeezed logical shape. */\nexport function squeezeInputShape(inputShape: readonly number[], squeezedShape: number[]): number[] {\n  // Deep copy.\n  let newInputShape: number[] = JSON.parse(JSON.stringify(inputShape));\n  newInputShape = squeezedShape;\n  return newInputShape;\n}\n\n/** Returns a list of squeezed parameters for shader functions */\nexport function getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n\n/** Returns the data type for different ranks. */\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\nexport function getGlChannels(rank = 6): string[] {\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nimport {WebGLContext} from './webgl-context';\n\nconst cache: {[contextId: string]: WebGLContext} = {};\n\n/**\n * This factory function creates proper WebGLRenderingContext based on\n * the current browsers capabilities\n * The order is from higher/most recent versions to most basic\n */\nexport function createWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\n  let context: WebGLContext|undefined;\n  if ((!contextId || contextId === 'webgl2') && 'webgl2' in cache) {\n    context = cache.webgl2;\n  } else if ((!contextId || contextId === 'webgl') && 'webgl' in cache) {\n    context = cache.webgl;\n  }\n\n  if (!context) {\n    try {\n      // try to create webgl context from an offscreen canvas\n      const offscreenCanvas = createOffscreenCanvas();\n      context = createNewWebGLContext(offscreenCanvas, contextId);\n    } catch (e) {\n      // if failed, fallback to try to use a normal canvas element\n      const canvas = createCanvas();\n      context = createNewWebGLContext(canvas, contextId);\n    }\n  }\n\n  contextId = contextId || context.version === 1 ? 'webgl' : 'webgl2';\n  const gl = context.gl;\n\n  cache[contextId] = context;\n\n  if (gl.isContextLost()) {\n    delete cache[contextId];\n    return createWebGLContext(contextId);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  return context;\n}\n\nexport function createNewWebGLContext(canvas: HTMLCanvasElement, contextId?: 'webgl'|'webgl2'): WebGLContext {\n  const contextAttributes: WebGLContextAttributes = {\n    alpha: false,\n    depth: false,\n    antialias: false,\n    stencil: false,\n    preserveDrawingBuffer: false,\n    premultipliedAlpha: false,\n    failIfMajorPerformanceCaveat: false\n  };\n  let gl: WebGLRenderingContext|null;\n  const ca = contextAttributes;\n  if (!contextId || contextId === 'webgl2') {\n    gl = canvas.getContext('webgl2', ca);\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 2);\n      } catch (err) {\n        Logger.warning('GlContextFactory', `failed to create WebGLContext using contextId 'webgl2'. Error: ${err}`);\n      }\n    }\n  }\n  if (!contextId || contextId === 'webgl') {\n    gl = canvas.getContext('webgl', ca) || canvas.getContext('experimental-webgl', ca) as WebGLRenderingContext;\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 1);\n      } catch (err) {\n        Logger.warning(\n            'GlContextFactory',\n            `failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: ${err}`);\n      }\n    }\n  }\n\n  throw new Error('WebGL is not supported');\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\ndeclare let OffscreenCanvas: {new (width: number, height: number): HTMLCanvasElement};\n\nfunction createCanvas(): HTMLCanvasElement {\n  if (typeof document === 'undefined') {\n    throw new TypeError('failed to create canvas: document is not supported');\n  }\n  const canvas: HTMLCanvasElement = document.createElement('canvas');\n  canvas.width = 1;\n  canvas.height = 1;\n  return canvas;\n}\n\nfunction createOffscreenCanvas(): HTMLCanvasElement {\n  if (typeof OffscreenCanvas === 'undefined') {\n    throw new TypeError('failed to create offscreen canvas: OffscreenCanvas is not supported');\n  }\n  return new OffscreenCanvas(1, 1);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport * as DataEncoders from './texture-data-encoder';\nimport {DataEncoder, Encoder} from './texture-data-encoder';\nimport {repeatedTry} from './utils';\n\nexport interface FenceContext {\n  query: WebGLSync|null;\n  isFencePassed(): boolean;\n}\n\ntype PollItem = {\n  isDoneFn: () => boolean; resolveFn: () => void;\n};\n\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n\n/**\n * Abstraction and wrapper around WebGLRenderingContext and its operations\n */\nexport class WebGLContext {\n  gl: WebGLRenderingContext;\n  version: 1|2;\n\n  private vertexbuffer: WebGLBuffer;\n  private framebuffer: WebGLFramebuffer;\n\n  // WebGL flags and vital parameters\n  private isFloatTextureAttachableToFrameBuffer: boolean;\n  isFloat32DownloadSupported: boolean;\n  isRenderFloat32Supported: boolean;\n  isBlendSupported: boolean;\n  maxTextureSize: number;\n  // private maxCombinedTextureImageUnits: number;\n  private maxTextureImageUnits: number;\n  // private maxCubeMapTextureSize: number;\n  // private shadingLanguageVersion: string;\n  // private webglVendor: string;\n  // private webglVersion: string;\n\n  // WebGL2 flags and vital parameters\n  // private max3DTextureSize: number;\n  // private maxArrayTextureLayers: number;\n  // private maxColorAttachments: number;\n  // private maxDrawBuffers: number;\n\n  // WebGL extensions\n  // eslint-disable-next-line camelcase\n  textureFloatExtension: OES_texture_float|null;\n  // eslint-disable-next-line camelcase\n  textureHalfFloatExtension: OES_texture_half_float|null;\n\n  // WebGL2 extensions\n  colorBufferFloatExtension: unknown|null;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  disjointTimerQueryWebgl2Extension: {TIME_ELAPSED_EXT: GLenum; GPU_DISJOINT_EXT: GLenum}|null;\n\n  private disposed: boolean;\n  private frameBufferBound = false;\n\n  constructor(gl: WebGLRenderingContext, version: 1|2) {\n    this.gl = gl;\n    this.version = version;\n\n    this.getExtensions();\n    this.vertexbuffer = this.createVertexbuffer();\n    this.framebuffer = this.createFramebuffer();\n    this.queryVitalParameters();\n  }\n\n  allocateTexture(width: number, height: number, encoder: DataEncoder, data?: Encoder.DataArrayType): WebGLTexture {\n    const gl = this.gl;\n    // create the texture\n    const texture = gl.createTexture();\n    // bind the texture so the following methods effect this texture.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    const buffer = data ? encoder.encode(data, width * height) : null;\n    gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,  // Level of detail.\n        encoder.internalFormat, width, height,\n        0,  // Always 0 in OpenGL ES.\n        encoder.format, encoder.textureType, buffer);\n    this.checkError();\n    return texture as WebGLTexture;\n  }\n  updateTexture(\n      texture: WebGLTexture, width: number, height: number, encoder: DataEncoder, data: Encoder.DataArrayType): void {\n    const gl = this.gl;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    const buffer = encoder.encode(data, width * height);\n    gl.texSubImage2D(\n        gl.TEXTURE_2D,\n        0,  // level\n        0,  // xoffset\n        0,  // yoffset\n        width, height, encoder.format, encoder.textureType, buffer);\n    this.checkError();\n  }\n  attachFramebuffer(texture: WebGLTexture, width: number, height: number): void {\n    const gl = this.gl;\n    // Make it the target for framebuffer operations - including rendering.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    this.checkError();\n    gl.viewport(0, 0, width, height);\n    gl.scissor(0, 0, width, height);\n  }\n  readTexture(\n      texture: WebGLTexture, width: number, height: number, dataSize: number, dataType: Encoder.DataType,\n      channels: number): Encoder.DataArrayType {\n    const gl = this.gl;\n    if (!channels) {\n      channels = 1;\n    }\n    if (!this.frameBufferBound) {\n      this.attachFramebuffer(texture, width, height);\n    }\n    const encoder = this.getEncoder(dataType, channels);\n    const buffer = encoder.allocate(width * height);\n    // bind texture to framebuffer\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    // TODO: Check if framebuffer is ready\n    gl.readPixels(0, 0, width, height, gl.RGBA, encoder.textureType, buffer);\n    this.checkError();\n    // unbind FB\n    return encoder.decode(buffer, dataSize);\n  }\n\n  isFramebufferReady(): boolean {\n    // TODO: Implement logic to check if the framebuffer is ready\n    return true;\n  }\n  getActiveTexture(): string {\n    const gl = this.gl;\n    const n = gl.getParameter(this.gl.ACTIVE_TEXTURE);\n    return `TEXTURE${(n - gl.TEXTURE0)}`;\n  }\n  getTextureBinding(): WebGLTexture {\n    return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);\n  }\n  getFramebufferBinding(): WebGLFramebuffer {\n    return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);\n  }\n  setVertexAttributes(positionHandle: number, textureCoordHandle: number): void {\n    const gl = this.gl;\n    gl.vertexAttribPointer(positionHandle, 3, gl.FLOAT, false, 20, 0);\n    gl.enableVertexAttribArray(positionHandle);\n    if (textureCoordHandle !== -1) {\n      gl.vertexAttribPointer(textureCoordHandle, 2, gl.FLOAT, false, 20, 12);\n      gl.enableVertexAttribArray(textureCoordHandle);\n    }\n    this.checkError();\n  }\n  createProgram(\n      vertexShader: WebGLShader,\n      fragShader: WebGLShader,\n      ): WebGLProgram {\n    const gl = this.gl;\n    const program = gl.createProgram()!;\n\n    // the program consists of our shaders\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragShader);\n    gl.linkProgram(program);\n    return program;\n  }\n  compileShader(shaderSource: string, shaderType: number): WebGLShader {\n    const gl = this.gl;\n    const shader = gl.createShader(shaderType);\n    if (!shader) {\n      throw new Error(`createShader() returned null with type ${shaderType}`);\n    }\n\n    gl.shaderSource(shader, shaderSource);\n    gl.compileShader(shader);\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\n      throw new Error(`Failed to compile shader: ${gl.getShaderInfoLog(shader)}\nShader source:\n${shaderSource}`);\n    }\n    return shader;\n  }\n  deleteShader(shader: WebGLShader): void {\n    this.gl.deleteShader(shader);\n  }\n  bindTextureToUniform(texture: WebGLTexture, position: number, uniformHandle: WebGLUniformLocation): void {\n    const gl = this.gl;\n    gl.activeTexture(gl.TEXTURE0 + position);\n    this.checkError();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    this.checkError();\n    gl.uniform1i(uniformHandle, position);\n    this.checkError();\n  }\n  draw(): void {\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\n    this.checkError();\n  }\n  checkError(): void {\n    if (env.debug) {\n      const gl = this.gl;\n      const error = gl.getError();\n      let label = '';\n      switch (error) {\n        case (gl.NO_ERROR):\n          return;\n        case (gl.INVALID_ENUM):\n          label = 'INVALID_ENUM';\n          break;\n        case (gl.INVALID_VALUE):\n          label = 'INVALID_VALUE';\n          break;\n        case (gl.INVALID_OPERATION):\n          label = 'INVALID_OPERATION';\n          break;\n        case (gl.INVALID_FRAMEBUFFER_OPERATION):\n          label = 'INVALID_FRAMEBUFFER_OPERATION';\n          break;\n        case (gl.OUT_OF_MEMORY):\n          label = 'OUT_OF_MEMORY';\n          break;\n        case (gl.CONTEXT_LOST_WEBGL):\n          label = 'CONTEXT_LOST_WEBGL';\n          break;\n        default:\n          label = `Unknown WebGL Error: ${error.toString(16)}`;\n      }\n      throw new Error(label);\n    }\n  }\n  deleteTexture(texture: WebGLTexture): void {\n    this.gl.deleteTexture(texture);\n  }\n  deleteProgram(program: WebGLProgram): void {\n    this.gl.deleteProgram(program);\n  }\n  getEncoder(dataType: Encoder.DataType, channels: number, usage: Encoder.Usage = Encoder.Usage.Default): DataEncoder {\n    if (this.version === 2) {\n      return new DataEncoders.RedFloat32DataEncoder(this.gl as WebGL2RenderingContext, channels);\n    }\n\n    switch (dataType) {\n      case 'float':\n        if (usage === Encoder.Usage.UploadOnly || this.isRenderFloat32Supported) {\n          return new DataEncoders.RGBAFloatDataEncoder(this.gl, channels);\n        } else {\n          return new DataEncoders.RGBAFloatDataEncoder(\n              this.gl, channels, this.textureHalfFloatExtension!.HALF_FLOAT_OES);\n        }\n      case 'int':\n        throw new Error('not implemented');\n      case 'byte':\n        return new DataEncoders.Uint8DataEncoder(this.gl, channels);\n      default:\n        throw new Error(`Invalid dataType: ${dataType}`);\n    }\n  }\n  clearActiveTextures(): void {\n    const gl = this.gl;\n    for (let unit = 0; unit < this.maxTextureImageUnits; ++unit) {\n      gl.activeTexture(gl.TEXTURE0 + unit);\n      gl.bindTexture(gl.TEXTURE_2D, null);\n    }\n  }\n  dispose(): void {\n    if (this.disposed) {\n      return;\n    }\n    const gl = this.gl;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteFramebuffer(this.framebuffer);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    gl.deleteBuffer(this.vertexbuffer);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    gl.finish();\n    this.disposed = true;\n  }\n\n  private createDefaultGeometry(): Float32Array {\n    // Sets of x,y,z(=0),s,t coordinates.\n    return new Float32Array([\n      -1.0, 1.0,  0.0, 0.0, 1.0,  // upper left\n      -1.0, -1.0, 0.0, 0.0, 0.0,  // lower left\n      1.0,  1.0,  0.0, 1.0, 1.0,  // upper right\n      1.0,  -1.0, 0.0, 1.0, 0.0   // lower right\n    ]);\n  }\n  private createVertexbuffer(): WebGLBuffer {\n    const gl = this.gl;\n    const buffer = gl.createBuffer();\n    if (!buffer) {\n      throw new Error('createBuffer() returned null');\n    }\n    const geometry = this.createDefaultGeometry();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, geometry, gl.STATIC_DRAW);\n    this.checkError();\n    return buffer;\n  }\n  private createFramebuffer(): WebGLFramebuffer {\n    const fb = this.gl.createFramebuffer();\n    if (!fb) {\n      throw new Error('createFramebuffer returned null');\n    }\n    return fb;\n  }\n\n  private queryVitalParameters(): void {\n    const gl = this.gl;\n\n    this.isFloatTextureAttachableToFrameBuffer = this.checkFloatTextureAttachableToFrameBuffer();\n    this.isRenderFloat32Supported = this.checkRenderFloat32();\n    this.isFloat32DownloadSupported = this.checkFloat32Download();\n\n    if (this.version === 1 && !this.textureHalfFloatExtension && !this.isRenderFloat32Supported) {\n      throw new Error('both float32 and float16 TextureType are not supported');\n    }\n\n    this.isBlendSupported = !this.isRenderFloat32Supported || this.checkFloat32Blend();\n\n    // this.maxCombinedTextureImageUnits = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n    this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    this.maxTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n    // this.maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n    // this.shadingLanguageVersion = gl.getParameter(gl.SHADING_LANGUAGE_VERSION);\n    // this.webglVendor = gl.getParameter(gl.VENDOR);\n    // this.webglVersion = gl.getParameter(gl.VERSION);\n\n    if (this.version === 2) {\n      // this.max3DTextureSize = gl.getParameter(WebGL2RenderingContext.MAX_3D_TEXTURE_SIZE);\n      // this.maxArrayTextureLayers = gl.getParameter(WebGL2RenderingContext.MAX_ARRAY_TEXTURE_LAYERS);\n      // this.maxColorAttachments = gl.getParameter(WebGL2RenderingContext.MAX_COLOR_ATTACHMENTS);\n      // this.maxDrawBuffers = gl.getParameter(WebGL2RenderingContext.MAX_DRAW_BUFFERS);\n    }\n  }\n  private getExtensions(): void {\n    if (this.version === 2) {\n      this.colorBufferFloatExtension = this.gl.getExtension('EXT_color_buffer_float');\n      this.disjointTimerQueryWebgl2Extension = this.gl.getExtension('EXT_disjoint_timer_query_webgl2');\n    } else {\n      this.textureFloatExtension = this.gl.getExtension('OES_texture_float');\n      this.textureHalfFloatExtension = this.gl.getExtension('OES_texture_half_float');\n    }\n  }\n\n  private checkFloatTextureAttachableToFrameBuffer(): boolean {\n    // test whether Float32 texture is supported:\n    // STEP.1 create a float texture\n    const gl = this.gl;\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n    // STEP.2 bind a frame buffer\n    const frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    // STEP.3 attach texture to framebuffer\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    // STEP.4 test whether framebuffer is complete\n    const isComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteTexture(texture);\n    gl.deleteFramebuffer(frameBuffer);\n    return isComplete;\n  }\n\n  private checkRenderFloat32(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  private checkFloat32Download(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n      if (!this.gl.getExtension('WEBGL_color_buffer_float')) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  /**\n   * Check whether GL_BLEND is supported\n   */\n  private checkFloat32Blend(): boolean {\n    // it looks like currently (2019-05-08) there is no easy way to detect whether BLEND is supported\n    // https://github.com/microsoft/onnxjs/issues/145\n\n    const gl = this.gl;\n\n    let texture: WebGLTexture|null|undefined;\n    let frameBuffer: WebGLFramebuffer|null|undefined;\n    let vertexShader: WebGLShader|null|undefined;\n    let fragmentShader: WebGLShader|null|undefined;\n    let program: WebGLProgram|null|undefined;\n\n    try {\n      texture = gl.createTexture();\n      frameBuffer = gl.createFramebuffer();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n      gl.enable(gl.BLEND);\n\n      vertexShader = gl.createShader(gl.VERTEX_SHADER);\n      if (!vertexShader) {\n        return false;\n      }\n      gl.shaderSource(vertexShader, 'void main(){}');\n      gl.compileShader(vertexShader);\n\n      fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n      if (!fragmentShader) {\n        return false;\n      }\n      gl.shaderSource(fragmentShader, 'precision highp float;void main(){gl_FragColor=vec4(0.5);}');\n      gl.compileShader(fragmentShader);\n\n      program = gl.createProgram();\n      if (!program) {\n        return false;\n      }\n      gl.attachShader(program, vertexShader);\n      gl.attachShader(program, fragmentShader);\n      gl.linkProgram(program);\n      gl.useProgram(program);\n\n      gl.drawArrays(gl.POINTS, 0, 1);\n      return gl.getError() === gl.NO_ERROR;\n\n    } finally {\n      gl.disable(gl.BLEND);\n\n      if (program) {\n        gl.deleteProgram(program);\n      }\n      if (vertexShader) {\n        gl.deleteShader(vertexShader);\n      }\n      if (fragmentShader) {\n        gl.deleteShader(fragmentShader);\n      }\n      if (frameBuffer) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.deleteFramebuffer(frameBuffer);\n      }\n      if (texture) {\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        gl.deleteTexture(texture);\n      }\n    }\n  }\n\n  beginTimer(): WebGLQuery {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      const query = gl2.createQuery() as WebGLQuery;\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported.');\n    }\n  }\n\n  endTimer() {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n  }\n\n  isTimerResultAvailable(query: WebGLQuery): boolean {\n    let available = false, disjoint = false;\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      disjoint = gl2.getParameter(ext.GPU_DISJOINT_EXT);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n\n    return available && !disjoint;\n  }\n\n  getTimerResult(query: WebGLQuery): number {\n    let timeElapsed = 0;\n    if (this.version === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      timeElapsed = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      gl2.deleteQuery(query);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n    // return miliseconds\n    return timeElapsed / 1000000;\n  }\n\n  async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await repeatedTry(() => this.isTimerResultAvailable(query));\n    return this.getTimerResult(query);\n  }\n\n  public async createAndWaitForFence(): Promise<void> {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  private createFence(gl: WebGLRenderingContext): FenceContext {\n    let isFencePassed: () => boolean;\n    const gl2 = gl as WebGL2RenderingContext;\n    const query = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n    gl.flush();\n    if (query === null) {\n      isFencePassed = () => true;\n    } else {\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(query, 0, 0);\n        return status === gl2.ALREADY_SIGNALED || status === gl2.CONDITION_SATISFIED;\n      };\n    }\n    return {query, isFencePassed};\n  }\n\n  async pollFence(fenceContext: FenceContext) {\n    return new Promise<void>(resolve => {\n      void this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n\n  private itemsToPoll: PollItem[] = [];\n\n  pollItems(): void {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {resolveFn} = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  private async addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\n    this.itemsToPoll.push({isDoneFn, resolveFn});\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    await repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    });\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from './backend';\nimport {Graph} from './graph';\nimport {Logger, Profiler} from './instrument';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nclass KernelOp {\n  constructor(public op: Operator, public node: Graph.Node) {}\n}\n\nexport class ExecutionPlan {\n  constructor(private graph: Graph, ops: Operator[], private profiler: Readonly<Profiler>) {\n    this.initialize(ops);\n  }\n\n  initialize(ops: Operator[]) {\n    this.profiler.event('session', 'ExecutionPlan.initialize', () => {\n      const graphNodes = this.graph.getNodes();\n      if (graphNodes.length !== ops.length) {\n        throw new Error('The size of nodes and OPs do not match.');\n      }\n\n      this._ops = ops.map((op, i) => new KernelOp(op, graphNodes[i]));\n      this.reset();\n\n      // look for starter node(s)\n      this._starter = [];\n      this._ops.forEach((op, i) => {\n        let resolved = true;\n        for (const input of op.node.inputs) {\n          if (\n              !this._values[input]                                   // not an initialized input\n              && this.graph.getInputIndices().indexOf(input) === -1  // not model input\n          ) {\n            resolved = false;\n            break;\n          }\n        }\n        if (resolved) {\n          this._starter.push(i);\n        }\n      });\n    });\n  }\n\n  reset() {\n    this._values = this.graph.getValues().map(i => i.tensor);\n  }\n\n  async execute(sessionHandler: SessionHandler, modelInputs: Tensor[]): Promise<Tensor[]> {\n    return this.profiler.event('session', 'ExecutionPlan.execute', async () => {\n      // reset mediem result\n      this.reset();\n\n      // create inference handler\n      const inferenceHandler = sessionHandler.createInferenceHandler();\n\n      // populate inputs value\n      const graphInputs = this.graph.getInputIndices();\n      if (modelInputs.length !== graphInputs.length) {\n        throw new Error(`number of input tensors don't match the number of inputs to the model: actual: ${\n            modelInputs.length} expected: ${graphInputs.length}`);\n      }\n\n      modelInputs.forEach((input, i) => {\n        const index = graphInputs[i];\n        this._values[index] = input;\n      });\n\n      // prepare running sequence\n      const sequence: number[] = this._starter.slice(0);\n\n      // execution iterations\n      const graphValues = this.graph.getValues();\n      const graphNodes = this.graph.getNodes();\n\n      let rear = 0;\n      while (rear < sequence.length) {\n        const thisOpIndex = sequence[rear++];\n        const thisOp = this._ops[thisOpIndex];\n\n        // check input\n        const inputList = thisOp.node.inputs.map(i => this._values[i]);\n        if (inputList.indexOf(undefined) !== -1) {\n          throw new Error(`unresolved input detected: op: ${thisOp.node}`);\n        }\n\n        // run\n        const inputTensors = inputList as Tensor[];\n        Logger.verbose(\n            'ExecPlan',\n            `Runing op:${thisOp.node.name} (${\n                inputTensors.map((t, i) => `'${thisOp.node.inputs[i]}': ${t.type}[${t.dims.join(',')}]`).join(', ')})`);\n\n        const outputList = await this.profiler.event(\n            'node', thisOp.node.name, async () => thisOp.op.impl(inferenceHandler, inputTensors, thisOp.op.context));\n\n        // check output\n        if (outputList.length !== thisOp.node.outputs.length) {\n          throw new Error('the size of output does not match model definition.');\n        }\n\n        // fill value\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          if (this._values[j]) {\n            throw new Error(`output [${j}] already has value: op:${thisOp.node.name}`);\n          }\n          this._values[j] = output;\n        });\n\n        // resolve downstream nodes\n        const downstreamNodes = new Set<number>();\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          for (const currentDownstreamNodeIndex of graphValues[j].to) {\n            const currentDownstreamNode = graphNodes[currentDownstreamNodeIndex];\n            let resolved = true;\n            for (const k of currentDownstreamNode.inputs) {\n              if (!this._values[k]) {\n                resolved = false;\n                break;\n              }\n            }\n            if (resolved) {\n              downstreamNodes.add(currentDownstreamNodeIndex);\n            }\n          }\n        });\n        sequence.push(...downstreamNodes);\n      }\n\n      const output: Tensor[] = [];\n      for (let i = 0; i < this.graph.getOutputIndices().length; i++) {\n        const outputIndex = this.graph.getOutputIndices()[i];\n        const outputTensor = this._values[outputIndex];\n        if (outputTensor === undefined) {\n          throw new Error(`required output [${outputIndex}] does not have value`);\n        }\n        if (outputIndex === 0) {\n          await outputTensor.getData();\n        } else {\n          // eslint-disable-next-line no-unused-expressions\n          outputTensor.data;\n        }\n        output.push(outputTensor);\n      }\n      Logger.verbose('ExecPlan', 'disposing of inferenceHandler');\n      inferenceHandler.dispose();\n      return output;\n    });\n  }\n\n  _values: Array<Tensor|undefined>;\n  _ops: KernelOp[];\n  _starter: number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from './attribute';\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\nimport {onnx} from './ort-schema/protobuf/onnx';\nimport {Tensor} from './tensor';\nimport {LongUtil, MAX_CLIP, MIN_CLIP, ProtoUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Graph {\n  export interface Shape {\n    readonly dims: readonly number[];\n  }\n  export interface ValueType {\n    readonly tensorType: Tensor.DataType;\n    readonly shape: Shape;\n  }\n  export interface Value {\n    // the tensor data. empty for non-initialized inputs\n    readonly tensor?: Tensor;\n\n    // index to the Node where the value comes from. -1 for initializer.\n    readonly from: number;\n\n    // indices to the Nodes where the values go to.\n    readonly to: readonly number[];\n\n    // value type specification. empty for non-input values.\n    readonly type?: ValueType;\n  }\n  export interface Node {\n    // name of the node\n    readonly name: string;\n\n    // the operator type\n    readonly opType: string;\n\n    // indices to the Values where the inputs come from.\n    readonly inputs: readonly number[];\n\n    // indices to the Values where the outpus go to.\n    readonly outputs: readonly number[];\n\n    // the attributes that used by the operator\n    readonly attributes: Attribute;\n  }\n\n  /**\n   * a Transformer is an instance that allows all possible transformation operations that applied to a graph\n   */\n  export interface Transformer {\n    removeAllIdentityNodes(): void;\n    removeAllDropoutNodes(): void;\n    fuseConvActivationNodes(): void;\n    // TODO: add generic functions to manipulate the graph\n  }\n\n  // an initializer can use transformer to transform the graph\n  export interface Initializer {\n    transformGraph(transformer: Transformer): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Graph {\n  getInputIndices(): readonly number[];\n  getInputNames(): readonly string[];\n  getOutputIndices(): readonly number[];\n  getOutputNames(): readonly string[];\n  getValues(): readonly Graph.Value[];\n  getNodes(): readonly Graph.Node[];\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-redeclare\nexport const Graph = {\n  /**\n   * construct a graph from a graph protobuf type\n   */\n  from: (graphProto: onnx.IGraphProto|ortFbs.Graph, initializer?: Graph.Initializer) =>\n      new GraphImpl(graphProto, initializer),\n};\n\nclass Value implements Graph.Value {\n  constructor(valueInfo?: onnx.IValueInfoProto) {\n    this._from = undefined;\n    this._to = [];\n    this.tensor = undefined;\n    this.type = undefined;\n\n    if (valueInfo) {\n      this.type = ProtoUtil.tensorValueTypeFromProto(valueInfo.type!.tensorType!);\n    }\n  }\n\n  _from?: number;  // -1 represent from initializer\n  get from() {\n    return this._from!;\n  }\n  _to: number[];\n  get to() {\n    return this._to;\n  }\n  type?: Graph.ValueType;\n  tensor?: Tensor;\n}\n\nclass Node implements Graph.Node {\n  constructor(_nodeProto: onnx.INodeProto|ortFbs.Node, name?: string) {\n    if (_nodeProto instanceof onnx.NodeProto) {\n      this.name = _nodeProto.name;\n      this.opType = _nodeProto.opType;\n      this.attributes = new Attribute(_nodeProto.attribute);\n    } else if (_nodeProto instanceof ortFbs.Node) {\n      this.name = name ?? _nodeProto.name()!;\n      this.opType = _nodeProto.opType()!;\n      this.attributes = new Attribute(ProtoUtil.tensorAttributesFromORTFormat(_nodeProto));\n    }\n\n    this.inputs = [];\n    this.outputs = [];\n    this.executeNode = true;\n  }\n\n  name: string;\n  opType: string;\n  inputs: number[];\n  outputs: number[];\n  attributes: Attribute;\n  executeNode: boolean;\n}\n\nclass GraphImpl implements Graph, Graph.Transformer {\n  private _allData: Value[];\n\n  private _allInputIndices: number[];\n  private _allInputNames: string[];\n\n  private _allOutputIndices: number[];\n  private _allOutputNames: string[];\n\n  private _nodes: Node[];\n\n  constructor(graph: onnx.IGraphProto|ortFbs.Graph, graphInitializer?: Graph.Initializer) {\n    if (!graph) {\n      throw new TypeError('graph is empty');\n    }\n\n    // build the graph - will throw exceptions if something fatal is detected\n    this.buildGraph(graph);\n\n    // execute any transformation logic for the graph (if applicable)\n    this.transformGraph(graphInitializer);\n\n    // check for cycles and other inconsistencies - will throw exceptions if something fatal is detected\n    this.checkIsAcyclic();\n  }\n\n  getInputIndices(): readonly number[] {\n    return this._allInputIndices;\n  }\n\n  getInputNames(): readonly string[] {\n    return this._allInputNames;\n  }\n\n  getOutputIndices(): readonly number[] {\n    return this._allOutputIndices;\n  }\n\n  getOutputNames(): readonly string[] {\n    return this._allOutputNames;\n  }\n\n  getValues(): readonly Graph.Value[] {\n    return this._allData;\n  }\n\n  getNodes(): readonly Graph.Node[] {\n    return this._nodes;\n  }\n\n  private buildGraph(graph: onnx.IGraphProto|ortFbs.Graph) {\n    // build the graph - will throw exceptions if something fatal is detected\n    if (graph instanceof onnx.GraphProto) {\n      this.buildGraphFromOnnxFormat(graph);\n    } else if (graph instanceof ortFbs.Graph) {\n      this.buildGraphFromOrtFormat(graph);\n    } else {\n      throw new TypeError('Graph type is not supported.');\n    }\n  }\n  private buildGraphFromOnnxFormat(graph: onnx.IGraphProto) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    if (!graph.input) {\n      throw new Error('missing information in graph: input');\n    }\n    const inputValueNames = [];\n    for (const i of graph.input) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated input name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      inputValueNames.push(i.name!);\n    }\n\n    // scan all initializers\n    if (!graph.initializer) {\n      throw new Error('missing information in graph: initializer');\n    }\n    for (const i of graph.initializer) {\n      let index = dataIndices.get(i.name!);\n      if (index === undefined) {\n        const value = new Value();\n        value.type = {\n          shape: {dims: ProtoUtil.tensorDimsFromProto(i.dims!)},\n          tensorType: ProtoUtil.tensorDataTypeFromProto(i.dataType!)\n        };\n        index = this._allData.push(value) - 1;\n        dataIndices.set(i.name!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromProto(i);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    if (!graph.output) {\n      throw new Error('missing information in graph: output');\n    }\n    for (const i of graph.output) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated output name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(i.name!);\n    }\n\n    // scan all nodes\n    if (!graph.node) {\n      throw new Error('missing information in graph: node');\n    }\n    for (const nodeProto of graph.node) {\n      if (!nodeProto.name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          const name = `unnamed_${nodeProto.opType}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            nodeProto.name = name;\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(nodeProto.name)) {\n        throw new Error(`duplicated node name: ${nodeProto.name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto)) - 1;\n      nodesIndices.set(nodeProto.name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n      if (!nodeProto.output) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (const output of nodeProto.output) {\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType === 'Constant') {\n          if (!nodeProto.attribute || nodeProto.attribute.length !== 1 || !nodeProto.attribute[0].t) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (!nodeProto.output || nodeProto.output.length !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromProto(nodeProto.attribute[0].t);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n\n      if (!nodeProto.input) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (const input of nodeProto.input) {\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          // handle exception when opset > 9 and roi not given\n          if (input === '' && nodeProto.input.length === 3 && nodeProto.opType === 'Resize') {\n            continue;\n          }\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto.name}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n\n    return true;\n  }\n\n  private buildGraphFromOrtFormat(graph: ortFbs.Graph) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    const inputValueNames = [];\n    for (let i = 0; i < graph.inputsLength(); i++) {\n      const inputName = graph.inputs(i);\n      if (dataIndices.has(inputName)) {\n        throw new Error(`duplicated input name: ${inputName}`);\n      }\n      // Find the input typeInfo from nodeargs\n      for (let j = 0; j < graph.nodeArgsLength(); j++) {\n        if (graph.nodeArgs(j)?.name() === inputName) {\n          const value = new Value();\n          const valueType = graph.nodeArgs(j)?.type()?.valueType();\n          if (valueType !== ortFbs.TypeInfoValue.tensor_type) {\n            throw new Error('Unexpected value type for the nodeArg.');\n          }\n          const valueInfo = graph.nodeArgs(j)!.type()!.value(new ortFbs.TensorTypeAndShape())!;\n          const type = ProtoUtil.tensorDataTypeFromProto(valueInfo.elemType());\n          const shape = valueInfo.shape()!;\n          const dims = [];\n          for (let k = 0; k < shape.dimLength()!; k++) {\n            dims.push(LongUtil.longToNumber(shape.dim(k)!.value()!.dimValue()!));\n          }\n          value.type = {shape: {dims}, tensorType: type};\n          const currentIndex = this._allData.push(value) - 1;\n          dataIndices.set(inputName, currentIndex);\n          inputValueNames.push(inputName);\n        }\n      }\n    }\n    // check initializers\n    for (let i = 0; i < graph.initializersLength(); i++) {\n      const initializer = graph.initializers(i)!;\n      let index = dataIndices.get(initializer.name()!);\n      if (index === undefined) {\n        const value = new Value();\n        const dims = ProtoUtil.tensorDimsFromORTFormat(initializer);\n        const type = ProtoUtil.tensorDataTypeFromProto(initializer.dataType());\n        value.type = {shape: {dims}, tensorType: type};\n        index = this._allData.push(value) - 1;\n        dataIndices.set(initializer.name()!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromOrtTensor(initializer);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    for (let i = 0; i < graph.outputsLength(); i++) {\n      const outputName = graph.outputs(i);\n      if (dataIndices.has(outputName)) {\n        throw new Error(`duplicated output name: ${outputName}`);\n      }\n      const currentIndex = this._allData.push(new Value()) - 1;\n      dataIndices.set(outputName, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(outputName);\n    }\n\n    // scan all nodes\n    if (!graph.nodes) {\n      throw new Error('missing information in graph: node');\n    }\n    for (let i = 0; i < graph.nodesLength(); i++) {\n      const nodeProto = graph.nodes(i);\n      let name = nodeProto!.name();\n      if (!name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          name = `unnamed_${nodeProto!.opType()}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            // an unique name is found. break.\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(name)) {\n        throw new Error(`duplicated node name: ${name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto!, name)) - 1;\n      nodesIndices.set(name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i);\n      if (nodeProto == null) {\n        throw new Error(`No node exists at index ${i}`);\n      }\n      if (nodeProto?.outputsLength() === 0) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto?.outputsLength(); j++) {\n        const output = nodeProto?.outputs(j);\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType() === 'Constant') {\n          if (nodeProto.attributesLength() !== 1 || !nodeProto.attributes(0)!.t()) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (nodeProto.outputsLength() !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromOrtTensor(nodeProto.attributes(0)!.t()!);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i)!;\n\n      if (nodeProto.inputsLength() === 0) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto.inputsLength()!; j++) {\n        const input = nodeProto.inputs(j)!;\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto!.name()}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n  }\n\n  private checkIsAcyclic() {\n    // go through the graph and check for cycles or other fatal inconsistencies\n    const starters: Set<number> = new Set<number>();\n    this._allInputIndices.forEach(i => {\n      const data = this._allData[i];\n      data._to.forEach(j => {\n        starters.add(j);\n      });\n    });\n\n    // Iterative DFS to check for cycles\n    const nodesStack = Array.from(starters);\n    const nodesState = new Array<string>(this._nodes.length).fill('white');\n\n    while (nodesStack.length > 0) {\n      const nodeIndex = nodesStack.pop()!;\n      // this node has now been processed completely. Mark this node 'black' to denote this.\n      if (nodesState[nodeIndex] === 'gray') {\n        nodesState[nodeIndex] = 'black';\n      } else {\n        // this node is under processing stage. mark this node 'gray' to denote this.\n        nodesStack.push(nodeIndex);\n        nodesState[nodeIndex] = 'gray';\n\n        this._nodes[nodeIndex].outputs.forEach((outgoingEdgeIndex) => {\n          const data = this._allData[outgoingEdgeIndex];\n          if (typeof data.tensor !== 'undefined') {\n            throw new Error('node outputs should not be initialized');\n          }\n          if (data._from !== nodeIndex) {\n            throw new Error('from property of the Value object doesn\\'t match index of Node being processed');\n          }\n          data._to.forEach((downstreamNodeIndex) => {\n            // back edge found - cyclic\n            if (nodesState[downstreamNodeIndex] === 'gray') {\n              throw new Error('model graph is cyclic');\n            }\n            // tree edge found - continue processing by adding it to stack\n            else if (nodesState[downstreamNodeIndex] === 'white') {\n              nodesStack.push(downstreamNodeIndex);\n            }\n          });\n        });\n      }\n    }\n  }\n\n  private transformGraph(graphInitializer?: Graph.Initializer): void {\n    // apply common transform\n    this.removeAllIdentityNodes();\n    this.removeAllDropoutNodes();\n    this.fuseConvActivationNodes();\n    // apply initializer specific transform\n    if (graphInitializer) {\n      graphInitializer.transformGraph(this);\n    }\n\n    // finalize graph\n    this.finalizeGraph();\n  }\n\n  /**\n   * finalize the graph.\n   *\n   * this function should be called after all the transformation completed.\n   * this function removes all unnecessary nodes and values from the graph\n   */\n  finalizeGraph() {\n    let offset = 0;\n    // delete all nodes that are not being executed\n    // The graph is represented using these two arrays\n    // this._nodes - Array holding the kernels to execute - each entry is a kernel pointing to this._allData\n    // this._allData - hold 2 fields - to [] & from - these feileds hold the graph map for inputs and outputs per node\n    // newIndices - remapping the graph after reading the flag 'executeNode'\n    const newIndices = new Array<number>(this._nodes.length, 0);\n    let nodePossition = 0;\n\n    for (let i = 0; i < this._nodes.length; i++) {\n      // giving new indexes to the nodes based on execution flag\n      newIndices[i] = nodePossition;\n      if (this._nodes[i].executeNode) {\n        if (nodePossition !== i) {\n          this._nodes[nodePossition] = this._nodes[i];\n        }\n        nodePossition++;\n\n      } else {\n        // delete all output values\n        this._nodes[i].outputs.forEach(ind => {\n          this._allData[ind]._from = -2;\n        });\n      }\n    }\n\n    // removing the unused nodes\n    this._nodes.splice(nodePossition, this._nodes.length - nodePossition);\n\n    // Updating this._allData according to the new this._nodes\n    for (let i = 0; i < this._allData.length; i++) {\n      const currentData = this._allData[i];\n      if (currentData._from !== undefined && currentData._from !== -1 && currentData._from !== -2) {\n        currentData._from = newIndices[currentData._from];\n      }\n\n      for (let j = 0; j < currentData._to.length; j++) {\n        if (currentData._to[j] >= 0) {\n          currentData._to[j] = newIndices[currentData._to[j]];\n        } else {\n          throw new Error('Trying to update a removed node');\n        }\n      }\n    }\n\n    offset = 0;\n    // delete all values that are not being referenced\n    for (let i = 0; i < this._allData.length; i++) {\n      // if current value is neither linked to next node, nor an output value, remove it.\n      if (this._allData[i].from === -2 && this._allOutputIndices.indexOf(i + offset) === -1) {\n        offset++;\n        this._allData.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (offset > 0) {\n        let ind = -1;\n        // if current value is neither an input value nor an initializer, find the node it's\n        // coming from and update the corresponding node output\n        if (this._allData[i].from !== undefined && this._allData[i].from !== -1) {\n          ind = this._nodes[this._allData[i].from].outputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[this._allData[i].from].outputs[ind] = i;\n          }\n        } else {\n          // if current value is an input value, update its reference in inputIndices\n          ind = this._allInputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allInputIndices[ind] = i;\n          }\n        }\n\n        // find the node that the current value is linking to and update its input reference\n        this._allData[i].to.forEach(node => {\n          ind = this._nodes[node].inputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[node].inputs[ind] = i;\n          }\n        });\n        if (this._allData[i].to.length === 0) {\n          // if current value is a graph output, update its reference in outputIndices\n          ind = this._allOutputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allOutputIndices[ind] = i;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete the specifed node. Assume the node has one incoming input and the first output connected to other nodes.\n   * An input validation must be done before calling this function.\n   * @param nodeIndex The index of node to be deleted\n   */\n  private deleteNode(nodeIndex: number) {\n    const node = this._nodes[nodeIndex];\n    if (node.outputs.length > 1) {\n      for (let i = 1; i < node.outputs.length; i++) {\n        if (this._allData[node.outputs[i]].to.length > 0) {\n          throw new Error('Node deletion with more than one output connected to other nodes is not supported. ');\n        }\n      }\n    }\n\n    // this node wil not be executed\n    node.executeNode = false;\n    const inputValueIndex = node.inputs[0];\n    const outputValueIndex = node.outputs[0];\n    const nodesConsumingOutput = this._allData[outputValueIndex].to;\n\n    // remove this node from the to property of the input Value\n    for (let i = 0; i < node.inputs.length; i++) {\n      const delIndex = this._allData[node.inputs[i]].to.indexOf(nodeIndex);\n      // should not happen\n      if (delIndex === -1) {\n        throw new Error('The Value object doesn\\'t have the current Node in it\\'s \\'to\\' property ');\n      }\n      this._allData[node.inputs[i]].to.splice(delIndex, 1);\n    }\n\n    // clear node indices consuming this output Value\n    this._allData[outputValueIndex]._to = [];\n\n    // if the output of this node is a graph output, adjust the index appropriately\n    const index = this._allOutputIndices.indexOf(outputValueIndex);\n    if (index !== -1) {\n      this._allOutputIndices[index] = inputValueIndex;\n    }\n\n    // override the inputs for nodes consuming this node's output with the input to this node\n    if (nodesConsumingOutput && nodesConsumingOutput.length > 0) {\n      for (const nodeIndex of nodesConsumingOutput) {\n        const replaceIndex = this._nodes[nodeIndex].inputs.indexOf(outputValueIndex);\n        // should not happen\n        if (replaceIndex === -1) {\n          throw new Error('The Node object doesn\\'t have the output Value in it\\'s \\'inputs\\' property ');\n        }\n        this._nodes[nodeIndex].inputs[replaceIndex] = inputValueIndex;\n        this._allData[inputValueIndex].to.push(nodeIndex);\n      }\n    }\n  }\n\n  removeAllDropoutNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Dropout' nodes so that no time is wasted in execution\n      if (node.opType === 'Dropout') {\n        // the node should have exactly 1 input and 1 or 2 outputs\n        if (node.inputs.length !== 1) {\n          throw new Error('Dropout nodes should only contain one input. ');\n        }\n        if (node.outputs.length !== 1 && node.outputs.length !== 2) {\n          throw new Error('Dropout nodes should contain either 1 or 2 output(s)');\n        }\n        // the second output should not be referenced by any other node\n        if (node.outputs.length === 2 && this._allData[node.outputs[1]]._to.length !== 0) {\n          throw new Error('Dropout nodes\\'s second output should not be referenced by other nodes');\n        }\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  removeAllIdentityNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Identity' nodes so that no time is wasted in execution\n      if (node.opType === 'Identity') {\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  isActivation(n: Node): boolean {\n    switch (n.opType) {\n      // TODO: add other activation methods\n      case 'Relu':\n      case 'Sigmoid':\n      case 'Clip':\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  fuseConvActivationNodes() {\n    for (const node of this._nodes) {\n      if (node.opType === 'Conv') {\n        const next = this._allData[node.outputs[0]]._to;\n        if (next.length === 1 && this.isActivation(this._nodes[next[0]])) {\n          const child = this._nodes[next[0]];\n          if (child.opType === 'Clip') {\n            if (child.inputs.length === 1) {\n              try {\n                node.attributes.set(\n                    'activation_params', 'floats',\n                    [child.attributes.getFloat('min'), child.attributes.getFloat('max')]);\n              } catch (e) {\n                node.attributes.set('activation_params', 'floats', [MIN_CLIP, MAX_CLIP]);\n              }\n            } else if (\n                child.inputs.length >= 3 && this._allData[child.inputs[1]].tensor !== undefined &&\n                this._allData[child.inputs[2]].tensor !== undefined) {\n              node.attributes.set('activation_params', 'floats', [\n                this._allData[child.inputs[1]].tensor!.floatData[0], this._allData[child.inputs[2]].tensor!.floatData[0]\n              ]);\n            } else {\n              // Skip fusion with clip node since clip min and clip max are not coming from initializer\n              continue;\n            }\n          }\n          node.attributes.set('activation', 'string', (child.opType));\n          this.deleteNode(next[0]);\n        }\n      }\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\n\nimport {WebGLContext} from './backends/webgl/webgl-context';\n\nexport declare namespace Logger {\n  export interface SeverityTypeMap {\n    verbose: 'v';\n    info: 'i';\n    warning: 'w';\n    error: 'e';\n    fatal: 'f';\n  }\n\n  export type Severity = keyof SeverityTypeMap;\n\n  export type Provider = 'none'|'console';\n\n  /**\n   * Logging config that used to control the behavior of logger\n   */\n  export interface Config {\n    /**\n     * Specify the logging provider. 'console' by default\n     */\n    provider?: Provider;\n    /**\n     * Specify the minimal logger serverity. 'warning' by default\n     */\n    minimalSeverity?: Logger.Severity;\n    /**\n     * Whether to output date time in log. true by default\n     */\n    logDateTime?: boolean;\n    /**\n     * Whether to output source information (Not yet supported). false by default\n     */\n    logSourceLocation?: boolean;\n  }\n\n  export interface CategorizedLogger {\n    verbose(content: string): void;\n    info(content: string): void;\n    warning(content: string): void;\n    error(content: string): void;\n    fatal(content: string): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Logger {\n  (category: string): Logger.CategorizedLogger;\n\n  verbose(content: string): void;\n  verbose(category: string, content: string): void;\n  info(content: string): void;\n  info(category: string, content: string): void;\n  warning(content: string): void;\n  warning(category: string, content: string): void;\n  error(content: string): void;\n  error(category: string, content: string): void;\n  fatal(content: string): void;\n  fatal(category: string, content: string): void;\n\n  /**\n   * Reset the logger configuration.\n   * @param config specify an optional default config\n   */\n  reset(config?: Logger.Config): void;\n  /**\n   * Set the logger's behavior on the given category\n   * @param category specify a category string. If '*' is specified, all previous configuration will be overwritten. If\n   * '' is specified, the default behavior will be updated.\n   * @param config the config object to indicate the logger's behavior\n   */\n  set(category: string, config: Logger.Config): void;\n\n  /**\n   * Set the logger's behavior from ort-common env\n   * @param env the env used to set logger. Currently only setting loglevel is supported through Env.\n   */\n  setWithEnv(env: Env): void;\n}\n\ninterface LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string): void;\n}\nclass NoOpLoggerProvider implements LoggerProvider {\n  log(_severity: Logger.Severity, _content: string, _category?: string) {\n    // do nothing\n  }\n}\nclass ConsoleLoggerProvider implements LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string) {\n    // eslint-disable-next-line no-console\n    console.log(`${this.color(severity)} ${category ? '\\x1b[35m' + category + '\\x1b[0m ' : ''}${content}`);\n  }\n\n  private color(severity: Logger.Severity) {\n    switch (severity) {\n      case 'verbose':\n        return '\\x1b[34;40mv\\x1b[0m';\n      case 'info':\n        return '\\x1b[32mi\\x1b[0m';\n      case 'warning':\n        return '\\x1b[30;43mw\\x1b[0m';\n      case 'error':\n        return '\\x1b[31;40me\\x1b[0m';\n      case 'fatal':\n        return '\\x1b[101mf\\x1b[0m';\n      default:\n        throw new Error(`unsupported severity: ${severity}`);\n    }\n  }\n}\n\nconst SEVERITY_VALUE = {\n  verbose: 1000,\n  info: 2000,\n  warning: 4000,\n  error: 5000,\n  fatal: 6000\n};\n\nconst LOGGER_PROVIDER_MAP: {readonly [provider: string]: Readonly<LoggerProvider>} = {\n  ['none']: new NoOpLoggerProvider(),\n  ['console']: new ConsoleLoggerProvider()\n};\nconst LOGGER_DEFAULT_CONFIG = {\n  provider: 'console',\n  minimalSeverity: 'warning',\n  logDateTime: true,\n  logSourceLocation: false\n};\nlet LOGGER_CONFIG_MAP:\n    {[category: string]: Readonly<Required<Logger.Config>>} = {['']: LOGGER_DEFAULT_CONFIG as Required<Logger.Config>};\n\nfunction log(category: string): Logger.CategorizedLogger;\nfunction log(severity: Logger.Severity, content: string): void;\nfunction log(severity: Logger.Severity, category: string, content: string): void;\nfunction log(severity: Logger.Severity, arg1: string, arg2?: string): void;\nfunction log(\n    arg0: string|Logger.Severity, arg1?: string, arg2?: string|number, arg3?: number): Logger.CategorizedLogger|void {\n  if (arg1 === undefined) {\n    // log(category: string): Logger.CategorizedLogger;\n    return createCategorizedLogger(arg0);\n  } else if (arg2 === undefined) {\n    // log(severity, content);\n    logInternal(arg0 as Logger.Severity, arg1, 1);\n  } else if (typeof arg2 === 'number' && arg3 === undefined) {\n    // log(severity, content, stack)\n    logInternal(arg0 as Logger.Severity, arg1, arg2);\n  } else if (typeof arg2 === 'string' && arg3 === undefined) {\n    // log(severity, category, content)\n    logInternal(arg0 as Logger.Severity, arg2, 1, arg1);\n  } else if (typeof arg2 === 'string' && typeof arg3 === 'number') {\n    // log(severity, category, content, stack)\n    logInternal(arg0 as Logger.Severity, arg2, arg3, arg1);\n  } else {\n    throw new TypeError('input is valid');\n  }\n}\n\nfunction createCategorizedLogger(category: string): Logger.CategorizedLogger {\n  return {\n    verbose: log.verbose.bind(null, category),\n    info: log.info.bind(null, category),\n    warning: log.warning.bind(null, category),\n    error: log.error.bind(null, category),\n    fatal: log.fatal.bind(null, category)\n  };\n}\n\n// NOTE: argument 'category' is put the last parameter beacause typescript\n// doesn't allow optional argument put in front of required argument. This\n// order is different from a usual logging API.\nfunction logInternal(severity: Logger.Severity, content: string, stack: number, category?: string) {\n  const config = LOGGER_CONFIG_MAP[category || ''] || LOGGER_CONFIG_MAP[''];\n  if (SEVERITY_VALUE[severity] < SEVERITY_VALUE[config.minimalSeverity]) {\n    return;\n  }\n\n  if (config.logDateTime) {\n    content = `${new Date().toISOString()}|${content}`;\n  }\n\n  if (config.logSourceLocation) {\n    // TODO: calculate source location from 'stack'\n  }\n\n  LOGGER_PROVIDER_MAP[config.provider].log(severity, content, category);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nnamespace log {\n  export function verbose(content: string): void;\n  export function verbose(category: string, content: string): void;\n  export function verbose(arg0: string, arg1?: string) {\n    log('verbose', arg0, arg1);\n  }\n  export function info(content: string): void;\n  export function info(category: string, content: string): void;\n  export function info(arg0: string, arg1?: string) {\n    log('info', arg0, arg1);\n  }\n  export function warning(content: string): void;\n  export function warning(category: string, content: string): void;\n  export function warning(arg0: string, arg1?: string) {\n    log('warning', arg0, arg1);\n  }\n  export function error(content: string): void;\n  export function error(category: string, content: string): void;\n  export function error(arg0: string, arg1?: string) {\n    log('error', arg0, arg1);\n  }\n  export function fatal(content: string): void;\n  export function fatal(category: string, content: string): void;\n  export function fatal(arg0: string, arg1?: string) {\n    log('fatal', arg0, arg1);\n  }\n\n  export function reset(config?: Logger.Config): void {\n    LOGGER_CONFIG_MAP = {};\n    set('', config || {});\n  }\n  export function set(category: string, config: Logger.Config): void {\n    if (category === '*') {\n      reset(config);\n    } else {\n      const previousConfig = LOGGER_CONFIG_MAP[category] || LOGGER_DEFAULT_CONFIG;\n      LOGGER_CONFIG_MAP[category] = {\n        provider: config.provider || previousConfig.provider,\n        minimalSeverity: config.minimalSeverity || previousConfig.minimalSeverity,\n        logDateTime: (config.logDateTime === undefined) ? previousConfig.logDateTime : config.logDateTime,\n        logSourceLocation: (config.logSourceLocation === undefined) ? previousConfig.logSourceLocation :\n                                                                      config.logSourceLocation\n      };\n    }\n\n    // TODO: we want to support wildcard or regex?\n  }\n\n  export function setWithEnv(env: Env): void {\n    const config: Logger.Config = {};\n    if (env.logLevel) {\n      config.minimalSeverity = env.logLevel as Logger.Severity;\n    }\n    set('', config);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare, @typescript-eslint/naming-convention\nexport const Logger: Logger = log;\n\nexport declare namespace Profiler {\n  export interface Config {\n    maxNumberEvents?: number;\n    flushBatchSize?: number;\n    flushIntervalInMilliseconds?: number;\n  }\n\n  export type EventCategory = 'session'|'node'|'op'|'backend';\n\n  export interface Event {\n    end(): void|Promise<void>;\n  }\n}\n// TODO\n// class WebGLEvent implements Profiler.Event {}\n\nclass Event implements Profiler.Event {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number,\n      private endCallback: (e: Event) => void|Promise<void>, public timer?: WebGLQuery, public ctx?: WebGLContext) {}\n\n  async end() {\n    return this.endCallback(this);\n  }\n\n  async checkTimer(): Promise<number> {\n    if (this.ctx === undefined || this.timer === undefined) {\n      throw new Error('No webgl timer found');\n    } else {\n      this.ctx.endTimer();\n      return this.ctx.waitForQueryAndGetTime(this.timer);\n    }\n  }\n}\n\nclass EventRecord {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number, public endTime: number) {}\n}\n\nexport class Profiler {\n  static create(config?: Profiler.Config): Profiler {\n    if (config === undefined) {\n      return new this();\n    }\n    return new this(config.maxNumberEvents, config.flushBatchSize, config.flushIntervalInMilliseconds);\n  }\n\n  private constructor(maxNumberEvents?: number, flushBatchSize?: number, flushIntervalInMilliseconds?: number) {\n    this._started = false;\n    this._maxNumberEvents = maxNumberEvents === undefined ? 10000 : maxNumberEvents;\n    this._flushBatchSize = flushBatchSize === undefined ? 10 : flushBatchSize;\n    this._flushIntervalInMilliseconds = flushIntervalInMilliseconds === undefined ? 5000 : flushIntervalInMilliseconds;\n  }\n\n  // start profiling\n  start() {\n    this._started = true;\n    this._timingEvents = [];\n    this._flushTime = now();\n    this._flushPointer = 0;\n  }\n\n  // stop profiling\n  stop() {\n    this._started = false;\n    for (; this._flushPointer < this._timingEvents.length; this._flushPointer++) {\n      this.logOneEvent(this._timingEvents[this._flushPointer]);\n    }\n  }\n\n  // create an event scope for the specific function\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T, ctx?: WebGLContext): T;\n  event<T>(category: Profiler.EventCategory, name: string, func: () => Promise<T>, ctx?: WebGLContext): Promise<T>;\n\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T | Promise<T>, ctx?: WebGLContext): T\n      |Promise<T> {\n    const event = this._started ? this.begin(category, name, ctx) : undefined;\n    let isPromise = false;\n\n    const res = func();\n\n    // we consider a then-able object is a promise\n    if (res && typeof (res as Promise<T>).then === 'function') {\n      isPromise = true;\n      return new Promise<T>((resolve, reject) => {\n        (res as Promise<T>)\n            .then(\n                async value => {  // fulfilled\n                  if (event) {\n                    await event.end();\n                  }\n                  resolve(value);\n                },\n                async reason => {  // rejected\n                  if (event) {\n                    await event.end();\n                  }\n                  reject(reason);\n                });\n      });\n    }\n    if (!isPromise && event) {\n      const eventRes = event.end();\n      if (eventRes && typeof eventRes.then === 'function') {\n        return new Promise<T>((resolve, reject) => {\n          (eventRes).then(\n              () => {  // fulfilled\n                resolve(res);\n              },\n              (reason) => {  // rejected\n                reject(reason);\n              });\n        });\n      }\n    }\n    return res;\n  }\n\n  // begin an event\n  begin(category: Profiler.EventCategory, name: string, ctx?: WebGLContext): Event {\n    if (!this._started) {\n      throw new Error('profiler is not started yet');\n    }\n    if (ctx === undefined) {\n      const startTime = now();\n      this.flush(startTime);\n      return new Event(category, name, startTime, e => this.endSync(e));\n    } else {\n      const timer: WebGLQuery = ctx.beginTimer();\n      return new Event(category, name, 0, async e => this.end(e), timer, ctx);\n    }\n  }\n\n  // end the specific event\n  private async end(event: Event): Promise<void> {\n    const endTime: number = await event.checkTimer();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private endSync(event: Event): void {\n    const endTime: number = now();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private logOneEvent(event: EventRecord) {\n    Logger.verbose(\n        `Profiler.${event.category}`,\n        `${(event.endTime - event.startTime).toFixed(2)}ms on event '${event.name}' at ${event.endTime.toFixed(2)}`);\n  }\n\n  private flush(currentTime: number) {\n    if (this._timingEvents.length - this._flushPointer >= this._flushBatchSize ||\n        currentTime - this._flushTime >= this._flushIntervalInMilliseconds) {\n      // should flush when either batch size accumlated or interval elepsed\n\n      for (const previousPointer = this._flushPointer; this._flushPointer < previousPointer + this._flushBatchSize &&\n           this._flushPointer < this._timingEvents.length;\n           this._flushPointer++) {\n        this.logOneEvent(this._timingEvents[this._flushPointer]);\n      }\n\n      this._flushTime = now();\n    }\n  }\n\n  get started() {\n    return this._started;\n  }\n  private _started = false;\n  private _timingEvents: EventRecord[];\n\n  private readonly _maxNumberEvents: number;\n\n  private readonly _flushBatchSize: number;\n  private readonly _flushIntervalInMilliseconds: number;\n\n  private _flushTime: number;\n  private _flushPointer = 0;\n}\n\n/**\n * returns a number to represent the current timestamp in a resolution as high as possible.\n */\nexport const now = (typeof performance !== 'undefined' && performance.now) ? () => performance.now() : Date.now;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\n\nimport {Graph} from './graph';\nimport {OpSet} from './opset';\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\nimport {onnx} from './ort-schema/protobuf/onnx';\nimport {LongUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport class Model {\n  // empty model\n  constructor() {}\n\n  load(buf: Uint8Array, graphInitializer?: Graph.Initializer, isOrtFormat?: boolean): void {\n    if (!isOrtFormat) {\n      // isOrtFormat === false || isOrtFormat === undefined\n      try {\n        this.loadFromOnnxFormat(buf, graphInitializer);\n        return;\n      } catch (e) {\n        if (isOrtFormat !== undefined) {\n          throw e;\n        }\n      }\n    }\n\n    this.loadFromOrtFormat(buf, graphInitializer);\n  }\n\n  private loadFromOnnxFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const modelProto = onnx.ModelProto.decode(buf);\n    const irVersion = LongUtil.longToNumber(modelProto.irVersion);\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n\n    this._opsets =\n        modelProto.opsetImport.map(i => ({domain: i.domain as string, version: LongUtil.longToNumber(i.version!)}));\n\n    this._graph = Graph.from(modelProto.graph!, graphInitializer);\n  }\n\n  private loadFromOrtFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const fb = new flatbuffers.ByteBuffer(buf);\n    const ortModel = ortFbs.InferenceSession.getRootAsInferenceSession(fb).model()!;\n    const irVersion = LongUtil.longToNumber(ortModel.irVersion());\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n    this._opsets = [];\n    for (let i = 0; i < ortModel.opsetImportLength(); i++) {\n      const opsetId = ortModel.opsetImport(i)!;\n      this._opsets.push({domain: opsetId?.domain() as string, version: LongUtil.longToNumber(opsetId.version()!)});\n    }\n\n    this._graph = Graph.from(ortModel.graph()!, graphInitializer);\n  }\n\n  private _graph: Graph;\n  get graph(): Graph {\n    return this._graph;\n  }\n\n  private _opsets: OpSet[];\n  get opsets(): readonly OpSet[] {\n    return this._opsets;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from './backend';\nimport {Graph} from './graph';\nimport {Tensor} from './tensor';\n\nexport type OperatorImplementation<T> = (inferenceHandler: InferenceHandler, inputs: Tensor[], context: T) => Tensor[];\nexport type OperatorInitialization<T> = (node: Graph.Node, graph: Graph) => T;\n\nexport interface Operator {\n  readonly impl: OperatorImplementation<unknown>;\n  readonly context: Graph.Node|unknown;\n}\n\nexport const NUMBER_TYPES: readonly Tensor.DataType[] =\n    ['float32', 'float64', 'int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const INT_TYPES: readonly Tensor.DataType[] = ['int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const FLOAT_TYPES: readonly Tensor.DataType[] = ['float32', 'float64'];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from './graph';\nimport {OperatorImplementation, OperatorInitialization} from './operators';\n\nexport interface OpSet {\n  domain: string;\n  version: number;\n}\nexport declare namespace OpSet {\n  /**\n   * Domain of an opset, it can be an empty string(default value, represent for ai.onnx), or 'ai.onnx.ml'\n   */\n  type Domain = ''|'ai.onnx.ml'|'com.microsoft';\n  /**\n   * A resolve rule consists of 4 or 5 items: opType, opSetDomain, versionSelector, operatorImplementation and\n   * operatorInitialization (optional)\n   */\n  type ResolveRule = [\n    string, Domain, string, OperatorImplementation<Graph.Node>\n  ]|[string, Domain, string, OperatorImplementation<unknown>, OperatorInitialization<unknown>];\n}\n\nexport function resolveOperator(node: Graph.Node, opsets: readonly OpSet[], rules: readonly OpSet.ResolveRule[]) {\n  for (const rule of rules) {\n    const opType = rule[0];\n    const domain = rule[1];\n    const versionSelector = rule[2];\n    const opImpl = rule[3];\n    const opInit = rule[4];\n\n    if (node.opType === opType) {  // operator type matches\n      for (const opset of opsets) {\n        // opset '' and 'ai.onnx' are considered the same.\n        if (opset.domain === domain || (opset.domain === 'ai.onnx' && domain === '')) {  // opset domain found\n          if (matchSelector(opset.version, versionSelector)) {\n            return {opImpl, opInit};\n          }\n        }\n      }\n    }\n  }\n\n  throw new TypeError(`cannot resolve operator '${node.opType}' with opsets: ${\n      opsets.map(set => `${set.domain || 'ai.onnx'} v${set.version}`).join(', ')}`);\n}\n\nfunction matchSelector(version: number, selector: string): boolean {\n  if (selector.endsWith('+')) {\n    // minimum version match ('7+' expects version>=7)\n    const rangeStart = Number.parseInt(selector.substring(0, selector.length - 1), 10);\n    return !isNaN(rangeStart) && rangeStart <= version;\n  } else if (selector.split('-').length === 2) {\n    // range match ('6-8' expects 6<=version<=8)\n    const pair = selector.split('-');\n    const rangeStart = Number.parseInt(pair[0], 10);\n    const rangeEnd = Number.parseInt(pair[1], 10);\n    return !isNaN(rangeStart) && !isNaN(rangeEnd) && rangeStart <= version && version <= rangeEnd;\n  } else {\n    // exact match ('7' expects version===7)\n    return Number.parseInt(selector, 10) === version;\n  }\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n/* eslint-disable */\n\nimport {flatbuffers} from 'flatbuffers';\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum AttributeType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    INT = 2,\n    STRING = 3,\n    TENSOR = 4,\n    GRAPH = 5,\n    FLOATS = 6,\n    INTS = 7,\n    STRINGS = 8,\n    TENSORS = 9,\n    GRAPHS = 10,\n    SPARSE_TENSOR = 11,\n    SPARSE_TENSORS = 12\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum DimensionValueType {UNKNOWN = 0, VALUE = 1, PARAM = 2}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TensorDataType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    UINT8 = 2,\n    INT8 = 3,\n    UINT16 = 4,\n    INT16 = 5,\n    INT32 = 6,\n    INT64 = 7,\n    STRING = 8,\n    BOOL = 9,\n    FLOAT16 = 10,\n    DOUBLE = 11,\n    UINT32 = 12,\n    UINT64 = 13,\n    COMPLEX64 = 14,\n    COMPLEX128 = 15,\n    BFLOAT16 = 16,\n    FLOAT8E4M3FN = 17,\n    FLOAT8E4M3FNUZ = 18,\n    FLOAT8E5M2 = 19,\n    FLOAT8E5M2FNUZ = 20,\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum NodeType {Primitive = 0, Fused = 1}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TypeInfoValue {NONE = 0, tensor_type = 1, sequence_type = 2, map_type = 3}\n}\n\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Shape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Shape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Shape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getSizePrefixedRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Dimension= obj\n     * @returns onnxruntime.experimental.fbs.Dimension\n     */\n    dim(index: number, obj?: onnxruntime.experimental.fbs.Dimension): onnxruntime.experimental.fbs.Dimension|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Dimension())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    dimLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startShape(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimOffset\n     */\n    static addDim(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, dimOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createShape(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Shape.startShape(builder);\n      Shape.addDim(builder, dimOffset);\n      return Shape.endShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Dimension {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Dimension\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Dimension {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getSizePrefixedRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.DimensionValue= obj\n     * @returns onnxruntime.experimental.fbs.DimensionValue|null\n     */\n    value(obj?: onnxruntime.experimental.fbs.DimensionValue): onnxruntime.experimental.fbs.DimensionValue|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.DimensionValue())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimension(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimension(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimension(\n        builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset,\n        denotationOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Dimension.startDimension(builder);\n      Dimension.addValue(builder, valueOffset);\n      Dimension.addDenotation(builder, denotationOffset);\n      return Dimension.endDimension(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class DimensionValue {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns DimensionValue\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DimensionValue {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getSizePrefixedRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.DimensionValueType\n     */\n    dimType(): onnxruntime.experimental.fbs.DimensionValueType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    dimValue(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    dimParam(): string|null;\n    dimParam(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    dimParam(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimensionValue(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.DimensionValueType dimType\n     */\n    static addDimType(builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType) {\n      builder.addFieldInt8(0, dimType, onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long dimValue\n     */\n    static addDimValue(builder: flatbuffers.Builder, dimValue: flatbuffers.Long) {\n      builder.addFieldInt64(1, dimValue, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimParamOffset\n     */\n    static addDimParam(builder: flatbuffers.Builder, dimParamOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimParamOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimensionValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimensionValue(\n        builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType,\n        dimValue: flatbuffers.Long, dimParamOffset: flatbuffers.Offset): flatbuffers.Offset {\n      DimensionValue.startDimensionValue(builder);\n      DimensionValue.addDimType(builder, dimType);\n      DimensionValue.addDimValue(builder, dimValue);\n      DimensionValue.addDimParam(builder, dimParamOffset);\n      return DimensionValue.endDimensionValue(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TensorTypeAndShape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TensorTypeAndShape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TensorTypeAndShape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape): TensorTypeAndShape {\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getSizePrefixedRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape):\n        TensorTypeAndShape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    elemType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Shape= obj\n     * @returns onnxruntime.experimental.fbs.Shape|null\n     */\n    shape(obj?: onnxruntime.experimental.fbs.Shape): onnxruntime.experimental.fbs.Shape|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Shape())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensorTypeAndShape(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType elemType\n     */\n    static addElemType(builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, elemType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset shapeOffset\n     */\n    static addShape(builder: flatbuffers.Builder, shapeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, shapeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensorTypeAndShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensorTypeAndShape(\n        builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType,\n        shapeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TensorTypeAndShape.startTensorTypeAndShape(builder);\n      TensorTypeAndShape.addElemType(builder, elemType);\n      TensorTypeAndShape.addShape(builder, shapeOffset);\n      return TensorTypeAndShape.endTensorTypeAndShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class MapType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns MapType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): MapType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getSizePrefixedRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    keyType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    valueType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startMapType(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType keyType\n     */\n    static addKeyType(builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, keyType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueTypeOffset\n     */\n    static addValueType(builder: flatbuffers.Builder, valueTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, valueTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endMapType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createMapType(\n        builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType,\n        valueTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      MapType.startMapType(builder);\n      MapType.addKeyType(builder, keyType);\n      MapType.addValueType(builder, valueTypeOffset);\n      return MapType.endMapType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SequenceType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SequenceType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SequenceType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getSizePrefixedRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    elemType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSequenceType(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset elemTypeOffset\n     */\n    static addElemType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, elemTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSequenceType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSequenceType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SequenceType.startSequenceType(builder);\n      SequenceType.addElemType(builder, elemTypeOffset);\n      return SequenceType.endSequenceType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class EdgeEnd {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns EdgeEnd\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): EdgeEnd {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      return this.bb!.readUint32(this.bb_pos);\n    }\n\n    /**\n     * @returns number\n     */\n    srcArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 4);\n    }\n\n    /**\n     * @returns number\n     */\n    dstArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number node_index\n     * @param number src_arg_index\n     * @param number dst_arg_index\n     * @returns flatbuffers.Offset\n     */\n    static createEdgeEnd(\n        builder: flatbuffers.Builder, node_index: number, src_arg_index: number,\n        dst_arg_index: number): flatbuffers.Offset {\n      builder.prep(4, 12);\n      builder.writeInt32(dst_arg_index);\n      builder.writeInt32(src_arg_index);\n      builder.writeInt32(node_index);\n      return builder.offset();\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class NodeEdge {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns NodeEdge\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): NodeEdge {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getSizePrefixedRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    inputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    outputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNodeEdge(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number nodeIndex\n     */\n    static addNodeIndex(builder: flatbuffers.Builder, nodeIndex: number) {\n      builder.addFieldInt32(0, nodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputEdgesOffset\n     */\n    static addInputEdges(builder: flatbuffers.Builder, inputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, inputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputEdgesOffset\n     */\n    static addOutputEdges(builder: flatbuffers.Builder, outputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, outputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNodeEdge(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNodeEdge(\n        builder: flatbuffers.Builder, nodeIndex: number, inputEdgesOffset: flatbuffers.Offset,\n        outputEdgesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      NodeEdge.startNodeEdge(builder);\n      NodeEdge.addNodeIndex(builder, nodeIndex);\n      NodeEdge.addInputEdges(builder, inputEdgesOffset);\n      NodeEdge.addOutputEdges(builder, outputEdgesOffset);\n      return NodeEdge.endNodeEdge(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Node {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Node\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Node {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getSizePrefixedRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    sinceVersion(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    index(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    opType(): string|null;\n    opType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    opType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.NodeType\n     */\n    type(): onnxruntime.experimental.fbs.NodeType {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.NodeType.Primitive;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    executionProviderType(): string|null;\n    executionProviderType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    executionProviderType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Attribute= obj\n     * @returns onnxruntime.experimental.fbs.Attribute\n     */\n    attributes(index: number, obj?: onnxruntime.experimental.fbs.Attribute): onnxruntime.experimental.fbs.Attribute\n        |null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Attribute())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    attributesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    inputArgCounts(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    inputArgCountsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Int32Array\n     */\n    inputArgCountsArray(): Int32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ?\n          new Int32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    implicitInputs(index: number): string;\n    implicitInputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    implicitInputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    implicitInputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNode(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number sinceVersion\n     */\n    static addSinceVersion(builder: flatbuffers.Builder, sinceVersion: number) {\n      builder.addFieldInt32(3, sinceVersion, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number index\n     */\n    static addIndex(builder: flatbuffers.Builder, index: number) {\n      builder.addFieldInt32(4, index, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opTypeOffset\n     */\n    static addOpType(builder: flatbuffers.Builder, opTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, opTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.NodeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.NodeType) {\n      builder.addFieldInt32(6, type, onnxruntime.experimental.fbs.NodeType.Primitive);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset executionProviderTypeOffset\n     */\n    static addExecutionProviderType(builder: flatbuffers.Builder, executionProviderTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, executionProviderTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset attributesOffset\n     */\n    static addAttributes(builder: flatbuffers.Builder, attributesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, attributesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createAttributesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startAttributesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputArgCountsOffset\n     */\n    static addInputArgCounts(builder: flatbuffers.Builder, inputArgCountsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, inputArgCountsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputArgCountsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputArgCountsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset implicitInputsOffset\n     */\n    static addImplicitInputs(builder: flatbuffers.Builder, implicitInputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, implicitInputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createImplicitInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startImplicitInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNode(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNode(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, sinceVersion: number, index: number, opTypeOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.NodeType, executionProviderTypeOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset, attributesOffset: flatbuffers.Offset,\n        inputArgCountsOffset: flatbuffers.Offset, implicitInputsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Node.startNode(builder);\n      Node.addName(builder, nameOffset);\n      Node.addDocString(builder, docStringOffset);\n      Node.addDomain(builder, domainOffset);\n      Node.addSinceVersion(builder, sinceVersion);\n      Node.addIndex(builder, index);\n      Node.addOpType(builder, opTypeOffset);\n      Node.addType(builder, type);\n      Node.addExecutionProviderType(builder, executionProviderTypeOffset);\n      Node.addInputs(builder, inputsOffset);\n      Node.addOutputs(builder, outputsOffset);\n      Node.addAttributes(builder, attributesOffset);\n      Node.addInputArgCounts(builder, inputArgCountsOffset);\n      Node.addImplicitInputs(builder, implicitInputsOffset);\n      return Node.endNode(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class ValueInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns ValueInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): ValueInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getSizePrefixedRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    type(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startValueInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset typeOffset\n     */\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, typeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endValueInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createValueInfo(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        typeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      ValueInfo.startValueInfo(builder);\n      ValueInfo.addName(builder, nameOffset);\n      ValueInfo.addDocString(builder, docStringOffset);\n      ValueInfo.addType(builder, typeOffset);\n      return ValueInfo.endValueInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TypeInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TypeInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TypeInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getSizePrefixedRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TypeInfoValue\n     */\n    valueType(): onnxruntime.experimental.fbs.TypeInfoValue {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TypeInfoValue.NONE;\n    }\n\n    /**\n     * @param flatbuffers.Table obj\n     * @returns ?flatbuffers.Table\n     */\n    value<T extends flatbuffers.Table>(obj: T): T|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTypeInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TypeInfoValue valueType\n     */\n    static addValueType(builder: flatbuffers.Builder, valueType: onnxruntime.experimental.fbs.TypeInfoValue) {\n      builder.addFieldInt8(1, valueType, onnxruntime.experimental.fbs.TypeInfoValue.NONE);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTypeInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTypeInfo(\n        builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset,\n        valueType: onnxruntime.experimental.fbs.TypeInfoValue, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TypeInfo.startTypeInfo(builder);\n      TypeInfo.addDenotation(builder, denotationOffset);\n      TypeInfo.addValueType(builder, valueType);\n      TypeInfo.addValue(builder, valueOffset);\n      return TypeInfo.endTypeInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class OperatorSetId {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns OperatorSetId\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): OperatorSetId {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getSizePrefixedRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    version(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startOperatorSetId(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: flatbuffers.Long) {\n      builder.addFieldInt64(1, version, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endOperatorSetId(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createOperatorSetId(\n        builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset, version: flatbuffers.Long): flatbuffers.Offset {\n      OperatorSetId.startOperatorSetId(builder);\n      OperatorSetId.addDomain(builder, domainOffset);\n      OperatorSetId.addVersion(builder, version);\n      return OperatorSetId.endOperatorSetId(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Tensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Tensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Tensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getSizePrefixedRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    dataType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    rawData(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    rawDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint8Array\n     */\n    rawDataArray(): Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ?\n          new Uint8Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    stringData(index: number): string;\n    stringData(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    stringData(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensor(builder: flatbuffers.Builder) {\n      builder.startObject(6);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType dataType\n     */\n    static addDataType(builder: flatbuffers.Builder, dataType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(3, dataType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset rawDataOffset\n     */\n    static addRawData(builder: flatbuffers.Builder, rawDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, rawDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createRawDataVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(1, data.length, 1);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt8(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startRawDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(1, numElems, 1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringDataOffset\n     */\n    static addStringData(builder: flatbuffers.Builder, stringDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, stringDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringDataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensor(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset, dataType: onnxruntime.experimental.fbs.TensorDataType,\n        rawDataOffset: flatbuffers.Offset, stringDataOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Tensor.startTensor(builder);\n      Tensor.addName(builder, nameOffset);\n      Tensor.addDocString(builder, docStringOffset);\n      Tensor.addDims(builder, dimsOffset);\n      Tensor.addDataType(builder, dataType);\n      Tensor.addRawData(builder, rawDataOffset);\n      Tensor.addStringData(builder, stringDataOffset);\n      return Tensor.endTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SparseTensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SparseTensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SparseTensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getSizePrefixedRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    values(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    indices(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSparseTensor(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valuesOffset\n     */\n    static addValues(builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valuesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset indicesOffset\n     */\n    static addIndices(builder: flatbuffers.Builder, indicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, indicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSparseTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSparseTensor(\n        builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset, indicesOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SparseTensor.startSparseTensor(builder);\n      SparseTensor.addValues(builder, valuesOffset);\n      SparseTensor.addIndices(builder, indicesOffset);\n      SparseTensor.addDims(builder, dimsOffset);\n      return SparseTensor.endSparseTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Attribute {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Attribute\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Attribute {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getSizePrefixedRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.AttributeType\n     */\n    type(): onnxruntime.experimental.fbs.AttributeType {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.AttributeType.UNDEFINED;\n    }\n\n    /**\n     * @returns number\n     */\n    f(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    i(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    s(): string|null;\n    s(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    s(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    t(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    g(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    floats(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    floatsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Float32Array\n     */\n    floatsArray(): Float32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ?\n          new Float32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    ints(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    intsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    strings(index: number): string;\n    strings(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    strings(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    tensors(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    tensorsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph\n     */\n    graphs(index: number, obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    graphsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startAttribute(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.AttributeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.AttributeType) {\n      builder.addFieldInt32(2, type, onnxruntime.experimental.fbs.AttributeType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number f\n     */\n    static addF(builder: flatbuffers.Builder, f: number) {\n      builder.addFieldFloat32(3, f, 0.0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long i\n     */\n    static addI(builder: flatbuffers.Builder, i: flatbuffers.Long) {\n      builder.addFieldInt64(4, i, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sOffset\n     */\n    static addS(builder: flatbuffers.Builder, sOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, sOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tOffset\n     */\n    static addT(builder: flatbuffers.Builder, tOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, tOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset gOffset\n     */\n    static addG(builder: flatbuffers.Builder, gOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, gOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset floatsOffset\n     */\n    static addFloats(builder: flatbuffers.Builder, floatsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, floatsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createFloatsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addFloat32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startFloatsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset intsOffset\n     */\n    static addInts(builder: flatbuffers.Builder, intsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, intsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createIntsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startIntsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringsOffset\n     */\n    static addStrings(builder: flatbuffers.Builder, stringsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, stringsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tensorsOffset\n     */\n    static addTensors(builder: flatbuffers.Builder, tensorsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, tensorsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createTensorsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startTensorsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphsOffset\n     */\n    static addGraphs(builder: flatbuffers.Builder, graphsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, graphsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createGraphsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startGraphsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endAttribute(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createAttribute(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.AttributeType, f: number, i: flatbuffers.Long, sOffset: flatbuffers.Offset,\n        tOffset: flatbuffers.Offset, gOffset: flatbuffers.Offset, floatsOffset: flatbuffers.Offset,\n        intsOffset: flatbuffers.Offset, stringsOffset: flatbuffers.Offset, tensorsOffset: flatbuffers.Offset,\n        graphsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Attribute.startAttribute(builder);\n      Attribute.addName(builder, nameOffset);\n      Attribute.addDocString(builder, docStringOffset);\n      Attribute.addType(builder, type);\n      Attribute.addF(builder, f);\n      Attribute.addI(builder, i);\n      Attribute.addS(builder, sOffset);\n      Attribute.addT(builder, tOffset);\n      Attribute.addG(builder, gOffset);\n      Attribute.addFloats(builder, floatsOffset);\n      Attribute.addInts(builder, intsOffset);\n      Attribute.addStrings(builder, stringsOffset);\n      Attribute.addTensors(builder, tensorsOffset);\n      Attribute.addGraphs(builder, graphsOffset);\n      return Attribute.endAttribute(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Graph {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Graph\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Graph {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getSizePrefixedRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    initializers(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    initializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.ValueInfo= obj\n     * @returns onnxruntime.experimental.fbs.ValueInfo\n     */\n    nodeArgs(index: number, obj?: onnxruntime.experimental.fbs.ValueInfo): onnxruntime.experimental.fbs.ValueInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.ValueInfo())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeArgsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Node= obj\n     * @returns onnxruntime.experimental.fbs.Node\n     */\n    nodes(index: number, obj?: onnxruntime.experimental.fbs.Node): onnxruntime.experimental.fbs.Node|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Node())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    maxNodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.NodeEdge= obj\n     * @returns onnxruntime.experimental.fbs.NodeEdge\n     */\n    nodeEdges(index: number, obj?: onnxruntime.experimental.fbs.NodeEdge): onnxruntime.experimental.fbs.NodeEdge|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? (obj || new onnxruntime.experimental.fbs.NodeEdge())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SparseTensor= obj\n     * @returns onnxruntime.experimental.fbs.SparseTensor\n     */\n    sparseInitializers(index: number, obj?: onnxruntime.experimental.fbs.SparseTensor):\n        onnxruntime.experimental.fbs.SparseTensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SparseTensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    sparseInitializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startGraph(builder: flatbuffers.Builder) {\n      builder.startObject(8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset initializersOffset\n     */\n    static addInitializers(builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, initializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeArgsOffset\n     */\n    static addNodeArgs(builder: flatbuffers.Builder, nodeArgsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, nodeArgsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeArgsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeArgsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodesOffset\n     */\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, nodesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number maxNodeIndex\n     */\n    static addMaxNodeIndex(builder: flatbuffers.Builder, maxNodeIndex: number) {\n      builder.addFieldInt32(3, maxNodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeEdgesOffset\n     */\n    static addNodeEdges(builder: flatbuffers.Builder, nodeEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, nodeEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeEdgesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sparseInitializersOffset\n     */\n    static addSparseInitializers(builder: flatbuffers.Builder, sparseInitializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, sparseInitializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSparseInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSparseInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endGraph(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createGraph(\n        builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset, nodeArgsOffset: flatbuffers.Offset,\n        nodesOffset: flatbuffers.Offset, maxNodeIndex: number, nodeEdgesOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset,\n        sparseInitializersOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Graph.startGraph(builder);\n      Graph.addInitializers(builder, initializersOffset);\n      Graph.addNodeArgs(builder, nodeArgsOffset);\n      Graph.addNodes(builder, nodesOffset);\n      Graph.addMaxNodeIndex(builder, maxNodeIndex);\n      Graph.addNodeEdges(builder, nodeEdgesOffset);\n      Graph.addInputs(builder, inputsOffset);\n      Graph.addOutputs(builder, outputsOffset);\n      Graph.addSparseInitializers(builder, sparseInitializersOffset);\n      return Graph.endGraph(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Model {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Model\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Model {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getSizePrefixedRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    irVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.OperatorSetId= obj\n     * @returns onnxruntime.experimental.fbs.OperatorSetId\n     */\n    opsetImport(index: number, obj?: onnxruntime.experimental.fbs.OperatorSetId):\n        onnxruntime.experimental.fbs.OperatorSetId|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.OperatorSetId())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    opsetImportLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerName(): string|null;\n    producerName(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerName(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerVersion(): string|null;\n    producerVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    modelVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    graph(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphDocString(): string|null;\n    graphDocString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphDocString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startModel(builder: flatbuffers.Builder) {\n      builder.startObject(9);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long irVersion\n     */\n    static addIrVersion(builder: flatbuffers.Builder, irVersion: flatbuffers.Long) {\n      builder.addFieldInt64(0, irVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opsetImportOffset\n     */\n    static addOpsetImport(builder: flatbuffers.Builder, opsetImportOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, opsetImportOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOpsetImportVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOpsetImportVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerNameOffset\n     */\n    static addProducerName(builder: flatbuffers.Builder, producerNameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, producerNameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerVersionOffset\n     */\n    static addProducerVersion(builder: flatbuffers.Builder, producerVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, producerVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long modelVersion\n     */\n    static addModelVersion(builder: flatbuffers.Builder, modelVersion: flatbuffers.Long) {\n      builder.addFieldInt64(5, modelVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphOffset\n     */\n    static addGraph(builder: flatbuffers.Builder, graphOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, graphOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphDocStringOffset\n     */\n    static addGraphDocString(builder: flatbuffers.Builder, graphDocStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, graphDocStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endModel(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createModel(\n        builder: flatbuffers.Builder, irVersion: flatbuffers.Long, opsetImportOffset: flatbuffers.Offset,\n        producerNameOffset: flatbuffers.Offset, producerVersionOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, modelVersion: flatbuffers.Long, docStringOffset: flatbuffers.Offset,\n        graphOffset: flatbuffers.Offset, graphDocStringOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Model.startModel(builder);\n      Model.addIrVersion(builder, irVersion);\n      Model.addOpsetImport(builder, opsetImportOffset);\n      Model.addProducerName(builder, producerNameOffset);\n      Model.addProducerVersion(builder, producerVersionOffset);\n      Model.addDomain(builder, domainOffset);\n      Model.addModelVersion(builder, modelVersion);\n      Model.addDocString(builder, docStringOffset);\n      Model.addGraph(builder, graphOffset);\n      Model.addGraphDocString(builder, graphDocStringOffset);\n      return Model.endModel(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class KernelCreateInfos {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns KernelCreateInfos\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): KernelCreateInfos {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos): KernelCreateInfos {\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getSizePrefixedRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos):\n        KernelCreateInfos {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    nodeIndices(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndicesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint32Array\n     */\n    nodeIndicesArray(): Uint32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ?\n          new Uint32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    kernelDefHashes(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readUint64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    kernelDefHashesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startKernelCreateInfos(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeIndicesOffset\n     */\n    static addNodeIndices(builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nodeIndicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeIndicesVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeIndicesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelDefHashesOffset\n     */\n    static addKernelDefHashes(builder: flatbuffers.Builder, kernelDefHashesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, kernelDefHashesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createKernelDefHashesVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startKernelDefHashesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endKernelCreateInfos(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createKernelCreateInfos(\n        builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset,\n        kernelDefHashesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      KernelCreateInfos.startKernelCreateInfos(builder);\n      KernelCreateInfos.addNodeIndices(builder, nodeIndicesOffset);\n      KernelCreateInfos.addKernelDefHashes(builder, kernelDefHashesOffset);\n      return KernelCreateInfos.endKernelCreateInfos(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SubGraphSessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SubGraphSessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SubGraphSessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState): SubGraphSessionState {\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getSizePrefixedRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState):\n        SubGraphSessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphId(): string|null;\n    graphId(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphId(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSubGraphSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphIdOffset\n     */\n    static addGraphId(builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, graphIdOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSubGraphSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      builder.requiredField(offset, 4);  // graph_id\n      return offset;\n    }\n\n    static createSubGraphSessionState(\n        builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SubGraphSessionState.startSubGraphSessionState(builder);\n      SubGraphSessionState.addGraphId(builder, graphIdOffset);\n      SubGraphSessionState.addSessionState(builder, sessionStateOffset);\n      return SubGraphSessionState.endSubGraphSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getSizePrefixedRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.KernelCreateInfos= obj\n     * @returns onnxruntime.experimental.fbs.KernelCreateInfos|null\n     */\n    kernels(obj?: onnxruntime.experimental.fbs.KernelCreateInfos): onnxruntime.experimental.fbs.KernelCreateInfos|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.KernelCreateInfos())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SubGraphSessionState= obj\n     * @returns onnxruntime.experimental.fbs.SubGraphSessionState\n     */\n    subGraphSessionStates(index: number, obj?: onnxruntime.experimental.fbs.SubGraphSessionState):\n        onnxruntime.experimental.fbs.SubGraphSessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SubGraphSessionState())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    subGraphSessionStatesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelsOffset\n     */\n    static addKernels(builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, kernelsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset subGraphSessionStatesOffset\n     */\n    static addSubGraphSessionStates(builder: flatbuffers.Builder, subGraphSessionStatesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, subGraphSessionStatesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSubGraphSessionStatesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSubGraphSessionStatesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSessionState(\n        builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset,\n        subGraphSessionStatesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SessionState.startSessionState(builder);\n      SessionState.addKernels(builder, kernelsOffset);\n      SessionState.addSubGraphSessionStates(builder, subGraphSessionStatesOffset);\n      return SessionState.endSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class InferenceSession {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns InferenceSession\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): InferenceSession {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getSizePrefixedRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @returns boolean\n     */\n    static bufferHasIdentifier(bb: flatbuffers.ByteBuffer): boolean {\n      return bb.__has_identifier('ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    ortVersion(): string|null;\n    ortVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    ortVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Model= obj\n     * @returns onnxruntime.experimental.fbs.Model|null\n     */\n    model(obj?: onnxruntime.experimental.fbs.Model): onnxruntime.experimental.fbs.Model|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Model())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startInferenceSession(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset ortVersionOffset\n     */\n    static addOrtVersion(builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, ortVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset modelOffset\n     */\n    static addModel(builder: flatbuffers.Builder, modelOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, modelOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endInferenceSession(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishSizePrefixedInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM', true);\n    }\n\n    static createInferenceSession(\n        builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset, modelOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      InferenceSession.startInferenceSession(builder);\n      InferenceSession.addOrtVersion(builder, ortVersionOffset);\n      InferenceSession.addModel(builder, modelOffset);\n      InferenceSession.addSessionState(builder, sessionStateOffset);\n      return InferenceSession.endInferenceSession(builder);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\n\nimport {Session} from './session';\nimport {Tensor as OnnxjsTensor} from './tensor';\n\nexport class OnnxjsSessionHandler implements SessionHandler {\n  constructor(private session: Session) {\n    this.inputNames = this.session.inputNames;\n    this.outputNames = this.session.outputNames;\n  }\n\n  async dispose(): Promise<void> {}\n  inputNames: readonly string[];\n  outputNames: readonly string[];\n  async run(\n      feeds: SessionHandler.FeedsType, _fetches: SessionHandler.FetchesType,\n      _options: InferenceSession.RunOptions): Promise<SessionHandler.ReturnType> {\n    const inputMap = new Map<string, OnnxjsTensor>();\n    for (const name in feeds) {\n      if (Object.hasOwnProperty.call(feeds, name)) {\n        const feed = feeds[name];\n        inputMap.set(\n            name,\n            new OnnxjsTensor(\n                feed.dims, feed.type as OnnxjsTensor.DataType, undefined, undefined,\n                feed.data as OnnxjsTensor.NumberType));\n      }\n    }\n    const outputMap = await this.session.run(inputMap);\n    const output: SessionHandler.ReturnType = {};\n    outputMap.forEach((tensor, name) => {\n      output[name] = new Tensor(tensor.type, tensor.data, tensor.dims);\n    });\n    return output;\n  }\n  startProfiling(): void {\n    this.session.startProfiling();\n  }\n  endProfiling(): void {\n    this.session.endProfiling();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {promisify} from 'util';\n\nimport {resolveBackend, SessionHandlerType} from './backend';\nimport {ExecutionPlan} from './execution-plan';\nimport {Graph} from './graph';\nimport {Profiler} from './instrument';\nimport {Model} from './model';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nexport declare namespace Session {\n  export interface Config {\n    backendHint?: string;\n    profiler?: Profiler.Config;\n  }\n\n  export interface Context {\n    profiler: Readonly<Profiler>;\n    graphInputTypes?: Tensor.DataType[];\n    graphInputDims?: Array<readonly number[]>;\n  }\n}\n\nexport class Session {\n  constructor(config: Session.Config = {}) {\n    this._initialized = false;\n    this.backendHint = config.backendHint;\n    this.profiler = Profiler.create(config.profiler);\n    this.context = {profiler: this.profiler, graphInputTypes: [], graphInputDims: []};\n  }\n\n  get inputNames(): readonly string[] {\n    return this._model.graph.getInputNames();\n  }\n  get outputNames(): readonly string[] {\n    return this._model.graph.getOutputNames();\n  }\n\n  startProfiling() {\n    this.profiler.start();\n  }\n\n  endProfiling() {\n    this.profiler.stop();\n  }\n\n  async loadModel(uri: string): Promise<void>;\n  async loadModel(buffer: ArrayBuffer, byteOffset?: number, length?: number): Promise<void>;\n  async loadModel(buffer: Uint8Array): Promise<void>;\n  async loadModel(arg: string|ArrayBuffer|Uint8Array, byteOffset?: number, length?: number): Promise<void> {\n    await this.profiler.event('session', 'Session.loadModel', async () => {\n      // resolve backend and session handler\n      const backend = await resolveBackend(this.backendHint);\n      this.sessionHandler = backend.createSessionHandler(this.context);\n\n      this._model = new Model();\n      if (typeof arg === 'string') {\n        const isOrtFormat = arg.endsWith('.ort');\n        if (typeof process !== 'undefined' && process.versions && process.versions.node) {\n          // node\n          const buf = await promisify(readFile)(arg);\n          this.initialize(buf, isOrtFormat);\n        } else {\n          // browser\n          const response = await fetch(arg);\n          const buf = await response.arrayBuffer();\n          this.initialize(new Uint8Array(buf), isOrtFormat);\n        }\n      } else if (!ArrayBuffer.isView(arg)) {\n        // load model from ArrayBuffer\n        const arr = new Uint8Array(arg, byteOffset || 0, length || arg.byteLength);\n        this.initialize(arr);\n      } else {\n        // load model from Uint8array\n        this.initialize(arg);\n      }\n    });\n  }\n\n  private initialize(modelProtoBlob: Uint8Array, isOrtFormat?: boolean): void {\n    if (this._initialized) {\n      throw new Error('already initialized');\n    }\n\n    this.profiler.event('session', 'Session.initialize', () => {\n      // load graph\n      const graphInitializer =\n          this.sessionHandler.transformGraph ? this.sessionHandler as Graph.Initializer : undefined;\n      this._model.load(modelProtoBlob, graphInitializer, isOrtFormat);\n\n      // graph is completely initialzied at this stage , let the interested handlers know\n      if (this.sessionHandler.onGraphInitialized) {\n        this.sessionHandler.onGraphInitialized(this._model.graph);\n      }\n      // initialize each operator in the graph\n      this.initializeOps(this._model.graph);\n\n      // instantiate an ExecutionPlan object to be used by the Session object\n      this._executionPlan = new ExecutionPlan(this._model.graph, this._ops, this.profiler);\n    });\n\n    this._initialized = true;\n  }\n\n  async run(inputs: Map<string, Tensor>|Tensor[]): Promise<Map<string, Tensor>> {\n    if (!this._initialized) {\n      throw new Error('session not initialized yet');\n    }\n\n    return this.profiler.event('session', 'Session.run', async () => {\n      const inputTensors = this.normalizeAndValidateInputs(inputs);\n\n      const outputTensors = await this._executionPlan.execute(this.sessionHandler, inputTensors);\n\n      return this.createOutput(outputTensors);\n    });\n  }\n\n  private normalizeAndValidateInputs(inputs: Map<string, Tensor>|Tensor[]): Tensor[] {\n    const modelInputNames = this._model.graph.getInputNames();\n\n    // normalize inputs\n    // inputs: Tensor[]\n    if (Array.isArray(inputs)) {\n      if (inputs.length !== modelInputNames.length) {\n        throw new Error(`incorrect input array length: expected ${modelInputNames.length} but got ${inputs.length}`);\n      }\n    }\n    // convert map to array\n    // inputs: Map<string, Tensor>\n    else {\n      if (inputs.size !== modelInputNames.length) {\n        throw new Error(`incorrect input map size: expected ${modelInputNames.length} but got ${inputs.size}`);\n      }\n\n      const sortedInputs = new Array<Tensor>(inputs.size);\n      let sortedInputsIndex = 0;\n      for (let i = 0; i < modelInputNames.length; ++i) {\n        const tensor = inputs.get(modelInputNames[i]);\n        if (!tensor) {\n          throw new Error(`missing input tensor for: '${name}'`);\n        }\n        sortedInputs[sortedInputsIndex++] = tensor;\n      }\n\n      inputs = sortedInputs;\n    }\n\n    // validate dims requirements\n    // First session run - graph input data is not cached for the session\n    if (!this.context.graphInputTypes || this.context.graphInputTypes.length === 0 || !this.context.graphInputDims ||\n        this.context.graphInputDims.length === 0) {\n      const modelInputIndices = this._model.graph.getInputIndices();\n      const modelValues = this._model.graph.getValues();\n\n      const graphInputDims = new Array<readonly number[]>(modelInputIndices.length);\n\n      for (let i = 0; i < modelInputIndices.length; ++i) {\n        const graphInput = modelValues[modelInputIndices[i]];\n        graphInputDims[i] = graphInput.type!.shape.dims;\n\n        // cached for second and subsequent runs.\n        // Some parts of the framework works on the assumption that the graph and types and shapes are static\n        this.context.graphInputTypes!.push(graphInput.type!.tensorType);\n        this.context.graphInputDims!.push(inputs[i].dims);\n      }\n\n      this.validateInputTensorDims(graphInputDims, inputs, true);\n    }\n\n    // Second and subsequent session runs - graph input data is cached for the session\n    else {\n      this.validateInputTensorDims(this.context.graphInputDims, inputs, false);\n    }\n\n    // validate types requirement\n    this.validateInputTensorTypes(this.context.graphInputTypes!, inputs);\n\n    return inputs;\n  }\n\n  private validateInputTensorTypes(graphInputTypes: Tensor.DataType[], givenInputs: Tensor[]) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedType = graphInputTypes[i];\n      const actualType = givenInputs[i].type;\n      if (expectedType !== actualType) {\n        throw new Error(`input tensor[${i}] check failed: expected type '${expectedType}' but got ${actualType}`);\n      }\n    }\n  }\n\n  private validateInputTensorDims(\n      graphInputDims: Array<readonly number[]>, givenInputs: Tensor[], noneDimSupported: boolean) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      let expectedDims = graphInputDims[i];\n      const actualDims = givenInputs[i].dims;\n\n      if (!this.compareTensorDims(expectedDims, actualDims, noneDimSupported)) {\n        throw new Error(`input tensor[${i}] check failed: expected shape '[${expectedDims.join(',')}]' but got [${\n            actualDims.join(',')}]`);\n      }\n    }\n  }\n\n  private compareTensorDims(expectedDims: readonly number[], actualDims: readonly number[], noneDimSupported: boolean):\n      boolean {\n    if (expectedDims.length !== actualDims.length) {\n      return false;\n    }\n\n    for (let i = 0; i < expectedDims.length; ++i) {\n      if (expectedDims[i] !== actualDims[i] && (!noneDimSupported || expectedDims[i] !== 0) && expectedDims[i] !== null) {\n        // data shape mis-match AND not a 'None' dimension.\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private createOutput(outputTensors: Tensor[]): Map<string, Tensor> {\n    const modelOutputNames = this._model.graph.getOutputNames();\n    if (outputTensors.length !== modelOutputNames.length) {\n      throw new Error('expected number of outputs do not match number of generated outputs');\n    }\n\n    const output = new Map<string, Tensor>();\n    for (let i = 0; i < modelOutputNames.length; ++i) {\n      output.set(modelOutputNames[i], outputTensors[i]);\n    }\n\n    return output;\n  }\n\n  private initializeOps(graph: Graph): void {\n    const nodes = graph.getNodes();\n    this._ops = new Array(nodes.length);\n\n    for (let i = 0; i < nodes.length; i++) {\n      this._ops[i] = this.sessionHandler.resolve(nodes[i], this._model.opsets, graph);\n    }\n  }\n\n  private _model: Model;\n  private _initialized: boolean;\n\n  private _ops: Operator[];\n  private _executionPlan: ExecutionPlan;\n\n  private backendHint?: string;\n\n  private sessionHandler: SessionHandlerType;\n  private context: Session.Context;\n  private profiler: Readonly<Profiler>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Guid} from 'guid-typescript';\nimport Long from 'long';\n\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\nimport {onnx} from './ort-schema/protobuf/onnx';\nimport {decodeUtf8String, ProtoUtil, ShapeUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Tensor {\n  export interface DataTypeMap {\n    bool: Uint8Array;\n    float32: Float32Array;\n    float64: Float64Array;\n    string: string[];\n    int8: Int8Array;\n    uint8: Uint8Array;\n    int16: Int16Array;\n    uint16: Uint16Array;\n    int32: Int32Array;\n    uint32: Uint32Array;\n  }\n\n  export type DataType = keyof DataTypeMap;\n\n  export type StringType = Tensor.DataTypeMap['string'];\n  export type BooleanType = Tensor.DataTypeMap['bool'];\n  export type IntegerType = Tensor.DataTypeMap['int8']|Tensor.DataTypeMap['uint8']|Tensor.DataTypeMap['int16']|\n                            Tensor.DataTypeMap['uint16']|Tensor.DataTypeMap['int32']|Tensor.DataTypeMap['uint32'];\n  export type FloatType = Tensor.DataTypeMap['float32']|Tensor.DataTypeMap['float64'];\n  export type NumberType = BooleanType|IntegerType|FloatType;\n\n  export type Id = Guid;\n}\n\ntype TensorData = Tensor.DataTypeMap[Tensor.DataType];\n\ntype DataProvider = (id: Tensor.Id) => TensorData;\ntype AsyncDataProvider = (id: Tensor.Id) => Promise<TensorData>;\n\nexport class Tensor {\n  /**\n   * get the underlying tensor data\n   */\n  get data(): TensorData {\n    if (this.cache === undefined) {\n      const data = this.dataProvider!(this.dataId);\n      if (data.length !== this.size) {\n        throw new Error('Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.');\n      }\n      this.cache = data;\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the underlying string tensor data. Should only use when type is STRING\n   */\n  get stringData() {\n    if (this.type !== 'string') {\n      throw new TypeError('data type is not string');\n    }\n\n    return this.data as Tensor.StringType;\n  }\n\n  /**\n   * get the underlying integer tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL)\n   */\n  get integerData() {\n    switch (this.type) {\n      case 'uint8':\n      case 'int8':\n      case 'uint16':\n      case 'int16':\n      case 'int32':\n      case 'uint32':\n      case 'bool':\n        return this.data as Tensor.IntegerType;\n\n      default:\n        throw new TypeError('data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)');\n    }\n  }\n\n  /**\n   * get the underlying float tensor data. Should only use when type is one of the following: (FLOAT, DOUBLE)\n   */\n  get floatData() {\n    switch (this.type) {\n      case 'float32':\n      case 'float64':\n        return this.data as Tensor.FloatType;\n\n      default:\n        throw new TypeError('data type is not float (float32, float64)');\n    }\n  }\n\n  /**\n   * get the underlying number tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL, FLOAT, DOUBLE)\n   */\n  get numberData() {\n    if (this.type !== 'string') {\n      return this.data as Tensor.NumberType;\n    }\n    throw new TypeError('type cannot be non-number (string)');\n  }\n\n  /**\n   * get value of an element at the given indices\n   */\n  get(indices: readonly number[]): Tensor.DataTypeMap[Tensor.DataType][number] {\n    return this.data[ShapeUtil.indicesToOffset(indices, this.strides)];\n  }\n\n  /**\n   * set value of an element at the given indices\n   */\n  set(indices: readonly number[], value: Tensor.DataTypeMap[Tensor.DataType][number]) {\n    this.data[ShapeUtil.indicesToOffset(indices, this.strides)] = value;\n  }\n\n  /**\n   * get the underlying tensor data asynchronously\n   */\n  async getData(): Promise<TensorData> {\n    if (this.cache === undefined) {\n      this.cache = await this.asyncDataProvider!(this.dataId);\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the number of elements in the tensor\n   */\n  public readonly size: number;\n\n  private _strides: readonly number[];\n  /**\n   * get the strides for each dimension\n   */\n  get strides(): readonly number[] {\n    if (!this._strides) {\n      this._strides = ShapeUtil.computeStrides(this.dims);\n    }\n    return this._strides;\n  }\n\n  constructor(\n      /**\n       * get the dimensions of the tensor\n       */\n      public readonly dims: readonly number[],\n      /**\n       * get the type of the tensor\n       */\n      public readonly type: Tensor.DataType, private dataProvider?: DataProvider,\n      private asyncDataProvider?: AsyncDataProvider, private cache?: TensorData,\n      /**\n       * get the data ID that used to map to a tensor data\n       */\n      public readonly dataId: Guid = Guid.create()) {\n    this.size = ShapeUtil.validateDimsAndCalcSize(dims);\n    const size = this.size;\n    const empty = (dataProvider === undefined && asyncDataProvider === undefined && cache === undefined);\n\n    if (cache !== undefined) {\n      if (cache.length !== size) {\n        throw new RangeError('Input dims doesn\\'t match data length.');\n      }\n    }\n\n    if (type === 'string') {\n      if (cache !== undefined && (!Array.isArray(cache) || !cache.every(i => typeof i === 'string'))) {\n        throw new TypeError('cache should be a string array');\n      }\n\n      if (empty) {\n        this.cache = new Array<string>(size);\n      }\n    } else {\n      if (cache !== undefined) {\n        const constructor = dataviewConstructor(type);\n        if (!(cache instanceof constructor)) {\n          throw new TypeError(`cache should be type ${constructor.name}`);\n        }\n      }\n\n      if (empty) {\n        const buf = new ArrayBuffer(size * sizeof(type));\n        this.cache = createView(buf, type);\n      }\n    }\n  }\n\n  /**\n   * Construct new Tensor from a ONNX Tensor object\n   * @param tensorProto the ONNX Tensor\n   */\n  static fromProto(tensorProto: onnx.ITensorProto): Tensor {\n    if (!tensorProto) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const type = ProtoUtil.tensorDataTypeFromProto(tensorProto.dataType!);\n    const dims = ProtoUtil.tensorDimsFromProto(tensorProto.dims!);\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      tensorProto.stringData!.forEach((str, i) => {\n        value.data[i] = decodeUtf8String(str);\n      });\n\n    } else if (\n        tensorProto.rawData && typeof tensorProto.rawData.byteLength === 'number' &&\n        tensorProto.rawData.byteLength > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource =\n          new DataView(tensorProto.rawData.buffer, tensorProto.rawData.byteOffset, tensorProto.rawData.byteLength);\n      const elementSize = sizeofProto(tensorProto.dataType!);\n      const length = tensorProto.rawData.byteLength / elementSize;\n\n      if (tensorProto.rawData.byteLength % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, tensorProto.dataType!, i * elementSize);\n        dataDest[i] = n;\n      }\n    } else {\n      // populate value from array\n      let array: Array<number|Long>;\n      switch (tensorProto.dataType) {\n        case onnx.TensorProto.DataType.FLOAT:\n          array = tensorProto.floatData!;\n          break;\n        case onnx.TensorProto.DataType.INT32:\n        case onnx.TensorProto.DataType.INT16:\n        case onnx.TensorProto.DataType.UINT16:\n        case onnx.TensorProto.DataType.INT8:\n        case onnx.TensorProto.DataType.UINT8:\n        case onnx.TensorProto.DataType.BOOL:\n          array = tensorProto.int32Data!;\n          break;\n        case onnx.TensorProto.DataType.INT64:\n          array = tensorProto.int64Data!;\n          break;\n        case onnx.TensorProto.DataType.DOUBLE:\n          array = tensorProto.doubleData!;\n          break;\n        case onnx.TensorProto.DataType.UINT32:\n        case onnx.TensorProto.DataType.UINT64:\n          array = tensorProto.uint64Data!;\n          break;\n        default:\n          // should never run here\n          throw new Error('unspecific error');\n      }\n\n      if (array === null || array === undefined) {\n        throw new Error('failed to populate data from a tensorproto value');\n      }\n\n      const data = value.data;\n      if (data.length !== array.length) {\n        throw new Error('array length mismatch');\n      }\n\n      for (let i = 0; i < array.length; i++) {\n        const element = array[i];\n        if (Long.isLong(element)) {\n          data[i] = longToNumber(element, tensorProto.dataType);\n        } else {\n          data[i] = element;\n        }\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Construct new Tensor from raw data\n   * @param data the raw data object. Should be a string array for 'string' tensor, and the corresponding typed array\n   * for other types of tensor.\n   * @param dims the dimensions of the tensor\n   * @param type the type of the tensor\n   */\n  static fromData(data: Tensor.DataTypeMap[Tensor.DataType], dims: readonly number[], type: Tensor.DataType) {\n    return new Tensor(dims, type, undefined, undefined, data);\n  }\n\n  static fromOrtTensor(ortTensor: ortFbs.Tensor) {\n    if (!ortTensor) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const dims = ProtoUtil.tensorDimsFromORTFormat(ortTensor);\n    const type = ProtoUtil.tensorDataTypeFromProto(ortTensor.dataType());\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      for (let i = 0; i < ortTensor.stringDataLength(); i++) {\n        value.data[i] = ortTensor.stringData(i);\n      }\n\n    } else if (\n        ortTensor.rawDataArray() && typeof ortTensor.rawDataLength() === 'number' && ortTensor.rawDataLength() > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource = new DataView(\n          ortTensor.rawDataArray()!.buffer, ortTensor.rawDataArray()!.byteOffset, ortTensor.rawDataLength());\n      const elementSize = sizeofProto(ortTensor.dataType());\n      const length = ortTensor.rawDataLength() / elementSize;\n\n      if (ortTensor.rawDataLength() % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, ortTensor.dataType(), i * elementSize);\n        dataDest[i] = n;\n      }\n    }\n    return value;\n  }\n}\n\nfunction sizeof(type: Tensor.DataType): number {\n  switch (type) {\n    case 'bool':\n    case 'int8':\n    case 'uint8':\n      return 1;\n    case 'int16':\n    case 'uint16':\n      return 2;\n    case 'int32':\n    case 'uint32':\n    case 'float32':\n      return 4;\n    case 'float64':\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${type}`);\n  }\n}\n\nfunction sizeofProto(type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.UINT8:\n    case onnx.TensorProto.DataType.INT8:\n    case onnx.TensorProto.DataType.BOOL:\n      return 1;\n    case onnx.TensorProto.DataType.UINT16:\n    case onnx.TensorProto.DataType.INT16:\n      return 2;\n    case onnx.TensorProto.DataType.FLOAT:\n    case onnx.TensorProto.DataType.INT32:\n    case onnx.TensorProto.DataType.UINT32:\n      return 4;\n    case onnx.TensorProto.DataType.INT64:\n    case onnx.TensorProto.DataType.DOUBLE:\n    case onnx.TensorProto.DataType.UINT64:\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n\nfunction createView(dataBuffer: ArrayBuffer, type: Tensor.DataType) {\n  return new (dataviewConstructor(type))(dataBuffer);\n}\n\nfunction dataviewConstructor(type: Tensor.DataType) {\n  switch (type) {\n    case 'bool':\n    case 'uint8':\n      return Uint8Array;\n    case 'int8':\n      return Int8Array;\n    case 'int16':\n      return Int16Array;\n    case 'uint16':\n      return Uint16Array;\n    case 'int32':\n      return Int32Array;\n    case 'uint32':\n      return Uint32Array;\n    case 'float32':\n      return Float32Array;\n    case 'float64':\n      return Float64Array;\n    default:\n      // should never run to here\n      throw new Error('unspecified error');\n  }\n}\n\n// convert a long number to a 32-bit integer (cast-down)\nfunction longToNumber(i: Long, type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  // INT64, UINT32, UINT64\n  if (type === onnx.TensorProto.DataType.INT64 || type === ortFbs.TensorDataType.INT64) {\n    if (i.greaterThanOrEqual(2147483648) || i.lessThan(-2147483648)) {\n      throw new TypeError('int64 is not supported');\n    }\n  } else if (\n      type === onnx.TensorProto.DataType.UINT32 || type === ortFbs.TensorDataType.UINT32 ||\n      type === onnx.TensorProto.DataType.UINT64 || type === ortFbs.TensorDataType.UINT64) {\n    if (i.greaterThanOrEqual(4294967296) || i.lessThan(0)) {\n      throw new TypeError('uint64 is not supported');\n    }\n  } else {\n    throw new TypeError(`not a LONG type: ${onnx.TensorProto.DataType[type]}`);\n  }\n\n  return i.toNumber();\n}\n\n// read one value from TensorProto\nfunction readProto(view: DataView, type: onnx.TensorProto.DataType|ortFbs.TensorDataType, byteOffset: number): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.BOOL:\n    case onnx.TensorProto.DataType.UINT8:\n      return view.getUint8(byteOffset);\n    case onnx.TensorProto.DataType.INT8:\n      return view.getInt8(byteOffset);\n    case onnx.TensorProto.DataType.UINT16:\n      return view.getUint16(byteOffset, true);\n    case onnx.TensorProto.DataType.INT16:\n      return view.getInt16(byteOffset, true);\n    case onnx.TensorProto.DataType.FLOAT:\n      return view.getFloat32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT32:\n      return view.getInt32(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT32:\n      return view.getUint32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), false), type);\n    case onnx.TensorProto.DataType.DOUBLE:\n      return view.getFloat64(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), true), type);\n    default:\n      throw new Error(`cannot read from DataView for type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\nimport Long from 'long';\n\nimport {Graph} from './graph';\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\nimport {onnx} from './ort-schema/protobuf/onnx';\nimport {Tensor} from './tensor';\n\n// check the inputs shape before running an OP.\n// return true when the inputs pass the check\n// return false when the inputs do not fit the requirement\n// throw exception when fatal error or not implemented\nexport function checkInputsShape(inputs: Tensor[], ...expectedDimensions: number[]): boolean {\n  if (!inputs || inputs.length !== expectedDimensions.length) {\n    return false;\n  }\n  for (let i = 0; i < inputs.length; i++) {\n    if (!inputs[i].dims || inputs[i].dims.length !== expectedDimensions[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Evaluates the given expression and asserts error message if condition is unmet.\nexport function assert(expr: boolean, msg: () => string) {\n  if (!expr) {\n    throw new Error(typeof msg === 'string' ? msg : msg());\n  }\n}\n\nexport class ArrayUtil {\n  /**\n   * Verifies if 2 input arrays contain the same elements.\n   * @param n1 Array 1\n   * @param n2 Array 2\n   * @returns Whether these 2 are equal\n   */\n  static arraysEqual(\n      n1: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array,\n      n2: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array) {\n    if (n1.length !== n2.length) {\n      return false;\n    }\n    for (let i = 0; i < n1.length; i++) {\n      if (n1[i] !== n2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nexport class MatMulUtil {\n  /**\n   * Fix the input shapes for MatMul operation if they need fixing\n   * @param dimsA The shape of tensor A. Should be an array of positive integers\n   * @param dimsB The shape of tensor B. Should be an array of positive integers\n   * @returns A tuple containing the preprocessed input shapes as required by ONNX specifications\n   */\n  static preprocessInputShapes(dimsA: readonly number[], dimsB: readonly number[]):\n      [readonly number[], readonly number[]] {\n    // If the first argument is 1-D, it is promoted to a matrix by prepending\n    // a 1 to its dimensions. After matrix multiplication the prepended 1 is\n    // removed.\n    const a = (dimsA.length === 1) ? [1, dimsA[0]] : dimsA;\n\n    // If the second argument is 1-D, it is promoted to a matrix by appending\n    // a 1 to its dimensions. After matrix multiplication the appended 1 is\n    // removed.\n    const b = (dimsB.length === 1) ? [dimsB[0], 1] : dimsB;\n\n    return [a, b];\n  }\n\n  /**\n   * Fix the output shape computed for MatMul operation if it needs fixing\n   * @param outputShape The computed outputShape. Should be an array (atleast of length 2) of positive integers.\n   * This will be mutated.\n   * @param aRank The rank of tensor A.\n   * @param bRank The rank of tensor B.\n   */\n  static postprocessOutputShape(outputShape: number[], aRank: number, bRank: number) {\n    // Remove prepended dimension if first input is 1d\n    if (aRank === 1) {\n      // outputShape = outputShape.slice(0, outputShape.length - 2).concat(outputShape.slice(outputShape.length - 1));\n      outputShape.splice(outputShape.length - 2, 1);\n    }\n    // Remove appended dimension if second input is 1d\n    if (bRank === 1) {\n      outputShape.pop();\n    }\n  }\n\n  /**\n   * Calculate the expected shape when matrix multiplication\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\n  }\n}\n\nexport class BroadcastUtil {\n  /**\n   * Calculate the expected shape when broadcasting 2 tensors\n   * @param a The shape of tensor A. Should be an array of positive integers\n   * @param b The shape of tensor B. Should be an array of positive integers\n   * @param isMatMul Whether the operation is MatMul\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcShape(adims: readonly number[], bdims: readonly number[], isMatMul = false): readonly number[]|undefined {\n    const arank = adims.length;\n    const brank = bdims.length;\n    if (arank === 0) {\n      return bdims;\n    }\n    if (brank === 0) {\n      return adims;\n    }\n    const crank = Math.max(adims.length, bdims.length);\n    const cdims = new Array<number>(crank);\n\n    // calculate the last 2 dimension if it is MatMul\n    if (isMatMul) {\n      if (arank < 2 || brank < 2) {\n        return undefined;\n      }\n      const cShapeMatMul =\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\n      if (cShapeMatMul === undefined) {\n        return undefined;\n      }\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\n    }\n\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\n\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\n        return undefined;\n      }\n      cdims[crank - i] = Math.max(aLen, bLen);\n    }\n\n    return cdims;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcas\n   * @returns The calculated indices that maps to the original tensor.\n   */\n  static index(broadcastedIndices: readonly number[], originalShape: readonly number[]): number[] {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same\n    // length as the broadcasted shape, and for each dimension the index should\n    // not be out of range.\n    const originalIndices = new Array(originalShape.length);\n    BroadcastUtil.fillIndex(broadcastedIndices, originalShape, originalIndices);\n    return originalIndices;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcast\n   * @param originalIndices The mapping of broadcastedIndices to the originalIndices (output parameter - will be\n   *     mutated).\n   */\n  static fillIndex(broadcastedIndices: readonly number[], originalShape: readonly number[], originalIndices: number[]) {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same length as the\n    // broadcasted shape, and for each dimension the index should not be out of range.\n    // NOTE 2: we assume the parameter originalIndices has the same length as the originalShape\n    const dimOffset = broadcastedIndices.length - originalShape.length;\n    for (let i = 0; i < originalShape.length; i++) {\n      originalIndices[i] = broadcastedIndices[dimOffset + i] % originalShape[i];\n    }\n  }\n\n  /**\n   * Perform the broadcasting operation on the specific operator\n   * @param a The input tensor A\n   * @param b The input tensor B\n   * @param op The operator lambda function\n   * @param inplace Whether to write the result back to A.\n   * @returns The result tensor, or undefined if input not broadcastable.\n   */\n  static calc(\n      a: Tensor, b: Tensor, op: (a: string|number, b: string|number) => (string | number), inplace: boolean,\n      resultType?: Tensor.DataType): Tensor|undefined {\n    const outputShape = BroadcastUtil.calcShape(a.dims, b.dims);\n\n    if (outputShape) {\n      if (inplace && !ShapeUtil.areEqual(outputShape, a.dims)) {\n        // B is not broadcastable to A, failed to calculate inplace.\n        return undefined;\n      }\n\n      const size = ShapeUtil.size(outputShape);\n      const c = inplace ? a : new Tensor(outputShape, resultType || a.type);\n\n      // both inputs are scalars\n      if (outputShape.length === 0) {\n        c.set([], op(a.get([]), b.get([])));\n      }\n\n      // atleast one input is a non-scalar\n      else {\n        const outputIndices = new Array<number>(outputShape.length);\n        const originalIndicesA = new Array(a.dims.length);\n        const originalIndicesB = new Array(b.dims.length);\n        let valA: string|number = 0;\n        let valB: string|number = 0;\n        let isAScalar = false;\n        let isBScalar = false;\n        if (a.dims.length === 0) {\n          valA = a.get([]);\n          isAScalar = true;\n        }\n        if (b.dims.length === 0) {\n          valB = b.get([]);\n          isBScalar = true;\n        }\n        let rest: number;\n        for (let i = 0; i < size; i++) {\n          // traversal indices\n          rest = i;\n          for (let j = outputShape.length - 1; j >= 0; j--) {\n            outputIndices[j] = rest % outputShape[j];\n            rest = Math.floor(rest / outputShape[j]);\n          }\n\n          if (!isAScalar) {\n            // map outputIndices (which is actually broadcasted) to the originalIndices\n            BroadcastUtil.fillIndex(outputIndices, a.dims, originalIndicesA);\n            valA = a.get(originalIndicesA);\n          }\n          if (!isBScalar) {\n            BroadcastUtil.fillIndex(outputIndices, b.dims, originalIndicesB);\n            valB = b.get(originalIndicesB);\n          }\n\n          c.set(outputIndices, op(valA, valB));\n        }\n      }\n\n      return c;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Determine if a shape is unidirectional broadcastable to another shape\n   * @param shape The input shape\n   * @param finalShape The desired shape after broadcasting\n   */\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\n    // align shape to the right\n    const inputRank = shape.length;\n    const finalRank = finalShape.length;\n    if (inputRank > finalRank) {\n      return false;\n    }\n    for (let i = 1; i <= inputRank; i++) {\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determine the broadcasted dims in input shape based on the given output shape.\n   * Note that this function only returns the broadcasted dims.\n   * @param inputShape The input shape\n   * @param outputShape The output shape\n   * @returns The broadcasted dims in input shape.\n   */\n  static getBroadcastDims(inputShape: readonly number[], outputShape: readonly number[]): number[] {\n    const inRank = inputShape.length;\n    const dims: number[] = [];\n    for (let i = 0; i < inRank; i++) {\n      const dim = inRank - 1 - i;\n      const a = inputShape[dim] || 1;\n      const b = outputShape[outputShape.length - 1 - i] || 1;\n      if (b > 1 && a === 1) {\n        dims.unshift(dim);\n      }\n    }\n    return dims;\n  }\n}\n\n// copy array helper\n// mimics memcpy as much as possible\nexport function arrayCopyHelper(\n    target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n    blockSize: number) {\n  if (sourceIndex < 0 || sourceIndex >= source.length) {\n    throw new Error('sourceIndex out of bounds');\n  }\n  if (targetIndex < 0 || targetIndex >= target.length) {\n    throw new Error('targetIndex out of bounds');\n  }\n  if (sourceIndex + blockSize > source.length) {\n    throw new Error('source indices to be copied are outside bounds');\n  }\n  if (targetIndex + blockSize > target.length) {\n    throw new Error('target array is too small to hold result');\n  }\n\n  for (let offset = 0; offset < blockSize; offset++) {\n    target[targetIndex + offset] = source[sourceIndex + offset];\n  }\n}\n\nexport class GemmUtil {\n  // will make sure input shapes are compatible for this op\n  // and return back the shape of the output in the form of a tuple\n  // will throw exception if the input shapes are not compatible\n  static getShapeOfGemmResult(\n      leftShape: readonly number[], transLeft: boolean, rightShape: readonly number[], transRight: boolean,\n      biasShape?: readonly number[]): readonly number[] {\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\n      throw new Error('shape need to be of size 2');\n    }\n\n    let M: number;\n    let K: number;\n    let N: number;\n\n    if (transLeft) {\n      M = leftShape[1];\n      K = leftShape[0];\n    } else {\n      M = leftShape[0];\n      K = leftShape[1];\n    }\n\n    let kDim = -1;\n\n    if (transRight) {\n      N = rightShape[0];\n      kDim = 1;\n    } else {\n      N = rightShape[1];\n      kDim = 0;\n    }\n\n    if (rightShape[kDim] !== K) {\n      throw new Error('dimension mismatch');\n    }\n\n    if (M <= 0 || N <= 0 || K <= 0) {\n      throw new Error('invalid shape specified');\n    }\n\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\n      throw new Error('gemm: invalid bias shape for broadcast');\n    }\n\n    return [M, N, K];\n  }\n}\n\nexport class ProtoUtil {\n  static tensorDataTypeFromProto(typeProto: onnx.TensorProto.DataType|\n                                 onnxruntime.experimental.fbs.TensorDataType): Tensor.DataType {\n    switch (typeProto) {\n      case onnx.TensorProto.DataType.INT8:\n        return 'int8';\n      case onnx.TensorProto.DataType.UINT8:\n        return 'uint8';\n      case onnx.TensorProto.DataType.BOOL:\n        return 'bool';\n      case onnx.TensorProto.DataType.INT16:\n        return 'int16';\n      case onnx.TensorProto.DataType.UINT16:\n        return 'uint16';\n      case onnx.TensorProto.DataType.INT32:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT32:\n        return 'uint32';\n      case onnx.TensorProto.DataType.FLOAT:\n        return 'float32';\n      case onnx.TensorProto.DataType.DOUBLE:\n        return 'float64';\n      case onnx.TensorProto.DataType.STRING:\n        return 'string';\n\n      // For INT64/UINT64, reduce their value to 32-bits.\n      // Should throw exception when overflow\n      case onnx.TensorProto.DataType.INT64:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT64:\n        return 'uint32';\n\n      default:\n        throw new Error(`unsupported data type: ${onnx.TensorProto.DataType[typeProto]}`);\n    }\n  }\n\n  static tensorDataTypeStringToEnum(type: string): onnx.TensorProto.DataType {\n    switch (type) {\n      case 'int8':\n        return onnx.TensorProto.DataType.INT8;\n      case 'uint8':\n        return onnx.TensorProto.DataType.UINT8;\n      case 'bool':\n        return onnx.TensorProto.DataType.BOOL;\n      case 'int16':\n        return onnx.TensorProto.DataType.INT16;\n      case 'uint16':\n        return onnx.TensorProto.DataType.UINT16;\n      case 'int32':\n        return onnx.TensorProto.DataType.INT32;\n      case 'uint32':\n        return onnx.TensorProto.DataType.UINT32;\n      case 'float32':\n        return onnx.TensorProto.DataType.FLOAT;\n      case 'float64':\n        return onnx.TensorProto.DataType.DOUBLE;\n      case 'string':\n        return onnx.TensorProto.DataType.STRING;\n      case 'int64':\n        return onnx.TensorProto.DataType.INT64;\n      case 'uint64':\n        return onnx.TensorProto.DataType.UINT64;\n\n      default:\n        throw new Error(`unsupported data type: ${type}`);\n    }\n  }\n\n  static tensorDimsFromProto(dims: Array<number|Long>): number[] {\n    // get rid of Long type for dims\n    return dims.map(d => Long.isLong(d) ? d.toNumber() : d);\n  }\n\n  static tensorValueTypeFromProto(valueType: onnx.TypeProto.ITensor): Graph.ValueType {\n    return {\n      tensorType: ProtoUtil.tensorDataTypeFromProto(valueType.elemType!),\n      shape: {dims: ProtoUtil.tensorDimsFromProto(valueType.shape!.dim!.map(d => d.dimValue!))}\n    };\n  }\n\n  static tensorDimsFromORTFormat(tensor: onnxruntime.experimental.fbs.Tensor) {\n    const dims = [];\n    for (let i = 0; i < tensor.dimsLength(); i++) {\n      dims.push(LongUtil.longToNumber(tensor.dims(i)!));\n    }\n    return dims;\n  }\n\n  static tensorAttributesFromORTFormat(node: onnxruntime.experimental.fbs.Node) {\n    const attributes = [];\n    for (let i = 0; i < node.attributesLength(); i++) {\n      attributes.push(node.attributes(i)!);\n    }\n    return attributes;\n  }\n}\n\nexport class LongUtil {\n  // This function is called to get a number from long type of data for attribute, dim, and ir version,\n  // which values are signed integers.\n  // To make it more generic, add an optional paramter to convert to a unsigned number.\n  static longToNumber(n: Long|flatbuffers.Long|number, unsigned?: boolean) {\n    if (Long.isLong(n)) {\n      return n.toNumber();\n    } else if (n instanceof flatbuffers.Long) {\n      return Long.fromValue({low: n.low, high: n.high, unsigned: unsigned ?? false}).toNumber();\n    }\n    return n;\n  }\n  static isLong(n: unknown) {\n    return Long.isLong(n) || n instanceof flatbuffers.Long;\n  }\n}\n\nexport class ShapeUtil {\n  static size(dims: readonly number[]): number {\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\n  }\n\n  // `axis` inclusive\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\n  }\n\n  // `axis` exclusive\n  static sizeToDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\n  }\n\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\n    let size = 1;\n    for (let i = start; i < end; i++) {\n      // safety check as this method is called by multiple other methods requiring size.\n      // size cannot be 0 or negative.\n      if (dims[i] <= 0) {\n        throw new Error(\n            // eslint-disable-next-line max-len\n            'cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.');\n      }\n      size *= dims[i];\n    }\n    return size;\n  }\n\n  static computeStrides(dims: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [1];\n    }\n    const strides = new Array(rank);\n    strides[rank - 1] = 1;\n    strides[rank - 2] = dims[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * dims[i + 1];\n    }\n    return strides;\n  }\n\n  static transpose(dims: readonly number[]): readonly number[] {\n    const copy = dims.slice();\n    return copy.reverse();\n  }\n\n  static indicesToOffset(indices: readonly number[], strides: readonly number[], axis?: number): number {\n    if (axis === undefined) {\n      axis = indices.length;\n    }\n    let offset = 0;\n    for (let i = 0; i < axis; ++i) {\n      offset += strides[i] * indices[i];\n    }\n    return offset;\n  }\n\n  static offsetToIndices(offset: number, strides: readonly number[]): readonly number[] {\n    const rank = strides.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [offset * strides[0]];\n    }\n    const indices: number[] = new Array(strides.length);\n    for (let i = 0; i < indices.length - 1; ++i) {\n      indices[i] = Math.floor(offset / strides[i]);\n      offset -= indices[i] * strides[i];\n    }\n    indices[indices.length - 1] = offset;\n    return indices;\n  }\n\n  /**\n   * normailze axis of range [-r, r) into [0, r).\n   */\n  static normalizeAxis(axis: number, tensorRank: number): number {\n    if (axis < -tensorRank && axis >= tensorRank) {\n      throw new Error('unsupported axis for this operation.');\n    }\n    return axis < 0 ? axis + tensorRank : axis;\n  }\n\n  static normalizeAxes(axes: readonly number[], tensorRank: number): number[] {\n    return axes.map(x => this.normalizeAxis(x, tensorRank));\n  }\n\n  // Increment an index into a tensor (in lexicographic\n  // ordering), wrapping around the specified upper_bound.\n  /**\n   * Increment an index into a tensor (in lexicographic ordering), wrapping around the specified upper_bound.\n   * @param index Given index to increment (Will be mutated)\n   * @param dims The dimensions of the tensor for which the given index corresponds to\n   * @param axisToIncrementOn The 1-indexed axis to increment on. If undefined, axisToIncrementOn == rank\n   */\n  static incrementIndex(index: number[], dims: readonly number[], axisToIncrementOn?: number) {\n    if (dims.length === 0 || index.length === 0) {\n      throw new Error('Index incrementing unsupported for scalar Tensor');\n    }\n    if (axisToIncrementOn === undefined) {\n      axisToIncrementOn = dims.length;\n    } else {\n      if (axisToIncrementOn <= 0 || axisToIncrementOn > dims.length) {\n        throw new Error('Incorrect axis to increment on');\n      }\n    }\n\n    for (let k = axisToIncrementOn - 1; k >= 0; --k) {\n      index[k]++;\n      if (index[k] < dims[k]) {\n        break;\n      }\n      index[k] = 0;\n    }\n  }\n\n  /**\n   * Produces a new dimensions array based on the values in the 'originalDimensions' and 'shape' array\n   * Used in Reshape\n   * @param originalDims Original Shape array\n   * @param shapeHints array containing values to compute the new dimensions\n   * For example:\n   * originalDims = [2,2] and shapeHints = [0,-1] will return [2,2]\n   * originalDims = [2,2] and shapeHints = [4] will return [4]\n   * originalDims = [2,2] and shapeHints = [5] will throw an exception\n   * https://github.com/onnx/onnx/blob/main/docs/Operators.md#Reshape\n   */\n\n  static calculateReshapedDims(originalDims: readonly number[], shapeHints: ArrayLike<number>): number[] {\n    // reshape to a Scalar Tensor\n    if (shapeHints.length === 0) {\n      if (originalDims.length === 0 || ShapeUtil.size(originalDims) === 1) {\n        return [];\n      } else {\n        throw new Error('cannot reshape to a scalar Tensor');\n      }\n    }\n\n    const nDims = shapeHints.length;\n    const reshapedDims = new Array<number>(nDims);\n    let unknownDimension = -1;\n    let newTensorSize = 1;\n    for (let i = 0; i < nDims; i++) {\n      if (shapeHints[i] < -1) {\n        throw new Error('a dimension in shape hints cannot be less than -1');\n      }\n      if (shapeHints[i] === -1) {\n        if (unknownDimension !== -1) {\n          throw new Error('at most one dimension in shape hints can be -1');\n        }\n        unknownDimension = i;\n      } else {\n        if (shapeHints[i] === 0) {\n          if (i >= originalDims.length) {\n            throw new Error('the dimension with value zero exceeds the dimension size of the input tensor');\n          }\n          reshapedDims[i] = originalDims[i];\n        } else {\n          reshapedDims[i] = shapeHints[i];\n        }\n        newTensorSize *= reshapedDims[i];\n      }\n    }\n\n    const oldTensorSize = ShapeUtil.size(originalDims);\n    if (unknownDimension !== -1) {\n      if (oldTensorSize % newTensorSize !== 0) {\n        throw new Error(`the input tensor cannot be reshaped to the requested shape. Input shape: [${\n            originalDims}] Output shape: [${shapeHints}]`);\n      }\n      reshapedDims[unknownDimension] = oldTensorSize / newTensorSize;\n    }\n    // validate sizes from originalDims and reshapedDims match\n    else {\n      if (newTensorSize !== oldTensorSize) {\n        throw new Error('reshapedDims and originalDims don\\'t have matching sizes');\n      }\n    }\n    return reshapedDims;\n  }\n\n  /**\n   * Sorts a given array based on the indices in the Perm array\n   * Used in Transpose\n   * @param a Array to be sorted such as dims or strides\n   * @param perm Perm given; if null a will be reversed\n   */\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\n    if (perm) {\n      return perm.map((v) => a[v]);\n    } else {\n      return a.slice().reverse();\n    }\n  }\n\n  /**\n   * Pads a given shape according to the padding values\n   * @param dims shape of the Tensor to be padded\n   * @param pad pad values\n   */\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\n  }\n\n  /**\n   * Determines if the two shapes are identical\n   * @param shape1\n   * @param shape2\n   */\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\n    if (shape1.length !== shape2.length) {\n      return false;\n    }\n    return shape1.every((v, i) => v === shape2[i]);\n  }\n\n  /**\n   * Validates if the given `dims` or `shape` is valid in ONNX.js context and returns data size\n   * @param dims - input `dims` that needs to be checked\n   */\n  static validateDimsAndCalcSize(dims: readonly number[]): number {\n    if (dims.length > 6) {\n      throw new TypeError('Only rank 0 to 6 is supported for tensor shape.');\n    }\n    let size = 1;\n    for (const n of dims) {\n      if (!Number.isInteger(n)) {\n        throw new TypeError(`Invalid shape: ${n} is not an integer`);\n      }\n      if (n < 0 || n > 2147483647) {\n        throw new TypeError(`Invalid shape: length ${n} is not allowed`);\n      }\n      size *= n;\n    }\n    return size;\n  }\n\n  /**\n   * Determines the shape of output tensor y = flatten(x, axis)\n   * @param dims - shape of input tensor\n   * @param axis - flatten axis, in the range [-r, r]\n   */\n  static flattenShape(dims: readonly number[], axis: number): readonly number[] {\n    if (axis < 0) {\n      axis += dims.length;\n    }\n    const total = dims.reduce((x, y) => x * y, 1);\n    const right = dims.slice(axis).reduce((x, y) => x * y, 1);\n    const outputDims = [total / right, right];\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = squeeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - squeeze axes\n   */\n  static squeezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>();\n\n    // sanity check\n    axes = ShapeUtil.normalizeAxes(axes, dims.length);\n\n    for (let i = 0; i < dims.length; i++) {\n      const inSqueezeList = axes.indexOf(i) >= 0;\n      if (inSqueezeList && dims[i] !== 1) {\n        throw new Error('squeeze an axis of size different than 1');\n      }\n\n      if ((axes.length === 0 && dims[i] > 1) || (axes.length > 0 && !inSqueezeList)) {\n        outputDims.push(dims[i]);\n      }\n    }\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = unsqueeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - unsqueeze axes\n   */\n  static unsqueezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>(dims.length + axes.length);\n\n    // initialize the array elements to 0\n    outputDims.fill(0);\n\n    // set all axes indices to 1 in outputDims and check for duplicates\n    for (let i = 0; i < axes.length; i++) {\n      const axis = ShapeUtil.normalizeAxis(axes[i], outputDims.length);\n      if (axis >= outputDims.length) {\n        throw new Error('\\'axes\\' has an out of range axis');\n      }\n      if (outputDims[axis] !== 0) {\n        throw new Error('\\'axes\\' has a duplicate axis');\n      }\n\n      outputDims[axis] = 1;\n    }\n\n    // fill in the zero entries of outputDims with the input tensor's shape\n    let inputDimsIterator = 0;\n    for (let i = 0; i < outputDims.length; i++) {\n      if (outputDims[i] === 0) {\n        outputDims[i] = dims[inputDimsIterator++];\n      }\n    }\n\n    // sanity check assertion. 'inputDimsIterator'\n    // should be equal to the length of 'dims'\n    if (inputDimsIterator !== dims.length) {\n      throw new Error('the unsqueezed dimension could not be established');\n    }\n\n    return outputDims;\n  }\n}\n\n// bunch of helper methods that do a variety of math operations\nexport class MathUtil {\n  // y = (x*x) + y\n  static sqr(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += Math.pow(source[sourceIndex + offset], 2);\n    }\n  }\n\n  // y = ax + y\n  static axpy(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, alpha: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += (alpha * source[sourceIndex + offset]);\n    }\n  }\n\n  // y = pow(x, b)\n  static powx(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, b: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = Math.pow(source[sourceIndex + offset], b);\n    }\n  }\n\n  // y = x * y\n  static mul(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = (source[sourceIndex + offset] * target[targetIndex + offset]);\n    }\n  }\n}\n\nexport class SplitUtil {\n  /**\n   * Calculates new Shapes from existing one and the splits given along the axis provides\n   * @param dims Shape of the Tensor to be splitted into two or more Shapes\n   * @param axis The dimension along which the Tensor will be split\n   * @param splits Offsets for the start of each split\n   */\n  static splitShape(dims: readonly number[], axis: number, split: number[], numOutputs?: number):\n      [number[][], number[]] {\n    if (split.length === 0) {\n      if (!numOutputs) {\n        throw new Error('need to know number of outputs when the \\'split\\' attribute is not specified');\n      }\n      SplitUtil.determineSplit(dims[axis], numOutputs, split);\n    }\n\n    const shapes: number[][] = [];\n    const offsets = [0];\n    for (let i = 0; i < split.length; ++i) {\n      if (i !== 0) {\n        offsets.push(offsets[i - 1] + split[i - 1]);\n      }\n      const shape = dims.slice();\n      shape[axis] = split[i];\n      shapes.push(shape);\n    }\n    return [shapes, offsets];\n  }\n\n  static determineSplit(numElementsAlongAxis: number, numOutputs: number, split: number[]) {\n    // If 'split' is not specified by the user, we need to partition the number of elements equally among the outputs\n    if (numElementsAlongAxis % numOutputs !== 0) {\n      throw new Error('cannot split tensor to equal sized parts');\n    }\n    for (let i = 0; i < numOutputs; ++i) {\n      split.push(numElementsAlongAxis / numOutputs);\n    }\n  }\n}\n\nexport class ReduceUtil {\n  /**\n   * Perform reduce operations on the specific operator\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduce(\n      a: Tensor, axes: number[], keepdims: boolean, op1: (b: number) => number,\n      op2: (a: number, b: number) => number): Tensor {\n    const dims = a.dims.slice(0);\n    // if axes is not set, perform reduce on all axes\n    if (axes.length === 0) {\n      dims.forEach((d, ind) => axes.push(ind));\n    }\n    // get a temporary broadcastable output shape\n    const outputDims = ReduceUtil.calcReduceShape(dims, axes, true);\n\n    // loop through the output and calculate result one by one\n    const size = ShapeUtil.size(outputDims);\n    const y = new Tensor(outputDims, a.type);\n    const strides = ShapeUtil.computeStrides(outputDims);\n    const inputStrides = ShapeUtil.computeStrides(dims);\n    const indicesY = new Array(dims.length);\n    for (let i = 0; i < size; i++) {\n      const indices = ShapeUtil.offsetToIndices(i, strides);\n      // map index\n      BroadcastUtil.fillIndex(indices, dims, indicesY);\n      y.set(\n          indices,\n          ReduceUtil.calcReduceByAxis(\n              a.numberData, axes, dims, 0, ShapeUtil.indicesToOffset(indicesY, inputStrides), op1, op2));\n    }\n\n    if (keepdims) {\n      return y;\n    } else {\n      // keepdims == 0, calculate the expected shape\n      return new Tensor(\n          ReduceUtil.calcReduceShape(dims, axes, keepdims), y.type, undefined, undefined, y.data, y.dataId);\n    }\n  }\n\n  /**\n   * Perform reduce operations on the specific operator on specific axes\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param dims The input dimension.\n   * @param curAxisInd Index in axes specifying the current dimension along\n   *      which the tensor will be reduced\n   * @param pos The current index of element to perform operation\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduceByAxis(\n      input: Tensor.NumberType, axes: number[], dims: number[], curAxisInd: number, pos: number,\n      op1: (b: number) => number, op2: (a: number, b: number) => number): number {\n    let res = 0;\n    if (curAxisInd >= axes.length) {\n      return op1(input[pos]);\n    }\n    const axis = axes[curAxisInd];\n    const step = axis >= dims.length ? 1 : ShapeUtil.size(dims.slice(axis + 1));\n    for (let i = 0; i < dims[axis]; i++) {\n      res = i === 0 ? ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2) :\n                      op2(res, ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2));\n      pos += step;\n    }\n    return res;\n  }\n\n  /**\n   * Calculate the expected shape of a reduce operation\n   * @param dims The input tensor dimension\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   */\n  static calcReduceShape(dims: readonly number[], axes: readonly number[], keepDims: boolean): number[] {\n    const outputDims = dims.slice();\n    for (let i = 0; i < axes.length; i++) {\n      if (keepDims) {\n        outputDims[axes[i]] = 1;\n      } else {\n        outputDims[axes[i]] = 0;\n      }\n    }\n    return outputDims.filter(dim => dim !== 0);\n  }\n}\n\nexport class PoolConvUtil {\n  /**\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   */\n  static adjustPoolAttributes(\n      isGlobalOperator: boolean, inputDims: readonly number[], kernelShape: number[], strides: number[],\n      dilations: number[], pads: number[]) {\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\n    }\n\n    if (isGlobalOperator) {\n      // adjust kernel shape to cover the input dims\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        if (dim >= kernelShape.length) {\n          kernelShape.push(inputDims[dim + 2]);\n        } else {\n          kernelShape[dim] = inputDims[dim + 2];\n        }\n      }\n    }\n\n    // adjust strides length to match kernel shape length\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < strides.length) {\n        if (strides[dim] < 0) {\n          throw new Error('strides should be greater than or equal to 1');\n        }\n      } else {\n        strides.push(1);\n      }\n    }\n\n    // adjust dilation value\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < dilations.length) {\n        if (dilations[dim] < 0) {\n          throw new Error('dilations should be greater than or equal to 1');\n        }\n      } else {\n        dilations.push(1);\n      }\n    }\n\n    // adjust pads length to match 2 * kernel shape length\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\n      if (dim < pads.length) {\n        if (pads[dim] < 0) {\n          throw new Error('pad should be greater than or equal to 1');\n        }\n      } else {\n        pads.push(0);\n      }\n    }\n\n    // sanity checks for values in kernel shapes and pads\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (kernelShape[dim] <= 0) {\n        throw new Error('kernel shapes need to be greater than 0');\n      }\n\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\n        throw new Error('pads should be smaller than kernel');\n      }\n    }\n  }\n\n  // adjust pad values based on 'autoPad' attribute\n  static adjustPadsBasedOnAutoPad(\n      inputDims: readonly number[], strides: readonly number[], dilations: readonly number[],\n      kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (!autoPad) {\n      return;\n    }\n\n    if (pads.length !== 2 * (inputDims.length - 2)) {\n      throw new Error('length of pads should be twice the length of data dimensions');\n    }\n\n    if (strides.length !== (inputDims.length - 2)) {\n      throw new Error('length of strides should be the length of data dimensions');\n    }\n\n    if (kernelShape.length !== (inputDims.length - 2)) {\n      throw new Error('length of kernel shapes should be the length of data dimensions');\n    }\n\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\n      PoolConvUtil.adjustPadAndReturnShape(\n          inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n          autoPad);\n    }\n  }\n\n  /**\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computePoolOutputShape(\n      isGlobalOperator: boolean, inputDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0) {\n      throw new Error('input shape must be of size greater than 0');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], inputDims[1]];\n\n    PoolConvUtil.computeShapeHelper(\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  /**\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\n   * @param strides Stride along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computeConvOutputShape(\n      inputDims: readonly number[], filterDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], filterDims[0]];\n\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\n  // called by computePoolOutputShape() and computeConvOutputShape()\n  // adjust pads based on 'autoPad' attribute prior to shape computation\n  private static computeShapeHelper(\n      isGlobalOperator: boolean, inputDims: readonly number[], outputDims: number[], strides: readonly number[],\n      dilations: readonly number[], kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (isGlobalOperator) {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(1);\n      }\n    } else {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n            autoPad));\n      }\n    }\n  }\n\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\n  private static adjustPadAndReturnShape(\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\n      padTailIndex: number, autoPad?: string): number {\n    const dkernel = dilation * (kernel - 1) + 1;\n    if (autoPad && autoPad !== 'NOTSET') {\n      switch (autoPad) {\n        case 'VALID':\n          pads[padHeadIndex] = 0;\n          pads[padTailIndex] = 0;\n          return Math.floor(((inSize - dkernel) / stride) + 1);\n        case 'SAME_LOWER':\n        case 'SAME_UPPER':\n          if (dilation !== 1) {\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\n          } else {\n            const legacyTargetSize = (inSize + stride - 1) / stride;\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\n            pads[padHeadIndex] =\n                (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\n            return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\n          }\n        default:\n          throw new Error('Unsupported AutoPad type');\n      }\n    } else {\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\n    }\n  }\n}\n\nexport const MIN_CLIP = -3.4028234663852886e+38;\nexport const MAX_CLIP = 3.4028234663852886e+38;\n\nexport function decodeUtf8String(buffer: Uint8Array): string {\n  return new TextDecoder().decode(buffer);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n// This file is generated by /js/scripts/update-version.ts\n// Do not modify file content manually.\n\nexport const version = '1.16.0';\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\n\nimport {configureLogger, LOG_DEBUG} from './log';\nimport {TensorView} from './tensor';\nimport {createGpuDataManager, GpuDataManager} from './webgpu/gpu-data-manager';\nimport {RunFunction, WEBGPU_OP_RESOLVE_RULES} from './webgpu/op-resolve-rules';\nimport {ProgramManager} from './webgpu/program-manager';\nimport {ComputeContext, GpuData, GpuDataType, ProgramInfo, ProgramInfoLoader} from './webgpu/types';\n\n/**\n * get a unique key representing the program from the program info,input shapes and types.\n *\n * @returns a unique key is a shorter string than the shader source, which contains all the information to identify a\n * program. if the key is the same, the program shader source should be the same, so we can reuse the program.\n *\n */\nconst getProgramInfoUniqueKey =\n    (programInfo: ProgramInfo|ProgramInfoLoader, inputTensorShapes: ReadonlyArray<TensorView['dims']>,\n     inputGpuDataTypes: readonly GpuDataType[]): string => {\n      const inputTensorShapesToString = inputTensorShapes.map(d => `${d.join(',')}`).join('_');\n      const inputGpuDataTypesToString = inputGpuDataTypes.join('_');\n      let key = programInfo.name;\n      if (programInfo.cacheHint) {\n        key += '[' + programInfo.cacheHint + ']';\n      }\n      key += ':' + inputTensorShapesToString + ';' + inputGpuDataTypesToString;\n      return key;\n    };\n\n/**\n * this class is designed to store status and being used as a singleton for JSEP. It will be passed to jsepInit() as\n * the first parameter so that it is stored for future use.\n */\nexport class WebGpuBackend {\n  device: GPUDevice;\n  /**\n   * an instance of GpuDataManager to manage a GpuDataId -> GpuBuffer mapping\n   */\n  gpuDataManager: GpuDataManager;\n  /**\n   * an instance of ProgramManager to build and run WebGPU compute shader program, and manage a ProgramKey -> Program\n   * artifacts mapping\n   */\n  programManager: ProgramManager;\n\n  /**\n   * representing the kernel ID of which is currently being computed (CPU code perspective).\n   * `null` means no kernel is being computed.\n   * only one kernel can be computed at a moment.\n   */\n  currentKernelId: number|null = null;\n  /**\n   * a list of temporary GPU data for the current kernel. should release when the kernel done computation.\n   */\n  private temporaryData: GpuData[];\n  /**\n   * a KernelID -> a GPU data list, which stores persistent GPU data owned by the specific kernel.\n   */\n  private kernelPersistentData: Map<number, GpuData[]>;\n  /**\n   * a KernelID -> a custom data, which stores custom data owned by the specific kernel.\n   */\n  private kernelCustomData: Map<number, {[key: string]: unknown}>;\n  /**\n   * get the custom data of the current kernel\n   */\n  get currentKernelCustomData(): {[key: string]: unknown} {\n    if (this.currentKernelId === null) {\n      throw new Error('currentKernelCustomData(): currentKernelId is null. (should not happen)');\n    }\n\n    let data = this.kernelCustomData.get(this.currentKernelId);\n    if (!data) {\n      data = {};\n      this.kernelCustomData.set(this.currentKernelId, data);\n    }\n\n    return data;\n  }\n\n  /**\n   * a KernelID -> kernel info mapping. value is [ name, run function, [optional] preprocess_attribute_once function ]\n   */\n  kernels: Map<number, [string, RunFunction, [((attribute: unknown) => unknown) | undefined, unknown]]>;\n\n  commandEncoder: GPUCommandEncoder|null = null;\n  computePassEncoder: GPUComputePassEncoder|null = null;\n  pendingDispatchNumber = 0;\n\n  profilingEnabled = false;\n  profilingQuerySet: GPUQuerySet;\n  profilingTimeBase?: bigint;\n\n  async initialize(env: Env): Promise<void> {\n    if (!navigator.gpu) {\n      // WebGPU is not available.\n      throw new Error('WebGpuBackend: WebGPU is not available.');\n    }\n\n    const adapter = await navigator.gpu.requestAdapter();\n    if (!adapter) {\n      throw new Error('WebGpuBackend: Failed to get GPU adapter.');\n    }\n\n    const deviceDescriptor: GPUDeviceDescriptor = {\n      requiredLimits: {\n        maxComputeWorkgroupStorageSize: adapter.limits.maxComputeWorkgroupStorageSize,\n        maxComputeWorkgroupsPerDimension: adapter.limits.maxComputeWorkgroupsPerDimension,\n        maxStorageBufferBindingSize: adapter.limits.maxStorageBufferBindingSize,\n      }\n    };\n    // WebGPU Spec: Timestamp Queries Inside Passes\n    // https://github.com/gpuweb/gpuweb/blob/main/proposals/timestamp-query-inside-passes.md\n    if (adapter.features.has('timestamp-query-inside-passes') && env.webgpu.profilingMode === 'default') {\n      this.profilingEnabled = true;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      deviceDescriptor.requiredFeatures = ['timestamp-query-inside-passes' as any];\n    }\n\n    this.device = await adapter.requestDevice(deviceDescriptor);\n    this.gpuDataManager = createGpuDataManager(this);\n    this.programManager = new ProgramManager(this);\n    this.kernels = new Map();\n    this.kernelPersistentData = new Map();\n    this.kernelCustomData = new Map();\n\n    // set up flags for logger\n    configureLogger(env.logLevel!, !!env.debug);\n\n    // TODO: set up flags\n\n    this.device.onuncapturederror = ev => {\n      if (ev.error instanceof GPUValidationError) {\n        // eslint-disable-next-line no-console\n        console.error(`An uncaught WebGPU validation error was raised: ${ev.error.message}`);\n      }\n    };\n\n    if (this.profilingEnabled) {\n      this.profilingQuerySet = this.device.createQuerySet({\n        type: 'timestamp',\n        count: 2,\n      });\n    }\n  }\n\n  dispose(): void {\n    // currently, we do not do anything in this function. In all known use cases, we don't have the requirement to\n    // actually dispose the WebGpuBackend instance, because it's always used as a singleton.\n    //\n    // revisit this place if we get real requirement to dispose the instance.\n  }\n\n  getCommandEncoder(): GPUCommandEncoder {\n    if (!this.commandEncoder) {\n      this.commandEncoder = this.device.createCommandEncoder();\n    }\n    return this.commandEncoder;\n  }\n\n  getComputePassEncoder(): GPUComputePassEncoder {\n    if (!this.computePassEncoder) {\n      this.computePassEncoder = this.getCommandEncoder().beginComputePass();\n    }\n    return this.computePassEncoder;\n  }\n\n  endComputePass(): void {\n    if (this.computePassEncoder) {\n      this.computePassEncoder.end();\n      this.computePassEncoder = null;\n    }\n  }\n\n  flush(): void {\n    this.endComputePass();\n    this.device.queue.submit([this.getCommandEncoder().finish()]);\n    this.gpuDataManager.refreshPendingBuffers();\n    this.commandEncoder = null;\n    this.pendingDispatchNumber = 0;\n  }\n\n  /**\n   * run a WebGPU program.\n   * @param program either a ProgramInfo instance containing metadata including the shader code, or a function that\n   * can be called and return a ProgramInfo instance\n   * @param inputs a TensorView array. each element represents a value already exists in GPU.\n   * @param outputIndices an indices array. each element can be either -1 (temporary data), -2 (persistent data) or an\n   * index to the kernel's output.\n   * @param createKernelOutput a callback function that create a value to kernel's output with the given index\n   * @param createIntermediateOutput a callback function that create a value as a intermediate value, either temporary\n   * or persistent (owned by the current kernel)\n   * @returns a TensorView array representing the result.\n   */\n  run(program: ProgramInfoLoader|ProgramInfo, inputs: readonly TensorView[], outputIndices: readonly number[],\n      createKernelOutput: (index: number, dataType: number, dims: readonly number[]) => TensorView,\n      createIntermediateOutput: (dataType: number, dims: readonly number[]) => TensorView): TensorView[] {\n    if (inputs.length !== program.inputTypes.length) {\n      throw new Error(`Input size must be equal to ${program.inputTypes.length}.`);\n    }\n\n    // create info for inputs\n    const inputDatas: GpuData[] = [];\n    for (let i = 0; i < inputs.length; ++i) {\n      const gpuData = this.gpuDataManager.get(inputs[i].data);\n      if (!gpuData) {\n        throw new Error(`no GPU data for input: ${inputs[i].data}`);\n      }\n      inputDatas[i] = gpuData;\n    }\n\n    const key = getProgramInfoUniqueKey(program, inputs.map(i => i.dims), inputDatas.map(i => i.type));\n    let artifact = this.programManager.getArtifact(key);\n    const programInfo = artifact ?\n        artifact.programInfo :\n        (typeof (program as ProgramInfoLoader).get === 'function' ? (program as ProgramInfoLoader).get() :\n                                                                    (program as ProgramInfo));\n\n    // check output indices\n    const validatedOutputIndices = outputIndices.length === 0 ? programInfo.outputs.map((_, i) => i) : outputIndices;\n    if (validatedOutputIndices.length !== programInfo.outputs.length) {\n      throw new Error(`Output size ${validatedOutputIndices.length} must be equal to ${programInfo.outputs.length}.`);\n    }\n\n    // create info for outputs\n    const outputTensorViews: TensorView[] = [];\n    const outputDatas: GpuData[] = [];\n    for (let i = 0; i < programInfo.outputs.length; ++i) {\n      // value -1 and -2 are used for creating temporary and persistent outputs. so -2, -1 and 0, 1, 2, ... are valid\n      // output indices. see type definition of ComputeContextInputsOutputsMapping for more details.\n      if (!Number.isInteger(validatedOutputIndices[i]) || validatedOutputIndices[i] < -2 ||\n          validatedOutputIndices[i] >= programInfo.outputs.length) {\n        throw new Error(`Invalid output index: ${validatedOutputIndices[i]}`);\n      }\n      const isTemporary = validatedOutputIndices[i] === -1;\n      const isPersistent = validatedOutputIndices[i] === -2;\n      const tensorView = (isTemporary || isPersistent) ?\n          createIntermediateOutput(programInfo.outputs[i].dataType, programInfo.outputs[i].dims) :\n          createKernelOutput(validatedOutputIndices[i], programInfo.outputs[i].dataType, programInfo.outputs[i].dims);\n      const gpuData = this.gpuDataManager.get(tensorView.data);\n      if (!gpuData) {\n        throw new Error(`no GPU data for output: ${tensorView.data}`);\n      }\n      if (isTemporary) {\n        this.temporaryData.push(gpuData);\n      }\n      if (isPersistent) {\n        let persistentData = this.kernelPersistentData.get(this.currentKernelId!);\n        if (!persistentData) {\n          persistentData = [];\n          this.kernelPersistentData.set(this.currentKernelId!, persistentData);\n        }\n        persistentData.push(gpuData);\n      }\n      outputTensorViews.push(tensorView);\n      outputDatas.push(gpuData);\n    }\n\n    const normalizedDispatchGroup = this.programManager.normalizeDispatchGroupSize(programInfo.dispatchGroup(inputs));\n\n    if (!artifact) {\n      artifact = this.programManager.build(programInfo, normalizedDispatchGroup);\n      this.programManager.setArtifact(key, artifact);\n    }\n\n    LOG_DEBUG(\n        'info',\n        () => `[ProgramManager] run \"${programInfo.name}\" (key=${key}) with ${normalizedDispatchGroup[0]}x${\n            normalizedDispatchGroup[1]}x${normalizedDispatchGroup[2]}`);\n    this.programManager.run(artifact, inputDatas, outputDatas, normalizedDispatchGroup);\n\n    return outputTensorViews;\n  }\n\n  upload(gpuDataId: number, data: Uint8Array): void {\n    this.gpuDataManager.upload(gpuDataId, data);\n  }\n\n  memcpy(src: number, dst: number): void {\n    this.gpuDataManager.memcpy(src, dst);\n  }\n\n  async download(gpuDataId: number, getTargetBuffer: () => Uint8Array): Promise<void> {\n    const arrayBuffer = await this.gpuDataManager.download(gpuDataId);\n\n    // the underlying buffer may be changed after the async function is called. so we use a getter function to make sure\n    // the buffer is up-to-date.\n    const data = getTargetBuffer();\n    data.set(new Uint8Array(arrayBuffer, 0, data.byteLength));\n  }\n\n  alloc(size: number): number {\n    return this.gpuDataManager.create(size).id;\n  }\n\n  free(ptr: number): number {\n    return this.gpuDataManager.release(ptr);\n  }\n\n  createKernel(name: string, kernelId: number, attribute: unknown): void {\n    const op = WEBGPU_OP_RESOLVE_RULES.get(name);\n    if (!op) {\n      throw new Error(`kernel not implemented: ${name}`);\n    }\n\n    this.kernels.set(kernelId, [name, op[0], [op[1], attribute]]);\n  }\n\n  releaseKernel(kernelId: number): void {\n    const persistentData = this.kernelPersistentData.get(kernelId);\n    if (persistentData) {\n      for (const data of persistentData) {\n        this.gpuDataManager.release(data.id);\n      }\n      this.kernelPersistentData.delete(kernelId);\n    }\n\n    this.kernelCustomData.delete(kernelId);\n    this.kernels.delete(kernelId);\n  }\n\n  computeKernel(kernelId: number, context: ComputeContext): number {\n    const kernel = this.kernels.get(kernelId);\n    if (!kernel) {\n      throw new Error(`kernel not created: ${kernelId}`);\n    }\n    const [name, kernelEntry, attributes] = kernel;\n    if (this.currentKernelId !== null) {\n      throw new Error(`kernel \"${name}\" is not allowed to be called recursively`);\n    }\n    this.currentKernelId = kernelId;\n\n    // parse attributes if necessary\n    if (attributes[0]) {\n      attributes[1] = attributes[0](attributes[1]);\n      attributes[0] = undefined;\n    }\n\n    LOG_DEBUG('info', () => `[WebGPU] Start to run kernel \"${name}\"...`);\n\n    this.temporaryData = [];\n    try {\n      kernelEntry(context, attributes[1]);\n      return 0;  // ORT_OK\n    } catch (e) {\n      LOG_DEBUG('warning', `[WebGPU] Kernel \"${name}\" failed. Error: ${e}`);\n      return 1;  // ORT_FAIL\n    } finally {\n      for (const data of this.temporaryData) {\n        this.gpuDataManager.release(data.id);\n      }\n      this.temporaryData = [];\n      this.currentKernelId = null;\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\n\nimport {OrtWasmModule} from '../binding/ort-wasm';\nimport {DataType, getTensorElementSize} from '../wasm-common';\n\nimport {WebGpuBackend} from './backend-webgpu';\nimport {LOG_DEBUG} from './log';\nimport {TensorView} from './tensor';\nimport {ShapeUtil} from './util';\nimport {ComputeContext, ComputeContextInputsOutputsMapping, ProgramInfo, ProgramInfoLoader} from './webgpu/types';\n\n/* eslint-disable no-bitwise */\n\nclass TensorViewImpl implements TensorView {\n  constructor(\n      private module: OrtWasmModule, public readonly dataType: number, public readonly data: number,\n      public readonly dims: readonly number[]) {}\n\n  getFloat32Array(): Float32Array {\n    if (this.dataType !== DataType.float) {\n      throw new Error('Invalid data type');\n    }\n    const elementCount = ShapeUtil.size(this.dims);\n    return elementCount === 0 ? new Float32Array() :\n                                new Float32Array(this.module.HEAP8.buffer, this.data, elementCount);\n  }\n\n  getBigInt64Array(): BigInt64Array {\n    if (this.dataType !== DataType.int64) {\n      throw new Error('Invalid data type');\n    }\n    const elementCount = ShapeUtil.size(this.dims);\n    return elementCount === 0 ? new BigInt64Array() :\n                                new BigInt64Array(this.module.HEAP8.buffer, this.data, elementCount);\n  }\n\n  getInt32Array(): Int32Array {\n    if (this.dataType !== DataType.int32) {\n      throw new Error('Invalid data type');\n    }\n    const elementCount = ShapeUtil.size(this.dims);\n    return elementCount === 0 ? new Int32Array() : new Int32Array(this.module.HEAP8.buffer, this.data, elementCount);\n  }\n\n  reshape(newDims: readonly number[]): TensorView {\n    if (ShapeUtil.size(newDims) !== ShapeUtil.size(this.dims)) {\n      throw new Error('Invalid new shape');\n    }\n    return new TensorViewImpl(this.module, this.dataType, this.data, newDims);\n  }\n}\n\nclass ComputeContextImpl implements ComputeContext {\n  readonly opKernelContext: number;\n  readonly inputs: readonly TensorView[];\n  get kernelCustomData(): {[key: string]: unknown} {\n    return this.backend.currentKernelCustomData;\n  }\n  get customDataBuffer(): Uint8Array {\n    return this.module.HEAPU8.subarray(this.customDataOffset, this.customDataOffset + this.customDataSize);\n  }\n  private customDataOffset = 0;\n  private customDataSize = 0;\n  constructor(private module: OrtWasmModule, private backend: WebGpuBackend, contextDataOffset: number) {\n    const heapU32 = module.HEAPU32;\n\n    // extract context data\n    let dataIndex = (contextDataOffset >> 2);\n    this.opKernelContext = heapU32[dataIndex++];\n    const inputCount = heapU32[dataIndex++];\n    this.customDataOffset = heapU32[dataIndex++];\n    this.customDataSize = heapU32[dataIndex++];\n\n    const inputs: TensorView[] = [];\n    for (let i = 0; i < inputCount; i++) {\n      const dataType = heapU32[dataIndex++];\n      const data = heapU32[dataIndex++];\n      const dim = heapU32[dataIndex++];\n      const dims: number[] = [];\n      for (let d = 0; d < dim; d++) {\n        dims.push(heapU32[dataIndex++]);\n      }\n      inputs.push(new TensorViewImpl(module, dataType, data, dims));\n    }\n    this.inputs = inputs;\n  }\n\n  compute(program: ProgramInfoLoader|ProgramInfo, inputsOutputsMapping?: ComputeContextInputsOutputsMapping):\n      TensorView[] {\n    // prepare inputs. inputs should always be valid data.\n    const mappedInputs =\n        inputsOutputsMapping?.inputs?.map(i => typeof i === 'number' ? this.inputs[i] : i) ?? this.inputs;\n    // prepare outputs.\n    const outputIndices = inputsOutputsMapping?.outputs ?? [];\n    const createKernelOutput = (index: number, dataType: number, dims: readonly number[]): TensorView =>\n        new TensorViewImpl(this.module, dataType, this.output(index, dims), dims);\n    const createTemporaryOutput = (dataType: number, dims: readonly number[]): TensorView => {\n      const elementSize = getTensorElementSize(dataType);\n      if (!elementSize) {\n        throw new Error(`Unsupported data type: ${dataType}`);\n      }\n      const bufferSize = elementSize * ShapeUtil.size(dims);\n      return new TensorViewImpl(this.module, dataType, this.backend.gpuDataManager.create(bufferSize).id, dims);\n    };\n    return this.backend.run(program, mappedInputs, outputIndices, createKernelOutput, createTemporaryOutput);\n  }\n\n  output(index: number, dims: readonly number[]): number {\n    const stack = this.module.stackSave();\n    try {\n      const data = this.module.stackAlloc((1 + dims.length) * 4 /* sizeof(size_t) */);\n      let offset = data >> 2;\n      this.module.HEAPU32[offset++] = dims.length;\n      for (let i = 0; i < dims.length; i++) {\n        this.module.HEAPU32[offset++] = dims[i];\n      }\n      return this.module._JsepOutput(this.opKernelContext, index, data);\n    } finally {\n      this.module.stackRestore(stack);\n    }\n  }\n}\n\nexport const init = async(module: OrtWasmModule, env: Env): Promise<void> => {\n  const init = module.jsepInit;\n  if (init && navigator.gpu) {\n    if (!env.wasm.simd) {\n      throw new Error(\n          'Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using WebGPU EP');\n    }\n    const backend = new WebGpuBackend();\n    await backend.initialize(env);\n\n    init(\n        // backend\n        {backend},\n\n        // jsepAlloc()\n        (size: number) => backend.alloc(size),\n\n        // jsepFree()\n        (ptr: number) => backend.free(ptr),\n\n        // jsepCopy(src, dst, size, isSourceGpu)\n        (src: number, dst: number, size: number, isSourceGpu = false) => {\n          if (isSourceGpu) {\n            LOG_DEBUG('verbose', () => `[WebGPU] jsepCopyGpuToGpu: src=${src}, dst=${dst}, size=${size}`);\n            backend.memcpy(src, dst);\n          } else {\n            LOG_DEBUG('verbose', () => `[WebGPU] jsepCopyCpuToGpu: dataOffset=${src}, gpuDataId=${dst}, size=${size}`);\n            const data = module.HEAPU8.subarray(src, src + size);\n            backend.upload(dst, data);\n          }\n        },\n\n        // jsepCopyAsync(src, dst, size)\n        async(gpuDataId: number, dataOffset: number, size: number):\n            Promise<void> => {\n              LOG_DEBUG(\n                  'verbose',\n                  () => `[WebGPU] jsepCopyGpuToCpu: gpuDataId=${gpuDataId}, dataOffset=${dataOffset}, size=${size}`);\n\n              await backend.download(gpuDataId, () => module.HEAPU8.subarray(dataOffset, dataOffset + size));\n            },\n\n        // jsepCreateKernel\n        (name: string, kernel: number, attribute: unknown) => backend.createKernel(name, kernel, attribute),\n\n        // jsepReleaseKernel\n        (kernel: number) => backend.releaseKernel(kernel),\n\n        // jsepRun\n        (kernel: number, contextDataOffset: number) => {\n          LOG_DEBUG('verbose', () => `[WebGPU] jsepRun: kernel=${kernel}, contextDataOffset=${contextDataOffset}`);\n          const context = new ComputeContextImpl(module, backend, contextDataOffset);\n          return backend.computeKernel(kernel, context);\n        });\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\n\nimport {logLevelStringToEnum} from '../wasm-common';\n\ntype LogLevel = NonNullable<Env['logLevel']>;\ntype MessageString = string;\ntype MessageFunction = () => string;\ntype Message = MessageString|MessageFunction;\n\nconst logLevelPrefix = ['V', 'I', 'W', 'E', 'F'];\n\nconst doLog = (level: number, message: string): void => {\n  // eslint-disable-next-line no-console\n  console.log(`[${logLevelPrefix[level]},${new Date().toISOString()}]${message}`);\n};\n\nlet configLogLevel: LogLevel|undefined;\nlet debug: boolean|undefined;\n\nexport const configureLogger = ($configLogLevel: LogLevel, $debug: boolean): void => {\n  configLogLevel = $configLogLevel;\n  debug = $debug;\n};\n\n/**\n * A simple logging utility to log messages to the console.\n */\nexport const LOG = (logLevel: LogLevel, msg: Message): void => {\n  const messageLevel = logLevelStringToEnum(logLevel);\n  const configLevel = logLevelStringToEnum(configLogLevel);\n  if (messageLevel >= configLevel) {\n    doLog(messageLevel, typeof msg === 'function' ? msg() : msg);\n  }\n};\n\n/**\n * A simple logging utility to log messages to the console. Only logs when debug is enabled.\n */\nexport const LOG_DEBUG: typeof LOG = (...args: Parameters<typeof LOG>) => {\n  if (debug) {\n    LOG(...args);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable no-param-reassign */\n\nexport class MatMulUtil {\n  /**\n   * Calculate the expected shape when matrix multiplication\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\n  }\n}\n\n\nexport class BroadcastUtil {\n  /**\n   * Calculate the expected shape when broadcasting 2 tensors\n   * @param a The shape of tensor A. Should be an array of positive integers\n   * @param b The shape of tensor B. Should be an array of positive integers\n   * @param isMatMul Whether the operation is MatMul\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcShape(adims: readonly number[], bdims: readonly number[], isMatMul = false): readonly number[]|undefined {\n    const arank = adims.length;\n    const brank = bdims.length;\n    if (arank === 0) {\n      return bdims;\n    }\n    if (brank === 0) {\n      return adims;\n    }\n    const crank = Math.max(adims.length, bdims.length);\n    const cdims = new Array<number>(crank);\n\n    // calculate the last 2 dimension if it is MatMul\n    if (isMatMul) {\n      if (arank < 2 || brank < 2) {\n        return undefined;\n      }\n      const cShapeMatMul =\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\n      if (cShapeMatMul === undefined) {\n        return undefined;\n      }\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\n    }\n\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\n\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\n        return undefined;\n      }\n      cdims[crank - i] = Math.max(aLen, bLen);\n    }\n\n    return cdims;\n  }\n\n  /**\n   * Determine if a shape is unidirectional broadcastable to another shape\n   * @param shape The input shape\n   * @param finalShape The desired shape after broadcasting\n   */\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\n    // align shape to the right\n    const inputRank = shape.length;\n    const finalRank = finalShape.length;\n    if (inputRank > finalRank) {\n      return false;\n    }\n    for (let i = 1; i <= inputRank; i++) {\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\n\nexport class ShapeUtil {\n  /**\n   * calculate the size (number of elements)\n   */\n  static size(dims: readonly number[]): number {\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\n  }\n\n  /**\n   * calculate the size (number of elements) from the given axis (inclusive)\n   */\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\n  }\n\n  /**\n   * calculate the size (number of elements) to the given axis (exclusive)\n   */\n  static sizeToDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\n  }\n\n  /**\n   * calculate the size (number of elements) from and to the given axis [start, end)\n   */\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\n    let size = 1;\n    for (let i = start; i < end; i++) {\n      // safety check as this method is called by multiple other methods requiring size.\n      // size cannot be negative.\n      if (dims[i] < 0) {\n        throw new Error(\n            // eslint-disable-next-line max-len\n            'cannot get valid size from specified dimension range. Most likely the range contains negative values in them.');\n      }\n      size *= dims[i];\n    }\n    return size;\n  }\n\n  static computeStrides(dims: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [1];\n    }\n    const strides = new Array(rank);\n    strides[rank - 1] = 1;\n    strides[rank - 2] = dims[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * dims[i + 1];\n    }\n    return strides;\n  }\n\n  /**\n   * normailze axis of range [-r, r) into [0, r).\n   */\n  static normalizeAxis(axis: number, tensorRank: number): number {\n    if (axis < -tensorRank && axis >= tensorRank) {\n      throw new Error('unsupported axis for this operation.');\n    }\n    return axis < 0 ? axis + tensorRank : axis;\n  }\n\n  static normalizeAxes(axes: readonly number[], tensorRank?: number): number[] {\n    return axes.map(x => this.normalizeAxis(x, tensorRank ?? axes.length));\n  }\n\n  /**\n   * Sorts a given array based on the indices in the Perm array\n   * Used in Transpose\n   * @param a Array to be sorted such as dims or strides\n   * @param perm Perm given; if null a will be reversed\n   */\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\n    if (perm) {\n      return perm.map((v) => a[v]);\n    } else {\n      return a.slice().reverse();\n    }\n  }\n\n  /**\n   * Pads a given shape according to the padding values\n   * @param dims shape of the Tensor to be padded\n   * @param pad pad values\n   */\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\n  }\n\n  /**\n   * Determines if the two shapes are identical\n   * @param shape1\n   * @param shape2\n   */\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\n    if (shape1.length !== shape2.length) {\n      return false;\n    }\n    return shape1.every((v, i) => v === shape2[i]);\n  }\n}\n\nexport class PoolConvUtil {\n  /**\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   */\n  static adjustPoolAttributes(\n      isGlobalOperator: boolean, inputDims: readonly number[], kernelShape: number[], strides: number[],\n      dilations: number[], pads: number[]): void {\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\n    }\n\n    if (isGlobalOperator) {\n      // adjust kernel shape to cover the input dims\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        if (dim >= kernelShape.length) {\n          kernelShape.push(inputDims[dim + 2]);\n        } else {\n          kernelShape[dim] = inputDims[dim + 2];\n        }\n      }\n    }\n\n    // adjust strides length to match kernel shape length\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < strides.length) {\n        if (strides[dim] < 0) {\n          throw new Error('strides should be greater than or equal to 1');\n        }\n      } else {\n        strides.push(1);\n      }\n    }\n\n    // adjust dilation value\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < dilations.length) {\n        if (dilations[dim] < 0) {\n          throw new Error('dilations should be greater than or equal to 1');\n        }\n      } else {\n        dilations.push(1);\n      }\n    }\n\n    // adjust pads length to match 2 * kernel shape length\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\n      if (dim < pads.length) {\n        if (pads[dim] < 0) {\n          throw new Error('pad should be greater than or equal to 1');\n        }\n      } else {\n        pads.push(0);\n      }\n    }\n\n    // sanity checks for values in kernel shapes and pads\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (kernelShape[dim] <= 0) {\n        throw new Error('kernel shapes need to be greater than 0');\n      }\n\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\n        throw new Error('pads should be smaller than kernel');\n      }\n    }\n  }\n\n  // adjust pad values based on 'autoPad' attribute\n  static adjustPadsBasedOnAutoPad(\n      inputDims: readonly number[], strides: readonly number[], dilations: readonly number[],\n      kernelShape: readonly number[], pads: number[], isChannelLast: boolean, autoPad?: string): void {\n    if (!autoPad) {\n      return;\n    }\n\n    if (pads.length !== 2 * (inputDims.length - 2)) {\n      throw new Error('length of pads should be twice the length of data dimensions');\n    }\n\n    if (strides.length !== (inputDims.length - 2)) {\n      throw new Error('length of strides should be the length of data dimensions');\n    }\n\n    if (kernelShape.length !== (inputDims.length - 2)) {\n      throw new Error('length of kernel shapes should be the length of data dimensions');\n    }\n\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\n      PoolConvUtil.adjustPadAndReturnShape(\n          inputDims[dim + (isChannelLast ? 1 : 2)], strides[dim], dilations[dim], kernelShape[dim], pads, dim,\n          dim + inputDims.length - 2, autoPad);\n    }\n  }\n\n  /**\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computePoolOutputShape(\n      isGlobalOperator: boolean, inputDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0) {\n      throw new Error('input shape must be of size greater than 0');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], inputDims[1]];\n\n    PoolConvUtil.computeShapeHelper(\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  /**\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\n   * @param strides Stride along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computeConvOutputShape(\n      inputDims: readonly number[], filterDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], filterDims[0]];\n\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\n  // called by computePoolOutputShape() and computeConvOutputShape()\n  // adjust pads based on 'autoPad' attribute prior to shape computation\n  private static computeShapeHelper(\n      isGlobalOperator: boolean, inputDims: readonly number[], outputDims: number[], strides: readonly number[],\n      dilations: readonly number[], kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (isGlobalOperator) {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(1);\n      }\n    } else {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n            autoPad));\n      }\n    }\n  }\n\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\n  private static adjustPadAndReturnShape(\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\n      padTailIndex: number, autoPad?: string): number {\n    const dkernel = dilation * (kernel - 1) + 1;\n    if (autoPad && autoPad !== 'NOTSET') {\n      switch (autoPad) {\n        case 'VALID':\n          pads[padHeadIndex] = 0;\n          pads[padTailIndex] = 0;\n          return Math.floor(((inSize - dkernel) / stride) + 1);\n        case 'SAME_LOWER':\n        case 'SAME_UPPER':\n          if (dilation !== 1) {\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\n          } else {\n            const legacyTargetSize = (inSize + stride - 1) / stride;\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\n            pads[padHeadIndex] =\n                (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\n            return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\n          }\n        default:\n          throw new Error('Unsupported AutoPad type');\n      }\n    } else {\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\n    }\n  }\n}\n\nexport class GemmUtil {\n  // will make sure input shapes are compatible for this op\n  // and return back the shape of the output in the form of a tuple\n  // will throw exception if the input shapes are not compatible\n  static getShapeOfGemmResult(\n      leftShape: readonly number[], transLeft: boolean, rightShape: readonly number[], transRight: boolean,\n      biasShape?: readonly number[]): readonly number[] {\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\n      throw new Error('shape need to be of size 2');\n    }\n\n    let M: number;\n    let K: number;\n    let N: number;\n\n    if (transLeft) {\n      M = leftShape[1];\n      K = leftShape[0];\n    } else {\n      M = leftShape[0];\n      K = leftShape[1];\n    }\n\n    let kDim = -1;\n\n    if (transRight) {\n      N = rightShape[0];\n      kDim = 1;\n    } else {\n      N = rightShape[1];\n      kDim = 0;\n    }\n\n    if (rightShape[kDim] !== K) {\n      throw new Error('dimension mismatch');\n    }\n\n    if (M <= 0 || N <= 0 || K <= 0) {\n      throw new Error('invalid shape specified');\n    }\n\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\n      throw new Error('gemm: invalid bias shape for broadcast');\n    }\n\n    return [M, N, K];\n  }\n}\n\n\nexport const MIN_CLIP = -3.4028234663852886e+38;\nexport const MAX_CLIP = 3.4028234663852886e+38;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nclass AttributeWithCacheKeyImpl {\n  constructor(attribute: Record<string, unknown>) {\n    Object.assign(this, attribute);\n  }\n\n  private _cacheKey: string;\n  public get cacheKey(): string {\n    if (!this._cacheKey) {\n      this._cacheKey =\n          Object.getOwnPropertyNames(this).sort().map(name => `${(this as Record<string, unknown>)[name]}`).join(';');\n    }\n    return this._cacheKey;\n  }\n}\n\nexport interface AttributeWithCacheKey {\n  readonly cacheKey: string;\n}\n\n/**\n * create a new object from the given attribute, and add a cacheKey property to it\n */\nexport const createAttributeWithCacheKey = <T extends Record<string, unknown>>(attribute: T): T&AttributeWithCacheKey =>\n    new AttributeWithCacheKeyImpl(attribute) as unknown as T & AttributeWithCacheKey;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {WebGpuBackend} from '../backend-webgpu';\nimport {LOG_DEBUG} from '../log';\n\nimport {GpuData, GpuDataId, GpuDataType} from './types';\n\n/**\n * manages GpuDataId -> GpuBuffer\n */\nexport interface GpuDataManager {\n  /**\n   * copy data from CPU to GPU.\n   */\n  upload(id: GpuDataId, data: Uint8Array): void;\n  /**\n   * copy data from GPU to GPU.\n   */\n  memcpy(sourceId: GpuDataId, destinationId: GpuDataId): void;\n  /**\n   * create new data on GPU.\n   */\n  create(size: number, usage?: number): GpuData;\n  /**\n   * get GPU data by ID.\n   */\n  get(id: GpuDataId): GpuData|undefined;\n  /**\n   * release the data on GPU by ID.\n   *\n   * @return size of the data released\n   */\n  release(id: GpuDataId): number;\n  /**\n   * copy data from GPU to CPU.\n   */\n  download(id: GpuDataId): Promise<ArrayBufferLike>;\n\n  /**\n   * refresh the buffers that marked for release.\n   *\n   * when release() is called, the buffer is not released immediately. this is because we need to wait for the commands\n   * to be submitted to the GPU. this function is called after the commands are submitted so that the buffers can be\n   * actually released.\n   */\n  refreshPendingBuffers(): void;\n\n  /**\n   * destroy all gpu buffers. Call this when the session.release is called.\n   */\n  dispose(): void;\n}\n\ninterface StorageCacheValue {\n  gpuData: GpuData;\n  originalSize: number;\n}\n\ninterface DownloadCacheValue {\n  data: Promise<ArrayBufferLike>;\n}\n\n/**\n * normalize the buffer size so that it fits the 128-bits (16 bytes) alignment.\n */\nconst calcNormalizedBufferSize = (size: number) => Math.ceil(size / 16) * 16;\n\nlet guid = 0;\nconst createNewGpuDataId = () => guid++;\n\nclass GpuDataManagerImpl implements GpuDataManager {\n  // GPU Data ID => GPU Data ( storage buffer )\n  storageCache: Map<GpuDataId, StorageCacheValue>;\n\n  // GPU Data ID => GPU Data ( read buffer )\n  downloadCache: Map<GpuDataId, DownloadCacheValue>;\n\n  // pending buffers for uploading ( data is unmapped )\n  private buffersForUploadingPending: GPUBuffer[];\n  // pending buffers for computing\n  private buffersPending: GPUBuffer[];\n\n  private freeBuffers: Map<number, GPUBuffer[]>;\n\n  constructor(private backend: WebGpuBackend) {\n    this.storageCache = new Map();\n    this.downloadCache = new Map();\n    this.freeBuffers = new Map();\n    this.buffersForUploadingPending = [];\n    this.buffersPending = [];\n  }\n\n  upload(id: GpuDataId, data: Uint8Array): void {\n    const srcArrayBuffer = data.buffer;\n    const srcOffset = data.byteOffset;\n    const srcLength = data.byteLength;\n    const size = calcNormalizedBufferSize(srcLength);\n\n    // get destination gpu buffer\n    const gpuDataCache = this.storageCache.get(id);\n    if (!gpuDataCache) {\n      throw new Error('gpu data for uploading does not exist');\n    }\n    if (gpuDataCache.originalSize !== srcLength) {\n      throw new Error(`inconsistent data size. gpu data size=${gpuDataCache.originalSize}, data size=${srcLength}`);\n    }\n\n    // create gpu buffer\n    const gpuBufferForUploading = this.backend.device.createBuffer(\n        // eslint-disable-next-line no-bitwise\n        {mappedAtCreation: true, size, usage: GPUBufferUsage.MAP_WRITE | GPUBufferUsage.COPY_SRC});\n\n    // copy (upload) data\n    const arrayBuffer = gpuBufferForUploading.getMappedRange();\n    new Uint8Array(arrayBuffer).set(new Uint8Array(srcArrayBuffer, srcOffset, srcLength));\n    gpuBufferForUploading.unmap();\n\n\n    // GPU copy\n    const commandEncoder = this.backend.getCommandEncoder();\n    this.backend.endComputePass();\n    commandEncoder.copyBufferToBuffer(gpuBufferForUploading, 0, gpuDataCache.gpuData.buffer, 0, size);\n\n    LOG_DEBUG('verbose', () => `[WebGPU] GpuDataManager.upload(id=${id})`);\n\n    this.buffersForUploadingPending.push(gpuBufferForUploading);\n  }\n\n  memcpy(sourceId: GpuDataId, destinationId: GpuDataId): void {\n    // get source gpu buffer\n    const sourceGpuDataCache = this.storageCache.get(sourceId);\n    if (!sourceGpuDataCache) {\n      throw new Error('source gpu data for memcpy does not exist');\n    }\n    // get destination gpu buffer\n    const destinationGpuDataCache = this.storageCache.get(destinationId);\n    if (!destinationGpuDataCache) {\n      throw new Error('destination gpu data for memcpy does not exist');\n    }\n    if (sourceGpuDataCache.originalSize !== destinationGpuDataCache.originalSize) {\n      throw new Error('inconsistent source and destination gpu data size');\n    }\n    const size = calcNormalizedBufferSize(sourceGpuDataCache.originalSize);\n\n    // GPU copy\n    const commandEncoder = this.backend.getCommandEncoder();\n    this.backend.endComputePass();\n    commandEncoder.copyBufferToBuffer(\n        sourceGpuDataCache.gpuData.buffer, 0, destinationGpuDataCache.gpuData.buffer, 0, size);\n  }\n\n  // eslint-disable-next-line no-bitwise\n  create(size: number, usage = GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST): GpuData {\n    const bufferSize = calcNormalizedBufferSize(size);\n\n    let gpuBuffer;\n    let buffers = this.freeBuffers.get(bufferSize);\n    if (!buffers) {\n      buffers = [];\n      this.freeBuffers.set(bufferSize, buffers);\n    }\n    if (buffers.length > 0) {\n      gpuBuffer = buffers.pop() as GPUBuffer;\n    } else {\n      // create gpu buffer\n      gpuBuffer = this.backend.device.createBuffer({size: bufferSize, usage});\n    }\n\n    const gpuData = {id: createNewGpuDataId(), type: GpuDataType.default, buffer: gpuBuffer};\n    this.storageCache.set(gpuData.id, {gpuData, originalSize: size});\n\n    LOG_DEBUG('verbose', () => `[WebGPU] GpuDataManager.create(size=${size}) => id=${gpuData.id}`);\n    return gpuData;\n  }\n\n  get(id: GpuDataId): GpuData|undefined {\n    return this.storageCache.get(id)?.gpuData;\n  }\n\n  release(id: GpuDataId): number {\n    const cachedData = this.storageCache.get(id);\n    if (!cachedData) {\n      throw new Error('releasing data does not exist');\n    }\n\n    LOG_DEBUG('verbose', () => `[WebGPU] GpuDataManager.release(id=${id}), gpuDataId=${cachedData.gpuData.id}`);\n\n    this.storageCache.delete(id);\n    this.buffersPending.push(cachedData.gpuData.buffer);\n    // cachedData.gpuData.buffer.destroy();\n\n    const downloadingData = this.downloadCache.get(id);\n    if (downloadingData) {\n      this.downloadCache.delete(id);\n    }\n\n    return cachedData.originalSize;\n  }\n\n  async download(id: GpuDataId): Promise<ArrayBufferLike> {\n    const downloadData = this.downloadCache.get(id);\n    if (downloadData) {\n      return downloadData.data;\n    }\n\n    const cachedData = this.storageCache.get(id);\n    if (!cachedData) {\n      throw new Error('data does not exist');\n    }\n\n    const commandEncoder = this.backend.getCommandEncoder();\n    this.backend.endComputePass();\n    const bufferSize = calcNormalizedBufferSize(cachedData.originalSize);\n    const gpuReadBuffer = this.backend.device.createBuffer(\n        // eslint-disable-next-line no-bitwise\n        {size: bufferSize, usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ});\n    commandEncoder.copyBufferToBuffer(\n        cachedData.gpuData.buffer /* source buffer */, 0 /* source offset */, gpuReadBuffer /* destination buffer */,\n        0 /* destination offset */, bufferSize /* size */\n    );\n    this.backend.flush();\n\n    const readDataPromise = new Promise<ArrayBuffer>((resolve) => {\n      gpuReadBuffer.mapAsync(GPUMapMode.READ).then(() => {\n        const data = gpuReadBuffer.getMappedRange().slice(0);\n        gpuReadBuffer.destroy();\n        resolve(data);\n      });\n    });\n\n    this.downloadCache.set(id, {data: readDataPromise});\n\n    return readDataPromise;\n  }\n\n  refreshPendingBuffers(): void {\n    for (const buffer of this.buffersForUploadingPending) {\n      // upload buffer is only useful in the session creation time. So we don't need to reuse them in session running.\n      buffer.destroy();\n    }\n    this.buffersForUploadingPending = [];\n    for (const buffer of this.buffersPending) {\n      // Put the pending buffer to freeBuffers list instead of really destroying it for buffer reusing.\n      this.freeBuffers.get(buffer.size)!.push(buffer);\n    }\n    this.buffersPending = [];\n  }\n\n  dispose() {\n    this.freeBuffers.forEach((buffers) => {\n      buffers.forEach(buffer => {\n        buffer.destroy();\n      });\n    });\n\n    this.storageCache.forEach((storage) => {\n      storage.gpuData.buffer.destroy();\n    });\n\n    this.storageCache = new Map();\n    this.downloadCache = new Map();\n    this.freeBuffers = new Map();\n  }\n}\n\nexport const createGpuDataManager = (...args: ConstructorParameters<typeof GpuDataManagerImpl>): GpuDataManager =>\n    new GpuDataManagerImpl(...args);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport * as binaryOps from './ops/binary-op';\nimport {concat, parseConcatAttributes} from './ops/concat';\nimport {conv, parseConvAttributes} from './ops/conv';\nimport {convTranspose, parseConvTransposeAttributes} from './ops/conv-transpose';\nimport {expand} from './ops/expand';\nimport {gemm, parseGemmAttributes} from './ops/gemm';\nimport {matMul} from './ops/matmul';\nimport * as pool from './ops/pool';\nimport {parseReduceAttributes, reduceL1, reduceL2, reduceLogSum, reduceLogSumExp, reduceMax, reduceMean, reduceMin, reduceProd, reduceSum, reduceSumSquare} from './ops/reduce';\nimport {parseSliceAttributes, slice} from './ops/slice';\nimport {parseSplitAttributes, split} from './ops/split';\nimport {parseTransposeAttributes, transpose} from './ops/transpose';\nimport * as unaryOps from './ops/unary-op';\nimport {ComputeContext} from './types';\n\nexport type RunFunction = (context: ComputeContext, attribute?: unknown) => void;\nexport type ParseAttributeFunction = (attributeRaw: unknown) => unknown;\nexport type OperatorImplementation = [RunFunction]|[RunFunction, ParseAttributeFunction];\n\nexport const WEBGPU_OP_RESOLVE_RULES: Map<string, OperatorImplementation> = new Map([\n  ['Abs', [unaryOps.abs]],\n  ['Acos', [unaryOps.acos]],\n  ['Acosh', [unaryOps.acosh]],\n  ['Add', [binaryOps.add]],\n  ['Asin', [unaryOps.asin]],\n  ['Asinh', [unaryOps.asinh]],\n  ['Atan', [unaryOps.atan]],\n  ['Atanh', [unaryOps.atanh]],\n  // TODO: support new attributes for AveragePool-10\n  ['AveragePool', [pool.averagePool, pool.parseAveragePoolAttributes]],\n  ['Ceil', [unaryOps.ceil]],\n  ['ClipV10', [unaryOps.clipV10]],\n  ['Clip', [unaryOps.clip]],\n  ['Concat', [concat, parseConcatAttributes]],\n  ['Conv', [conv, parseConvAttributes]],\n  ['ConvTranspose', [convTranspose, parseConvTransposeAttributes]],\n  ['Cos', [unaryOps.cos]],\n  ['Cosh', [unaryOps.cosh]],\n  ['Div', [binaryOps.div]],\n  ['Elu', [unaryOps.elu, unaryOps.parseAlphaAttributes]],\n  ['Erf', [unaryOps.erf]],\n  ['Exp', [unaryOps.exp]],\n  ['Expand', [expand]],\n  ['Floor', [unaryOps.floor]],\n  ['Gemm', [gemm, parseGemmAttributes]],\n  ['GlobalAveragePool', [pool.globalAveragePool, pool.parseGlobalAveragePoolAttributes]],\n  ['GlobalMaxPool', [pool.globalMaxPool, pool.parseGlobalMaxPoolAttributes]],\n  ['LeakyRelu', [unaryOps.leakyRelu, unaryOps.parseAlphaAttributes]],\n  ['MatMul', [matMul]],\n  // TODO: support new attributes for MaxPool-8 and MaxPool-10\n  ['MaxPool', [pool.maxPool, pool.parseMaxPoolAttributes]],\n  ['Mul', [binaryOps.mul]],\n  ['Neg', [unaryOps.neg]],\n  ['Pow', [binaryOps.pow]],\n  ['Reciprocal', [unaryOps.reciprocal]],\n  ['ReduceMin', [reduceMin, parseReduceAttributes]],\n  ['ReduceMean', [reduceMean, parseReduceAttributes]],\n  ['ReduceMax', [reduceMax, parseReduceAttributes]],\n  ['ReduceSum', [reduceSum, parseReduceAttributes]],\n  ['ReduceProd', [reduceProd, parseReduceAttributes]],\n  ['ReduceL1', [reduceL1, parseReduceAttributes]],\n  ['ReduceL2', [reduceL2, parseReduceAttributes]],\n  ['ReduceLogSum', [reduceLogSum, parseReduceAttributes]],\n  ['ReduceLogSumExp', [reduceLogSumExp, parseReduceAttributes]],\n  ['ReduceSumSquare', [reduceSumSquare, parseReduceAttributes]],\n  ['Relu', [unaryOps.relu]],\n  ['Sigmoid', [unaryOps.sigmoid]],\n  ['Sin', [unaryOps.sin]],\n  ['Sinh', [unaryOps.sinh]],\n  ['Slice', [slice, parseSliceAttributes]],\n  ['Split', [split, parseSplitAttributes]],\n  ['Sqrt', [unaryOps.sqrt]],\n  ['Sub', [binaryOps.sub]],\n  ['Tan', [unaryOps.tan]],\n  ['Tanh', [unaryOps.tanh]],\n  ['ThresholdedRelu', [unaryOps.thresholdedRelu, unaryOps.parseAlphaAttributes]],\n  ['Transpose', [transpose, parseTransposeAttributes]],\n]);\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/activation_util.ts\n//\n// modified to fit the needs of the project\n\nexport declare type Activation = 'linear' | 'relu' | 'prelu' | 'elu' | 'relu6' | 'leakyrelu' | 'sigmoid';\n\nexport const typeSnippet = (component: number) => {\n  switch (component) {\n    case 1:\n      return 'f32';\n    case 2:\n      return 'vec2<f32>';\n    case 3:\n      return 'vec3<f32>';\n    case 4:\n      return 'vec4<f32>';\n    default:\n      throw new Error(`${component}-component is not supported.`);\n  }\n};\n\nexport const activationFnSnippet =\n    (activation?: Activation, _hasPreluActivationWeights = false, _packed = false, _coordsLength = 3): string => {\n      if (!activation) {\n        return '';\n      }\n\n      // TODO: add implementations\n      return '';\n    };\n\nexport const biasActivationSnippet = (hasBias: boolean, activation?: Activation): string => `\n      ${hasBias ? 'value = value + getBiasByOutputCoords(coords);' : ''}\n      ${activation ? 'value = activation(value, coords);' : ''}\n      `;\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/conv2d_mm_webgpu.ts\n//\n// modified to fit the needs of the project\n\nimport {LOG_DEBUG} from '../../../log';\nimport {TensorView} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {GpuDataType, ProgramInfo, ProgramMetadata} from '../../types';\nimport {ConvAttributes} from '../conv';\n\nimport {Activation, activationFnSnippet, biasActivationSnippet, typeSnippet} from './activation_util';\nimport {utilFunctions} from './conv_util';\nimport {makeMatMulPackedSource, makeMatMulPackedVec4Source} from './matmul_packed_webgpu';\n\nconst conv2dCommonSnippet =\n    (isChannelsLast: boolean, fitAOuter: boolean, fitBOuter: boolean, fitInner: boolean, addBias = false,\n     activation?: Activation, hasPreluActivationWeights = false, innerElementSizeX = 4, innerElementSizeW = 4,\n     innerElementSize = 4): string => {\n      const getXSnippet = (innerElementSize: number) => {\n        switch (innerElementSize) {\n          case 1:\n            return 'resData = x[xIndex];';\n          case 3:\n            return 'resData = vec3<f32>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);';\n          case 4:\n            return 'resData = x[xIndex / 4];';\n          default:\n            throw new Error(`innerElementSize ${innerElementSize} is not supported.`);\n        }\n      };\n      const getWSnippet = (innerElementSize: number) => {\n        switch (innerElementSize) {\n          case 1:\n            return 'return w[row * wShape[3] + colIn];';\n          case 4:\n            return 'return w[row * wShape[3] / 4 + colIn];';\n          default:\n            throw new Error(`innerElementSize ${innerElementSize} is not supported.`);\n        }\n      };\n      const coordASnippet = isChannelsLast ? `\n    let coord = vec4<i32>(batch, xRow, xCol, xCh);\n    ` :\n                                             `\n    let coord = vec4<i32>(batch, xCh, xRow, xCol);\n    `;\n\n      const coordResSnippet = isChannelsLast ? `\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    ` :\n                                               `\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    `;\n\n      const xHeight = isChannelsLast ? 'xShape[1]' : 'xShape[2]';\n      const xWidth = isChannelsLast ? 'xShape[2]' : 'xShape[3]';\n      const row = isChannelsLast ? 'row' : 'col';\n      const col = isChannelsLast ? 'col' : 'row';\n      const readXSnippet = `\n    let inChannels = wShape[2];\n    let outWidth = ${isChannelsLast ? 'outShape[2]' : 'outShape[3]'};\n    let outRow = ${row} / outWidth;\n    let outCol = ${row} % outWidth;\n\n    let WRow = ${col} / (filterDims[1] * inChannels);\n    let WCol = ${col} / inChannels % filterDims[1];\n    let xRow = outRow * stride[0] + dilation[0] * WRow - pad[0];\n    let xCol = outCol * stride[1] + dilation[1] * WCol - pad[1];\n    let xCh = ${col} % inChannels;\n    var resData = ${typeSnippet(innerElementSizeX)}(0.0);\n    // The bounds checking is always needed since we use it to pad zero for\n    // the 'same' padding type.\n    if (xRow >= 0 && xRow < ${xHeight} && xCol >= 0 && xCol < ${xWidth}) {\n      ${coordASnippet}\n      let xIndex = getIndexFromCoords4D(coord, xShape);\n      ${getXSnippet(innerElementSizeX)}\n    }\n    return resData;`;\n\n      const sampleX = isChannelsLast ? (fitAOuter && fitInner ? `\n    let col = colIn * ${innerElementSizeX};\n    ${readXSnippet}` :\n                                                                `\n    let col = colIn * ${innerElementSizeX};\n    if (row < dimAOuter && col < dimInner) {\n      ${readXSnippet}\n    }\n    return ${typeSnippet(innerElementSizeX)}(0.0);`) :\n                                       (fitInner && fitBOuter ? `\n    let col = colIn * ${innerElementSizeX};\n    ${readXSnippet}` :\n                                                                `\n    let col = colIn * ${innerElementSizeX};\n    if (row < dimInner && col < dimBOuter) {\n      ${readXSnippet}\n    }\n    return ${typeSnippet(innerElementSizeX)}(0.0);`);\n\n      const sampleW = `${getWSnippet(innerElementSizeW)}`;\n\n      const resType = typeSnippet(innerElementSize);\n      const aType = isChannelsLast ? typeSnippet(innerElementSizeX) : typeSnippet(innerElementSizeW);\n      const bType = isChannelsLast ? typeSnippet(innerElementSizeW) : typeSnippet(innerElementSizeX);\n      const userCode = `\n    ${activationFnSnippet(activation, hasPreluActivationWeights, innerElementSize === 4, 4)}\n    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${aType} {\n      ${isChannelsLast ? sampleX : sampleW}\n    }\n\n    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${bType} {\n      ${isChannelsLast ? sampleW : sampleX}\n    }\n\n    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${resType}) {\n      let col = colIn * ${innerElementSize};\n      if (row < dimAOuter && col < dimBOuter)\n      {\n      var value = valueIn;\n      let outWidth = ${isChannelsLast ? 'outShape[2]' : 'outShape[3]'};\n      ${coordResSnippet}\n      ${biasActivationSnippet(addBias, activation)}\n      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n      }\n    }`;\n      return userCode;\n    };\n\nexport const createConv2DMatMulProgramInfo =\n    (inputs: readonly TensorView[], metadata: ProgramMetadata, attributes: ConvAttributes,\n     outputShape: readonly number[], dimAOuter: number, dimBOuter: number, dimInner: number, hasBias: boolean,\n     sequentialAccessByThreads: boolean): ProgramInfo => {\n      const isChannelsLast = attributes.format === 'NHWC';\n      const inChannels = isChannelsLast ? inputs[0].dims[3] : inputs[0].dims[1];\n      const batchSize = outputShape[0];\n      const outWidth = isChannelsLast ? outputShape[2] : outputShape[3];\n      const outHeight = isChannelsLast ? outputShape[1] : outputShape[2];\n      const outChannels = isChannelsLast ? outputShape[3] : outputShape[1];\n      const isVec4 = (((inChannels % 4 === 0 || inChannels % 3 === 0) && isChannelsLast) ||\n                      (outWidth % 4 === 0 && !isChannelsLast)) &&\n          outChannels % 4 === 0;\n\n      // TODO: fine tune size\n      const dispatchX = isChannelsLast ? outChannels : outWidth * outHeight;\n      const dispatchY = isChannelsLast ? outWidth * outHeight : outChannels;\n      const workGroupSize: [number, number, number] =\n          isVec4 ? [8, 8, 1] : [dispatchX <= 4 ? 4 : 16, dispatchX > 4 && dispatchY <= 4 ? 4 : 16, 1];\n      const elementsPerThread =\n          isVec4 ? [4, 4, 1] : [dispatchX <= 4 ? 1 : 2, dispatchX > 4 && dispatchY <= 4 ? 1 : 2, 1];\n      const dispatch = [\n        Math.ceil(dispatchX / workGroupSize[0] / elementsPerThread[0]),\n        Math.ceil(dispatchY / workGroupSize[1] / elementsPerThread[1]),\n        Math.ceil(batchSize / workGroupSize[2] / elementsPerThread[1])\n      ];\n\n      LOG_DEBUG('verbose', () => `[conv2d_mm_webgpu] dispatch = ${dispatch}`);\n\n      const innerElementSize = isVec4 ? (isChannelsLast && inChannels % 4 !== 0 ? 3 : 4) : elementsPerThread[0];\n\n      const tileAOuter = workGroupSize[1] * elementsPerThread[1];\n      const tileBOuter = workGroupSize[0] * elementsPerThread[0];\n      const tileInner = Math.max(workGroupSize[0] * innerElementSize, workGroupSize[1]);\n\n      const fitAOuter = dimAOuter % tileAOuter === 0;\n      const fitBOuter = dimBOuter % tileBOuter === 0;\n      const fitInner = dimInner % tileInner === 0;\n\n      const elementsSize = isVec4 ? [innerElementSize, 4, 4] : [1, 1, 1];\n\n      const declareInputs = [\n        `@group(0) @binding(0) var<storage, read> x: array<${isVec4 && innerElementSize === 4 ? 'vec4<f32>' : 'f32'}>;`,\n        `@group(0) @binding(1) var<storage, read> w: array<${isVec4 ? 'vec4<f32>' : 'f32'}>;`\n      ];\n      let declareFunctions = `\n      fn setOutputAtIndex(flatIndex : i32, value : ${isVec4 ? 'vec4<f32>' : 'f32'}) {\n        result[flatIndex] = ${isVec4 ? 'vec4<f32>' : 'f32'}(value);\n      }\n      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${isVec4 ? 'vec4<f32>' : 'f32'}) {\n        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));\n        setOutputAtIndex(flatIndex ${isVec4 ? '/ 4' : ''}, value);\n      }`;\n      if (hasBias) {\n        declareInputs.push(`@group(0) @binding(2) var<storage, read> bias: array<${isVec4 ? 'vec4<f32>' : 'f32'}>;`);\n        declareFunctions += `\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${isVec4 ? 'vec4<f32>' : 'f32'} {\n          return bias[coords.${isChannelsLast ? 'w' : 'y'}${isVec4 ? '/ 4' : ''}];\n        }`;\n      }\n\n      return {\n        ...metadata,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        dispatchGroup: () => ({x: dispatch[0], y: dispatch[1], z: dispatch[2]}),\n        getShaderSource: () => `\n        ${utilFunctions}\n        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,\n        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,\n        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };\n        ${declareInputs.join('')}\n        @group(0) @binding(${declareInputs.length}) var<storage, read_write> result: array<${\n            isVec4 ? 'vec4<f32>' : 'f32'}>;\n        //@group(0) @binding(${declareInputs.length + 1}) var<uniform> uniforms: Uniforms;\n\n        const xShape : vec4<i32> = vec4<i32>(${inputs[0].dims.join(',')});\n        const wShape : vec4<i32> = vec4<i32>(${inputs[1].dims.join(',')});\n        const outShape : vec4<i32> = vec4<i32>(${outputShape.join(',')});\n        const outShapeStrides : vec3<i32> = vec3<i32>(${ShapeUtil.computeStrides(outputShape).slice(0, 3).join(',')});\n        const filterDims : vec2<i32> = vec2<i32>(${attributes.kernelShape[0]}, ${attributes.kernelShape[1]});\n        const pad : vec2<i32> = vec2<i32>(${attributes.pads[0]}, ${attributes.pads[1]});\n        const stride : vec2<i32> = vec2<i32>(${attributes.strides[0]}, ${attributes.strides[1]});\n        const dilation : vec2<i32> = vec2<i32>(${attributes.dilations[0]}, ${attributes.dilations[1]});\n        const dimAOuter : i32 = ${dimAOuter};\n        const dimBOuter : i32 = ${dimBOuter};\n        const dimInner : i32 = ${dimInner};\n        ${declareFunctions}\n        ${\n            conv2dCommonSnippet(\n                isChannelsLast, fitAOuter, fitBOuter, fitInner, hasBias, undefined, false, elementsSize[0],\n                elementsSize[1], elementsSize[2])}\n            ${\n            isVec4 ? makeMatMulPackedVec4Source(elementsPerThread, workGroupSize, !isChannelsLast, tileInner) :\n                     makeMatMulPackedSource(\n                         elementsPerThread, workGroupSize, !isChannelsLast, tileInner, false, undefined,\n                         sequentialAccessByThreads)}`\n      };\n    };\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/conv_backprop_webgpu.ts\n\nimport {LOG_DEBUG} from '../../../log';\nimport {TensorView} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {GpuDataType, ProgramInfo, ProgramMetadata} from '../../types';\nimport {createIndicesHelper, ShaderHelper} from '../common';\nimport {ConvTransposeAttributes} from '../conv-transpose';\n\nconst createConvTranspose2DOpProgramShaderSource =\n    (shaderHelper: ShaderHelper, inputs: readonly TensorView[], attributes: ConvTransposeAttributes,\n     outputShape: readonly number[], hasBias: boolean, elementsPerThread: readonly number[]): string => {\n      const isChannelsLast = attributes.format === 'NHWC';\n      const rowDim = isChannelsLast ? 1 : 2;\n      const colDim = isChannelsLast ? 2 : 3;\n      const channelDim = isChannelsLast ? 3 : 1;\n      const outputSize = ShapeUtil.size(outputShape);\n      const outChannels = outputShape[isChannelsLast ? 3 : 1];\n      const inChannels = inputs[0].dims[isChannelsLast ? 3 : 1];\n      const isVec4 = inChannels % 4 === 0 && outChannels % 4 === 0;\n      const workPerThread = isVec4 ? 2 : 1;\n\n      const innerElementSize = isVec4 ? (isChannelsLast && inChannels % 4 !== 0 ? 3 : 4) : elementsPerThread[0];\n\n      const declareInputs = [\n        `@group(0) @binding(0) var<storage, read> Dy: array<${\n            isVec4 && innerElementSize === 4 ? 'vec4<f32>' : 'f32'}>;`,\n        `@group(0) @binding(1) var<storage, read> W: array<${isVec4 ? 'vec4<f32>' : 'f32'}>;`\n      ];\n      let declareFunctions = `\n  fn setOutputAtIndex(flatIndex : u32, value : ${isVec4 ? 'vec4<f32>' : 'f32'}) {\n    result[flatIndex] = ${isVec4 ? 'vec4<f32>' : 'f32'}(value);\n  }`;\n      if (hasBias) {\n        declareInputs.push(`@group(0) @binding(2) var<storage, read> bias: array<${isVec4 ? 'vec4<f32>' : 'f32'}>;`);\n        declareFunctions += `\n    fn getBiasByOutputCoords(coords : vec4<u32>) -> ${isVec4 ? 'vec4<f32>' : 'f32'} {\n      return bias[coords.${isChannelsLast ? 'w' : 'y'}${isVec4 ? '/ 4' : ''}];\n    }`;\n      }\n      const wIndicesHelper = createIndicesHelper('W', inputs[1].dims);\n      const dyIndicesHelper = createIndicesHelper('Dy', inputs[0].dims);\n      const outputIndicesHelper = createIndicesHelper('result', outputShape);\n      const codeSnippet4 = `{\n        let batch: u32 = global_id.z / outShape[1];\n        let r = global_id.z % outShape[1];\n        let c = global_id.y * ${workPerThread};\n        let d1: u32 = global_id.x * 4;\n\n        let dyCorner = vec2<i32>(i32(r), i32(c)) - vec2<i32>(pads);\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd: array<vec4<f32>, ${workPerThread}>;\n        for (var i = 0; i < ${workPerThread}; i++) {\n          dotProd[i] = vec4<f32>(0.0);\n        }\n        for (var wR: u32 = 0; wR < filterDims[0]; wR = wR + 1) {\n          var dyR = f32(dyCorner.x + wR) / f32(strides.x);\n          let wRPerm: u32= filterDims[0] - 1 - wR;\n          if (dyR < 0.0 || dyR >= f32(outBackprop[1]) ||\n              fract(dyR) > 0.0) {\n            continue;\n          }\n          let idyR: u32 = u32(dyR);\n\n          for (var wC: u32 = 0; wC < filterDims[1]; wC = wC + 1) {\n            let dyC = f32(dyCorner.y + wC) / f32(strides.y);\n            let dyC2 = f32(dyCorner.y + 1 + wC) / f32(strides.y);\n            let wCPerm: u32 = filterDims[1] - 1 - wC;\n            var bDyCVal = true;\n            var bDyCVal2 = true;\n            if (dyC < 0.0 || dyC >= f32(outBackprop[2]) ||\n                fract(dyC) > 0.0) {\n              bDyCVal = false;\n            }\n            if (dyC2 < 0.0 || dyC2 >= f32(outBackprop[2]) ||\n                fract(dyC2) > 0.0) {\n              bDyCVal2 = false;\n            }\n\n            let idyC: u32 = u32(dyC);\n            let idyC2: u32 = u32(dyC2);\n            if (bDyCVal && bDyCVal2) {\n              let d2Length = outBackprop[3];\n              for (var d2 :u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                ${\n          wIndicesHelper.indicesVariableDeclaration(\n              'wIndices0',\n              [\n                'd2', 'd1', 'wRPerm', 'wCPerm'\n              ])};\n                ${\n          wIndicesHelper.indicesVariableDeclaration(\n              'wIndices1',\n              [\n                'd2', 'd1+1', 'wRPerm', 'wCPerm'\n              ])};\n                ${\n          wIndicesHelper.indicesVariableDeclaration(\n              'wIndices2',\n              [\n                'd2', 'd1+2', 'wRPerm', 'wCPerm'\n              ])};\n                ${\n          wIndicesHelper.indicesVariableDeclaration(\n              'wIndices3',\n              [\n                'd2', 'd1+3', 'wRPerm', 'wCPerm'\n              ])};\n                let wValue0 = W[${wIndicesHelper.i2oExpression('wIndices0')}];\n                let wValue1 = W[${wIndicesHelper.i2oExpression('wIndices1')}];\n                let wValue2 = W[${wIndicesHelper.i2oExpression('wIndices2')}];\n                let wValue3 = W[${wIndicesHelper.i2oExpression('wIndices3')}];\n                ${\n          dyIndicesHelper.indicesVariableDeclaration(\n              'dyIndices',\n              isChannelsLast ? ['batch', 'idyR', 'idyC', 'd2'] :\n                               [\n                                 'batch', 'd2', 'idyR', 'idyC'\n                               ])};\n                var xValue =  Dy[${dyIndicesHelper.i2oExpression('dyIndices')}];\n                let tmpval = vec4<f32>(xValue * wValue0,\n                                      xValue * wValue1,\n                                      xValue * wValue2,\n                                      xValue * wValue3);\n                dotProd[0] = dotProd[0] + tmpval;\n\n                ${\n          dyIndicesHelper.indicesVariableDeclaration(\n              'dyIndices2',\n              isChannelsLast ? ['batch', 'idyR', 'idyC2', 'd2'] :\n                               [\n                                 'batch', 'd2', 'idyR', 'idyC2'\n                               ])};\n                xValue =  Dy[${dyIndicesHelper.i2oExpression('dyIndices')}];\n\n                dotProd[1] = dotProd[1] + vec4<f32>(xValue * wValue0,\n                                                    xValue * wValue1,\n                                                    xValue * wValue2,\n                                                    xValue * wValue3);\n              }\n            } else if (bDyCVal) {\n              let d2Length = outBackprop[3];\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                ${\n          wIndicesHelper.indicesVariableDeclaration(\n              'wIndices0',\n              [\n                'd2', 'd1', 'wRPerm', 'wCPerm'\n              ])};\n                ${\n          wIndicesHelper.indicesVariableDeclaration(\n              'wIndices1',\n              [\n                'd2', 'd1+1', 'wRPerm', 'wCPerm'\n              ])};\n                ${\n          wIndicesHelper.indicesVariableDeclaration(\n              'wIndices2',\n              [\n                'd2', 'd1+2', 'wRPerm', 'wCPerm'\n              ])};\n                ${\n          wIndicesHelper.indicesVariableDeclaration(\n              'wIndices3',\n              [\n                'd2', 'd1+3', 'wRPerm', 'wCPerm'\n              ])};\n                let wValue0 = W[${wIndicesHelper.i2oExpression('wIndices0')}];\n                let wValue1 = W[${wIndicesHelper.i2oExpression('wIndices1')}];\n                let wValue2 = W[${wIndicesHelper.i2oExpression('wIndices2')}];\n                let wValue3 = W[${wIndicesHelper.i2oExpression('wIndices3')}];\n                ${\n          dyIndicesHelper.indicesVariableDeclaration(\n              'dyIndices',\n              isChannelsLast ? ['batch', 'idyR', 'idyC', 'd2'] :\n                               [\n                                 'batch', 'd2', 'idyR', 'idyC'\n                               ])};\n                var xValue =  Dy[${dyIndicesHelper.i2oExpression('dyIndices')}];\n                let tmpval = vec4<f32>(xValue * wValue0,\n                                      xValue * wValue1,\n                                      xValue * wValue2,\n                                      xValue * wValue3);\n                dotProd[0] = dotProd[0] + tmpval;\n              }\n            } else if (bDyCVal2) {\n              let d2Length = outBackprop[3];\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                ${\n          wIndicesHelper.indicesVariableDeclaration(\n              'wIndices0',\n              [\n                'd2', 'd1', 'wRPerm', 'wCPerm'\n              ])};\n                ${\n          wIndicesHelper.indicesVariableDeclaration(\n              'wIndices1',\n              [\n                'd2', 'd1+1', 'wRPerm', 'wCPerm'\n              ])};\n                ${\n          wIndicesHelper.indicesVariableDeclaration(\n              'wIndices2',\n              [\n                'd2', 'd1+2', 'wRPerm', 'wCPerm'\n              ])};\n                ${\n          wIndicesHelper.indicesVariableDeclaration(\n              'wIndices3',\n              [\n                'd2', 'd1+3', 'wRPerm', 'wCPerm'\n              ])};\n                let wValue0 = W[${wIndicesHelper.i2oExpression('wIndices0')}];\n                let wValue1 = W[${wIndicesHelper.i2oExpression('wIndices1')}];\n                let wValue2 = W[${wIndicesHelper.i2oExpression('wIndices2')}];\n                let wValue3 = W[${wIndicesHelper.i2oExpression('wIndices3')}];\n                ${\n          dyIndicesHelper.indicesVariableDeclaration(\n              'dyIndices',\n              isChannelsLast ? ['batch', 'idyR', 'idyC', 'd2'] :\n                               [\n                                 'batch', 'd2', 'idyR', 'idyC'\n                               ])};\n                var xValue =  Dy[${dyIndicesHelper.i2oExpression('dyIndices')}];\n                let tmpval = vec4<f32>(xValue * wValue0,\n                                      xValue * wValue1,\n                                      xValue * wValue2,\n                                      xValue * wValue3);\n                dotProd[1] = dotProd[1] + tmpval;\n              }\n            }\n          }\n        }\n\n        for (var i: u32 = 0; i < ${workPerThread}; i = i + 1) {\n          ${\n          outputIndicesHelper.indicesVariableDeclaration('outputIndices', [\n            'batch', 'r', 'c+i', 'd1'\n          ])};\n          result[${outputIndicesHelper.i2oExpression('outputIndices')}] = dotProd[i];\n        }\n      }`;\n      const codeSnippet = `\n          ${outputIndicesHelper.o2iCall('global_idx', 'outputIndices')}\n          let batch = outputIndices[0];\n          let d1 = outputIndices[${channelDim}];\n          let dyCorner = vec2<i32>(i32(outputIndices[${rowDim}]), i32(outputIndices[${colDim}])) - pads;\n          let dyRCorner = dyCorner.x;\n          let dyCCorner = dyCorner.y;\n          // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n          // ? = to be determined. : = across all values in that axis.\n          var dotProd = 0.0;\n          for (var wR: u32 = 0; wR < effectiveFilterDims.x; wR = wR + 1) {\n            if (wR % dilations.x != 0) {\n              continue;\n            }\n            let dyR = (f32(dyRCorner) + f32(wR)) / f32(strides[0]);\n            let wRPerm = filterDims.x - 1 - wR / dilations.x;\n            if (dyR < 0.0 || dyR >= f32(outBackprop[1]) || fract(dyR) > 0.0 ||\n                wRPerm < 0) {\n              continue;\n            }\n            let idyR: u32 = u32(dyR);\n\n            for (var wC: u32 = 0; wC < effectiveFilterDims.y; wC = wC + 1) {\n              if (wC % dilations.y != 0) {\n                continue;\n              }\n              let dyC = (f32(dyCCorner) + f32(wC)) / f32(strides.y);\n              let wCPerm = filterDims.y - 1 - wC / dilations.y;\n              if (dyC < 0.0 || dyC >= f32(outBackprop[2]) ||\n                  fract(dyC) > 0.0 || wCPerm < 0) {\n                continue;\n              }\n              let idyC: u32 = u32(dyC);\n\n              for (var d2: u32 = 0; d2 < outBackprop[3]; d2 = d2 + 1) {\n                ${\n          dyIndicesHelper.indicesVariableDeclaration(\n              'dyIndices',\n              isChannelsLast ? ['batch', 'idyR', 'idyC', 'd2'] :\n                               [\n                                 'batch', 'd2', 'idyR', 'idyC'\n                               ])};\n                let xValue =  Dy[${dyIndicesHelper.i2oExpression('dyIndices')}];\n                  ${\n          wIndicesHelper.indicesVariableDeclaration('wIndices', [\n            'd2', 'd1', 'wRPerm', 'wCPerm'\n          ])};\n\n                let wValue = W[${wIndicesHelper.i2oExpression('wIndices')}];\n                dotProd = dotProd + xValue * wValue;\n              }\n            }\n          }\n          result[global_idx] = dotProd;\n        `;\n\n      return `\n${wIndicesHelper.i2oImpl}\n  ${dyIndicesHelper.i2oImpl}\n  ${outputIndicesHelper.o2iImpl}\n  ${declareFunctions}\n  ${declareInputs.join('\\n')}\n  @group(0) @binding(${declareInputs.length}) var<storage, read_write> result: array<${isVec4 ? 'vec4<f32>' : 'f32'}>;\n  const outShape : vec4<u32> = vec4<u32>(${outputShape.join(',')});\n  const outBackprop : vec4<u32> = vec4<u32>(${inputs[0].dims.join(',')});\n  const strides : vec2<u32> = vec2<u32>(${attributes.strides[0]}, ${attributes.strides[1]});\n  const filterDims : vec2<u32> = vec2<u32>(${attributes.kernelShape[isChannelsLast ? 1 : 2]}, ${\n          attributes.kernelShape[isChannelsLast ? 2 : 3]});\n  const dilations : vec2<u32> = vec2<u32>(${attributes.dilations[0]}, ${attributes.dilations[1]});\n  const effectiveFilterDims : vec2<u32> = filterDims + vec2<u32>(\n          ${\n          attributes.dilations[0] <= 1 ?\n              0 :\n              (attributes.kernelShape[isChannelsLast ? 1 : 2] - 1) * (attributes.dilations[0] - 1)},\n          ${\n          attributes.dilations[1] <= 1 ?\n              0 :\n              (attributes.kernelShape[isChannelsLast ? 2 : 3] - 1) * (attributes.dilations[1] - 1)});\n  const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (${attributes.pads[0] + attributes.pads[2]})/2,\n                                     i32(effectiveFilterDims[1]) - 1 - (${attributes.pads[1] + attributes.pads[3]})/2);\n    ${shaderHelper.mainStart()}\n    ${outputIndicesHelper.indicesVariableDeclaration('outputIndices')}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)};\n  ${isVec4 ? codeSnippet4 : codeSnippet}}`;\n    };\n\nexport const createConvTranspose2DProgramInfo =\n    (inputs: readonly TensorView[], metadata: ProgramMetadata, attributes: ConvTransposeAttributes,\n     squeezeOutputShapeFunction?: (shape: readonly number[]) => number[]): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const isChannelsLast = attributes.format === 'NHWC';\n      const outputShape = attributes.outputShape;\n      const batchSize = outputShape[0];\n      const outWidth = outputShape[isChannelsLast ? 1 : 2];\n      const outHeight = outputShape[isChannelsLast ? 2 : 3];\n      const outChannels = outputShape[isChannelsLast ? 3 : 1];\n      const inChannels = inputs[0].dims[isChannelsLast ? 3 : 1];\n      const isVec4 = inChannels % 4 === 0 && outChannels % 4 === 0;\n\n      const dispatchX = isChannelsLast ? outChannels : outWidth * outHeight;\n      const dispatchY = isChannelsLast ? outWidth * outHeight : outChannels;\n      const workGroupSize: [number, number, number] =\n          isVec4 ? [8, 8, 1] : [dispatchX <= 4 ? 4 : 16, dispatchX > 4 && dispatchY <= 4 ? 4 : 16, 1];\n      const elementsPerThread =\n          isVec4 ? [4, 4, 1] : [dispatchX <= 4 ? 1 : 2, dispatchX > 4 && dispatchY <= 4 ? 1 : 2, 1];\n      const dispatch = [\n        Math.ceil(dispatchX / workGroupSize[0] / elementsPerThread[0]),\n        Math.ceil(dispatchY / workGroupSize[1] / elementsPerThread[1]),\n        Math.ceil(batchSize / workGroupSize[2] / elementsPerThread[1])\n      ];\n      LOG_DEBUG('verbose', () => `[conv2d_backprop_webgpu] dispatch = ${dispatch}`);\n\n      return {\n        ...metadata,\n        outputs: [{\n          dims: squeezeOutputShapeFunction ? squeezeOutputShapeFunction(outputShape) : outputShape,\n          dataType: inputs[0].dataType,\n          gpuDataType: GpuDataType.default\n        }],\n        dispatchGroup: () => ({x: dispatch[0], y: dispatch[1], z: dispatch[2]}),\n        getShaderSource: (shaderHelper: ShaderHelper) => createConvTranspose2DOpProgramShaderSource(\n            shaderHelper, inputs, attributes, outputShape, hasBias, elementsPerThread),\n      };\n    };\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-core/src/ops/conv_util.ts\n//\n// modified to fit the needs of the project\n\nexport const utilFunctions = `\nfn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\n}\nfn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n    outShapeStrides.x, outShapeStrides.y, outShapeStrides.z, 1));\n}\n`;\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/matmul_packed_webgpu.ts\n//\n// modified to fit the needs of the project\n\nconst writeDataToSubAVec4Snippet = (transpose: boolean) => {\n  if (transpose) {\n    return `\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          kStart + inputRow,\n          globalRowStart / innerElementSize + inputCol);\n        `;\n\n  } else {\n    return `\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          globalRow + innerRow,\n          kStart / innerElementSize + inputCol);\n        `;\n  }\n};\n\nconst calculateResultSnippet = (transposeA: boolean, innerElementSize: number) => {\n  if (transposeA) {\n    return `\n        let ACached0 = mm_Asub[k * innerElementSize][localRow];\n        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];\n        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];\n        ${innerElementSize === 3 ? '' : 'let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];'}\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          acc[i] = BCached0 * ACached0[i] + acc[i];\n          acc[i] = BCached1 * ACached1[i] + acc[i];\n          acc[i] = BCached2 * ACached2[i] + acc[i];\n          ${innerElementSize === 3 ? '' : 'acc[i] = BCached3 * ACached3[i] + acc[i];'}\n        }`;\n  } else {\n    return `\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          let ACached = mm_Asub[tileRow + i][k];\n          acc[i] = BCached0 * ACached.x + acc[i];\n          acc[i] = BCached1 * ACached.y + acc[i];\n          acc[i] = BCached2 * ACached.z + acc[i];\n          ${innerElementSize === 3 ? '' : 'acc[i] = BCached3 * ACached.w + acc[i];'}\n        }`;\n  }\n};\n\nexport const makeMatMulPackedVec4Source =\n    (workPerThread: number[], workgroupSize: [number, number, number], transposeA = false, tileInner = 32,\n     splitK = false, splitedDimInner = 32, isVectorA = false): string => {\n      const tileAOuter = workgroupSize[1] * workPerThread[1];\n      const tileBOuter = workgroupSize[0] * workPerThread[0];\n      const tileAWidth = transposeA ? tileAOuter : tileInner;\n      const tileAHight = transposeA ? tileInner : tileAOuter;\n      const innerElementSize = tileAWidth / workgroupSize[0];\n      const rowPerThreadB = tileInner / workgroupSize[1];\n\n      if (!(((transposeA && innerElementSize === 4 && workPerThread[1] === 4) ||\n             (!transposeA && (innerElementSize === 3 || innerElementSize === 4))) &&\n            tileAWidth % workgroupSize[0] === 0 && tileInner % workgroupSize[1] === 0 && workPerThread[0] === 4)) {\n        throw new Error(`If transposeA ${transposeA} is true, innerElementSize ${\n            innerElementSize} and workPerThread[1] ${workPerThread[1]} must be 4.\n      Otherwise, innerElementSize ${innerElementSize} must be 3 or 4.\n  tileAWidth ${tileAWidth} must be divisible by workgroupSize[0]${workgroupSize[0]}. tileInner ${\n            tileInner} must be divisible by workgroupSize[1] ${workgroupSize[1]}. colPerThread ${\n            workPerThread[0]} must be 4.`);\n      }\n      return `\nvar<workgroup> mm_Asub : array<array<vec${innerElementSize}<f32>, ${tileAWidth / innerElementSize}>, ${tileAHight}>;\nvar<workgroup> mm_Bsub : array<array<vec4<f32>, ${tileBOuter / workPerThread[0]}>, ${tileInner}>;\n\nconst rowPerThread = ${workPerThread[1]};\nconst colPerThread = ${workPerThread[0]};\nconst innerElementSize = ${innerElementSize};\nconst tileInner = ${tileInner};\n\n@compute @workgroup_size(${workgroupSize[0]}, ${workgroupSize[1]}, ${workgroupSize[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n  let localRow = i32(localId.y);\n  let tileRow = ${isVectorA ? '0' : 'localRow * rowPerThread'};\n  let tileCol = i32(localId.x);\n\n  let globalRow = ${isVectorA ? '0' : 'i32(globalId.y) * rowPerThread'};\n  let globalCol = i32(globalId.x);\n  let batch = ${splitK ? '0' : 'i32(globalId.z)'};\n  let globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n\n  let numTiles = ${splitK ? `${Math.ceil(splitedDimInner / tileInner)}` : '(dimInner - 1) / tileInner + 1'};\n  var kStart = ${splitK ? `i32(globalId.z) * ${splitedDimInner}` : '0'};\n\n  var acc: array<vec4<f32>, rowPerThread>;\n\n  // Loop over shared dimension.\n  let tileRowB = localRow * ${rowPerThreadB};\n  for (var t = 0; t < numTiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let inputRow = tileRow + innerRow;\n          let inputCol = tileCol;\n          ${writeDataToSubAVec4Snippet(transposeA)}\n      }\n\n      // Load one tile of B into local memory.\n      for (var innerRow = 0; innerRow < ${rowPerThreadB}; innerRow = innerRow + 1) {\n          let inputRow = tileRowB + innerRow;\n          let inputCol = tileCol;\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol);\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {\n          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];\n          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];\n          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];\n          ${innerElementSize === 3 ? '' : 'let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];'}\n\n          ${calculateResultSnippet(transposeA, innerElementSize)}\n      }\n\n      workgroupBarrier();\n  }\n\n  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\n  }\n}`;\n    };\n\nconst writeDataToSubASnippet = (transpose: boolean) => {\n  if (transpose) {\n    return `\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              kStart + inputRow,\n              globalRowStart + inputCol);\n            `;\n\n  } else {\n    return `\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              globalRowStart + inputRow,\n              kStart + inputCol);\n            `;\n  }\n};\n\nconst readDataFromSubASnippet = (transposeA: boolean) =>\n    transposeA ? 'let ACached = mm_Asub[k][tileRow + innerRow];' : 'let ACached = mm_Asub[tileRow + innerRow][k];';\n\n// sequentialAccessByThreads means sequential data in memory is accessed by\n// threads, instead of a single thread (default behavior).\nexport const makeMatMulPackedSource =\n    (workPerThread: number[], workgroupSize: [number, number, number], transposeA = false, tileInner = 32,\n     splitK = false, splitedDimInner = 32, sequentialAccessByThreads = false): string => {\n      const tileAOuter = workPerThread[1] * workgroupSize[1];\n      const tileBOuter = workPerThread[0] * workgroupSize[0];\n      const tileAWidth = transposeA ? tileAOuter : tileInner;\n      const tileAHight = transposeA ? tileInner : tileAOuter;\n\n      if (!(tileAHight % workgroupSize[1] === 0 && tileAWidth % workgroupSize[0] === 0 &&\n            tileInner % workgroupSize[1] === 0)) {\n        throw new Error(`tileAHight ${tileAHight} must be divisible by workgroupSize[1]${\n            workgroupSize[1]}, tileAWidth ${tileAWidth} must be divisible by workgroupSize[0]${\n            workgroupSize[0]}, tileInner ${tileInner} must be divisible by workgroupSize[1]${workgroupSize[1]}`);\n      }\n      const rowPerThreadA = tileAHight / workgroupSize[1];\n      const colPerThreadA = tileAWidth / workgroupSize[0];\n      const rowPerThreadB = tileInner / workgroupSize[1];\n      const matmulSnippet = sequentialAccessByThreads ?\n          `\n    let localRow = i32(localId.y);\n    let localCol = i32(localId.x);\n    let globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n    let globalColStart = i32(workgroupId.x) * ${tileBOuter};\n\n    // Loop over shared dimension.\n    for (var t = 0; t < numTiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var inputRow = localRow; inputRow < ${tileAHight}; inputRow = inputRow + ${workgroupSize[1]}) {\n        for (var inputCol = localCol; inputCol < ${tileAWidth}; inputCol = inputCol + ${workgroupSize[0]}) {\n          ${writeDataToSubASnippet(transposeA)}\n        }\n      }\n      // Load one tile of B into local memory.\n      for (var inputRow = localRow; inputRow < ${tileInner}; inputRow = inputRow + ${workgroupSize[1]}) {\n            for (var inputCol = localCol; inputCol < ${tileBOuter}; inputCol = inputCol + ${workgroupSize[0]}) {\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n            kStart + inputRow,\n            globalColStart + inputCol);\n        }\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      var BCached : array<f32, colPerThread>;\n      for (var k = 0; k < tileInner; k = k + 1) {\n        for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n          BCached[inner] = mm_Bsub[k][localCol + inner * ${workgroupSize[0]}];\n        }\n        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let ACached = ${\n              transposeA ? `mm_Asub[k][localRow + innerRow * ${workgroupSize[1]}];` :\n                           `mm_Asub[localRow + innerRow * ${workgroupSize[1]}][k];`}\n          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n            acc[innerRow][innerCol] = acc[innerRow][innerCol] +\n                ACached * BCached[innerCol];\n          }\n        }\n      }\n      workgroupBarrier();\n    }\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      let gRow = globalRowStart + localRow + innerRow * ${workgroupSize[1]};\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        let gCol = globalColStart + localCol + innerCol * ${workgroupSize[0]};\n        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\n      }\n    }\n    ` :\n          `\nlet tileRow = i32(localId.y) * rowPerThread;\nlet tileCol = i32(localId.x) * colPerThread;\n\nlet globalRow = i32(globalId.y) * rowPerThread;\nlet globalCol = i32(globalId.x) * colPerThread;\nlet globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n\nlet tileRowA = i32(localId.y) * ${rowPerThreadA};\nlet tileColA = i32(localId.x) * ${colPerThreadA};\nlet tileRowB = i32(localId.y) * ${rowPerThreadB};\n// Loop over shared dimension.\nfor (var t = 0; t < numTiles; t = t + 1) {\n  // Load one tile of A into local memory.\n  for (var innerRow = 0; innerRow < ${rowPerThreadA}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < ${colPerThreadA}; innerCol = innerCol + 1) {\n      let inputRow = tileRowA + innerRow;\n      let inputCol = tileColA + innerCol;\n      ${writeDataToSubASnippet(transposeA)}\n    }\n  }\n\n  // Load one tile of B into local memory.\n  for (var innerRow = 0; innerRow < ${rowPerThreadB}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n      let inputRow = tileRowB + innerRow;\n      let inputCol = tileCol + innerCol;\n      mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n        kStart + inputRow,\n        globalCol + innerCol);\n    }\n  }\n  kStart = kStart + tileInner;\n  workgroupBarrier();\n\n  // Compute acc values for a single thread.\n  var BCached : array<f32, colPerThread>;\n  for (var k = 0; k < tileInner; k = k + 1) {\n    for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n      BCached[inner] = mm_Bsub[k][tileCol + inner];\n    }\n\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      ${readDataFromSubASnippet(transposeA)}\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];\n      }\n    }\n  }\n\n  workgroupBarrier();\n}\n\nfor (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n    mm_write(batch, globalRow + innerRow, globalCol + innerCol,\n        acc[innerRow][innerCol]);\n  }\n}\n`;\n\n      return `\n  var<workgroup> mm_Asub : array<array<f32, ${tileAWidth}>, ${tileAHight}>;\n  var<workgroup> mm_Bsub : array<array<f32, ${tileBOuter}>, ${tileInner}>;\n  const rowPerThread = ${workPerThread[1]};\n  const colPerThread = ${workPerThread[0]};\n  const tileInner = ${tileInner};\n\n@compute @workgroup_size(${workgroupSize[0]}, ${workgroupSize[1]}, ${workgroupSize[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n    let batch = ${splitK ? '0' : 'i32(globalId.z)'};\n    let numTiles = ${splitK ? `${Math.ceil(splitedDimInner / tileInner)}` : '(dimInner - 1) / tileInner + 1'};\n    var kStart = ${splitK ? `i32(globalId.z) * ${splitedDimInner}` : '0'};\n\n    var acc : array<array<f32, colPerThread>, rowPerThread>;\n\n    // Without this initialization strange values show up in acc.\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = 0.0;\n      }\n    }\n    ${matmulSnippet}\n  }\n`;\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../util';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {createIndicesHelper, ShaderHelper} from './common';\n\ntype BuiltinFunctionName = string;\ntype BinaryCustomExpression = (expressionA: string, expressionB: string) => string;\ntype BinaryFunctionCall = BuiltinFunctionName|BinaryCustomExpression|{\n  scalar: BinaryCustomExpression;\n  vector: BinaryCustomExpression;\n};\n\nconst createBinaryOpProgramShader =\n    (shaderHelper: ShaderHelper, dimsA: readonly number[], dimsB: readonly number[], dimsOutput: readonly number[],\n     vectorize: boolean, doBroadcast: boolean, funcCall: BinaryFunctionCall, additionalImplementation?: string,\n     typeA = 'f32', typeB = 'f32', typeOutput = 'f32') => {\n      const outputSize = ShapeUtil.size(dimsOutput);\n      const vecSize = Math.ceil(outputSize / 4);\n\n      let expressionScalar: BinaryCustomExpression;\n      let expressionVector: BinaryCustomExpression;\n      if (typeof funcCall === 'string') {\n        expressionScalar = expressionVector = (a, b) => `${funcCall}((${a}),(${b}))`;\n      } else if (typeof funcCall === 'function') {\n        expressionScalar = expressionVector = funcCall;\n      } else {\n        expressionScalar = funcCall.scalar;\n        expressionVector = funcCall.vector;\n      }\n\n      let broadcastImpl = '';\n      const outputIndicesHelper = createIndicesHelper('output', dimsOutput);\n      if (doBroadcast) {\n        const calcOffsetImpl = (dims: readonly number[]) => {\n          const strides = ShapeUtil.computeStrides(dims);\n          const offsets: string[] = [];\n          for (let i = dims.length - 1; i >= 0; i--) {\n            const idx = dimsOutput.length === 0 ? '0u' :\n                (dimsOutput.length === 1)       ? '(*outputIndices)' :\n                                                  `(*outputIndices)[${i + dimsOutput.length - dims.length}]`;\n            offsets.push(`${strides[i]}u * (${idx} % ${dims[i]}u)`);\n          }\n          return offsets.length > 0 ? offsets.join('+') : '0u';\n        };\n\n        broadcastImpl = `\n  ${outputIndicesHelper.o2iImpl}\n\n  fn calcOffsetA(outputIndices: ptr<function, ${outputIndicesHelper.iType}>) -> u32 {\n    return ${calcOffsetImpl(dimsA)};\n  }\n\n  fn calcOffsetB(outputIndices: ptr<function, ${outputIndicesHelper.iType}>) -> u32 {\n    return ${calcOffsetImpl(dimsB)};\n  }\n  `;\n      }\n\n      let assignment: string;\n      if (vectorize) {\n        if (doBroadcast) {\n          assignment = `\n      ${outputIndicesHelper.indicesVariableDeclaration('outputIndices')}\n      ${outputIndicesHelper.o2iCall('global_idx * 4u', 'outputIndices')}\n      let offsetA = calcOffsetA(&outputIndices);\n      let offsetB = calcOffsetB(&outputIndices);\n      outputData[global_idx] = ${expressionVector('aData[offsetA / 4u]', 'bData[offsetB / 4u]')};`;\n        } else {\n          assignment = `outputData[global_idx] = ${expressionVector('aData[global_idx]', 'bData[global_idx]')};`;\n        }\n      } else {\n        if (!doBroadcast) {\n          throw new Error('no necessary to use scalar implementation for element-wise binary op implementation.');\n        }\n        const singleAssignment = (x: number) => {\n          const expressionA = `aData[indexA${x}][componentA${x}]`;\n          const expressionB = `bData[indexB${x}][componentB${x}]`;\n          return `\n      ${outputIndicesHelper.o2iCall(`global_idx * 4u + ${x}u`, 'outputIndices')}\n      let offsetA${x} = calcOffsetA(&outputIndices);\n      let offsetB${x} = calcOffsetB(&outputIndices);\n      let indexA${x} = offsetA${x} / 4u;\n      let indexB${x} = offsetB${x} / 4u;\n      let componentA${x} = offsetA${x} % 4u;\n      let componentB${x} = offsetB${x} % 4u;\n      outputData[global_idx][${x}] = ${expressionScalar(expressionA, expressionB)};`;\n        };\n\n        assignment = `\n      ${outputIndicesHelper.indicesVariableDeclaration('outputIndices')}\n      ${singleAssignment(0)}\n      ${singleAssignment(1)}\n      ${singleAssignment(2)}\n      ${singleAssignment(3)}`;\n      }\n\n      return `\n  @group(0) @binding(0) var<storage, read> aData : array<vec4<${typeA}>>;\n  @group(0) @binding(1) var<storage, read> bData : array<vec4<${typeB}>>;\n  @group(0) @binding(2) var<storage, read_write> outputData : array<vec4<${typeOutput}>>;\n\n  ${additionalImplementation ?? ''}\n  ${broadcastImpl}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(vecSize)}\n    ${assignment}\n  }`;\n    };\n\nconst createBinaryOpProgramInfo =\n    (metadata: ProgramMetadata, a: TensorView, b: TensorView, funcCall: BinaryFunctionCall,\n     additionalImplementation?: string, outputDataType: number = a.dataType): ProgramInfo => {\n      const isBroadcast = !ShapeUtil.areEqual(a.dims, b.dims);\n      let outputShape = a.dims;\n      let outputSize = ShapeUtil.size(a.dims);\n\n      let vectorize = false;\n\n      // TODO: deal with zero-sized tensors (eg. dims=[1,0])\n\n      if (isBroadcast) {\n        const calculatedShape = BroadcastUtil.calcShape(a.dims, b.dims, false);\n        if (!calculatedShape) {\n          throw new Error('Can\\'t perform binary op on the given tensors');\n        }\n        outputShape = calculatedShape;\n        outputSize = ShapeUtil.size(outputShape);\n\n        // check whether vectorize can be enabled\n        let sharedDimension = 1;\n        for (let i = 0; i < outputShape.length; i++) {\n          const dimA = a.dims[a.dims.length - i] ?? 1;\n          const dimB = b.dims[b.dims.length - i] ?? 1;\n          if (dimA === dimB) {\n            sharedDimension *= dimA;\n          } else {\n            break;\n          }\n        }\n        if (sharedDimension % 4 === 0) {\n          vectorize = true;\n        }\n\n\n      } else {\n        // element-wise\n        vectorize = true;\n      }\n\n      return {\n        ...metadata,\n        getShaderSource: (shaderHelper) => createBinaryOpProgramShader(\n            shaderHelper, a.dims, b.dims, outputShape, vectorize, isBroadcast, funcCall, additionalImplementation),\n        outputs: [{dims: outputShape, dataType: outputDataType, gpuDataType: GpuDataType.default}],\n        dispatchGroup: () =>\n            ({x: Math.ceil(outputSize / 64 /* workgroup size */ / (vectorize ? 4 : 1) /* vec size */)})\n      };\n    };\n\nconst createBinaryOpProgramInfoLoader =\n    (inputs: readonly TensorView[], name: string, funcCall: BinaryFunctionCall, additionalImplementation?: string,\n     cacheKey?: string): ProgramInfoLoader => {\n      const metadata:\n          ProgramMetadata = {name, inputTypes: [GpuDataType.default, GpuDataType.default], cacheHint: cacheKey};\n      return {\n        ...metadata,\n        get: () => createBinaryOpProgramInfo(metadata, inputs[0], inputs[1], funcCall, additionalImplementation)\n      };\n    };\n\nexport const add = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(context.inputs, 'Add', (a, b) => `${a}+${b}`));\n};\n\nexport const div = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(context.inputs, 'Div', (a, b) => `${a}/${b}`));\n};\n\nexport const mul = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(context.inputs, 'Mul', (a, b) => `${a}*${b}`));\n};\n\nexport const pow = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(\n      context.inputs, 'Pow', ({scalar: (a, b) => `pow_f32(${a},${b})`, vector: (a, b) => `pow_vf32(${a},${b})`}), `\n    fn pow_f32(a : f32, b : f32) -> f32 {\n      if (b == 0.0) {\n        return 1.0;\n      } else if (a < 0.0 && b != floor(b)) {\n        return pow(a, b); // NaN\n      }\n      return select(sign(a), 1.0, round(abs(b) % 2.0) != 1.0) * pow(abs(a), b);\n    }\n    fn pow_vf32(a : vec4<f32>, b : vec4<f32>) -> vec4<f32> {\n      // TODO: implement vectorized pow\n      return vec4<f32>(pow_f32(a.x, b.x), pow_f32(a.y, b.y), pow_f32(a.z, b.z), pow_f32(a.w, b.w));\n    }\n      `));\n};\n\nexport const sub = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(context.inputs, 'Sub', (a, b) => `${a}-${b}`));\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ShapeUtil} from '../../util';\n\n/**\n * constant value for a workgroup size.\n *\n * We definitely can do further optimization in future, but for now we use 64.\n *\n * rule of thumb: Use [a workgroup size of] 64 unless you know what GPU you are targeting or that your workload\n *                needs something different.\n *\n * from: https://surma.dev/things/webgpu/\n **/\nexport const WORKGROUP_SIZE = 64;\n\nexport interface IndicesHelper {\n  /**\n   * WGSL code of function implementation for offset-to-indices\n   */\n  o2iImpl: string;\n  /**\n   * WGSL code of function call for offset-to-indices\n   */\n  o2iCall: (varOffset: string, varIndices: string) => string;\n  /**\n   * WGSL code of function implementation for indices-to-offset\n   */\n  i2oImpl: string;\n  /**\n   * WGSL code of function implementation for indices-to-offset\n   *\n   * @param isPtr - whether the variable is a pointer. default is false.\n   */\n  i2oExpression: (varIndices: string, isPtr?: boolean) => string;\n  /**\n   * WGSL code of indices variable declaration\n   *\n   * @param v - variable name.\n   * @param init - initial value.\n   */\n  indicesVariableDeclaration: (v: string, init?: string[]) => string;\n  /**\n   * data type of indices\n   */\n  iType: string;\n}\n\nexport const createIndicesHelper = (name: string, shape: readonly number[]): IndicesHelper => {\n  const iType = shape.length < 2 ? 'u32' : `array<u32, ${shape.length}>`;\n\n  const strides = ShapeUtil.computeStrides(shape);\n  let o2iSnippet = '';\n  for (let i = 0; i < shape.length - 1; i++) {\n    o2iSnippet += `\n    let dim${i} = current / ${strides[i]}u;\n    let rest${i} = current % ${strides[i]}u;\n    (*indices)[${i}] = dim${i};\n    current = rest${i};\n    `;\n  }\n  o2iSnippet += `(*indices)[${shape.length - 1}] = current;`;\n\n  const o2iImpl = shape.length < 2 ? '' : `\n  fn ih_o2i_${name}(offset: u32, indices: ptr<function, ${iType}>) {\n    var current = offset;\n    ${o2iSnippet}\n  }`;\n\n  const o2iCall = (varOffset: string, varIndices: string) =>\n      shape.length < 2 ? `${varIndices}=${varOffset};` : `ih_o2i_${name}(${varOffset}, &${varIndices});`;\n\n  const offsets: string[] = [];\n  if (shape.length === 0) {\n    offsets.push('0u');\n  } else if (shape.length < 2) {\n    offsets.push('(*indices)');\n  } else {\n    for (let i = shape.length - 1; i >= 0; i--) {\n      offsets.push(`${strides[i]}u * ((*indices)[${i}])`);\n    }\n  }\n\n  const i2oImpl = shape.length < 2 ? '' : `\n  fn ih_i2o_${name}(indices: ptr<function, ${iType}>) -> u32 {\n    return ${offsets.join('+')};\n  }`;\n\n  const i2oExpression = (varIndices: string, isPtr?: boolean) =>\n      shape.length < 2 ? `(${isPtr ? '*' : ''}${varIndices})` : `ih_i2o_${name}(${isPtr ? '' : '&'}${varIndices})`;\n\n  const indicesVariableDeclaration = (v: string, init?: string[]) =>\n      `var ${v}:${iType}${init ? `=${iType}(${init.join(',')})` : ''};`;\n\n  return {o2iImpl, o2iCall, i2oImpl, i2oExpression, indicesVariableDeclaration, iType};\n};\n\n/**\n * A ShaderHelper is a helper class for generating WGSL code.\n */\nexport interface ShaderHelper {\n  mainStart(workgroupSize?: number|[number, number, number]): string;\n  guardAgainstOutOfBoundsWorkgroupSizes(size: unknown): string;\n}\n\nclass ShaderHelperImpl implements ShaderHelper {\n  constructor(private normalizedDispatchGroup: [number, number, number]) {}\n  guardAgainstOutOfBoundsWorkgroupSizes(size: number|string): string {\n    // Guard against out-of-bounds work group sizes\n    const sizeInCode = typeof size === 'number' ? `${size}u` : size;\n    return `if (global_idx >= ${sizeInCode}) { return; }`;\n  }\n  mainStart(workgroupSize: number|[number, number, number] = WORKGROUP_SIZE) {\n    const workgroupSizeX = typeof workgroupSize === 'number' ? workgroupSize : workgroupSize[0];\n    const workgroupSizeY = typeof workgroupSize === 'number' ? 1 : workgroupSize[1];\n    const workgroupSizeZ = typeof workgroupSize === 'number' ? 1 : workgroupSize[2];\n\n    const is1DimensionDispatch = this.normalizedDispatchGroup[1] === 1 && this.normalizedDispatchGroup[2] === 1;\n    const paramList = is1DimensionDispatch ? '@builtin(global_invocation_id) global_id : vec3<u32>' :\n                                             `@builtin(local_invocation_index) local_index : u32,\n    @builtin(workgroup_id) workgroup_id : vec3<u32>`;\n    const globalIdxDefinition = is1DimensionDispatch ?\n        'let global_idx = global_id.x;' :\n        `let global_idx = (workgroup_id.z * ${this.normalizedDispatchGroup[0] * this.normalizedDispatchGroup[1]}u +\n          workgroup_id.y * ${this.normalizedDispatchGroup[0]}u + workgroup_id.x) * ${\n            workgroupSizeX * workgroupSizeY * workgroupSizeZ}u + local_index;`;\n\n    return `@compute @workgroup_size(${workgroupSizeX}, ${workgroupSizeY}, ${workgroupSizeZ})\n  fn main(${paramList}) {\n    ${globalIdxDefinition}\n  `;\n  }\n}\n\nexport const createShaderHelper = (dispatchGroup: [number, number, number]): ShaderHelper =>\n    new ShaderHelperImpl(dispatchGroup);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor';\nimport {ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {createIndicesHelper, IndicesHelper, ShaderHelper} from './common';\n\nexport interface ConcatAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length < 1) {\n    throw new Error('too few inputs');\n  }\n\n  const inputType = inputs[0].dataType;\n  const inputDimensionality = inputs[0].dims.length;\n\n  for (const input of inputs) {\n    // make sure types of all inputs match\n    if (input.dataType !== inputType) {\n      throw new Error('input tensors should be one type');\n    }\n\n    // make sure the dimensionality of all inputs are the same\n    if (input.dims.length !== inputDimensionality) {\n      throw new Error('input tensors should have the same shape');\n    }\n  }\n};\n\nconst createConcatProgramMetadata = (inputCount: number, cacheHint: string) =>\n    ({name: 'Concat', inputTypes: Array(inputCount).fill(GpuDataType.default), cacheHint});\n\nconst calculateInputIndexImpl = (numberOfTensors: number): string => `\n  fn calculateInputIndex(index: u32) -> u32 {\n    for (var i: u32 = 0u; i < ${numberOfTensors}u; i += 1u ) {\n      if (index < sizeInConcatAxis[i]) {\n        return i;\n      }\n    }\n    return ${numberOfTensors}u;\n  }`;\n\nconst readBufferDataImpl = (indicesHelper: readonly IndicesHelper[], tensorRank: number, dataType: string) => {\n  const numberOfTensors = indicesHelper.length;\n  const codeLines: string[] = [];\n  for (let i = 0; i < numberOfTensors; ++i) {\n    const returnSnippet = `return input${i}[${indicesHelper[i].i2oExpression('indices', true)}];`;\n    if (numberOfTensors === 1) {\n      codeLines.push(returnSnippet);\n    } else if (i === 0) {\n      codeLines.push(`if (textureIndex == ${i}u) { ${returnSnippet} }`);\n    } else if (i === numberOfTensors - 1) {\n      codeLines.push(`else { ${returnSnippet} }`);\n    } else {\n      codeLines.push(`else if (textureIndex == ${i}) { ${returnSnippet} }`);\n    }\n  }\n  return `\n    fn readBufferData(textureIndex: u32, indices: ptr<function, ${indicesHelper[0].iType}>) -> ${dataType} {\n      ${codeLines.join('\\n')}\n    }`;\n};\n\nconst createConcatProgramInfo =\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], axis: number, dataType = 'f32'): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      const adjustedAxis = (axis < 0) ? inputShape.length + axis : axis;\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === adjustedAxis) {\n            outputShape[adjustedAxis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const outputSize = ShapeUtil.size(outputShape);\n      const rank = outputShape.length;\n\n      const sizeInConcatAxis = new Array<number>(inputs.length);\n      const inputStorageBuffersDeclarations = new Array<string>(inputs.length);\n      const inputIndicesHelpers = new Array<IndicesHelper>(inputs.length);\n\n      let previousSum = 0;\n      for (let i = 0; i < inputs.length; ++i) {\n        previousSum += inputs[i].dims[adjustedAxis];\n        sizeInConcatAxis[i] = previousSum;\n\n        inputStorageBuffersDeclarations[i] =\n            `@group(0) @binding(${i}) var<storage, read> input${i} : array<${dataType}>;`;\n\n        inputIndicesHelpers[i] = createIndicesHelper(`input${i}`, inputs[i].dims);\n      }\n\n      const outputIndicesHelper = createIndicesHelper('output', outputShape);\n\n      const indicesAxis = rank < 2 ? 'indices' : `indices[${adjustedAxis}]`;\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n\n  ${inputStorageBuffersDeclarations.join('\\n')}\n  @group(0) @binding(${inputs.length}) var<storage, read_write> output : array<${dataType}>;\n\n  ${inputIndicesHelpers.map(i => i.i2oImpl).join('\\n')}\n  ${outputIndicesHelper.o2iImpl}\n\n  const sizeInConcatAxis = array<u32, ${sizeInConcatAxis.length}>(${sizeInConcatAxis.map(i => `${i}u`).join(',')});\n  ${calculateInputIndexImpl(sizeInConcatAxis.length)}\n  ${readBufferDataImpl(inputIndicesHelpers, rank, dataType)}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n    ${outputIndicesHelper.indicesVariableDeclaration('indices')}\n    ${outputIndicesHelper.o2iCall('global_idx', 'indices')}\n\n    let textureIndex = calculateInputIndex(${indicesAxis});\n    if (textureIndex != 0u) {\n      ${indicesAxis} -= sizeInConcatAxis[textureIndex - 1u];\n    }\n\n    output[global_idx] = readBufferData(textureIndex, &indices);\n  }`;\n      return {\n        ...metadata,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        getShaderSource,\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n      };\n    };\n\nconst createConcatProgramInfoLoader =\n    (inputs: readonly TensorView[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createConcatProgramInfo(metadata, inputs, attributes.axis)};\n    };\n\nexport const concat = (context: ComputeContext, attributes: ConcatAttributes): void => {\n  validateInputs(context.inputs);\n  context.compute(createConcatProgramInfoLoader(context.inputs, attributes));\n};\n\nexport const parseConcatAttributes = (attributes: Record<string, unknown>): ConcatAttributes =>\n    createAttributeWithCacheKey({axis: attributes.axis as number});\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor';\nimport {ShapeUtil} from '../../util';\nimport {GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {createIndicesHelper, ShaderHelper} from './common';\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {getActicationSnippet} from './fuse-utils';\n\nconst createGroupedConvProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'GroupedConv',\n  inputTypes: hasBias ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\n                        [GpuDataType.default, GpuDataType.default],\n  cacheHint\n});\n\nconst createGroupedConvProgramInfo =\n    (inputs: readonly TensorView[], metadata: ProgramMetadata, attributes: ConvAttributes,\n     squeezeOutputShapeFunction?: (shape: readonly number[]) => number[]): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += b[output_channel];' : '';\n      const xShape = inputs[0].dims;\n      const wShape = inputs[1].dims;\n      const outputChannelsPerGroup = wShape[0] / attributes.group;\n\n      const dataType = 'f32';  // TODO: support other data type\n      const {activationFunction, applyActivation} = getActicationSnippet(attributes);\n      const inputStorageBuffersDeclarations = [\n        `@group(0) @binding(0) var<storage, read> x : array<${dataType}>;`,\n        `@group(0) @binding(1) var<storage, read> w : array<${dataType}>;`\n      ];\n      if (hasBias) {\n        inputStorageBuffersDeclarations.push(`@group(0) @binding(2) var<storage, read> b : array<${dataType}>;`);\n      }\n\n      const isChannelLast = attributes.format === 'NHWC';\n      const outputShape = calculateOutputShape(\n          xShape, wShape, attributes.dilations, attributes.pads, attributes.strides, isChannelLast);\n      const outputSize = ShapeUtil.size(outputShape);\n      const outputIndicesHelper = createIndicesHelper('output', outputShape);\n      const xIndicesHelper = createIndicesHelper('x', xShape);\n      const wIndicesHelper = createIndicesHelper('w', wShape);\n\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n  const strides: vec2<u32> = vec2(${attributes.strides[0]}u, ${attributes.strides[1]}u);\n  const pads: vec2<u32> = vec2(${attributes.pads[0]}u, ${attributes.pads[1]}u);\n\n  ${inputStorageBuffersDeclarations.join('\\n')}\n  @group(0) @binding(${inputStorageBuffersDeclarations.length}) var<storage, read_write> output : array<${dataType}>;\n\n  ${activationFunction}\n  ${outputIndicesHelper.o2iImpl}\n  ${xIndicesHelper.i2oImpl}\n  ${wIndicesHelper.i2oImpl}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n    ${outputIndicesHelper.indicesVariableDeclaration('outputIndices')}\n    ${outputIndicesHelper.o2iCall('global_idx', 'outputIndices')}\n    let batch: u32 = outputIndices[0];\n    let output_channel: u32 = outputIndices[${isChannelLast ? 3 : 1}];\n    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${isChannelLast ? 1 : 2}], outputIndices[${\n          isChannelLast ? 2 : 3}]) * strides - pads;\n    let group_id: u32 = output_channel / ${outputChannelsPerGroup}u;\n\n    var value: ${dataType} = ${dataType}(0);\n    for (var wInChannel: u32 = 0u; wInChannel < ${wShape[1]}u; wInChannel++) {\n      let input_channel = group_id * ${wShape[1]}u + wInChannel;\n      for (var wHeight: u32 = 0u; wHeight < ${wShape[2]}u; wHeight++) {\n        let xHeight = xRCCorner.x + wHeight * ${attributes.dilations[0]}u;\n\n        if (xHeight < 0u || xHeight >= ${xShape[isChannelLast ? 1 : 2]}u) {\n          continue;\n        }\n\n        for (var wWidth: u32 = 0u; wWidth < ${wShape[3]}u; wWidth++) {\n          let xWidth = xRCCorner.y + wWidth * ${attributes.dilations[1]}u;\n          if (xWidth < 0u || xWidth >= ${xShape[isChannelLast ? 2 : 3]}u) {\n            continue;\n          }\n\n          ${\n          xIndicesHelper.indicesVariableDeclaration(\n              'xIndices',\n              isChannelLast ? ['batch', 'xHeight', 'xWidth', 'input_channel'] :\n                              [\n                                'batch', 'input_channel', 'xHeight', 'xWidth'\n                              ])}\n          let xVal = x[${xIndicesHelper.i2oExpression('xIndices')}];\n          ${\n          wIndicesHelper.indicesVariableDeclaration('wIndices', [\n            'output_channel', 'wInChannel', 'wHeight', 'wWidth'\n          ])}\n          let wVal = w[${wIndicesHelper.i2oExpression('wIndices')}];\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${processBias}\n    ${applyActivation}\n    output[global_idx] = value;\n  }`;\n      return {\n        ...metadata,\n        outputs: [{\n          dims: squeezeOutputShapeFunction ? squeezeOutputShapeFunction(outputShape) : outputShape,\n          dataType: inputs[0].dataType,\n          gpuDataType: GpuDataType.default\n        }],\n        getShaderSource,\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n      };\n    };\n\n/**\n * naive grouped conv implementation, supports 1d/2d conv\n * @param squeezeOutputShapeFunction - an optional function to squeeze the output shape, only used in conv1d\n */\nexport const createGroupedConvProgramInfoLoader =\n    (inputs: readonly TensorView[], attributes: ConvAttributes,\n     squeezeOutputShapeFunction?: (shape: readonly number[]) => number[]): ProgramInfoLoader => {\n      const metadata = createGroupedConvProgramMetadata(inputs.length > 2, attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createGroupedConvProgramInfo(inputs, metadata, attributes, squeezeOutputShapeFunction)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor';\nimport {createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {createConvTranspose2DProgramInfo} from './3rd-party/conv_backprop_webgpu';\nimport {ConvAttributes} from './conv';\nimport {parseInternalActivationAttributes} from './fuse-utils';\n\nconst computeTotalPad =\n    (inDim: number, stride: number, adj: number, kernel: number, dilation: number, outSize: number) =>\n        (inDim - 1) * stride + adj + (kernel - 1) * dilation + 1 - outSize;\n\nconst distributePadding = (totalPad: number, autoPad: string, pads: number[], head: number, tail: number) => {\n  const smallPad = Math.floor(totalPad / 2);\n  if (autoPad === 'SAME_UPPER') {\n    pads[head] = smallPad;\n    pads[tail] = totalPad - smallPad;\n  } else if (autoPad === 'SAME_LOWER') {\n    pads[head] = totalPad - smallPad;\n    pads[tail] = smallPad;\n  }\n};\n\nconst calculateOutputShapeAndPads =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[], autoPad: string,\n     group: number, pads: number[], strides: readonly number[], isChannelLast: boolean, outputPadding: number[],\n     outputShape: number[]) => {\n      const spatialRank = inputShape.length - 2;\n      const updateOutputShape = outputShape.length === 0;\n      if (outputPadding.length === 0) {\n        for (let i = 0; i < spatialRank; ++i) {\n          outputPadding.push(0);\n        }\n      }\n      const batchSize = inputShape[0];\n      const outChannels = kernelShape[isChannelLast ? 3 : 1] * group;\n      for (let i = 0, j = inputShape.length - spatialRank - (isChannelLast ? 1 : 0); i < spatialRank; ++i, ++j) {\n        const inSize = inputShape[j];\n        const outSize = updateOutputShape ? inSize * strides[i] : outputShape[i];\n        const totalPad = computeTotalPad(inSize, strides[i], pads[i], kernelShape[j], dilations[i], outSize);\n        distributePadding(totalPad, autoPad, pads, i, i + spatialRank);\n        if (updateOutputShape) {\n          outputShape.push(\n              strides[i] * (inSize - 1) + outputPadding[i] + (kernelShape[j] - 1) * dilations[i] + 1 - pads[i] -\n              pads[i + spatialRank]);\n        }\n      }\n      outputShape.splice(0, 0, batchSize);\n      outputShape.splice(isChannelLast ? 3 : 1, 0, outChannels);\n    };\n\nexport interface ConvTransposeAttributes extends ConvAttributes {\n  readonly outputPadding: readonly number[];\n  readonly outputShape: readonly number[];\n}\n\n\nconst getAdjustedConvTransposeAttributes =\n    <T extends ConvTransposeAttributes>(attributes: T, inputs: readonly TensorView[]): T => {\n      const kernelShape = attributes.kernelShape.slice();\n      // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n      if (attributes.kernelShape.length === 0 || attributes.kernelShape.reduce((a, b) => a * b, 0) === 0) {\n        kernelShape.length = 0;\n        for (let i = 2; i < inputs[1].dims.length; ++i) {\n          kernelShape.push(inputs[1].dims[i]);\n        }\n      }\n      const isChannelsLast = attributes.format === 'NHWC';\n      kernelShape.splice(0, 0, inputs[1].dims[0]);\n      kernelShape.splice(isChannelsLast ? 3 : 1, 0, inputs[1].dims[1]);\n\n      const pads = attributes.pads.slice();\n      const outputShape = attributes.outputShape.slice();\n      const outputPadding = attributes.outputPadding.slice();\n      const inputShape = inputs[0].dims;\n      let dilations = attributes.dilations.slice();\n      if (dilations.reduce((a, b) => a + b, 0) === 0) {\n        const spatialRank = inputs[0].dims.length - 2;\n        dilations = new Array(spatialRank).fill(1);\n      }\n      let strides = attributes.strides.slice();\n      if (strides.reduce((a, b) => a + b, 0) === 0) {\n        const spatialRank = inputs[0].dims.length - 2;\n        strides = new Array(spatialRank).fill(1);\n      }\n      // If outputShape is not specified in the attributes of this op, infer it from the parameters\n      // Similarly, automatically infer pads if not specified\n      calculateOutputShapeAndPads(\n          inputShape, kernelShape, dilations, attributes.autoPad, attributes.group, pads, strides, isChannelsLast,\n          outputPadding, outputShape);\n\n      // always return a new object so does not modify the original attributes\n      const newAttributes: T = Object.assign({}, attributes);\n      Object.assign(\n          newAttributes,\n          {kernelShape, pads, outputPadding, outputShape, dilations, strides, cacheKey: attributes.cacheKey});\n      return newAttributes;\n    };\n\nexport const parseConvTransposeAttributes = (attributes: Record<string, unknown>): ConvTransposeAttributes => {\n  const activationAttributes = parseInternalActivationAttributes(attributes);\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n  const format = attributes.format as 'NHWC' | 'NCHW';\n  const autoPad =\n      ['NOTSET', 'VALID', 'SAME_UPPER',\n       'SAME_LOWER'][typeof attributes.autoPad == 'undefined' ? 0 : attributes.autoPad as number];\n  const dilations = attributes.dilations as [number, number];\n  const group = attributes.group as number;\n  const kernelShape = attributes.kernelShape as [number, number];\n  const pads = attributes.pads as [number, number, number, number];\n  const strides = attributes.strides as [number, number];\n  const wIsConst = (attributes.wIsConst as () => boolean)();\n  const outputPadding = attributes.outputPadding as [number, number, number, number];\n  const outputShape = attributes.outputShape as [number, number];\n  return createAttributeWithCacheKey({\n    autoPad,\n    format,\n    dilations,\n    group,\n    kernelShape,\n    outputPadding,\n    outputShape,\n    pads,\n    strides,\n    wIsConst,\n    ...activationAttributes\n  });\n};\n\nconst validateInputs = (inputs: readonly TensorView[], attributes: ConvTransposeAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#ConvTranspose\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 && inputs[0].dims.length !== 3) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  if (inputs[0].dims.length !== inputs[1].dims.length) {\n    throw new Error('filter does not have same dimension as input');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[attributes.format === 'NHWC' ? inputs[0].dims.length - 1 : 1];\n  const filterInChannel = inputs[1].dims[0];\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  const featureMaps = inputs[1].dims[1] * attributes.group;\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[2].dims[0] !== featureMaps)) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  const dilationsSet = attributes.dilations.reduce((a, b) => a + b, 0) > 0;\n  // wrong dilations dimension\n  if (dilationsSet && attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  const stridesSet = attributes.strides.reduce((a, b) => a + b, 0) > 0;\n  // Wrong strides dimension\n  if (stridesSet && attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  const padsSet = attributes.pads.reduce((a, b) => a + b, 0) > 0;\n  if (padsSet && attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // Wrong output padding dimension\n  if (attributes.outputPadding.length !== spatialRank && attributes.outputPadding.length !== 0) {\n    throw new Error(`output_padding should be ${spatialRank}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  const kernelShapeSet = attributes.kernelShape.reduce((a, b) => a + b, 0) > 0;\n  if (kernelShapeSet && attributes.kernelShape.length !== 0 &&\n      attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // as with kernelShape, must have same number of spatial dims as input\n  if (attributes.outputShape.length !== 0 && attributes.outputShape.length !== inputs[0].dims.length - 2) {\n    throw new Error('invalid output shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].dataType !== DataType.float || inputs[1].dataType !== DataType.float) {\n    throw new Error('ConvTranspose input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].dataType !== DataType.float) {\n    throw new Error('ConvTranspose input(bias) should be float tensor');\n  }\n};\n\nconst createConvTranspose2DProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'ConvTranspose2D',\n  inputTypes: hasBias ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\n                        [GpuDataType.default, GpuDataType.default],\n  cacheHint\n});\n\nconst createConvTranspose2DProgramInfoLoader =\n    (inputs: readonly TensorView[], attributes: ConvTransposeAttributes,\n     squeezeOutputShapeFunction?: (shape: readonly number[]) => number[]): ProgramInfoLoader => {\n      const hasBias = inputs.length === 3;\n      const metadata = createConvTranspose2DProgramMetadata(hasBias, attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createConvTranspose2DProgramInfo(inputs, metadata, attributes, squeezeOutputShapeFunction)\n      };\n    };\n\nconst convTranspose2d =\n    (context: ComputeContext, inputs: readonly TensorView[], attributes: ConvTransposeAttributes): void => {\n      const adjustedAttributes = getAdjustedConvTransposeAttributes(attributes, inputs);\n\n      context.compute(createConvTranspose2DProgramInfoLoader(inputs, adjustedAttributes));\n    };\nconst convTranspose1d = (context: ComputeContext, attributes: ConvTransposeAttributes): void => {\n  // extend the input to 2D by adding H dimension\n  const isChannelLast = attributes.format === 'NHWC';\n\n  const inputs = [\n    context.inputs[0].reshape(\n        isChannelLast ?\n            // [N, W, C] -> [N, H=1, W, C]\n            [context.inputs[0].dims[0], 1, context.inputs[0].dims[1], context.inputs[0].dims[2]] :\n            // [N, C, W] -> [N, C, H=1, W]\n            [context.inputs[0].dims[0], context.inputs[0].dims[1], 1, context.inputs[0].dims[2]]),\n    //[FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, kW] -> [FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, kH=1, kW]\n    context.inputs[1].reshape([context.inputs[1].dims[0], context.inputs[1].dims[1], 1, context.inputs[1].dims[2]])\n  ];\n  if (inputs.length === 3) {\n    inputs.push(context.inputs[2]);\n  }\n  let kernelShape = attributes.kernelShape;\n  if (kernelShape.length === 0 || kernelShape[0] === 0) {\n    kernelShape = [context.inputs[1].dims[2]];\n  }\n  let dilations = attributes.dilations;\n  if (dilations.length === 0 || dilations[0] === 0) {\n    dilations = [1];\n  }\n  let strides = attributes.strides;\n  if (strides.length === 0 || strides[0] === 0) {\n    strides = [1];\n  }\n  let pads = attributes.pads;\n  if (pads.length === 0) {\n    pads = [0, 0];\n  }\n  pads = [0, pads[0], 0, pads[1]];\n  strides = [1].concat(strides);\n  dilations = [1].concat(dilations);\n  kernelShape = [1].concat(kernelShape);\n  const adjustedAttributes =\n      getAdjustedConvTransposeAttributes({...attributes, pads, strides, dilations, kernelShape}, inputs);\n  context.compute(createConvTranspose2DProgramInfoLoader(\n      inputs, adjustedAttributes,\n      outputShape => isChannelLast ? [outputShape[0], outputShape[2], outputShape[3]] :\n                                     [outputShape[0], outputShape[1], outputShape[3]]));\n};\n\nexport const convTranspose = (context: ComputeContext, attributes: ConvTransposeAttributes): void => {\n  validateInputs(context.inputs, attributes);\n  if (context.inputs[0].dims.length === 3) {\n    convTranspose1d(context, attributes);\n  } else {\n    convTranspose2d(context, context.inputs, attributes);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor';\nimport {PoolConvUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext} from '../types';\n\nimport {createGroupedConvProgramInfoLoader} from './conv-grouped';\nimport {createConv2DMatMulProgramInfoLoader} from './conv2d-mm';\nimport {InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createTransposeProgramInfo, TransposeAttributes, transposeProgramMetadata} from './transpose';\n\nexport const calculateOutputShape =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[],\n     adjustPads: readonly number[], strides: readonly number[], isChannelLast: boolean): number[] => {\n      const batchSize = inputShape[0];\n      const inputSpatialShape = inputShape.slice(isChannelLast ? 1 : 2, isChannelLast ? 3 : 4);\n      const spatialRank = inputSpatialShape.length;\n      const outChannels = kernelShape[0];\n      const kernelSpatialShape = kernelShape.slice(2);\n      const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\n      const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\n      const outputShape =\n          inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\n      outputShape.splice(0, 0, batchSize);\n      outputShape.splice(isChannelLast ? 3 : 1, 0, outChannels);\n      return outputShape;\n    };\n\nexport interface ConvAttributes extends InternalActivationAttributes, AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly dilations: readonly number[];\n  readonly format: 'NHWC'|'NCHW';\n  readonly group: number;\n  readonly kernelShape: readonly number[];\n  readonly pads: readonly number[];\n  readonly strides: readonly number[];\n  readonly wIsConst: boolean;\n}\n\n// for transposing weight tensor from [M, C/group, KH, KW] to [KH, KW, C/group, M]\nconst weightTransposeAttribute: TransposeAttributes = createAttributeWithCacheKey({perm: [2, 3, 1, 0]});\n\nconst validateInputs = (inputs: readonly TensorView[], attributes: ConvAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/master/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 && inputs[0].dims.length !== 3) {\n    throw new Error('currently only support conv 1D and 2D');\n  }\n\n  if (inputs[0].dims.length !== inputs[1].dims.length) {\n    throw new Error('filter does not have same dimension as input');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[attributes.format === 'NHWC' ? inputs[0].dims.length - 1 : 1];\n  const filterInChannel = inputs[1].dims[1] * attributes.group;\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].dataType !== DataType.float || inputs[1].dataType !== DataType.float) {\n    throw new Error('Conv input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].dataType !== DataType.float) {\n    throw new Error('Conv input(bias) should be float tensor');\n  }\n};\n\nconst getAdjustedConvAttributes = <T extends ConvAttributes>(attributes: T, inputs: readonly TensorView[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  for (let i = 2; i < inputs[1].dims.length; ++i) {\n    if (kernelShape[i - 2] === 0) {\n      kernelShape[i - 2] = inputs[1].dims[i];\n    }\n  }\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPadsBasedOnAutoPad(\n      inputs[0].dims, attributes.strides, attributes.dilations, kernelShape, pads, attributes.format === 'NHWC',\n      attributes.autoPad);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvAttributes = (attributes: Record<string, unknown>): ConvAttributes => {\n  const activationAttributes = parseInternalActivationAttributes(attributes);\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n  const format = attributes.format as 'NHWC' | 'NCHW';\n  const autoPad = ['NOTSET', 'VALID', 'SAME_UPPER', 'SAME_LOWER'][attributes.auto_pad as number];\n  const dilations = attributes.dilations as [number, number];\n  const group = attributes.group as number;\n  const kernelShape = attributes.kernel_shape as [number, number];\n  const pads = attributes.pads as [number, number, number, number];\n  const strides = attributes.strides as [number, number];\n  const wIsConst = (attributes.w_is_const as () => boolean)();\n\n  return createAttributeWithCacheKey(\n      {autoPad, format, dilations, group, kernelShape, pads, strides, wIsConst, ...activationAttributes});\n};\n\nconst conv2d = (context: ComputeContext, inputs: readonly TensorView[], attributes: ConvAttributes): void => {\n  const adjustedAttributes = getAdjustedConvAttributes(attributes, inputs);\n\n  // check attributes\n\n  const hasBias = inputs.length === 3;\n  // const hasPreluActivationWeights = false; /* TODO: add support for prelu activation weights */\n  const isChannelsLast = attributes.format === 'NHWC';\n\n  // const batchSize = context.inputs[0].dims[0];\n  const inputHeight = inputs[0].dims[isChannelsLast ? 1 : 2];\n  const inputWidth = inputs[0].dims[isChannelsLast ? 2 : 3];\n  const inputChannels = inputs[0].dims[isChannelsLast ? 3 : 1];\n  const weightHeight = inputs[1].dims[2];\n  const weightWidth = inputs[1].dims[3];\n\n  const outputShape = calculateOutputShape(\n      inputs[0].dims, inputs[1].dims, attributes.dilations, adjustedAttributes.pads, attributes.strides,\n      isChannelsLast);\n  const outHeight = outputShape[isChannelsLast ? 1 : 2];\n  const outWidth = outputShape[isChannelsLast ? 2 : 3];\n  const outChannels = outputShape[isChannelsLast ? 3 : 1];\n\n  const sameSize =\n      isChannelsLast && weightHeight === inputHeight && weightWidth === inputWidth && attributes.autoPad === 'VALID';\n  if (sameSize ||\n      (weightHeight === 1 && weightWidth === 1 && attributes.dilations[0] === 1 && attributes.dilations[1] === 1 &&\n       attributes.strides[0] === 1 && attributes.strides[1] === 1 &&\n       (attributes.autoPad === 'SAME_UPPER' || attributes.autoPad === 'SAME_LOWER' ||\n        attributes.autoPad === 'VALID'))) {\n    // TODO: implement conv2dByMatMul()\n    context.compute(createGroupedConvProgramInfoLoader(inputs, adjustedAttributes));\n    return;\n  }\n\n  if (!isChannelsLast || attributes.group !== 1) {\n    context.compute(createGroupedConvProgramInfoLoader(inputs, adjustedAttributes));\n    return;\n  }\n\n  // TODO: implement conv2dWithIm2Col()\n\n  const dimAOuter = isChannelsLast ? outHeight * outWidth : outChannels;\n  const dimBOuter = isChannelsLast ? outChannels : outHeight * outWidth;\n  const dimInner = weightHeight * weightWidth * inputChannels;\n\n  const sequentialAccessByThreads = /* backend.adapterInfo.isIntel() */ true;\n\n  // STEP.1: transpose weight\n  const transposedWeight = (context.kernelCustomData.wT as TensorView | undefined) ??\n      context.compute(\n          {\n            ...transposeProgramMetadata,\n            cacheHint: weightTransposeAttribute.cacheKey,\n            get: () => createTransposeProgramInfo(inputs[1], weightTransposeAttribute.perm)\n          },\n          {inputs: [1], outputs: [attributes.wIsConst ? -2 : -1]})[0];\n  if (attributes.wIsConst && !context.kernelCustomData.wT) {\n    context.kernelCustomData.wT = transposedWeight;\n  }\n\n  // STEP.2: prepare reshaped inputs\n  const convInputs = [inputs[0], transposedWeight];\n  if (hasBias) {\n    if (!isChannelsLast && inputs[2].dims.length === 1) {\n      convInputs.push(inputs[2].reshape([inputs[2].dims[0], 1, 1]));\n    } else {\n      convInputs.push(inputs[2]);\n    }\n  }\n\n  // STEP.3: compute matmul\n  context.compute(\n      createConv2DMatMulProgramInfoLoader(\n          convInputs, adjustedAttributes, outputShape, dimAOuter, dimBOuter, dimInner, hasBias,\n          sequentialAccessByThreads),\n      {inputs: convInputs});\n};\n\nconst conv1d = (context: ComputeContext, attributes: ConvAttributes): void => {\n  // extend the input to 2D by adding H dimension\n  const isChannelLast = attributes.format === 'NHWC';\n  const inputs = [\n    context.inputs[0].reshape(\n        isChannelLast ?\n            // [N, W, C] -> [N, H=1, W, C]\n            [context.inputs[0].dims[0], 1, context.inputs[0].dims[1], context.inputs[0].dims[2]] :\n            // [N, C, W] -> [N, C, H=1, W]\n            [context.inputs[0].dims[0], context.inputs[0].dims[1], 1, context.inputs[0].dims[2]]),\n    //[FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, kW] -> [FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, kH=1, kW]\n    context.inputs[1].reshape([context.inputs[1].dims[0], context.inputs[1].dims[1], 1, context.inputs[1].dims[2]])\n  ];\n  if (context.inputs.length === 3) {\n    inputs.push(context.inputs[2]);\n  }\n  const pads = [0, attributes.pads[0], 0, attributes.pads[1]];\n  const strides = [1].concat(attributes.strides);\n  const dilations = [1].concat(attributes.dilations);\n  const kernelShape = [1].concat(attributes.kernelShape);\n  const adjustedAttributes = getAdjustedConvAttributes({...attributes, pads, strides, dilations, kernelShape}, inputs);\n  context.compute(createGroupedConvProgramInfoLoader(\n      inputs, adjustedAttributes,\n      outputShape => isChannelLast ? [outputShape[0], outputShape[2], outputShape[3]] : []));\n};\n\nexport const conv = (context: ComputeContext, attributes: ConvAttributes): void => {\n  validateInputs(context.inputs, attributes);  // currently will fail if not conv1D/2D\n  if (context.inputs[0].dims.length === 3) {\n    conv1d(context, attributes);\n  } else {\n    conv2d(context, context.inputs, attributes);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor';\nimport {GpuDataType, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {createConv2DMatMulProgramInfo} from './3rd-party/conv2d_mm_webgpu';\nimport {ConvAttributes} from './conv';\n\n\nconst createConv2DMatMulProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'Conv2DMatMul',\n  inputTypes: hasBias ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\n                        [GpuDataType.default, GpuDataType.default],\n  cacheHint\n});\n\nexport const createConv2DMatMulProgramInfoLoader =\n    (inputs: readonly TensorView[], attributes: ConvAttributes, outputShape: readonly number[], dimAOuter: number,\n     dimBOuter: number, dimInner: number, hasBias: boolean, sequentialAccessByThreads: boolean): ProgramInfoLoader => {\n      const metadata = createConv2DMatMulProgramMetadata(hasBias, attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createConv2DMatMulProgramInfo(\n            inputs, metadata, attributes, outputShape, dimAOuter, dimBOuter, dimInner, hasBias,\n            sequentialAccessByThreads)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor';\nimport {ShapeUtil} from '../../util';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramMetadata} from '../types';\n\nimport {createIndicesHelper, ShaderHelper} from './common';\n\nexport const expandProgramMetadata = {\n  name: 'Expand',\n  inputTypes: [GpuDataType.default]\n};\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Expand requires 2 input.');\n  }\n  const inputShape = inputs[0].dims;\n\n  const shape: number[] = [];\n  if (inputs[1].dims[0] > 0) {\n    inputs[1].getBigInt64Array().forEach(v => shape.push(Number(v)));\n  }\n  let shapeIndex = shape.length < inputShape.length ? 0 : shape.length - inputShape.length;\n  let inputShapeIndex = inputShape.length < shape.length ? 0 : inputShape.length - shape.length;\n  for (; shapeIndex < shape.length && inputShapeIndex < inputShape.length; ++shapeIndex, ++inputShapeIndex) {\n    if (shape[shapeIndex] !== inputShape[inputShapeIndex] && shape[shapeIndex] !== 1 &&\n        inputShape[inputShapeIndex] !== 1) {\n      throw new Error('Expand requires shape to be broadcastable to input');\n    }\n  }\n};\n\nconst getAdjustedShape = (shape1: readonly number[], shape2: readonly number[]): number[] => {\n  const diff = shape1.length - shape2.length;\n  const shape: number[] = [];\n  for (let i = 0; i < diff; ++i) {\n    shape.push(shape1[i]);\n  }\n  for (let i = 0; i < shape2.length; ++i) {\n    shape.push(shape2[i] === 1 ? shape1[i + diff] : shape2[i]);\n  }\n  return shape;\n};\n\nconst calculateOutputShape = (inputShape: readonly number[], shape: readonly number[]): number[] =>\n    (inputShape.length > shape.length) ? getAdjustedShape(inputShape, shape) : getAdjustedShape(shape, inputShape);\n\n\nconst createExpandProgramInfo = (metadata: ProgramMetadata, inputs: readonly TensorView[]): ProgramInfo => {\n  const inputShape = inputs[0].dims;\n\n  const shape: number[] = [];\n  if (inputs[1].dims[0] > 0) {\n    inputs[1].getBigInt64Array().forEach(v => shape.push(Number(v)));\n  }\n  const outputShape: number[] = calculateOutputShape(inputShape, shape);\n  const outputSize = ShapeUtil.size(outputShape);\n  const inputIndicesHelper = createIndicesHelper('input', inputShape);\n  const outputIndicesHelper = createIndicesHelper('output', outputShape);\n  const dataType = 'f32';\n\n  const calculateInputIndexImpl = (): string => `\n  fn calculateInputIndex(outputIndices: array<u32, ${outputShape.length}>) -> array<u32,${inputShape.length}> {\n    ${inputIndicesHelper.indicesVariableDeclaration('inputIndices')}\n    for (var i = 0; i < ${inputShape.length}; i++) {\n        if (inputShape[i] == 1) {\n            inputIndices[i] = 0;\n        } else {\n            inputIndices[i] = outputIndices[i + ${outputShape.length - inputShape.length}];\n        }\n    }\n    return inputIndices;\n}`;\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => `\n  const inputShape = array<u32, ${inputShape.length}>(${inputShape.map(i => `${i}u`).join(',')});\n  ${calculateInputIndexImpl()};\n  @group(0) @binding(0) var<storage, read> input : array<${dataType}>;\n  @group(0) @binding(1) var<storage, read_write> output : array<${dataType}>;\n  ${outputIndicesHelper.o2iImpl}\n  ${inputIndicesHelper.i2oImpl}\n  ${shaderHelper.mainStart()}\n  ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n  ${inputIndicesHelper.indicesVariableDeclaration('inputIndices')}\n  ${outputIndicesHelper.indicesVariableDeclaration('outputIndices')}\n  ${outputIndicesHelper.o2iCall('global_idx', 'outputIndices')}\n  inputIndices = calculateInputIndex(outputIndices);\n  output[global_idx] = input[${inputIndicesHelper.i2oExpression('inputIndices')}];\n}`;\n  return {\n    ...metadata,\n    getShaderSource,\n    outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n    dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n  };\n};\n\nexport const expand = (context: ComputeContext): void => {\n  validateInputs(context.inputs);\n  context.compute(\n      {...expandProgramMetadata, get: () => createExpandProgramInfo(expandProgramMetadata, context.inputs)},\n      {inputs: [0]});\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {MAX_CLIP, MIN_CLIP} from '../../util';\n\nexport interface InternalActivationAttributes {\n  readonly activation: string;\n  readonly clipMin?: number;\n  readonly clipMax?: number;\n  readonly activationCacheKey: string;\n}\n\nexport const getActicationSnippet =\n    (attributes: InternalActivationAttributes): {activationFunction: string; applyActivation: string} => {\n      switch (attributes.activation) {\n        case 'Relu':\n          return {activationFunction: '', applyActivation: 'value = max(value, 0.0);'};\n        case 'Sigmoid':\n          return {activationFunction: '', applyActivation: 'value = (1.0 / (1.0 + exp(-value)));'};\n        case 'Clip':\n          return {\n            activationFunction:\n                `const clip_min_=f32(${attributes.clipMin!});const clip_max_=f32(${attributes.clipMax!});`,\n            applyActivation: 'value = clamp(value, clip_min_, clip_max_);'\n          };\n          // TODO: adding other activations that can be fused.\n        default:\n          return {activationFunction: '', applyActivation: ''};\n      }\n    };\n\nexport const parseInternalActivationAttributes =\n    (attributes: Record<string, unknown>|undefined): InternalActivationAttributes => {\n      const activation = attributes?.activation as string || '';\n\n      if (activation === 'Clip') {\n        const [clipMin, clipMax] = attributes?.activation_params as [number, number] || [MIN_CLIP, MAX_CLIP];\n        return {activation, clipMax, clipMin, activationCacheKey: `${activation}:${clipMin},${clipMax}`};\n      }\n      return {activation, activationCacheKey: activation};\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor';\nimport {GemmUtil, ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {ShaderHelper} from './common';\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs) {\n    throw new Error('Input is missing');\n  }\n  if (inputs.length < 2 || inputs.length > 3) {\n    throw new Error('Invaid input number.');\n  }\n\n  // 'C' can be of dimensionality 0, 1 or 2 only\n  if (inputs.length === 3 && inputs[2].dims.length > 2) {\n    throw new Error('Invalid input shape of C');\n  }\n\n  if ((inputs[0].dataType !== DataType.float) || (inputs[1].dataType !== DataType.float) ||\n      (inputs.length === 3 && inputs[2].dataType !== DataType.float)) {\n    throw new Error('Invalid input type.');\n  }\n\n  if ((inputs[0].dataType !== inputs[1].dataType) ||\n      (inputs.length === 3 && inputs[0].dataType !== inputs[2].dataType)) {\n    throw new Error('Input types are mismatched');\n  }\n};\n\nexport interface GemmAttributes extends AttributeWithCacheKey {\n  transA: boolean;\n  transB: boolean;\n  alpha: number;\n  beta: number;\n}\n\nconst offsetC = (m: number, n: number, dims: readonly number[]): string => {\n  if (dims.length === 0) {\n    return '0u';\n  }\n\n  const broadcastM = (dims.length === 1 && m !== 1) || (dims.length === 2 && dims[0] !== m);\n  const broadcastN = dims[dims.length - 1] !== n;\n\n  let offset = '0u';\n  if (!broadcastM) {\n    offset += `+ m * ${dims[dims.length - 1]}u`;\n  }\n  if (!broadcastN) {\n    offset += '+n';\n  }\n\n  return offset;\n};\n\nconst createGemmProgramInfo =\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], attributes: GemmAttributes): ProgramInfo => {\n      const aShape = inputs[0].dims.slice();\n      const bShape = inputs[1].dims.slice();\n      const [M, N, K] = GemmUtil.getShapeOfGemmResult(\n          aShape, attributes.transA, bShape, attributes.transB, inputs.length === 3 ? inputs[2].dims : undefined);\n      const outputShape = [M, N];\n      if (!outputShape) {\n        throw new Error('Can\\'t use gemm on the given tensors');\n      }\n      const outputSize = ShapeUtil.size(outputShape);\n      let line = '';\n      if (attributes.transA && attributes.transB) {\n        line = 'value += a[k * M + m] * b[n * K + k];';\n      } else if (attributes.transA && !attributes.transB) {\n        line = 'value += a[k * M + m] * b[k * N + n];';\n      } else if (!attributes.transA && attributes.transB) {\n        line = 'value += a[m * K + k] * b[n * K + k];';\n      } else if (!attributes.transA && !attributes.transB) {\n        line = 'value += a[m * K + k] * b[k * N + n];';\n      }\n\n      const dataType = 'f32';  // TODO: support other data type\n      const calculateAlpha = attributes.alpha === 1 ? '' : 'value *= alpha;';\n      const calculateC = inputs.length === 3 ? `value += beta * c[${offsetC(M, N, inputs[2].dims)}];` : '';\n      const inputStorageBuffersDeclarations = [\n        `@group(0) @binding(0) var<storage, read> a : array<${dataType}>;`,\n        `@group(0) @binding(1) var<storage, read> b : array<${dataType}>;`\n      ];\n      if (inputs.length === 3) {\n        inputStorageBuffersDeclarations.push(`@group(0) @binding(2) var<storage, read> c : array<${dataType}>;`);\n      }\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n  const M: u32 = ${M}u;\n  const N: u32 = ${N}u;\n  const K: u32 = ${K}u;\n  const alpha = ${dataType}(${attributes.alpha});\n  const beta = ${dataType}(${attributes.beta});\n\n  ${inputStorageBuffersDeclarations.join('\\n')}\n  @group(0) @binding(${inputs.length}) var<storage, read_write> output : array<${dataType}>;\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n    let m = global_id.x / N;\n    let n = global_id.x % N;\n\n    var value = ${dataType}(0);\n    for (var k: u32 = 0u; k<${K}u; k++) {\n      ${line}\n    }\n\n    ${calculateAlpha}\n    ${calculateC}\n    output[global_id.x] = value;\n\n  }`;\n      return {\n        ...metadata,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        getShaderSource,\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n      };\n    };\n\nconst createGemmProgramInfoLoader = (inputs: readonly TensorView[], attributes: GemmAttributes): ProgramInfoLoader => {\n  const metadata = {\n    name: 'Gemm',\n    inputTypes: inputs.length === 3 ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\n                                      [GpuDataType.default, GpuDataType.default],\n    cacheHint: attributes.cacheKey\n  };\n\n  return {...metadata, get: () => createGemmProgramInfo(metadata, inputs, attributes)};\n};\n\nexport const gemm = (context: ComputeContext, attributes: GemmAttributes): void => {\n  validateInputs(context.inputs);\n  context.compute(createGemmProgramInfoLoader(context.inputs, attributes));\n};\n\nexport const parseGemmAttributes = (attributes: Record<string, unknown>): GemmAttributes =>\n    createAttributeWithCacheKey(attributes as Omit<GemmAttributes, keyof AttributeWithCacheKey>);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../util';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {ShaderHelper} from './common';\nimport {getActicationSnippet, InternalActivationAttributes} from './fuse-utils';\n\n\nconst createMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul',\n  inputTypes: hasBias ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\n                        [GpuDataType.default, GpuDataType.default],\n  cacheHint\n});\n\nconst createMatmulProgramInfo =\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], activationAttributes: InternalActivationAttributes):\n        ProgramInfo => {\n          const aShape = inputs[0].dims;\n          const bShape = inputs[1].dims;\n          const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n          if (!outputShape) {\n            throw new Error('Can\\'t use matmul on the given tensors');\n          }\n          const outputSize = ShapeUtil.size(outputShape);\n          // TODO: support broadcasting\n\n          const dataType = 'f32';  // TODO: support other data type\n          const {activationFunction, applyActivation} = getActicationSnippet(activationAttributes);\n\n          const M = outputShape[outputShape.length - 2];\n          const K = aShape[aShape.length - 1];\n          const N = outputShape[outputShape.length - 1];\n          const getShaderSource = (shaderHelper: ShaderHelper) => `\n  const M: u32 = ${M}u;\n  const N: u32 = ${N}u;\n  const K: u32 = ${K}u;\n\n  @group(0) @binding(0) var<storage, read> a : array<${dataType}>;\n  @group(0) @binding(1) var<storage, read> b : array<${dataType}>;\n  @group(0) @binding(2) var<storage, read_write> output : array<${dataType}>;\n\n  ${activationFunction}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n    let stack = global_idx / (M * N);\n    let mn = global_idx % (M * N);\n    let n = global_idx % N;\n    let m = mn / N;\n\n    let offsetA = stack * (M * K);\n    let offsetB = stack * (K * N);\n\n    var value = ${dataType}(0);\n    for (var k: u32 = 0u; k<${K}u; k++) {\n      value += a[offsetA + m * K + k] * b[offsetB + k * N + n];\n    }\n    ${applyActivation}\n    output[global_idx] = value;\n  }`;\n          return {\n            ...metadata,\n            outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n            getShaderSource,\n            dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n          };\n        };\n\nexport const createMatmulProgramInfoLoader =\n    (inputs: readonly TensorView[], activationAttributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n      return {...metadata, get: () => createMatmulProgramInfo(metadata, inputs, activationAttributes)};\n    };\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('MatMul requires 2 inputs.');\n  }\n\n  if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\n    throw new Error('shared dimension does not match.');\n  }\n\n  if (inputs[0].dataType !== DataType.float || inputs[1].dataType !== DataType.float) {\n    throw new Error('inputs should be float type');\n  }\n};\n\nexport const matMul = (context: ComputeContext): void => {\n  validateInputs(context.inputs);\n\n  context.compute(createMatmulProgramInfoLoader(context.inputs, {activation: '', activationCacheKey: ''}));\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor';\nimport {PoolConvUtil, ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramMetadata} from '../types';\n\nimport {createIndicesHelper, ShaderHelper} from './common';\n\n// TODO: support:\n// - ceil_mode                 \"test_maxpool_2d_ceil\"\n// - storage_order             \"test_maxpool_with_argmax_2d_precomputed_strides\"\n// - [MaxPool] dilations       \"test_maxpool_2d_dilations\"\n// - [MaxPool] output[1]       \"test_maxpool_with_argmax_2d_precomputed_pads\"\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pool ops requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Pool ops supports 2-D inputs only for now.');\n  }\n  if (inputs[0].dataType !== DataType.float) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst getAdjustedPoolAttributesAndOutputShape = <AttributeType extends AveragePoolAttributes|MaxPoolAttributes>(\n    inputs: readonly TensorView[], attributes: AttributeType, isGlobalOperator: boolean): [AttributeType, number[]] => {\n  const isChannelsLast = attributes.format === 'NHWC';\n  const inputShapeAsChannelFirst = isChannelsLast ?\n      [inputs[0].dims[0], inputs[0].dims[3], inputs[0].dims[1], inputs[0].dims[2]] :\n      inputs[0].dims.slice();\n  const hasDilations = Object.hasOwnProperty.call(attributes, 'dilations');\n  const kernelShape = attributes.kernelShape.slice();\n  const strides = attributes.strides.slice();\n  const dilations: number[] = hasDilations ? (attributes as MaxPoolAttributes).dilations.slice() : [];\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShapeAsChannelFirst, kernelShape, strides, dilations, pads);\n\n  const outputShapeAsChannelFirst = PoolConvUtil.computePoolOutputShape(\n      isGlobalOperator, inputShapeAsChannelFirst, strides, dilations, kernelShape, pads, attributes.autoPad);\n\n  const newAttributes = Object.assign({}, attributes);\n  if (hasDilations) {\n    Object.assign(newAttributes, {kernelShape, strides, pads, dilations, cacheKey: attributes.cacheKey});\n  } else {\n    Object.assign(newAttributes, {kernelShape, strides, pads, cacheKey: attributes.cacheKey});\n  }\n  return [\n    newAttributes,\n    isChannelsLast ?\n        [\n          outputShapeAsChannelFirst[0], outputShapeAsChannelFirst[2], outputShapeAsChannelFirst[3],\n          outputShapeAsChannelFirst[1]\n        ] :\n        outputShapeAsChannelFirst\n  ];\n};\n\nconst generatePoolingCode = <AttributeType extends AveragePoolAttributes|MaxPoolAttributes>(\n    shaderHelper: ShaderHelper, inputDims: readonly number[], outputShape: readonly number[], attributes: AttributeType,\n    op1: string, op2: string, dataType: string, start: string): string => {\n  const isChannelsLast = attributes.format === 'NHWC';\n  const rank = inputDims.length;\n  const outputSize = ShapeUtil.size(outputShape);\n  const outputIndicesHelper = createIndicesHelper('output', outputShape);\n  const xIndicesHelper = createIndicesHelper('x', inputDims);\n\n  if (attributes.kernelShape.length <= 2) {\n    const kw = attributes.kernelShape[attributes.kernelShape.length - 1];\n    const sw = attributes.strides[attributes.strides.length - 1];\n    const pwStart = attributes.pads[attributes.pads.length / 2 - 1];\n    const pwEnd = attributes.pads[attributes.pads.length - 1];\n    const dimIdxW = rank - (isChannelsLast ? 2 : 1);\n    let codeW = '';\n    let codeH = '';\n    let codeHEnd = '';\n    if (pwStart + pwEnd !== 0) {\n      codeW = `\n              for (var i: u32 = 0u; i < ${kw}u; i++) {\n                xIndices[${dimIdxW}] = indices[${dimIdxW}] * ${sw} - ${pwStart} + i;\n                if (xIndices[${dimIdxW}] < 0 || xIndices[${dimIdxW}] >= ${inputDims[dimIdxW]}) {\n                  pad++;\n                  continue;\n                }\n                let x_val = x[${xIndicesHelper.i2oExpression('xIndices')}];\n                ${op1}\n              }`;\n    } else {\n      codeW = `\n              for (var i: u32 = 0u; i < ${kw}u; i++) {\n                xIndices[${dimIdxW}] = indices[${dimIdxW}] * ${sw} - ${pwStart} + i;\n                let x_val = x[${xIndicesHelper.i2oExpression('xIndices')}];\n                ${op1}\n              }`;\n    }\n\n    if (attributes.kernelShape.length === 2) {\n      const kh = attributes.kernelShape[attributes.kernelShape.length - 2];\n      const sh = attributes.strides[attributes.strides.length - 2];\n      const phStart = attributes.pads[attributes.pads.length / 2 - 2];\n      const phEnd = attributes.pads[attributes.pads.length - 2];\n      const dimIdxH = rank - (isChannelsLast ? 3 : 2);\n      const dimH = inputDims[dimIdxH];\n      if (phStart + phEnd !== 0) {\n        codeH = `\n                for (var j: u32 = 0u; j < ${kh}u; j++) {\n                  xIndices[${dimIdxH}] = indices[${dimIdxH}] * ${sh} - ${phStart} + j;\n                  if (xIndices[${dimIdxH}] < 0 || xIndices[${dimIdxH}] >= ${dimH}) {\n                    pad+= ${kw};\n                    continue;\n                  }\n              `;\n      } else {\n        codeH = `\n                for (var j: u32 = 0u; j < ${kh}u; j++) {\n                  xIndices[${dimIdxH}] = indices[${dimIdxH}] * ${sh} - ${phStart} + j;\n                `;\n      }\n      codeHEnd = `\n              }\n            `;\n    }\n\n    const poolingCode = `\n            @group(0) @binding(0) var<storage, read> x : array<${dataType}>;\n            @group(0) @binding(1) var<storage, read_write> output : array<${dataType}>;\n\n            ${outputIndicesHelper.o2iImpl}\n            ${xIndicesHelper.i2oImpl}\n\n            ${shaderHelper.mainStart()}\n              ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n              ${outputIndicesHelper.indicesVariableDeclaration('indices')}\n              ${outputIndicesHelper.o2iCall('global_idx', 'indices')}\n              ${outputIndicesHelper.indicesVariableDeclaration('xIndices')}\n              ${outputIndicesHelper.o2iCall('global_idx', 'xIndices')}\n\n              var value: ${dataType} = ${dataType}(${start});\n              var pad = 0;\n              ${codeH}\n              ${codeW}\n              ${codeHEnd}\n              ${op2}\n\n              output[global_idx] = value;\n            }`;\n    return poolingCode;\n  } else {\n    if (isChannelsLast) {\n      throw new Error('Pooling with kernelShape.length > 2 is not supported for NHWC format.');\n    }\n    const kernelSize = ShapeUtil.size(attributes.kernelShape);\n    const kernelStrides = ShapeUtil.computeStrides(attributes.kernelShape);\n    const stridesRank = kernelStrides.length;\n    const padsRank = attributes.pads.length;\n    const hasPads = attributes.pads.reduce((sum, cur) => sum + cur);\n    let padCode = '';\n    if (hasPads) {\n      padCode = `\n                if (xIndices[j] >= inputDims[j]) {\n                  pad++;\n                  isPad = true;\n                  break;\n                }\n              }\n              if (!isPad) {\n                let x_val = x[${xIndicesHelper.i2oExpression('xIndices')}];\n                ${op1}\n              }`;\n    } else {\n      padCode = `\n              }\n              let x_val = x[${xIndicesHelper.i2oExpression('xIndices')}];\n              ${op1}\n            `;\n    }\n    const poolingCode = `\n            @group(0) @binding(0) var<storage, read> x : array<${dataType}>;\n            @group(0) @binding(1) var<storage, read_write> output : array<${dataType}>;\n\n            ${outputIndicesHelper.o2iImpl}\n            ${xIndicesHelper.i2oImpl}\n\n            const pads = array<u32, ${padsRank}>(${attributes.pads.map(i => `${i}u`).join(',')});\n            const inputDims = array<u32, ${rank}>(${inputDims.map(i => `${i}u`).join(',')});\n            const kernelStrides = array<u32, ${stridesRank}>(${kernelStrides.map(i => `${i}u`).join(',')});\n            const strides = array<u32, ${stridesRank}>(${attributes.strides.map(i => `${i}u`).join(',')});\n\n            ${shaderHelper.mainStart()}\n              ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n              ${outputIndicesHelper.indicesVariableDeclaration('indices')}\n              ${outputIndicesHelper.o2iCall('global_idx', 'indices')}\n              ${outputIndicesHelper.indicesVariableDeclaration('xIndices')}\n              ${outputIndicesHelper.o2iCall('global_idx', 'xIndices')}\n\n              var offsets: array<u32, ${stridesRank}>;\n\n              var value = ${dataType}(${start});\n              var pad = 0;\n              var isPad = false;\n\n              for (var i: u32 = 0u; i < ${kernelSize}u; i++) {\n                var offset = i;\n                for (var j = 0u; j < ${stridesRank - 1}u; j++) {\n                  offsets[j] = offset / kernelStrides[j];\n                  offset -= offsets[j] * kernelStrides[j];\n                }\n                offsets[${stridesRank - 1}] = offset;\n\n                isPad = false;\n                for (var j = ${rank - stridesRank}u; j < ${rank}u; j++) {\n                  xIndices[j] = indices[j] * strides[j - ${rank - stridesRank}u]\n                    + offsets[j - ${rank - stridesRank}u] - pads[j - 2u];\n                  ${padCode}\n              }\n              ${op2}\n\n              output[global_idx] = value;\n            }`;\n    return poolingCode;\n  }\n};\n\nexport interface FormatAttributes {\n  readonly format: 'NHWC'|'NCHW';\n}\n\nexport interface PoolCommonAttributes extends FormatAttributes {\n  readonly autoPad: string;\n  readonly ceilMode: number;\n  readonly kernelShape: readonly number[];\n  readonly strides: readonly number[];\n  readonly pads: readonly number[];\n}\n\nconst parsePoolCommonAttributes = (attributes: Record<string, unknown>): PoolCommonAttributes => ({\n  format: attributes.format as FormatAttributes['format'],\n  autoPad: ['NOTSET', 'VALID', 'SAME_UPPER', 'SAME_LOWER'][attributes.auto_pad as number],\n  ceilMode: attributes.ceil_mode as number,\n  kernelShape: attributes.kernel_shape as [number, number],\n  strides: attributes.strides as [number, number],\n  pads: attributes.pads as [number, number, number, number]\n});\n\nexport interface AveragePoolAttributes extends PoolCommonAttributes, AttributeWithCacheKey {\n  readonly countIncludePad: boolean;\n}\n\nconst createAveragePoolProgramInfo =\n    (inputs: readonly TensorView[], metadata: ProgramMetadata, isGlobalOperator: boolean,\n     attributes: AveragePoolAttributes): ProgramInfo => {\n      const [adjustedAttributes, outputShape] =\n          getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n      const kernelSize = ShapeUtil.size(adjustedAttributes.kernelShape);\n\n      const dataType = 'f32';\n\n      const op1 = 'value += x_val;';\n      let op2 = '';\n      if (adjustedAttributes.countIncludePad) {\n        op2 += `value /= ${dataType}(${kernelSize});`;\n      } else {\n        op2 += `value /= ${dataType}(${kernelSize} - pad);`;\n      }\n      return {\n        ...metadata,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        getShaderSource: shaderHelper => generatePoolingCode(\n            shaderHelper, inputs[0].dims, outputShape, adjustedAttributes, op1, op2, dataType, '0.0'),\n        dispatchGroup: () => ({x: Math.ceil(ShapeUtil.size(outputShape) / 64 /* workgroup size */)})\n      };\n    };\n\nexport const parseAveragePoolAttributes = (attributes: Record<string, unknown>): AveragePoolAttributes => {\n  const countIncludePad = (attributes.count_include_pad as number) === 0 ? false : true;\n\n  const attr = parsePoolCommonAttributes(attributes);\n  // TODO: support attribute 'ceil_mode'\n  if (attr.ceilMode !== 0) {\n    throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\n  }\n\n  return createAttributeWithCacheKey({countIncludePad, ...attr});\n};\n\nexport const averagePool = (context: ComputeContext, attributes: AveragePoolAttributes): void => {\n  validateInputs(context.inputs);\n  const metadata = {name: 'AveragePool', inputTypes: [GpuDataType.default], cacheHint: attributes.cacheKey};\n  context.compute({...metadata, get: () => createAveragePoolProgramInfo(context.inputs, metadata, false, attributes)});\n};\n\nconst globalPoolAttributes = {\n  autoPad: '',\n  ceilMode: 0,\n  countIncludePad: false,\n  kernelShape: [],\n  strides: [],\n  pads: [],\n  storageOrder: 0,\n  dilations: [],\n  cacheKey: ''\n};\n\nexport const parseGlobalAveragePoolAttributes = (attributes: Record<string, unknown>): AveragePoolAttributes => {\n  const format = attributes.format as FormatAttributes['format'];\n  return {format, ...globalPoolAttributes, cacheKey: format};\n};\n\nexport const globalAveragePool = (context: ComputeContext, attributes: AveragePoolAttributes): void => {\n  validateInputs(context.inputs);\n  const metadata = {name: 'GlobalAveragePool', inputTypes: [GpuDataType.default], cacheHint: attributes.cacheKey};\n  context.compute({...metadata, get: () => createAveragePoolProgramInfo(context.inputs, metadata, true, attributes)});\n};\n\nexport interface MaxPoolAttributes extends PoolCommonAttributes, AttributeWithCacheKey {\n  readonly storageOrder: number;\n  readonly dilations: number[];\n}\n\nconst createMaxPoolProgramInfo =\n    (inputs: readonly TensorView[], metadata: ProgramMetadata, isGlobalOperator: boolean,\n     attributes: MaxPoolAttributes): ProgramInfo => {\n      const [adjustedAttributes, outputShape] =\n          getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n      const op1 = `\n      value = max(x_val, value);\n    `;\n      const op2 = '';\n      return {\n        ...metadata,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        getShaderSource: shaderHelper =>\n            generatePoolingCode(shaderHelper, inputs[0].dims, outputShape, adjustedAttributes, op1, op2, 'f32', '-1e5'),\n        dispatchGroup: () => ({x: Math.ceil(ShapeUtil.size(outputShape) / 64 /* workgroup size */)})\n      };\n    };\n\nexport const maxPool = (context: ComputeContext, attributes: MaxPoolAttributes): void => {\n  validateInputs(context.inputs);\n  const metadata = {name: 'MaxPool', inputTypes: [GpuDataType.default], cacheHint: attributes.cacheKey};\n  context.compute({...metadata, get: () => createMaxPoolProgramInfo(context.inputs, metadata, false, attributes)});\n};\n\nexport const parseMaxPoolAttributes = (attributes: Record<string, unknown>): MaxPoolAttributes => {\n  const storageOrder = attributes.storage_order as number;\n  const dilations = attributes.dilations as [number, number];\n\n  const attr = parsePoolCommonAttributes(attributes);\n  // TODO: support attribute 'ceil_mode' and 'storage_order'\n  if (storageOrder !== 0) {\n    throw new Error('column major storage order is not yet supported for MaxPool');\n  }\n  if (attr.ceilMode !== 0) {\n    throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\n  }\n\n  return createAttributeWithCacheKey({storageOrder, dilations, ...attr});\n};\n\nexport const parseGlobalMaxPoolAttributes = (attributes: Record<string, unknown>): MaxPoolAttributes => {\n  const format = attributes.format as FormatAttributes['format'];\n  return {format, ...globalPoolAttributes, cacheKey: format};\n};\n\nexport const globalMaxPool = (context: ComputeContext, attributes: MaxPoolAttributes): void => {\n  validateInputs(context.inputs);\n  const metadata = {name: 'GlobalMaxPool', inputTypes: [GpuDataType.default], cacheHint: attributes.cacheKey};\n  context.compute({...metadata, get: () => createMaxPoolProgramInfo(context.inputs, metadata, true, attributes)});\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor';\nimport {ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {createIndicesHelper, ShaderHelper} from './common';\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length === 0 || inputs.length > 2) {\n    throw new Error('Reduce op requires 1 or 2 inputs.');\n  }\n\n  if (inputs.length === 2 && inputs[1].dims.length !== 1) {\n    throw new Error('Invalid axes input dims.');\n  }\n\n  if (inputs[0].dataType !== DataType.float) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport interface ReduceAttributes extends AttributeWithCacheKey {\n  keepDims: boolean;\n  noopWithEmptyAxes: boolean;\n  axes: number[];\n}\n\ntype ReduceOp = (inputs: readonly TensorView[], axes: number[]) => string[];\nconst noOp: ReduceOp = (): string[] => ['', '', 'value = _A[inputIdx];', ''];\nconst createReduceProgramInfo =\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], attributes: ReduceAttributes,\n     reduceOp: ReduceOp): ProgramInfo => {\n      const outputShape: number[] = [];\n      const inputShape = inputs[0].dims;\n\n      const idxCopy: string[] = [];  // copy output indexes to input indexes\n\n      const axes = ShapeUtil.normalizeAxes(attributes.axes, inputs[0].dims.length);\n      const outputDimsLength = inputs[0].dims.length - (attributes.keepDims ? 0 : axes.length);\n      const ops = reduceOp(inputs, axes);\n      const inputIndicesHelper = createIndicesHelper('input', inputShape);\n      const initInputIdx = (ops[1] === '') ? '' : `let inputIdx = ${inputIndicesHelper.i2oExpression('inputIndices')};`;\n      let reduceOps = `\n          let inputIdx = ${inputIndicesHelper.i2oExpression('inputIndices')};\n          ${ops[2]};`;\n      const reduceOnAllAxes = !attributes.noopWithEmptyAxes && attributes.axes.length === 0;\n      for (let k = 0; k < inputs[0].dims.length; k++) {\n        // if this axis is reduced\n        if (reduceOnAllAxes || axes.indexOf(k) >= 0) {\n          if (attributes.keepDims) {\n            outputShape.push(1);\n          }  // else { remove the axis from outputShape; }\n\n          // loop over the d-th axis\n          reduceOps = `for(var j${k}: u32 = 0; j${k} < ${inputs[0].dims[k]}; j${k}++) {\n                            inputIndices[${k}] = j${k};\n                            ${reduceOps}\n                          }`;\n        } else {\n          if (outputDimsLength > 1) {\n            idxCopy.push(`inputIndices[${k}] = outputIndices[${outputShape.length}];`);\n          } else {\n            idxCopy.push(`inputIndices[${k}] = outputIndices;`);\n          }\n          outputShape.push(inputs[0].dims[k]);\n        }\n      }\n\n      const outputIndicesHelper = createIndicesHelper('output', outputShape);\n      const outputSize = ShapeUtil.size(outputShape);\n      const dataType = 'f32';\n\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n          @group(0) @binding(0) var<storage, read> _A : array<${dataType}>;\n          @group(0) @binding(1) var<storage, read_write> output : array<${dataType}>;\n\n          ${outputIndicesHelper.o2iImpl}\n          ${inputIndicesHelper.i2oImpl}\n\n          ${shaderHelper.mainStart()}\n          ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n          ${inputIndicesHelper.indicesVariableDeclaration('inputIndices')}\n          ${outputIndicesHelper.indicesVariableDeclaration('outputIndices')}\n          ${outputIndicesHelper.o2iCall('global_idx', 'outputIndices')}\n\n          var value = ${dataType}(0);\n\n          ${idxCopy.join('\\n')}\n          ${ops[0]}       // init ops for reduce max/min\n          ${initInputIdx}\n          ${ops[1]}\n          ${reduceOps}\n          ${ops[3]}       // final computation for reduce mean\n          output[global_idx] = value;\n        }`;\n\n      return {\n        ...metadata,\n        getShaderSource,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n      };\n    };\n\nconst createReduceAttributesFromInputs =\n    (inputs: readonly TensorView[], attributes: ReduceAttributes): ReduceAttributes => {\n      const axes: number[] = [];\n      if (inputs[1].dims[0] > 0) {\n        inputs[1].getBigInt64Array().forEach(v => axes.push(Number(v)));\n      }\n      return createAttributeWithCacheKey(\n          {axes, keepDims: attributes.keepDims, noopWithEmptyAxes: attributes.noopWithEmptyAxes});\n    };\n\nconst createReduceProgramInfoLoader =\n    (inputs: readonly TensorView[], name: string, attributes: ReduceAttributes, reduceOp: ReduceOp):\n        ProgramInfoLoader => {\n          const updatedAttributes: ReduceAttributes =\n              inputs.length === 1 ? attributes : createReduceAttributesFromInputs(inputs, attributes);\n          const metadata:\n              ProgramMetadata = {name, inputTypes: [GpuDataType.default], cacheHint: updatedAttributes.cacheKey};\n          return {\n            ...metadata,\n            get: () => createReduceProgramInfo(\n                metadata, [inputs[0]], updatedAttributes,\n                updatedAttributes.noopWithEmptyAxes && updatedAttributes.axes.length === 0 ? noOp : reduceOp)\n          };\n        };\n\nexport const reduceLogSum = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', '', 'value += _A[inputIdx];', 'value = log(value);'];\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceLogSum', attributes, reduceOp), {inputs: [0]});\n};\n\nexport const reduceL1 = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', '', 'value += abs(_A[inputIdx]);', ''];\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceL1', attributes, reduceOp), {inputs: [0]});\n};\n\nexport const reduceL2 = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = ():\n      string[] => ['var t = f32(0); value = 0.0;', '', 't = _A[inputIdx]; value += (t * t);', 'value = sqrt(value);'];\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceL2', attributes, reduceOp), {inputs: [0]});\n};\n\nexport const reduceLogSumExp = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', '', 'value += exp(_A[inputIdx]);', 'value = log(value);'];\n  context.compute(\n      createReduceProgramInfoLoader(context.inputs, 'ReduceLogSumExp', attributes, reduceOp), {inputs: [0]});\n};\n\nexport const reduceMax = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (inputs: TensorView[], axes: number[]): string[] => {\n    const idxZero = [];\n    for (let k = 0; k < inputs[0].dims.length; k++) {\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\n        idxZero.push(`inputIndices[${k}] = 0;`);  // first element\n      }\n    }\n\n    return [`${idxZero.join('\\n')}`, 'value = _A[inputIdx];', 'value = max(value, _A[inputIdx]);', ''];\n  };\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceMax', attributes, reduceOp), {inputs: [0]});\n};\n\nexport const reduceMean = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (inputs: TensorView[], axes: number[]): string[] => {\n    let size = 1.0;\n    for (let k = 0; k < inputs[0].dims.length; k++) {\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\n        size *= inputs[0].dims[k];\n      }\n    }\n\n    return ['value = 0.0;', '', 'value += _A[inputIdx];', `value = value / ${size}.;`];  // ensure real number with `.`\n  };\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceMean', attributes, reduceOp), {inputs: [0]});\n};\n\nexport const reduceMin = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (inputs: TensorView[], axes: number[]): string[] => {\n    const idxZero = [];\n    for (let k = 0; k < inputs[0].dims.length; k++) {\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\n        idxZero.push(`inputIndices[${k}] = 0;`);  // first element\n      }\n    }\n\n    return [`${idxZero.join('\\n')}`, 'value = _A[inputIdx];', 'value = min(value, _A[inputIdx]);', ''];\n  };\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceMin', attributes, reduceOp), {inputs: [0]});\n};\n\nexport const reduceProd = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (): string[] => ['value = 1.0;', '', 'value *= _A[inputIdx];', ''];\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceProd', attributes, reduceOp), {inputs: [0]});\n};\n\nexport const reduceSum = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', '', 'value += _A[inputIdx];', ''];\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceSum', attributes, reduceOp), {inputs: [0]});\n};\n\nexport const reduceSumSquare = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp =\n      (): string[] => ['var t = f32(0); value = 0.0;', '', 't = _A[inputIdx]; value += t * t;', ''];\n  context.compute(\n      createReduceProgramInfoLoader(context.inputs, 'ReduceSumSquare', attributes, reduceOp), {inputs: [0]});\n};\n\nexport const parseReduceAttributes = (attributes: Record<string, unknown>): ReduceAttributes =>\n    createAttributeWithCacheKey(attributes as Omit<ReduceAttributes, keyof AttributeWithCacheKey>);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor';\nimport {ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata, TensorInfo} from '../types';\n\nimport {createIndicesHelper, ShaderHelper} from './common';\n\nexport interface SliceAttributes extends AttributeWithCacheKey {\n  readonly starts: number[];\n  readonly ends: number[];\n  readonly axes: number[];\n}\n\nconst validateInputs = (inputs: readonly TensorView[], attributes: SliceAttributes): void => {\n  if (!inputs || inputs.length < 1) {\n    throw new Error('too few inputs');\n  }\n  if (attributes.axes.length !== 0) {\n    if (attributes.axes.length !== attributes.starts.length || attributes.axes.length !== attributes.ends.length) {\n      throw new Error('axes, starts and ends must have the same length');\n    }\n  } else if (attributes.starts.length !== attributes.ends.length) {\n    throw new Error('starts and ends must have the same length');\n  }\n  inputs.slice(1).forEach((_, idx) => {\n    if (inputs[idx + 1].dataType !== DataType.int32 && inputs[idx + 1].dataType !== DataType.int64) {\n      throw new Error(`Input ${idx} must be an array of int32 or int64`);\n    }\n  });\n};\n\nconst readInput = (inputs: readonly TensorView[], idx: number): number[] => {\n  const input: number[] = [];\n  if (inputs.length > idx) {\n    if (inputs[idx].dataType === DataType.int64) {\n      inputs[idx].getBigInt64Array().forEach(v => input.push(Number(v)));\n    } else if (inputs[1].dataType === DataType.int32) {\n      inputs[idx].getInt32Array().forEach(v => input.push(Number(v)));\n    } else {\n      throw new Error(`Input ${idx} must be an array of int32 or int64`);\n    }\n  }\n  return input;\n};\n\nconst createSliceAttributesFromInputs =\n    (inputs: readonly TensorView[], attributes: SliceAttributes): SliceAttributes => {\n      if (inputs.length > 1) {\n        const starts: number[] = readInput(inputs, 1);\n        const ends: number[] = readInput(inputs, 2);\n        let axes: number[] = readInput(inputs, 3);\n        if (axes.length === 0) {\n          axes = [...Array(inputs[0].dims.length).keys()];\n        }\n        return createAttributeWithCacheKey({starts, ends, axes});\n      } else {\n        return attributes;\n      }\n    };\n\nconst fixStartEndValues =\n    (value: number, index: number, inputShape: readonly number[], axes: readonly number[], steps: readonly number[]):\n        number => {\n          let newValue = value;\n          if (value < 0) {\n            newValue += inputShape[axes[index]];\n          }\n          if (steps[index] < 0) {\n            return Math.max(0, Math.min(newValue, inputShape[axes[index]] - 1));\n          } else {\n            return Math.max(0, Math.min(newValue, inputShape[axes[index]]));\n          }\n        };\n\nconst calculateInputIndicesImpl = (inputShape: readonly number[], outputShape: readonly number[]): string => {\n  const outputIndicesHelper = createIndicesHelper('output', outputShape);\n  const inputIndicesHelper = createIndicesHelper('input', inputShape);\n\n  return `fn calculateInputIndices(outputIndices: ${outputIndicesHelper.iType}) -> ${inputIndicesHelper.iType} {\n          ${inputIndicesHelper.indicesVariableDeclaration('inputIndices')};\n          var carry = 0u;\n          for (var i = ${inputShape.length}; i >= 0; i--) {\n            var outputIndex = ${outputShape.length === 1 ? 'outputIndices' : 'outputIndices[i]'};\n            var inputIndex = outputIndex * steps[i] + starts[i] + carry;\n            carry = inputIndex / inputShape[i];\n            inputIndex = inputIndex % inputShape[i];\n            if (signs[i] < 0) {\n              inputIndex = inputShape[i] - inputIndex - 1u + starts[i];\n            }\n            ${inputShape.length === 1 ? 'inputIndices' : 'inputIndices[i]'} = inputIndex;\n          }\n          return inputIndices;\n      }`;\n};\n\nconst createSliceProgramInfo =\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], attributes: SliceAttributes): ProgramInfo => {\n      const inputShape = inputs[0].dims;\n      const inputSize = ShapeUtil.size(inputShape);\n      const axes = (attributes.axes.length > 0) ? ShapeUtil.normalizeAxes(attributes.axes, inputShape.length) :\n                                                  [...Array(inputShape.length).keys()];\n      const dataType = 'f32';  // TODO: support other data type\n      let steps = readInput(inputs, 4);\n      steps.forEach((step) => step !== 0 || (() => {\n                                throw new Error('step cannot be 0');\n                              }));\n      if (steps.length === 0) {\n        steps = Array(axes.length).fill(1);\n      }\n      const starts = attributes.starts.map((start, i) => fixStartEndValues(start, i, inputShape, axes, steps));\n\n      const ends = attributes.ends.map((end, i) => fixStartEndValues(end, i, inputShape, axes, steps));\n\n      if (axes.length !== inputShape.length) {\n        for (let i = 0; i < inputShape.length; ++i) {\n          if (!axes.includes(i)) {\n            starts.splice(i, 0, 0);\n            ends.splice(i, 0, inputShape[i]);\n            steps.splice(i, 0, 1);\n          }\n        }\n      }\n      const signs = steps.map(step => Math.sign(step));\n      // Convert negative steps to positive steps and reverse starts and ends\n      steps.forEach((step, i, array) => {\n        if (step < 0) {\n          const numSteps = (ends[i] - starts[i]) / step;\n          const newEnd = starts[i];\n          const newStart = newEnd + numSteps * steps[i];\n          starts[i] = newStart;\n          ends[i] = newEnd;\n          array[i] = -step;\n        }\n      });\n\n      const outputShape = inputShape.slice(0);\n      axes.forEach((axis, _) => {\n        outputShape[axis] = Math.ceil((ends[axis] - starts[axis]) / steps[axis]);\n      });\n\n      const output: TensorInfo = {dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default};\n\n      const outputIndicesHelper = createIndicesHelper('output', outputShape);\n      const inputIndicesHelper = createIndicesHelper('input', inputShape);\n      const outputSize = ShapeUtil.size(outputShape);\n\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n        @group(0) @binding(0) var<storage, read> input: array<${dataType}>;\n        @group(0) @binding(1) var<storage, read_write> output: array<${dataType}>;\n        const signs = array<i32, ${signs.length}>(${signs.map(i => `${i}i`).join(',')});\n        const starts = array<u32, ${starts.length}>(${starts.map(i => `${i}u`).join(',')});\n        const ends = array<u32, ${ends.length}>(${ends.map(i => `${i}u`).join(',')});\n        const steps = array<u32, ${steps.length}>(${steps.map(i => `${i}u`).join(',')});\n        const inputShape = array<u32, ${inputShape.length}>(${inputShape.map(i => `${i}u`).join(',')});\n\n        ${outputIndicesHelper.o2iImpl}\n        ${inputIndicesHelper.i2oImpl}\n        ${calculateInputIndicesImpl(inputShape, outputShape)}\n        ${shaderHelper.mainStart()}\n          ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n          ${outputIndicesHelper.indicesVariableDeclaration('outputIndices')}\n          ${outputIndicesHelper.o2iCall('global_idx', 'outputIndices')}\n          ${inputIndicesHelper.indicesVariableDeclaration('inputIndices')}\n          inputIndices = calculateInputIndices(outputIndices);\n          output[global_idx] = input[${inputIndicesHelper.i2oExpression('inputIndices')}];\n      }`;\n      return {\n        ...metadata,\n        getShaderSource,\n        outputs: [output],\n        dispatchGroup: () => ({x: Math.ceil(inputSize / 64 /* workgroup size */)})\n      };\n    };\n\nconst createSliceProgramInfoLoader =\n    (inputs: readonly TensorView[], attributes: SliceAttributes): ProgramInfoLoader => {\n      const updatedAttributes = createSliceAttributesFromInputs(inputs, attributes);\n      const metadata: ProgramMetadata = {\n        name: 'Slice',\n        inputTypes: [GpuDataType.default],\n        cacheHint: updatedAttributes.cacheKey + (inputs.length > 4 ? 'steps_' + inputs[4].dims.toString() : '')\n      };\n      return {...metadata, get: () => createSliceProgramInfo(metadata, inputs, updatedAttributes)};\n    };\n\nexport const slice = (context: ComputeContext, attributes: SliceAttributes): void => {\n  validateInputs(context.inputs, attributes);\n  context.compute(createSliceProgramInfoLoader(context.inputs, attributes), {inputs: [0]});\n};\n\nexport const parseSliceAttributes = (attributes: Record<string, unknown>): SliceAttributes => {\n  const starts = attributes.starts as number[];\n  const ends = attributes.ends as number[];\n  const axes = attributes.axes as number[];\n  const steps: number[] = [];\n  return createAttributeWithCacheKey({starts, ends, axes, steps});\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor';\nimport {ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata, TensorInfo} from '../types';\n\nimport {createIndicesHelper, IndicesHelper, ShaderHelper} from './common';\n\nexport interface SplitAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n  readonly numOutputs: number;\n  readonly splitSizes: number[];\n}\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length < 1) {\n    throw new Error('too few inputs');\n  }\n};\n\nconst createSplitAttributesFromInputs =\n    (inputs: readonly TensorView[], attributes: SplitAttributes): SplitAttributes => {\n      const splitSizes: number[] = [];\n      if (inputs[1].dims[0] > 0) {\n        inputs[1].getBigInt64Array().forEach(v => splitSizes.push(Number(v)));\n      }\n      return createAttributeWithCacheKey({numOutputs: attributes.numOutputs, axis: attributes.axis, splitSizes});\n    };\n\nconst calculateOutputIndexImpl = (numberOfTensors: number): string => `\nfn calculateOutputIndex(index: u32) -> u32 {\n    for (var i: u32 = 0u; i < ${numberOfTensors}u; i += 1u ) {\n    if (index < sizeInConcatAxis[i]) {\n        return i;\n    }\n    }\n    return ${numberOfTensors}u;\n}`;\nconst writeBufferDataImpl = (indicesHelper: readonly IndicesHelper[]) => {\n  const numberOfTensors = indicesHelper.length;\n  const codeLines: string[] = [];\n  for (let i = 0; i < numberOfTensors; ++i) {\n    const returnSnippet = `output${i}[${indicesHelper[i].i2oExpression('indices', true)}] = input[global_idx];`;\n    if (numberOfTensors === 1) {\n      codeLines.push(returnSnippet);\n    } else if (i === 0) {\n      codeLines.push(`if (outputNumber == ${i}u) { ${returnSnippet} }`);\n    } else if (i === numberOfTensors - 1) {\n      codeLines.push(`else { ${returnSnippet} }`);\n    } else {\n      codeLines.push(`else if (outputNumber == ${i}) { ${returnSnippet} }`);\n    }\n  }\n  return `\n      fn writeBufferData(outputNumber: u32, indices: ptr<function, ${indicesHelper[0].iType}>, global_idx: u32) {\n        ${codeLines.join('\\n')}\n      }`;\n};\n\nconst createSplitProgramInfo =\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], attributes: SplitAttributes, dataType = 'f32'):\n        ProgramInfo => {\n          const inputShape = inputs[0].dims;\n          const inputSize = ShapeUtil.size(inputShape);\n          const rank = inputShape.length;\n          const axis = attributes.axis;\n          const adjustedAxis = (axis < 0) ? inputShape.length + axis : axis;\n          const outputStorageBuffersDeclarations = new Array<string>(attributes.numOutputs);\n          const outputIndicesHelpers = new Array<IndicesHelper>(attributes.numOutputs);\n          const inputIndicesHelper = createIndicesHelper('input', inputShape);\n          const sizeInConcatAxis = new Array<number>(attributes.numOutputs);\n          const outputs: TensorInfo[] = [];\n          const outputShapes: number[][] = [];\n          let previousSum = 0;\n          for (let i = 0; i < attributes.numOutputs; i++) {\n            previousSum += attributes.splitSizes[i];\n            sizeInConcatAxis[i] = previousSum;\n            outputStorageBuffersDeclarations[i] =\n                `@group(0) @binding(${i + 1}) var<storage, read_write> output${i} : array<${dataType}>;`;\n            const outputShape = inputShape.slice();\n            outputShape[attributes.axis] = attributes.splitSizes[i];\n            outputShapes.push(outputShape);\n            outputIndicesHelpers[i] = createIndicesHelper(`output${i}`, outputShapes[i]);\n            outputs.push({dims: outputShapes[i], dataType: inputs[0].dataType, gpuDataType: GpuDataType.default});\n          }\n          const indicesAxis = rank < 2 ? 'indices' : `indices[${adjustedAxis}]`;\n          const getShaderSource = (shaderHelper: ShaderHelper) => `\n  @group(0) @binding(0) var<storage, read> input : array<${dataType}>;\n  ${outputStorageBuffersDeclarations.join('\\n')}\n  ${inputIndicesHelper.o2iImpl}\n  ${outputIndicesHelpers.map(o => o.i2oImpl).join('\\n')}\n  const sizeInConcatAxis = array<u32, ${sizeInConcatAxis.length}>(${sizeInConcatAxis.map(i => `${i}u`).join(',')});\n  ${calculateOutputIndexImpl(sizeInConcatAxis.length)}\n  ${writeBufferDataImpl(outputIndicesHelpers)}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(inputSize)}\n\n    ${inputIndicesHelper.indicesVariableDeclaration('indices')}\n    ${inputIndicesHelper.o2iCall('global_idx', 'indices')}\n    let outputNumber = calculateOutputIndex(${indicesAxis});\n    if (outputNumber != 0) {\n        ${indicesAxis} -= sizeInConcatAxis[outputNumber - 1u];\n    }\n    writeBufferData(outputNumber, &indices, global_idx);\n  }`;\n          return {\n            ...metadata,\n            getShaderSource,\n            outputs,\n            dispatchGroup: () => ({x: Math.ceil(inputSize / 64 /* workgroup size */)})\n          };\n        };\n\nconst createSplitProgramInfoLoader =\n    (inputs: readonly TensorView[], attributes: SplitAttributes): ProgramInfoLoader => {\n      const updatedAttributes = inputs.length === 1 ? attributes : createSplitAttributesFromInputs(inputs, attributes);\n      const metadata:\n          ProgramMetadata = {name: 'Split', inputTypes: [GpuDataType.default], cacheHint: updatedAttributes.cacheKey};\n      return {...metadata, get: () => createSplitProgramInfo(metadata, [inputs[0]], attributes)};\n    };\n\nexport const split = (context: ComputeContext, attributes: SplitAttributes): void => {\n  validateInputs(context.inputs);\n  context.compute(createSplitProgramInfoLoader(context.inputs, attributes), {inputs: [0]});\n};\n\nexport const parseSplitAttributes = (attributes: Record<string, unknown>): SplitAttributes => {\n  const axis = attributes.axis as number;\n  const splitSizes: number[] = attributes.splitSizes as number[];\n  const numOutputs = attributes.numOutputs as number < 0 ? splitSizes.length : attributes.numOutputs as number;\n  if (numOutputs !== splitSizes.length) {\n    throw new Error('numOutputs and splitSizes lengh must be equal');\n  }\n  return createAttributeWithCacheKey({axis, numOutputs, splitSizes});\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor';\nimport {ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo} from '../types';\n\nimport {createIndicesHelper, ShaderHelper} from './common';\n\nexport interface TransposeAttributes extends AttributeWithCacheKey {\n  readonly perm: number[];\n}\n\nexport const transposeProgramMetadata = {\n  name: 'Transpose',\n  inputTypes: [GpuDataType.default]\n};\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Transpose requires 1 input.');\n  }\n\n  if (inputs[0].dataType !== DataType.float) {\n    throw new Error('input should be float tensor');\n  }\n};\n\nconst getAdjustedPerm = (inputShape: readonly number[], perm: number[]): number[] =>\n    (perm && perm.length !== inputShape.length) ? [...(inputShape.keys())].reverse() : perm;\n\nconst getOutputShape = (inputShape: readonly number[], perm: number[]): readonly number[] =>\n    ShapeUtil.sortBasedOnPerm(inputShape, getAdjustedPerm(inputShape, perm));\n\nconst permFunctionBody = (perm: number[], rank: number): string => {\n  const reverseFunc = [];\n  reverseFunc.push(`fn perm(a: ptr<function, array<u32, ${rank}>>, i: ptr<function, array<u32, ${rank}>>) {`);\n  for (let i = 0; i < rank; ++i) {\n    reverseFunc.push(`\\t(*a)[${perm[i]}]=(*i)[${i}];`);\n  }\n  reverseFunc.push('\\t}');\n  return reverseFunc.join('\\n');\n};\n\nexport const createTransposeProgramInfo = (input: TensorView, permAttr: number[]): ProgramInfo => {\n  const dataType = 'f32';  // TODO: support other data type\n  const inputShape = input.dims;\n  const perm = getAdjustedPerm(inputShape, permAttr);\n  const outputShape = getOutputShape(inputShape, perm);\n  const rank = inputShape.length;\n  const outputSize = ShapeUtil.size(outputShape);\n  // A dims=[${inputs[0].dims.toString()}]\n  // out Dims=[${unpackedOutputShape.toString()}]\n  // based on perm=[${perm.toString()}]\n\n  const outputIndicesHelper = createIndicesHelper('output', outputShape);\n  const inputIndicesHelper = createIndicesHelper('a', inputShape);\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => `\n  @group(0) @binding(0) var<storage, read> a : array<${dataType}>;\n  @group(0) @binding(1) var<storage, read_write> output : array<${dataType}>;\n\n  ${permFunctionBody(perm, rank)}\n  ${outputIndicesHelper.o2iImpl}\n  ${inputIndicesHelper.i2oImpl}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n    ${outputIndicesHelper.indicesVariableDeclaration('indices')}\n    ${outputIndicesHelper.o2iCall('global_idx', 'indices')}\n    ${inputIndicesHelper.indicesVariableDeclaration('aIndices')}\n    perm(&aIndices, &indices);\n\n    output[global_idx] = a[${inputIndicesHelper.i2oExpression('aIndices')}];\n  }`;\n  return {\n    ...transposeProgramMetadata,\n    outputs: [{dims: outputShape, dataType: input.dataType, gpuDataType: GpuDataType.default}],\n    getShaderSource,\n    dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n  };\n};\n\nexport const transpose = (context: ComputeContext, attributes: TransposeAttributes): void => {\n  validateInputs(context.inputs);\n  context.compute({\n    ...transposeProgramMetadata,\n    cacheHint: attributes.cacheKey,\n    get: () => createTransposeProgramInfo(context.inputs[0], attributes.perm)\n  });\n};\n\nexport const parseTransposeAttributes = (attributes: Record<string, unknown>): TransposeAttributes =>\n    createAttributeWithCacheKey({perm: attributes.perm as number[]});\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor';\nimport {MAX_CLIP, MIN_CLIP, ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {ShaderHelper} from './common';\n\ntype BuiltinFunctionName = string;\ntype ElementwiseCustomExpression = (expression: string) => string;\ntype ElementwiseFunctionCall = BuiltinFunctionName|ElementwiseCustomExpression;\n\nconst createElementwiseProgramShader =\n    (shaderHelper: ShaderHelper, datasize: number, funcCall: ElementwiseFunctionCall,\n     additionalImplementation?: string): string => {\n      const vecSize = Math.ceil(datasize / 4);\n\n      let expression = '';\n      if (typeof funcCall === 'string') {\n        expression = `${funcCall}(a)`;\n      } else {\n        expression = funcCall('a');\n      }\n      return `\n  @group(0) @binding(0) var<storage, read> inputData : array<vec4<f32>>;\n  @group(0) @binding(1) var<storage, read_write> outputData : array<vec4<f32>>;\n\n  ${additionalImplementation ?? ''}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(vecSize)}\n\n    let a = inputData[global_idx];\n    outputData[global_idx] = ${expression};\n  }`;\n    };\n\nconst createElementwiseProgramInfo =\n    (metadata: ProgramMetadata, input: TensorView, funcCall: ElementwiseFunctionCall,\n     additionalImplementation?: string): ProgramInfo => ({\n      ...metadata,\n      getShaderSource: shaderHelper =>\n          createElementwiseProgramShader(shaderHelper, ShapeUtil.size(input.dims), funcCall, additionalImplementation),\n      outputs: [{dims: input.dims, dataType: input.dataType, gpuDataType: GpuDataType.default}],\n      dispatchGroup: (inputTensors) =>\n          ({x: Math.ceil(ShapeUtil.size(inputTensors[0].dims) / 64 /* workgroup size */ / 4 /* vec size */)})\n    });\n\nconst createElementwiseProgramInfoLoader =\n    (input: TensorView, name: string, funcCall: ElementwiseFunctionCall, additionalImplementation?: string,\n     cacheKey?: string): ProgramInfoLoader => {\n      const metadata: ProgramMetadata = {name, inputTypes: [GpuDataType.default], cacheHint: cacheKey};\n      return {\n        ...metadata,\n        get: () => createElementwiseProgramInfo(metadata, input, funcCall, additionalImplementation)\n      };\n    };\n\nexport const abs = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Abs', 'abs'));\n};\n\nexport const acos = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Acos', 'acos'));\n};\n\nexport const acosh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Acosh', 'acosh'));\n};\n\nexport const asin = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Asin', 'asin'));\n};\n\nexport const asinh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Asinh', 'asinh'));\n};\n\nexport const atan = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Atan', 'atan'));\n};\nexport const atanh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Atanh', 'atanh'));\n};\n\nexport interface ClipAttributes extends AttributeWithCacheKey {\n  readonly min: number;\n  readonly max: number;\n}\n\nexport const clipV10 = (context: ComputeContext, attributes: ClipAttributes): void => {\n  context.compute(\n      createElementwiseProgramInfoLoader(\n          context.inputs[0], 'Clip', a => `clamp(${a}, clip_min_, clip_max_)`, `\n    const clip_min_: vec4<f32> = vec4(f32(${attributes.min}));\n    const clip_max_: vec4<f32> = vec4(f32(${attributes.max}));\n`,\n          attributes.cacheKey),\n      {inputs: [0]});\n};\nconst generateClipAttributesFromInputs = (inputs: readonly TensorView[]): ClipAttributes => {\n  const min = (inputs.length >= 2) ? inputs[1].getFloat32Array()[0] : MIN_CLIP;\n  const max = (inputs.length >= 3) ? inputs[2].getFloat32Array()[0] : MAX_CLIP;\n  return createAttributeWithCacheKey({min, max});\n};\n\nexport const clip = (context: ComputeContext): void => {\n  const attributes = generateClipAttributesFromInputs(context.inputs);\n  clipV10(context, attributes);\n};\n\nexport const ceil = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Ceil', 'ceil'));\n};\n\nexport const cos = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Cos', 'cos'));\n};\n\nexport const cosh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Cosh', 'cosh'));\n};\n\nexport interface AlphaAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const parseAlphaAttributes = (attributes: Record<string, unknown>): AlphaAttributes =>\n    createAttributeWithCacheKey(attributes as {alpha: number});\n\nexport const elu = (context: ComputeContext, attributes: AlphaAttributes): void => {\n  context.compute(createElementwiseProgramInfoLoader(\n      context.inputs[0], 'Elu', a => `elu_vf32(${a})`, `\n  const elu_alpha_: f32 = f32(${attributes.alpha});\n\n  fn elu_f32(a: f32) -> f32 {\n  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);\n  }\n\n  fn elu_vf32(v: vec4<f32>) -> vec4<f32> {\n  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));\n  }`,\n      attributes.cacheKey));\n};\n\nexport const erf = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Erf', a => `erf_vf32(${a})`, `\n  const r0: f32 = 0.3275911;\n  const r1: f32 = 0.254829592;\n  const r2: f32 = -0.284496736;\n  const r3: f32 = 1.421413741;\n  const r4: f32 = -1.453152027;\n  const r5: f32 = 1.061405429;\n\n  fn erf_vf32(v: vec4<f32>) -> vec4<f32> {\n    let absv = abs(v);\n    let x = 1.0 / (1.0 + r0 * absv);\n    return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));\n  }`));\n};\n\nexport const exp = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Exp', 'exp'));\n};\n\nexport const floor = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Floor', 'floor'));\n};\n\nexport const leakyRelu = (context: ComputeContext, attributes: AlphaAttributes): void => {\n  context.compute(createElementwiseProgramInfoLoader(\n      context.inputs[0], 'LeakyRelu', a => `select(leaky_relu_alpha_ * ${a}, ${a}, ${a} >= vec4<f32>(0.0))`,\n      `const leaky_relu_alpha_: f32 = f32(${attributes.alpha});`, attributes.cacheKey));\n};\n\nexport const neg = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Neg', a => `-${a}`));\n};\n\nexport const reciprocal = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Reciprocal', a => `1.0/${a}`));\n};\n\nexport const relu = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(\n      context.inputs[0], 'Relu', a => `select(vec4<f32>(0.0), ${a}, ${a} > vec4<f32>(0.0))`));\n};\n\nexport const sigmoid = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Sigmoid', a => `(1.0 / (1.0 + exp(-${a})))`));\n};\n\nexport const sin = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Sin', 'sin'));\n};\n\nexport const sinh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Sinh', 'sinh'));\n};\n\nexport const sqrt = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Sqrt', 'sqrt'));\n};\n\nexport const tan = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Tan', 'tan'));\n};\n\nexport const tanh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Tanh', 'tanh'));\n};\n\nexport const thresholdedRelu = (context: ComputeContext, attributes: AlphaAttributes): number => {\n  context.compute(createElementwiseProgramInfoLoader(\n      context.inputs[0], 'ThresholdedRelu', a => `select(vec4<f32>(0.0), ${a}, ${a} > thresholded_relu_alpha_)`,\n      `const thresholded_relu_alpha_: vec4<f32> = vec4<f32>(${attributes.alpha});`, attributes.cacheKey));\n  return 0;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {WebGpuBackend} from '../backend-webgpu';\nimport {LOG_DEBUG} from '../log';\n\nimport {createShaderHelper} from './ops/common';\nimport {Artifact, GpuData, ProgramInfo} from './types';\n\n/**\n * ProgramManager is the main class behind running computations\n * It builds ProgramInfo's into Artifacts\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\n * Uses the artifact to run the computation by calling Draw on\n * the WebGL drawing buffer\n * ProgramManager automatically maps (binds) input variables to their\n * corresponding Location's in the binary program\n */\nexport class ProgramManager {\n  repo: Map<unknown, Artifact>;  // this should be per-session object\n  attributesBound: boolean;\n\n  constructor(private backend: WebGpuBackend) {\n    this.repo = new Map();\n    this.attributesBound = false;\n  }\n  getArtifact(key: unknown): Artifact|undefined {\n    return this.repo.get(key);\n  }\n  setArtifact(key: unknown, artifact: Artifact): void {\n    this.repo.set(key, artifact);\n  }\n  run(buildArtifact: Artifact, inputs: GpuData[], outputs: GpuData[], dispatchGroup: [number, number, number]): void {\n    const device = this.backend.device;\n    const computePassEncoder = this.backend.getComputePassEncoder();\n\n    if (this.backend.profilingEnabled) {\n      // profiling write start timestamp\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (computePassEncoder as any).writeTimestamp(this.backend.profilingQuerySet, 0);\n    }\n\n    computePassEncoder.setPipeline(buildArtifact.computePipeline);\n    const entries = [];\n    for (const input of inputs) {\n      entries.push({binding: entries.length, resource: {buffer: input.buffer}});\n    }\n    for (const output of outputs) {\n      entries.push({binding: entries.length, resource: {buffer: output.buffer}});\n    }\n    const bindGroup = device.createBindGroup({layout: buildArtifact.computePipeline.getBindGroupLayout(0), entries});\n    computePassEncoder.setBindGroup(0, bindGroup);\n\n    computePassEncoder.dispatchWorkgroups(...dispatchGroup);\n\n    this.backend.pendingDispatchNumber++;\n\n    if (this.backend.profilingEnabled) {\n      // profiling write end timestamp\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (computePassEncoder as any).writeTimestamp(this.backend.profilingQuerySet, 1);\n      // eslint-disable-next-line no-bitwise\n      const queryData = this.backend.gpuDataManager.create(16, GPUBufferUsage.COPY_SRC | GPUBufferUsage.QUERY_RESOLVE);\n      // eslint-disable-next-line no-bitwise\n      const syncData = this.backend.gpuDataManager.create(16, GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST);\n\n      this.backend.endComputePass();\n      this.backend.getCommandEncoder().resolveQuerySet(this.backend.profilingQuerySet, 0, 2, queryData.buffer, 0);\n      this.backend.getCommandEncoder().copyBufferToBuffer(queryData.buffer, 0, syncData.buffer, 0, 16);\n      this.backend.flush();\n\n      const kernelId = this.backend.currentKernelId!;\n      const kernelName = this.backend.kernels.get(kernelId)![0];\n\n      syncData.buffer.mapAsync(GPUMapMode.READ).then(() => {\n        const mappedData = new BigUint64Array(syncData.buffer.getMappedRange());\n        const startTimeU64 = mappedData[0];\n        const endTimeU64 = mappedData[1];\n\n        syncData.buffer.unmap();\n\n        if (typeof this.backend.profilingTimeBase === 'undefined') {\n          this.backend.profilingTimeBase = startTimeU64;\n        }\n\n        const startTime = Number(startTimeU64 - this.backend.profilingTimeBase);\n        const endTime = Number(endTimeU64 - this.backend.profilingTimeBase);\n\n        if (!Number.isSafeInteger(startTime) || !Number.isSafeInteger(endTime)) {\n          throw new RangeError('incorrect timestamp range');\n        }\n\n        this.backend.gpuDataManager.release(queryData.id);\n        this.backend.gpuDataManager.release(syncData.id);\n\n        // eslint-disable-next-line no-console\n        console.log(`[profiling] kernel \"${kernelId}|${kernelName}\" execution time: ${endTime - startTime} ns`);\n      });\n    }\n\n    if (this.backend.pendingDispatchNumber >= 16) {\n      this.backend.flush();\n    }\n  }\n  dispose(): void {\n    // this.repo.forEach(a => this.glContext.deleteProgram(a.program));\n  }\n  build(programInfo: ProgramInfo, normalizedDispatchGroupSize: [number, number, number]): Artifact {\n    const device = this.backend.device;\n\n    const code = programInfo.getShaderSource(createShaderHelper(normalizedDispatchGroupSize));\n    const shaderModule = device.createShaderModule({code});\n    LOG_DEBUG('verbose', () => `[WebGPU] shader code: ${code}`);\n\n    const computePipeline =\n        device.createComputePipeline({compute: {module: shaderModule, entryPoint: 'main'}, layout: 'auto'});\n\n    return {programInfo, computePipeline};\n  }\n\n  normalizeDispatchGroupSize(dispatchGroup: ReturnType<ProgramInfo['dispatchGroup']>): [number, number, number] {\n    const x = typeof dispatchGroup === 'number' ? dispatchGroup : dispatchGroup.x;\n    const y = typeof dispatchGroup === 'number' ? 1 : (dispatchGroup.y || 1);\n    const z = typeof dispatchGroup === 'number' ? 1 : (dispatchGroup.z || 1);\n    const limitPerDimension = this.backend.device.limits.maxComputeWorkgroupsPerDimension;\n    if (x <= limitPerDimension && y <= limitPerDimension && z <= limitPerDimension) {\n      return [x, y, z];\n    }\n    const size = x * y * z;\n    let dispatchAverage = Math.ceil(Math.sqrt(size));\n    if (dispatchAverage > limitPerDimension) {\n      dispatchAverage = Math.ceil(Math.cbrt(size));\n      if (dispatchAverage > limitPerDimension) {\n        throw new Error('Total dispatch size exceeds WebGPU maximum.');\n      }\n      return [dispatchAverage, dispatchAverage, dispatchAverage];\n    } else {\n      return [dispatchAverage, dispatchAverage, 1];\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor, TensorView} from '../tensor';\n\nimport {ShaderHelper} from './ops/common';\n\nexport enum GpuDataType {\n  default = 0,\n  upload = 1,\n  profile = 2\n}\nexport type GpuDataId = number;\n\nexport interface GpuData {\n  type: GpuDataType;\n  id: GpuDataId;\n  buffer: GPUBuffer;\n}\n\nexport interface TensorInfo {\n  id?: Tensor.Id;\n  dims: readonly number[];\n  dataType: number;\n  gpuDataType: GpuDataType;\n}\n\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n\nexport interface ProgramMetadata {\n  /**\n   * the name of the program. used for debugging and profiling\n   */\n  name: string;\n\n  /**\n   * gpu data types for each input\n   */\n  inputTypes: GpuDataType[];\n  /**\n   * an optional string as a cache hint in the artifact cache\n   */\n  cacheHint?: string;\n}\n\n/**\n * A ProgramInfoLoader allows\n */\nexport interface ProgramInfoLoader extends ProgramMetadata {\n  /**\n   * a function to get the program info\n   */\n  get(): ProgramInfo;\n}\n\n/**\n * A set of data that represent a shader program\n */\nexport interface ProgramInfo extends ProgramMetadata {\n  /**\n   * information of uniform variables\n   */\n  variables?: ProgramVariable[];\n  /**\n   * tensor info for outputs\n   */\n  outputs: TensorInfo[];\n  /**\n   * the shader's processing source code\n   */\n  getShaderSource: (shaderHelper: ShaderHelper) => string;\n  /**\n   * default is \"main\"\n   */\n  // entryPoint: string;\n\n  dispatchGroup: (inputs: readonly TensorView[]) => {\n    x: number;\n    y?: number;\n    z?: number;\n  };\n}\n\nexport interface Artifact {\n  programInfo: ProgramInfo;\n  computePipeline: GPUComputePipeline;\n}\n\nexport interface ComputeContextInputsOutputsMapping {\n  /**\n   * specify the mapping to the program's inputs. the value can be a number or a tensor view.\n   * - if it's a number, it's the index of the kernel's input\n   * - if it's a tensor view, it's an existing tensor view that will be used as the input\n   *\n   * if inputs is not specified, the mapping will be the kernel's inputs in order.\n   */\n  readonly inputs?: ReadonlyArray<TensorView|number>;\n  /**\n   * specify the mapping to the program's outputs. the value must be a number.\n   * - if it's a non-negative number, it's the index of the kernel's output\n   * - if it's -1, it's an output that will be created as a temporary value. this value will be released after\n   * the kernel is executed.\n   * - if it's -2, it's an output that will be created as a persistent value. this value will be released when the\n   * kernel is released.\n   *\n   * if outputs is not specified, the mapping will be the kernel's outputs in order.\n   */\n  readonly outputs?: readonly number[];\n}\n\n/**\n * A ComputeContext instance carries the states that representing the current running of a kernel.\n */\nexport interface ComputeContext {\n  /**\n   * stores the pointer to OpKernelContext\n   */\n  readonly opKernelContext: number;\n\n  /**\n   * a list of inputs, each input is an instance of TensorView\n   */\n  readonly inputs: readonly TensorView[];\n\n  /**\n   * a custom data object that can be used to store any data that is needed by the kernel\n   */\n  readonly kernelCustomData: {[key: string]: unknown};\n\n  /**\n   * a buffer that can be used to access custom data created each time the kernel is executed\n   */\n  readonly customDataBuffer: Uint8Array;\n\n  compute(program: ProgramInfoLoader|ProgramInfo, inputsOutputsMapping?: ComputeContextInputsOutputsMapping):\n      TensorView[];\n  output(index: number, dims: readonly number[]): number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env, env, InferenceSession} from 'onnxruntime-common';\n\nimport {OrtWasmMessage, SerializableModeldata, SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\nimport * as core from './wasm-core-impl';\nimport {initializeWebAssembly} from './wasm-factory';\n\nconst isProxy = (): boolean => !!env.wasm.proxy && typeof document !== 'undefined';\nlet proxyWorker: Worker|undefined;\nlet initializing = false;\nlet initialized = false;\nlet aborted = false;\n\n// resolve; reject\ntype PromiseCallbacks<T = void> = [(result: T) => void, (reason: unknown) => void];\n\nlet initWasmCallbacks: PromiseCallbacks;\nlet initOrtCallbacks: PromiseCallbacks;\nconst createSessionAllocateCallbacks: Array<PromiseCallbacks<SerializableModeldata>> = [];\nconst createSessionFinalizeCallbacks: Array<PromiseCallbacks<SerializableSessionMetadata>> = [];\nconst createSessionCallbacks: Array<PromiseCallbacks<SerializableSessionMetadata>> = [];\nconst releaseSessionCallbacks: Array<PromiseCallbacks<void>> = [];\nconst runCallbacks: Array<PromiseCallbacks<SerializableTensor[]>> = [];\nconst endProfilingCallbacks: Array<PromiseCallbacks<void>> = [];\n\nconst ensureWorker = (): void => {\n  if (initializing || !initialized || aborted || !proxyWorker) {\n    throw new Error('worker not ready');\n  }\n};\n\nconst onProxyWorkerMessage = (ev: MessageEvent<OrtWasmMessage>): void => {\n  switch (ev.data.type) {\n    case 'init-wasm':\n      initializing = false;\n      if (ev.data.err) {\n        aborted = true;\n        initWasmCallbacks[1](ev.data.err);\n      } else {\n        initialized = true;\n        initWasmCallbacks[0]();\n      }\n      break;\n    case 'init-ort':\n      if (ev.data.err) {\n        initOrtCallbacks[1](ev.data.err);\n      } else {\n        initOrtCallbacks[0]();\n      }\n      break;\n    case 'create_allocate':\n      if (ev.data.err) {\n        createSessionAllocateCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionAllocateCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'create_finalize':\n      if (ev.data.err) {\n        createSessionFinalizeCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionFinalizeCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'create':\n      if (ev.data.err) {\n        createSessionCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'release':\n      if (ev.data.err) {\n        releaseSessionCallbacks.shift()![1](ev.data.err);\n      } else {\n        releaseSessionCallbacks.shift()![0]();\n      }\n      break;\n    case 'run':\n      if (ev.data.err) {\n        runCallbacks.shift()![1](ev.data.err);\n      } else {\n        runCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'end-profiling':\n      if (ev.data.err) {\n        endProfilingCallbacks.shift()![1](ev.data.err);\n      } else {\n        endProfilingCallbacks.shift()![0]();\n      }\n      break;\n    default:\n  }\n};\n\nconst scriptSrc = typeof document !== 'undefined' ? (document?.currentScript as HTMLScriptElement)?.src : undefined;\n\nexport const initializeWebAssemblyInstance = async(): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    if (initialized) {\n      return;\n    }\n    if (initializing) {\n      throw new Error('multiple calls to \\'initWasm()\\' detected.');\n    }\n    if (aborted) {\n      throw new Error('previous call to \\'initWasm()\\' failed.');\n    }\n\n    initializing = true;\n\n    // overwrite wasm filepaths\n    if (env.wasm.wasmPaths === undefined) {\n      if (scriptSrc && scriptSrc.indexOf('blob:') !== 0) {\n        env.wasm.wasmPaths = scriptSrc.substr(0, +(scriptSrc).lastIndexOf('/') + 1);\n      }\n    }\n\n    return new Promise<void>((resolve, reject) => {\n      proxyWorker?.terminate();\n      // eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports\n      proxyWorker = require('worker-loader?inline=no-fallback!./proxy-worker/main').default() as Worker;\n      proxyWorker.onmessage = onProxyWorkerMessage;\n      initWasmCallbacks = [resolve, reject];\n      const message: OrtWasmMessage = {type: 'init-wasm', in : env.wasm};\n      proxyWorker.postMessage(message);\n    });\n\n  } else {\n    return initializeWebAssembly(env.wasm);\n  }\n};\n\nexport const initializeRuntime = async(env: Env): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      initOrtCallbacks = [resolve, reject];\n      const message: OrtWasmMessage = {type: 'init-ort', in : env};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    await core.initRuntime(env);\n  }\n};\n\nexport const createSessionAllocate = async(model: Uint8Array): Promise<SerializableModeldata> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableModeldata>((resolve, reject) => {\n      createSessionAllocateCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'create_allocate', in : {model}};\n      proxyWorker!.postMessage(message, [model.buffer]);\n    });\n  } else {\n    return core.createSessionAllocate(model);\n  }\n};\n\nexport const createSessionFinalize = async(modeldata: SerializableModeldata, options?: InferenceSession.SessionOptions):\n    Promise<SerializableSessionMetadata> => {\n      if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n        ensureWorker();\n        return new Promise<SerializableSessionMetadata>((resolve, reject) => {\n          createSessionFinalizeCallbacks.push([resolve, reject]);\n          const message: OrtWasmMessage = {type: 'create_finalize', in : {modeldata, options}};\n          proxyWorker!.postMessage(message);\n        });\n      } else {\n        return core.createSessionFinalize(modeldata, options);\n      }\n    };\n\nexport const createSession =\n    async(model: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SerializableSessionMetadata> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableSessionMetadata>((resolve, reject) => {\n      createSessionCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'create', in : {model, options}};\n      proxyWorker!.postMessage(message, [model.buffer]);\n    });\n  } else {\n    return core.createSession(model, options);\n  }\n};\n\nexport const releaseSession = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      releaseSessionCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'release', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.releaseSession(sessionId);\n  }\n};\n\nexport const run = async(\n    sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\n    options: InferenceSession.RunOptions): Promise<SerializableTensor[]> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableTensor[]>((resolve, reject) => {\n      runCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'run', in : {sessionId, inputIndices, inputs, outputIndices, options}};\n      proxyWorker!.postMessage(message, core.extractTransferableBuffers(inputs));\n    });\n  } else {\n    return core.run(sessionId, inputIndices, inputs, outputIndices, options);\n  }\n};\n\nexport const endProfiling = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      endProfilingCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'end-profiling', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.endProfiling(sessionId);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {getInstance} from './wasm-factory';\nimport {allocWasmString, checkLastError, iterateExtraOptions} from './wasm-utils';\n\nexport const setRunOptions = (options: InferenceSession.RunOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let runOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const runOptions: InferenceSession.RunOptions = options || {};\n\n  try {\n    if (options?.logSeverityLevel === undefined) {\n      runOptions.logSeverityLevel = 2;  // Default to warning\n    } else if (\n        typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\n        options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n    }\n\n    if (options?.logVerbosityLevel === undefined) {\n      runOptions.logVerbosityLevel = 0;  // Default to 0\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n    }\n\n    if (options?.terminate === undefined) {\n      runOptions.terminate = false;\n    }\n\n    let tagDataOffset = 0;\n    if (options?.tag !== undefined) {\n      tagDataOffset = allocWasmString(options.tag, allocs);\n    }\n\n    runOptionsHandle = wasm._OrtCreateRunOptions(\n        runOptions.logSeverityLevel!, runOptions.logVerbosityLevel!, !!runOptions.terminate!, tagDataOffset);\n    if (runOptionsHandle === 0) {\n      checkLastError('Can\\'t create run options.');\n    }\n\n    if (options?.extra !== undefined) {\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          checkLastError(`Can't set a run config entry: ${key} - ${value}.`);\n        }\n      });\n    }\n\n    return [runOptionsHandle, allocs];\n  } catch (e) {\n    if (runOptionsHandle !== 0) {\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\n    }\n    allocs.forEach(alloc => wasm._free(alloc));\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {env, InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\nimport {promisify} from 'util';\n\nimport {SerializableModeldata} from './proxy-messages';\nimport {createSession, createSessionAllocate, createSessionFinalize, endProfiling, initializeRuntime, releaseSession, run} from './proxy-wrapper';\n\nlet runtimeInitialized: boolean;\n\nexport class OnnxruntimeWebAssemblySessionHandler implements SessionHandler {\n  private sessionId: number;\n\n  inputNames: string[];\n  outputNames: string[];\n\n  async createSessionAllocate(path: string): Promise<SerializableModeldata> {\n    // fetch model from url and move to wasm heap. The arraybufffer that held the http\n    // response is freed once we return\n    const response = await fetch(path);\n    const arrayBuffer = await response.arrayBuffer();\n    return createSessionAllocate(new Uint8Array(arrayBuffer));\n  }\n\n  async loadModel(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions): Promise<void> {\n    if (!runtimeInitialized) {\n      await initializeRuntime(env);\n      runtimeInitialized = true;\n    }\n\n    if (typeof pathOrBuffer === 'string') {\n      if (typeof process !== 'undefined' && process.versions && process.versions.node) {\n        // node\n        const model = await promisify(readFile)(pathOrBuffer);\n        [this.sessionId, this.inputNames, this.outputNames] = await createSession(model, options);\n      } else {\n        // browser\n        // fetch model and move to wasm heap.\n        const modelData: SerializableModeldata = await this.createSessionAllocate(pathOrBuffer);\n        // create the session\n        [this.sessionId, this.inputNames, this.outputNames] = await createSessionFinalize(modelData, options);\n      }\n    } else {\n      [this.sessionId, this.inputNames, this.outputNames] = await createSession(pathOrBuffer, options);\n    }\n  }\n\n  async dispose(): Promise<void> {\n    return releaseSession(this.sessionId);\n  }\n\n  async run(feeds: SessionHandler.FeedsType, fetches: SessionHandler.FetchesType, options: InferenceSession.RunOptions):\n      Promise<SessionHandler.ReturnType> {\n    const inputArray: Tensor[] = [];\n    const inputIndices: number[] = [];\n    Object.entries(feeds).forEach(kvp => {\n      const name = kvp[0];\n      const tensor = kvp[1];\n      const index = this.inputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid input '${name}'`);\n      }\n      inputArray.push(tensor);\n      inputIndices.push(index);\n    });\n\n    const outputIndices: number[] = [];\n    Object.entries(fetches).forEach(kvp => {\n      const name = kvp[0];\n      // TODO: support pre-allocated output\n      const index = this.outputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid output '${name}'`);\n      }\n      outputIndices.push(index);\n    });\n\n    const outputs =\n        await run(this.sessionId, inputIndices, inputArray.map(t => [t.type, t.dims, t.data]), outputIndices, options);\n\n    const result: SessionHandler.ReturnType = {};\n    for (let i = 0; i < outputs.length; i++) {\n      result[this.outputNames[outputIndices[i]]] = new Tensor(outputs[i][0], outputs[i][2], outputs[i][1]);\n    }\n    return result;\n  }\n\n  startProfiling(): void {\n    // TODO: implement profiling\n  }\n\n  endProfiling(): void {\n    void endProfiling(this.sessionId);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {getInstance} from './wasm-factory';\nimport {allocWasmString, checkLastError, iterateExtraOptions} from './wasm-utils';\n\nconst getGraphOptimzationLevel = (graphOptimizationLevel: string|unknown): number => {\n  switch (graphOptimizationLevel) {\n    case 'disabled':\n      return 0;\n    case 'basic':\n      return 1;\n    case 'extended':\n      return 2;\n    case 'all':\n      return 99;\n    default:\n      throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);\n  }\n};\n\nconst getExecutionMode = (executionMode: 'sequential'|'parallel'): number => {\n  switch (executionMode) {\n    case 'sequential':\n      return 0;\n    case 'parallel':\n      return 1;\n    default:\n      throw new Error(`unsupported execution mode: ${executionMode}`);\n  }\n};\n\nconst appendDefaultOptions = (options: InferenceSession.SessionOptions): void => {\n  if (!options.extra) {\n    options.extra = {};\n  }\n  if (!options.extra.session) {\n    options.extra.session = {};\n  }\n  const session = options.extra.session as Record<string, string>;\n  if (!session.use_ort_model_bytes_directly) {\n    // eslint-disable-next-line camelcase\n    session.use_ort_model_bytes_directly = '1';\n  }\n\n  // if using JSEP with WebGPU, always disable memory pattern\n  if (options.executionProviders &&\n      options.executionProviders.some(ep => (typeof ep === 'string' ? ep : ep.name) === 'webgpu')) {\n    options.enableMemPattern = false;\n  }\n};\n\nconst setExecutionProviders =\n    (sessionOptionsHandle: number, executionProviders: readonly InferenceSession.ExecutionProviderConfig[],\n     allocs: number[]): void => {\n      for (const ep of executionProviders) {\n        let epName = typeof ep === 'string' ? ep : ep.name;\n\n        // check EP name\n        switch (epName) {\n          case 'xnnpack':\n            epName = 'XNNPACK';\n            break;\n          case 'webnn':\n            epName = 'WEBNN';\n            if (typeof ep !== 'string') {\n              const webnnOptions = ep as InferenceSession.WebNNExecutionProviderOption;\n              if (webnnOptions?.deviceType) {\n                const keyDataOffset = allocWasmString('deviceType', allocs);\n                const valueDataOffset = allocWasmString(webnnOptions.deviceType, allocs);\n                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !==\n                    0) {\n                  checkLastError(`Can't set a session config entry: 'deviceType' - ${webnnOptions.deviceType}.`);\n                }\n              }\n              if (webnnOptions?.powerPreference) {\n                const keyDataOffset = allocWasmString('powerPreference', allocs);\n                const valueDataOffset = allocWasmString(webnnOptions.powerPreference, allocs);\n                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !==\n                    0) {\n                  checkLastError(\n                      `Can't set a session config entry: 'powerPreference' - ${webnnOptions.powerPreference}.`);\n                }\n              }\n            }\n            break;\n          case 'webgpu':\n            epName = 'JS';\n            break;\n          case 'wasm':\n          case 'cpu':\n            continue;\n          default:\n            throw new Error(`not supported execution provider: ${epName}`);\n        }\n\n        const epNameDataOffset = allocWasmString(epName, allocs);\n        if (getInstance()._OrtAppendExecutionProvider(sessionOptionsHandle, epNameDataOffset) !== 0) {\n          checkLastError(`Can't append execution provider: ${epName}.`);\n        }\n      }\n    };\n\nexport const setSessionOptions = (options?: InferenceSession.SessionOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let sessionOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const sessionOptions: InferenceSession.SessionOptions = options || {};\n  appendDefaultOptions(sessionOptions);\n\n  try {\n    const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel ?? 'all');\n    const executionMode = getExecutionMode(sessionOptions.executionMode ?? 'sequential');\n    const logIdDataOffset =\n        typeof sessionOptions.logId === 'string' ? allocWasmString(sessionOptions.logId, allocs) : 0;\n\n    const logSeverityLevel = sessionOptions.logSeverityLevel ?? 2;  // Default to 2 - warning\n    if (!Number.isInteger(logSeverityLevel) || logSeverityLevel < 0 || logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${logSeverityLevel}`);\n    }\n\n    const logVerbosityLevel = sessionOptions.logVerbosityLevel ?? 0;  // Default to 0 - verbose\n    if (!Number.isInteger(logVerbosityLevel) || logVerbosityLevel < 0 || logVerbosityLevel > 4) {\n      throw new Error(`log verbosity level is not valid: ${logVerbosityLevel}`);\n    }\n\n    const optimizedModelFilePathOffset = typeof sessionOptions.optimizedModelFilePath === 'string' ?\n        allocWasmString(sessionOptions.optimizedModelFilePath, allocs) :\n        0;\n\n    sessionOptionsHandle = wasm._OrtCreateSessionOptions(\n        graphOptimizationLevel, !!sessionOptions.enableCpuMemArena, !!sessionOptions.enableMemPattern, executionMode,\n        !!sessionOptions.enableProfiling, 0, logIdDataOffset, logSeverityLevel, logVerbosityLevel,\n        optimizedModelFilePathOffset);\n    if (sessionOptionsHandle === 0) {\n      checkLastError('Can\\'t create session options.');\n    }\n\n    if (sessionOptions.executionProviders) {\n      setExecutionProviders(sessionOptionsHandle, sessionOptions.executionProviders, allocs);\n    }\n\n    if (sessionOptions.extra !== undefined) {\n      iterateExtraOptions(sessionOptions.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          checkLastError(`Can't set a session config entry: ${key} - ${value}.`);\n        }\n      });\n    }\n\n    return [sessionOptionsHandle, allocs];\n  } catch (e) {\n    if (sessionOptionsHandle !== 0) {\n      wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n    }\n    allocs.forEach(alloc => wasm._free(alloc));\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from 'onnxruntime-common';\n\n// This file includes common definitions. They do NOT have dependency on the WebAssembly instance.\n\n/**\n * Copied from ONNX definition. Use this to drop dependency 'onnx_proto' to decrease compiled .js file size.\n */\nexport const enum DataType {\n  undefined = 0,\n  float = 1,\n  uint8 = 2,\n  int8 = 3,\n  uint16 = 4,\n  int16 = 5,\n  int32 = 6,\n  int64 = 7,\n  string = 8,\n  bool = 9,\n  float16 = 10,\n  double = 11,\n  uint32 = 12,\n  uint64 = 13,\n  complex64 = 14,\n  complex128 = 15,\n  bfloat16 = 16\n}\n\n/**\n * Map string tensor data to enum value\n */\nexport const tensorDataTypeStringToEnum = (type: string): DataType => {\n  switch (type) {\n    case 'int8':\n      return DataType.int8;\n    case 'uint8':\n      return DataType.uint8;\n    case 'bool':\n      return DataType.bool;\n    case 'int16':\n      return DataType.int16;\n    case 'uint16':\n      return DataType.uint16;\n    case 'int32':\n      return DataType.int32;\n    case 'uint32':\n      return DataType.uint32;\n    case 'float16':\n      return DataType.float16;\n    case 'float32':\n      return DataType.float;\n    case 'float64':\n      return DataType.double;\n    case 'string':\n      return DataType.string;\n    case 'int64':\n      return DataType.int64;\n    case 'uint64':\n      return DataType.uint64;\n\n    default:\n      throw new Error(`unsupported data type: ${type}`);\n  }\n};\n\n/**\n * Map enum value to string tensor data\n */\nexport const tensorDataTypeEnumToString = (typeProto: DataType): Tensor.Type => {\n  switch (typeProto) {\n    case DataType.int8:\n      return 'int8';\n    case DataType.uint8:\n      return 'uint8';\n    case DataType.bool:\n      return 'bool';\n    case DataType.int16:\n      return 'int16';\n    case DataType.uint16:\n      return 'uint16';\n    case DataType.int32:\n      return 'int32';\n    case DataType.uint32:\n      return 'uint32';\n    case DataType.float16:\n      return 'float16';\n    case DataType.float:\n      return 'float32';\n    case DataType.double:\n      return 'float64';\n    case DataType.string:\n      return 'string';\n    case DataType.int64:\n      return 'int64';\n    case DataType.uint64:\n      return 'uint64';\n\n    default:\n      throw new Error(`unsupported data type: ${typeProto}`);\n  }\n};\n\n/**\n * get tensor element size in bytes by the given data type\n * @returns size in integer or undefined if the data type is not supported\n */\nexport const getTensorElementSize = (dateType: number): number|\n    undefined => [undefined, 4, 1, 1, 2, 2, 4, 8, undefined, 1, 2, 8, 4, 8, undefined, undefined, undefined][dateType];\n\n/**\n * get typed array constructor by the given tensor type\n */\nexport const tensorTypeToTypedArrayConstructor = (type: Tensor.Type): Float32ArrayConstructor|Uint8ArrayConstructor|\n    Int8ArrayConstructor|Uint16ArrayConstructor|Int16ArrayConstructor|Int32ArrayConstructor|BigInt64ArrayConstructor|\n    Uint8ArrayConstructor|Float64ArrayConstructor|Uint32ArrayConstructor|BigUint64ArrayConstructor => {\n      switch (type) {\n        case 'float16':\n          return Uint16Array;\n        case 'float32':\n          return Float32Array;\n        case 'uint8':\n          return Uint8Array;\n        case 'int8':\n          return Int8Array;\n        case 'uint16':\n          return Uint16Array;\n        case 'int16':\n          return Int16Array;\n        case 'int32':\n          return Int32Array;\n        case 'bool':\n          return Uint8Array;\n        case 'float64':\n          return Float64Array;\n        case 'uint32':\n          return Uint32Array;\n        case 'int64':\n          return BigInt64Array;\n        case 'uint64':\n          return BigUint64Array;\n        default:\n          throw new Error(`unsupported type: ${type}`);\n      }\n    };\n\n/**\n * Map string log level to integer value\n */\nexport const logLevelStringToEnum = (logLevel?: 'verbose'|'info'|'warning'|'error'|'fatal'): number => {\n  switch (logLevel) {\n    case 'verbose':\n      return 0;\n    case 'info':\n      return 1;\n    case 'warning':\n      return 2;\n    case 'error':\n      return 3;\n    case 'fatal':\n      return 4;\n    default:\n      throw new Error(`unsupported logging level: ${logLevel}`);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env, InferenceSession, Tensor} from 'onnxruntime-common';\n\nimport {SerializableModeldata, SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\nimport {setRunOptions} from './run-options';\nimport {setSessionOptions} from './session-options';\nimport {logLevelStringToEnum, tensorDataTypeEnumToString, tensorDataTypeStringToEnum, tensorTypeToTypedArrayConstructor} from './wasm-common';\nimport {getInstance} from './wasm-factory';\nimport {allocWasmString, checkLastError} from './wasm-utils';\n\n/**\n * get the input/output count of the session.\n * @param sessionHandle the handle representing the session. should be non-zero.\n * @returns a tuple including 2 numbers, representing the input count and output count.\n */\nconst getSessionInputOutputCount = (sessionHandle: number): [number, number] => {\n  const wasm = getInstance();\n  const stack = wasm.stackSave();\n  try {\n    const dataOffset = wasm.stackAlloc(8);\n    const errorCode = wasm._OrtGetInputOutputCount(sessionHandle, dataOffset, dataOffset + 4);\n    if (errorCode !== 0) {\n      checkLastError('Can\\'t get session input/output count.');\n    }\n    return [wasm.HEAP32[dataOffset / 4], wasm.HEAP32[dataOffset / 4 + 1]];\n  } finally {\n    wasm.stackRestore(stack);\n  }\n};\n\n/**\n * initialize ORT environment.\n * @param numThreads SetGlobalIntraOpNumThreads(numThreads)\n * @param loggingLevel CreateEnv(static_cast<OrtLoggingLevel>(logging_level))\n */\nconst initOrt = (numThreads: number, loggingLevel: number): void => {\n  const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);\n  if (errorCode !== 0) {\n    checkLastError('Can\\'t initialize onnxruntime.');\n  }\n};\n\n/**\n * intialize runtime environment.\n * @param env passed in the environment config object.\n */\nexport const initRuntime = async(env: Env): Promise<void> => {\n  // init ORT\n  initOrt(env.wasm.numThreads!, logLevelStringToEnum(env.logLevel));\n\n  if (!BUILD_DEFS.DISABLE_WEBGPU) {\n    // init JSEP if available\n\n    // eslint-disable-next-line @typescript-eslint/no-require-imports, @typescript-eslint/no-var-requires\n    const initJsep = require('./jsep/init').init;\n    await initJsep(getInstance(), env);\n  }\n};\n\n/**\n *  tuple elements are: InferenceSession ID; inputNamesUTF8Encoded; outputNamesUTF8Encoded\n */\ntype SessionMetadata = [number, number[], number[]];\n\nconst activeSessions = new Map<number, SessionMetadata>();\n\n/**\n * allocate the memory and memcpy the model bytes, preparing for creating an instance of InferenceSession.\n * @returns a 2-elements tuple - the pointer and size of the allocated buffer\n */\nexport const createSessionAllocate = (model: Uint8Array): [number, number] => {\n  const wasm = getInstance();\n  const modelDataOffset = wasm._malloc(model.byteLength);\n  if (modelDataOffset === 0) {\n    throw new Error(`Can't create a session. failed to allocate a buffer of size ${model.byteLength}.`);\n  }\n  wasm.HEAPU8.set(model, modelDataOffset);\n  return [modelDataOffset, model.byteLength];\n};\n\n/**\n * create an inference session using the prepared buffer containing the model data.\n * @param modelData a 2-elements tuple containing the pointer and size of the model data buffer.\n * @param options an optional session options object.\n * @returns a 3-elements tuple containing [session handle, input names, output names]\n */\nexport const createSessionFinalize =\n    (modelData: SerializableModeldata, options?: InferenceSession.SessionOptions): SerializableSessionMetadata => {\n      const wasm = getInstance();\n\n      let sessionHandle = 0;\n      let sessionOptionsHandle = 0;\n      let allocs: number[] = [];\n      const inputNamesUTF8Encoded = [];\n      const outputNamesUTF8Encoded = [];\n\n      try {\n        [sessionOptionsHandle, allocs] = setSessionOptions(options);\n\n        sessionHandle = wasm._OrtCreateSession(modelData[0], modelData[1], sessionOptionsHandle);\n        if (sessionHandle === 0) {\n          checkLastError('Can\\'t create a session.');\n        }\n\n        const [inputCount, outputCount] = getSessionInputOutputCount(sessionHandle);\n\n        const inputNames = [];\n        const outputNames = [];\n        for (let i = 0; i < inputCount; i++) {\n          const name = wasm._OrtGetInputName(sessionHandle, i);\n          if (name === 0) {\n            checkLastError('Can\\'t get an input name.');\n          }\n          inputNamesUTF8Encoded.push(name);\n          inputNames.push(wasm.UTF8ToString(name));\n        }\n        for (let i = 0; i < outputCount; i++) {\n          const name = wasm._OrtGetOutputName(sessionHandle, i);\n          if (name === 0) {\n            checkLastError('Can\\'t get an output name.');\n          }\n          outputNamesUTF8Encoded.push(name);\n          outputNames.push(wasm.UTF8ToString(name));\n        }\n\n        activeSessions.set(sessionHandle, [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded]);\n        return [sessionHandle, inputNames, outputNames];\n      } catch (e) {\n        inputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\n        outputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\n\n        if (sessionHandle !== 0) {\n          wasm._OrtReleaseSession(sessionHandle);\n        }\n        throw e;\n      } finally {\n        wasm._free(modelData[0]);\n        if (sessionOptionsHandle !== 0) {\n          wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n        }\n        allocs.forEach(alloc => wasm._free(alloc));\n      }\n    };\n\n\n/**\n * create an instance of InferenceSession.\n * @returns the metadata of InferenceSession. 0-value handle for failure.\n */\nexport const createSession =\n    (model: Uint8Array, options?: InferenceSession.SessionOptions): SerializableSessionMetadata => {\n      const modelData: SerializableModeldata = createSessionAllocate(model);\n      return createSessionFinalize(modelData, options);\n    };\n\nexport const releaseSession = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error(`cannot release session. invalid session id: ${sessionId}`);\n  }\n  const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded] = session;\n\n  inputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\n  outputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\n  wasm._OrtReleaseSession(sessionHandle);\n  activeSessions.delete(sessionId);\n};\n\n/**\n * perform inference run\n */\nexport const run = async(\n    sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\n    options: InferenceSession.RunOptions): Promise<SerializableTensor[]> => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error(`cannot run inference. invalid session id: ${sessionId}`);\n  }\n  const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded] = session;\n\n  const inputCount = inputIndices.length;\n  const outputCount = outputIndices.length;\n\n  let runOptionsHandle = 0;\n  let runOptionsAllocs: number[] = [];\n\n  const inputValues: number[] = [];\n  const inputAllocs: number[] = [];\n\n  try {\n    [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);\n\n    // create input tensors\n    for (let i = 0; i < inputCount; i++) {\n      const dataType = inputs[i][0];\n      const dims = inputs[i][1];\n      const data = inputs[i][2];\n\n      let dataOffset: number;\n      let dataByteLength: number;\n\n      if (Array.isArray(data)) {\n        // string tensor\n        dataByteLength = 4 * data.length;\n        dataOffset = wasm._malloc(dataByteLength);\n        inputAllocs.push(dataOffset);\n        let dataIndex = dataOffset / 4;\n        for (let i = 0; i < data.length; i++) {\n          if (typeof data[i] !== 'string') {\n            throw new TypeError(`tensor data at index ${i} is not a string`);\n          }\n          wasm.HEAPU32[dataIndex++] = allocWasmString(data[i], inputAllocs);\n        }\n      } else {\n        dataByteLength = data.byteLength;\n        dataOffset = wasm._malloc(dataByteLength);\n        inputAllocs.push(dataOffset);\n        wasm.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), dataOffset);\n      }\n\n      const stack = wasm.stackSave();\n      const dimsOffset = wasm.stackAlloc(4 * dims.length);\n      try {\n        let dimIndex = dimsOffset / 4;\n        dims.forEach(d => wasm.HEAP32[dimIndex++] = d);\n        const tensor = wasm._OrtCreateTensor(\n            tensorDataTypeStringToEnum(dataType), dataOffset, dataByteLength, dimsOffset, dims.length);\n        if (tensor === 0) {\n          checkLastError(`Can't create tensor for input[${i}].`);\n        }\n        inputValues.push(tensor);\n      } finally {\n        wasm.stackRestore(stack);\n      }\n    }\n\n    const beforeRunStack = wasm.stackSave();\n    const inputValuesOffset = wasm.stackAlloc(inputCount * 4);\n    const inputNamesOffset = wasm.stackAlloc(inputCount * 4);\n    const outputValuesOffset = wasm.stackAlloc(outputCount * 4);\n    const outputNamesOffset = wasm.stackAlloc(outputCount * 4);\n\n    try {\n      let inputValuesIndex = inputValuesOffset / 4;\n      let inputNamesIndex = inputNamesOffset / 4;\n      let outputValuesIndex = outputValuesOffset / 4;\n      let outputNamesIndex = outputNamesOffset / 4;\n      for (let i = 0; i < inputCount; i++) {\n        wasm.HEAPU32[inputValuesIndex++] = inputValues[i];\n        wasm.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];\n      }\n      for (let i = 0; i < outputCount; i++) {\n        wasm.HEAPU32[outputValuesIndex++] = 0;\n        wasm.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];\n      }\n\n      // support RunOptions\n      let errorCode = wasm._OrtRun(\n          sessionHandle, inputNamesOffset, inputValuesOffset, inputCount, outputNamesOffset, outputCount,\n          outputValuesOffset, runOptionsHandle);\n\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const runPromise = wasm.jsepRunPromise;\n      if (runPromise && typeof runPromise.then !== 'undefined') {\n        errorCode = await runPromise;\n      }\n\n      const output: SerializableTensor[] = [];\n\n      if (errorCode !== 0) {\n        checkLastError('failed to call OrtRun().');\n      }\n\n      for (let i = 0; i < outputCount; i++) {\n        const tensor = wasm.HEAPU32[outputValuesOffset / 4 + i];\n\n        const beforeGetTensorDataStack = wasm.stackSave();\n        // stack allocate 4 pointer value\n        const tensorDataOffset = wasm.stackAlloc(4 * 4);\n\n        let type: Tensor.Type|undefined, dataOffset = 0;\n        try {\n          errorCode = wasm._OrtGetTensorData(\n              tensor, tensorDataOffset, tensorDataOffset + 4, tensorDataOffset + 8, tensorDataOffset + 12);\n          if (errorCode !== 0) {\n            checkLastError(`Can't access output tensor data on index ${i}.`);\n          }\n          let tensorDataIndex = tensorDataOffset / 4;\n          const dataType = wasm.HEAPU32[tensorDataIndex++];\n          dataOffset = wasm.HEAPU32[tensorDataIndex++];\n          const dimsOffset = wasm.HEAPU32[tensorDataIndex++];\n          const dimsLength = wasm.HEAPU32[tensorDataIndex++];\n          const dims = [];\n          for (let i = 0; i < dimsLength; i++) {\n            dims.push(wasm.HEAPU32[dimsOffset / 4 + i]);\n          }\n          wasm._OrtFree(dimsOffset);\n\n          const size = dims.length === 0 ? 1 : dims.reduce((a, b) => a * b);\n          type = tensorDataTypeEnumToString(dataType);\n          if (type === 'string') {\n            const stringData: string[] = [];\n            let dataIndex = dataOffset / 4;\n            for (let i = 0; i < size; i++) {\n              const offset = wasm.HEAPU32[dataIndex++];\n              const maxBytesToRead = i === size - 1 ? undefined : wasm.HEAPU32[dataIndex] - offset;\n              stringData.push(wasm.UTF8ToString(offset, maxBytesToRead));\n            }\n            output.push([type, dims, stringData]);\n          } else {\n            const typedArrayConstructor = tensorTypeToTypedArrayConstructor(type);\n            const data = new typedArrayConstructor(size);\n            new Uint8Array(data.buffer, data.byteOffset, data.byteLength)\n                .set(wasm.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));\n            output.push([type, dims, data]);\n          }\n        } finally {\n          wasm.stackRestore(beforeGetTensorDataStack);\n          if (type === 'string' && dataOffset) {\n            wasm._free(dataOffset);\n          }\n          wasm._OrtReleaseTensor(tensor);\n        }\n      }\n\n      return output;\n    } finally {\n      wasm.stackRestore(beforeRunStack);\n    }\n  } finally {\n    inputValues.forEach(v => wasm._OrtReleaseTensor(v));\n    inputAllocs.forEach(p => wasm._free(p));\n\n    if (runOptionsHandle !== 0) {\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\n    }\n    runOptionsAllocs.forEach(p => wasm._free(p));\n  }\n};\n\n/**\n * end profiling\n */\nexport const endProfiling = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error('invalid session id');\n  }\n  const sessionHandle = session[0];\n\n  // profile file name is not used yet, but it must be freed.\n  const profileFileName = wasm._OrtEndProfiling(sessionHandle);\n  if (profileFileName === 0) {\n    checkLastError('Can\\'t get an profile file name.');\n  }\n  wasm._OrtFree(profileFileName);\n};\n\nexport const extractTransferableBuffers = (tensors: readonly SerializableTensor[]): ArrayBufferLike[] => {\n  const buffers: ArrayBufferLike[] = [];\n  for (const tensor of tensors) {\n    const data = tensor[2];\n    if (!Array.isArray(data) && data.buffer) {\n      buffers.push(data.buffer);\n    }\n  }\n  return buffers;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\nimport * as path from 'path';\n\nimport {OrtWasmModule} from './binding/ort-wasm';\nimport {OrtWasmThreadedModule} from './binding/ort-wasm-threaded';\n\n/* eslint-disable @typescript-eslint/no-require-imports */\nconst ortWasmFactory: EmscriptenModuleFactory<OrtWasmModule> =\n    BUILD_DEFS.DISABLE_WEBGPU ? require('./binding/ort-wasm.js') : require('./binding/ort-wasm-simd.jsep.js');\n\nconst ortWasmFactoryThreaded: EmscriptenModuleFactory<OrtWasmModule> = !BUILD_DEFS.DISABLE_WASM_THREAD ?\n    (BUILD_DEFS.DISABLE_WEBGPU ? require('./binding/ort-wasm-threaded.js') :\n                                 require('./binding/ort-wasm-simd-threaded.jsep.js')) :\n    ortWasmFactory;\n/* eslint-enable @typescript-eslint/no-require-imports */\n\nlet wasm: OrtWasmModule|undefined;\nlet initialized = false;\nlet initializing = false;\nlet aborted = false;\n\nconst isMultiThreadSupported = (): boolean => {\n  try {\n    // If 'SharedArrayBuffer' is not available, WebAssembly threads will not work.\n    if (typeof SharedArrayBuffer === 'undefined') {\n      return false;\n    }\n\n    // Test for transferability of SABs (for browsers. needed for Firefox)\n    // https://groups.google.com/forum/#!msg/mozilla.dev.platform/IHkBZlHETpA/dwsMNchWEQAJ\n    if (typeof MessageChannel !== 'undefined') {\n      new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));\n    }\n\n    // Test for WebAssembly threads capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing threaded instructions.\n    return WebAssembly.validate(new Uint8Array([\n      0, 97, 115, 109, 1, 0,  0,  0, 1, 4, 1,  96, 0,   0,  3, 2, 1,  0, 5,\n      4, 1,  3,   1,   1, 10, 11, 1, 9, 0, 65, 0,  254, 16, 2, 0, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst isSimdSupported = (): boolean => {\n  try {\n    // Test for WebAssembly SIMD capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing SIMD instructions.\n\n    // The binary data is generated from the following code by wat2wasm:\n    //\n    // (module\n    //   (type $t0 (func))\n    //   (func $f0 (type $t0)\n    //     (drop\n    //       (i32x4.dot_i16x8_s\n    //         (i8x16.splat\n    //           (i32.const 0))\n    //         (v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000)))))\n\n    return WebAssembly.validate(new Uint8Array([\n      0,   97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 30, 1,   28,  0, 65, 0,\n      253, 15, 253, 12,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  253, 186, 1, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst getWasmFileName = (useSimd: boolean, useThreads: boolean) => {\n  if (useThreads) {\n    return useSimd ? 'ort-wasm-simd-threaded.wasm' : 'ort-wasm-threaded.wasm';\n  } else {\n    return useSimd ? 'ort-wasm-simd.wasm' : 'ort-wasm.wasm';\n  }\n};\n\nexport const initializeWebAssembly = async(flags: Env.WebAssemblyFlags): Promise<void> => {\n  if (initialized) {\n    return Promise.resolve();\n  }\n  if (initializing) {\n    throw new Error('multiple calls to \\'initializeWebAssembly()\\' detected.');\n  }\n  if (aborted) {\n    throw new Error('previous call to \\'initializeWebAssembly()\\' failed.');\n  }\n\n  initializing = true;\n\n  // wasm flags are already initialized\n  const timeout = flags.initTimeout!;\n  const numThreads = flags.numThreads!;\n  const simd = flags.simd!;\n\n  const useThreads = numThreads > 1 && isMultiThreadSupported();\n  const useSimd = simd && isSimdSupported();\n\n  const wasmPaths = flags.wasmPaths;\n  const wasmPrefixOverride = typeof wasmPaths === 'string' ? wasmPaths : undefined;\n  const wasmFileName = getWasmFileName(useSimd, useThreads);\n  const wasmPathOverride = typeof wasmPaths === 'object' ? wasmPaths[wasmFileName] : undefined;\n\n  let isTimeout = false;\n\n  const tasks: Array<Promise<void>> = [];\n\n  // promise for timeout\n  if (timeout > 0) {\n    tasks.push(new Promise((resolve) => {\n      setTimeout(() => {\n        isTimeout = true;\n        resolve();\n      }, timeout);\n    }));\n  }\n\n  // promise for module initialization\n  tasks.push(new Promise((resolve, reject) => {\n    const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;\n    const config: Partial<OrtWasmModule> = {\n      locateFile: (fileName: string, scriptDirectory: string) => {\n        if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads && fileName.endsWith('.worker.js') &&\n            typeof Blob !== 'undefined') {\n          return URL.createObjectURL(new Blob(\n              [\n                // This require() function is handled by webpack to load file content of the corresponding .worker.js\n                // eslint-disable-next-line @typescript-eslint/no-require-imports\n                require('./binding/ort-wasm-threaded.worker.js')\n              ],\n              {type: 'text/javascript'}));\n        }\n\n        if (fileName.endsWith('.wasm')) {\n          if (wasmPathOverride) {\n            return wasmPathOverride;\n          }\n\n          const prefix = wasmPrefixOverride ?? scriptDirectory;\n\n          if (!BUILD_DEFS.DISABLE_WEBGPU) {\n            if (wasmFileName === 'ort-wasm-simd.wasm') {\n              return prefix + 'ort-wasm-simd.jsep.wasm';\n            } else if (wasmFileName === 'ort-wasm-simd-threaded.wasm') {\n              return prefix + 'ort-wasm-simd-threaded.jsep.wasm';\n            }\n          }\n\n          return prefix + wasmFileName;\n        }\n\n        return scriptDirectory + fileName;\n      }\n    };\n\n    if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads) {\n      if (typeof Blob === 'undefined') {\n        config.mainScriptUrlOrBlob = path.join(__dirname, 'ort-wasm-threaded.js');\n      } else {\n        const scriptSourceCode = `var ortWasmThreaded=(function(){var _scriptDir;return ${factory.toString()}})();`;\n        config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], {type: 'text/javascript'});\n      }\n    }\n\n    factory(config).then(\n        // wasm module initialized successfully\n        module => {\n          initializing = false;\n          initialized = true;\n          wasm = module;\n          resolve();\n        },\n        // wasm module failed to initialize\n        (what) => {\n          initializing = false;\n          aborted = true;\n          reject(what);\n        });\n  }));\n\n  await Promise.race(tasks);\n\n  if (isTimeout) {\n    throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);\n  }\n};\n\nexport const getInstance = (): OrtWasmModule => {\n  if (initialized && wasm) {\n    return wasm;\n  }\n\n  throw new Error('WebAssembly is not initialized yet.');\n};\n\nexport const dispose = (): void => {\n  if (initialized && !initializing && !aborted) {\n    initializing = true;\n\n    (wasm as OrtWasmThreadedModule).PThread?.terminateAllThreads();\n    wasm = undefined;\n\n    initializing = false;\n    initialized = false;\n    aborted = true;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getInstance} from './wasm-factory';\n\nexport const allocWasmString = (data: string, allocs: number[]): number => {\n  const wasm = getInstance();\n\n  const dataLength = wasm.lengthBytesUTF8(data) + 1;\n  const dataOffset = wasm._malloc(dataLength);\n  wasm.stringToUTF8(data, dataOffset, dataLength);\n  allocs.push(dataOffset);\n\n  return dataOffset;\n};\n\ninterface ExtraOptionsHandler {\n  (name: string, value: string): void;\n}\n\nexport const iterateExtraOptions =\n    (options: Record<string, unknown>, prefix: string, seen: WeakSet<Record<string, unknown>>,\n     handler: ExtraOptionsHandler): void => {\n      if (typeof options == 'object' && options !== null) {\n        if (seen.has(options)) {\n          throw new Error('Circular reference in options');\n        } else {\n          seen.add(options);\n        }\n      }\n\n      Object.entries(options).forEach(([key, value]) => {\n        const name = (prefix) ? prefix + key : key;\n        if (typeof value === 'object') {\n          iterateExtraOptions(value as Record<string, unknown>, name + '.', seen, handler);\n        } else if (typeof value === 'string' || typeof value === 'number') {\n          handler(name, value.toString());\n        } else if (typeof value === 'boolean') {\n          handler(name, (value) ? '1' : '0');\n        } else {\n          throw new Error(`Can't handle extra config type: ${typeof value}`);\n        }\n      });\n    };\n\n/**\n * check web assembly API's last error and throw error if any error occurred.\n * @param message a message used when an error occurred.\n */\nexport const checkLastError = (message: string): void => {\n  const wasm = getInstance();\n\n  const stack = wasm.stackSave();\n  try {\n    const paramsOffset = wasm.stackAlloc(8);\n    wasm._OrtGetLastError(paramsOffset, paramsOffset + 4);\n    const errorCode = wasm.HEAP32[paramsOffset / 4];\n    const errorMessagePointer = wasm.HEAPU32[paramsOffset / 4 + 1];\n    const errorMessage = errorMessagePointer ? wasm.UTF8ToString(errorMessagePointer) : '';\n    throw new Error(`${message} ERROR_CODE: ${errorCode}, ERROR_MESSAGE: ${errorMessage}`);\n  } finally {\n    wasm.stackRestore(stack);\n  }\n};\n","\nimport worker from \"!!../../../../node_modules/worker-loader/dist/runtime/inline.js\";\n\nexport default function Worker_fn() {\n  return worker(\"/*!\\n* ONNX Runtime Web v1.16.0\\n* Copyright (c) Microsoft Corporation. All rights reserved.\\n* Licensed under the MIT License.\\n*/\\n(()=>{var e={838:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.WebGpuBackend=void 0;const r=n(955),a=n(771),i=n(510),o=n(305);t.WebGpuBackend=class{constructor(){this.currentKernelId=null,this.commandEncoder=null,this.computePassEncoder=null,this.pendingDispatchNumber=0,this.profilingEnabled=!1}get currentKernelCustomData(){if(null===this.currentKernelId)throw new Error(\\\"currentKernelCustomData(): currentKernelId is null. (should not happen)\\\");let e=this.kernelCustomData.get(this.currentKernelId);return e||(e={},this.kernelCustomData.set(this.currentKernelId,e)),e}async initialize(e){if(!navigator.gpu)throw new Error(\\\"WebGpuBackend: WebGPU is not available.\\\");const t=await navigator.gpu.requestAdapter();if(!t)throw new Error(\\\"WebGpuBackend: Failed to get GPU adapter.\\\");const n={requiredLimits:{maxComputeWorkgroupStorageSize:t.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:t.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:t.limits.maxStorageBufferBindingSize}};t.features.has(\\\"timestamp-query-inside-passes\\\")&&\\\"default\\\"===e.webgpu.profilingMode&&(this.profilingEnabled=!0,n.requiredFeatures=[\\\"timestamp-query-inside-passes\\\"]),this.device=await t.requestDevice(n),this.gpuDataManager=(0,a.createGpuDataManager)(this),this.programManager=new o.ProgramManager(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,(0,r.configureLogger)(e.logLevel,!!e.debug),this.device.onuncapturederror=e=>{e.error instanceof GPUValidationError&&console.error(`An uncaught WebGPU validation error was raised: ${e.error.message}`)},this.profilingEnabled&&(this.profilingQuerySet=this.device.createQuerySet({type:\\\"timestamp\\\",count:2}))}dispose(){}getCommandEncoder(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder()),this.commandEncoder}getComputePassEncoder(){return this.computePassEncoder||(this.computePassEncoder=this.getCommandEncoder().beginComputePass()),this.computePassEncoder}endComputePass(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}flush(){this.endComputePass(),this.device.queue.submit([this.getCommandEncoder().finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0}run(e,t,n,a,i){if(t.length!==e.inputTypes.length)throw new Error(`Input size must be equal to ${e.inputTypes.length}.`);const o=[];for(let e=0;e<t.length;++e){const n=this.gpuDataManager.get(t[e].data);if(!n)throw new Error(`no GPU data for input: ${t[e].data}`);o[e]=n}const s=((e,t,n)=>{const r=t.map((e=>`${e.join(\\\",\\\")}`)).join(\\\"_\\\"),a=n.join(\\\"_\\\");let i=e.name;return e.cacheHint&&(i+=\\\"[\\\"+e.cacheHint+\\\"]\\\"),i+=\\\":\\\"+r+\\\";\\\"+a,i})(e,t.map((e=>e.dims)),o.map((e=>e.type)));let u=this.programManager.getArtifact(s);const l=u?u.programInfo:\\\"function\\\"==typeof e.get?e.get():e,c=0===n.length?l.outputs.map(((e,t)=>t)):n;if(c.length!==l.outputs.length)throw new Error(`Output size ${c.length} must be equal to ${l.outputs.length}.`);const p=[],d=[];for(let e=0;e<l.outputs.length;++e){if(!Number.isInteger(c[e])||c[e]<-2||c[e]>=l.outputs.length)throw new Error(`Invalid output index: ${c[e]}`);const t=-1===c[e],n=-2===c[e],r=t||n?i(l.outputs[e].dataType,l.outputs[e].dims):a(c[e],l.outputs[e].dataType,l.outputs[e].dims),o=this.gpuDataManager.get(r.data);if(!o)throw new Error(`no GPU data for output: ${r.data}`);if(t&&this.temporaryData.push(o),n){let e=this.kernelPersistentData.get(this.currentKernelId);e||(e=[],this.kernelPersistentData.set(this.currentKernelId,e)),e.push(o)}p.push(r),d.push(o)}const f=this.programManager.normalizeDispatchGroupSize(l.dispatchGroup(t));return u||(u=this.programManager.build(l,f),this.programManager.setArtifact(s,u)),(0,r.LOG_DEBUG)(\\\"info\\\",(()=>`[ProgramManager] run \\\"${l.name}\\\" (key=${s}) with ${f[0]}x${f[1]}x${f[2]}`)),this.programManager.run(u,o,d,f),p}upload(e,t){this.gpuDataManager.upload(e,t)}memcpy(e,t){this.gpuDataManager.memcpy(e,t)}async download(e,t){const n=await this.gpuDataManager.download(e),r=t();r.set(new Uint8Array(n,0,r.byteLength))}alloc(e){return this.gpuDataManager.create(e).id}free(e){return this.gpuDataManager.release(e)}createKernel(e,t,n){const r=i.WEBGPU_OP_RESOLVE_RULES.get(e);if(!r)throw new Error(`kernel not implemented: ${e}`);this.kernels.set(t,[e,r[0],[r[1],n]])}releaseKernel(e){const t=this.kernelPersistentData.get(e);if(t){for(const e of t)this.gpuDataManager.release(e.id);this.kernelPersistentData.delete(e)}this.kernelCustomData.delete(e),this.kernels.delete(e)}computeKernel(e,t){const n=this.kernels.get(e);if(!n)throw new Error(`kernel not created: ${e}`);const[a,i,o]=n;if(null!==this.currentKernelId)throw new Error(`kernel \\\"${a}\\\" is not allowed to be called recursively`);this.currentKernelId=e,o[0]&&(o[1]=o[0](o[1]),o[0]=void 0),(0,r.LOG_DEBUG)(\\\"info\\\",(()=>`[WebGPU] Start to run kernel \\\"${a}\\\"...`)),this.temporaryData=[];try{return i(t,o[1]),0}catch(e){return(0,r.LOG_DEBUG)(\\\"warning\\\",`[WebGPU] Kernel \\\"${a}\\\" failed. Error: ${e}`),1}finally{for(const e of this.temporaryData)this.gpuDataManager.release(e.id);this.temporaryData=[],this.currentKernelId=null}}}},675:(e,t,n)=>{\\\"use strict\\\";t.S=void 0;const r=n(917),a=n(838),i=n(955),o=n(952);class s{constructor(e,t,n,r){this.module=e,this.dataType=t,this.data=n,this.dims=r}getFloat32Array(){if(1!==this.dataType)throw new Error(\\\"Invalid data type\\\");const e=o.ShapeUtil.size(this.dims);return 0===e?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,e)}getBigInt64Array(){if(7!==this.dataType)throw new Error(\\\"Invalid data type\\\");const e=o.ShapeUtil.size(this.dims);return 0===e?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,e)}getInt32Array(){if(6!==this.dataType)throw new Error(\\\"Invalid data type\\\");const e=o.ShapeUtil.size(this.dims);return 0===e?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,e)}reshape(e){if(o.ShapeUtil.size(e)!==o.ShapeUtil.size(this.dims))throw new Error(\\\"Invalid new shape\\\");return new s(this.module,this.dataType,this.data,e)}}class u{get kernelCustomData(){return this.backend.currentKernelCustomData}get customDataBuffer(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)}constructor(e,t,n){this.module=e,this.backend=t,this.customDataOffset=0,this.customDataSize=0;const r=e.HEAPU32;let a=n>>2;this.opKernelContext=r[a++];const i=r[a++];this.customDataOffset=r[a++],this.customDataSize=r[a++];const o=[];for(let t=0;t<i;t++){const t=r[a++],n=r[a++],i=r[a++],u=[];for(let e=0;e<i;e++)u.push(r[a++]);o.push(new s(e,t,n,u))}this.inputs=o}compute(e,t){var n,a,i;const u=null!==(a=null===(n=null==t?void 0:t.inputs)||void 0===n?void 0:n.map((e=>\\\"number\\\"==typeof e?this.inputs[e]:e)))&&void 0!==a?a:this.inputs,l=null!==(i=null==t?void 0:t.outputs)&&void 0!==i?i:[];return this.backend.run(e,u,l,((e,t,n)=>new s(this.module,t,this.output(e,n),n)),((e,t)=>{const n=(0,r.getTensorElementSize)(e);if(!n)throw new Error(`Unsupported data type: ${e}`);const a=n*o.ShapeUtil.size(t);return new s(this.module,e,this.backend.gpuDataManager.create(a).id,t)}))}output(e,t){const n=this.module.stackSave();try{const n=this.module.stackAlloc(4*(1+t.length));let r=n>>2;this.module.HEAPU32[r++]=t.length;for(let e=0;e<t.length;e++)this.module.HEAPU32[r++]=t[e];return this.module._JsepOutput(this.opKernelContext,e,n)}finally{this.module.stackRestore(n)}}}t.S=async(e,t)=>{const n=e.jsepInit;if(n&&navigator.gpu){if(!t.wasm.simd)throw new Error(\\\"Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using WebGPU EP\\\");const r=new a.WebGpuBackend;await r.initialize(t),n({backend:r},(e=>r.alloc(e)),(e=>r.free(e)),((t,n,a,o=!1)=>{if(o)(0,i.LOG_DEBUG)(\\\"verbose\\\",(()=>`[WebGPU] jsepCopyGpuToGpu: src=${t}, dst=${n}, size=${a}`)),r.memcpy(t,n);else{(0,i.LOG_DEBUG)(\\\"verbose\\\",(()=>`[WebGPU] jsepCopyCpuToGpu: dataOffset=${t}, gpuDataId=${n}, size=${a}`));const o=e.HEAPU8.subarray(t,t+a);r.upload(n,o)}}),(async(t,n,a)=>{(0,i.LOG_DEBUG)(\\\"verbose\\\",(()=>`[WebGPU] jsepCopyGpuToCpu: gpuDataId=${t}, dataOffset=${n}, size=${a}`)),await r.download(t,(()=>e.HEAPU8.subarray(n,n+a)))}),((e,t,n)=>r.createKernel(e,t,n)),(e=>r.releaseKernel(e)),((t,n)=>{(0,i.LOG_DEBUG)(\\\"verbose\\\",(()=>`[WebGPU] jsepRun: kernel=${t}, contextDataOffset=${n}`));const a=new u(e,r,n);return r.computeKernel(t,a)}))}}},955:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.LOG_DEBUG=t.LOG=t.configureLogger=void 0;const r=n(917),a=[\\\"V\\\",\\\"I\\\",\\\"W\\\",\\\"E\\\",\\\"F\\\"];let i,o;t.configureLogger=(e,t)=>{i=e,o=t},t.LOG=(e,t)=>{const n=(0,r.logLevelStringToEnum)(e);var o,s;n>=(0,r.logLevelStringToEnum)(i)&&(o=n,s=\\\"function\\\"==typeof t?t():t,console.log(`[${a[o]},${(new Date).toISOString()}]${s}`))},t.LOG_DEBUG=(...e)=>{o&&(0,t.LOG)(...e)}},952:(e,t)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.MAX_CLIP=t.MIN_CLIP=t.GemmUtil=t.PoolConvUtil=t.ShapeUtil=t.BroadcastUtil=t.MatMulUtil=void 0;class n{static calcMatMulShape(e,t){return e[1]!==t[0]?void 0:[e[0],t[1]]}}t.MatMulUtil=n;class r{static calcShape(e,t,r=!1){const a=e.length,i=t.length;if(0===a)return t;if(0===i)return e;const o=Math.max(e.length,t.length),s=new Array(o);if(r){if(a<2||i<2)return;const r=n.calcMatMulShape([e[a-2],e[a-1]],[t[i-2],t[i-1]]);if(void 0===r)return;[s[o-2],s[o-1]]=r}for(let n=r?3:1;n<=o;n++){const r=a-n<0?1:e[a-n],u=i-n<0?1:t[i-n];if(r!==u&&r>1&&u>1)return;s[o-n]=Math.max(r,u)}return s}static isValidBroadcast(e,t){const n=e.length,r=t.length;if(n>r)return!1;for(let a=1;a<=n;a++)if(1!==e[n-a]&&e[n-a]!==t[r-a])return!1;return!0}}t.BroadcastUtil=r;class a{static size(e){return a.getSizeFromDimensionRange(e,0,e.length)}static sizeFromDimension(e,t){if(t<0||t>e.length)throw new Error(`invalid dimension of ${t} for sizeFromDimension as Tensor has ${e.length} dimensions.`);return a.getSizeFromDimensionRange(e,t,e.length)}static sizeToDimension(e,t){if(t<0||t>e.length)throw new Error(`invalid dimension of ${t} for sizeToDimension as Tensor has ${e.length} dimensions.`);return a.getSizeFromDimensionRange(e,0,t)}static getSizeFromDimensionRange(e,t,n){let r=1;for(let a=t;a<n;a++){if(e[a]<0)throw new Error(\\\"cannot get valid size from specified dimension range. Most likely the range contains negative values in them.\\\");r*=e[a]}return r}static computeStrides(e){const t=e.length;if(0===t)return[];if(1===t)return[1];const n=new Array(t);n[t-1]=1,n[t-2]=e[t-1];for(let r=t-3;r>=0;--r)n[r]=n[r+1]*e[r+1];return n}static normalizeAxis(e,t){if(e<-t&&e>=t)throw new Error(\\\"unsupported axis for this operation.\\\");return e<0?e+t:e}static normalizeAxes(e,t){return e.map((n=>this.normalizeAxis(n,null!=t?t:e.length)))}static sortBasedOnPerm(e,t){return t?t.map((t=>e[t])):e.slice().reverse()}static padShape(e,t){const n=e.length;return e.map(((e,r)=>e+t[r]+t[r+n]))}static areEqual(e,t){return e.length===t.length&&e.every(((e,n)=>e===t[n]))}}t.ShapeUtil=a;class i{static adjustPoolAttributes(e,t,n,r,a,i){if(!e&&n.length!==t.length-2)throw new Error(\\\"length of specified kernel shapes should be 2 less than length of input dimensions\\\");if(e)for(let e=0;e<t.length-2;e++)e>=n.length?n.push(t[e+2]):n[e]=t[e+2];for(let e=0;e<n.length;e++)if(e<r.length){if(r[e]<0)throw new Error(\\\"strides should be greater than or equal to 1\\\")}else r.push(1);for(let e=0;e<n.length;e++)if(e<a.length){if(a[e]<0)throw new Error(\\\"dilations should be greater than or equal to 1\\\")}else a.push(1);for(let e=0;e<2*n.length;e++)if(e<i.length){if(i[e]<0)throw new Error(\\\"pad should be greater than or equal to 1\\\")}else i.push(0);for(let e=0;e<n.length;e++){if(n[e]<=0)throw new Error(\\\"kernel shapes need to be greater than 0\\\");if(i[e]>=n[e]||i[e+n.length]>=n[e])throw new Error(\\\"pads should be smaller than kernel\\\")}}static adjustPadsBasedOnAutoPad(e,t,n,r,a,o,s){if(s){if(a.length!==2*(e.length-2))throw new Error(\\\"length of pads should be twice the length of data dimensions\\\");if(t.length!==e.length-2)throw new Error(\\\"length of strides should be the length of data dimensions\\\");if(r.length!==e.length-2)throw new Error(\\\"length of kernel shapes should be the length of data dimensions\\\");for(let u=0;u<e.length-2;u++)i.adjustPadAndReturnShape(e[u+(o?1:2)],t[u],n[u],r[u],a,u,u+e.length-2,s)}}static computePoolOutputShape(e,t,n,r,a,o,s){if(t.length<=0)throw new Error(\\\"input shape must be of size greater than 0\\\");const u=[t[0],t[1]];return i.computeShapeHelper(e,t,u,n,r,a,o,s),u}static computeConvOutputShape(e,t,n,r,a,o,s){if(e.length<=0||t.length<=0)throw new Error(\\\"invalid input tensor dims or invalid filter tensor dims\\\");const u=[e[0],t[0]];return i.computeShapeHelper(!1,e,u,n,r,a,o,s),u}static computeShapeHelper(e,t,n,r,a,o,s,u){if(e)for(let e=0;e<t.length-2;e++)n.push(1);else for(let e=0;e<t.length-2;e++)n.push(i.adjustPadAndReturnShape(t[e+2],r[e],a[e],o[e],s,e,e+t.length-2,u))}static adjustPadAndReturnShape(e,t,n,r,a,i,o,s){const u=n*(r-1)+1;if(!s||\\\"NOTSET\\\"===s)return Math.floor((e+a[i]+a[o]-u)/t+1);switch(s){case\\\"VALID\\\":return a[i]=0,a[o]=0,Math.floor((e-u)/t+1);case\\\"SAME_LOWER\\\":case\\\"SAME_UPPER\\\":if(1!==n)throw new Error(\\\"Dilation not supported for SAME_UPPER or SAME_LOWER\\\");{const n=((e+t-1)/t-1)*t+r-e;return a[i]=\\\"SAME_LOWER\\\"===s?Math.floor((n+1)/2):Math.floor(n/2),a[o]=n-a[i],Math.floor((e+n-r)/t+1)}default:throw new Error(\\\"Unsupported AutoPad type\\\")}}}t.PoolConvUtil=i,t.GemmUtil=class{static getShapeOfGemmResult(e,t,n,a,i){if(2!==e.length||2!==n.length)throw new Error(\\\"shape need to be of size 2\\\");let o,s,u;t?(o=e[1],s=e[0]):(o=e[0],s=e[1]);let l=-1;if(a?(u=n[0],l=1):(u=n[1],l=0),n[l]!==s)throw new Error(\\\"dimension mismatch\\\");if(o<=0||u<=0||s<=0)throw new Error(\\\"invalid shape specified\\\");if(i&&!r.isValidBroadcast(i,[o,u]))throw new Error(\\\"gemm: invalid bias shape for broadcast\\\");return[o,u,s]}},t.MIN_CLIP=-34028234663852886e22,t.MAX_CLIP=34028234663852886e22},387:(e,t)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.createAttributeWithCacheKey=void 0;class n{constructor(e){Object.assign(this,e)}get cacheKey(){return this._cacheKey||(this._cacheKey=Object.getOwnPropertyNames(this).sort().map((e=>`${this[e]}`)).join(\\\";\\\")),this._cacheKey}}t.createAttributeWithCacheKey=e=>new n(e)},771:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.createGpuDataManager=void 0;const r=n(955),a=n(163),i=e=>16*Math.ceil(e/16);let o=0;class s{constructor(e){this.backend=e,this.storageCache=new Map,this.downloadCache=new Map,this.freeBuffers=new Map,this.buffersForUploadingPending=[],this.buffersPending=[]}upload(e,t){const n=t.buffer,a=t.byteOffset,o=t.byteLength,s=i(o),u=this.storageCache.get(e);if(!u)throw new Error(\\\"gpu data for uploading does not exist\\\");if(u.originalSize!==o)throw new Error(`inconsistent data size. gpu data size=${u.originalSize}, data size=${o}`);const l=this.backend.device.createBuffer({mappedAtCreation:!0,size:s,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),c=l.getMappedRange();new Uint8Array(c).set(new Uint8Array(n,a,o)),l.unmap();const p=this.backend.getCommandEncoder();this.backend.endComputePass(),p.copyBufferToBuffer(l,0,u.gpuData.buffer,0,s),(0,r.LOG_DEBUG)(\\\"verbose\\\",(()=>`[WebGPU] GpuDataManager.upload(id=${e})`)),this.buffersForUploadingPending.push(l)}memcpy(e,t){const n=this.storageCache.get(e);if(!n)throw new Error(\\\"source gpu data for memcpy does not exist\\\");const r=this.storageCache.get(t);if(!r)throw new Error(\\\"destination gpu data for memcpy does not exist\\\");if(n.originalSize!==r.originalSize)throw new Error(\\\"inconsistent source and destination gpu data size\\\");const a=i(n.originalSize),o=this.backend.getCommandEncoder();this.backend.endComputePass(),o.copyBufferToBuffer(n.gpuData.buffer,0,r.gpuData.buffer,0,a)}create(e,t=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST){const n=i(e);let s,u=this.freeBuffers.get(n);u||(u=[],this.freeBuffers.set(n,u)),s=u.length>0?u.pop():this.backend.device.createBuffer({size:n,usage:t});const l={id:o++,type:a.GpuDataType.default,buffer:s};return this.storageCache.set(l.id,{gpuData:l,originalSize:e}),(0,r.LOG_DEBUG)(\\\"verbose\\\",(()=>`[WebGPU] GpuDataManager.create(size=${e}) => id=${l.id}`)),l}get(e){var t;return null===(t=this.storageCache.get(e))||void 0===t?void 0:t.gpuData}release(e){const t=this.storageCache.get(e);if(!t)throw new Error(\\\"releasing data does not exist\\\");return(0,r.LOG_DEBUG)(\\\"verbose\\\",(()=>`[WebGPU] GpuDataManager.release(id=${e}), gpuDataId=${t.gpuData.id}`)),this.storageCache.delete(e),this.buffersPending.push(t.gpuData.buffer),this.downloadCache.get(e)&&this.downloadCache.delete(e),t.originalSize}async download(e){const t=this.downloadCache.get(e);if(t)return t.data;const n=this.storageCache.get(e);if(!n)throw new Error(\\\"data does not exist\\\");const r=this.backend.getCommandEncoder();this.backend.endComputePass();const a=i(n.originalSize),o=this.backend.device.createBuffer({size:a,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});r.copyBufferToBuffer(n.gpuData.buffer,0,o,0,a),this.backend.flush();const s=new Promise((e=>{o.mapAsync(GPUMapMode.READ).then((()=>{const t=o.getMappedRange().slice(0);o.destroy(),e(t)}))}));return this.downloadCache.set(e,{data:s}),s}refreshPendingBuffers(){for(const e of this.buffersForUploadingPending)e.destroy();this.buffersForUploadingPending=[];for(const e of this.buffersPending)this.freeBuffers.get(e.size).push(e);this.buffersPending=[]}dispose(){this.freeBuffers.forEach((e=>{e.forEach((e=>{e.destroy()}))})),this.storageCache.forEach((e=>{e.gpuData.buffer.destroy()})),this.storageCache=new Map,this.downloadCache=new Map,this.freeBuffers=new Map}}t.createGpuDataManager=(...e)=>new s(...e)},510:function(e,t,n){\\\"use strict\\\";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!(\\\"get\\\"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,a)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,\\\"default\\\",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)\\\"default\\\"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return a(t,e),t};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.WEBGPU_OP_RESOLVE_RULES=void 0;const o=i(n(504)),s=n(513),u=n(770),l=n(640),c=n(856),p=n(271),d=n(522),f=i(n(262)),h=n(31),g=n(101),m=n(67),y=n(625),b=i(n(302));t.WEBGPU_OP_RESOLVE_RULES=new Map([[\\\"Abs\\\",[b.abs]],[\\\"Acos\\\",[b.acos]],[\\\"Acosh\\\",[b.acosh]],[\\\"Add\\\",[o.add]],[\\\"Asin\\\",[b.asin]],[\\\"Asinh\\\",[b.asinh]],[\\\"Atan\\\",[b.atan]],[\\\"Atanh\\\",[b.atanh]],[\\\"AveragePool\\\",[f.averagePool,f.parseAveragePoolAttributes]],[\\\"Ceil\\\",[b.ceil]],[\\\"ClipV10\\\",[b.clipV10]],[\\\"Clip\\\",[b.clip]],[\\\"Concat\\\",[s.concat,s.parseConcatAttributes]],[\\\"Conv\\\",[u.conv,u.parseConvAttributes]],[\\\"ConvTranspose\\\",[l.convTranspose,l.parseConvTransposeAttributes]],[\\\"Cos\\\",[b.cos]],[\\\"Cosh\\\",[b.cosh]],[\\\"Div\\\",[o.div]],[\\\"Elu\\\",[b.elu,b.parseAlphaAttributes]],[\\\"Erf\\\",[b.erf]],[\\\"Exp\\\",[b.exp]],[\\\"Expand\\\",[c.expand]],[\\\"Floor\\\",[b.floor]],[\\\"Gemm\\\",[p.gemm,p.parseGemmAttributes]],[\\\"GlobalAveragePool\\\",[f.globalAveragePool,f.parseGlobalAveragePoolAttributes]],[\\\"GlobalMaxPool\\\",[f.globalMaxPool,f.parseGlobalMaxPoolAttributes]],[\\\"LeakyRelu\\\",[b.leakyRelu,b.parseAlphaAttributes]],[\\\"MatMul\\\",[d.matMul]],[\\\"MaxPool\\\",[f.maxPool,f.parseMaxPoolAttributes]],[\\\"Mul\\\",[o.mul]],[\\\"Neg\\\",[b.neg]],[\\\"Pow\\\",[o.pow]],[\\\"Reciprocal\\\",[b.reciprocal]],[\\\"ReduceMin\\\",[h.reduceMin,h.parseReduceAttributes]],[\\\"ReduceMean\\\",[h.reduceMean,h.parseReduceAttributes]],[\\\"ReduceMax\\\",[h.reduceMax,h.parseReduceAttributes]],[\\\"ReduceSum\\\",[h.reduceSum,h.parseReduceAttributes]],[\\\"ReduceProd\\\",[h.reduceProd,h.parseReduceAttributes]],[\\\"ReduceL1\\\",[h.reduceL1,h.parseReduceAttributes]],[\\\"ReduceL2\\\",[h.reduceL2,h.parseReduceAttributes]],[\\\"ReduceLogSum\\\",[h.reduceLogSum,h.parseReduceAttributes]],[\\\"ReduceLogSumExp\\\",[h.reduceLogSumExp,h.parseReduceAttributes]],[\\\"ReduceSumSquare\\\",[h.reduceSumSquare,h.parseReduceAttributes]],[\\\"Relu\\\",[b.relu]],[\\\"Sigmoid\\\",[b.sigmoid]],[\\\"Sin\\\",[b.sin]],[\\\"Sinh\\\",[b.sinh]],[\\\"Slice\\\",[g.slice,g.parseSliceAttributes]],[\\\"Split\\\",[m.split,m.parseSplitAttributes]],[\\\"Sqrt\\\",[b.sqrt]],[\\\"Sub\\\",[o.sub]],[\\\"Tan\\\",[b.tan]],[\\\"Tanh\\\",[b.tanh]],[\\\"ThresholdedRelu\\\",[b.thresholdedRelu,b.parseAlphaAttributes]],[\\\"Transpose\\\",[y.transpose,y.parseTransposeAttributes]]])},427:(e,t)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.biasActivationSnippet=t.activationFnSnippet=t.typeSnippet=void 0,t.typeSnippet=e=>{switch(e){case 1:return\\\"f32\\\";case 2:return\\\"vec2<f32>\\\";case 3:return\\\"vec3<f32>\\\";case 4:return\\\"vec4<f32>\\\";default:throw new Error(`${e}-component is not supported.`)}},t.activationFnSnippet=(e,t=!1,n=!1,r=3)=>\\\"\\\",t.biasActivationSnippet=(e,t)=>`\\\\n      ${e?\\\"value = value + getBiasByOutputCoords(coords);\\\":\\\"\\\"}\\\\n      ${t?\\\"value = activation(value, coords);\\\":\\\"\\\"}\\\\n      `},456:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.createConv2DMatMulProgramInfo=void 0;const r=n(955),a=n(952),i=n(163),o=n(427),s=n(85),u=n(158);t.createConv2DMatMulProgramInfo=(e,t,n,l,c,p,d,f,h)=>{const g=\\\"NHWC\\\"===n.format,m=g?e[0].dims[3]:e[0].dims[1],y=l[0],b=g?l[2]:l[3],v=g?l[1]:l[2],w=g?l[3]:l[1],$=((m%4==0||m%3==0)&&g||b%4==0&&!g)&&w%4==0,_=g?w:b*v,A=g?b*v:w,C=$?[8,8,1]:[_<=4?4:16,_>4&&A<=4?4:16,1],S=$?[4,4,1]:[_<=4?1:2,_>4&&A<=4?1:2,1],x=[Math.ceil(_/C[0]/S[0]),Math.ceil(A/C[1]/S[1]),Math.ceil(y/C[2]/S[1])];(0,r.LOG_DEBUG)(\\\"verbose\\\",(()=>`[conv2d_mm_webgpu] dispatch = ${x}`));const E=$?g&&m%4!=0?3:4:S[0],P=C[1]*S[1],T=C[0]*S[0],O=Math.max(C[0]*E,C[1]),I=c%P==0,k=p%T==0,R=d%O==0,D=$?[E,4,4]:[1,1,1],M=[`@group(0) @binding(0) var<storage, read> x: array<${$&&4===E?\\\"vec4<f32>\\\":\\\"f32\\\"}>;`,`@group(0) @binding(1) var<storage, read> w: array<${$?\\\"vec4<f32>\\\":\\\"f32\\\"}>;`];let W=`\\\\n      fn setOutputAtIndex(flatIndex : i32, value : ${$?\\\"vec4<f32>\\\":\\\"f32\\\"}) {\\\\n        result[flatIndex] = ${$?\\\"vec4<f32>\\\":\\\"f32\\\"}(value);\\\\n      }\\\\n      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${$?\\\"vec4<f32>\\\":\\\"f32\\\"}) {\\\\n        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));\\\\n        setOutputAtIndex(flatIndex ${$?\\\"/ 4\\\":\\\"\\\"}, value);\\\\n      }`;return f&&(M.push(`@group(0) @binding(2) var<storage, read> bias: array<${$?\\\"vec4<f32>\\\":\\\"f32\\\"}>;`),W+=`\\\\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${$?\\\"vec4<f32>\\\":\\\"f32\\\"} {\\\\n          return bias[coords.${g?\\\"w\\\":\\\"y\\\"}${$?\\\"/ 4\\\":\\\"\\\"}];\\\\n        }`),Object.assign(Object.assign({},t),{outputs:[{dims:l,dataType:e[0].dataType,gpuDataType:i.GpuDataType.default}],dispatchGroup:()=>({x:x[0],y:x[1],z:x[2]}),getShaderSource:()=>`\\\\n        ${s.utilFunctions}\\\\n        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,\\\\n        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,\\\\n        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };\\\\n        ${M.join(\\\"\\\")}\\\\n        @group(0) @binding(${M.length}) var<storage, read_write> result: array<${$?\\\"vec4<f32>\\\":\\\"f32\\\"}>;\\\\n        //@group(0) @binding(${M.length+1}) var<uniform> uniforms: Uniforms;\\\\n\\\\n        const xShape : vec4<i32> = vec4<i32>(${e[0].dims.join(\\\",\\\")});\\\\n        const wShape : vec4<i32> = vec4<i32>(${e[1].dims.join(\\\",\\\")});\\\\n        const outShape : vec4<i32> = vec4<i32>(${l.join(\\\",\\\")});\\\\n        const outShapeStrides : vec3<i32> = vec3<i32>(${a.ShapeUtil.computeStrides(l).slice(0,3).join(\\\",\\\")});\\\\n        const filterDims : vec2<i32> = vec2<i32>(${n.kernelShape[0]}, ${n.kernelShape[1]});\\\\n        const pad : vec2<i32> = vec2<i32>(${n.pads[0]}, ${n.pads[1]});\\\\n        const stride : vec2<i32> = vec2<i32>(${n.strides[0]}, ${n.strides[1]});\\\\n        const dilation : vec2<i32> = vec2<i32>(${n.dilations[0]}, ${n.dilations[1]});\\\\n        const dimAOuter : i32 = ${c};\\\\n        const dimBOuter : i32 = ${p};\\\\n        const dimInner : i32 = ${d};\\\\n        ${W}\\\\n        ${((e,t,n,r,a=!1,i,s=!1,u=4,l=4,c=4)=>{const p=e?\\\"\\\\n    let coord = vec4<i32>(batch, xRow, xCol, xCh);\\\\n    \\\":\\\"\\\\n    let coord = vec4<i32>(batch, xCh, xRow, xCol);\\\\n    \\\",d=e?\\\"\\\\n    let coords = vec4<i32>(\\\\n      batch,\\\\n      row / outWidth,\\\\n      row % outWidth,\\\\n      col);\\\\n    \\\":\\\"\\\\n    let coords = vec4<i32>(\\\\n      batch,\\\\n      row,\\\\n      col / outWidth,\\\\n      col % outWidth);\\\\n    \\\",f=e?\\\"xShape[1]\\\":\\\"xShape[2]\\\",h=e?\\\"xShape[2]\\\":\\\"xShape[3]\\\",g=e?\\\"row\\\":\\\"col\\\",m=e?\\\"col\\\":\\\"row\\\",y=`\\\\n    let inChannels = wShape[2];\\\\n    let outWidth = ${e?\\\"outShape[2]\\\":\\\"outShape[3]\\\"};\\\\n    let outRow = ${g} / outWidth;\\\\n    let outCol = ${g} % outWidth;\\\\n\\\\n    let WRow = ${m} / (filterDims[1] * inChannels);\\\\n    let WCol = ${m} / inChannels % filterDims[1];\\\\n    let xRow = outRow * stride[0] + dilation[0] * WRow - pad[0];\\\\n    let xCol = outCol * stride[1] + dilation[1] * WCol - pad[1];\\\\n    let xCh = ${m} % inChannels;\\\\n    var resData = ${(0,o.typeSnippet)(u)}(0.0);\\\\n    // The bounds checking is always needed since we use it to pad zero for\\\\n    // the 'same' padding type.\\\\n    if (xRow >= 0 && xRow < ${f} && xCol >= 0 && xCol < ${h}) {\\\\n      ${p}\\\\n      let xIndex = getIndexFromCoords4D(coord, xShape);\\\\n      ${(e=>{switch(e){case 1:return\\\"resData = x[xIndex];\\\";case 3:return\\\"resData = vec3<f32>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);\\\";case 4:return\\\"resData = x[xIndex / 4];\\\";default:throw new Error(`innerElementSize ${e} is not supported.`)}})(u)}\\\\n    }\\\\n    return resData;`,b=e?t&&r?`\\\\n    let col = colIn * ${u};\\\\n    ${y}`:`\\\\n    let col = colIn * ${u};\\\\n    if (row < dimAOuter && col < dimInner) {\\\\n      ${y}\\\\n    }\\\\n    return ${(0,o.typeSnippet)(u)}(0.0);`:r&&n?`\\\\n    let col = colIn * ${u};\\\\n    ${y}`:`\\\\n    let col = colIn * ${u};\\\\n    if (row < dimInner && col < dimBOuter) {\\\\n      ${y}\\\\n    }\\\\n    return ${(0,o.typeSnippet)(u)}(0.0);`,v=`${(e=>{switch(e){case 1:return\\\"return w[row * wShape[3] + colIn];\\\";case 4:return\\\"return w[row * wShape[3] / 4 + colIn];\\\";default:throw new Error(`innerElementSize ${e} is not supported.`)}})(l)}`,w=(0,o.typeSnippet)(c),$=e?(0,o.typeSnippet)(u):(0,o.typeSnippet)(l),_=e?(0,o.typeSnippet)(l):(0,o.typeSnippet)(u);return`\\\\n    ${(0,o.activationFnSnippet)(i,s,4===c,4)}\\\\n    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${$} {\\\\n      ${e?b:v}\\\\n    }\\\\n\\\\n    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${_} {\\\\n      ${e?v:b}\\\\n    }\\\\n\\\\n    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${w}) {\\\\n      let col = colIn * ${c};\\\\n      if (row < dimAOuter && col < dimBOuter)\\\\n      {\\\\n      var value = valueIn;\\\\n      let outWidth = ${e?\\\"outShape[2]\\\":\\\"outShape[3]\\\"};\\\\n      ${d}\\\\n      ${(0,o.biasActivationSnippet)(a,i)}\\\\n      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\\\\n      }\\\\n    }`})(g,I,k,R,f,void 0,!1,D[0],D[1],D[2])}\\\\n            ${$?(0,u.makeMatMulPackedVec4Source)(S,C,!g,O):(0,u.makeMatMulPackedSource)(S,C,!g,O,!1,void 0,h)}`})}},514:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.createConvTranspose2DProgramInfo=void 0;const r=n(955),a=n(952),i=n(163),o=n(75);t.createConvTranspose2DProgramInfo=(e,t,n,s)=>{const u=e.length>2,l=\\\"NHWC\\\"===n.format,c=n.outputShape,p=c[0],d=c[l?1:2],f=c[l?2:3],h=c[l?3:1],g=e[0].dims[l?3:1]%4==0&&h%4==0,m=l?h:d*f,y=l?d*f:h,b=g?[8,8,1]:[m<=4?4:16,m>4&&y<=4?4:16,1],v=g?[4,4,1]:[m<=4?1:2,m>4&&y<=4?1:2,1],w=[Math.ceil(m/b[0]/v[0]),Math.ceil(y/b[1]/v[1]),Math.ceil(p/b[2]/v[1])];return(0,r.LOG_DEBUG)(\\\"verbose\\\",(()=>`[conv2d_backprop_webgpu] dispatch = ${w}`)),Object.assign(Object.assign({},t),{outputs:[{dims:s?s(c):c,dataType:e[0].dataType,gpuDataType:i.GpuDataType.default}],dispatchGroup:()=>({x:w[0],y:w[1],z:w[2]}),getShaderSource:t=>((e,t,n,r,i,s)=>{const u=\\\"NHWC\\\"===n.format,l=u?1:2,c=u?2:3,p=u?3:1,d=a.ShapeUtil.size(r),f=r[u?3:1],h=t[0].dims[u?3:1],g=h%4==0&&f%4==0,m=g?2:1,y=[`@group(0) @binding(0) var<storage, read> Dy: array<${g&&4===(g?u&&h%4!=0?3:4:s[0])?\\\"vec4<f32>\\\":\\\"f32\\\"}>;`,`@group(0) @binding(1) var<storage, read> W: array<${g?\\\"vec4<f32>\\\":\\\"f32\\\"}>;`];let b=`\\\\n  fn setOutputAtIndex(flatIndex : u32, value : ${g?\\\"vec4<f32>\\\":\\\"f32\\\"}) {\\\\n    result[flatIndex] = ${g?\\\"vec4<f32>\\\":\\\"f32\\\"}(value);\\\\n  }`;i&&(y.push(`@group(0) @binding(2) var<storage, read> bias: array<${g?\\\"vec4<f32>\\\":\\\"f32\\\"}>;`),b+=`\\\\n    fn getBiasByOutputCoords(coords : vec4<u32>) -> ${g?\\\"vec4<f32>\\\":\\\"f32\\\"} {\\\\n      return bias[coords.${u?\\\"w\\\":\\\"y\\\"}${g?\\\"/ 4\\\":\\\"\\\"}];\\\\n    }`);const v=(0,o.createIndicesHelper)(\\\"W\\\",t[1].dims),w=(0,o.createIndicesHelper)(\\\"Dy\\\",t[0].dims),$=(0,o.createIndicesHelper)(\\\"result\\\",r),_=`{\\\\n        let batch: u32 = global_id.z / outShape[1];\\\\n        let r = global_id.z % outShape[1];\\\\n        let c = global_id.y * ${m};\\\\n        let d1: u32 = global_id.x * 4;\\\\n\\\\n        let dyCorner = vec2<i32>(i32(r), i32(c)) - vec2<i32>(pads);\\\\n\\\\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\\\\n        // ? = to be determined. : = across all values in that axis.\\\\n        var dotProd: array<vec4<f32>, ${m}>;\\\\n        for (var i = 0; i < ${m}; i++) {\\\\n          dotProd[i] = vec4<f32>(0.0);\\\\n        }\\\\n        for (var wR: u32 = 0; wR < filterDims[0]; wR = wR + 1) {\\\\n          var dyR = f32(dyCorner.x + wR) / f32(strides.x);\\\\n          let wRPerm: u32= filterDims[0] - 1 - wR;\\\\n          if (dyR < 0.0 || dyR >= f32(outBackprop[1]) ||\\\\n              fract(dyR) > 0.0) {\\\\n            continue;\\\\n          }\\\\n          let idyR: u32 = u32(dyR);\\\\n\\\\n          for (var wC: u32 = 0; wC < filterDims[1]; wC = wC + 1) {\\\\n            let dyC = f32(dyCorner.y + wC) / f32(strides.y);\\\\n            let dyC2 = f32(dyCorner.y + 1 + wC) / f32(strides.y);\\\\n            let wCPerm: u32 = filterDims[1] - 1 - wC;\\\\n            var bDyCVal = true;\\\\n            var bDyCVal2 = true;\\\\n            if (dyC < 0.0 || dyC >= f32(outBackprop[2]) ||\\\\n                fract(dyC) > 0.0) {\\\\n              bDyCVal = false;\\\\n            }\\\\n            if (dyC2 < 0.0 || dyC2 >= f32(outBackprop[2]) ||\\\\n                fract(dyC2) > 0.0) {\\\\n              bDyCVal2 = false;\\\\n            }\\\\n\\\\n            let idyC: u32 = u32(dyC);\\\\n            let idyC2: u32 = u32(dyC2);\\\\n            if (bDyCVal && bDyCVal2) {\\\\n              let d2Length = outBackprop[3];\\\\n              for (var d2 :u32 = 0; d2 < d2Length; d2 = d2 + 4) {\\\\n                ${v.indicesVariableDeclaration(\\\"wIndices0\\\",[\\\"d2\\\",\\\"d1\\\",\\\"wRPerm\\\",\\\"wCPerm\\\"])};\\\\n                ${v.indicesVariableDeclaration(\\\"wIndices1\\\",[\\\"d2\\\",\\\"d1+1\\\",\\\"wRPerm\\\",\\\"wCPerm\\\"])};\\\\n                ${v.indicesVariableDeclaration(\\\"wIndices2\\\",[\\\"d2\\\",\\\"d1+2\\\",\\\"wRPerm\\\",\\\"wCPerm\\\"])};\\\\n                ${v.indicesVariableDeclaration(\\\"wIndices3\\\",[\\\"d2\\\",\\\"d1+3\\\",\\\"wRPerm\\\",\\\"wCPerm\\\"])};\\\\n                let wValue0 = W[${v.i2oExpression(\\\"wIndices0\\\")}];\\\\n                let wValue1 = W[${v.i2oExpression(\\\"wIndices1\\\")}];\\\\n                let wValue2 = W[${v.i2oExpression(\\\"wIndices2\\\")}];\\\\n                let wValue3 = W[${v.i2oExpression(\\\"wIndices3\\\")}];\\\\n                ${w.indicesVariableDeclaration(\\\"dyIndices\\\",u?[\\\"batch\\\",\\\"idyR\\\",\\\"idyC\\\",\\\"d2\\\"]:[\\\"batch\\\",\\\"d2\\\",\\\"idyR\\\",\\\"idyC\\\"])};\\\\n                var xValue =  Dy[${w.i2oExpression(\\\"dyIndices\\\")}];\\\\n                let tmpval = vec4<f32>(xValue * wValue0,\\\\n                                      xValue * wValue1,\\\\n                                      xValue * wValue2,\\\\n                                      xValue * wValue3);\\\\n                dotProd[0] = dotProd[0] + tmpval;\\\\n\\\\n                ${w.indicesVariableDeclaration(\\\"dyIndices2\\\",u?[\\\"batch\\\",\\\"idyR\\\",\\\"idyC2\\\",\\\"d2\\\"]:[\\\"batch\\\",\\\"d2\\\",\\\"idyR\\\",\\\"idyC2\\\"])};\\\\n                xValue =  Dy[${w.i2oExpression(\\\"dyIndices\\\")}];\\\\n\\\\n                dotProd[1] = dotProd[1] + vec4<f32>(xValue * wValue0,\\\\n                                                    xValue * wValue1,\\\\n                                                    xValue * wValue2,\\\\n                                                    xValue * wValue3);\\\\n              }\\\\n            } else if (bDyCVal) {\\\\n              let d2Length = outBackprop[3];\\\\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\\\\n                ${v.indicesVariableDeclaration(\\\"wIndices0\\\",[\\\"d2\\\",\\\"d1\\\",\\\"wRPerm\\\",\\\"wCPerm\\\"])};\\\\n                ${v.indicesVariableDeclaration(\\\"wIndices1\\\",[\\\"d2\\\",\\\"d1+1\\\",\\\"wRPerm\\\",\\\"wCPerm\\\"])};\\\\n                ${v.indicesVariableDeclaration(\\\"wIndices2\\\",[\\\"d2\\\",\\\"d1+2\\\",\\\"wRPerm\\\",\\\"wCPerm\\\"])};\\\\n                ${v.indicesVariableDeclaration(\\\"wIndices3\\\",[\\\"d2\\\",\\\"d1+3\\\",\\\"wRPerm\\\",\\\"wCPerm\\\"])};\\\\n                let wValue0 = W[${v.i2oExpression(\\\"wIndices0\\\")}];\\\\n                let wValue1 = W[${v.i2oExpression(\\\"wIndices1\\\")}];\\\\n                let wValue2 = W[${v.i2oExpression(\\\"wIndices2\\\")}];\\\\n                let wValue3 = W[${v.i2oExpression(\\\"wIndices3\\\")}];\\\\n                ${w.indicesVariableDeclaration(\\\"dyIndices\\\",u?[\\\"batch\\\",\\\"idyR\\\",\\\"idyC\\\",\\\"d2\\\"]:[\\\"batch\\\",\\\"d2\\\",\\\"idyR\\\",\\\"idyC\\\"])};\\\\n                var xValue =  Dy[${w.i2oExpression(\\\"dyIndices\\\")}];\\\\n                let tmpval = vec4<f32>(xValue * wValue0,\\\\n                                      xValue * wValue1,\\\\n                                      xValue * wValue2,\\\\n                                      xValue * wValue3);\\\\n                dotProd[0] = dotProd[0] + tmpval;\\\\n              }\\\\n            } else if (bDyCVal2) {\\\\n              let d2Length = outBackprop[3];\\\\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\\\\n                ${v.indicesVariableDeclaration(\\\"wIndices0\\\",[\\\"d2\\\",\\\"d1\\\",\\\"wRPerm\\\",\\\"wCPerm\\\"])};\\\\n                ${v.indicesVariableDeclaration(\\\"wIndices1\\\",[\\\"d2\\\",\\\"d1+1\\\",\\\"wRPerm\\\",\\\"wCPerm\\\"])};\\\\n                ${v.indicesVariableDeclaration(\\\"wIndices2\\\",[\\\"d2\\\",\\\"d1+2\\\",\\\"wRPerm\\\",\\\"wCPerm\\\"])};\\\\n                ${v.indicesVariableDeclaration(\\\"wIndices3\\\",[\\\"d2\\\",\\\"d1+3\\\",\\\"wRPerm\\\",\\\"wCPerm\\\"])};\\\\n                let wValue0 = W[${v.i2oExpression(\\\"wIndices0\\\")}];\\\\n                let wValue1 = W[${v.i2oExpression(\\\"wIndices1\\\")}];\\\\n                let wValue2 = W[${v.i2oExpression(\\\"wIndices2\\\")}];\\\\n                let wValue3 = W[${v.i2oExpression(\\\"wIndices3\\\")}];\\\\n                ${w.indicesVariableDeclaration(\\\"dyIndices\\\",u?[\\\"batch\\\",\\\"idyR\\\",\\\"idyC\\\",\\\"d2\\\"]:[\\\"batch\\\",\\\"d2\\\",\\\"idyR\\\",\\\"idyC\\\"])};\\\\n                var xValue =  Dy[${w.i2oExpression(\\\"dyIndices\\\")}];\\\\n                let tmpval = vec4<f32>(xValue * wValue0,\\\\n                                      xValue * wValue1,\\\\n                                      xValue * wValue2,\\\\n                                      xValue * wValue3);\\\\n                dotProd[1] = dotProd[1] + tmpval;\\\\n              }\\\\n            }\\\\n          }\\\\n        }\\\\n\\\\n        for (var i: u32 = 0; i < ${m}; i = i + 1) {\\\\n          ${$.indicesVariableDeclaration(\\\"outputIndices\\\",[\\\"batch\\\",\\\"r\\\",\\\"c+i\\\",\\\"d1\\\"])};\\\\n          result[${$.i2oExpression(\\\"outputIndices\\\")}] = dotProd[i];\\\\n        }\\\\n      }`,A=`\\\\n          ${$.o2iCall(\\\"global_idx\\\",\\\"outputIndices\\\")}\\\\n          let batch = outputIndices[0];\\\\n          let d1 = outputIndices[${p}];\\\\n          let dyCorner = vec2<i32>(i32(outputIndices[${l}]), i32(outputIndices[${c}])) - pads;\\\\n          let dyRCorner = dyCorner.x;\\\\n          let dyCCorner = dyCorner.y;\\\\n          // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\\\\n          // ? = to be determined. : = across all values in that axis.\\\\n          var dotProd = 0.0;\\\\n          for (var wR: u32 = 0; wR < effectiveFilterDims.x; wR = wR + 1) {\\\\n            if (wR % dilations.x != 0) {\\\\n              continue;\\\\n            }\\\\n            let dyR = (f32(dyRCorner) + f32(wR)) / f32(strides[0]);\\\\n            let wRPerm = filterDims.x - 1 - wR / dilations.x;\\\\n            if (dyR < 0.0 || dyR >= f32(outBackprop[1]) || fract(dyR) > 0.0 ||\\\\n                wRPerm < 0) {\\\\n              continue;\\\\n            }\\\\n            let idyR: u32 = u32(dyR);\\\\n\\\\n            for (var wC: u32 = 0; wC < effectiveFilterDims.y; wC = wC + 1) {\\\\n              if (wC % dilations.y != 0) {\\\\n                continue;\\\\n              }\\\\n              let dyC = (f32(dyCCorner) + f32(wC)) / f32(strides.y);\\\\n              let wCPerm = filterDims.y - 1 - wC / dilations.y;\\\\n              if (dyC < 0.0 || dyC >= f32(outBackprop[2]) ||\\\\n                  fract(dyC) > 0.0 || wCPerm < 0) {\\\\n                continue;\\\\n              }\\\\n              let idyC: u32 = u32(dyC);\\\\n\\\\n              for (var d2: u32 = 0; d2 < outBackprop[3]; d2 = d2 + 1) {\\\\n                ${w.indicesVariableDeclaration(\\\"dyIndices\\\",u?[\\\"batch\\\",\\\"idyR\\\",\\\"idyC\\\",\\\"d2\\\"]:[\\\"batch\\\",\\\"d2\\\",\\\"idyR\\\",\\\"idyC\\\"])};\\\\n                let xValue =  Dy[${w.i2oExpression(\\\"dyIndices\\\")}];\\\\n                  ${v.indicesVariableDeclaration(\\\"wIndices\\\",[\\\"d2\\\",\\\"d1\\\",\\\"wRPerm\\\",\\\"wCPerm\\\"])};\\\\n\\\\n                let wValue = W[${v.i2oExpression(\\\"wIndices\\\")}];\\\\n                dotProd = dotProd + xValue * wValue;\\\\n              }\\\\n            }\\\\n          }\\\\n          result[global_idx] = dotProd;\\\\n        `;return`\\\\n${v.i2oImpl}\\\\n  ${w.i2oImpl}\\\\n  ${$.o2iImpl}\\\\n  ${b}\\\\n  ${y.join(\\\"\\\\n\\\")}\\\\n  @group(0) @binding(${y.length}) var<storage, read_write> result: array<${g?\\\"vec4<f32>\\\":\\\"f32\\\"}>;\\\\n  const outShape : vec4<u32> = vec4<u32>(${r.join(\\\",\\\")});\\\\n  const outBackprop : vec4<u32> = vec4<u32>(${t[0].dims.join(\\\",\\\")});\\\\n  const strides : vec2<u32> = vec2<u32>(${n.strides[0]}, ${n.strides[1]});\\\\n  const filterDims : vec2<u32> = vec2<u32>(${n.kernelShape[u?1:2]}, ${n.kernelShape[u?2:3]});\\\\n  const dilations : vec2<u32> = vec2<u32>(${n.dilations[0]}, ${n.dilations[1]});\\\\n  const effectiveFilterDims : vec2<u32> = filterDims + vec2<u32>(\\\\n          ${n.dilations[0]<=1?0:(n.kernelShape[u?1:2]-1)*(n.dilations[0]-1)},\\\\n          ${n.dilations[1]<=1?0:(n.kernelShape[u?2:3]-1)*(n.dilations[1]-1)});\\\\n  const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (${n.pads[0]+n.pads[2]})/2,\\\\n                                     i32(effectiveFilterDims[1]) - 1 - (${n.pads[1]+n.pads[3]})/2);\\\\n    ${e.mainStart()}\\\\n    ${$.indicesVariableDeclaration(\\\"outputIndices\\\")}\\\\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes(d)};\\\\n  ${g?_:A}}`})(t,e,n,c,u,v)})}},85:(e,t)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.utilFunctions=void 0,t.utilFunctions=\\\"\\\\nfn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\\\\n  return dot(coords, vec4<i32>(\\\\n      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\\\\n}\\\\nfn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\\\\n  return dot(coords, vec4<i32>(\\\\n    outShapeStrides.x, outShapeStrides.y, outShapeStrides.z, 1));\\\\n}\\\\n\\\"},158:(e,t)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.makeMatMulPackedSource=t.makeMatMulPackedVec4Source=void 0,t.makeMatMulPackedVec4Source=(e,t,n=!1,r=32,a=!1,i=32,o=!1)=>{const s=t[1]*e[1],u=t[0]*e[0],l=n?s:r,c=n?r:s,p=l/t[0],d=r/t[1];if((!n||4!==p||4!==e[1])&&(n||3!==p&&4!==p)||l%t[0]!=0||r%t[1]!=0||4!==e[0])throw new Error(`If transposeA ${n} is true, innerElementSize ${p} and workPerThread[1] ${e[1]} must be 4.\\\\n      Otherwise, innerElementSize ${p} must be 3 or 4.\\\\n  tileAWidth ${l} must be divisible by workgroupSize[0]${t[0]}. tileInner ${r} must be divisible by workgroupSize[1] ${t[1]}. colPerThread ${e[0]} must be 4.`);return`\\\\nvar<workgroup> mm_Asub : array<array<vec${p}<f32>, ${l/p}>, ${c}>;\\\\nvar<workgroup> mm_Bsub : array<array<vec4<f32>, ${u/e[0]}>, ${r}>;\\\\n\\\\nconst rowPerThread = ${e[1]};\\\\nconst colPerThread = ${e[0]};\\\\nconst innerElementSize = ${p};\\\\nconst tileInner = ${r};\\\\n\\\\n@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})\\\\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\\\\n        @builtin(global_invocation_id) globalId : vec3<u32>,\\\\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\\\\n  let localRow = i32(localId.y);\\\\n  let tileRow = ${o?\\\"0\\\":\\\"localRow * rowPerThread\\\"};\\\\n  let tileCol = i32(localId.x);\\\\n\\\\n  let globalRow = ${o?\\\"0\\\":\\\"i32(globalId.y) * rowPerThread\\\"};\\\\n  let globalCol = i32(globalId.x);\\\\n  let batch = ${a?\\\"0\\\":\\\"i32(globalId.z)\\\"};\\\\n  let globalRowStart = i32(workgroupId.y) * ${s};\\\\n\\\\n  let numTiles = ${a?`${Math.ceil(i/r)}`:\\\"(dimInner - 1) / tileInner + 1\\\"};\\\\n  var kStart = ${a?`i32(globalId.z) * ${i}`:\\\"0\\\"};\\\\n\\\\n  var acc: array<vec4<f32>, rowPerThread>;\\\\n\\\\n  // Loop over shared dimension.\\\\n  let tileRowB = localRow * ${d};\\\\n  for (var t = 0; t < numTiles; t = t + 1) {\\\\n      // Load one tile of A into local memory.\\\\n      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\\\n          let inputRow = tileRow + innerRow;\\\\n          let inputCol = tileCol;\\\\n          ${f=n,f?\\\"\\\\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\\\\n          kStart + inputRow,\\\\n          globalRowStart / innerElementSize + inputCol);\\\\n        \\\":\\\"\\\\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\\\\n          globalRow + innerRow,\\\\n          kStart / innerElementSize + inputCol);\\\\n        \\\"}\\\\n      }\\\\n\\\\n      // Load one tile of B into local memory.\\\\n      for (var innerRow = 0; innerRow < ${d}; innerRow = innerRow + 1) {\\\\n          let inputRow = tileRowB + innerRow;\\\\n          let inputCol = tileCol;\\\\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol);\\\\n      }\\\\n      kStart = kStart + tileInner;\\\\n      workgroupBarrier();\\\\n\\\\n      // Compute acc values for a single thread.\\\\n      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {\\\\n          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];\\\\n          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];\\\\n          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];\\\\n          ${3===p?\\\"\\\":\\\"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];\\\"}\\\\n\\\\n          ${((e,t)=>e?`\\\\n        let ACached0 = mm_Asub[k * innerElementSize][localRow];\\\\n        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];\\\\n        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];\\\\n        ${3===t?\\\"\\\":\\\"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];\\\"}\\\\n        for (var i = 0; i < rowPerThread; i = i + 1) {\\\\n          acc[i] = BCached0 * ACached0[i] + acc[i];\\\\n          acc[i] = BCached1 * ACached1[i] + acc[i];\\\\n          acc[i] = BCached2 * ACached2[i] + acc[i];\\\\n          ${3===t?\\\"\\\":\\\"acc[i] = BCached3 * ACached3[i] + acc[i];\\\"}\\\\n        }`:`\\\\n        for (var i = 0; i < rowPerThread; i = i + 1) {\\\\n          let ACached = mm_Asub[tileRow + i][k];\\\\n          acc[i] = BCached0 * ACached.x + acc[i];\\\\n          acc[i] = BCached1 * ACached.y + acc[i];\\\\n          acc[i] = BCached2 * ACached.z + acc[i];\\\\n          ${3===t?\\\"\\\":\\\"acc[i] = BCached3 * ACached.w + acc[i];\\\"}\\\\n        }`)(n,p)}\\\\n      }\\\\n\\\\n      workgroupBarrier();\\\\n  }\\\\n\\\\n  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\\\n      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\\\\n  }\\\\n}`;var f};const n=e=>e?\\\"\\\\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\\\\n              kStart + inputRow,\\\\n              globalRowStart + inputCol);\\\\n            \\\":\\\"\\\\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\\\\n              globalRowStart + inputRow,\\\\n              kStart + inputCol);\\\\n            \\\";t.makeMatMulPackedSource=(e,t,r=!1,a=32,i=!1,o=32,s=!1)=>{const u=e[1]*t[1],l=e[0]*t[0],c=r?u:a,p=r?a:u;if(p%t[1]!=0||c%t[0]!=0||a%t[1]!=0)throw new Error(`tileAHight ${p} must be divisible by workgroupSize[1]${t[1]}, tileAWidth ${c} must be divisible by workgroupSize[0]${t[0]}, tileInner ${a} must be divisible by workgroupSize[1]${t[1]}`);const d=p/t[1],f=c/t[0],h=a/t[1],g=s?`\\\\n    let localRow = i32(localId.y);\\\\n    let localCol = i32(localId.x);\\\\n    let globalRowStart = i32(workgroupId.y) * ${u};\\\\n    let globalColStart = i32(workgroupId.x) * ${l};\\\\n\\\\n    // Loop over shared dimension.\\\\n    for (var t = 0; t < numTiles; t = t + 1) {\\\\n      // Load one tile of A into local memory.\\\\n      for (var inputRow = localRow; inputRow < ${p}; inputRow = inputRow + ${t[1]}) {\\\\n        for (var inputCol = localCol; inputCol < ${c}; inputCol = inputCol + ${t[0]}) {\\\\n          ${n(r)}\\\\n        }\\\\n      }\\\\n      // Load one tile of B into local memory.\\\\n      for (var inputRow = localRow; inputRow < ${a}; inputRow = inputRow + ${t[1]}) {\\\\n            for (var inputCol = localCol; inputCol < ${l}; inputCol = inputCol + ${t[0]}) {\\\\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch,\\\\n            kStart + inputRow,\\\\n            globalColStart + inputCol);\\\\n        }\\\\n      }\\\\n      kStart = kStart + tileInner;\\\\n      workgroupBarrier();\\\\n\\\\n      // Compute acc values for a single thread.\\\\n      var BCached : array<f32, colPerThread>;\\\\n      for (var k = 0; k < tileInner; k = k + 1) {\\\\n        for (var inner = 0; inner < colPerThread; inner = inner + 1) {\\\\n          BCached[inner] = mm_Bsub[k][localCol + inner * ${t[0]}];\\\\n        }\\\\n        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\\\n          let ACached = ${r?`mm_Asub[k][localRow + innerRow * ${t[1]}];`:`mm_Asub[localRow + innerRow * ${t[1]}][k];`}\\\\n          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\\\n            acc[innerRow][innerCol] = acc[innerRow][innerCol] +\\\\n                ACached * BCached[innerCol];\\\\n          }\\\\n        }\\\\n      }\\\\n      workgroupBarrier();\\\\n    }\\\\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\\\n      let gRow = globalRowStart + localRow + innerRow * ${t[1]};\\\\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\\\n        let gCol = globalColStart + localCol + innerCol * ${t[0]};\\\\n        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\\\\n      }\\\\n    }\\\\n    `:`\\\\nlet tileRow = i32(localId.y) * rowPerThread;\\\\nlet tileCol = i32(localId.x) * colPerThread;\\\\n\\\\nlet globalRow = i32(globalId.y) * rowPerThread;\\\\nlet globalCol = i32(globalId.x) * colPerThread;\\\\nlet globalRowStart = i32(workgroupId.y) * ${u};\\\\n\\\\nlet tileRowA = i32(localId.y) * ${d};\\\\nlet tileColA = i32(localId.x) * ${f};\\\\nlet tileRowB = i32(localId.y) * ${h};\\\\n// Loop over shared dimension.\\\\nfor (var t = 0; t < numTiles; t = t + 1) {\\\\n  // Load one tile of A into local memory.\\\\n  for (var innerRow = 0; innerRow < ${d}; innerRow = innerRow + 1) {\\\\n    for (var innerCol = 0; innerCol < ${f}; innerCol = innerCol + 1) {\\\\n      let inputRow = tileRowA + innerRow;\\\\n      let inputCol = tileColA + innerCol;\\\\n      ${n(r)}\\\\n    }\\\\n  }\\\\n\\\\n  // Load one tile of B into local memory.\\\\n  for (var innerRow = 0; innerRow < ${h}; innerRow = innerRow + 1) {\\\\n    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\\\n      let inputRow = tileRowB + innerRow;\\\\n      let inputCol = tileCol + innerCol;\\\\n      mm_Bsub[inputRow][inputCol] = mm_readB(batch,\\\\n        kStart + inputRow,\\\\n        globalCol + innerCol);\\\\n    }\\\\n  }\\\\n  kStart = kStart + tileInner;\\\\n  workgroupBarrier();\\\\n\\\\n  // Compute acc values for a single thread.\\\\n  var BCached : array<f32, colPerThread>;\\\\n  for (var k = 0; k < tileInner; k = k + 1) {\\\\n    for (var inner = 0; inner < colPerThread; inner = inner + 1) {\\\\n      BCached[inner] = mm_Bsub[k][tileCol + inner];\\\\n    }\\\\n\\\\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\\\n      ${(e=>e?\\\"let ACached = mm_Asub[k][tileRow + innerRow];\\\":\\\"let ACached = mm_Asub[tileRow + innerRow][k];\\\")(r)}\\\\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\\\n        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];\\\\n      }\\\\n    }\\\\n  }\\\\n\\\\n  workgroupBarrier();\\\\n}\\\\n\\\\nfor (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\\\n  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\\\n    mm_write(batch, globalRow + innerRow, globalCol + innerCol,\\\\n        acc[innerRow][innerCol]);\\\\n  }\\\\n}\\\\n`;return`\\\\n  var<workgroup> mm_Asub : array<array<f32, ${c}>, ${p}>;\\\\n  var<workgroup> mm_Bsub : array<array<f32, ${l}>, ${a}>;\\\\n  const rowPerThread = ${e[1]};\\\\n  const colPerThread = ${e[0]};\\\\n  const tileInner = ${a};\\\\n\\\\n@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})\\\\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\\\\n        @builtin(global_invocation_id) globalId : vec3<u32>,\\\\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\\\\n    let batch = ${i?\\\"0\\\":\\\"i32(globalId.z)\\\"};\\\\n    let numTiles = ${i?`${Math.ceil(o/a)}`:\\\"(dimInner - 1) / tileInner + 1\\\"};\\\\n    var kStart = ${i?`i32(globalId.z) * ${o}`:\\\"0\\\"};\\\\n\\\\n    var acc : array<array<f32, colPerThread>, rowPerThread>;\\\\n\\\\n    // Without this initialization strange values show up in acc.\\\\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\\\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\\\n        acc[innerRow][innerCol] = 0.0;\\\\n      }\\\\n    }\\\\n    ${g}\\\\n  }\\\\n`}},504:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.sub=t.pow=t.mul=t.div=t.add=void 0;const r=n(952),a=n(163),i=n(75),o=(e,t,n,o,s)=>{const u={name:t,inputTypes:[a.GpuDataType.default,a.GpuDataType.default],cacheHint:s};return Object.assign(Object.assign({},u),{get:()=>((e,t,n,o,s,u=t.dataType)=>{var l,c;const p=!r.ShapeUtil.areEqual(t.dims,n.dims);let d=t.dims,f=r.ShapeUtil.size(t.dims),h=!1;if(p){const e=r.BroadcastUtil.calcShape(t.dims,n.dims,!1);if(!e)throw new Error(\\\"Can't perform binary op on the given tensors\\\");d=e,f=r.ShapeUtil.size(d);let a=1;for(let e=0;e<d.length;e++){const r=null!==(l=t.dims[t.dims.length-e])&&void 0!==l?l:1;if(r!==(null!==(c=n.dims[n.dims.length-e])&&void 0!==c?c:1))break;a*=r}a%4==0&&(h=!0)}else h=!0;return Object.assign(Object.assign({},e),{getShaderSource:e=>((e,t,n,a,o,s,u,l,c=\\\"f32\\\",p=\\\"f32\\\",d=\\\"f32\\\")=>{const f=r.ShapeUtil.size(a),h=Math.ceil(f/4);let g,m;\\\"string\\\"==typeof u?g=m=(e,t)=>`${u}((${e}),(${t}))`:\\\"function\\\"==typeof u?g=m=u:(g=u.scalar,m=u.vector);let y=\\\"\\\";const b=(0,i.createIndicesHelper)(\\\"output\\\",a);if(s){const e=e=>{const t=r.ShapeUtil.computeStrides(e),n=[];for(let r=e.length-1;r>=0;r--){const i=0===a.length?\\\"0u\\\":1===a.length?\\\"(*outputIndices)\\\":`(*outputIndices)[${r+a.length-e.length}]`;n.push(`${t[r]}u * (${i} % ${e[r]}u)`)}return n.length>0?n.join(\\\"+\\\"):\\\"0u\\\"};y=`\\\\n  ${b.o2iImpl}\\\\n\\\\n  fn calcOffsetA(outputIndices: ptr<function, ${b.iType}>) -> u32 {\\\\n    return ${e(t)};\\\\n  }\\\\n\\\\n  fn calcOffsetB(outputIndices: ptr<function, ${b.iType}>) -> u32 {\\\\n    return ${e(n)};\\\\n  }\\\\n  `}let v;if(o)v=s?`\\\\n      ${b.indicesVariableDeclaration(\\\"outputIndices\\\")}\\\\n      ${b.o2iCall(\\\"global_idx * 4u\\\",\\\"outputIndices\\\")}\\\\n      let offsetA = calcOffsetA(&outputIndices);\\\\n      let offsetB = calcOffsetB(&outputIndices);\\\\n      outputData[global_idx] = ${m(\\\"aData[offsetA / 4u]\\\",\\\"bData[offsetB / 4u]\\\")};`:`outputData[global_idx] = ${m(\\\"aData[global_idx]\\\",\\\"bData[global_idx]\\\")};`;else{if(!s)throw new Error(\\\"no necessary to use scalar implementation for element-wise binary op implementation.\\\");const e=e=>{const t=`aData[indexA${e}][componentA${e}]`,n=`bData[indexB${e}][componentB${e}]`;return`\\\\n      ${b.o2iCall(`global_idx * 4u + ${e}u`,\\\"outputIndices\\\")}\\\\n      let offsetA${e} = calcOffsetA(&outputIndices);\\\\n      let offsetB${e} = calcOffsetB(&outputIndices);\\\\n      let indexA${e} = offsetA${e} / 4u;\\\\n      let indexB${e} = offsetB${e} / 4u;\\\\n      let componentA${e} = offsetA${e} % 4u;\\\\n      let componentB${e} = offsetB${e} % 4u;\\\\n      outputData[global_idx][${e}] = ${g(t,n)};`};v=`\\\\n      ${b.indicesVariableDeclaration(\\\"outputIndices\\\")}\\\\n      ${e(0)}\\\\n      ${e(1)}\\\\n      ${e(2)}\\\\n      ${e(3)}`}return`\\\\n  @group(0) @binding(0) var<storage, read> aData : array<vec4<${c}>>;\\\\n  @group(0) @binding(1) var<storage, read> bData : array<vec4<${p}>>;\\\\n  @group(0) @binding(2) var<storage, read_write> outputData : array<vec4<${d}>>;\\\\n\\\\n  ${null!=l?l:\\\"\\\"}\\\\n  ${y}\\\\n\\\\n  ${e.mainStart()}\\\\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes(h)}\\\\n    ${v}\\\\n  }`})(e,t.dims,n.dims,d,h,p,o,s),outputs:[{dims:d,dataType:u,gpuDataType:a.GpuDataType.default}],dispatchGroup:()=>({x:Math.ceil(f/64/(h?4:1))})})})(u,e[0],e[1],n,o)})};t.add=e=>{e.compute(o(e.inputs,\\\"Add\\\",((e,t)=>`${e}+${t}`)))},t.div=e=>{e.compute(o(e.inputs,\\\"Div\\\",((e,t)=>`${e}/${t}`)))},t.mul=e=>{e.compute(o(e.inputs,\\\"Mul\\\",((e,t)=>`${e}*${t}`)))},t.pow=e=>{e.compute(o(e.inputs,\\\"Pow\\\",{scalar:(e,t)=>`pow_f32(${e},${t})`,vector:(e,t)=>`pow_vf32(${e},${t})`},\\\"\\\\n    fn pow_f32(a : f32, b : f32) -> f32 {\\\\n      if (b == 0.0) {\\\\n        return 1.0;\\\\n      } else if (a < 0.0 && b != floor(b)) {\\\\n        return pow(a, b); // NaN\\\\n      }\\\\n      return select(sign(a), 1.0, round(abs(b) % 2.0) != 1.0) * pow(abs(a), b);\\\\n    }\\\\n    fn pow_vf32(a : vec4<f32>, b : vec4<f32>) -> vec4<f32> {\\\\n      // TODO: implement vectorized pow\\\\n      return vec4<f32>(pow_f32(a.x, b.x), pow_f32(a.y, b.y), pow_f32(a.z, b.z), pow_f32(a.w, b.w));\\\\n    }\\\\n      \\\"))},t.sub=e=>{e.compute(o(e.inputs,\\\"Sub\\\",((e,t)=>`${e}-${t}`)))}},75:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.createShaderHelper=t.createIndicesHelper=t.WORKGROUP_SIZE=void 0;const r=n(952);t.WORKGROUP_SIZE=64,t.createIndicesHelper=(e,t)=>{const n=t.length<2?\\\"u32\\\":`array<u32, ${t.length}>`,a=r.ShapeUtil.computeStrides(t);let i=\\\"\\\";for(let e=0;e<t.length-1;e++)i+=`\\\\n    let dim${e} = current / ${a[e]}u;\\\\n    let rest${e} = current % ${a[e]}u;\\\\n    (*indices)[${e}] = dim${e};\\\\n    current = rest${e};\\\\n    `;i+=`(*indices)[${t.length-1}] = current;`;const o=t.length<2?\\\"\\\":`\\\\n  fn ih_o2i_${e}(offset: u32, indices: ptr<function, ${n}>) {\\\\n    var current = offset;\\\\n    ${i}\\\\n  }`,s=[];if(0===t.length)s.push(\\\"0u\\\");else if(t.length<2)s.push(\\\"(*indices)\\\");else for(let e=t.length-1;e>=0;e--)s.push(`${a[e]}u * ((*indices)[${e}])`);return{o2iImpl:o,o2iCall:(n,r)=>t.length<2?`${r}=${n};`:`ih_o2i_${e}(${n}, &${r});`,i2oImpl:t.length<2?\\\"\\\":`\\\\n  fn ih_i2o_${e}(indices: ptr<function, ${n}>) -> u32 {\\\\n    return ${s.join(\\\"+\\\")};\\\\n  }`,i2oExpression:(n,r)=>t.length<2?`(${r?\\\"*\\\":\\\"\\\"}${n})`:`ih_i2o_${e}(${r?\\\"\\\":\\\"&\\\"}${n})`,indicesVariableDeclaration:(e,t)=>`var ${e}:${n}${t?`=${n}(${t.join(\\\",\\\")})`:\\\"\\\"};`,iType:n}};class a{constructor(e){this.normalizedDispatchGroup=e}guardAgainstOutOfBoundsWorkgroupSizes(e){return`if (global_idx >= ${\\\"number\\\"==typeof e?`${e}u`:e}) { return; }`}mainStart(e=t.WORKGROUP_SIZE){const n=\\\"number\\\"==typeof e?e:e[0],r=\\\"number\\\"==typeof e?1:e[1],a=\\\"number\\\"==typeof e?1:e[2],i=1===this.normalizedDispatchGroup[1]&&1===this.normalizedDispatchGroup[2];return`@compute @workgroup_size(${n}, ${r}, ${a})\\\\n  fn main(${i?\\\"@builtin(global_invocation_id) global_id : vec3<u32>\\\":\\\"@builtin(local_invocation_index) local_index : u32,\\\\n    @builtin(workgroup_id) workgroup_id : vec3<u32>\\\"}) {\\\\n    ${i?\\\"let global_idx = global_id.x;\\\":`let global_idx = (workgroup_id.z * ${this.normalizedDispatchGroup[0]*this.normalizedDispatchGroup[1]}u +\\\\n          workgroup_id.y * ${this.normalizedDispatchGroup[0]}u + workgroup_id.x) * ${n*r*a}u + local_index;`}\\\\n  `}}t.createShaderHelper=e=>new a(e)},513:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseConcatAttributes=t.concat=void 0;const r=n(952),a=n(387),i=n(163),o=n(75);t.concat=(e,t)=>{(e=>{if(!e||e.length<1)throw new Error(\\\"too few inputs\\\");const t=e[0].dataType,n=e[0].dims.length;for(const r of e){if(r.dataType!==t)throw new Error(\\\"input tensors should be one type\\\");if(r.dims.length!==n)throw new Error(\\\"input tensors should have the same shape\\\")}})(e.inputs),e.compute(((e,t)=>{const n=(a=e.length,s=t.cacheKey,{name:\\\"Concat\\\",inputTypes:Array(a).fill(i.GpuDataType.default),cacheHint:s});var a,s;return Object.assign(Object.assign({},n),{get:()=>((e,t,n,a=\\\"f32\\\")=>{const s=t[0].dims.slice();if(n>=s.length||n<-1*s.length)throw new Error(\\\"axis specified for concat doesn't match input dimensionality\\\");const u=n<0?s.length+n:n,l=s.slice(0);for(let e=1;e<t.length;e++){const n=t[e].dims.slice();for(let e=0;e<s.length;e++)if(e===u)l[u]+=n[e];else if(s[e]!==n[e])throw new Error(\\\"non concat dimensions must match\\\")}const c=r.ShapeUtil.size(l),p=l.length,d=new Array(t.length),f=new Array(t.length),h=new Array(t.length);let g=0;for(let e=0;e<t.length;++e)g+=t[e].dims[u],d[e]=g,f[e]=`@group(0) @binding(${e}) var<storage, read> input${e} : array<${a}>;`,h[e]=(0,o.createIndicesHelper)(`input${e}`,t[e].dims);const m=(0,o.createIndicesHelper)(\\\"output\\\",l),y=p<2?\\\"indices\\\":`indices[${u}]`;return Object.assign(Object.assign({},e),{outputs:[{dims:l,dataType:t[0].dataType,gpuDataType:i.GpuDataType.default}],getShaderSource:e=>{return`\\\\n\\\\n  ${f.join(\\\"\\\\n\\\")}\\\\n  @group(0) @binding(${t.length}) var<storage, read_write> output : array<${a}>;\\\\n\\\\n  ${h.map((e=>e.i2oImpl)).join(\\\"\\\\n\\\")}\\\\n  ${m.o2iImpl}\\\\n\\\\n  const sizeInConcatAxis = array<u32, ${d.length}>(${d.map((e=>`${e}u`)).join(\\\",\\\")});\\\\n  ${n=d.length,`\\\\n  fn calculateInputIndex(index: u32) -> u32 {\\\\n    for (var i: u32 = 0u; i < ${n}u; i += 1u ) {\\\\n      if (index < sizeInConcatAxis[i]) {\\\\n        return i;\\\\n      }\\\\n    }\\\\n    return ${n}u;\\\\n  }`}\\\\n  ${((e,t,n)=>{const r=e.length,a=[];for(let t=0;t<r;++t){const n=`return input${t}[${e[t].i2oExpression(\\\"indices\\\",!0)}];`;1===r?a.push(n):0===t?a.push(`if (textureIndex == ${t}u) { ${n} }`):t===r-1?a.push(`else { ${n} }`):a.push(`else if (textureIndex == ${t}) { ${n} }`)}return`\\\\n    fn readBufferData(textureIndex: u32, indices: ptr<function, ${e[0].iType}>) -> ${n} {\\\\n      ${a.join(\\\"\\\\n\\\")}\\\\n    }`})(h,0,a)}\\\\n\\\\n  ${e.mainStart()}\\\\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes(c)}\\\\n\\\\n    ${m.indicesVariableDeclaration(\\\"indices\\\")}\\\\n    ${m.o2iCall(\\\"global_idx\\\",\\\"indices\\\")}\\\\n\\\\n    let textureIndex = calculateInputIndex(${y});\\\\n    if (textureIndex != 0u) {\\\\n      ${y} -= sizeInConcatAxis[textureIndex - 1u];\\\\n    }\\\\n\\\\n    output[global_idx] = readBufferData(textureIndex, &indices);\\\\n  }`;var n},dispatchGroup:()=>({x:Math.ceil(c/64)})})})(n,e,t.axis)})})(e.inputs,t))},t.parseConcatAttributes=e=>(0,a.createAttributeWithCacheKey)({axis:e.axis})},192:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.createGroupedConvProgramInfoLoader=void 0;const r=n(952),a=n(163),i=n(75),o=n(770),s=n(997);t.createGroupedConvProgramInfoLoader=(e,t,n)=>{const u=(l=e.length>2,c=t.cacheKey,{name:\\\"GroupedConv\\\",inputTypes:l?[a.GpuDataType.default,a.GpuDataType.default,a.GpuDataType.default]:[a.GpuDataType.default,a.GpuDataType.default],cacheHint:c});var l,c;return Object.assign(Object.assign({},u),{get:()=>((e,t,n,u)=>{const l=e.length>2,c=l?\\\"value += b[output_channel];\\\":\\\"\\\",p=e[0].dims,d=e[1].dims,f=d[0]/n.group,h=\\\"f32\\\",{activationFunction:g,applyActivation:m}=(0,s.getActicationSnippet)(n),y=[`@group(0) @binding(0) var<storage, read> x : array<${h}>;`,`@group(0) @binding(1) var<storage, read> w : array<${h}>;`];l&&y.push(`@group(0) @binding(2) var<storage, read> b : array<${h}>;`);const b=\\\"NHWC\\\"===n.format,v=(0,o.calculateOutputShape)(p,d,n.dilations,n.pads,n.strides,b),w=r.ShapeUtil.size(v),$=(0,i.createIndicesHelper)(\\\"output\\\",v),_=(0,i.createIndicesHelper)(\\\"x\\\",p),A=(0,i.createIndicesHelper)(\\\"w\\\",d);return Object.assign(Object.assign({},t),{outputs:[{dims:u?u(v):v,dataType:e[0].dataType,gpuDataType:a.GpuDataType.default}],getShaderSource:e=>`\\\\n  const strides: vec2<u32> = vec2(${n.strides[0]}u, ${n.strides[1]}u);\\\\n  const pads: vec2<u32> = vec2(${n.pads[0]}u, ${n.pads[1]}u);\\\\n\\\\n  ${y.join(\\\"\\\\n\\\")}\\\\n  @group(0) @binding(${y.length}) var<storage, read_write> output : array<${h}>;\\\\n\\\\n  ${g}\\\\n  ${$.o2iImpl}\\\\n  ${_.i2oImpl}\\\\n  ${A.i2oImpl}\\\\n\\\\n  ${e.mainStart()}\\\\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes(w)}\\\\n\\\\n    ${$.indicesVariableDeclaration(\\\"outputIndices\\\")}\\\\n    ${$.o2iCall(\\\"global_idx\\\",\\\"outputIndices\\\")}\\\\n    let batch: u32 = outputIndices[0];\\\\n    let output_channel: u32 = outputIndices[${b?3:1}];\\\\n    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${b?1:2}], outputIndices[${b?2:3}]) * strides - pads;\\\\n    let group_id: u32 = output_channel / ${f}u;\\\\n\\\\n    var value: ${h} = ${h}(0);\\\\n    for (var wInChannel: u32 = 0u; wInChannel < ${d[1]}u; wInChannel++) {\\\\n      let input_channel = group_id * ${d[1]}u + wInChannel;\\\\n      for (var wHeight: u32 = 0u; wHeight < ${d[2]}u; wHeight++) {\\\\n        let xHeight = xRCCorner.x + wHeight * ${n.dilations[0]}u;\\\\n\\\\n        if (xHeight < 0u || xHeight >= ${p[b?1:2]}u) {\\\\n          continue;\\\\n        }\\\\n\\\\n        for (var wWidth: u32 = 0u; wWidth < ${d[3]}u; wWidth++) {\\\\n          let xWidth = xRCCorner.y + wWidth * ${n.dilations[1]}u;\\\\n          if (xWidth < 0u || xWidth >= ${p[b?2:3]}u) {\\\\n            continue;\\\\n          }\\\\n\\\\n          ${_.indicesVariableDeclaration(\\\"xIndices\\\",b?[\\\"batch\\\",\\\"xHeight\\\",\\\"xWidth\\\",\\\"input_channel\\\"]:[\\\"batch\\\",\\\"input_channel\\\",\\\"xHeight\\\",\\\"xWidth\\\"])}\\\\n          let xVal = x[${_.i2oExpression(\\\"xIndices\\\")}];\\\\n          ${A.indicesVariableDeclaration(\\\"wIndices\\\",[\\\"output_channel\\\",\\\"wInChannel\\\",\\\"wHeight\\\",\\\"wWidth\\\"])}\\\\n          let wVal = w[${A.i2oExpression(\\\"wIndices\\\")}];\\\\n          value += xVal*wVal;\\\\n        }\\\\n      }\\\\n    }\\\\n    ${c}\\\\n    ${m}\\\\n    output[global_idx] = value;\\\\n  }`,dispatchGroup:()=>({x:Math.ceil(w/64)})})})(e,u,t,n)})}},640:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.convTranspose=t.parseConvTransposeAttributes=void 0;const r=n(387),a=n(163),i=n(514),o=n(997),s=(e,t,n,r,a,i)=>(e-1)*t+n+(r-1)*a+1-i,u=(e,t,n,r,a)=>{const i=Math.floor(e/2);\\\"SAME_UPPER\\\"===t?(n[r]=i,n[a]=e-i):\\\"SAME_LOWER\\\"===t&&(n[r]=e-i,n[a]=i)},l=(e,t)=>{const n=e.kernelShape.slice();if(0===e.kernelShape.length||0===e.kernelShape.reduce(((e,t)=>e*t),0)){n.length=0;for(let e=2;e<t[1].dims.length;++e)n.push(t[1].dims[e])}const r=\\\"NHWC\\\"===e.format;n.splice(0,0,t[1].dims[0]),n.splice(r?3:1,0,t[1].dims[1]);const a=e.pads.slice(),i=e.outputShape.slice(),o=e.outputPadding.slice(),l=t[0].dims;let c=e.dilations.slice();if(0===c.reduce(((e,t)=>e+t),0)){const e=t[0].dims.length-2;c=new Array(e).fill(1)}let p=e.strides.slice();if(0===p.reduce(((e,t)=>e+t),0)){const e=t[0].dims.length-2;p=new Array(e).fill(1)}((e,t,n,r,a,i,o,l,c,p)=>{const d=e.length-2,f=0===p.length;if(0===c.length)for(let e=0;e<d;++e)c.push(0);const h=e[0],g=t[l?3:1]*a;for(let a=0,h=e.length-d-(l?1:0);a<d;++a,++h){const l=e[h],g=f?l*o[a]:p[a],m=s(l,o[a],i[a],t[h],n[a],g);u(m,r,i,a,a+d),f&&p.push(o[a]*(l-1)+c[a]+(t[h]-1)*n[a]+1-i[a]-i[a+d])}p.splice(0,0,h),p.splice(l?3:1,0,g)})(l,n,c,e.autoPad,e.group,a,p,r,o,i);const d=Object.assign({},e);return Object.assign(d,{kernelShape:n,pads:a,outputPadding:o,outputShape:i,dilations:c,strides:p,cacheKey:e.cacheKey}),d};t.parseConvTransposeAttributes=e=>{const t=(0,o.parseInternalActivationAttributes)(e),n=e.format,a=[\\\"NOTSET\\\",\\\"VALID\\\",\\\"SAME_UPPER\\\",\\\"SAME_LOWER\\\"][void 0===e.autoPad?0:e.autoPad],i=e.dilations,s=e.group,u=e.kernelShape,l=e.pads,c=e.strides,p=e.wIsConst(),d=e.outputPadding,f=e.outputShape;return(0,r.createAttributeWithCacheKey)(Object.assign({autoPad:a,format:n,dilations:i,group:s,kernelShape:u,outputPadding:d,outputShape:f,pads:l,strides:c,wIsConst:p},t))};const c=(e,t,n)=>{const r=(o=3===e.length,s=t.cacheKey,{name:\\\"ConvTranspose2D\\\",inputTypes:o?[a.GpuDataType.default,a.GpuDataType.default,a.GpuDataType.default]:[a.GpuDataType.default,a.GpuDataType.default],cacheHint:s});var o,s;return Object.assign(Object.assign({},r),{get:()=>(0,i.createConvTranspose2DProgramInfo)(e,r,t,n)})};t.convTranspose=(e,t)=>{((e,t)=>{if(!e||2!==e.length&&3!==e.length)throw new Error(\\\"Conv requires 2 or 3 inputs\\\");if(4!==e[0].dims.length&&3!==e[0].dims.length)throw new Error(\\\"currently only support 2-dimensional conv\\\");if(e[0].dims.length!==e[1].dims.length)throw new Error(\\\"filter does not have same dimension as input\\\");if(e[0].dims[\\\"NHWC\\\"===t.format?e[0].dims.length-1:1]!==e[1].dims[0])throw new Error(\\\"FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\\\");const n=e[1].dims[1]*t.group;if(3===e.length&&(1!==e[2].dims.length||e[2].dims[0]!==n))throw new Error(\\\"invalid bias\\\");const r=e[0].dims.length-2;if(t.dilations.reduce(((e,t)=>e+t),0)>0&&t.dilations.length!==r)throw new Error(`dilations should be ${r}D`);if(t.strides.reduce(((e,t)=>e+t),0)>0&&t.strides.length!==r)throw new Error(`strides should be ${r}D`);if(t.pads.reduce(((e,t)=>e+t),0)>0&&t.pads.length!==2*r)throw new Error(`pads should be ${2*r}D`);if(t.outputPadding.length!==r&&0!==t.outputPadding.length)throw new Error(`output_padding should be ${r}D`);if(t.kernelShape.reduce(((e,t)=>e+t),0)>0&&0!==t.kernelShape.length&&t.kernelShape.length!==e[1].dims.length-2)throw new Error(\\\"invalid kernel shape\\\");if(0!==t.outputShape.length&&t.outputShape.length!==e[0].dims.length-2)throw new Error(\\\"invalid output shape\\\");if(1!==e[0].dataType||1!==e[1].dataType)throw new Error(\\\"ConvTranspose input(X,W) should be float tensor\\\");if(3===e.length&&1!==e[2].dataType)throw new Error(\\\"ConvTranspose input(bias) should be float tensor\\\")})(e.inputs,t),3===e.inputs[0].dims.length?((e,t)=>{const n=\\\"NHWC\\\"===t.format,r=[e.inputs[0].reshape(n?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];3===r.length&&r.push(e.inputs[2]);let a=t.kernelShape;0!==a.length&&0!==a[0]||(a=[e.inputs[1].dims[2]]);let i=t.dilations;0!==i.length&&0!==i[0]||(i=[1]);let o=t.strides;0!==o.length&&0!==o[0]||(o=[1]);let s=t.pads;0===s.length&&(s=[0,0]),s=[0,s[0],0,s[1]],o=[1].concat(o),i=[1].concat(i),a=[1].concat(a);const u=l(Object.assign(Object.assign({},t),{pads:s,strides:o,dilations:i,kernelShape:a}),r);e.compute(c(r,u,(e=>n?[e[0],e[2],e[3]]:[e[0],e[1],e[3]])))})(e,t):((e,t,n)=>{const r=l(n,t);e.compute(c(t,r))})(e,e.inputs,t)}},770:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.conv=t.parseConvAttributes=t.calculateOutputShape=void 0;const r=n(952),a=n(387),i=n(192),o=n(822),s=n(997),u=n(625);t.calculateOutputShape=(e,t,n,r,a,i)=>{const o=e[0],s=e.slice(i?1:2,i?3:4),u=s.length,l=t[0],c=t.slice(2).map(((e,t)=>e+(e-1)*(n[t]-1))),p=s.map(((e,t)=>e+r[t]+r[t+u])).map(((e,t)=>Math.floor((e-c[t]+a[t])/a[t])));return p.splice(0,0,o),p.splice(i?3:1,0,l),p};const l=(0,a.createAttributeWithCacheKey)({perm:[2,3,1,0]}),c=(e,t)=>{const n=e.kernelShape.slice();for(let e=2;e<t[1].dims.length;++e)0===n[e-2]&&(n[e-2]=t[1].dims[e]);const a=e.pads.slice();r.PoolConvUtil.adjustPadsBasedOnAutoPad(t[0].dims,e.strides,e.dilations,n,a,\\\"NHWC\\\"===e.format,e.autoPad);const i=Object.assign({},e);return Object.assign(i,{kernelShape:n,pads:a,cacheKey:e.cacheKey}),i};t.parseConvAttributes=e=>{const t=(0,s.parseInternalActivationAttributes)(e),n=e.format,r=[\\\"NOTSET\\\",\\\"VALID\\\",\\\"SAME_UPPER\\\",\\\"SAME_LOWER\\\"][e.auto_pad],i=e.dilations,o=e.group,u=e.kernel_shape,l=e.pads,c=e.strides,p=e.w_is_const();return(0,a.createAttributeWithCacheKey)(Object.assign({autoPad:r,format:n,dilations:i,group:o,kernelShape:u,pads:l,strides:c,wIsConst:p},t))},t.conv=(e,n)=>{((e,t)=>{if(!e||2!==e.length&&3!==e.length)throw new Error(\\\"Conv requires 2 or 3 inputs\\\");if(4!==e[0].dims.length&&3!==e[0].dims.length)throw new Error(\\\"currently only support conv 1D and 2D\\\");if(e[0].dims.length!==e[1].dims.length)throw new Error(\\\"filter does not have same dimension as input\\\");if(e[0].dims[\\\"NHWC\\\"===t.format?e[0].dims.length-1:1]!==e[1].dims[1]*t.group)throw new Error(\\\"FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\\\");if(3===e.length&&(1!==e[2].dims.length||e[1].dims[0]!==e[2].dims[0]))throw new Error(\\\"invalid bias\\\");const n=e[0].dims.length-2;if(t.dilations.length!==n)throw new Error(`dilations should be ${n}D`);if(t.strides.length!==n)throw new Error(`strides should be ${n}D`);if(t.pads.length!==2*n)throw new Error(`pads should be ${2*n}D`);if(0!==t.kernelShape.length&&t.kernelShape.length!==e[1].dims.length-2)throw new Error(\\\"invalid kernel shape\\\");if(1!==e[0].dataType||1!==e[1].dataType)throw new Error(\\\"Conv input(X,W) should be float tensor\\\");if(3===e.length&&1!==e[2].dataType)throw new Error(\\\"Conv input(bias) should be float tensor\\\")})(e.inputs,n),3===e.inputs[0].dims.length?((e,t)=>{const n=\\\"NHWC\\\"===t.format,r=[e.inputs[0].reshape(n?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];3===e.inputs.length&&r.push(e.inputs[2]);const a=[0,t.pads[0],0,t.pads[1]],o=[1].concat(t.strides),s=[1].concat(t.dilations),u=[1].concat(t.kernelShape),l=c(Object.assign(Object.assign({},t),{pads:a,strides:o,dilations:s,kernelShape:u}),r);e.compute((0,i.createGroupedConvProgramInfoLoader)(r,l,(e=>n?[e[0],e[2],e[3]]:[])))})(e,n):((e,n,r)=>{var a;const s=c(r,n),p=3===n.length,d=\\\"NHWC\\\"===r.format,f=n[0].dims[d?1:2],h=n[0].dims[d?2:3],g=n[0].dims[d?3:1],m=n[1].dims[2],y=n[1].dims[3],b=(0,t.calculateOutputShape)(n[0].dims,n[1].dims,r.dilations,s.pads,r.strides,d),v=b[d?1:2],w=b[d?2:3],$=b[d?3:1];if(d&&m===f&&y===h&&\\\"VALID\\\"===r.autoPad||1===m&&1===y&&1===r.dilations[0]&&1===r.dilations[1]&&1===r.strides[0]&&1===r.strides[1]&&(\\\"SAME_UPPER\\\"===r.autoPad||\\\"SAME_LOWER\\\"===r.autoPad||\\\"VALID\\\"===r.autoPad))return void e.compute((0,i.createGroupedConvProgramInfoLoader)(n,s));if(!d||1!==r.group)return void e.compute((0,i.createGroupedConvProgramInfoLoader)(n,s));const _=d?v*w:$,A=d?$:v*w,C=m*y*g,S=null!==(a=e.kernelCustomData.wT)&&void 0!==a?a:e.compute(Object.assign(Object.assign({},u.transposeProgramMetadata),{cacheHint:l.cacheKey,get:()=>(0,u.createTransposeProgramInfo)(n[1],l.perm)}),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=S);const x=[n[0],S];p&&(d||1!==n[2].dims.length?x.push(n[2]):x.push(n[2].reshape([n[2].dims[0],1,1]))),e.compute((0,o.createConv2DMatMulProgramInfoLoader)(x,s,b,_,A,C,p,!0),{inputs:x})})(e,e.inputs,n)}},822:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.createConv2DMatMulProgramInfoLoader=void 0;const r=n(163),a=n(456);t.createConv2DMatMulProgramInfoLoader=(e,t,n,i,o,s,u,l)=>{const c=((e,t)=>({name:\\\"Conv2DMatMul\\\",inputTypes:e?[r.GpuDataType.default,r.GpuDataType.default,r.GpuDataType.default]:[r.GpuDataType.default,r.GpuDataType.default],cacheHint:t}))(u,t.cacheKey);return Object.assign(Object.assign({},c),{get:()=>(0,a.createConv2DMatMulProgramInfo)(e,c,t,n,i,o,s,u,l)})}},856:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.expand=t.expandProgramMetadata=void 0;const r=n(952),a=n(163),i=n(75);t.expandProgramMetadata={name:\\\"Expand\\\",inputTypes:[a.GpuDataType.default]};const o=(e,t)=>{const n=e.length-t.length,r=[];for(let t=0;t<n;++t)r.push(e[t]);for(let a=0;a<t.length;++a)r.push(1===t[a]?e[a+n]:t[a]);return r};t.expand=e=>{(e=>{if(!e||2!==e.length)throw new Error(\\\"Expand requires 2 input.\\\");const t=e[0].dims,n=[];e[1].dims[0]>0&&e[1].getBigInt64Array().forEach((e=>n.push(Number(e))));let r=n.length<t.length?0:n.length-t.length,a=t.length<n.length?0:t.length-n.length;for(;r<n.length&&a<t.length;++r,++a)if(n[r]!==t[a]&&1!==n[r]&&1!==t[a])throw new Error(\\\"Expand requires shape to be broadcastable to input\\\")})(e.inputs),e.compute(Object.assign(Object.assign({},t.expandProgramMetadata),{get:()=>((e,t)=>{const n=t[0].dims,s=[];t[1].dims[0]>0&&t[1].getBigInt64Array().forEach((e=>s.push(Number(e))));const u=((e,t)=>e.length>t.length?o(e,t):o(t,e))(n,s),l=r.ShapeUtil.size(u),c=(0,i.createIndicesHelper)(\\\"input\\\",n),p=(0,i.createIndicesHelper)(\\\"output\\\",u);return Object.assign(Object.assign({},e),{getShaderSource:e=>`\\\\n  const inputShape = array<u32, ${n.length}>(${n.map((e=>`${e}u`)).join(\\\",\\\")});\\\\n  \\\\n  fn calculateInputIndex(outputIndices: array<u32, ${u.length}>) -> array<u32,${n.length}> {\\\\n    ${c.indicesVariableDeclaration(\\\"inputIndices\\\")}\\\\n    for (var i = 0; i < ${n.length}; i++) {\\\\n        if (inputShape[i] == 1) {\\\\n            inputIndices[i] = 0;\\\\n        } else {\\\\n            inputIndices[i] = outputIndices[i + ${u.length-n.length}];\\\\n        }\\\\n    }\\\\n    return inputIndices;\\\\n};\\\\n  @group(0) @binding(0) var<storage, read> input : array<f32>;\\\\n  @group(0) @binding(1) var<storage, read_write> output : array<f32>;\\\\n  ${p.o2iImpl}\\\\n  ${c.i2oImpl}\\\\n  ${e.mainStart()}\\\\n  ${e.guardAgainstOutOfBoundsWorkgroupSizes(l)}\\\\n  ${c.indicesVariableDeclaration(\\\"inputIndices\\\")}\\\\n  ${p.indicesVariableDeclaration(\\\"outputIndices\\\")}\\\\n  ${p.o2iCall(\\\"global_idx\\\",\\\"outputIndices\\\")}\\\\n  inputIndices = calculateInputIndex(outputIndices);\\\\n  output[global_idx] = input[${c.i2oExpression(\\\"inputIndices\\\")}];\\\\n}`,outputs:[{dims:u,dataType:t[0].dataType,gpuDataType:a.GpuDataType.default}],dispatchGroup:()=>({x:Math.ceil(l/64)})})})(t.expandProgramMetadata,e.inputs)}),{inputs:[0]})}},997:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseInternalActivationAttributes=t.getActicationSnippet=void 0;const r=n(952);t.getActicationSnippet=e=>{switch(e.activation){case\\\"Relu\\\":return{activationFunction:\\\"\\\",applyActivation:\\\"value = max(value, 0.0);\\\"};case\\\"Sigmoid\\\":return{activationFunction:\\\"\\\",applyActivation:\\\"value = (1.0 / (1.0 + exp(-value)));\\\"};case\\\"Clip\\\":return{activationFunction:`const clip_min_=f32(${e.clipMin});const clip_max_=f32(${e.clipMax});`,applyActivation:\\\"value = clamp(value, clip_min_, clip_max_);\\\"};default:return{activationFunction:\\\"\\\",applyActivation:\\\"\\\"}}},t.parseInternalActivationAttributes=e=>{const t=(null==e?void 0:e.activation)||\\\"\\\";if(\\\"Clip\\\"===t){const[n,a]=(null==e?void 0:e.activation_params)||[r.MIN_CLIP,r.MAX_CLIP];return{activation:t,clipMax:a,clipMin:n,activationCacheKey:`${t}:${n},${a}`}}return{activation:t,activationCacheKey:t}}},271:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseGemmAttributes=t.gemm=void 0;const r=n(952),a=n(387),i=n(163);t.gemm=(e,t)=>{(e=>{if(!e)throw new Error(\\\"Input is missing\\\");if(e.length<2||e.length>3)throw new Error(\\\"Invaid input number.\\\");if(3===e.length&&e[2].dims.length>2)throw new Error(\\\"Invalid input shape of C\\\");if(1!==e[0].dataType||1!==e[1].dataType||3===e.length&&1!==e[2].dataType)throw new Error(\\\"Invalid input type.\\\");if(e[0].dataType!==e[1].dataType||3===e.length&&e[0].dataType!==e[2].dataType)throw new Error(\\\"Input types are mismatched\\\")})(e.inputs),e.compute(((e,t)=>{const n={name:\\\"Gemm\\\",inputTypes:3===e.length?[i.GpuDataType.default,i.GpuDataType.default,i.GpuDataType.default]:[i.GpuDataType.default,i.GpuDataType.default],cacheHint:t.cacheKey};return Object.assign(Object.assign({},n),{get:()=>((e,t,n)=>{const a=t[0].dims.slice(),o=t[1].dims.slice(),[s,u,l]=r.GemmUtil.getShapeOfGemmResult(a,n.transA,o,n.transB,3===t.length?t[2].dims:void 0),c=[s,u];if(!c)throw new Error(\\\"Can't use gemm on the given tensors\\\");const p=r.ShapeUtil.size(c);let d=\\\"\\\";n.transA&&n.transB?d=\\\"value += a[k * M + m] * b[n * K + k];\\\":n.transA&&!n.transB?d=\\\"value += a[k * M + m] * b[k * N + n];\\\":!n.transA&&n.transB?d=\\\"value += a[m * K + k] * b[n * K + k];\\\":n.transA||n.transB||(d=\\\"value += a[m * K + k] * b[k * N + n];\\\");const f=\\\"f32\\\",h=1===n.alpha?\\\"\\\":\\\"value *= alpha;\\\",g=3===t.length?`value += beta * c[${((e,t,n)=>{if(0===n.length)return\\\"0u\\\";const r=1===n.length&&1!==e||2===n.length&&n[0]!==e,a=n[n.length-1]!==t;let i=\\\"0u\\\";return r||(i+=`+ m * ${n[n.length-1]}u`),a||(i+=\\\"+n\\\"),i})(s,u,t[2].dims)}];`:\\\"\\\",m=[`@group(0) @binding(0) var<storage, read> a : array<${f}>;`,`@group(0) @binding(1) var<storage, read> b : array<${f}>;`];return 3===t.length&&m.push(`@group(0) @binding(2) var<storage, read> c : array<${f}>;`),Object.assign(Object.assign({},e),{outputs:[{dims:c,dataType:t[0].dataType,gpuDataType:i.GpuDataType.default}],getShaderSource:e=>`\\\\n  const M: u32 = ${s}u;\\\\n  const N: u32 = ${u}u;\\\\n  const K: u32 = ${l}u;\\\\n  const alpha = ${f}(${n.alpha});\\\\n  const beta = ${f}(${n.beta});\\\\n\\\\n  ${m.join(\\\"\\\\n\\\")}\\\\n  @group(0) @binding(${t.length}) var<storage, read_write> output : array<${f}>;\\\\n\\\\n  ${e.mainStart()}\\\\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes(p)}\\\\n\\\\n    let m = global_id.x / N;\\\\n    let n = global_id.x % N;\\\\n\\\\n    var value = ${f}(0);\\\\n    for (var k: u32 = 0u; k<${l}u; k++) {\\\\n      ${d}\\\\n    }\\\\n\\\\n    ${h}\\\\n    ${g}\\\\n    output[global_id.x] = value;\\\\n\\\\n  }`,dispatchGroup:()=>({x:Math.ceil(p/64)})})})(n,e,t)})})(e.inputs,t))},t.parseGemmAttributes=e=>(0,a.createAttributeWithCacheKey)(e)},522:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.matMul=t.createMatmulProgramInfoLoader=void 0;const r=n(952),a=n(163),i=n(997);t.createMatmulProgramInfoLoader=(e,t)=>{const n=(o=e.length>2,s=t.activationCacheKey,{name:\\\"MatMul\\\",inputTypes:o?[a.GpuDataType.default,a.GpuDataType.default,a.GpuDataType.default]:[a.GpuDataType.default,a.GpuDataType.default],cacheHint:s});var o,s;return Object.assign(Object.assign({},n),{get:()=>((e,t,n)=>{const o=t[0].dims,s=t[1].dims,u=r.BroadcastUtil.calcShape(o,s,!0);if(!u)throw new Error(\\\"Can't use matmul on the given tensors\\\");const l=r.ShapeUtil.size(u),c=\\\"f32\\\",{activationFunction:p,applyActivation:d}=(0,i.getActicationSnippet)(n),f=u[u.length-2],h=o[o.length-1],g=u[u.length-1];return Object.assign(Object.assign({},e),{outputs:[{dims:u,dataType:t[0].dataType,gpuDataType:a.GpuDataType.default}],getShaderSource:e=>`\\\\n  const M: u32 = ${f}u;\\\\n  const N: u32 = ${g}u;\\\\n  const K: u32 = ${h}u;\\\\n\\\\n  @group(0) @binding(0) var<storage, read> a : array<${c}>;\\\\n  @group(0) @binding(1) var<storage, read> b : array<${c}>;\\\\n  @group(0) @binding(2) var<storage, read_write> output : array<${c}>;\\\\n\\\\n  ${p}\\\\n\\\\n  ${e.mainStart()}\\\\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes(l)}\\\\n\\\\n    let stack = global_idx / (M * N);\\\\n    let mn = global_idx % (M * N);\\\\n    let n = global_idx % N;\\\\n    let m = mn / N;\\\\n\\\\n    let offsetA = stack * (M * K);\\\\n    let offsetB = stack * (K * N);\\\\n\\\\n    var value = ${c}(0);\\\\n    for (var k: u32 = 0u; k<${h}u; k++) {\\\\n      value += a[offsetA + m * K + k] * b[offsetB + k * N + n];\\\\n    }\\\\n    ${d}\\\\n    output[global_idx] = value;\\\\n  }`,dispatchGroup:()=>({x:Math.ceil(l/64)})})})(n,e,t)})},t.matMul=e=>{(e=>{if(!e||2!==e.length)throw new Error(\\\"MatMul requires 2 inputs.\\\");if(e[0].dims[e[0].dims.length-1]!==e[1].dims[e[1].dims.length-2])throw new Error(\\\"shared dimension does not match.\\\");if(1!==e[0].dataType||1!==e[1].dataType)throw new Error(\\\"inputs should be float type\\\")})(e.inputs),e.compute((0,t.createMatmulProgramInfoLoader)(e.inputs,{activation:\\\"\\\",activationCacheKey:\\\"\\\"}))}},262:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.globalMaxPool=t.parseGlobalMaxPoolAttributes=t.parseMaxPoolAttributes=t.maxPool=t.globalAveragePool=t.parseGlobalAveragePoolAttributes=t.averagePool=t.parseAveragePoolAttributes=void 0;const r=n(952),a=n(387),i=n(163),o=n(75),s=e=>{if(!e||1!==e.length)throw new Error(\\\"Pool ops requires 1 input.\\\");if(4!==e[0].dims.length)throw new Error(\\\"Pool ops supports 2-D inputs only for now.\\\");if(1!==e[0].dataType)throw new Error(\\\"Invalid input type.\\\")},u=(e,t,n)=>{const a=\\\"NHWC\\\"===t.format,i=a?[e[0].dims[0],e[0].dims[3],e[0].dims[1],e[0].dims[2]]:e[0].dims.slice(),o=Object.hasOwnProperty.call(t,\\\"dilations\\\"),s=t.kernelShape.slice(),u=t.strides.slice(),l=o?t.dilations.slice():[],c=t.pads.slice();r.PoolConvUtil.adjustPoolAttributes(n,i,s,u,l,c);const p=r.PoolConvUtil.computePoolOutputShape(n,i,u,l,s,c,t.autoPad),d=Object.assign({},t);return o?Object.assign(d,{kernelShape:s,strides:u,pads:c,dilations:l,cacheKey:t.cacheKey}):Object.assign(d,{kernelShape:s,strides:u,pads:c,cacheKey:t.cacheKey}),[d,a?[p[0],p[2],p[3],p[1]]:p]},l=(e,t,n,a,i,s,u,l)=>{const c=\\\"NHWC\\\"===a.format,p=t.length,d=r.ShapeUtil.size(n),f=(0,o.createIndicesHelper)(\\\"output\\\",n),h=(0,o.createIndicesHelper)(\\\"x\\\",t);if(a.kernelShape.length<=2){const n=a.kernelShape[a.kernelShape.length-1],r=a.strides[a.strides.length-1],o=a.pads[a.pads.length/2-1],g=p-(c?2:1);let m=\\\"\\\",y=\\\"\\\",b=\\\"\\\";if(m=o+a.pads[a.pads.length-1]!==0?`\\\\n              for (var i: u32 = 0u; i < ${n}u; i++) {\\\\n                xIndices[${g}] = indices[${g}] * ${r} - ${o} + i;\\\\n                if (xIndices[${g}] < 0 || xIndices[${g}] >= ${t[g]}) {\\\\n                  pad++;\\\\n                  continue;\\\\n                }\\\\n                let x_val = x[${h.i2oExpression(\\\"xIndices\\\")}];\\\\n                ${i}\\\\n              }`:`\\\\n              for (var i: u32 = 0u; i < ${n}u; i++) {\\\\n                xIndices[${g}] = indices[${g}] * ${r} - ${o} + i;\\\\n                let x_val = x[${h.i2oExpression(\\\"xIndices\\\")}];\\\\n                ${i}\\\\n              }`,2===a.kernelShape.length){const e=a.kernelShape[a.kernelShape.length-2],r=a.strides[a.strides.length-2],i=a.pads[a.pads.length/2-2],o=a.pads[a.pads.length-2],s=p-(c?3:2),u=t[s];y=i+o!==0?`\\\\n                for (var j: u32 = 0u; j < ${e}u; j++) {\\\\n                  xIndices[${s}] = indices[${s}] * ${r} - ${i} + j;\\\\n                  if (xIndices[${s}] < 0 || xIndices[${s}] >= ${u}) {\\\\n                    pad+= ${n};\\\\n                    continue;\\\\n                  }\\\\n              `:`\\\\n                for (var j: u32 = 0u; j < ${e}u; j++) {\\\\n                  xIndices[${s}] = indices[${s}] * ${r} - ${i} + j;\\\\n                `,b=\\\"\\\\n              }\\\\n            \\\"}return`\\\\n            @group(0) @binding(0) var<storage, read> x : array<${u}>;\\\\n            @group(0) @binding(1) var<storage, read_write> output : array<${u}>;\\\\n\\\\n            ${f.o2iImpl}\\\\n            ${h.i2oImpl}\\\\n\\\\n            ${e.mainStart()}\\\\n              ${e.guardAgainstOutOfBoundsWorkgroupSizes(d)}\\\\n\\\\n              ${f.indicesVariableDeclaration(\\\"indices\\\")}\\\\n              ${f.o2iCall(\\\"global_idx\\\",\\\"indices\\\")}\\\\n              ${f.indicesVariableDeclaration(\\\"xIndices\\\")}\\\\n              ${f.o2iCall(\\\"global_idx\\\",\\\"xIndices\\\")}\\\\n\\\\n              var value: ${u} = ${u}(${l});\\\\n              var pad = 0;\\\\n              ${y}\\\\n              ${m}\\\\n              ${b}\\\\n              ${s}\\\\n\\\\n              output[global_idx] = value;\\\\n            }`}{if(c)throw new Error(\\\"Pooling with kernelShape.length > 2 is not supported for NHWC format.\\\");const n=r.ShapeUtil.size(a.kernelShape),o=r.ShapeUtil.computeStrides(a.kernelShape),g=o.length,m=a.pads.length;let y=\\\"\\\";return y=a.pads.reduce(((e,t)=>e+t))?`\\\\n                if (xIndices[j] >= inputDims[j]) {\\\\n                  pad++;\\\\n                  isPad = true;\\\\n                  break;\\\\n                }\\\\n              }\\\\n              if (!isPad) {\\\\n                let x_val = x[${h.i2oExpression(\\\"xIndices\\\")}];\\\\n                ${i}\\\\n              }`:`\\\\n              }\\\\n              let x_val = x[${h.i2oExpression(\\\"xIndices\\\")}];\\\\n              ${i}\\\\n            `,`\\\\n            @group(0) @binding(0) var<storage, read> x : array<${u}>;\\\\n            @group(0) @binding(1) var<storage, read_write> output : array<${u}>;\\\\n\\\\n            ${f.o2iImpl}\\\\n            ${h.i2oImpl}\\\\n\\\\n            const pads = array<u32, ${m}>(${a.pads.map((e=>`${e}u`)).join(\\\",\\\")});\\\\n            const inputDims = array<u32, ${p}>(${t.map((e=>`${e}u`)).join(\\\",\\\")});\\\\n            const kernelStrides = array<u32, ${g}>(${o.map((e=>`${e}u`)).join(\\\",\\\")});\\\\n            const strides = array<u32, ${g}>(${a.strides.map((e=>`${e}u`)).join(\\\",\\\")});\\\\n\\\\n            ${e.mainStart()}\\\\n              ${e.guardAgainstOutOfBoundsWorkgroupSizes(d)}\\\\n\\\\n              ${f.indicesVariableDeclaration(\\\"indices\\\")}\\\\n              ${f.o2iCall(\\\"global_idx\\\",\\\"indices\\\")}\\\\n              ${f.indicesVariableDeclaration(\\\"xIndices\\\")}\\\\n              ${f.o2iCall(\\\"global_idx\\\",\\\"xIndices\\\")}\\\\n\\\\n              var offsets: array<u32, ${g}>;\\\\n\\\\n              var value = ${u}(${l});\\\\n              var pad = 0;\\\\n              var isPad = false;\\\\n\\\\n              for (var i: u32 = 0u; i < ${n}u; i++) {\\\\n                var offset = i;\\\\n                for (var j = 0u; j < ${g-1}u; j++) {\\\\n                  offsets[j] = offset / kernelStrides[j];\\\\n                  offset -= offsets[j] * kernelStrides[j];\\\\n                }\\\\n                offsets[${g-1}] = offset;\\\\n\\\\n                isPad = false;\\\\n                for (var j = ${p-g}u; j < ${p}u; j++) {\\\\n                  xIndices[j] = indices[j] * strides[j - ${p-g}u]\\\\n                    + offsets[j - ${p-g}u] - pads[j - 2u];\\\\n                  ${y}\\\\n              }\\\\n              ${s}\\\\n\\\\n              output[global_idx] = value;\\\\n            }`}},c=e=>({format:e.format,autoPad:[\\\"NOTSET\\\",\\\"VALID\\\",\\\"SAME_UPPER\\\",\\\"SAME_LOWER\\\"][e.auto_pad],ceilMode:e.ceil_mode,kernelShape:e.kernel_shape,strides:e.strides,pads:e.pads}),p=(e,t,n,a)=>{const[o,s]=u(e,a,n),c=r.ShapeUtil.size(o.kernelShape),p=\\\"f32\\\";let d=\\\"\\\";return o.countIncludePad?d+=`value /= ${p}(${c});`:d+=`value /= ${p}(${c} - pad);`,Object.assign(Object.assign({},t),{outputs:[{dims:s,dataType:e[0].dataType,gpuDataType:i.GpuDataType.default}],getShaderSource:t=>l(t,e[0].dims,s,o,\\\"value += x_val;\\\",d,p,\\\"0.0\\\"),dispatchGroup:()=>({x:Math.ceil(r.ShapeUtil.size(s)/64)})})};t.parseAveragePoolAttributes=e=>{const t=0!==e.count_include_pad,n=c(e);if(0!==n.ceilMode)throw new Error(\\\"using ceil() in shape computation is not yet supported for AveragePool\\\");return(0,a.createAttributeWithCacheKey)(Object.assign({countIncludePad:t},n))},t.averagePool=(e,t)=>{s(e.inputs);const n={name:\\\"AveragePool\\\",inputTypes:[i.GpuDataType.default],cacheHint:t.cacheKey};e.compute(Object.assign(Object.assign({},n),{get:()=>p(e.inputs,n,!1,t)}))};const d={autoPad:\\\"\\\",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[],cacheKey:\\\"\\\"};t.parseGlobalAveragePoolAttributes=e=>{const t=e.format;return Object.assign(Object.assign({format:t},d),{cacheKey:t})},t.globalAveragePool=(e,t)=>{s(e.inputs);const n={name:\\\"GlobalAveragePool\\\",inputTypes:[i.GpuDataType.default],cacheHint:t.cacheKey};e.compute(Object.assign(Object.assign({},n),{get:()=>p(e.inputs,n,!0,t)}))};const f=(e,t,n,a)=>{const[o,s]=u(e,a,n);return Object.assign(Object.assign({},t),{outputs:[{dims:s,dataType:e[0].dataType,gpuDataType:i.GpuDataType.default}],getShaderSource:t=>l(t,e[0].dims,s,o,\\\"\\\\n      value = max(x_val, value);\\\\n    \\\",\\\"\\\",\\\"f32\\\",\\\"-1e5\\\"),dispatchGroup:()=>({x:Math.ceil(r.ShapeUtil.size(s)/64)})})};t.maxPool=(e,t)=>{s(e.inputs);const n={name:\\\"MaxPool\\\",inputTypes:[i.GpuDataType.default],cacheHint:t.cacheKey};e.compute(Object.assign(Object.assign({},n),{get:()=>f(e.inputs,n,!1,t)}))},t.parseMaxPoolAttributes=e=>{const t=e.storage_order,n=e.dilations,r=c(e);if(0!==t)throw new Error(\\\"column major storage order is not yet supported for MaxPool\\\");if(0!==r.ceilMode)throw new Error(\\\"using ceil() in shape computation is not yet supported for MaxPool\\\");return(0,a.createAttributeWithCacheKey)(Object.assign({storageOrder:t,dilations:n},r))},t.parseGlobalMaxPoolAttributes=e=>{const t=e.format;return Object.assign(Object.assign({format:t},d),{cacheKey:t})},t.globalMaxPool=(e,t)=>{s(e.inputs);const n={name:\\\"GlobalMaxPool\\\",inputTypes:[i.GpuDataType.default],cacheHint:t.cacheKey};e.compute(Object.assign(Object.assign({},n),{get:()=>f(e.inputs,n,!0,t)}))}},31:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseReduceAttributes=t.reduceSumSquare=t.reduceSum=t.reduceProd=t.reduceMin=t.reduceMean=t.reduceMax=t.reduceLogSumExp=t.reduceL2=t.reduceL1=t.reduceLogSum=void 0;const r=n(952),a=n(387),i=n(163),o=n(75),s=e=>{if(!e||0===e.length||e.length>2)throw new Error(\\\"Reduce op requires 1 or 2 inputs.\\\");if(2===e.length&&1!==e[1].dims.length)throw new Error(\\\"Invalid axes input dims.\\\");if(1!==e[0].dataType)throw new Error(\\\"Invalid input type.\\\")},u=()=>[\\\"\\\",\\\"\\\",\\\"value = _A[inputIdx];\\\",\\\"\\\"],l=(e,t,n,s)=>{const l=1===e.length?n:((e,t)=>{const n=[];return e[1].dims[0]>0&&e[1].getBigInt64Array().forEach((e=>n.push(Number(e)))),(0,a.createAttributeWithCacheKey)({axes:n,keepDims:t.keepDims,noopWithEmptyAxes:t.noopWithEmptyAxes})})(e,n),c={name:t,inputTypes:[i.GpuDataType.default],cacheHint:l.cacheKey};return Object.assign(Object.assign({},c),{get:()=>((e,t,n,a)=>{const s=[],u=t[0].dims,l=[],c=r.ShapeUtil.normalizeAxes(n.axes,t[0].dims.length),p=t[0].dims.length-(n.keepDims?0:c.length),d=a(t,c),f=(0,o.createIndicesHelper)(\\\"input\\\",u),h=\\\"\\\"===d[1]?\\\"\\\":`let inputIdx = ${f.i2oExpression(\\\"inputIndices\\\")};`;let g=`\\\\n          let inputIdx = ${f.i2oExpression(\\\"inputIndices\\\")};\\\\n          ${d[2]};`;const m=!n.noopWithEmptyAxes&&0===n.axes.length;for(let e=0;e<t[0].dims.length;e++)m||c.indexOf(e)>=0?(n.keepDims&&s.push(1),g=`for(var j${e}: u32 = 0; j${e} < ${t[0].dims[e]}; j${e}++) {\\\\n                            inputIndices[${e}] = j${e};\\\\n                            ${g}\\\\n                          }`):(p>1?l.push(`inputIndices[${e}] = outputIndices[${s.length}];`):l.push(`inputIndices[${e}] = outputIndices;`),s.push(t[0].dims[e]));const y=(0,o.createIndicesHelper)(\\\"output\\\",s),b=r.ShapeUtil.size(s),v=\\\"f32\\\";return Object.assign(Object.assign({},e),{getShaderSource:e=>`\\\\n          @group(0) @binding(0) var<storage, read> _A : array<${v}>;\\\\n          @group(0) @binding(1) var<storage, read_write> output : array<${v}>;\\\\n\\\\n          ${y.o2iImpl}\\\\n          ${f.i2oImpl}\\\\n\\\\n          ${e.mainStart()}\\\\n          ${e.guardAgainstOutOfBoundsWorkgroupSizes(b)}\\\\n          ${f.indicesVariableDeclaration(\\\"inputIndices\\\")}\\\\n          ${y.indicesVariableDeclaration(\\\"outputIndices\\\")}\\\\n          ${y.o2iCall(\\\"global_idx\\\",\\\"outputIndices\\\")}\\\\n\\\\n          var value = ${v}(0);\\\\n\\\\n          ${l.join(\\\"\\\\n\\\")}\\\\n          ${d[0]}       // init ops for reduce max/min\\\\n          ${h}\\\\n          ${d[1]}\\\\n          ${g}\\\\n          ${d[3]}       // final computation for reduce mean\\\\n          output[global_idx] = value;\\\\n        }`,outputs:[{dims:s,dataType:t[0].dataType,gpuDataType:i.GpuDataType.default}],dispatchGroup:()=>({x:Math.ceil(b/64)})})})(c,[e[0]],l,l.noopWithEmptyAxes&&0===l.axes.length?u:s)})};t.reduceLogSum=(e,t)=>{s(e.inputs),e.compute(l(e.inputs,\\\"ReduceLogSum\\\",t,(()=>[\\\"value = 0.0;\\\",\\\"\\\",\\\"value += _A[inputIdx];\\\",\\\"value = log(value);\\\"])),{inputs:[0]})},t.reduceL1=(e,t)=>{s(e.inputs),e.compute(l(e.inputs,\\\"ReduceL1\\\",t,(()=>[\\\"value = 0.0;\\\",\\\"\\\",\\\"value += abs(_A[inputIdx]);\\\",\\\"\\\"])),{inputs:[0]})},t.reduceL2=(e,t)=>{s(e.inputs),e.compute(l(e.inputs,\\\"ReduceL2\\\",t,(()=>[\\\"var t = f32(0); value = 0.0;\\\",\\\"\\\",\\\"t = _A[inputIdx]; value += (t * t);\\\",\\\"value = sqrt(value);\\\"])),{inputs:[0]})},t.reduceLogSumExp=(e,t)=>{s(e.inputs),e.compute(l(e.inputs,\\\"ReduceLogSumExp\\\",t,(()=>[\\\"value = 0.0;\\\",\\\"\\\",\\\"value += exp(_A[inputIdx]);\\\",\\\"value = log(value);\\\"])),{inputs:[0]})},t.reduceMax=(e,t)=>{s(e.inputs),e.compute(l(e.inputs,\\\"ReduceMax\\\",t,((e,t)=>{const n=[];for(let r=0;r<e[0].dims.length;r++)(t.indexOf(r)>=0||0===t.length)&&n.push(`inputIndices[${r}] = 0;`);return[`${n.join(\\\"\\\\n\\\")}`,\\\"value = _A[inputIdx];\\\",\\\"value = max(value, _A[inputIdx]);\\\",\\\"\\\"]})),{inputs:[0]})},t.reduceMean=(e,t)=>{s(e.inputs),e.compute(l(e.inputs,\\\"ReduceMean\\\",t,((e,t)=>{let n=1;for(let r=0;r<e[0].dims.length;r++)(t.indexOf(r)>=0||0===t.length)&&(n*=e[0].dims[r]);return[\\\"value = 0.0;\\\",\\\"\\\",\\\"value += _A[inputIdx];\\\",`value = value / ${n}.;`]})),{inputs:[0]})},t.reduceMin=(e,t)=>{s(e.inputs),e.compute(l(e.inputs,\\\"ReduceMin\\\",t,((e,t)=>{const n=[];for(let r=0;r<e[0].dims.length;r++)(t.indexOf(r)>=0||0===t.length)&&n.push(`inputIndices[${r}] = 0;`);return[`${n.join(\\\"\\\\n\\\")}`,\\\"value = _A[inputIdx];\\\",\\\"value = min(value, _A[inputIdx]);\\\",\\\"\\\"]})),{inputs:[0]})},t.reduceProd=(e,t)=>{s(e.inputs),e.compute(l(e.inputs,\\\"ReduceProd\\\",t,(()=>[\\\"value = 1.0;\\\",\\\"\\\",\\\"value *= _A[inputIdx];\\\",\\\"\\\"])),{inputs:[0]})},t.reduceSum=(e,t)=>{s(e.inputs),e.compute(l(e.inputs,\\\"ReduceSum\\\",t,(()=>[\\\"value = 0.0;\\\",\\\"\\\",\\\"value += _A[inputIdx];\\\",\\\"\\\"])),{inputs:[0]})},t.reduceSumSquare=(e,t)=>{s(e.inputs),e.compute(l(e.inputs,\\\"ReduceSumSquare\\\",t,(()=>[\\\"var t = f32(0); value = 0.0;\\\",\\\"\\\",\\\"t = _A[inputIdx]; value += t * t;\\\",\\\"\\\"])),{inputs:[0]})},t.parseReduceAttributes=e=>(0,a.createAttributeWithCacheKey)(e)},101:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseSliceAttributes=t.slice=void 0;const r=n(952),a=n(387),i=n(163),o=n(75),s=(e,t)=>{const n=[];if(e.length>t)if(7===e[t].dataType)e[t].getBigInt64Array().forEach((e=>n.push(Number(e))));else{if(6!==e[1].dataType)throw new Error(`Input ${t} must be an array of int32 or int64`);e[t].getInt32Array().forEach((e=>n.push(Number(e))))}return n},u=(e,t,n,r,a)=>{let i=e;return e<0&&(i+=n[r[t]]),a[t]<0?Math.max(0,Math.min(i,n[r[t]]-1)):Math.max(0,Math.min(i,n[r[t]]))},l=(e,t)=>{const n=((e,t)=>{if(e.length>1){const t=s(e,1),n=s(e,2);let r=s(e,3);return 0===r.length&&(r=[...Array(e[0].dims.length).keys()]),(0,a.createAttributeWithCacheKey)({starts:t,ends:n,axes:r})}return t})(e,t),l={name:\\\"Slice\\\",inputTypes:[i.GpuDataType.default],cacheHint:n.cacheKey+(e.length>4?\\\"steps_\\\"+e[4].dims.toString():\\\"\\\")};return Object.assign(Object.assign({},l),{get:()=>((e,t,n)=>{const a=t[0].dims,l=r.ShapeUtil.size(a),c=n.axes.length>0?r.ShapeUtil.normalizeAxes(n.axes,a.length):[...Array(a.length).keys()];let p=s(t,4);p.forEach((e=>0!==e||(()=>{throw new Error(\\\"step cannot be 0\\\")}))),0===p.length&&(p=Array(c.length).fill(1));const d=n.starts.map(((e,t)=>u(e,t,a,c,p))),f=n.ends.map(((e,t)=>u(e,t,a,c,p)));if(c.length!==a.length)for(let e=0;e<a.length;++e)c.includes(e)||(d.splice(e,0,0),f.splice(e,0,a[e]),p.splice(e,0,1));const h=p.map((e=>Math.sign(e)));p.forEach(((e,t,n)=>{if(e<0){const r=(f[t]-d[t])/e,a=d[t],i=a+r*p[t];d[t]=i,f[t]=a,n[t]=-e}}));const g=a.slice(0);c.forEach(((e,t)=>{g[e]=Math.ceil((f[e]-d[e])/p[e])}));const m={dims:g,dataType:t[0].dataType,gpuDataType:i.GpuDataType.default},y=(0,o.createIndicesHelper)(\\\"output\\\",g),b=(0,o.createIndicesHelper)(\\\"input\\\",a),v=r.ShapeUtil.size(g);return Object.assign(Object.assign({},e),{getShaderSource:e=>`\\\\n        @group(0) @binding(0) var<storage, read> input: array<f32>;\\\\n        @group(0) @binding(1) var<storage, read_write> output: array<f32>;\\\\n        const signs = array<i32, ${h.length}>(${h.map((e=>`${e}i`)).join(\\\",\\\")});\\\\n        const starts = array<u32, ${d.length}>(${d.map((e=>`${e}u`)).join(\\\",\\\")});\\\\n        const ends = array<u32, ${f.length}>(${f.map((e=>`${e}u`)).join(\\\",\\\")});\\\\n        const steps = array<u32, ${p.length}>(${p.map((e=>`${e}u`)).join(\\\",\\\")});\\\\n        const inputShape = array<u32, ${a.length}>(${a.map((e=>`${e}u`)).join(\\\",\\\")});\\\\n\\\\n        ${y.o2iImpl}\\\\n        ${b.i2oImpl}\\\\n        ${((e,t)=>{const n=(0,o.createIndicesHelper)(\\\"output\\\",t),r=(0,o.createIndicesHelper)(\\\"input\\\",e);return`fn calculateInputIndices(outputIndices: ${n.iType}) -> ${r.iType} {\\\\n          ${r.indicesVariableDeclaration(\\\"inputIndices\\\")};\\\\n          var carry = 0u;\\\\n          for (var i = ${e.length}; i >= 0; i--) {\\\\n            var outputIndex = ${1===t.length?\\\"outputIndices\\\":\\\"outputIndices[i]\\\"};\\\\n            var inputIndex = outputIndex * steps[i] + starts[i] + carry;\\\\n            carry = inputIndex / inputShape[i];\\\\n            inputIndex = inputIndex % inputShape[i];\\\\n            if (signs[i] < 0) {\\\\n              inputIndex = inputShape[i] - inputIndex - 1u + starts[i];\\\\n            }\\\\n            ${1===e.length?\\\"inputIndices\\\":\\\"inputIndices[i]\\\"} = inputIndex;\\\\n          }\\\\n          return inputIndices;\\\\n      }`})(a,g)}\\\\n        ${e.mainStart()}\\\\n          ${e.guardAgainstOutOfBoundsWorkgroupSizes(v)}\\\\n          ${y.indicesVariableDeclaration(\\\"outputIndices\\\")}\\\\n          ${y.o2iCall(\\\"global_idx\\\",\\\"outputIndices\\\")}\\\\n          ${b.indicesVariableDeclaration(\\\"inputIndices\\\")}\\\\n          inputIndices = calculateInputIndices(outputIndices);\\\\n          output[global_idx] = input[${b.i2oExpression(\\\"inputIndices\\\")}];\\\\n      }`,outputs:[m],dispatchGroup:()=>({x:Math.ceil(l/64)})})})(l,e,n)})};t.slice=(e,t)=>{((e,t)=>{if(!e||e.length<1)throw new Error(\\\"too few inputs\\\");if(0!==t.axes.length){if(t.axes.length!==t.starts.length||t.axes.length!==t.ends.length)throw new Error(\\\"axes, starts and ends must have the same length\\\")}else if(t.starts.length!==t.ends.length)throw new Error(\\\"starts and ends must have the same length\\\");e.slice(1).forEach(((t,n)=>{if(6!==e[n+1].dataType&&7!==e[n+1].dataType)throw new Error(`Input ${n} must be an array of int32 or int64`)}))})(e.inputs,t),e.compute(l(e.inputs,t),{inputs:[0]})},t.parseSliceAttributes=e=>{const t=e.starts,n=e.ends,r=e.axes;return(0,a.createAttributeWithCacheKey)({starts:t,ends:n,axes:r,steps:[]})}},67:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseSplitAttributes=t.split=void 0;const r=n(952),a=n(387),i=n(163),o=n(75);t.split=(e,t)=>{(e=>{if(!e||e.length<1)throw new Error(\\\"too few inputs\\\")})(e.inputs),e.compute(((e,t)=>{const n=1===e.length?t:((e,t)=>{const n=[];return e[1].dims[0]>0&&e[1].getBigInt64Array().forEach((e=>n.push(Number(e)))),(0,a.createAttributeWithCacheKey)({numOutputs:t.numOutputs,axis:t.axis,splitSizes:n})})(e,t),s={name:\\\"Split\\\",inputTypes:[i.GpuDataType.default],cacheHint:n.cacheKey};return Object.assign(Object.assign({},s),{get:()=>((e,t,n,a=\\\"f32\\\")=>{const s=t[0].dims,u=r.ShapeUtil.size(s),l=s.length,c=n.axis,p=c<0?s.length+c:c,d=new Array(n.numOutputs),f=new Array(n.numOutputs),h=(0,o.createIndicesHelper)(\\\"input\\\",s),g=new Array(n.numOutputs),m=[],y=[];let b=0;for(let e=0;e<n.numOutputs;e++){b+=n.splitSizes[e],g[e]=b,d[e]=`@group(0) @binding(${e+1}) var<storage, read_write> output${e} : array<${a}>;`;const r=s.slice();r[n.axis]=n.splitSizes[e],y.push(r),f[e]=(0,o.createIndicesHelper)(`output${e}`,y[e]),m.push({dims:y[e],dataType:t[0].dataType,gpuDataType:i.GpuDataType.default})}const v=l<2?\\\"indices\\\":`indices[${p}]`;return Object.assign(Object.assign({},e),{getShaderSource:e=>{return`\\\\n  @group(0) @binding(0) var<storage, read> input : array<${a}>;\\\\n  ${d.join(\\\"\\\\n\\\")}\\\\n  ${h.o2iImpl}\\\\n  ${f.map((e=>e.i2oImpl)).join(\\\"\\\\n\\\")}\\\\n  const sizeInConcatAxis = array<u32, ${g.length}>(${g.map((e=>`${e}u`)).join(\\\",\\\")});\\\\n  ${t=g.length,`\\\\nfn calculateOutputIndex(index: u32) -> u32 {\\\\n    for (var i: u32 = 0u; i < ${t}u; i += 1u ) {\\\\n    if (index < sizeInConcatAxis[i]) {\\\\n        return i;\\\\n    }\\\\n    }\\\\n    return ${t}u;\\\\n}`}\\\\n  ${(e=>{const t=e.length,n=[];for(let r=0;r<t;++r){const a=`output${r}[${e[r].i2oExpression(\\\"indices\\\",!0)}] = input[global_idx];`;1===t?n.push(a):0===r?n.push(`if (outputNumber == ${r}u) { ${a} }`):r===t-1?n.push(`else { ${a} }`):n.push(`else if (outputNumber == ${r}) { ${a} }`)}return`\\\\n      fn writeBufferData(outputNumber: u32, indices: ptr<function, ${e[0].iType}>, global_idx: u32) {\\\\n        ${n.join(\\\"\\\\n\\\")}\\\\n      }`})(f)}\\\\n\\\\n  ${e.mainStart()}\\\\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes(u)}\\\\n\\\\n    ${h.indicesVariableDeclaration(\\\"indices\\\")}\\\\n    ${h.o2iCall(\\\"global_idx\\\",\\\"indices\\\")}\\\\n    let outputNumber = calculateOutputIndex(${v});\\\\n    if (outputNumber != 0) {\\\\n        ${v} -= sizeInConcatAxis[outputNumber - 1u];\\\\n    }\\\\n    writeBufferData(outputNumber, &indices, global_idx);\\\\n  }`;var t},outputs:m,dispatchGroup:()=>({x:Math.ceil(u/64)})})})(s,[e[0]],t)})})(e.inputs,t),{inputs:[0]})},t.parseSplitAttributes=e=>{const t=e.axis,n=e.splitSizes,r=e.numOutputs<0?n.length:e.numOutputs;if(r!==n.length)throw new Error(\\\"numOutputs and splitSizes lengh must be equal\\\");return(0,a.createAttributeWithCacheKey)({axis:t,numOutputs:r,splitSizes:n})}},625:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseTransposeAttributes=t.transpose=t.createTransposeProgramInfo=t.transposeProgramMetadata=void 0;const r=n(952),a=n(387),i=n(163),o=n(75);t.transposeProgramMetadata={name:\\\"Transpose\\\",inputTypes:[i.GpuDataType.default]};const s=(e,t)=>t&&t.length!==e.length?[...e.keys()].reverse():t;t.createTransposeProgramInfo=(e,n)=>{const a=e.dims,u=s(a,n),l=((e,t)=>r.ShapeUtil.sortBasedOnPerm(e,s(e,t)))(a,u),c=a.length,p=r.ShapeUtil.size(l),d=(0,o.createIndicesHelper)(\\\"output\\\",l),f=(0,o.createIndicesHelper)(\\\"a\\\",a);return Object.assign(Object.assign({},t.transposeProgramMetadata),{outputs:[{dims:l,dataType:e.dataType,gpuDataType:i.GpuDataType.default}],getShaderSource:e=>`\\\\n  @group(0) @binding(0) var<storage, read> a : array<f32>;\\\\n  @group(0) @binding(1) var<storage, read_write> output : array<f32>;\\\\n\\\\n  ${((e,t)=>{const n=[];n.push(`fn perm(a: ptr<function, array<u32, ${t}>>, i: ptr<function, array<u32, ${t}>>) {`);for(let r=0;r<t;++r)n.push(`\\\\t(*a)[${e[r]}]=(*i)[${r}];`);return n.push(\\\"\\\\t}\\\"),n.join(\\\"\\\\n\\\")})(u,c)}\\\\n  ${d.o2iImpl}\\\\n  ${f.i2oImpl}\\\\n\\\\n  ${e.mainStart()}\\\\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes(p)}\\\\n\\\\n    ${d.indicesVariableDeclaration(\\\"indices\\\")}\\\\n    ${d.o2iCall(\\\"global_idx\\\",\\\"indices\\\")}\\\\n    ${f.indicesVariableDeclaration(\\\"aIndices\\\")}\\\\n    perm(&aIndices, &indices);\\\\n\\\\n    output[global_idx] = a[${f.i2oExpression(\\\"aIndices\\\")}];\\\\n  }`,dispatchGroup:()=>({x:Math.ceil(p/64)})})},t.transpose=(e,n)=>{(e=>{if(!e||1!==e.length)throw new Error(\\\"Transpose requires 1 input.\\\");if(1!==e[0].dataType)throw new Error(\\\"input should be float tensor\\\")})(e.inputs),e.compute(Object.assign(Object.assign({},t.transposeProgramMetadata),{cacheHint:n.cacheKey,get:()=>(0,t.createTransposeProgramInfo)(e.inputs[0],n.perm)}))},t.parseTransposeAttributes=e=>(0,a.createAttributeWithCacheKey)({perm:e.perm})},302:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.thresholdedRelu=t.tanh=t.tan=t.sqrt=t.sinh=t.sin=t.sigmoid=t.relu=t.reciprocal=t.neg=t.leakyRelu=t.floor=t.exp=t.erf=t.elu=t.parseAlphaAttributes=t.cosh=t.cos=t.ceil=t.clip=t.clipV10=t.atanh=t.atan=t.asinh=t.asin=t.acosh=t.acos=t.abs=void 0;const r=n(952),a=n(387),i=n(163),o=(e,t,n,a,o)=>{const s={name:t,inputTypes:[i.GpuDataType.default],cacheHint:o};return Object.assign(Object.assign({},s),{get:()=>((e,t,n,a)=>Object.assign(Object.assign({},e),{getShaderSource:e=>((e,t,n,r)=>{const a=Math.ceil(t/4);let i=\\\"\\\";return i=\\\"string\\\"==typeof n?`${n}(a)`:n(\\\"a\\\"),`\\\\n  @group(0) @binding(0) var<storage, read> inputData : array<vec4<f32>>;\\\\n  @group(0) @binding(1) var<storage, read_write> outputData : array<vec4<f32>>;\\\\n\\\\n  ${null!=r?r:\\\"\\\"}\\\\n\\\\n  ${e.mainStart()}\\\\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes(a)}\\\\n\\\\n    let a = inputData[global_idx];\\\\n    outputData[global_idx] = ${i};\\\\n  }`})(e,r.ShapeUtil.size(t.dims),n,a),outputs:[{dims:t.dims,dataType:t.dataType,gpuDataType:i.GpuDataType.default}],dispatchGroup:e=>({x:Math.ceil(r.ShapeUtil.size(e[0].dims)/64/4)})}))(s,e,n,a)})};t.abs=e=>{e.compute(o(e.inputs[0],\\\"Abs\\\",\\\"abs\\\"))},t.acos=e=>{e.compute(o(e.inputs[0],\\\"Acos\\\",\\\"acos\\\"))},t.acosh=e=>{e.compute(o(e.inputs[0],\\\"Acosh\\\",\\\"acosh\\\"))},t.asin=e=>{e.compute(o(e.inputs[0],\\\"Asin\\\",\\\"asin\\\"))},t.asinh=e=>{e.compute(o(e.inputs[0],\\\"Asinh\\\",\\\"asinh\\\"))},t.atan=e=>{e.compute(o(e.inputs[0],\\\"Atan\\\",\\\"atan\\\"))},t.atanh=e=>{e.compute(o(e.inputs[0],\\\"Atanh\\\",\\\"atanh\\\"))},t.clipV10=(e,t)=>{e.compute(o(e.inputs[0],\\\"Clip\\\",(e=>`clamp(${e}, clip_min_, clip_max_)`),`\\\\n    const clip_min_: vec4<f32> = vec4(f32(${t.min}));\\\\n    const clip_max_: vec4<f32> = vec4(f32(${t.max}));\\\\n`,t.cacheKey),{inputs:[0]})},t.clip=e=>{const n=(e=>{const t=e.length>=2?e[1].getFloat32Array()[0]:r.MIN_CLIP,n=e.length>=3?e[2].getFloat32Array()[0]:r.MAX_CLIP;return(0,a.createAttributeWithCacheKey)({min:t,max:n})})(e.inputs);(0,t.clipV10)(e,n)},t.ceil=e=>{e.compute(o(e.inputs[0],\\\"Ceil\\\",\\\"ceil\\\"))},t.cos=e=>{e.compute(o(e.inputs[0],\\\"Cos\\\",\\\"cos\\\"))},t.cosh=e=>{e.compute(o(e.inputs[0],\\\"Cosh\\\",\\\"cosh\\\"))},t.parseAlphaAttributes=e=>(0,a.createAttributeWithCacheKey)(e),t.elu=(e,t)=>{e.compute(o(e.inputs[0],\\\"Elu\\\",(e=>`elu_vf32(${e})`),`\\\\n  const elu_alpha_: f32 = f32(${t.alpha});\\\\n\\\\n  fn elu_f32(a: f32) -> f32 {\\\\n  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);\\\\n  }\\\\n\\\\n  fn elu_vf32(v: vec4<f32>) -> vec4<f32> {\\\\n  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));\\\\n  }`,t.cacheKey))},t.erf=e=>{e.compute(o(e.inputs[0],\\\"Erf\\\",(e=>`erf_vf32(${e})`),\\\"\\\\n  const r0: f32 = 0.3275911;\\\\n  const r1: f32 = 0.254829592;\\\\n  const r2: f32 = -0.284496736;\\\\n  const r3: f32 = 1.421413741;\\\\n  const r4: f32 = -1.453152027;\\\\n  const r5: f32 = 1.061405429;\\\\n\\\\n  fn erf_vf32(v: vec4<f32>) -> vec4<f32> {\\\\n    let absv = abs(v);\\\\n    let x = 1.0 / (1.0 + r0 * absv);\\\\n    return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));\\\\n  }\\\"))},t.exp=e=>{e.compute(o(e.inputs[0],\\\"Exp\\\",\\\"exp\\\"))},t.floor=e=>{e.compute(o(e.inputs[0],\\\"Floor\\\",\\\"floor\\\"))},t.leakyRelu=(e,t)=>{e.compute(o(e.inputs[0],\\\"LeakyRelu\\\",(e=>`select(leaky_relu_alpha_ * ${e}, ${e}, ${e} >= vec4<f32>(0.0))`),`const leaky_relu_alpha_: f32 = f32(${t.alpha});`,t.cacheKey))},t.neg=e=>{e.compute(o(e.inputs[0],\\\"Neg\\\",(e=>`-${e}`)))},t.reciprocal=e=>{e.compute(o(e.inputs[0],\\\"Reciprocal\\\",(e=>`1.0/${e}`)))},t.relu=e=>{e.compute(o(e.inputs[0],\\\"Relu\\\",(e=>`select(vec4<f32>(0.0), ${e}, ${e} > vec4<f32>(0.0))`)))},t.sigmoid=e=>{e.compute(o(e.inputs[0],\\\"Sigmoid\\\",(e=>`(1.0 / (1.0 + exp(-${e})))`)))},t.sin=e=>{e.compute(o(e.inputs[0],\\\"Sin\\\",\\\"sin\\\"))},t.sinh=e=>{e.compute(o(e.inputs[0],\\\"Sinh\\\",\\\"sinh\\\"))},t.sqrt=e=>{e.compute(o(e.inputs[0],\\\"Sqrt\\\",\\\"sqrt\\\"))},t.tan=e=>{e.compute(o(e.inputs[0],\\\"Tan\\\",\\\"tan\\\"))},t.tanh=e=>{e.compute(o(e.inputs[0],\\\"Tanh\\\",\\\"tanh\\\"))},t.thresholdedRelu=(e,t)=>(e.compute(o(e.inputs[0],\\\"ThresholdedRelu\\\",(e=>`select(vec4<f32>(0.0), ${e}, ${e} > thresholded_relu_alpha_)`),`const thresholded_relu_alpha_: vec4<f32> = vec4<f32>(${t.alpha});`,t.cacheKey)),0)},305:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.ProgramManager=void 0;const r=n(955),a=n(75);t.ProgramManager=class{constructor(e){this.backend=e,this.repo=new Map,this.attributesBound=!1}getArtifact(e){return this.repo.get(e)}setArtifact(e,t){this.repo.set(e,t)}run(e,t,n,r){const a=this.backend.device,i=this.backend.getComputePassEncoder();this.backend.profilingEnabled&&i.writeTimestamp(this.backend.profilingQuerySet,0),i.setPipeline(e.computePipeline);const o=[];for(const e of t)o.push({binding:o.length,resource:{buffer:e.buffer}});for(const e of n)o.push({binding:o.length,resource:{buffer:e.buffer}});const s=a.createBindGroup({layout:e.computePipeline.getBindGroupLayout(0),entries:o});if(i.setBindGroup(0,s),i.dispatchWorkgroups(...r),this.backend.pendingDispatchNumber++,this.backend.profilingEnabled){i.writeTimestamp(this.backend.profilingQuerySet,1);const e=this.backend.gpuDataManager.create(16,GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE),t=this.backend.gpuDataManager.create(16,GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST);this.backend.endComputePass(),this.backend.getCommandEncoder().resolveQuerySet(this.backend.profilingQuerySet,0,2,e.buffer,0),this.backend.getCommandEncoder().copyBufferToBuffer(e.buffer,0,t.buffer,0,16),this.backend.flush();const n=this.backend.currentKernelId,r=this.backend.kernels.get(n)[0];t.buffer.mapAsync(GPUMapMode.READ).then((()=>{const a=new BigUint64Array(t.buffer.getMappedRange()),i=a[0],o=a[1];t.buffer.unmap(),void 0===this.backend.profilingTimeBase&&(this.backend.profilingTimeBase=i);const s=Number(i-this.backend.profilingTimeBase),u=Number(o-this.backend.profilingTimeBase);if(!Number.isSafeInteger(s)||!Number.isSafeInteger(u))throw new RangeError(\\\"incorrect timestamp range\\\");this.backend.gpuDataManager.release(e.id),this.backend.gpuDataManager.release(t.id),console.log(`[profiling] kernel \\\"${n}|${r}\\\" execution time: ${u-s} ns`)}))}this.backend.pendingDispatchNumber>=16&&this.backend.flush()}dispose(){}build(e,t){const n=this.backend.device,i=e.getShaderSource((0,a.createShaderHelper)(t)),o=n.createShaderModule({code:i});return(0,r.LOG_DEBUG)(\\\"verbose\\\",(()=>`[WebGPU] shader code: ${i}`)),{programInfo:e,computePipeline:n.createComputePipeline({compute:{module:o,entryPoint:\\\"main\\\"},layout:\\\"auto\\\"})}}normalizeDispatchGroupSize(e){const t=\\\"number\\\"==typeof e?e:e.x,n=\\\"number\\\"==typeof e?1:e.y||1,r=\\\"number\\\"==typeof e?1:e.z||1,a=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(t<=a&&n<=a&&r<=a)return[t,n,r];const i=t*n*r;let o=Math.ceil(Math.sqrt(i));if(o>a){if(o=Math.ceil(Math.cbrt(i)),o>a)throw new Error(\\\"Total dispatch size exceeds WebGPU maximum.\\\");return[o,o,o]}return[o,o,1]}}},163:(e,t)=>{\\\"use strict\\\";var n;Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.GpuDataType=void 0,(n=t.GpuDataType||(t.GpuDataType={}))[n.default=0]=\\\"default\\\",n[n.upload=1]=\\\"upload\\\",n[n.profile=2]=\\\"profile\\\"},918:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.setRunOptions=void 0;const r=n(263),a=n(497);t.setRunOptions=e=>{const t=(0,r.getInstance)();let n=0;const i=[],o=e||{};try{if(void 0===(null==e?void 0:e.logSeverityLevel))o.logSeverityLevel=2;else if(\\\"number\\\"!=typeof e.logSeverityLevel||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(void 0===(null==e?void 0:e.logVerbosityLevel))o.logVerbosityLevel=0;else if(\\\"number\\\"!=typeof e.logVerbosityLevel||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);void 0===(null==e?void 0:e.terminate)&&(o.terminate=!1);let r=0;return void 0!==(null==e?void 0:e.tag)&&(r=(0,a.allocWasmString)(e.tag,i)),n=t._OrtCreateRunOptions(o.logSeverityLevel,o.logVerbosityLevel,!!o.terminate,r),0===n&&(0,a.checkLastError)(\\\"Can't create run options.\\\"),void 0!==(null==e?void 0:e.extra)&&(0,a.iterateExtraOptions)(e.extra,\\\"\\\",new WeakSet,((e,r)=>{const o=(0,a.allocWasmString)(e,i),s=(0,a.allocWasmString)(r,i);0!==t._OrtAddRunConfigEntry(n,o,s)&&(0,a.checkLastError)(`Can't set a run config entry: ${e} - ${r}.`)})),[n,i]}catch(e){throw 0!==n&&t._OrtReleaseRunOptions(n),i.forEach((e=>t._free(e))),e}}},622:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.setSessionOptions=void 0;const r=n(263),a=n(497);t.setSessionOptions=e=>{var t,n,i,o;const s=(0,r.getInstance)();let u=0;const l=[],c=e||{};(e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});const t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly=\\\"1\\\"),e.executionProviders&&e.executionProviders.some((e=>\\\"webgpu\\\"===(\\\"string\\\"==typeof e?e:e.name)))&&(e.enableMemPattern=!1)})(c);try{const e=(e=>{switch(e){case\\\"disabled\\\":return 0;case\\\"basic\\\":return 1;case\\\"extended\\\":return 2;case\\\"all\\\":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}})(null!==(t=c.graphOptimizationLevel)&&void 0!==t?t:\\\"all\\\"),p=(e=>{switch(e){case\\\"sequential\\\":return 0;case\\\"parallel\\\":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}})(null!==(n=c.executionMode)&&void 0!==n?n:\\\"sequential\\\"),d=\\\"string\\\"==typeof c.logId?(0,a.allocWasmString)(c.logId,l):0,f=null!==(i=c.logSeverityLevel)&&void 0!==i?i:2;if(!Number.isInteger(f)||f<0||f>4)throw new Error(`log serverity level is not valid: ${f}`);const h=null!==(o=c.logVerbosityLevel)&&void 0!==o?o:0;if(!Number.isInteger(h)||h<0||h>4)throw new Error(`log verbosity level is not valid: ${h}`);const g=\\\"string\\\"==typeof c.optimizedModelFilePath?(0,a.allocWasmString)(c.optimizedModelFilePath,l):0;return u=s._OrtCreateSessionOptions(e,!!c.enableCpuMemArena,!!c.enableMemPattern,p,!!c.enableProfiling,0,d,f,h,g),0===u&&(0,a.checkLastError)(\\\"Can't create session options.\\\"),c.executionProviders&&((e,t,n)=>{for(const i of t){let t=\\\"string\\\"==typeof i?i:i.name;switch(t){case\\\"xnnpack\\\":t=\\\"XNNPACK\\\";break;case\\\"webnn\\\":if(t=\\\"WEBNN\\\",\\\"string\\\"!=typeof i){const t=i;if(null==t?void 0:t.deviceType){const i=(0,a.allocWasmString)(\\\"deviceType\\\",n),o=(0,a.allocWasmString)(t.deviceType,n);0!==(0,r.getInstance)()._OrtAddSessionConfigEntry(e,i,o)&&(0,a.checkLastError)(`Can't set a session config entry: 'deviceType' - ${t.deviceType}.`)}if(null==t?void 0:t.powerPreference){const i=(0,a.allocWasmString)(\\\"powerPreference\\\",n),o=(0,a.allocWasmString)(t.powerPreference,n);0!==(0,r.getInstance)()._OrtAddSessionConfigEntry(e,i,o)&&(0,a.checkLastError)(`Can't set a session config entry: 'powerPreference' - ${t.powerPreference}.`)}}break;case\\\"webgpu\\\":t=\\\"JS\\\";break;case\\\"wasm\\\":case\\\"cpu\\\":continue;default:throw new Error(`not supported execution provider: ${t}`)}const o=(0,a.allocWasmString)(t,n);0!==(0,r.getInstance)()._OrtAppendExecutionProvider(e,o)&&(0,a.checkLastError)(`Can't append execution provider: ${t}.`)}})(u,c.executionProviders,l),void 0!==c.extra&&(0,a.iterateExtraOptions)(c.extra,\\\"\\\",new WeakSet,((e,t)=>{const n=(0,a.allocWasmString)(e,l),r=(0,a.allocWasmString)(t,l);0!==s._OrtAddSessionConfigEntry(u,n,r)&&(0,a.checkLastError)(`Can't set a session config entry: ${e} - ${t}.`)})),[u,l]}catch(e){throw 0!==u&&s._OrtReleaseSessionOptions(u),l.forEach((e=>s._free(e))),e}}},917:(e,t)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.logLevelStringToEnum=t.tensorTypeToTypedArrayConstructor=t.getTensorElementSize=t.tensorDataTypeEnumToString=t.tensorDataTypeStringToEnum=void 0,t.tensorDataTypeStringToEnum=e=>{switch(e){case\\\"int8\\\":return 3;case\\\"uint8\\\":return 2;case\\\"bool\\\":return 9;case\\\"int16\\\":return 5;case\\\"uint16\\\":return 4;case\\\"int32\\\":return 6;case\\\"uint32\\\":return 12;case\\\"float16\\\":return 10;case\\\"float32\\\":return 1;case\\\"float64\\\":return 11;case\\\"string\\\":return 8;case\\\"int64\\\":return 7;case\\\"uint64\\\":return 13;default:throw new Error(`unsupported data type: ${e}`)}},t.tensorDataTypeEnumToString=e=>{switch(e){case 3:return\\\"int8\\\";case 2:return\\\"uint8\\\";case 9:return\\\"bool\\\";case 5:return\\\"int16\\\";case 4:return\\\"uint16\\\";case 6:return\\\"int32\\\";case 12:return\\\"uint32\\\";case 10:return\\\"float16\\\";case 1:return\\\"float32\\\";case 11:return\\\"float64\\\";case 8:return\\\"string\\\";case 7:return\\\"int64\\\";case 13:return\\\"uint64\\\";default:throw new Error(`unsupported data type: ${e}`)}},t.getTensorElementSize=e=>[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][e],t.tensorTypeToTypedArrayConstructor=e=>{switch(e){case\\\"float16\\\":case\\\"uint16\\\":return Uint16Array;case\\\"float32\\\":return Float32Array;case\\\"uint8\\\":case\\\"bool\\\":return Uint8Array;case\\\"int8\\\":return Int8Array;case\\\"int16\\\":return Int16Array;case\\\"int32\\\":return Int32Array;case\\\"float64\\\":return Float64Array;case\\\"uint32\\\":return Uint32Array;case\\\"int64\\\":return BigInt64Array;case\\\"uint64\\\":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},t.logLevelStringToEnum=e=>{switch(e){case\\\"verbose\\\":return 0;case\\\"info\\\":return 1;case\\\"warning\\\":return 2;case\\\"error\\\":return 3;case\\\"fatal\\\":return 4;default:throw new Error(`unsupported logging level: ${e}`)}}},259:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.extractTransferableBuffers=t.endProfiling=t.run=t.releaseSession=t.createSession=t.createSessionFinalize=t.createSessionAllocate=t.initRuntime=void 0;const r=n(918),a=n(622),i=n(917),o=n(263),s=n(497);t.initRuntime=async e=>{var t,r;t=e.wasm.numThreads,r=(0,i.logLevelStringToEnum)(e.logLevel),0!==(0,o.getInstance)()._OrtInit(t,r)&&(0,s.checkLastError)(\\\"Can't initialize onnxruntime.\\\");{const t=n(675).S;await t((0,o.getInstance)(),e)}};const u=new Map;t.createSessionAllocate=e=>{const t=(0,o.getInstance)(),n=t._malloc(e.byteLength);if(0===n)throw new Error(`Can't create a session. failed to allocate a buffer of size ${e.byteLength}.`);return t.HEAPU8.set(e,n),[n,e.byteLength]},t.createSessionFinalize=(e,t)=>{const n=(0,o.getInstance)();let r=0,i=0,l=[];const c=[],p=[];try{[i,l]=(0,a.setSessionOptions)(t),r=n._OrtCreateSession(e[0],e[1],i),0===r&&(0,s.checkLastError)(\\\"Can't create a session.\\\");const[d,f]=(e=>{const t=(0,o.getInstance)(),n=t.stackSave();try{const n=t.stackAlloc(8);return 0!==t._OrtGetInputOutputCount(e,n,n+4)&&(0,s.checkLastError)(\\\"Can't get session input/output count.\\\"),[t.HEAP32[n/4],t.HEAP32[n/4+1]]}finally{t.stackRestore(n)}})(r),h=[],g=[];for(let e=0;e<d;e++){const t=n._OrtGetInputName(r,e);0===t&&(0,s.checkLastError)(\\\"Can't get an input name.\\\"),c.push(t),h.push(n.UTF8ToString(t))}for(let e=0;e<f;e++){const t=n._OrtGetOutputName(r,e);0===t&&(0,s.checkLastError)(\\\"Can't get an output name.\\\"),p.push(t),g.push(n.UTF8ToString(t))}return u.set(r,[r,c,p]),[r,h,g]}catch(e){throw c.forEach((e=>n._OrtFree(e))),p.forEach((e=>n._OrtFree(e))),0!==r&&n._OrtReleaseSession(r),e}finally{n._free(e[0]),0!==i&&n._OrtReleaseSessionOptions(i),l.forEach((e=>n._free(e)))}},t.createSession=(e,n)=>{const r=(0,t.createSessionAllocate)(e);return(0,t.createSessionFinalize)(r,n)},t.releaseSession=e=>{const t=(0,o.getInstance)(),n=u.get(e);if(!n)throw new Error(`cannot release session. invalid session id: ${e}`);const[r,a,i]=n;a.forEach((e=>t._OrtFree(e))),i.forEach((e=>t._OrtFree(e))),t._OrtReleaseSession(r),u.delete(e)},t.run=async(e,t,n,a,l)=>{const c=(0,o.getInstance)(),p=u.get(e);if(!p)throw new Error(`cannot run inference. invalid session id: ${e}`);const[d,f,h]=p,g=t.length,m=a.length;let y=0,b=[];const v=[],w=[];try{[y,b]=(0,r.setRunOptions)(l);for(let e=0;e<g;e++){const t=n[e][0],r=n[e][1],a=n[e][2];let o,u;if(Array.isArray(a)){u=4*a.length,o=c._malloc(u),w.push(o);let e=o/4;for(let t=0;t<a.length;t++){if(\\\"string\\\"!=typeof a[t])throw new TypeError(`tensor data at index ${t} is not a string`);c.HEAPU32[e++]=(0,s.allocWasmString)(a[t],w)}}else u=a.byteLength,o=c._malloc(u),w.push(o),c.HEAPU8.set(new Uint8Array(a.buffer,a.byteOffset,u),o);const l=c.stackSave(),p=c.stackAlloc(4*r.length);try{let n=p/4;r.forEach((e=>c.HEAP32[n++]=e));const a=c._OrtCreateTensor((0,i.tensorDataTypeStringToEnum)(t),o,u,p,r.length);0===a&&(0,s.checkLastError)(`Can't create tensor for input[${e}].`),v.push(a)}finally{c.stackRestore(l)}}const e=c.stackSave(),o=c.stackAlloc(4*g),u=c.stackAlloc(4*g),p=c.stackAlloc(4*m),$=c.stackAlloc(4*m);try{let e=o/4,n=u/4,r=p/4,l=$/4;for(let r=0;r<g;r++)c.HEAPU32[e++]=v[r],c.HEAPU32[n++]=f[t[r]];for(let e=0;e<m;e++)c.HEAPU32[r++]=0,c.HEAPU32[l++]=h[a[e]];let b=c._OrtRun(d,u,o,g,$,m,p,y);const w=c.jsepRunPromise;w&&void 0!==w.then&&(b=await w);const _=[];0!==b&&(0,s.checkLastError)(\\\"failed to call OrtRun().\\\");for(let e=0;e<m;e++){const t=c.HEAPU32[p/4+e],n=c.stackSave(),r=c.stackAlloc(16);let a,o=0;try{b=c._OrtGetTensorData(t,r,r+4,r+8,r+12),0!==b&&(0,s.checkLastError)(`Can't access output tensor data on index ${e}.`);let n=r/4;const u=c.HEAPU32[n++];o=c.HEAPU32[n++];const l=c.HEAPU32[n++],p=c.HEAPU32[n++],d=[];for(let e=0;e<p;e++)d.push(c.HEAPU32[l/4+e]);c._OrtFree(l);const f=0===d.length?1:d.reduce(((e,t)=>e*t));if(a=(0,i.tensorDataTypeEnumToString)(u),\\\"string\\\"===a){const e=[];let t=o/4;for(let n=0;n<f;n++){const r=c.HEAPU32[t++],a=n===f-1?void 0:c.HEAPU32[t]-r;e.push(c.UTF8ToString(r,a))}_.push([a,d,e])}else{const e=new((0,i.tensorTypeToTypedArrayConstructor)(a))(f);new Uint8Array(e.buffer,e.byteOffset,e.byteLength).set(c.HEAPU8.subarray(o,o+e.byteLength)),_.push([a,d,e])}}finally{c.stackRestore(n),\\\"string\\\"===a&&o&&c._free(o),c._OrtReleaseTensor(t)}}return _}finally{c.stackRestore(e)}}finally{v.forEach((e=>c._OrtReleaseTensor(e))),w.forEach((e=>c._free(e))),0!==y&&c._OrtReleaseRunOptions(y),b.forEach((e=>c._free(e)))}},t.endProfiling=e=>{const t=(0,o.getInstance)(),n=u.get(e);if(!n)throw new Error(\\\"invalid session id\\\");const r=n[0],a=t._OrtEndProfiling(r);0===a&&(0,s.checkLastError)(\\\"Can't get an profile file name.\\\"),t._OrtFree(a)},t.extractTransferableBuffers=e=>{const t=[];for(const n of e){const e=n[2];!Array.isArray(e)&&e.buffer&&t.push(e.buffer)}return t}},263:function(e,t,n){\\\"use strict\\\";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!(\\\"get\\\"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,a)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,\\\"default\\\",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)\\\"default\\\"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return a(t,e),t};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.dispose=t.getInstance=t.initializeWebAssembly=void 0;const o=i(n(449)),s=n(377),u=n(711);let l,c=!1,p=!1,d=!1;t.initializeWebAssembly=async e=>{if(c)return Promise.resolve();if(p)throw new Error(\\\"multiple calls to 'initializeWebAssembly()' detected.\\\");if(d)throw new Error(\\\"previous call to 'initializeWebAssembly()' failed.\\\");p=!0;const t=e.initTimeout,r=e.numThreads,a=e.simd,i=r>1&&(()=>{try{return\\\"undefined\\\"!=typeof SharedArrayBuffer&&(\\\"undefined\\\"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])))}catch(e){return!1}})(),f=a&&(()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch(e){return!1}})(),h=e.wasmPaths,g=\\\"string\\\"==typeof h?h:void 0,m=((e,t)=>t?e?\\\"ort-wasm-simd-threaded.wasm\\\":\\\"ort-wasm-threaded.wasm\\\":e?\\\"ort-wasm-simd.wasm\\\":\\\"ort-wasm.wasm\\\")(f,i),y=\\\"object\\\"==typeof h?h[m]:void 0;let b=!1;const v=[];if(t>0&&v.push(new Promise((e=>{setTimeout((()=>{b=!0,e()}),t)}))),v.push(new Promise(((e,t)=>{const r=i?u:s,a={locateFile:(e,t)=>{if(i&&e.endsWith(\\\".worker.js\\\")&&\\\"undefined\\\"!=typeof Blob)return URL.createObjectURL(new Blob([n(154)],{type:\\\"text/javascript\\\"}));if(e.endsWith(\\\".wasm\\\")){if(y)return y;const e=null!=g?g:t;return\\\"ort-wasm-simd.wasm\\\"===m?e+\\\"ort-wasm-simd.jsep.wasm\\\":\\\"ort-wasm-simd-threaded.wasm\\\"===m?e+\\\"ort-wasm-simd-threaded.jsep.wasm\\\":e+m}return t+e}};if(i)if(\\\"undefined\\\"==typeof Blob)a.mainScriptUrlOrBlob=o.join(__dirname,\\\"ort-wasm-threaded.js\\\");else{const e=`var ortWasmThreaded=(function(){var _scriptDir;return ${r.toString()}})();`;a.mainScriptUrlOrBlob=new Blob([e],{type:\\\"text/javascript\\\"})}r(a).then((t=>{p=!1,c=!0,l=t,e()}),(e=>{p=!1,d=!0,t(e)}))}))),await Promise.race(v),b)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)},t.getInstance=()=>{if(c&&l)return l;throw new Error(\\\"WebAssembly is not initialized yet.\\\")},t.dispose=()=>{var e;!c||p||d||(p=!0,null===(e=l.PThread)||void 0===e||e.terminateAllThreads(),l=void 0,p=!1,c=!1,d=!0)}},497:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.checkLastError=t.iterateExtraOptions=t.allocWasmString=void 0;const r=n(263);t.allocWasmString=(e,t)=>{const n=(0,r.getInstance)(),a=n.lengthBytesUTF8(e)+1,i=n._malloc(a);return n.stringToUTF8(e,i,a),t.push(i),i},t.iterateExtraOptions=(e,n,r,a)=>{if(\\\"object\\\"==typeof e&&null!==e){if(r.has(e))throw new Error(\\\"Circular reference in options\\\");r.add(e)}Object.entries(e).forEach((([e,i])=>{const o=n?n+e:e;if(\\\"object\\\"==typeof i)(0,t.iterateExtraOptions)(i,o+\\\".\\\",r,a);else if(\\\"string\\\"==typeof i||\\\"number\\\"==typeof i)a(o,i.toString());else{if(\\\"boolean\\\"!=typeof i)throw new Error(\\\"Can't handle extra config type: \\\"+typeof i);a(o,i?\\\"1\\\":\\\"0\\\")}}))},t.checkLastError=e=>{const t=(0,r.getInstance)(),n=t.stackSave();try{const n=t.stackAlloc(8);t._OrtGetLastError(n,n+4);const r=t.HEAP32[n/4],a=t.HEAPU32[n/4+1],i=a?t.UTF8ToString(a):\\\"\\\";throw new Error(`${e} ERROR_CODE: ${r}, ERROR_MESSAGE: ${i}`)}finally{t.stackRestore(n)}}},711:(e,t,n)=>{var _scriptDir,r=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\\\"undefined\\\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(e={}){function t(){return k.buffer!=M.buffer&&V(),M}function r(){return k.buffer!=M.buffer&&V(),W}function a(){return k.buffer!=M.buffer&&V(),j}function i(){return k.buffer!=M.buffer&&V(),U}function o(){return k.buffer!=M.buffer&&V(),B}function s(){return k.buffer!=M.buffer&&V(),G}function u(){return k.buffer!=M.buffer&&V(),L}var l,c,p;l||(l=void 0!==e?e:{}),l.ready=new Promise(((e,t)=>{c=e,p=t})),l.jsepInit=function(e,t,n,r,a,i,o,s){l.oc=e,l.Tb=t,l.Vb=n,l.Gb=r,l.Ub=a,l.$a=i,l.Wb=o,l.Xb=s};var d,f,h,g=Object.assign({},l),m=\\\"./this.program\\\",y=(e,t)=>{throw t},b=\\\"object\\\"==typeof window,v=\\\"function\\\"==typeof importScripts,w=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,$=l.ENVIRONMENT_IS_PTHREAD||!1,_=\\\"\\\";function A(e){return l.locateFile?l.locateFile(e,_):_+e}if(w){var C=n(384),S=n(908);let e;_=v?S.dirname(_)+\\\"/\\\":__dirname+\\\"/\\\",d=(e,t)=>(e=e.startsWith(\\\"file://\\\")?new URL(e):S.normalize(e),C.readFileSync(e,t?void 0:\\\"utf8\\\")),h=e=>((e=d(e,!0)).buffer||(e=new Uint8Array(e)),e),f=(e,t,n,r=!0)=>{e=e.startsWith(\\\"file://\\\")?new URL(e):S.normalize(e),C.readFile(e,r?void 0:\\\"utf8\\\",((e,a)=>{e?n(e):t(r?a.buffer:a)}))},!l.thisProgram&&1<process.argv.length&&(m=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),y=(e,t)=>{throw process.exitCode=e,t},l.inspect=()=>\\\"[Emscripten Module object]\\\";try{e=n(925)}catch(e){throw console.error('The \\\"worker_threads\\\" module is not supported in this node.js build - perhaps a newer version is needed?'),e}global.Worker=e.Worker}else(b||v)&&(v?_=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(_=document.currentScript.src),_scriptDir&&(_=_scriptDir),_=0!==_.indexOf(\\\"blob:\\\")?_.substr(0,_.replace(/[?#].*/,\\\"\\\").lastIndexOf(\\\"/\\\")+1):\\\"\\\",w||(d=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.send(null),t.responseText},v&&(h=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.responseType=\\\"arraybuffer\\\",t.send(null),new Uint8Array(t.response)}),f=(e,t,n)=>{var r=new XMLHttpRequest;r.open(\\\"GET\\\",e,!0),r.responseType=\\\"arraybuffer\\\",r.onload=()=>{200==r.status||0==r.status&&r.response?t(r.response):n()},r.onerror=n,r.send(null)}));w&&\\\"undefined\\\"==typeof performance&&(global.performance=n(953).performance);var x=console.log.bind(console),E=console.warn.bind(console);w&&(x=(...e)=>C.writeSync(1,e.join(\\\" \\\")+\\\"\\\\n\\\"),E=(...e)=>C.writeSync(2,e.join(\\\" \\\")+\\\"\\\\n\\\"));var P,T=l.print||x,O=l.printErr||E;Object.assign(l,g),g=null,l.thisProgram&&(m=l.thisProgram),l.quit&&(y=l.quit),l.wasmBinary&&(P=l.wasmBinary);var I=l.noExitRuntime||!0;\\\"object\\\"!=typeof WebAssembly&&ae(\\\"no native wasm support detected\\\");var k,R,D,M,W,j,U,B,G,N,H,z,L,F=!1;function V(){var e=k.buffer;l.HEAP8=M=new Int8Array(e),l.HEAP16=j=new Int16Array(e),l.HEAP32=B=new Int32Array(e),l.HEAPU8=W=new Uint8Array(e),l.HEAPU16=U=new Uint16Array(e),l.HEAPU32=G=new Uint32Array(e),l.HEAPF32=N=new Float32Array(e),l.HEAPF64=L=new Float64Array(e),l.HEAP64=H=new BigInt64Array(e),l.HEAPU64=z=new BigUint64Array(e)}var K=l.INITIAL_MEMORY||16777216;if(5242880<=K||ae(\\\"INITIAL_MEMORY should be larger than STACK_SIZE, was \\\"+K+\\\"! (STACK_SIZE=5242880)\\\"),$)k=l.wasmMemory;else if(l.wasmMemory)k=l.wasmMemory;else if(!((k=new WebAssembly.Memory({initial:K/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw O(\\\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\\\"),w&&O(\\\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)\\\"),Error(\\\"bad memory\\\");V(),K=k.buffer.byteLength;var Y=[],q=[],X=[],Z=0;function J(){return I||0<Z}function Q(){var e=l.preRun.shift();Y.unshift(e)}var ee,te=0,ne=null,re=null;function ae(e){throw l.onAbort&&l.onAbort(e),O(e=\\\"Aborted(\\\"+e+\\\")\\\"),F=!0,D=1,e=new WebAssembly.RuntimeError(e+\\\". Build with -sASSERTIONS for more info.\\\"),p(e),e}function ie(e){return e.startsWith(\\\"data:application/octet-stream;base64,\\\")}function oe(e){try{if(e==ee&&P)return new Uint8Array(P);if(h)return h(e);throw\\\"both async and sync fetching of the wasm failed\\\"}catch(e){ae(e)}}function se(e,t,n){return function(e){if(!P&&(b||v)){if(\\\"function\\\"==typeof fetch&&!e.startsWith(\\\"file://\\\"))return fetch(e,{credentials:\\\"same-origin\\\"}).then((t=>{if(!t.ok)throw\\\"failed to load wasm binary file at '\\\"+e+\\\"'\\\";return t.arrayBuffer()})).catch((()=>oe(e)));if(f)return new Promise(((t,n)=>{f(e,(e=>t(new Uint8Array(e))),n)}))}return Promise.resolve().then((()=>oe(e)))}(e).then((e=>WebAssembly.instantiate(e,t))).then((e=>e)).then(n,(e=>{O(\\\"failed to asynchronously prepare wasm: \\\"+e),ae(e)}))}ie(ee=\\\"ort-wasm-simd-threaded.wasm\\\")||(ee=A(ee));var ue={1298168:()=>{l.jsepRunPromise=new Promise((function(e){l.Yb=e}))},1298263:e=>{l.Yb(e)},1298301:e=>l.Tb(e),1298334:e=>l.Vb(e),1298366:(e,t,n)=>{l.Gb(e,t,n,!0)},1298405:(e,t,n)=>{l.Gb(e,t,n)},1298438:e=>{l.$a(\\\"Abs\\\",e,void 0)},1298489:e=>{l.$a(\\\"Neg\\\",e,void 0)},1298540:e=>{l.$a(\\\"Floor\\\",e,void 0)},1298593:e=>{l.$a(\\\"Ceil\\\",e,void 0)},1298645:e=>{l.$a(\\\"Reciprocal\\\",e,void 0)},1298703:e=>{l.$a(\\\"Sqrt\\\",e,void 0)},1298755:e=>{l.$a(\\\"Exp\\\",e,void 0)},1298806:e=>{l.$a(\\\"Erf\\\",e,void 0)},1298857:e=>{l.$a(\\\"Sigmoid\\\",e,void 0)},1298912:e=>{l.$a(\\\"Sin\\\",e,void 0)},1298963:e=>{l.$a(\\\"Cos\\\",e,void 0)},1299014:e=>{l.$a(\\\"Tan\\\",e,void 0)},1299065:e=>{l.$a(\\\"Asin\\\",e,void 0)},1299117:e=>{l.$a(\\\"Acos\\\",e,void 0)},1299169:e=>{l.$a(\\\"Atan\\\",e,void 0)},1299221:e=>{l.$a(\\\"Sinh\\\",e,void 0)},1299273:e=>{l.$a(\\\"Cosh\\\",e,void 0)},1299325:e=>{l.$a(\\\"Asinh\\\",e,void 0)},1299378:e=>{l.$a(\\\"Acosh\\\",e,void 0)},1299431:e=>{l.$a(\\\"Atanh\\\",e,void 0)},1299484:(e,t,n)=>{l.$a(\\\"ClipV10\\\",e,{min:t,max:n})},1299556:e=>{l.$a(\\\"Clip\\\",e,void 0)},1299608:(e,t)=>{l.$a(\\\"Elu\\\",e,{alpha:t})},1299666:e=>{l.$a(\\\"Relu\\\",e,void 0)},1299718:(e,t)=>{l.$a(\\\"LeakyRelu\\\",e,{alpha:t})},1299782:(e,t)=>{l.$a(\\\"ThresholdedRelu\\\",e,{alpha:t})},1299852:e=>{l.$a(\\\"Add\\\",e,void 0)},1299903:e=>{l.$a(\\\"Sub\\\",e,void 0)},1299954:e=>{l.$a(\\\"Mul\\\",e,void 0)},1300005:e=>{l.$a(\\\"Div\\\",e,void 0)},1300056:e=>{l.$a(\\\"Pow\\\",e,void 0)},1300107:(e,t,n,r,a)=>{l.$a(\\\"ReduceMean\\\",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:r?Array.from(o().subarray(a>>>0,a+r>>>0)):[]})},1300271:(e,t,n,r,a)=>{l.$a(\\\"ReduceMax\\\",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:r?Array.from(o().subarray(a>>>0,a+r>>>0)):[]})},1300434:(e,t,n,r,a)=>{l.$a(\\\"ReduceMin\\\",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:r?Array.from(o().subarray(a>>>0,a+r>>>0)):[]})},1300597:(e,t,n,r,a)=>{l.$a(\\\"ReduceProd\\\",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:r?Array.from(o().subarray(a>>>0,a+r>>>0)):[]})},1300761:(e,t,n,r,a)=>{l.$a(\\\"ReduceSum\\\",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:r?Array.from(o().subarray(a>>>0,a+r>>>0)):[]})},1300924:(e,t,n,r,a)=>{l.$a(\\\"ReduceL1\\\",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:r?Array.from(o().subarray(a>>>0,a+r>>>0)):[]})},1301086:(e,t,n,r,a)=>{l.$a(\\\"ReduceL2\\\",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:r?Array.from(o().subarray(a>>>0,a+r>>>0)):[]})},1301248:(e,t,n,r,a)=>{l.$a(\\\"ReduceLogSum\\\",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:r?Array.from(o().subarray(a>>>0,a+r>>>0)):[]})},1301414:(e,t,n,r,a)=>{l.$a(\\\"ReduceSumSquare\\\",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:r?Array.from(o().subarray(a>>>0,a+r>>>0)):[]})},1301583:(e,t,n,r,a)=>{l.$a(\\\"ReduceLogSumExp\\\",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:r?Array.from(o().subarray(a>>>0,a+r>>>0)):[]})},1301752:(e,t,n)=>{l.$a(\\\"Transpose\\\",e,{perm:t?Array.from(o().subarray(n>>>0,n+t>>>0)):[]})},1301865:(e,n,r,a,i,o,s,u,c,p)=>{l.$a(\\\"Conv\\\",e,{format:c?\\\"NHWC\\\":\\\"NCHW\\\",auto_pad:n,dilations:[r],group:a,kernel_shape:[i],pads:[o,s],strides:[u],w_is_const:()=>!!t()[p>>>0]})},1302093:(e,n,r,a,i,o,s,u,c,p,d,f,h,g,m)=>{l.$a(\\\"Conv\\\",e,{format:g?\\\"NHWC\\\":\\\"NCHW\\\",auto_pad:n,dilations:[r,a],group:i,kernel_shape:[o,s],pads:[u,c,p,d],strides:[f,h],w_is_const:()=>!!t()[m>>>0]})},1302352:(e,n,r,a,i,o,s,u,c,p)=>{l.$a(\\\"Conv\\\",e,{format:c?\\\"NHWC\\\":\\\"NCHW\\\",auto_pad:n,dilations:[r],group:a,kernel_shape:[i],pads:[o,s],strides:[u],w_is_const:()=>!!t()[p>>>0]})},1302580:(e,n,r,a,i,o,s,u,c,p,d,f,h,g,m)=>{l.$a(\\\"Conv\\\",e,{format:g?\\\"NHWC\\\":\\\"NCHW\\\",auto_pad:n,dilations:[r,a],group:i,kernel_shape:[o,s],pads:[u,c,p,d],strides:[f,h],w_is_const:()=>!!t()[m>>>0]})},1302839:(e,n,r,a,i,s,u,c,p,d,f,h,g,m)=>{l.$a(\\\"ConvTranspose\\\",e,{format:p?\\\"NHWC\\\":\\\"NCHW\\\",autoPad:n,dilations:[r],group:a,kernel_shape:[i],pads:[s,u],strides:[c],wIsConst:()=>!!t()[d>>>0],outputPadding:f?Array.from(o().subarray(h>>>0,h+f>>>0)):[],outputShape:g?Array.from(o().subarray(g>>>0,m+g>>>0)):[]})},1303219:(e,n,r,a,i,s,u,c,p,d,f,h,g)=>{l.$a(\\\"ConvTranspose\\\",e,{format:c?\\\"NHWC\\\":\\\"NCHW\\\",autoPad:n,dilations:Array.from(o().subarray(r>>>0,r+2>>>0)),group:a,kernelShape:Array.from(o().subarray(i>>>0,i+2>>>0)),pads:Array.from(o().subarray(s>>>0,s+4>>>0)),strides:Array.from(o().subarray(u>>>0,u+2>>>0)),wIsConst:()=>!!t()[p>>>0],outputPadding:0<d?Array.from(o().subarray(f>>>0,f+d>>>0)):[],outputShape:0<h?Array.from(o().subarray(g>>>0,g+h>>>0)):[]})},1303742:(e,n,r,a,i,s,u,c,p,d,f,h,g,m)=>{l.$a(\\\"ConvTranspose\\\",e,{format:p?\\\"NHWC\\\":\\\"NCHW\\\",autoPad:n,dilations:[r],group:a,kernel_shape:[i],pads:[s,u],strides:[c],wIsConst:()=>!!t()[d>>>0],outputPadding:f?Array.from(o().subarray(h>>>0,h+f>>>0)):[],outputShape:g?Array.from(o().subarray(g>>>0,m+g>>>0)):[]})},1304122:(e,n,r,a,i,s,u,c,p,d,f,h,g)=>{l.$a(\\\"ConvTranspose\\\",e,{format:c?\\\"NHWC\\\":\\\"NCHW\\\",autoPad:n,dilations:Array.from(o().subarray(r>>>0,r+2>>>0)),group:a,kernelShape:Array.from(o().subarray(i>>>0,i+2>>>0)),pads:Array.from(o().subarray(s>>>0,s+4>>>0)),strides:Array.from(o().subarray(u>>>0,u+2>>>0)),wIsConst:()=>!!t()[p>>>0],outputPadding:0<d?Array.from(o().subarray(f>>>0,f+d>>>0)):[],outputShape:0<h?Array.from(o().subarray(g>>>0,g+h>>>0)):[]})},1304645:(e,t)=>{l.$a(\\\"GlobalAveragePool\\\",e,{format:t?\\\"NHWC\\\":\\\"NCHW\\\"})},1304736:(e,t,n,r,a,i,o,s,u,c,p,d,f,h,g,m)=>{l.$a(\\\"AveragePool\\\",e,{format:m?\\\"NHWC\\\":\\\"NCHW\\\",auto_pad:t,ceil_mode:n,count_include_pad:r,storage_order:a,dilations:[i,o],kernel_shape:[s,u],pads:[c,p,d,f],strides:[h,g]})},1305020:(e,t)=>{l.$a(\\\"GlobalAveragePool\\\",e,{format:t?\\\"NHWC\\\":\\\"NCHW\\\"})},1305111:(e,t,n,r,a,i,o,s,u,c,p,d,f,h,g,m)=>{l.$a(\\\"AveragePool\\\",e,{format:m?\\\"NHWC\\\":\\\"NCHW\\\",auto_pad:t,ceil_mode:n,count_include_pad:r,storage_order:a,dilations:[i,o],kernel_shape:[s,u],pads:[c,p,d,f],strides:[h,g]})},1305395:(e,t)=>{l.$a(\\\"GlobalMaxPool\\\",e,{format:t?\\\"NHWC\\\":\\\"NCHW\\\"})},1305482:(e,t,n,r,a,i,o,s,u,c,p,d,f,h,g,m)=>{l.$a(\\\"MaxPool\\\",e,{format:m?\\\"NHWC\\\":\\\"NCHW\\\",auto_pad:t,ceil_mode:n,count_include_pad:r,storage_order:a,dilations:[i,o],kernel_shape:[s,u],pads:[c,p,d,f],strides:[h,g]})},1305762:(e,t)=>{l.$a(\\\"GlobalMaxPool\\\",e,{format:t?\\\"NHWC\\\":\\\"NCHW\\\"})},1305849:(e,t,n,r,a,i,o,s,u,c,p,d,f,h,g,m)=>{l.$a(\\\"MaxPool\\\",e,{format:m?\\\"NHWC\\\":\\\"NCHW\\\",auto_pad:t,ceil_mode:n,count_include_pad:r,storage_order:a,dilations:[i,o],kernel_shape:[s,u],pads:[c,p,d,f],strides:[h,g]})},1306129:(e,t,n,r,a)=>{l.$a(\\\"Gemm\\\",e,{alpha:t,beta:n,transA:r,transB:a})},1306233:e=>{l.$a(\\\"MatMul\\\",e,void 0)},1306287:(e,t)=>{l.$a(\\\"Concat\\\",e,{axis:t})},1306347:(e,t,n,r,a)=>{l.$a(\\\"Split\\\",e,{axis:t,numOutputs:n,splitSizes:r?Array.from(o().subarray(a>>>0,a+r>>>0)):[]})},1306492:e=>{l.$a(\\\"Expand\\\",e,void 0)},1306546:(e,t,n,r,a,i,s)=>{l.$a(\\\"Slice\\\",e,{starts:t?Array.from(o().subarray(n>>>0,n+t>>>0)):[],ends:r?Array.from(o().subarray(a>>>0,a+r>>>0)):[],axes:i?Array.from(o().subarray(s>>>0,s+i>>>0)):[]})},1306777:e=>{l.Wb(e)},1306811:(e,t)=>l.Xb(e,t)};function le(e){this.name=\\\"ExitStatus\\\",this.message=\\\"Program terminated with exit(\\\"+e+\\\")\\\",this.status=e}function ce(e){e.terminate(),e.onmessage=()=>{}}function pe(e){(e=ve.qb[e])||ae(),ve.bc(e)}function de(e){var t=ve.Pb();if(!t)return 6;ve.tb.push(t),ve.qb[e.sb]=t,t.sb=e.sb;var n={cmd:\\\"run\\\",start_routine:e.dc,arg:e.Mb,pthread_ptr:e.sb};return w&&t.unref(),t.postMessage(n,e.kc),0}var fe=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf8\\\"):void 0;function he(e,t,n){var r=(t>>>=0)+n;for(n=t;e[n]&&!(n>=r);)++n;if(16<n-t&&e.buffer&&fe)return fe.decode(e.buffer instanceof SharedArrayBuffer?e.slice(t,n):e.subarray(t,n));for(r=\\\"\\\";t<n;){var a=e[t++];if(128&a){var i=63&e[t++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|i);else{var o=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|i<<6|o:(7&a)<<18|i<<12|o<<6|63&e[t++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function ge(e,t){return(e>>>=0)?he(r(),e,t):\\\"\\\"}function me(e){if($)return Mt(1,1,e);D=e,J()||(ve.ec(),l.onExit&&l.onExit(e),F=!0),y(e,new le(e))}function ye(e){if(D=e,$)throw $e(e),\\\"unwind\\\";me(e)}function be(e){e instanceof le||\\\"unwind\\\"==e||y(1,e)}var ve={wb:[],tb:[],Kb:[],qb:{},Cb:function(){$&&ve.Rb()},nc:function(){},Rb:function(){ve.receiveObjectTransfer=ve.ac,ve.threadInitTLS=ve.Jb,ve.setExitStatus=ve.Ib,I=!1},Ib:function(e){D=e},qc:[\\\"$terminateWorker\\\"],ec:function(){for(var e of ve.tb)ce(e);for(e of ve.wb)ce(e);ve.wb=[],ve.tb=[],ve.qb=[]},bc:function(e){var t=e.sb;delete ve.qb[t],ve.wb.push(e),ve.tb.splice(ve.tb.indexOf(e),1),e.sb=0,bn(t)},ac:function(){},Jb:function(){ve.Kb.forEach((e=>e()))},$b:e=>new Promise((t=>{e.onmessage=n=>{var r=(n=n.data).cmd;if(e.sb&&(ve.Nb=e.sb),n.targetThread&&n.targetThread!=dn()){var a=ve.qb[n.pc];a?a.postMessage(n,n.transferList):O('Internal error! Worker sent a message \\\"'+r+'\\\" to target pthread '+n.targetThread+\\\", but that thread no longer exists!\\\")}else\\\"checkMailbox\\\"===r?mt():\\\"spawnThread\\\"===r?de(n):\\\"cleanupThread\\\"===r?pe(n.thread):\\\"killThread\\\"===r?(n=n.thread,r=ve.qb[n],delete ve.qb[n],ce(r),bn(n),ve.tb.splice(ve.tb.indexOf(r),1),r.sb=0):\\\"cancelThread\\\"===r?ve.qb[n.thread].postMessage({cmd:\\\"cancel\\\"}):\\\"loaded\\\"===r?(e.loaded=!0,t(e)):\\\"print\\\"===r?T(\\\"Thread \\\"+n.threadId+\\\": \\\"+n.text):\\\"printErr\\\"===r?O(\\\"Thread \\\"+n.threadId+\\\": \\\"+n.text):\\\"alert\\\"===r?alert(\\\"Thread \\\"+n.threadId+\\\": \\\"+n.text):\\\"setimmediate\\\"===n.target?e.postMessage(n):\\\"callHandler\\\"===r?l[n.handler](...n.args):r&&O(\\\"worker sent an unknown command \\\"+r);ve.Nb=void 0},e.onerror=e=>{throw O(\\\"worker sent an error! \\\"+e.filename+\\\":\\\"+e.lineno+\\\": \\\"+e.message),e},w&&(e.on(\\\"message\\\",(function(t){e.onmessage({data:t})})),e.on(\\\"error\\\",(function(t){e.onerror(t)})));var n,r=[];for(n of[\\\"onExit\\\",\\\"onAbort\\\",\\\"print\\\",\\\"printErr\\\"])l.hasOwnProperty(n)&&r.push(n);e.postMessage({cmd:\\\"load\\\",handlers:r,urlOrBlob:l.mainScriptUrlOrBlob||_scriptDir,wasmMemory:k,wasmModule:R})})),Zb:function(e){e()},Lb:function(){var e=A(\\\"ort-wasm-simd-threaded.worker.js\\\");e=new Worker(e),ve.wb.push(e)},Pb:function(){return 0==ve.wb.length&&(ve.Lb(),ve.$b(ve.wb[0])),ve.wb.pop()}};function we(e){for(;0<e.length;)e.shift()(l)}function $e(e){if($)return Mt(2,0,e);ye(e)}function _e(e){this.kb=e-24,this.Eb=function(e){s()[this.kb+4>>2>>>0]=e},this.zb=function(e){s()[this.kb+8>>2>>>0]=e},this.Cb=function(e,t){this.yb(),this.Eb(e),this.zb(t)},this.yb=function(){s()[this.kb+16>>2>>>0]=0}}function Ae(e,t,n,r){return $?Mt(3,1,e,t,n,r):Ce(e,t,n,r)}function Ce(e,t,n,r){if(\\\"undefined\\\"==typeof SharedArrayBuffer)return O(\\\"Current environment does not support SharedArrayBuffer, pthreads are not available!\\\"),6;var a=[];return $&&0===a.length?Ae(e,t,n,r):(e={dc:n,sb:e,Mb:r,kc:a},$?(e.mc=\\\"spawnThread\\\",postMessage(e,a),0):de(e))}function Se(e,t,n){return $?Mt(4,1,e,t,n):0}function xe(e,t){if($)return Mt(5,1,e,t)}function Ee(e){for(var t=0,n=0;n<e.length;++n){var r=e.charCodeAt(n);127>=r?t++:2047>=r?t+=2:55296<=r&&57343>=r?(t+=4,++n):t+=3}return t}function Pe(e,t,n,r){if(!(0<r))return 0;var a=n>>>=0;r=n+r-1;for(var i=0;i<e.length;++i){var o=e.charCodeAt(i);if(55296<=o&&57343>=o&&(o=65536+((1023&o)<<10)|1023&e.charCodeAt(++i)),127>=o){if(n>=r)break;t[n++>>>0]=o}else{if(2047>=o){if(n+1>=r)break;t[n++>>>0]=192|o>>6}else{if(65535>=o){if(n+2>=r)break;t[n++>>>0]=224|o>>12}else{if(n+3>=r)break;t[n++>>>0]=240|o>>18,t[n++>>>0]=128|o>>12&63}t[n++>>>0]=128|o>>6&63}t[n++>>>0]=128|63&o}}return t[n>>>0]=0,n-a}function Te(e,t,n){return Pe(e,r(),t,n)}function Oe(e,t){if($)return Mt(6,1,e,t)}function Ie(e,t,n){if($)return Mt(7,1,e,t,n)}function ke(e,t,n){return $?Mt(8,1,e,t,n):0}function Re(e,t){if($)return Mt(9,1,e,t)}function De(e,t,n){if($)return Mt(10,1,e,t,n)}function Me(e,t,n,r){if($)return Mt(11,1,e,t,n,r)}function We(e,t,n,r){if($)return Mt(12,1,e,t,n,r)}function je(e,t,n,r){if($)return Mt(13,1,e,t,n,r)}function Ue(e){if($)return Mt(14,1,e)}function Be(e,t){if($)return Mt(15,1,e,t)}function Ge(e,t,n){if($)return Mt(16,1,e,t,n)}function Ne(e){if(null===e)return\\\"null\\\";var t=typeof e;return\\\"object\\\"===t||\\\"array\\\"===t||\\\"function\\\"===t?e.toString():\\\"\\\"+e}l.PThread=ve,l.establishStackSpace=function(){var e=dn(),t=o()[e+52>>2>>>0];$n(t,t-(e=o()[e+56>>2>>>0])),An(t)},l.invokeEntryPoint=function(e,t){e=xn.apply(null,[e,t]),J()?ve.Ib(e):vn(e)};var He=void 0;function ze(e){for(var t=\\\"\\\";r()[e>>>0];)t+=He[r()[e++>>>0]];return t}var Le={},Fe={},Ve={};function Ke(e){if(void 0===e)return\\\"_unknown\\\";var t=(e=e.replace(/[^a-zA-Z0-9_]/g,\\\"$\\\")).charCodeAt(0);return 48<=t&&57>=t?\\\"_\\\"+e:e}function Ye(e,t){return{[e=Ke(e)]:function(){return t.apply(this,arguments)}}[e]}function qe(e){var t=Error,n=Ye(e,(function(t){this.name=e,this.message=t,void 0!==(t=Error(t).stack)&&(this.stack=this.toString()+\\\"\\\\n\\\"+t.replace(/^Error(:[^\\\\n]*)?\\\\n/,\\\"\\\"))}));return n.prototype=Object.create(t.prototype),n.prototype.constructor=n,n.prototype.toString=function(){return void 0===this.message?this.name:this.name+\\\": \\\"+this.message},n}var Xe=void 0;function Ze(e){throw new Xe(e)}function Je(e,t,n={}){if(!(\\\"argPackAdvance\\\"in t))throw new TypeError(\\\"registerType registeredInstance requires argPackAdvance\\\");var r=t.name;if(e||Ze('type \\\"'+r+'\\\" must have a positive integer typeid pointer'),Fe.hasOwnProperty(e)){if(n.Qb)return;Ze(\\\"Cannot register type '\\\"+r+\\\"' twice\\\")}Fe[e]=t,delete Ve[e],Le.hasOwnProperty(e)&&(t=Le[e],delete Le[e],t.forEach((e=>e())))}function Qe(e,n,u){switch(n){case 0:return u?function(e){return t()[e>>>0]}:function(e){return r()[e>>>0]};case 1:return u?function(e){return a()[e>>>1]}:function(e){return i()[e>>>1]};case 2:return u?function(e){return o()[e>>>2]}:function(e){return s()[e>>>2]};case 3:return u?function(e){return H[e>>3]}:function(e){return z[e>>3]};default:throw new TypeError(\\\"Unknown integer type: \\\"+e)}}function et(e){switch(e){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError(\\\"Unknown type size: \\\"+e)}}var tt=new function(){this.kb=[void 0],this.yb=[],this.get=function(e){return this.kb[e]},this.Eb=function(e){let t=this.yb.pop()||this.kb.length;return this.kb[t]=e,t},this.cc=function(e){this.kb[e]=void 0,this.yb.push(e)}};function nt(e){e>=tt.zb&&0==--tt.get(e).Hb&&tt.cc(e)}var rt=e=>(e||Ze(\\\"Cannot use deleted val. handle = \\\"+e),tt.get(e).value),at=e=>{switch(e){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:return tt.Eb({Hb:1,value:e})}};function it(e){return this.fromWireType(o()[e>>2>>>0])}function ot(e,t){switch(t){case 2:return function(e){var t=this.fromWireType;return k.buffer!=M.buffer&&V(),t.call(this,N[e>>>2])};case 3:return function(e){return this.fromWireType(u()[e>>>3])};default:throw new TypeError(\\\"Unknown float type: \\\"+e)}}var st=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf-16le\\\"):void 0;function ut(e,t){for(var n=e>>1,o=n+t/2;!(n>=o)&&i()[n>>>0];)++n;if(32<(n<<=1)-e&&st)return st.decode(r().slice(e,n));for(n=\\\"\\\",o=0;!(o>=t/2);++o){var s=a()[e+2*o>>1>>>0];if(0==s)break;n+=String.fromCharCode(s)}return n}function lt(e,t,n){if(void 0===n&&(n=2147483647),2>n)return 0;var r=t;n=(n-=2)<2*e.length?n/2:e.length;for(var i=0;i<n;++i){var o=e.charCodeAt(i);a()[t>>1>>>0]=o,t+=2}return a()[t>>1>>>0]=0,t-r}function ct(e){return 2*e.length}function pt(e,t){for(var n=0,r=\\\"\\\";!(n>=t/4);){var a=o()[e+4*n>>2>>>0];if(0==a)break;++n,65536<=a?(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a)):r+=String.fromCharCode(a)}return r}function dt(e,t,n){if(void 0===n&&(n=2147483647),4>n)return 0;var r=t>>>=0;n=r+n-4;for(var a=0;a<e.length;++a){var i=e.charCodeAt(a);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++a)),o()[t>>2>>>0]=i,(t+=4)+4>n)break}return o()[t>>2>>>0]=0,t-r}function ft(e){for(var t=0,n=0;n<e.length;++n){var r=e.charCodeAt(n);55296<=r&&57343>=r&&++n,t+=4}return t}function ht(e){if(!F)try{if(e(),!J())try{$?vn(D):ye(D)}catch(e){be(e)}}catch(e){be(e)}}function gt(e){\\\"function\\\"==typeof Atomics.lc&&(Atomics.lc(o(),e>>2,e).value.then(mt),e+=128,Atomics.store(o(),e>>2,1))}function mt(){var e=dn();e&&(gt(e),ht((()=>wn())))}function yt(e,t){var n=Fe[e];if(void 0===n){var r=ze(e=gn(e));hn(e),Ze(t+\\\" has unknown type \\\"+r)}return n}l.__emscripten_thread_mailbox_await=gt,l.checkMailbox=mt;var bt={};function vt(e){var t=bt[e];return void 0===t?ze(e):t}var wt=[];function $t(){return\\\"object\\\"==typeof globalThis?globalThis:Function(\\\"return this\\\")()}var _t=[],At={};function Ct(e){return s()[e>>>2]+4294967296*o()[e+4>>>2]}function St(e){return 0==e%4&&(0!=e%100||0==e%400)}var xt=[0,31,60,91,121,152,182,213,244,274,305,335],Et=[0,31,59,90,120,151,181,212,243,273,304,334];function Pt(e){return(St(e.getFullYear())?xt:Et)[e.getMonth()]+e.getDate()-1}function Tt(e,t,n,r,a,i,o){return $?Mt(17,1,e,t,n,r,a,i,o):-52}function Ot(e,t,n,r,a,i){if($)return Mt(18,1,e,t,n,r,a,i)}function It(e){var t=Ee(e)+1,n=fn(t);return n&&Te(e,n,t),n}var kt,Rt=[];function Dt(e,t,n){var a;for(Rt.length=0,n>>=2;a=r()[t++>>>0];)n+=105!=a&n,Rt.push(105==a?o()[n>>>0]:(106==a?H:u())[n++>>1]),++n;return ue[e].apply(null,Rt)}function Mt(e,t){var n=arguments.length-2,r=arguments;return function(e){var t=_n();return e=e(),An(t),e}((()=>{for(var a=2*n,i=Cn(8*a),o=i>>3,s=0;s<n;s++){var l=r[2+s];\\\"bigint\\\"==typeof l?(H[o+2*s]=1n,H[o+2*s+1]=l):(H[o+2*s]=0n,u()[o+2*s+1>>>0]=l)}return yn(e,a,i,t)}))}kt=w?()=>{var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:()=>performance.timeOrigin+performance.now();var Wt,jt=[],Ut={};function Bt(){if(!Wt){var e,t={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:m||\\\"./this.program\\\"};for(e in Ut)void 0===Ut[e]?delete t[e]:t[e]=Ut[e];var n=[];for(e in t)n.push(e+\\\"=\\\"+t[e]);Wt=n}return Wt}function Gt(e,n){if($)return Mt(19,1,e,n);var r=0;return Bt().forEach((function(a,i){var o=n+r;for(i=s()[e+4*i>>2>>>0]=o,o=0;o<a.length;++o)t()[i++>>0>>>0]=a.charCodeAt(o);t()[i>>0>>>0]=0,r+=a.length+1})),0}function Nt(e,t){if($)return Mt(20,1,e,t);var n=Bt();s()[e>>2>>>0]=n.length;var r=0;return n.forEach((function(e){r+=e.length+1})),s()[t>>2>>>0]=r,0}function Ht(e){return $?Mt(21,1,e):52}function zt(e,t,n,r){return $?Mt(22,1,e,t,n,r):52}function Lt(e,t,n,r){return $?Mt(23,1,e,t,n,r):70}var Ft=[null,[],[]];function Vt(e,t,n,a){if($)return Mt(24,1,e,t,n,a);for(var i=0,o=0;o<n;o++){var u=s()[t>>2>>>0],l=s()[t+4>>2>>>0];t+=8;for(var c=0;c<l;c++){var p=r()[u+c>>>0],d=Ft[e];0===p||10===p?((1===e?T:O)(he(d,0)),d.length=0):d.push(p)}i+=l}return s()[a>>2>>>0]=i,0}var Kt=[31,29,31,30,31,30,31,31,30,31,30,31],Yt=[31,28,31,30,31,30,31,31,30,31,30,31];function qt(e,n,r,a){function i(e,t,n){for(e=\\\"number\\\"==typeof e?e.toString():e||\\\"\\\";e.length<t;)e=n[0]+e;return e}function s(e,t){return i(e,t,\\\"0\\\")}function u(e,t){function n(e){return 0>e?-1:0<e?1:0}var r;return 0===(r=n(e.getFullYear()-t.getFullYear()))&&0===(r=n(e.getMonth()-t.getMonth()))&&(r=n(e.getDate()-t.getDate())),r}function l(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function c(e){var t=e.ub;for(e=new Date(new Date(e.vb+1900,0,1).getTime());0<t;){var n=e.getMonth(),r=(St(e.getFullYear())?Kt:Yt)[n];if(!(t>r-e.getDate())){e.setDate(e.getDate()+t);break}t-=r-e.getDate()+1,e.setDate(1),11>n?e.setMonth(n+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return n=new Date(e.getFullYear()+1,0,4),t=l(new Date(e.getFullYear(),0,4)),n=l(n),0>=u(t,e)?0>=u(n,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var p=o()[a+40>>2>>>0];for(var d in a={ic:o()[a>>2>>>0],hc:o()[a+4>>2>>>0],Ab:o()[a+8>>2>>>0],Fb:o()[a+12>>2>>>0],Bb:o()[a+16>>2>>>0],vb:o()[a+20>>2>>>0],rb:o()[a+24>>2>>>0],ub:o()[a+28>>2>>>0],rc:o()[a+32>>2>>>0],fc:o()[a+36>>2>>>0],jc:p?ge(p):\\\"\\\"},r=ge(r),p={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})r=r.replace(new RegExp(d,\\\"g\\\"),p[d]);var f=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),h=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(d in p={\\\"%a\\\":function(e){return f[e.rb].substring(0,3)},\\\"%A\\\":function(e){return f[e.rb]},\\\"%b\\\":function(e){return h[e.Bb].substring(0,3)},\\\"%B\\\":function(e){return h[e.Bb]},\\\"%C\\\":function(e){return s((e.vb+1900)/100|0,2)},\\\"%d\\\":function(e){return s(e.Fb,2)},\\\"%e\\\":function(e){return i(e.Fb,2,\\\" \\\")},\\\"%g\\\":function(e){return c(e).toString().substring(2)},\\\"%G\\\":function(e){return c(e)},\\\"%H\\\":function(e){return s(e.Ab,2)},\\\"%I\\\":function(e){return 0==(e=e.Ab)?e=12:12<e&&(e-=12),s(e,2)},\\\"%j\\\":function(e){for(var t=0,n=0;n<=e.Bb-1;t+=(St(e.vb+1900)?Kt:Yt)[n++]);return s(e.Fb+t,3)},\\\"%m\\\":function(e){return s(e.Bb+1,2)},\\\"%M\\\":function(e){return s(e.hc,2)},\\\"%n\\\":function(){return\\\"\\\\n\\\"},\\\"%p\\\":function(e){return 0<=e.Ab&&12>e.Ab?\\\"AM\\\":\\\"PM\\\"},\\\"%S\\\":function(e){return s(e.ic,2)},\\\"%t\\\":function(){return\\\"\\\\t\\\"},\\\"%u\\\":function(e){return e.rb||7},\\\"%U\\\":function(e){return s(Math.floor((e.ub+7-e.rb)/7),2)},\\\"%V\\\":function(e){var t=Math.floor((e.ub+7-(e.rb+6)%7)/7);if(2>=(e.rb+371-e.ub-2)%7&&t++,t)53==t&&(4==(n=(e.rb+371-e.ub)%7)||3==n&&St(e.vb)||(t=1));else{t=52;var n=(e.rb+7-e.ub-1)%7;(4==n||5==n&&St(e.vb%400-1))&&t++}return s(t,2)},\\\"%w\\\":function(e){return e.rb},\\\"%W\\\":function(e){return s(Math.floor((e.ub+7-(e.rb+6)%7)/7),2)},\\\"%y\\\":function(e){return(e.vb+1900).toString().substring(2)},\\\"%Y\\\":function(e){return e.vb+1900},\\\"%z\\\":function(e){var t=0<=(e=e.fc);return e=Math.abs(e)/60,(t?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(e/60*100+e%60)).slice(-4)},\\\"%Z\\\":function(e){return e.jc},\\\"%%\\\":function(){return\\\"%\\\"}},r=r.replace(/%%/g,\\\"\\\\0\\\\0\\\"),p)r.includes(d)&&(r=r.replace(new RegExp(d,\\\"g\\\"),p[d](a)));return d=function(e){var t=Array(Ee(e)+1);return Pe(e,t,0,t.length),t}(r=r.replace(/\\\\0\\\\0/g,\\\"%\\\")),d.length>n?0:(function(e,n){t().set(e,n>>>0)}(d,e),d.length-1)}function Xt(e){try{e()}catch(e){ae(e)}}var Zt=0,Jt=null,Qt=0,en=[],tn={},nn={},rn=0,an=null,on=[];function sn(e){if(!F){if(0===Zt){var t=!1,n=!1;e(((e=0)=>{if(!F&&(Qt=e,t=!0,n)){Zt=2,Xt((()=>Tn(Jt))),\\\"undefined\\\"!=typeof Browser&&Browser.Db.Ob&&Browser.Db.resume(),e=!1;try{var r=function(){var e=o()[Jt+8>>2>>>0];return e=l.asm[nn[e]],--Z,e()}()}catch(t){r=t,e=!0}var a=!1;if(!Jt){var i=an;i&&(an=null,(e?i.reject:i.resolve)(r),a=!0)}if(e&&!a)throw r}})),n=!0,t||(Zt=1,Jt=function(){var e=fn(65548),t=e+12;o()[e>>2>>>0]=t,o()[e+4>>2>>>0]=t+65536,t=en[0];var n=tn[t];return void 0===n&&(n=rn++,tn[t]=n,nn[n]=t),t=n,o()[e+8>>2>>>0]=t,e}(),\\\"undefined\\\"!=typeof Browser&&Browser.Db.Ob&&Browser.Db.pause(),Xt((()=>En(Jt))))}else 2===Zt?(Zt=0,Xt(On),hn(Jt),Jt=null,on.forEach((e=>ht(e)))):ae(\\\"invalid state: \\\"+Zt);return Qt}}ve.Cb();for(var un=Array(256),ln=0;256>ln;++ln)un[ln]=String.fromCharCode(ln);He=un,Xe=l.BindingError=qe(\\\"BindingError\\\"),l.InternalError=qe(\\\"InternalError\\\"),tt.kb.push({value:void 0},{value:null},{value:!0},{value:!1}),tt.zb=tt.kb.length,l.count_emval_handles=function(){for(var e=0,t=tt.zb;t<tt.kb.length;++t)void 0!==tt.kb[t]&&++e;return e};var cn=[null,me,$e,Ae,Se,xe,Oe,Ie,ke,Re,De,Me,We,je,Ue,Be,Ge,Tt,Ot,Gt,Nt,Ht,zt,Lt,Vt],pn={ya:function(e,t,n){return function(e){return sn((t=>{e().then(t)}))}((async()=>{await l.Ub(e,t,n)}))},b:function(e,t,n){throw new _e(e).Cb(t,n),e},ta:function(){ae(\\\"To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html\\\")},ja:function(e){mn(e,!v,1,!b),ve.Jb()},E:function(e){$?postMessage({cmd:\\\"cleanupThread\\\",thread:e}):pe(e)},Y:Ce,z:Se,pa:xe,U:Oe,W:Ie,N:ke,na:Re,da:De,ma:Me,G:We,V:je,S:Ue,oa:Be,T:Ge,J:function(e,t,n,r,a){t=ze(t),n=et(n);var i=-1!=t.indexOf(\\\"u\\\");i&&(a=(1n<<64n)-1n),Je(e,{name:t,fromWireType:function(e){return e},toWireType:function(e,n){if(\\\"bigint\\\"!=typeof n&&\\\"number\\\"!=typeof n)throw new TypeError('Cannot convert \\\"'+Ne(n)+'\\\" to '+this.name);if(n<r||n>a)throw new TypeError('Passing a number \\\"'+Ne(n)+'\\\" from JS side to C/C++ side to an argument of type \\\"'+t+'\\\", which is outside the valid range ['+r+\\\", \\\"+a+\\\"]!\\\");return n},argPackAdvance:8,readValueFromPointer:Qe(t,n,!i),xb:null})},wa:function(e,n,r,i,s){var u=et(r);Je(e,{name:n=ze(n),fromWireType:function(e){return!!e},toWireType:function(e,t){return t?i:s},argPackAdvance:8,readValueFromPointer:function(e){if(1===r)var i=t();else if(2===r)i=a();else{if(4!==r)throw new TypeError(\\\"Unknown boolean type size: \\\"+n);i=o()}return this.fromWireType(i[e>>>u])},xb:null})},va:function(e,t){Je(e,{name:t=ze(t),fromWireType:function(e){var t=rt(e);return nt(e),t},toWireType:function(e,t){return at(t)},argPackAdvance:8,readValueFromPointer:it,xb:null})},I:function(e,t,n){n=et(n),Je(e,{name:t=ze(t),fromWireType:function(e){return e},toWireType:function(e,t){return t},argPackAdvance:8,readValueFromPointer:ot(t,n),xb:null})},v:function(e,t,n,r,a){t=ze(t),-1===a&&(a=4294967295),a=et(n);var i=e=>e;if(0===r){var o=32-8*n;i=e=>e<<o>>>o}n=t.includes(\\\"unsigned\\\")?function(e,t){return t>>>0}:function(e,t){return t},Je(e,{name:t,fromWireType:i,toWireType:n,argPackAdvance:8,readValueFromPointer:Qe(t,a,0!==r),xb:null})},n:function(e,t,n){function r(e){e>>=2;var t=s();return new a(t.buffer,t[e+1>>>0],t[e>>>0])}var a=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array][t];Je(e,{name:n=ze(n),fromWireType:r,argPackAdvance:8,readValueFromPointer:r},{Qb:!0})},K:function(e,t){var n=\\\"std::string\\\"===(t=ze(t));Je(e,{name:t,fromWireType:function(e){var t=s()[e>>2>>>0],a=e+4;if(n)for(var i=a,o=0;o<=t;++o){var u=a+o;if(o==t||0==r()[u>>>0]){if(i=ge(i,u-i),void 0===l)var l=i;else l+=String.fromCharCode(0),l+=i;i=u+1}}else{for(l=Array(t),o=0;o<t;++o)l[o]=String.fromCharCode(r()[a+o>>>0]);l=l.join(\\\"\\\")}return hn(e),l},toWireType:function(e,t){t instanceof ArrayBuffer&&(t=new Uint8Array(t));var a=\\\"string\\\"==typeof t;a||t instanceof Uint8Array||t instanceof Uint8ClampedArray||t instanceof Int8Array||Ze(\\\"Cannot pass non-string to std::string\\\");var i=n&&a?Ee(t):t.length,o=fn(4+i+1),u=o+4>>>0;if(s()[o>>2>>>0]=i,n&&a)Te(t,u,i+1);else if(a)for(a=0;a<i;++a){var l=t.charCodeAt(a);255<l&&(hn(u),Ze(\\\"String has UTF-16 code units that do not fit in 8 bits\\\")),r()[u+a>>>0]=l}else for(a=0;a<i;++a)r()[u+a>>>0]=t[a];return null!==e&&e.push(hn,o),o},argPackAdvance:8,readValueFromPointer:it,xb:function(e){hn(e)}})},B:function(e,t,n){if(n=ze(n),2===t)var r=ut,a=lt,o=ct,u=()=>i(),l=1;else 4===t&&(r=pt,a=dt,o=ft,u=()=>s(),l=2);Je(e,{name:n,fromWireType:function(e){for(var n,a=s()[e>>>2],i=u(),o=e+4,c=0;c<=a;++c){var p=e+4+c*t;c!=a&&0!=i[p>>>l]||(o=r(o,p-o),void 0===n?n=o:(n+=String.fromCharCode(0),n+=o),o=p+t)}return hn(e),n},toWireType:function(e,r){\\\"string\\\"!=typeof r&&Ze(\\\"Cannot pass non-string to C++ string type \\\"+n);var i=o(r),u=fn(4+i+t);return u>>>=0,s()[u>>>2]=i>>l,a(r,u+4,i+t),null!==e&&e.push(hn,u),u},argPackAdvance:8,readValueFromPointer:it,xb:function(e){hn(e)}})},xa:function(e,t){Je(e,{Sb:!0,name:t=ze(t),argPackAdvance:0,fromWireType:function(){},toWireType:function(){}})},Z:function(){return 131072},sa:function(){return!0},Q:function(e,t){e==t?setTimeout((()=>mt())):$?postMessage({targetThread:e,cmd:\\\"checkMailbox\\\"}):(e=ve.qb[e])&&e.postMessage({cmd:\\\"checkMailbox\\\"})},ga:function(){return-1},ia:gt,ra:function(e){w&&ve.qb[e].ref()},s:function(e,t,n){e=rt(e),t=yt(t,\\\"emval::as\\\");var r=[],a=at(r);return s()[n>>2>>>0]=a,t.toWireType(r,e)},i:function(e,t,n,r,a){e=wt[e],t=rt(t),n=vt(n);var i=[];return s()[r>>2>>>0]=at(i),e(t,n,i,a)},t:function(e,t,n,r){(e=wt[e])(t=rt(t),n=vt(n),null,r)},c:nt,M:function(e,t){return(e=rt(e))==rt(t)},p:function(e){return 0===e?at($t()):(e=vt(e),at($t()[e]))},g:function(e,t){var n=function(e,t){for(var n=Array(e),r=0;r<e;++r)n[r]=yt(s()[t+4*r>>2>>>0],\\\"parameter \\\"+r);return n}(e,t),r=n[0];t=r.name+\\\"_$\\\"+n.slice(1).map((function(e){return e.name})).join(\\\"_\\\")+\\\"$\\\";var a=_t[t];if(void 0!==a)return a;a=[\\\"retType\\\"];for(var i=[r],o=\\\"\\\",u=0;u<e-1;++u)o+=(0!==u?\\\", \\\":\\\"\\\")+\\\"arg\\\"+u,a.push(\\\"argType\\\"+u),i.push(n[1+u]);var l=\\\"return function \\\"+Ke(\\\"methodCaller_\\\"+t)+\\\"(handle, name, destructors, args) {\\\\n\\\",c=0;for(u=0;u<e-1;++u)l+=\\\"    var arg\\\"+u+\\\" = argType\\\"+u+\\\".readValueFromPointer(args\\\"+(c?\\\"+\\\"+c:\\\"\\\")+\\\");\\\\n\\\",c+=n[u+1].argPackAdvance;for(l+=\\\"    var rv = handle[name](\\\"+o+\\\");\\\\n\\\",u=0;u<e-1;++u)n[u+1].deleteObject&&(l+=\\\"    argType\\\"+u+\\\".deleteObject(arg\\\"+u+\\\");\\\\n\\\");return r.Sb||(l+=\\\"    return retType.toWireType(destructors, rv);\\\\n\\\"),a.push(l+\\\"};\\\\n\\\"),e=function(e){var t=Function;if(!(t instanceof Function))throw new TypeError(\\\"new_ called with constructor type \\\"+typeof t+\\\" which is not a function\\\");var n=Ye(t.name||\\\"unknownFunctionName\\\",(function(){}));return n.prototype=t.prototype,n=new n,(e=t.apply(n,e))instanceof Object?e:n}(a).apply(null,i),a=function(e){var t=wt.length;return wt.push(e),t}(e),_t[t]=a},u:function(e,t){return e=rt(e),t=rt(t),at(e[t])},d:function(e){4<e&&(tt.get(e).Hb+=1)},y:function(e,t,n,r){e=rt(e);var a=At[t];return a||(a=function(e){for(var t=\\\"\\\",n=0;n<e;++n)t+=(0!==n?\\\", \\\":\\\"\\\")+\\\"arg\\\"+n;var r=\\\"return function emval_allocator_\\\"+e+\\\"(constructor, argTypes, args) {\\\\n  var HEAPU32 = getMemory();\\\\n\\\";for(n=0;n<e;++n)r+=\\\"var argType\\\"+n+\\\" = requireRegisteredType(HEAPU32[((argTypes)>>2)], 'parameter \\\"+n+\\\"');\\\\nvar arg\\\"+n+\\\" = argType\\\"+n+\\\".readValueFromPointer(args);\\\\nargs += argType\\\"+n+\\\"['argPackAdvance'];\\\\nargTypes += 4;\\\\n\\\";return new Function(\\\"requireRegisteredType\\\",\\\"Module\\\",\\\"valueToHandle\\\",\\\"getMemory\\\",r+\\\"var obj = new constructor(\\\"+t+\\\");\\\\nreturn valueToHandle(obj);\\\\n}\\\\n\\\")(yt,l,at,(()=>s()))}(t),At[t]=a),a(e,n,r)},w:function(){return at([])},m:function(e){e=rt(e);for(var t=Array(e.length),n=0;n<e.length;n++)t[n]=e[n];return at(t)},e:function(e){return at(vt(e))},l:function(){return at({})},h:function(e){for(var t=rt(e);t.length;){var n=t.pop();t.pop()(n)}nt(e)},k:function(e,t,n){e=rt(e),t=rt(t),n=rt(n),e[t]=n},f:function(e,t){return e=(e=yt(e,\\\"_emval_take_value\\\")).readValueFromPointer(t),at(e)},aa:function(e,t){e=new Date(1e3*Ct(e)),o()[t>>2>>>0]=e.getUTCSeconds(),o()[t+4>>2>>>0]=e.getUTCMinutes(),o()[t+8>>2>>>0]=e.getUTCHours(),o()[t+12>>2>>>0]=e.getUTCDate(),o()[t+16>>2>>>0]=e.getUTCMonth(),o()[t+20>>2>>>0]=e.getUTCFullYear()-1900,o()[t+24>>2>>>0]=e.getUTCDay(),e=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,o()[t+28>>2>>>0]=e},ba:function(e,t){e=new Date(1e3*Ct(e)),o()[t>>2>>>0]=e.getSeconds(),o()[t+4>>2>>>0]=e.getMinutes(),o()[t+8>>2>>>0]=e.getHours(),o()[t+12>>2>>>0]=e.getDate(),o()[t+16>>2>>>0]=e.getMonth(),o()[t+20>>2>>>0]=e.getFullYear()-1900,o()[t+24>>2>>>0]=e.getDay();var n=0|Pt(e);o()[t+28>>2>>>0]=n,o()[t+36>>2>>>0]=-60*e.getTimezoneOffset(),n=new Date(e.getFullYear(),6,1).getTimezoneOffset();var r=new Date(e.getFullYear(),0,1).getTimezoneOffset();e=0|(n!=r&&e.getTimezoneOffset()==Math.min(r,n)),o()[t+32>>2>>>0]=e},ca:function(e){var t=new Date(o()[e+20>>2>>>0]+1900,o()[e+16>>2>>>0],o()[e+12>>2>>>0],o()[e+8>>2>>>0],o()[e+4>>2>>>0],o()[e>>2>>>0],0),n=o()[e+32>>2>>>0],r=t.getTimezoneOffset(),a=new Date(t.getFullYear(),6,1).getTimezoneOffset(),i=new Date(t.getFullYear(),0,1).getTimezoneOffset(),s=Math.min(i,a);return 0>n?o()[e+32>>2>>>0]=Number(a!=i&&s==r):0<n!=(s==r)&&(a=Math.max(i,a),t.setTime(t.getTime()+6e4*((0<n?s:a)-r))),o()[e+24>>2>>>0]=t.getDay(),n=0|Pt(t),o()[e+28>>2>>>0]=n,o()[e>>2>>>0]=t.getSeconds(),o()[e+4>>2>>>0]=t.getMinutes(),o()[e+8>>2>>>0]=t.getHours(),o()[e+12>>2>>>0]=t.getDate(),o()[e+16>>2>>>0]=t.getMonth(),o()[e+20>>2>>>0]=t.getYear(),t.getTime()/1e3|0},_:Tt,$:Ot,P:function(e,t,n){function r(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\\\"GMT\\\"}var a=(new Date).getFullYear(),i=new Date(a,0,1),u=new Date(a,6,1);a=i.getTimezoneOffset();var l=u.getTimezoneOffset(),c=Math.max(a,l);s()[e>>2>>>0]=60*c,o()[t>>2>>>0]=Number(a!=l),e=r(i),t=r(u),e=It(e),t=It(t),l<a?(s()[n>>2>>>0]=e,s()[n+4>>2>>>0]=t):(s()[n>>2>>>0]=t,s()[n+4>>2>>>0]=e)},o:function(){ae(\\\"\\\")},ua:function(){ae(\\\"To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html\\\")},j:function(e,t,n){return Dt(e,t,n)},L:function(e,t,n){return Dt(e,t,n)},F:function(){},H:function(){return Date.now()},qa:function(){throw Z+=1,\\\"unwind\\\"},R:function(){return 4294901760},r:kt,x:function(){return w?n(993).cpus().length:navigator.hardwareConcurrency},fa:function(e,t,n){t/=2,jt.length=t,n>>=3;for(var r=0;r<t;r++)jt[r]=H[n+2*r]?H[n+2*r+1]:u()[n+2*r+1>>>0];return(0>e?ue[-e-1]:cn[e]).apply(null,jt)},O:function(e){var t=r().length;if((e>>>=0)<=t||4294901760<e)return!1;for(var n=1;4>=n;n*=2){var a=t*(1+.2/n);a=Math.min(a,e+100663296);var i=Math,o=i.min;a=Math.max(e,a),a+=(65536-a%65536)%65536;e:{var s=k.buffer;try{k.grow(o.call(i,4294901760,a)-s.byteLength+65535>>>16),V();var u=1;break e}catch(e){}u=void 0}if(u)return!0}return!1},ka:Gt,la:Nt,X:ye,A:Ht,D:zt,ea:Lt,C:Vt,a:k||l.wasmMemory,ha:qt,q:function(e,t,n,r){return qt(e,t,n,r)}};!function(){function e(e,t){return e=function(e){var t,n={};for(t in e)!function(t){var r=e[t];n[t]=\\\"function\\\"==typeof r?function(){en.push(t);try{return r.apply(null,arguments)}finally{F||(en.pop()===t||ae(),Jt&&1===Zt&&0===en.length&&(Zt=0,Z+=1,Xt(Pn),\\\"undefined\\\"!=typeof Fibers&&Fibers.sc()))}}:r}(t);return n}(e=e.exports),l.asm=e,ve.Kb.push(l.asm.Ya),q.unshift(l.asm.za),R=t,ve.Zb((()=>{if(te--,l.monitorRunDependencies&&l.monitorRunDependencies(te),0==te&&(null!==ne&&(clearInterval(ne),ne=null),re)){var e=re;re=null,e()}})),e}var t={a:pn};if(te++,l.monitorRunDependencies&&l.monitorRunDependencies(te),l.instantiateWasm)try{return l.instantiateWasm(t,e)}catch(e){O(\\\"Module.instantiateWasm callback failed with error: \\\"+e),p(e)}(function(e,t){var n=ee;return P||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||ie(n)||n.startsWith(\\\"file://\\\")||w||\\\"function\\\"!=typeof fetch?se(n,e,t):fetch(n,{credentials:\\\"same-origin\\\"}).then((r=>WebAssembly.instantiateStreaming(r,e).then(t,(function(r){return O(\\\"wasm streaming compile failed: \\\"+r),O(\\\"falling back to ArrayBuffer instantiation\\\"),se(n,e,t)}))))})(t,(function(t){e(t.instance,t.module)})).catch(p)}(),l._OrtInit=function(){return(l._OrtInit=l.asm.Aa).apply(null,arguments)},l._OrtGetLastError=function(){return(l._OrtGetLastError=l.asm.Ba).apply(null,arguments)},l._OrtCreateSessionOptions=function(){return(l._OrtCreateSessionOptions=l.asm.Ca).apply(null,arguments)},l._OrtAppendExecutionProvider=function(){return(l._OrtAppendExecutionProvider=l.asm.Da).apply(null,arguments)},l._OrtAddSessionConfigEntry=function(){return(l._OrtAddSessionConfigEntry=l.asm.Ea).apply(null,arguments)},l._OrtReleaseSessionOptions=function(){return(l._OrtReleaseSessionOptions=l.asm.Fa).apply(null,arguments)},l._OrtCreateSession=function(){return(l._OrtCreateSession=l.asm.Ga).apply(null,arguments)},l._OrtReleaseSession=function(){return(l._OrtReleaseSession=l.asm.Ha).apply(null,arguments)},l._OrtGetInputOutputCount=function(){return(l._OrtGetInputOutputCount=l.asm.Ia).apply(null,arguments)},l._OrtGetInputName=function(){return(l._OrtGetInputName=l.asm.Ja).apply(null,arguments)},l._OrtGetOutputName=function(){return(l._OrtGetOutputName=l.asm.Ka).apply(null,arguments)},l._OrtFree=function(){return(l._OrtFree=l.asm.La).apply(null,arguments)},l._OrtCreateTensor=function(){return(l._OrtCreateTensor=l.asm.Ma).apply(null,arguments)},l._OrtGetTensorData=function(){return(l._OrtGetTensorData=l.asm.Na).apply(null,arguments)},l._OrtReleaseTensor=function(){return(l._OrtReleaseTensor=l.asm.Oa).apply(null,arguments)},l._OrtCreateRunOptions=function(){return(l._OrtCreateRunOptions=l.asm.Pa).apply(null,arguments)},l._OrtAddRunConfigEntry=function(){return(l._OrtAddRunConfigEntry=l.asm.Qa).apply(null,arguments)},l._OrtReleaseRunOptions=function(){return(l._OrtReleaseRunOptions=l.asm.Ra).apply(null,arguments)},l._OrtRun=function(){return(l._OrtRun=l.asm.Sa).apply(null,arguments)},l._OrtEndProfiling=function(){return(l._OrtEndProfiling=l.asm.Ta).apply(null,arguments)},l._JsepOutput=function(){return(l._JsepOutput=l.asm.Ua).apply(null,arguments)};var dn=l._pthread_self=function(){return(dn=l._pthread_self=l.asm.Va).apply(null,arguments)},fn=l._malloc=function(){return(fn=l._malloc=l.asm.Wa).apply(null,arguments)},hn=l._free=function(){return(hn=l._free=l.asm.Xa).apply(null,arguments)};function gn(){return(gn=l.asm.Za).apply(null,arguments)}l.__emscripten_tls_init=function(){return(l.__emscripten_tls_init=l.asm.Ya).apply(null,arguments)},l.__embind_initialize_bindings=function(){return(l.__embind_initialize_bindings=l.asm._a).apply(null,arguments)};var mn=l.__emscripten_thread_init=function(){return(mn=l.__emscripten_thread_init=l.asm.ab).apply(null,arguments)};function yn(){return(yn=l.asm.cb).apply(null,arguments)}function bn(){return(bn=l.asm.db).apply(null,arguments)}l.__emscripten_thread_crashed=function(){return(l.__emscripten_thread_crashed=l.asm.bb).apply(null,arguments)};var vn=l.__emscripten_thread_exit=function(){return(vn=l.__emscripten_thread_exit=l.asm.eb).apply(null,arguments)},wn=l.__emscripten_check_mailbox=function(){return(wn=l.__emscripten_check_mailbox=l.asm.fb).apply(null,arguments)};function $n(){return($n=l.asm.gb).apply(null,arguments)}function _n(){return(_n=l.asm.hb).apply(null,arguments)}function An(){return(An=l.asm.ib).apply(null,arguments)}function Cn(){return(Cn=l.asm.jb).apply(null,arguments)}var Sn,xn=l.dynCall_ii=function(){return(xn=l.dynCall_ii=l.asm.lb).apply(null,arguments)};function En(){return(En=l.asm.mb).apply(null,arguments)}function Pn(){return(Pn=l.asm.nb).apply(null,arguments)}function Tn(){return(Tn=l.asm.ob).apply(null,arguments)}function On(){return(On=l.asm.pb).apply(null,arguments)}function In(){function e(){if(!Sn&&(Sn=!0,l.calledRun=!0,!F)&&($||we(q),c(l),l.onRuntimeInitialized&&l.onRuntimeInitialized(),!$)){if(l.postRun)for(\\\"function\\\"==typeof l.postRun&&(l.postRun=[l.postRun]);l.postRun.length;){var e=l.postRun.shift();X.unshift(e)}we(X)}}if(!(0<te))if($)c(l),$||we(q),startWorker(l);else{if(l.preRun)for(\\\"function\\\"==typeof l.preRun&&(l.preRun=[l.preRun]);l.preRun.length;)Q();we(Y),0<te||(l.setStatus?(l.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){l.setStatus(\\\"\\\")}),1),e()}),1)):e())}}if(l.___start_em_js=1306846,l.___stop_em_js=1307007,l.keepRuntimeAlive=J,l.wasmMemory=k,l.stackAlloc=Cn,l.stackSave=_n,l.stackRestore=An,l.UTF8ToString=ge,l.stringToUTF8=Te,l.lengthBytesUTF8=Ee,l.ExitStatus=le,l.PThread=ve,re=function e(){Sn||In(),Sn||(re=e)},l.preInit)for(\\\"function\\\"==typeof l.preInit&&(l.preInit=[l.preInit]);0<l.preInit.length;)l.preInit.pop()();return In(),e.ready});e.exports=r},377:(e,t,n)=>{var _scriptDir,r=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\\\"undefined\\\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(e={}){var t,r,a;t||(t=void 0!==e?e:{}),t.ready=new Promise(((e,t)=>{r=e,a=t})),t.jsepInit=function(e,n,r,a,i,o,s,u){t.xb=e,t.nb=n,t.pb=r,t.ib=a,t.ob=i,t.Na=o,t.qb=s,t.rb=u};var i,o,s,u=Object.assign({},t),l=\\\"./this.program\\\",c=(e,t)=>{throw t},p=\\\"object\\\"==typeof window,d=\\\"function\\\"==typeof importScripts,f=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,h=\\\"\\\";if(f){var g=n(384),m=n(908);h=d?m.dirname(h)+\\\"/\\\":__dirname+\\\"/\\\",i=(e,t)=>(e=e.startsWith(\\\"file://\\\")?new URL(e):m.normalize(e),g.readFileSync(e,t?void 0:\\\"utf8\\\")),s=e=>((e=i(e,!0)).buffer||(e=new Uint8Array(e)),e),o=(e,t,n,r=!0)=>{e=e.startsWith(\\\"file://\\\")?new URL(e):m.normalize(e),g.readFile(e,r?void 0:\\\"utf8\\\",((e,a)=>{e?n(e):t(r?a.buffer:a)}))},!t.thisProgram&&1<process.argv.length&&(l=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),c=(e,t)=>{throw process.exitCode=e,t},t.inspect=()=>\\\"[Emscripten Module object]\\\"}else(p||d)&&(d?h=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(h=document.currentScript.src),_scriptDir&&(h=_scriptDir),h=0!==h.indexOf(\\\"blob:\\\")?h.substr(0,h.replace(/[?#].*/,\\\"\\\").lastIndexOf(\\\"/\\\")+1):\\\"\\\",i=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.send(null),t.responseText},d&&(s=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.responseType=\\\"arraybuffer\\\",t.send(null),new Uint8Array(t.response)}),o=(e,t,n)=>{var r=new XMLHttpRequest;r.open(\\\"GET\\\",e,!0),r.responseType=\\\"arraybuffer\\\",r.onload=()=>{200==r.status||0==r.status&&r.response?t(r.response):n()},r.onerror=n,r.send(null)});var y,b=t.print||console.log.bind(console),v=t.printErr||console.warn.bind(console);Object.assign(t,u),u=null,t.thisProgram&&(l=t.thisProgram),t.quit&&(c=t.quit),t.wasmBinary&&(y=t.wasmBinary);var w=t.noExitRuntime||!0;\\\"object\\\"!=typeof WebAssembly&&z(\\\"no native wasm support detected\\\");var $,_,A,C,S,x,E,P,T,O,I,k,R=!1;function D(){var e=$.buffer;t.HEAP8=A=new Int8Array(e),t.HEAP16=S=new Int16Array(e),t.HEAP32=E=new Int32Array(e),t.HEAPU8=C=new Uint8Array(e),t.HEAPU16=x=new Uint16Array(e),t.HEAPU32=P=new Uint32Array(e),t.HEAPF32=T=new Float32Array(e),t.HEAPF64=k=new Float64Array(e),t.HEAP64=O=new BigInt64Array(e),t.HEAPU64=I=new BigUint64Array(e)}var M=[],W=[],j=[];function U(){var e=t.preRun.shift();M.unshift(e)}var B,G=0,N=null,H=null;function z(e){throw t.onAbort&&t.onAbort(e),v(e=\\\"Aborted(\\\"+e+\\\")\\\"),R=!0,_=1,e=new WebAssembly.RuntimeError(e+\\\". Build with -sASSERTIONS for more info.\\\"),a(e),e}function L(e){return e.startsWith(\\\"data:application/octet-stream;base64,\\\")}if(!L(B=\\\"ort-wasm-simd.wasm\\\")){var F=B;B=t.locateFile?t.locateFile(F,h):h+F}function V(e){try{if(e==B&&y)return new Uint8Array(y);if(s)return s(e);throw\\\"both async and sync fetching of the wasm failed\\\"}catch(e){z(e)}}function K(e,t,n){return function(e){if(!y&&(p||d)){if(\\\"function\\\"==typeof fetch&&!e.startsWith(\\\"file://\\\"))return fetch(e,{credentials:\\\"same-origin\\\"}).then((t=>{if(!t.ok)throw\\\"failed to load wasm binary file at '\\\"+e+\\\"'\\\";return t.arrayBuffer()})).catch((()=>V(e)));if(o)return new Promise(((t,n)=>{o(e,(e=>t(new Uint8Array(e))),n)}))}return Promise.resolve().then((()=>V(e)))}(e).then((e=>WebAssembly.instantiate(e,t))).then((e=>e)).then(n,(e=>{v(\\\"failed to asynchronously prepare wasm: \\\"+e),z(e)}))}var Y={1296520:()=>{t.jsepRunPromise=new Promise((function(e){t.sb=e}))},1296615:e=>{t.sb(e)},1296653:e=>t.nb(e),1296686:e=>t.pb(e),1296718:(e,n,r)=>{t.ib(e,n,r,!0)},1296757:(e,n,r)=>{t.ib(e,n,r)},1296790:e=>{t.Na(\\\"Abs\\\",e,void 0)},1296841:e=>{t.Na(\\\"Neg\\\",e,void 0)},1296892:e=>{t.Na(\\\"Floor\\\",e,void 0)},1296945:e=>{t.Na(\\\"Ceil\\\",e,void 0)},1296997:e=>{t.Na(\\\"Reciprocal\\\",e,void 0)},1297055:e=>{t.Na(\\\"Sqrt\\\",e,void 0)},1297107:e=>{t.Na(\\\"Exp\\\",e,void 0)},1297158:e=>{t.Na(\\\"Erf\\\",e,void 0)},1297209:e=>{t.Na(\\\"Sigmoid\\\",e,void 0)},1297264:e=>{t.Na(\\\"Sin\\\",e,void 0)},1297315:e=>{t.Na(\\\"Cos\\\",e,void 0)},1297366:e=>{t.Na(\\\"Tan\\\",e,void 0)},1297417:e=>{t.Na(\\\"Asin\\\",e,void 0)},1297469:e=>{t.Na(\\\"Acos\\\",e,void 0)},1297521:e=>{t.Na(\\\"Atan\\\",e,void 0)},1297573:e=>{t.Na(\\\"Sinh\\\",e,void 0)},1297625:e=>{t.Na(\\\"Cosh\\\",e,void 0)},1297677:e=>{t.Na(\\\"Asinh\\\",e,void 0)},1297730:e=>{t.Na(\\\"Acosh\\\",e,void 0)},1297783:e=>{t.Na(\\\"Atanh\\\",e,void 0)},1297836:(e,n,r)=>{t.Na(\\\"ClipV10\\\",e,{min:n,max:r})},1297908:e=>{t.Na(\\\"Clip\\\",e,void 0)},1297960:(e,n)=>{t.Na(\\\"Elu\\\",e,{alpha:n})},1298018:e=>{t.Na(\\\"Relu\\\",e,void 0)},1298070:(e,n)=>{t.Na(\\\"LeakyRelu\\\",e,{alpha:n})},1298134:(e,n)=>{t.Na(\\\"ThresholdedRelu\\\",e,{alpha:n})},1298204:e=>{t.Na(\\\"Add\\\",e,void 0)},1298255:e=>{t.Na(\\\"Sub\\\",e,void 0)},1298306:e=>{t.Na(\\\"Mul\\\",e,void 0)},1298357:e=>{t.Na(\\\"Div\\\",e,void 0)},1298408:e=>{t.Na(\\\"Pow\\\",e,void 0)},1298459:(e,n,r,a,i)=>{t.Na(\\\"ReduceMean\\\",e,{keepDims:!!n,noopWithEmptyAxes:!!r,axes:a?Array.from(E.subarray(i>>>0,i+a>>>0)):[]})},1298623:(e,n,r,a,i)=>{t.Na(\\\"ReduceMax\\\",e,{keepDims:!!n,noopWithEmptyAxes:!!r,axes:a?Array.from(E.subarray(i>>>0,i+a>>>0)):[]})},1298786:(e,n,r,a,i)=>{t.Na(\\\"ReduceMin\\\",e,{keepDims:!!n,noopWithEmptyAxes:!!r,axes:a?Array.from(E.subarray(i>>>0,i+a>>>0)):[]})},1298949:(e,n,r,a,i)=>{t.Na(\\\"ReduceProd\\\",e,{keepDims:!!n,noopWithEmptyAxes:!!r,axes:a?Array.from(E.subarray(i>>>0,i+a>>>0)):[]})},1299113:(e,n,r,a,i)=>{t.Na(\\\"ReduceSum\\\",e,{keepDims:!!n,noopWithEmptyAxes:!!r,axes:a?Array.from(E.subarray(i>>>0,i+a>>>0)):[]})},1299276:(e,n,r,a,i)=>{t.Na(\\\"ReduceL1\\\",e,{keepDims:!!n,noopWithEmptyAxes:!!r,axes:a?Array.from(E.subarray(i>>>0,i+a>>>0)):[]})},1299438:(e,n,r,a,i)=>{t.Na(\\\"ReduceL2\\\",e,{keepDims:!!n,noopWithEmptyAxes:!!r,axes:a?Array.from(E.subarray(i>>>0,i+a>>>0)):[]})},1299600:(e,n,r,a,i)=>{t.Na(\\\"ReduceLogSum\\\",e,{keepDims:!!n,noopWithEmptyAxes:!!r,axes:a?Array.from(E.subarray(i>>>0,i+a>>>0)):[]})},1299766:(e,n,r,a,i)=>{t.Na(\\\"ReduceSumSquare\\\",e,{keepDims:!!n,noopWithEmptyAxes:!!r,axes:a?Array.from(E.subarray(i>>>0,i+a>>>0)):[]})},1299935:(e,n,r,a,i)=>{t.Na(\\\"ReduceLogSumExp\\\",e,{keepDims:!!n,noopWithEmptyAxes:!!r,axes:a?Array.from(E.subarray(i>>>0,i+a>>>0)):[]})},1300104:(e,n,r)=>{t.Na(\\\"Transpose\\\",e,{perm:n?Array.from(E.subarray(r>>>0,r+n>>>0)):[]})},1300217:(e,n,r,a,i,o,s,u,l,c)=>{t.Na(\\\"Conv\\\",e,{format:l?\\\"NHWC\\\":\\\"NCHW\\\",auto_pad:n,dilations:[r],group:a,kernel_shape:[i],pads:[o,s],strides:[u],w_is_const:()=>!!A[c>>>0]})},1300445:(e,n,r,a,i,o,s,u,l,c,p,d,f,h,g)=>{t.Na(\\\"Conv\\\",e,{format:h?\\\"NHWC\\\":\\\"NCHW\\\",auto_pad:n,dilations:[r,a],group:i,kernel_shape:[o,s],pads:[u,l,c,p],strides:[d,f],w_is_const:()=>!!A[g>>>0]})},1300704:(e,n,r,a,i,o,s,u,l,c)=>{t.Na(\\\"Conv\\\",e,{format:l?\\\"NHWC\\\":\\\"NCHW\\\",auto_pad:n,dilations:[r],group:a,kernel_shape:[i],pads:[o,s],strides:[u],w_is_const:()=>!!A[c>>>0]})},1300932:(e,n,r,a,i,o,s,u,l,c,p,d,f,h,g)=>{t.Na(\\\"Conv\\\",e,{format:h?\\\"NHWC\\\":\\\"NCHW\\\",auto_pad:n,dilations:[r,a],group:i,kernel_shape:[o,s],pads:[u,l,c,p],strides:[d,f],w_is_const:()=>!!A[g>>>0]})},1301191:(e,n,r,a,i,o,s,u,l,c,p,d,f,h)=>{t.Na(\\\"ConvTranspose\\\",e,{format:l?\\\"NHWC\\\":\\\"NCHW\\\",autoPad:n,dilations:[r],group:a,kernel_shape:[i],pads:[o,s],strides:[u],wIsConst:()=>!!A[c>>>0],outputPadding:p?Array.from(E.subarray(d>>>0,d+p>>>0)):[],outputShape:f?Array.from(E.subarray(f>>>0,h+f>>>0)):[]})},1301571:(e,n,r,a,i,o,s,u,l,c,p,d,f)=>{t.Na(\\\"ConvTranspose\\\",e,{format:u?\\\"NHWC\\\":\\\"NCHW\\\",autoPad:n,dilations:Array.from(E.subarray(r>>>0,r+2>>>0)),group:a,kernelShape:Array.from(E.subarray(i>>>0,i+2>>>0)),pads:Array.from(E.subarray(o>>>0,o+4>>>0)),strides:Array.from(E.subarray(s>>>0,s+2>>>0)),wIsConst:()=>!!A[l>>>0],outputPadding:0<c?Array.from(E.subarray(p>>>0,p+c>>>0)):[],outputShape:0<d?Array.from(E.subarray(f>>>0,f+d>>>0)):[]})},1302094:(e,n,r,a,i,o,s,u,l,c,p,d,f,h)=>{t.Na(\\\"ConvTranspose\\\",e,{format:l?\\\"NHWC\\\":\\\"NCHW\\\",autoPad:n,dilations:[r],group:a,kernel_shape:[i],pads:[o,s],strides:[u],wIsConst:()=>!!A[c>>>0],outputPadding:p?Array.from(E.subarray(d>>>0,d+p>>>0)):[],outputShape:f?Array.from(E.subarray(f>>>0,h+f>>>0)):[]})},1302474:(e,n,r,a,i,o,s,u,l,c,p,d,f)=>{t.Na(\\\"ConvTranspose\\\",e,{format:u?\\\"NHWC\\\":\\\"NCHW\\\",autoPad:n,dilations:Array.from(E.subarray(r>>>0,r+2>>>0)),group:a,kernelShape:Array.from(E.subarray(i>>>0,i+2>>>0)),pads:Array.from(E.subarray(o>>>0,o+4>>>0)),strides:Array.from(E.subarray(s>>>0,s+2>>>0)),wIsConst:()=>!!A[l>>>0],outputPadding:0<c?Array.from(E.subarray(p>>>0,p+c>>>0)):[],outputShape:0<d?Array.from(E.subarray(f>>>0,f+d>>>0)):[]})},1302997:(e,n)=>{t.Na(\\\"GlobalAveragePool\\\",e,{format:n?\\\"NHWC\\\":\\\"NCHW\\\"})},1303088:(e,n,r,a,i,o,s,u,l,c,p,d,f,h,g,m)=>{t.Na(\\\"AveragePool\\\",e,{format:m?\\\"NHWC\\\":\\\"NCHW\\\",auto_pad:n,ceil_mode:r,count_include_pad:a,storage_order:i,dilations:[o,s],kernel_shape:[u,l],pads:[c,p,d,f],strides:[h,g]})},1303372:(e,n)=>{t.Na(\\\"GlobalAveragePool\\\",e,{format:n?\\\"NHWC\\\":\\\"NCHW\\\"})},1303463:(e,n,r,a,i,o,s,u,l,c,p,d,f,h,g,m)=>{t.Na(\\\"AveragePool\\\",e,{format:m?\\\"NHWC\\\":\\\"NCHW\\\",auto_pad:n,ceil_mode:r,count_include_pad:a,storage_order:i,dilations:[o,s],kernel_shape:[u,l],pads:[c,p,d,f],strides:[h,g]})},1303747:(e,n)=>{t.Na(\\\"GlobalMaxPool\\\",e,{format:n?\\\"NHWC\\\":\\\"NCHW\\\"})},1303834:(e,n,r,a,i,o,s,u,l,c,p,d,f,h,g,m)=>{t.Na(\\\"MaxPool\\\",e,{format:m?\\\"NHWC\\\":\\\"NCHW\\\",auto_pad:n,ceil_mode:r,count_include_pad:a,storage_order:i,dilations:[o,s],kernel_shape:[u,l],pads:[c,p,d,f],strides:[h,g]})},1304114:(e,n)=>{t.Na(\\\"GlobalMaxPool\\\",e,{format:n?\\\"NHWC\\\":\\\"NCHW\\\"})},1304201:(e,n,r,a,i,o,s,u,l,c,p,d,f,h,g,m)=>{t.Na(\\\"MaxPool\\\",e,{format:m?\\\"NHWC\\\":\\\"NCHW\\\",auto_pad:n,ceil_mode:r,count_include_pad:a,storage_order:i,dilations:[o,s],kernel_shape:[u,l],pads:[c,p,d,f],strides:[h,g]})},1304481:(e,n,r,a,i)=>{t.Na(\\\"Gemm\\\",e,{alpha:n,beta:r,transA:a,transB:i})},1304585:e=>{t.Na(\\\"MatMul\\\",e,void 0)},1304639:(e,n)=>{t.Na(\\\"Concat\\\",e,{axis:n})},1304699:(e,n,r,a,i)=>{t.Na(\\\"Split\\\",e,{axis:n,numOutputs:r,splitSizes:a?Array.from(E.subarray(i>>>0,i+a>>>0)):[]})},1304844:e=>{t.Na(\\\"Expand\\\",e,void 0)},1304898:(e,n,r,a,i,o,s)=>{t.Na(\\\"Slice\\\",e,{starts:n?Array.from(E.subarray(r>>>0,r+n>>>0)):[],ends:a?Array.from(E.subarray(i>>>0,i+a>>>0)):[],axes:o?Array.from(E.subarray(s>>>0,s+o>>>0)):[]})},1305129:e=>{t.qb(e)},1305163:(e,n)=>t.rb(e,n)};function q(e){this.name=\\\"ExitStatus\\\",this.message=\\\"Program terminated with exit(\\\"+e+\\\")\\\",this.status=e}function X(e){for(;0<e.length;)e.shift()(t)}function Z(e){this.Ra=e-24,this.fb=function(e){P[this.Ra+4>>2>>>0]=e},this.eb=function(e){P[this.Ra+8>>2>>>0]=e},this.$a=function(e,t){this.ab(),this.fb(e),this.eb(t)},this.ab=function(){P[this.Ra+16>>2>>>0]=0}}var J=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf8\\\"):void 0;function Q(e,t,n){var r=(t>>>=0)+n;for(n=t;e[n]&&!(n>=r);)++n;if(16<n-t&&e.buffer&&J)return J.decode(e.subarray(t,n));for(r=\\\"\\\";t<n;){var a=e[t++];if(128&a){var i=63&e[t++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|i);else{var o=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|i<<6|o:(7&a)<<18|i<<12|o<<6|63&e[t++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function ee(e,t){return(e>>>=0)?Q(C,e,t):\\\"\\\"}function te(e){for(var t=0,n=0;n<e.length;++n){var r=e.charCodeAt(n);127>=r?t++:2047>=r?t+=2:55296<=r&&57343>=r?(t+=4,++n):t+=3}return t}function ne(e,t,n,r){if(!(0<r))return 0;var a=n>>>=0;r=n+r-1;for(var i=0;i<e.length;++i){var o=e.charCodeAt(i);if(55296<=o&&57343>=o&&(o=65536+((1023&o)<<10)|1023&e.charCodeAt(++i)),127>=o){if(n>=r)break;t[n++>>>0]=o}else{if(2047>=o){if(n+1>=r)break;t[n++>>>0]=192|o>>6}else{if(65535>=o){if(n+2>=r)break;t[n++>>>0]=224|o>>12}else{if(n+3>=r)break;t[n++>>>0]=240|o>>18,t[n++>>>0]=128|o>>12&63}t[n++>>>0]=128|o>>6&63}t[n++>>>0]=128|63&o}}return t[n>>>0]=0,n-a}function re(e,t,n){return ne(e,C,t,n)}function ae(e){if(null===e)return\\\"null\\\";var t=typeof e;return\\\"object\\\"===t||\\\"array\\\"===t||\\\"function\\\"===t?e.toString():\\\"\\\"+e}var ie=void 0;function oe(e){for(var t=\\\"\\\";C[e>>>0];)t+=ie[C[e++>>>0]];return t}var se={},ue={},le={};function ce(e){if(void 0===e)return\\\"_unknown\\\";var t=(e=e.replace(/[^a-zA-Z0-9_]/g,\\\"$\\\")).charCodeAt(0);return 48<=t&&57>=t?\\\"_\\\"+e:e}function pe(e,t){return{[e=ce(e)]:function(){return t.apply(this,arguments)}}[e]}function de(e){var t=Error,n=pe(e,(function(t){this.name=e,this.message=t,void 0!==(t=Error(t).stack)&&(this.stack=this.toString()+\\\"\\\\n\\\"+t.replace(/^Error(:[^\\\\n]*)?\\\\n/,\\\"\\\"))}));return n.prototype=Object.create(t.prototype),n.prototype.constructor=n,n.prototype.toString=function(){return void 0===this.message?this.name:this.name+\\\": \\\"+this.message},n}var fe=void 0;function he(e){throw new fe(e)}function ge(e,t,n={}){if(!(\\\"argPackAdvance\\\"in t))throw new TypeError(\\\"registerType registeredInstance requires argPackAdvance\\\");var r=t.name;if(e||he('type \\\"'+r+'\\\" must have a positive integer typeid pointer'),ue.hasOwnProperty(e)){if(n.lb)return;he(\\\"Cannot register type '\\\"+r+\\\"' twice\\\")}ue[e]=t,delete le[e],se.hasOwnProperty(e)&&(t=se[e],delete se[e],t.forEach((e=>e())))}function me(e,t,n){switch(t){case 0:return n?function(e){return A[e>>>0]}:function(e){return C[e>>>0]};case 1:return n?function(e){return S[e>>>1]}:function(e){return x[e>>>1]};case 2:return n?function(e){return E[e>>>2]}:function(e){return P[e>>>2]};case 3:return n?function(e){return O[e>>3]}:function(e){return I[e>>3]};default:throw new TypeError(\\\"Unknown integer type: \\\"+e)}}function ye(e){switch(e){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError(\\\"Unknown type size: \\\"+e)}}var be=new function(){this.Ra=[void 0],this.$a=[],this.get=function(e){return this.Ra[e]},this.eb=function(e){let t=this.$a.pop()||this.Ra.length;return this.Ra[t]=e,t},this.fb=function(e){this.Ra[e]=void 0,this.$a.push(e)}};function ve(e){e>=be.ab&&0==--be.get(e).jb&&be.fb(e)}var we=e=>(e||he(\\\"Cannot use deleted val. handle = \\\"+e),be.get(e).value),$e=e=>{switch(e){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:return be.eb({jb:1,value:e})}};function _e(e){return this.fromWireType(E[e>>2>>>0])}function Ae(e,t){switch(t){case 2:return function(e){return this.fromWireType(T[e>>>2])};case 3:return function(e){return this.fromWireType(k[e>>>3])};default:throw new TypeError(\\\"Unknown float type: \\\"+e)}}var Ce=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf-16le\\\"):void 0;function Se(e,t){for(var n=e>>1,r=n+t/2;!(n>=r)&&x[n>>>0];)++n;if(32<(n<<=1)-e&&Ce)return Ce.decode(C.subarray(e>>>0,n>>>0));for(n=\\\"\\\",r=0;!(r>=t/2);++r){var a=S[e+2*r>>1>>>0];if(0==a)break;n+=String.fromCharCode(a)}return n}function xe(e,t,n){if(void 0===n&&(n=2147483647),2>n)return 0;var r=t;n=(n-=2)<2*e.length?n/2:e.length;for(var a=0;a<n;++a)S[t>>1>>>0]=e.charCodeAt(a),t+=2;return S[t>>1>>>0]=0,t-r}function Ee(e){return 2*e.length}function Pe(e,t){for(var n=0,r=\\\"\\\";!(n>=t/4);){var a=E[e+4*n>>2>>>0];if(0==a)break;++n,65536<=a?(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a)):r+=String.fromCharCode(a)}return r}function Te(e,t,n){if(void 0===n&&(n=2147483647),4>n)return 0;var r=t>>>=0;n=r+n-4;for(var a=0;a<e.length;++a){var i=e.charCodeAt(a);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++a)),E[t>>2>>>0]=i,(t+=4)+4>n)break}return E[t>>2>>>0]=0,t-r}function Oe(e){for(var t=0,n=0;n<e.length;++n){var r=e.charCodeAt(n);55296<=r&&57343>=r&&++n,t+=4}return t}function Ie(e,t){var n=ue[e];if(void 0===n){var r=oe(e=yt(e));mt(e),he(t+\\\" has unknown type \\\"+r)}return n}var ke={};function Re(e){var t=ke[e];return void 0===t?oe(e):t}var De=[];function Me(){return\\\"object\\\"==typeof globalThis?globalThis:Function(\\\"return this\\\")()}var We=[],je={};function Ue(e){return 0==e%4&&(0!=e%100||0==e%400)}var Be=[0,31,60,91,121,152,182,213,244,274,305,335],Ge=[0,31,59,90,120,151,181,212,243,273,304,334];function Ne(e){return(Ue(e.getFullYear())?Be:Ge)[e.getMonth()]+e.getDate()-1}function He(e){var t=te(e)+1,n=gt(t);return n&&re(e,n,t),n}var ze,Le=[];function Fe(e,t,n){var r;for(Le.length=0,n>>=2;r=C[t++>>>0];)n+=105!=r&n,Le.push(105==r?E[n>>>0]:(106==r?O:k)[n++>>1]),++n;return Y[e].apply(null,Le)}ze=f?()=>{var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:()=>performance.now();var Ve={};function Ke(){if(!Ye){var e,t={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:l||\\\"./this.program\\\"};for(e in Ve)void 0===Ve[e]?delete t[e]:t[e]=Ve[e];var n=[];for(e in t)n.push(e+\\\"=\\\"+t[e]);Ye=n}return Ye}var Ye,qe=[null,[],[]],Xe=[31,29,31,30,31,30,31,31,30,31,30,31],Ze=[31,28,31,30,31,30,31,31,30,31,30,31];function Je(e,t,n,r){function a(e,t,n){for(e=\\\"number\\\"==typeof e?e.toString():e||\\\"\\\";e.length<t;)e=n[0]+e;return e}function i(e,t){return a(e,t,\\\"0\\\")}function o(e,t){function n(e){return 0>e?-1:0<e?1:0}var r;return 0===(r=n(e.getFullYear()-t.getFullYear()))&&0===(r=n(e.getMonth()-t.getMonth()))&&(r=n(e.getDate()-t.getDate())),r}function s(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function u(e){var t=e.Xa;for(e=new Date(new Date(e.Ya+1900,0,1).getTime());0<t;){var n=e.getMonth(),r=(Ue(e.getFullYear())?Xe:Ze)[n];if(!(t>r-e.getDate())){e.setDate(e.getDate()+t);break}t-=r-e.getDate()+1,e.setDate(1),11>n?e.setMonth(n+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return n=new Date(e.getFullYear()+1,0,4),t=s(new Date(e.getFullYear(),0,4)),n=s(n),0>=o(t,e)?0>=o(n,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var l=E[r+40>>2>>>0];for(var c in r={vb:E[r>>2>>>0],ub:E[r+4>>2>>>0],bb:E[r+8>>2>>>0],hb:E[r+12>>2>>>0],cb:E[r+16>>2>>>0],Ya:E[r+20>>2>>>0],Wa:E[r+24>>2>>>0],Xa:E[r+28>>2>>>0],yb:E[r+32>>2>>>0],tb:E[r+36>>2>>>0],wb:l?ee(l):\\\"\\\"},n=ee(n),l={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})n=n.replace(new RegExp(c,\\\"g\\\"),l[c]);var p=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),d=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(c in l={\\\"%a\\\":function(e){return p[e.Wa].substring(0,3)},\\\"%A\\\":function(e){return p[e.Wa]},\\\"%b\\\":function(e){return d[e.cb].substring(0,3)},\\\"%B\\\":function(e){return d[e.cb]},\\\"%C\\\":function(e){return i((e.Ya+1900)/100|0,2)},\\\"%d\\\":function(e){return i(e.hb,2)},\\\"%e\\\":function(e){return a(e.hb,2,\\\" \\\")},\\\"%g\\\":function(e){return u(e).toString().substring(2)},\\\"%G\\\":function(e){return u(e)},\\\"%H\\\":function(e){return i(e.bb,2)},\\\"%I\\\":function(e){return 0==(e=e.bb)?e=12:12<e&&(e-=12),i(e,2)},\\\"%j\\\":function(e){for(var t=0,n=0;n<=e.cb-1;t+=(Ue(e.Ya+1900)?Xe:Ze)[n++]);return i(e.hb+t,3)},\\\"%m\\\":function(e){return i(e.cb+1,2)},\\\"%M\\\":function(e){return i(e.ub,2)},\\\"%n\\\":function(){return\\\"\\\\n\\\"},\\\"%p\\\":function(e){return 0<=e.bb&&12>e.bb?\\\"AM\\\":\\\"PM\\\"},\\\"%S\\\":function(e){return i(e.vb,2)},\\\"%t\\\":function(){return\\\"\\\\t\\\"},\\\"%u\\\":function(e){return e.Wa||7},\\\"%U\\\":function(e){return i(Math.floor((e.Xa+7-e.Wa)/7),2)},\\\"%V\\\":function(e){var t=Math.floor((e.Xa+7-(e.Wa+6)%7)/7);if(2>=(e.Wa+371-e.Xa-2)%7&&t++,t)53==t&&(4==(n=(e.Wa+371-e.Xa)%7)||3==n&&Ue(e.Ya)||(t=1));else{t=52;var n=(e.Wa+7-e.Xa-1)%7;(4==n||5==n&&Ue(e.Ya%400-1))&&t++}return i(t,2)},\\\"%w\\\":function(e){return e.Wa},\\\"%W\\\":function(e){return i(Math.floor((e.Xa+7-(e.Wa+6)%7)/7),2)},\\\"%y\\\":function(e){return(e.Ya+1900).toString().substring(2)},\\\"%Y\\\":function(e){return e.Ya+1900},\\\"%z\\\":function(e){var t=0<=(e=e.tb);return e=Math.abs(e)/60,(t?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(e/60*100+e%60)).slice(-4)},\\\"%Z\\\":function(e){return e.wb},\\\"%%\\\":function(){return\\\"%\\\"}},n=n.replace(/%%/g,\\\"\\\\0\\\\0\\\"),l)n.includes(c)&&(n=n.replace(new RegExp(c,\\\"g\\\"),l[c](r)));return c=function(e){var t=Array(te(e)+1);return ne(e,t,0,t.length),t}(n=n.replace(/\\\\0\\\\0/g,\\\"%\\\")),c.length>t?0:(A.set(c,e>>>0),c.length-1)}function Qe(e){try{e()}catch(e){z(e)}}function et(e){e instanceof q||\\\"unwind\\\"==e||c(1,e)}var tt=0,nt=null,rt=0,at=[],it={},ot={},st=0,ut=null,lt=[];function ct(e){if(!R){if(0===tt){var n=!1,r=!1;e(((e=0)=>{if(!R&&(rt=e,n=!0,r)){tt=2,Qe((()=>At(nt))),\\\"undefined\\\"!=typeof Browser&&Browser.gb.kb&&Browser.gb.resume(),e=!1;try{var a=(0,t.asm[ot[E[nt+8>>2>>>0]]])()}catch(t){a=t,e=!0}var i=!1;if(!nt){var o=ut;o&&(ut=null,(e?o.reject:o.resolve)(a),i=!0)}if(e&&!i)throw a}})),r=!0,n||(tt=1,nt=function(){var e=gt(65548),t=e+12;E[e>>2>>>0]=t,E[e+4>>2>>>0]=t+65536,t=at[0];var n=it[t];return void 0===n&&(n=st++,it[t]=n,ot[n]=t),E[e+8>>2>>>0]=n,e}(),\\\"undefined\\\"!=typeof Browser&&Browser.gb.kb&&Browser.gb.pause(),Qe((()=>$t(nt))))}else 2===tt?(tt=0,Qe(Ct),mt(nt),nt=null,lt.forEach((e=>{if(!R)try{if(e(),!w)try{_=_=e=_,w||(t.onExit&&t.onExit(e),R=!0),c(e,new q(e))}catch(e){et(e)}}catch(e){et(e)}}))):z(\\\"invalid state: \\\"+tt);return rt}}for(var pt=Array(256),dt=0;256>dt;++dt)pt[dt]=String.fromCharCode(dt);ie=pt,fe=t.BindingError=de(\\\"BindingError\\\"),t.InternalError=de(\\\"InternalError\\\"),be.Ra.push({value:void 0},{value:null},{value:!0},{value:!1}),be.ab=be.Ra.length,t.count_emval_handles=function(){for(var e=0,t=be.ab;t<be.Ra.length;++t)void 0!==be.Ra[t]&&++e;return e};var ft={la:function(e,n,r){return function(e){return ct((t=>{e().then(t)}))}((async()=>{await t.ob(e,n,r)}))},a:function(e,t,n){throw new Z(e).$a(t,n),e},ga:function(){z(\\\"To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html\\\")},w:function(){return 0},ea:function(){},P:function(){},R:function(){},J:function(){return 0},ba:function(){},X:function(){},aa:function(){},B:function(){},Q:function(){},N:function(){},ca:function(){},O:function(){},E:function(e,t,n,r,a){t=oe(t),n=ye(n);var i=-1!=t.indexOf(\\\"u\\\");i&&(a=(1n<<64n)-1n),ge(e,{name:t,fromWireType:function(e){return e},toWireType:function(e,n){if(\\\"bigint\\\"!=typeof n&&\\\"number\\\"!=typeof n)throw new TypeError('Cannot convert \\\"'+ae(n)+'\\\" to '+this.name);if(n<r||n>a)throw new TypeError('Passing a number \\\"'+ae(n)+'\\\" from JS side to C/C++ side to an argument of type \\\"'+t+'\\\", which is outside the valid range ['+r+\\\", \\\"+a+\\\"]!\\\");return n},argPackAdvance:8,readValueFromPointer:me(t,n,!i),Za:null})},ja:function(e,t,n,r,a){var i=ye(n);ge(e,{name:t=oe(t),fromWireType:function(e){return!!e},toWireType:function(e,t){return t?r:a},argPackAdvance:8,readValueFromPointer:function(e){if(1===n)var r=A;else if(2===n)r=S;else{if(4!==n)throw new TypeError(\\\"Unknown boolean type size: \\\"+t);r=E}return this.fromWireType(r[e>>>i])},Za:null})},ia:function(e,t){ge(e,{name:t=oe(t),fromWireType:function(e){var t=we(e);return ve(e),t},toWireType:function(e,t){return $e(t)},argPackAdvance:8,readValueFromPointer:_e,Za:null})},D:function(e,t,n){n=ye(n),ge(e,{name:t=oe(t),fromWireType:function(e){return e},toWireType:function(e,t){return t},argPackAdvance:8,readValueFromPointer:Ae(t,n),Za:null})},q:function(e,t,n,r,a){t=oe(t),-1===a&&(a=4294967295),a=ye(n);var i=e=>e;if(0===r){var o=32-8*n;i=e=>e<<o>>>o}n=t.includes(\\\"unsigned\\\")?function(e,t){return t>>>0}:function(e,t){return t},ge(e,{name:t,fromWireType:i,toWireType:n,argPackAdvance:8,readValueFromPointer:me(t,a,0!==r),Za:null})},m:function(e,t,n){function r(e){e>>=2;var t=P;return new a(t.buffer,t[e+1>>>0],t[e>>>0])}var a=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array][t];ge(e,{name:n=oe(n),fromWireType:r,argPackAdvance:8,readValueFromPointer:r},{lb:!0})},F:function(e,t){var n=\\\"std::string\\\"===(t=oe(t));ge(e,{name:t,fromWireType:function(e){var t=P[e>>2>>>0],r=e+4;if(n)for(var a=r,i=0;i<=t;++i){var o=r+i;if(i==t||0==C[o>>>0]){if(a=ee(a,o-a),void 0===s)var s=a;else s+=String.fromCharCode(0),s+=a;a=o+1}}else{for(s=Array(t),i=0;i<t;++i)s[i]=String.fromCharCode(C[r+i>>>0]);s=s.join(\\\"\\\")}return mt(e),s},toWireType:function(e,t){t instanceof ArrayBuffer&&(t=new Uint8Array(t));var r=\\\"string\\\"==typeof t;r||t instanceof Uint8Array||t instanceof Uint8ClampedArray||t instanceof Int8Array||he(\\\"Cannot pass non-string to std::string\\\");var a=n&&r?te(t):t.length,i=gt(4+a+1),o=i+4>>>0;if(P[i>>2>>>0]=a,n&&r)re(t,o,a+1);else if(r)for(r=0;r<a;++r){var s=t.charCodeAt(r);255<s&&(mt(o),he(\\\"String has UTF-16 code units that do not fit in 8 bits\\\")),C[o+r>>>0]=s}else for(r=0;r<a;++r)C[o+r>>>0]=t[r];return null!==e&&e.push(mt,i),i},argPackAdvance:8,readValueFromPointer:_e,Za:function(e){mt(e)}})},y:function(e,t,n){if(n=oe(n),2===t)var r=Se,a=xe,i=Ee,o=()=>x,s=1;else 4===t&&(r=Pe,a=Te,i=Oe,o=()=>P,s=2);ge(e,{name:n,fromWireType:function(e){for(var n,a=P[e>>>2],i=o(),u=e+4,l=0;l<=a;++l){var c=e+4+l*t;l!=a&&0!=i[c>>>s]||(u=r(u,c-u),void 0===n?n=u:(n+=String.fromCharCode(0),n+=u),u=c+t)}return mt(e),n},toWireType:function(e,r){\\\"string\\\"!=typeof r&&he(\\\"Cannot pass non-string to C++ string type \\\"+n);var o=i(r),u=gt(4+o+t);return P[(u>>>=0)>>>2]=o>>s,a(r,u+4,o+t),null!==e&&e.push(mt,u),u},argPackAdvance:8,readValueFromPointer:_e,Za:function(e){mt(e)}})},ka:function(e,t){ge(e,{mb:!0,name:t=oe(t),argPackAdvance:0,fromWireType:function(){},toWireType:function(){}})},fa:function(){return!0},p:function(e,t,n){e=we(e),t=Ie(t,\\\"emval::as\\\");var r=[],a=$e(r);return P[n>>2>>>0]=a,t.toWireType(r,e)},i:function(e,t,n,r,a){e=De[e],t=we(t),n=Re(n);var i=[];return P[r>>2>>>0]=$e(i),e(t,n,i,a)},r:function(e,t,n,r){(e=De[e])(t=we(t),n=Re(n),null,r)},b:ve,H:function(e,t){return(e=we(e))==we(t)},v:function(e){return 0===e?$e(Me()):(e=Re(e),$e(Me()[e]))},g:function(e,t){var n=function(e,t){for(var n=Array(e),r=0;r<e;++r)n[r]=Ie(P[t+4*r>>2>>>0],\\\"parameter \\\"+r);return n}(e,t),r=n[0];t=r.name+\\\"_$\\\"+n.slice(1).map((function(e){return e.name})).join(\\\"_\\\")+\\\"$\\\";var a=We[t];if(void 0!==a)return a;a=[\\\"retType\\\"];for(var i=[r],o=\\\"\\\",s=0;s<e-1;++s)o+=(0!==s?\\\", \\\":\\\"\\\")+\\\"arg\\\"+s,a.push(\\\"argType\\\"+s),i.push(n[1+s]);var u=\\\"return function \\\"+ce(\\\"methodCaller_\\\"+t)+\\\"(handle, name, destructors, args) {\\\\n\\\",l=0;for(s=0;s<e-1;++s)u+=\\\"    var arg\\\"+s+\\\" = argType\\\"+s+\\\".readValueFromPointer(args\\\"+(l?\\\"+\\\"+l:\\\"\\\")+\\\");\\\\n\\\",l+=n[s+1].argPackAdvance;for(u+=\\\"    var rv = handle[name](\\\"+o+\\\");\\\\n\\\",s=0;s<e-1;++s)n[s+1].deleteObject&&(u+=\\\"    argType\\\"+s+\\\".deleteObject(arg\\\"+s+\\\");\\\\n\\\");return r.mb||(u+=\\\"    return retType.toWireType(destructors, rv);\\\\n\\\"),a.push(u+\\\"};\\\\n\\\"),e=function(e){var t=Function;if(!(t instanceof Function))throw new TypeError(\\\"new_ called with constructor type \\\"+typeof t+\\\" which is not a function\\\");var n=pe(t.name||\\\"unknownFunctionName\\\",(function(){}));return n.prototype=t.prototype,n=new n,(e=t.apply(n,e))instanceof Object?e:n}(a).apply(null,i),a=function(e){var t=De.length;return De.push(e),t}(e),We[t]=a},s:function(e,t){return e=we(e),t=we(t),$e(e[t])},c:function(e){4<e&&(be.get(e).jb+=1)},I:function(e,n,r,a){e=we(e);var i=je[n];return i||(i=function(e){for(var n=\\\"\\\",r=0;r<e;++r)n+=(0!==r?\\\", \\\":\\\"\\\")+\\\"arg\\\"+r;var a=\\\"return function emval_allocator_\\\"+e+\\\"(constructor, argTypes, args) {\\\\n  var HEAPU32 = getMemory();\\\\n\\\";for(r=0;r<e;++r)a+=\\\"var argType\\\"+r+\\\" = requireRegisteredType(HEAPU32[((argTypes)>>2)], 'parameter \\\"+r+\\\"');\\\\nvar arg\\\"+r+\\\" = argType\\\"+r+\\\".readValueFromPointer(args);\\\\nargs += argType\\\"+r+\\\"['argPackAdvance'];\\\\nargTypes += 4;\\\\n\\\";return new Function(\\\"requireRegisteredType\\\",\\\"Module\\\",\\\"valueToHandle\\\",\\\"getMemory\\\",a+\\\"var obj = new constructor(\\\"+n+\\\");\\\\nreturn valueToHandle(obj);\\\\n}\\\\n\\\")(Ie,t,$e,(()=>P))}(n),je[n]=i),i(e,r,a)},t:function(){return $e([])},l:function(e){e=we(e);for(var t=Array(e.length),n=0;n<e.length;n++)t[n]=e[n];return $e(t)},d:function(e){return $e(Re(e))},k:function(){return $e({})},f:function(e){for(var t=we(e);t.length;){var n=t.pop();t.pop()(n)}ve(e)},j:function(e,t,n){e=we(e),t=we(t),n=we(n),e[t]=n},e:function(e,t){return e=(e=Ie(e,\\\"_emval_take_value\\\")).readValueFromPointer(t),$e(e)},U:function(e,t){e=new Date(1e3*(P[e>>>2]+4294967296*E[e+4>>>2])),E[t>>2>>>0]=e.getUTCSeconds(),E[t+4>>2>>>0]=e.getUTCMinutes(),E[t+8>>2>>>0]=e.getUTCHours(),E[t+12>>2>>>0]=e.getUTCDate(),E[t+16>>2>>>0]=e.getUTCMonth(),E[t+20>>2>>>0]=e.getUTCFullYear()-1900,E[t+24>>2>>>0]=e.getUTCDay(),E[t+28>>2>>>0]=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},V:function(e,t){e=new Date(1e3*(P[e>>>2]+4294967296*E[e+4>>>2])),E[t>>2>>>0]=e.getSeconds(),E[t+4>>2>>>0]=e.getMinutes(),E[t+8>>2>>>0]=e.getHours(),E[t+12>>2>>>0]=e.getDate(),E[t+16>>2>>>0]=e.getMonth(),E[t+20>>2>>>0]=e.getFullYear()-1900,E[t+24>>2>>>0]=e.getDay(),E[t+28>>2>>>0]=0|Ne(e),E[t+36>>2>>>0]=-60*e.getTimezoneOffset();var n=new Date(e.getFullYear(),6,1).getTimezoneOffset(),r=new Date(e.getFullYear(),0,1).getTimezoneOffset();E[t+32>>2>>>0]=0|(n!=r&&e.getTimezoneOffset()==Math.min(r,n))},W:function(e){var t=new Date(E[e+20>>2>>>0]+1900,E[e+16>>2>>>0],E[e+12>>2>>>0],E[e+8>>2>>>0],E[e+4>>2>>>0],E[e>>2>>>0],0),n=E[e+32>>2>>>0],r=t.getTimezoneOffset(),a=new Date(t.getFullYear(),6,1).getTimezoneOffset(),i=new Date(t.getFullYear(),0,1).getTimezoneOffset(),o=Math.min(i,a);return 0>n?E[e+32>>2>>>0]=Number(a!=i&&o==r):0<n!=(o==r)&&(a=Math.max(i,a),t.setTime(t.getTime()+6e4*((0<n?o:a)-r))),E[e+24>>2>>>0]=t.getDay(),E[e+28>>2>>>0]=0|Ne(t),E[e>>2>>>0]=t.getSeconds(),E[e+4>>2>>>0]=t.getMinutes(),E[e+8>>2>>>0]=t.getHours(),E[e+12>>2>>>0]=t.getDate(),E[e+16>>2>>>0]=t.getMonth(),E[e+20>>2>>>0]=t.getYear(),t.getTime()/1e3|0},S:function(){return-52},T:function(){},L:function(e,t,n){function r(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\\\"GMT\\\"}var a=(new Date).getFullYear(),i=new Date(a,0,1),o=new Date(a,6,1);a=i.getTimezoneOffset();var s=o.getTimezoneOffset();P[e>>2>>>0]=60*Math.max(a,s),E[t>>2>>>0]=Number(a!=s),e=r(i),t=r(o),e=He(e),t=He(t),s<a?(P[n>>2>>>0]=e,P[n+4>>2>>>0]=t):(P[n>>2>>>0]=t,P[n+4>>2>>>0]=e)},u:function(){z(\\\"\\\")},ha:function(){z(\\\"To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html\\\")},h:function(e,t,n){return Fe(e,t,n)},G:function(e,t,n){return Fe(e,t,n)},C:function(){return Date.now()},M:function(){return 4294901760},o:ze,$:function(e,t,n){C.copyWithin(e>>>0,t>>>0,t+n>>>0)},K:function(e){var t=C.length;if(4294901760<(e>>>=0))return!1;for(var n=1;4>=n;n*=2){var r=t*(1+.2/n);r=Math.min(r,e+100663296);var a=Math,i=a.min;r=Math.max(e,r),r+=(65536-r%65536)%65536;e:{var o=$.buffer;try{$.grow(i.call(a,4294901760,r)-o.byteLength+65535>>>16),D();var s=1;break e}catch(e){}s=void 0}if(s)return!0}return!1},Z:function(e,t){var n=0;return Ke().forEach((function(r,a){var i=t+n;for(a=P[e+4*a>>2>>>0]=i,i=0;i<r.length;++i)A[a++>>0>>>0]=r.charCodeAt(i);A[a>>0>>>0]=0,n+=r.length+1})),0},_:function(e,t){var n=Ke();P[e>>2>>>0]=n.length;var r=0;return n.forEach((function(e){r+=e.length+1})),P[t>>2>>>0]=r,0},x:function(){return 52},A:function(){return 52},Y:function(){return 70},z:function(e,t,n,r){for(var a=0,i=0;i<n;i++){var o=P[t>>2>>>0],s=P[t+4>>2>>>0];t+=8;for(var u=0;u<s;u++){var l=C[o+u>>>0],c=qe[e];0===l||10===l?((1===e?b:v)(Q(c,0)),c.length=0):c.push(l)}a+=s}return P[r>>2>>>0]=a,0},da:Je,n:function(e,t,n,r){return Je(e,t,n,r)}};!function(){function e(e){if(e=function(e){var t,n={};for(t in e)!function(t){var r=e[t];n[t]=\\\"function\\\"==typeof r?function(){at.push(t);try{return r.apply(null,arguments)}finally{R||(at.pop()===t||z(),nt&&1===tt&&0===at.length&&(tt=0,Qe(_t),\\\"undefined\\\"!=typeof Fibers&&Fibers.zb()))}}:r}(t);return n}(e=e.exports),t.asm=e,$=t.asm.ma,D(),W.unshift(t.asm.na),G--,t.monitorRunDependencies&&t.monitorRunDependencies(G),0==G&&(null!==N&&(clearInterval(N),N=null),H)){var n=H;H=null,n()}return e}var n={a:ft};if(G++,t.monitorRunDependencies&&t.monitorRunDependencies(G),t.instantiateWasm)try{return t.instantiateWasm(n,e)}catch(e){v(\\\"Module.instantiateWasm callback failed with error: \\\"+e),a(e)}(function(e,t){var n=B;return y||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||L(n)||n.startsWith(\\\"file://\\\")||f||\\\"function\\\"!=typeof fetch?K(n,e,t):fetch(n,{credentials:\\\"same-origin\\\"}).then((r=>WebAssembly.instantiateStreaming(r,e).then(t,(function(r){return v(\\\"wasm streaming compile failed: \\\"+r),v(\\\"falling back to ArrayBuffer instantiation\\\"),K(n,e,t)}))))})(n,(function(t){e(t.instance)})).catch(a)}(),t._OrtInit=function(){return(t._OrtInit=t.asm.oa).apply(null,arguments)},t._OrtGetLastError=function(){return(t._OrtGetLastError=t.asm.pa).apply(null,arguments)},t._OrtCreateSessionOptions=function(){return(t._OrtCreateSessionOptions=t.asm.qa).apply(null,arguments)},t._OrtAppendExecutionProvider=function(){return(t._OrtAppendExecutionProvider=t.asm.ra).apply(null,arguments)},t._OrtAddSessionConfigEntry=function(){return(t._OrtAddSessionConfigEntry=t.asm.sa).apply(null,arguments)},t._OrtReleaseSessionOptions=function(){return(t._OrtReleaseSessionOptions=t.asm.ta).apply(null,arguments)},t._OrtCreateSession=function(){return(t._OrtCreateSession=t.asm.ua).apply(null,arguments)},t._OrtReleaseSession=function(){return(t._OrtReleaseSession=t.asm.va).apply(null,arguments)},t._OrtGetInputOutputCount=function(){return(t._OrtGetInputOutputCount=t.asm.wa).apply(null,arguments)},t._OrtGetInputName=function(){return(t._OrtGetInputName=t.asm.xa).apply(null,arguments)},t._OrtGetOutputName=function(){return(t._OrtGetOutputName=t.asm.ya).apply(null,arguments)},t._OrtFree=function(){return(t._OrtFree=t.asm.za).apply(null,arguments)},t._OrtCreateTensor=function(){return(t._OrtCreateTensor=t.asm.Aa).apply(null,arguments)},t._OrtGetTensorData=function(){return(t._OrtGetTensorData=t.asm.Ba).apply(null,arguments)},t._OrtReleaseTensor=function(){return(t._OrtReleaseTensor=t.asm.Ca).apply(null,arguments)},t._OrtCreateRunOptions=function(){return(t._OrtCreateRunOptions=t.asm.Da).apply(null,arguments)},t._OrtAddRunConfigEntry=function(){return(t._OrtAddRunConfigEntry=t.asm.Ea).apply(null,arguments)},t._OrtReleaseRunOptions=function(){return(t._OrtReleaseRunOptions=t.asm.Fa).apply(null,arguments)},t._OrtRun=function(){return(t._OrtRun=t.asm.Ga).apply(null,arguments)},t._OrtEndProfiling=function(){return(t._OrtEndProfiling=t.asm.Ha).apply(null,arguments)},t._JsepOutput=function(){return(t._JsepOutput=t.asm.Ia).apply(null,arguments)};var ht,gt=t._malloc=function(){return(gt=t._malloc=t.asm.Ja).apply(null,arguments)},mt=t._free=function(){return(mt=t._free=t.asm.Ka).apply(null,arguments)};function yt(){return(yt=t.asm.La).apply(null,arguments)}function bt(){return(bt=t.asm.Oa).apply(null,arguments)}function vt(){return(vt=t.asm.Pa).apply(null,arguments)}function wt(){return(wt=t.asm.Qa).apply(null,arguments)}function $t(){return($t=t.asm.Sa).apply(null,arguments)}function _t(){return(_t=t.asm.Ta).apply(null,arguments)}function At(){return(At=t.asm.Ua).apply(null,arguments)}function Ct(){return(Ct=t.asm.Va).apply(null,arguments)}function St(){function e(){if(!ht&&(ht=!0,t.calledRun=!0,!R)){if(X(W),r(t),t.onRuntimeInitialized&&t.onRuntimeInitialized(),t.postRun)for(\\\"function\\\"==typeof t.postRun&&(t.postRun=[t.postRun]);t.postRun.length;){var e=t.postRun.shift();j.unshift(e)}X(j)}}if(!(0<G)){if(t.preRun)for(\\\"function\\\"==typeof t.preRun&&(t.preRun=[t.preRun]);t.preRun.length;)U();X(M),0<G||(t.setStatus?(t.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){t.setStatus(\\\"\\\")}),1),e()}),1)):e())}}if(t.__embind_initialize_bindings=function(){return(t.__embind_initialize_bindings=t.asm.Ma).apply(null,arguments)},t.___start_em_js=1305198,t.___stop_em_js=1305359,t.stackAlloc=wt,t.stackSave=bt,t.stackRestore=vt,t.UTF8ToString=ee,t.stringToUTF8=re,t.lengthBytesUTF8=te,H=function e(){ht||St(),ht||(H=e)},t.preInit)for(\\\"function\\\"==typeof t.preInit&&(t.preInit=[t.preInit]);0<t.preInit.length;)t.preInit.pop()();return St(),e.ready});e.exports=r},154:e=>{\\\"use strict\\\";e.exports='\\\"use strict\\\";var e={},a=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node;if(a){var r=require(\\\"worker_threads\\\"),t=r.parentPort;t.on(\\\"message\\\",(e=>onmessage({data:e})));var s=require(\\\"fs\\\");Object.assign(global,{self:global,require:require,Module:e,location:{href:__filename},Worker:r.Worker,importScripts:function(e){(0,eval)(s.readFileSync(e,\\\"utf8\\\")+\\\"//# sourceURL=\\\"+e)},postMessage:function(e){t.postMessage(e)},performance:global.performance||{now:function(){return Date.now()}}})}var o=!1,n=function(){var e=Array.prototype.slice.call(arguments).join(\\\" \\\");a?s.writeSync(2,e+\\\"\\\\\\\\n\\\"):console.error(e)};self.alert=function(){var a=Array.prototype.slice.call(arguments).join(\\\" \\\");postMessage({cmd:\\\"alert\\\",text:a,threadId:e._pthread_self()})},e.instantiateWasm=(a,r)=>{var t=e.wasmModule;return e.wasmModule=null,r(new WebAssembly.Instance(t,a))},self.onunhandledrejection=e=>{throw e.reason??e},self.onmessage=function a(r){try{if(\\\"load\\\"===r.data.cmd){let s=[];self.onmessage=e=>s.push(e),self.startWorker=r=>{e=r,postMessage({cmd:\\\"loaded\\\"});for(let e of s)a(e);self.onmessage=a},e.wasmModule=r.data.wasmModule;for(const a of r.data.handlers)e[a]=function(){postMessage({cmd:\\\"callHandler\\\",handler:a,args:[...arguments]})};if(e.wasmMemory=r.data.wasmMemory,e.buffer=e.wasmMemory.buffer,e.ENVIRONMENT_IS_PTHREAD=!0,\\\"string\\\"==typeof r.data.urlOrBlob)importScripts(r.data.urlOrBlob);else{var t=URL.createObjectURL(r.data.urlOrBlob);importScripts(t),URL.revokeObjectURL(t)}ortWasmThreaded(e)}else if(\\\"run\\\"===r.data.cmd){e.__emscripten_thread_init(r.data.pthread_ptr,0,0,1),e.__emscripten_thread_mailbox_await(r.data.pthread_ptr),e.establishStackSpace(),e.PThread.receiveObjectTransfer(r.data),e.PThread.threadInitTLS(),o||(e.__embind_initialize_bindings(),o=!0);try{e.invokeEntryPoint(r.data.start_routine,r.data.arg)}catch(e){if(\\\"unwind\\\"!=e)throw e}}else\\\"cancel\\\"===r.data.cmd?e._pthread_self()&&e.__emscripten_thread_exit(-1):\\\"setimmediate\\\"===r.data.target||(\\\"checkMailbox\\\"===r.data.cmd?o&&e.checkMailbox():r.data.cmd&&(n(\\\"worker.js received unknown command \\\"+r.data.cmd),n(r.data)))}catch(a){throw e.__emscripten_thread_crashed&&e.__emscripten_thread_crashed(),a}};\\\\n'},384:()=>{},993:()=>{},908:()=>{},953:()=>{},925:()=>{},449:()=>{}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var i=t[r]={exports:{}};return e[r].call(i.exports,i,i.exports,n),i.exports}(()=>{\\\"use strict\\\";const e=n(259),t=n(263);self.onmessage=n=>{switch(n.data.type){case\\\"init-wasm\\\":try{(0,t.initializeWebAssembly)(n.data.in).then((()=>postMessage({type:\\\"init-wasm\\\"})),(e=>postMessage({type:\\\"init-wasm\\\",err:e})))}catch(e){postMessage({type:\\\"init-wasm\\\",err:e})}break;case\\\"init-ort\\\":try{(0,e.initRuntime)(n.data.in).then((()=>postMessage({type:\\\"init-ort\\\"})),(e=>postMessage({type:\\\"init-ort\\\",err:e}))),postMessage({type:\\\"init-ort\\\"})}catch(e){postMessage({type:\\\"init-ort\\\",err:e})}break;case\\\"create_allocate\\\":try{const{model:t}=n.data.in,r=(0,e.createSessionAllocate)(t);postMessage({type:\\\"create_allocate\\\",out:r})}catch(e){postMessage({type:\\\"create_allocate\\\",err:e})}break;case\\\"create_finalize\\\":try{const{modeldata:t,options:r}=n.data.in,a=(0,e.createSessionFinalize)(t,r);postMessage({type:\\\"create_finalize\\\",out:a})}catch(e){postMessage({type:\\\"create_finalize\\\",err:e})}break;case\\\"create\\\":try{const{model:t,options:r}=n.data.in,a=(0,e.createSession)(t,r);postMessage({type:\\\"create\\\",out:a})}catch(e){postMessage({type:\\\"create\\\",err:e})}break;case\\\"release\\\":try{const t=n.data.in;(0,e.releaseSession)(t),postMessage({type:\\\"release\\\"})}catch(e){postMessage({type:\\\"release\\\",err:e})}break;case\\\"run\\\":try{const{sessionId:t,inputIndices:r,inputs:a,outputIndices:i,options:o}=n.data.in;(0,e.run)(t,r,a,i,o).then((t=>{postMessage({type:\\\"run\\\",out:t},(0,e.extractTransferableBuffers)(t))}),(e=>{postMessage({type:\\\"run\\\",err:e})}))}catch(e){postMessage({type:\\\"run\\\",err:e})}break;case\\\"end-profiling\\\":try{const t=n.data.in;(0,e.endProfiling)(t),postMessage({type:\\\"end-profiling\\\"})}catch(e){postMessage({type:\\\"end-profiling\\\",err:e})}}}})()})();\\n\", \"Worker\", undefined, undefined);\n}\n","\"use strict\";\n\n/* eslint-env browser */\n\n/* eslint-disable no-undef, no-use-before-define, new-cap */\nmodule.exports = function (content, workerConstructor, workerOptions, url) {\n  var globalScope = self || window;\n\n  try {\n    try {\n      var blob;\n\n      try {\n        // New API\n        blob = new globalScope.Blob([content]);\n      } catch (e) {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = globalScope.BlobBuilder || globalScope.WebKitBlobBuilder || globalScope.MozBlobBuilder || globalScope.MSBlobBuilder;\n        blob = new BlobBuilder();\n        blob.append(content);\n        blob = blob.getBlob();\n      }\n\n      var URL = globalScope.URL || globalScope.webkitURL;\n      var objectURL = URL.createObjectURL(blob);\n      var worker = new globalScope[workerConstructor](objectURL, workerOptions);\n      URL.revokeObjectURL(objectURL);\n      return worker;\n    } catch (e) {\n      return new globalScope[workerConstructor](\"data:application/javascript,\".concat(encodeURIComponent(content)), workerOptions);\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error(\"Inline worker is not supported\");\n    }\n\n    return new globalScope[workerConstructor](url, workerOptions);\n  }\n};","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.onnx = (function() {\n\n    /**\n     * Namespace onnx.\n     * @exports onnx\n     * @namespace\n     */\n    var onnx = {};\n\n    /**\n     * Version enum.\n     * @name onnx.Version\n     * @enum {number}\n     * @property {number} _START_VERSION=0 _START_VERSION value\n     * @property {number} IR_VERSION_2017_10_10=1 IR_VERSION_2017_10_10 value\n     * @property {number} IR_VERSION_2017_10_30=2 IR_VERSION_2017_10_30 value\n     * @property {number} IR_VERSION_2017_11_3=3 IR_VERSION_2017_11_3 value\n     * @property {number} IR_VERSION_2019_1_22=4 IR_VERSION_2019_1_22 value\n     * @property {number} IR_VERSION_2019_3_18=5 IR_VERSION_2019_3_18 value\n     * @property {number} IR_VERSION_2019_9_19=6 IR_VERSION_2019_9_19 value\n     * @property {number} IR_VERSION_2020_5_8=7 IR_VERSION_2020_5_8 value\n     * @property {number} IR_VERSION_2021_7_30=8 IR_VERSION_2021_7_30 value\n     * @property {number} IR_VERSION=9 IR_VERSION value\n     */\n    onnx.Version = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"_START_VERSION\"] = 0;\n        values[valuesById[1] = \"IR_VERSION_2017_10_10\"] = 1;\n        values[valuesById[2] = \"IR_VERSION_2017_10_30\"] = 2;\n        values[valuesById[3] = \"IR_VERSION_2017_11_3\"] = 3;\n        values[valuesById[4] = \"IR_VERSION_2019_1_22\"] = 4;\n        values[valuesById[5] = \"IR_VERSION_2019_3_18\"] = 5;\n        values[valuesById[6] = \"IR_VERSION_2019_9_19\"] = 6;\n        values[valuesById[7] = \"IR_VERSION_2020_5_8\"] = 7;\n        values[valuesById[8] = \"IR_VERSION_2021_7_30\"] = 8;\n        values[valuesById[9] = \"IR_VERSION\"] = 9;\n        return values;\n    })();\n\n    onnx.AttributeProto = (function() {\n\n        /**\n         * Properties of an AttributeProto.\n         * @memberof onnx\n         * @interface IAttributeProto\n         * @property {string|null} [name] AttributeProto name\n         * @property {string|null} [refAttrName] AttributeProto refAttrName\n         * @property {string|null} [docString] AttributeProto docString\n         * @property {onnx.AttributeProto.AttributeType|null} [type] AttributeProto type\n         * @property {number|null} [f] AttributeProto f\n         * @property {number|Long|null} [i] AttributeProto i\n         * @property {Uint8Array|null} [s] AttributeProto s\n         * @property {onnx.ITensorProto|null} [t] AttributeProto t\n         * @property {onnx.IGraphProto|null} [g] AttributeProto g\n         * @property {onnx.ISparseTensorProto|null} [sparseTensor] AttributeProto sparseTensor\n         * @property {onnx.ITypeProto|null} [tp] AttributeProto tp\n         * @property {Array.<number>|null} [floats] AttributeProto floats\n         * @property {Array.<number|Long>|null} [ints] AttributeProto ints\n         * @property {Array.<Uint8Array>|null} [strings] AttributeProto strings\n         * @property {Array.<onnx.ITensorProto>|null} [tensors] AttributeProto tensors\n         * @property {Array.<onnx.IGraphProto>|null} [graphs] AttributeProto graphs\n         * @property {Array.<onnx.ISparseTensorProto>|null} [sparseTensors] AttributeProto sparseTensors\n         * @property {Array.<onnx.ITypeProto>|null} [typeProtos] AttributeProto typeProtos\n         */\n\n        /**\n         * Constructs a new AttributeProto.\n         * @memberof onnx\n         * @classdesc Represents an AttributeProto.\n         * @implements IAttributeProto\n         * @constructor\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         */\n        function AttributeProto(properties) {\n            this.floats = [];\n            this.ints = [];\n            this.strings = [];\n            this.tensors = [];\n            this.graphs = [];\n            this.sparseTensors = [];\n            this.typeProtos = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * AttributeProto name.\n         * @member {string} name\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.name = \"\";\n\n        /**\n         * AttributeProto refAttrName.\n         * @member {string} refAttrName\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.refAttrName = \"\";\n\n        /**\n         * AttributeProto docString.\n         * @member {string} docString\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.docString = \"\";\n\n        /**\n         * AttributeProto type.\n         * @member {onnx.AttributeProto.AttributeType} type\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.type = 0;\n\n        /**\n         * AttributeProto f.\n         * @member {number} f\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.f = 0;\n\n        /**\n         * AttributeProto i.\n         * @member {number|Long} i\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.i = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * AttributeProto s.\n         * @member {Uint8Array} s\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.s = $util.newBuffer([]);\n\n        /**\n         * AttributeProto t.\n         * @member {onnx.ITensorProto|null|undefined} t\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.t = null;\n\n        /**\n         * AttributeProto g.\n         * @member {onnx.IGraphProto|null|undefined} g\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.g = null;\n\n        /**\n         * AttributeProto sparseTensor.\n         * @member {onnx.ISparseTensorProto|null|undefined} sparseTensor\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.sparseTensor = null;\n\n        /**\n         * AttributeProto tp.\n         * @member {onnx.ITypeProto|null|undefined} tp\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.tp = null;\n\n        /**\n         * AttributeProto floats.\n         * @member {Array.<number>} floats\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.floats = $util.emptyArray;\n\n        /**\n         * AttributeProto ints.\n         * @member {Array.<number|Long>} ints\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.ints = $util.emptyArray;\n\n        /**\n         * AttributeProto strings.\n         * @member {Array.<Uint8Array>} strings\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.strings = $util.emptyArray;\n\n        /**\n         * AttributeProto tensors.\n         * @member {Array.<onnx.ITensorProto>} tensors\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.tensors = $util.emptyArray;\n\n        /**\n         * AttributeProto graphs.\n         * @member {Array.<onnx.IGraphProto>} graphs\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.graphs = $util.emptyArray;\n\n        /**\n         * AttributeProto sparseTensors.\n         * @member {Array.<onnx.ISparseTensorProto>} sparseTensors\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.sparseTensors = $util.emptyArray;\n\n        /**\n         * AttributeProto typeProtos.\n         * @member {Array.<onnx.ITypeProto>} typeProtos\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.typeProtos = $util.emptyArray;\n\n        /**\n         * Creates a new AttributeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         * @returns {onnx.AttributeProto} AttributeProto instance\n         */\n        AttributeProto.create = function create(properties) {\n            return new AttributeProto(properties);\n        };\n\n        /**\n         * Encodes the specified AttributeProto message. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.f != null && Object.hasOwnProperty.call(message, \"f\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.f);\n            if (message.i != null && Object.hasOwnProperty.call(message, \"i\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.i);\n            if (message.s != null && Object.hasOwnProperty.call(message, \"s\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.s);\n            if (message.t != null && Object.hasOwnProperty.call(message, \"t\"))\n                $root.onnx.TensorProto.encode(message.t, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.g != null && Object.hasOwnProperty.call(message, \"g\"))\n                $root.onnx.GraphProto.encode(message.g, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.floats != null && message.floats.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.floats.length; ++i)\n                    writer.float(message.floats[i]);\n                writer.ldelim();\n            }\n            if (message.ints != null && message.ints.length) {\n                writer.uint32(/* id 8, wireType 2 =*/66).fork();\n                for (var i = 0; i < message.ints.length; ++i)\n                    writer.int64(message.ints[i]);\n                writer.ldelim();\n            }\n            if (message.strings != null && message.strings.length)\n                for (var i = 0; i < message.strings.length; ++i)\n                    writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.strings[i]);\n            if (message.tensors != null && message.tensors.length)\n                for (var i = 0; i < message.tensors.length; ++i)\n                    $root.onnx.TensorProto.encode(message.tensors[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.graphs != null && message.graphs.length)\n                for (var i = 0; i < message.graphs.length; ++i)\n                    $root.onnx.GraphProto.encode(message.graphs[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 13, wireType 2 =*/106).string(message.docString);\n            if (message.tp != null && Object.hasOwnProperty.call(message, \"tp\"))\n                $root.onnx.TypeProto.encode(message.tp, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            if (message.typeProtos != null && message.typeProtos.length)\n                for (var i = 0; i < message.typeProtos.length; ++i)\n                    $root.onnx.TypeProto.encode(message.typeProtos[i], writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();\n            if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\n                writer.uint32(/* id 20, wireType 0 =*/160).int32(message.type);\n            if (message.refAttrName != null && Object.hasOwnProperty.call(message, \"refAttrName\"))\n                writer.uint32(/* id 21, wireType 2 =*/170).string(message.refAttrName);\n            if (message.sparseTensor != null && Object.hasOwnProperty.call(message, \"sparseTensor\"))\n                $root.onnx.SparseTensorProto.encode(message.sparseTensor, writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();\n            if (message.sparseTensors != null && message.sparseTensors.length)\n                for (var i = 0; i < message.sparseTensors.length; ++i)\n                    $root.onnx.SparseTensorProto.encode(message.sparseTensors[i], writer.uint32(/* id 23, wireType 2 =*/186).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified AttributeProto message, length delimited. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.AttributeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 21: {\n                        message.refAttrName = reader.string();\n                        break;\n                    }\n                case 13: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                case 20: {\n                        message.type = reader.int32();\n                        break;\n                    }\n                case 2: {\n                        message.f = reader.float();\n                        break;\n                    }\n                case 3: {\n                        message.i = reader.int64();\n                        break;\n                    }\n                case 4: {\n                        message.s = reader.bytes();\n                        break;\n                    }\n                case 5: {\n                        message.t = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 6: {\n                        message.g = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 22: {\n                        message.sparseTensor = $root.onnx.SparseTensorProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 14: {\n                        message.tp = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 7: {\n                        if (!(message.floats && message.floats.length))\n                            message.floats = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.floats.push(reader.float());\n                        } else\n                            message.floats.push(reader.float());\n                        break;\n                    }\n                case 8: {\n                        if (!(message.ints && message.ints.length))\n                            message.ints = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.ints.push(reader.int64());\n                        } else\n                            message.ints.push(reader.int64());\n                        break;\n                    }\n                case 9: {\n                        if (!(message.strings && message.strings.length))\n                            message.strings = [];\n                        message.strings.push(reader.bytes());\n                        break;\n                    }\n                case 10: {\n                        if (!(message.tensors && message.tensors.length))\n                            message.tensors = [];\n                        message.tensors.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 11: {\n                        if (!(message.graphs && message.graphs.length))\n                            message.graphs = [];\n                        message.graphs.push($root.onnx.GraphProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 23: {\n                        if (!(message.sparseTensors && message.sparseTensors.length))\n                            message.sparseTensors = [];\n                        message.sparseTensors.push($root.onnx.SparseTensorProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 15: {\n                        if (!(message.typeProtos && message.typeProtos.length))\n                            message.typeProtos = [];\n                        message.typeProtos.push($root.onnx.TypeProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an AttributeProto message.\n         * @function verify\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        AttributeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                if (!$util.isString(message.refAttrName))\n                    return \"refAttrName: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                switch (message.type) {\n                default:\n                    return \"type: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 11:\n                case 13:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                case 12:\n                case 14:\n                    break;\n                }\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                if (typeof message.f !== \"number\")\n                    return \"f: number expected\";\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (!$util.isInteger(message.i) && !(message.i && $util.isInteger(message.i.low) && $util.isInteger(message.i.high)))\n                    return \"i: integer|Long expected\";\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                if (!(message.s && typeof message.s.length === \"number\" || $util.isString(message.s)))\n                    return \"s: buffer expected\";\n            if (message.t != null && message.hasOwnProperty(\"t\")) {\n                var error = $root.onnx.TensorProto.verify(message.t);\n                if (error)\n                    return \"t.\" + error;\n            }\n            if (message.g != null && message.hasOwnProperty(\"g\")) {\n                var error = $root.onnx.GraphProto.verify(message.g);\n                if (error)\n                    return \"g.\" + error;\n            }\n            if (message.sparseTensor != null && message.hasOwnProperty(\"sparseTensor\")) {\n                var error = $root.onnx.SparseTensorProto.verify(message.sparseTensor);\n                if (error)\n                    return \"sparseTensor.\" + error;\n            }\n            if (message.tp != null && message.hasOwnProperty(\"tp\")) {\n                var error = $root.onnx.TypeProto.verify(message.tp);\n                if (error)\n                    return \"tp.\" + error;\n            }\n            if (message.floats != null && message.hasOwnProperty(\"floats\")) {\n                if (!Array.isArray(message.floats))\n                    return \"floats: array expected\";\n                for (var i = 0; i < message.floats.length; ++i)\n                    if (typeof message.floats[i] !== \"number\")\n                        return \"floats: number[] expected\";\n            }\n            if (message.ints != null && message.hasOwnProperty(\"ints\")) {\n                if (!Array.isArray(message.ints))\n                    return \"ints: array expected\";\n                for (var i = 0; i < message.ints.length; ++i)\n                    if (!$util.isInteger(message.ints[i]) && !(message.ints[i] && $util.isInteger(message.ints[i].low) && $util.isInteger(message.ints[i].high)))\n                        return \"ints: integer|Long[] expected\";\n            }\n            if (message.strings != null && message.hasOwnProperty(\"strings\")) {\n                if (!Array.isArray(message.strings))\n                    return \"strings: array expected\";\n                for (var i = 0; i < message.strings.length; ++i)\n                    if (!(message.strings[i] && typeof message.strings[i].length === \"number\" || $util.isString(message.strings[i])))\n                        return \"strings: buffer[] expected\";\n            }\n            if (message.tensors != null && message.hasOwnProperty(\"tensors\")) {\n                if (!Array.isArray(message.tensors))\n                    return \"tensors: array expected\";\n                for (var i = 0; i < message.tensors.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.tensors[i]);\n                    if (error)\n                        return \"tensors.\" + error;\n                }\n            }\n            if (message.graphs != null && message.hasOwnProperty(\"graphs\")) {\n                if (!Array.isArray(message.graphs))\n                    return \"graphs: array expected\";\n                for (var i = 0; i < message.graphs.length; ++i) {\n                    var error = $root.onnx.GraphProto.verify(message.graphs[i]);\n                    if (error)\n                        return \"graphs.\" + error;\n                }\n            }\n            if (message.sparseTensors != null && message.hasOwnProperty(\"sparseTensors\")) {\n                if (!Array.isArray(message.sparseTensors))\n                    return \"sparseTensors: array expected\";\n                for (var i = 0; i < message.sparseTensors.length; ++i) {\n                    var error = $root.onnx.SparseTensorProto.verify(message.sparseTensors[i]);\n                    if (error)\n                        return \"sparseTensors.\" + error;\n                }\n            }\n            if (message.typeProtos != null && message.hasOwnProperty(\"typeProtos\")) {\n                if (!Array.isArray(message.typeProtos))\n                    return \"typeProtos: array expected\";\n                for (var i = 0; i < message.typeProtos.length; ++i) {\n                    var error = $root.onnx.TypeProto.verify(message.typeProtos[i]);\n                    if (error)\n                        return \"typeProtos.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an AttributeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.AttributeProto} AttributeProto\n         */\n        AttributeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.AttributeProto)\n                return object;\n            var message = new $root.onnx.AttributeProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.refAttrName != null)\n                message.refAttrName = String(object.refAttrName);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            switch (object.type) {\n            default:\n                if (typeof object.type === \"number\") {\n                    message.type = object.type;\n                    break;\n                }\n                break;\n            case \"UNDEFINED\":\n            case 0:\n                message.type = 0;\n                break;\n            case \"FLOAT\":\n            case 1:\n                message.type = 1;\n                break;\n            case \"INT\":\n            case 2:\n                message.type = 2;\n                break;\n            case \"STRING\":\n            case 3:\n                message.type = 3;\n                break;\n            case \"TENSOR\":\n            case 4:\n                message.type = 4;\n                break;\n            case \"GRAPH\":\n            case 5:\n                message.type = 5;\n                break;\n            case \"SPARSE_TENSOR\":\n            case 11:\n                message.type = 11;\n                break;\n            case \"TYPE_PROTO\":\n            case 13:\n                message.type = 13;\n                break;\n            case \"FLOATS\":\n            case 6:\n                message.type = 6;\n                break;\n            case \"INTS\":\n            case 7:\n                message.type = 7;\n                break;\n            case \"STRINGS\":\n            case 8:\n                message.type = 8;\n                break;\n            case \"TENSORS\":\n            case 9:\n                message.type = 9;\n                break;\n            case \"GRAPHS\":\n            case 10:\n                message.type = 10;\n                break;\n            case \"SPARSE_TENSORS\":\n            case 12:\n                message.type = 12;\n                break;\n            case \"TYPE_PROTOS\":\n            case 14:\n                message.type = 14;\n                break;\n            }\n            if (object.f != null)\n                message.f = Number(object.f);\n            if (object.i != null)\n                if ($util.Long)\n                    (message.i = $util.Long.fromValue(object.i)).unsigned = false;\n                else if (typeof object.i === \"string\")\n                    message.i = parseInt(object.i, 10);\n                else if (typeof object.i === \"number\")\n                    message.i = object.i;\n                else if (typeof object.i === \"object\")\n                    message.i = new $util.LongBits(object.i.low >>> 0, object.i.high >>> 0).toNumber();\n            if (object.s != null)\n                if (typeof object.s === \"string\")\n                    $util.base64.decode(object.s, message.s = $util.newBuffer($util.base64.length(object.s)), 0);\n                else if (object.s.length >= 0)\n                    message.s = object.s;\n            if (object.t != null) {\n                if (typeof object.t !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.t: object expected\");\n                message.t = $root.onnx.TensorProto.fromObject(object.t);\n            }\n            if (object.g != null) {\n                if (typeof object.g !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.g: object expected\");\n                message.g = $root.onnx.GraphProto.fromObject(object.g);\n            }\n            if (object.sparseTensor != null) {\n                if (typeof object.sparseTensor !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.sparseTensor: object expected\");\n                message.sparseTensor = $root.onnx.SparseTensorProto.fromObject(object.sparseTensor);\n            }\n            if (object.tp != null) {\n                if (typeof object.tp !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.tp: object expected\");\n                message.tp = $root.onnx.TypeProto.fromObject(object.tp);\n            }\n            if (object.floats) {\n                if (!Array.isArray(object.floats))\n                    throw TypeError(\".onnx.AttributeProto.floats: array expected\");\n                message.floats = [];\n                for (var i = 0; i < object.floats.length; ++i)\n                    message.floats[i] = Number(object.floats[i]);\n            }\n            if (object.ints) {\n                if (!Array.isArray(object.ints))\n                    throw TypeError(\".onnx.AttributeProto.ints: array expected\");\n                message.ints = [];\n                for (var i = 0; i < object.ints.length; ++i)\n                    if ($util.Long)\n                        (message.ints[i] = $util.Long.fromValue(object.ints[i])).unsigned = false;\n                    else if (typeof object.ints[i] === \"string\")\n                        message.ints[i] = parseInt(object.ints[i], 10);\n                    else if (typeof object.ints[i] === \"number\")\n                        message.ints[i] = object.ints[i];\n                    else if (typeof object.ints[i] === \"object\")\n                        message.ints[i] = new $util.LongBits(object.ints[i].low >>> 0, object.ints[i].high >>> 0).toNumber();\n            }\n            if (object.strings) {\n                if (!Array.isArray(object.strings))\n                    throw TypeError(\".onnx.AttributeProto.strings: array expected\");\n                message.strings = [];\n                for (var i = 0; i < object.strings.length; ++i)\n                    if (typeof object.strings[i] === \"string\")\n                        $util.base64.decode(object.strings[i], message.strings[i] = $util.newBuffer($util.base64.length(object.strings[i])), 0);\n                    else if (object.strings[i].length >= 0)\n                        message.strings[i] = object.strings[i];\n            }\n            if (object.tensors) {\n                if (!Array.isArray(object.tensors))\n                    throw TypeError(\".onnx.AttributeProto.tensors: array expected\");\n                message.tensors = [];\n                for (var i = 0; i < object.tensors.length; ++i) {\n                    if (typeof object.tensors[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.tensors: object expected\");\n                    message.tensors[i] = $root.onnx.TensorProto.fromObject(object.tensors[i]);\n                }\n            }\n            if (object.graphs) {\n                if (!Array.isArray(object.graphs))\n                    throw TypeError(\".onnx.AttributeProto.graphs: array expected\");\n                message.graphs = [];\n                for (var i = 0; i < object.graphs.length; ++i) {\n                    if (typeof object.graphs[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.graphs: object expected\");\n                    message.graphs[i] = $root.onnx.GraphProto.fromObject(object.graphs[i]);\n                }\n            }\n            if (object.sparseTensors) {\n                if (!Array.isArray(object.sparseTensors))\n                    throw TypeError(\".onnx.AttributeProto.sparseTensors: array expected\");\n                message.sparseTensors = [];\n                for (var i = 0; i < object.sparseTensors.length; ++i) {\n                    if (typeof object.sparseTensors[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.sparseTensors: object expected\");\n                    message.sparseTensors[i] = $root.onnx.SparseTensorProto.fromObject(object.sparseTensors[i]);\n                }\n            }\n            if (object.typeProtos) {\n                if (!Array.isArray(object.typeProtos))\n                    throw TypeError(\".onnx.AttributeProto.typeProtos: array expected\");\n                message.typeProtos = [];\n                for (var i = 0; i < object.typeProtos.length; ++i) {\n                    if (typeof object.typeProtos[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.typeProtos: object expected\");\n                    message.typeProtos[i] = $root.onnx.TypeProto.fromObject(object.typeProtos[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an AttributeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.AttributeProto} message AttributeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AttributeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.floats = [];\n                object.ints = [];\n                object.strings = [];\n                object.tensors = [];\n                object.graphs = [];\n                object.typeProtos = [];\n                object.sparseTensors = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.f = 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.i = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.i = options.longs === String ? \"0\" : 0;\n                if (options.bytes === String)\n                    object.s = \"\";\n                else {\n                    object.s = [];\n                    if (options.bytes !== Array)\n                        object.s = $util.newBuffer(object.s);\n                }\n                object.t = null;\n                object.g = null;\n                object.docString = \"\";\n                object.tp = null;\n                object.type = options.enums === String ? \"UNDEFINED\" : 0;\n                object.refAttrName = \"\";\n                object.sparseTensor = null;\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                object.f = options.json && !isFinite(message.f) ? String(message.f) : message.f;\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (typeof message.i === \"number\")\n                    object.i = options.longs === String ? String(message.i) : message.i;\n                else\n                    object.i = options.longs === String ? $util.Long.prototype.toString.call(message.i) : options.longs === Number ? new $util.LongBits(message.i.low >>> 0, message.i.high >>> 0).toNumber() : message.i;\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                object.s = options.bytes === String ? $util.base64.encode(message.s, 0, message.s.length) : options.bytes === Array ? Array.prototype.slice.call(message.s) : message.s;\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                object.t = $root.onnx.TensorProto.toObject(message.t, options);\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                object.g = $root.onnx.GraphProto.toObject(message.g, options);\n            if (message.floats && message.floats.length) {\n                object.floats = [];\n                for (var j = 0; j < message.floats.length; ++j)\n                    object.floats[j] = options.json && !isFinite(message.floats[j]) ? String(message.floats[j]) : message.floats[j];\n            }\n            if (message.ints && message.ints.length) {\n                object.ints = [];\n                for (var j = 0; j < message.ints.length; ++j)\n                    if (typeof message.ints[j] === \"number\")\n                        object.ints[j] = options.longs === String ? String(message.ints[j]) : message.ints[j];\n                    else\n                        object.ints[j] = options.longs === String ? $util.Long.prototype.toString.call(message.ints[j]) : options.longs === Number ? new $util.LongBits(message.ints[j].low >>> 0, message.ints[j].high >>> 0).toNumber() : message.ints[j];\n            }\n            if (message.strings && message.strings.length) {\n                object.strings = [];\n                for (var j = 0; j < message.strings.length; ++j)\n                    object.strings[j] = options.bytes === String ? $util.base64.encode(message.strings[j], 0, message.strings[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.strings[j]) : message.strings[j];\n            }\n            if (message.tensors && message.tensors.length) {\n                object.tensors = [];\n                for (var j = 0; j < message.tensors.length; ++j)\n                    object.tensors[j] = $root.onnx.TensorProto.toObject(message.tensors[j], options);\n            }\n            if (message.graphs && message.graphs.length) {\n                object.graphs = [];\n                for (var j = 0; j < message.graphs.length; ++j)\n                    object.graphs[j] = $root.onnx.GraphProto.toObject(message.graphs[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.tp != null && message.hasOwnProperty(\"tp\"))\n                object.tp = $root.onnx.TypeProto.toObject(message.tp, options);\n            if (message.typeProtos && message.typeProtos.length) {\n                object.typeProtos = [];\n                for (var j = 0; j < message.typeProtos.length; ++j)\n                    object.typeProtos[j] = $root.onnx.TypeProto.toObject(message.typeProtos[j], options);\n            }\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = options.enums === String ? $root.onnx.AttributeProto.AttributeType[message.type] === undefined ? message.type : $root.onnx.AttributeProto.AttributeType[message.type] : message.type;\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                object.refAttrName = message.refAttrName;\n            if (message.sparseTensor != null && message.hasOwnProperty(\"sparseTensor\"))\n                object.sparseTensor = $root.onnx.SparseTensorProto.toObject(message.sparseTensor, options);\n            if (message.sparseTensors && message.sparseTensors.length) {\n                object.sparseTensors = [];\n                for (var j = 0; j < message.sparseTensors.length; ++j)\n                    object.sparseTensors[j] = $root.onnx.SparseTensorProto.toObject(message.sparseTensors[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this AttributeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.AttributeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AttributeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for AttributeProto\n         * @function getTypeUrl\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        AttributeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.AttributeProto\";\n        };\n\n        /**\n         * AttributeType enum.\n         * @name onnx.AttributeProto.AttributeType\n         * @enum {number}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} INT=2 INT value\n         * @property {number} STRING=3 STRING value\n         * @property {number} TENSOR=4 TENSOR value\n         * @property {number} GRAPH=5 GRAPH value\n         * @property {number} SPARSE_TENSOR=11 SPARSE_TENSOR value\n         * @property {number} TYPE_PROTO=13 TYPE_PROTO value\n         * @property {number} FLOATS=6 FLOATS value\n         * @property {number} INTS=7 INTS value\n         * @property {number} STRINGS=8 STRINGS value\n         * @property {number} TENSORS=9 TENSORS value\n         * @property {number} GRAPHS=10 GRAPHS value\n         * @property {number} SPARSE_TENSORS=12 SPARSE_TENSORS value\n         * @property {number} TYPE_PROTOS=14 TYPE_PROTOS value\n         */\n        AttributeProto.AttributeType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"INT\"] = 2;\n            values[valuesById[3] = \"STRING\"] = 3;\n            values[valuesById[4] = \"TENSOR\"] = 4;\n            values[valuesById[5] = \"GRAPH\"] = 5;\n            values[valuesById[11] = \"SPARSE_TENSOR\"] = 11;\n            values[valuesById[13] = \"TYPE_PROTO\"] = 13;\n            values[valuesById[6] = \"FLOATS\"] = 6;\n            values[valuesById[7] = \"INTS\"] = 7;\n            values[valuesById[8] = \"STRINGS\"] = 8;\n            values[valuesById[9] = \"TENSORS\"] = 9;\n            values[valuesById[10] = \"GRAPHS\"] = 10;\n            values[valuesById[12] = \"SPARSE_TENSORS\"] = 12;\n            values[valuesById[14] = \"TYPE_PROTOS\"] = 14;\n            return values;\n        })();\n\n        return AttributeProto;\n    })();\n\n    onnx.ValueInfoProto = (function() {\n\n        /**\n         * Properties of a ValueInfoProto.\n         * @memberof onnx\n         * @interface IValueInfoProto\n         * @property {string|null} [name] ValueInfoProto name\n         * @property {onnx.ITypeProto|null} [type] ValueInfoProto type\n         * @property {string|null} [docString] ValueInfoProto docString\n         */\n\n        /**\n         * Constructs a new ValueInfoProto.\n         * @memberof onnx\n         * @classdesc Represents a ValueInfoProto.\n         * @implements IValueInfoProto\n         * @constructor\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         */\n        function ValueInfoProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ValueInfoProto name.\n         * @member {string} name\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.name = \"\";\n\n        /**\n         * ValueInfoProto type.\n         * @member {onnx.ITypeProto|null|undefined} type\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.type = null;\n\n        /**\n         * ValueInfoProto docString.\n         * @member {string} docString\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new ValueInfoProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         * @returns {onnx.ValueInfoProto} ValueInfoProto instance\n         */\n        ValueInfoProto.create = function create(properties) {\n            return new ValueInfoProto(properties);\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\n                $root.onnx.TypeProto.encode(message.type, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.docString);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message, length delimited. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ValueInfoProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.type = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 3: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ValueInfoProto message.\n         * @function verify\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ValueInfoProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\")) {\n                var error = $root.onnx.TypeProto.verify(message.type);\n                if (error)\n                    return \"type.\" + error;\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ValueInfoProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         */\n        ValueInfoProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ValueInfoProto)\n                return object;\n            var message = new $root.onnx.ValueInfoProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.type != null) {\n                if (typeof object.type !== \"object\")\n                    throw TypeError(\".onnx.ValueInfoProto.type: object expected\");\n                message.type = $root.onnx.TypeProto.fromObject(object.type);\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ValueInfoProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.ValueInfoProto} message ValueInfoProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ValueInfoProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.name = \"\";\n                object.type = null;\n                object.docString = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = $root.onnx.TypeProto.toObject(message.type, options);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            return object;\n        };\n\n        /**\n         * Converts this ValueInfoProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ValueInfoProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ValueInfoProto\n         * @function getTypeUrl\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ValueInfoProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.ValueInfoProto\";\n        };\n\n        return ValueInfoProto;\n    })();\n\n    onnx.NodeProto = (function() {\n\n        /**\n         * Properties of a NodeProto.\n         * @memberof onnx\n         * @interface INodeProto\n         * @property {Array.<string>|null} [input] NodeProto input\n         * @property {Array.<string>|null} [output] NodeProto output\n         * @property {string|null} [name] NodeProto name\n         * @property {string|null} [opType] NodeProto opType\n         * @property {string|null} [domain] NodeProto domain\n         * @property {Array.<onnx.IAttributeProto>|null} [attribute] NodeProto attribute\n         * @property {string|null} [docString] NodeProto docString\n         */\n\n        /**\n         * Constructs a new NodeProto.\n         * @memberof onnx\n         * @classdesc Represents a NodeProto.\n         * @implements INodeProto\n         * @constructor\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         */\n        function NodeProto(properties) {\n            this.input = [];\n            this.output = [];\n            this.attribute = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * NodeProto input.\n         * @member {Array.<string>} input\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.input = $util.emptyArray;\n\n        /**\n         * NodeProto output.\n         * @member {Array.<string>} output\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.output = $util.emptyArray;\n\n        /**\n         * NodeProto name.\n         * @member {string} name\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.name = \"\";\n\n        /**\n         * NodeProto opType.\n         * @member {string} opType\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.opType = \"\";\n\n        /**\n         * NodeProto domain.\n         * @member {string} domain\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.domain = \"\";\n\n        /**\n         * NodeProto attribute.\n         * @member {Array.<onnx.IAttributeProto>} attribute\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.attribute = $util.emptyArray;\n\n        /**\n         * NodeProto docString.\n         * @member {string} docString\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new NodeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         * @returns {onnx.NodeProto} NodeProto instance\n         */\n        NodeProto.create = function create(properties) {\n            return new NodeProto(properties);\n        };\n\n        /**\n         * Encodes the specified NodeProto message. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.input[i]);\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.output[i]);\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);\n            if (message.opType != null && Object.hasOwnProperty.call(message, \"opType\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.opType);\n            if (message.attribute != null && message.attribute.length)\n                for (var i = 0; i < message.attribute.length; ++i)\n                    $root.onnx.AttributeProto.encode(message.attribute[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.domain);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified NodeProto message, length delimited. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.NodeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        if (!(message.input && message.input.length))\n                            message.input = [];\n                        message.input.push(reader.string());\n                        break;\n                    }\n                case 2: {\n                        if (!(message.output && message.output.length))\n                            message.output = [];\n                        message.output.push(reader.string());\n                        break;\n                    }\n                case 3: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 4: {\n                        message.opType = reader.string();\n                        break;\n                    }\n                case 7: {\n                        message.domain = reader.string();\n                        break;\n                    }\n                case 5: {\n                        if (!(message.attribute && message.attribute.length))\n                            message.attribute = [];\n                        message.attribute.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 6: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a NodeProto message.\n         * @function verify\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        NodeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i)\n                    if (!$util.isString(message.input[i]))\n                        return \"input: string[] expected\";\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i)\n                    if (!$util.isString(message.output[i]))\n                        return \"output: string[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                if (!$util.isString(message.opType))\n                    return \"opType: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\n                if (!Array.isArray(message.attribute))\n                    return \"attribute: array expected\";\n                for (var i = 0; i < message.attribute.length; ++i) {\n                    var error = $root.onnx.AttributeProto.verify(message.attribute[i]);\n                    if (error)\n                        return \"attribute.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a NodeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.NodeProto} NodeProto\n         */\n        NodeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.NodeProto)\n                return object;\n            var message = new $root.onnx.NodeProto();\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.NodeProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i)\n                    message.input[i] = String(object.input[i]);\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.NodeProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i)\n                    message.output[i] = String(object.output[i]);\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.opType != null)\n                message.opType = String(object.opType);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.attribute) {\n                if (!Array.isArray(object.attribute))\n                    throw TypeError(\".onnx.NodeProto.attribute: array expected\");\n                message.attribute = [];\n                for (var i = 0; i < object.attribute.length; ++i) {\n                    if (typeof object.attribute[i] !== \"object\")\n                        throw TypeError(\".onnx.NodeProto.attribute: object expected\");\n                    message.attribute[i] = $root.onnx.AttributeProto.fromObject(object.attribute[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a NodeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.NodeProto} message NodeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        NodeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.input = [];\n                object.output = [];\n                object.attribute = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.opType = \"\";\n                object.docString = \"\";\n                object.domain = \"\";\n            }\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = message.input[j];\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = message.output[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                object.opType = message.opType;\n            if (message.attribute && message.attribute.length) {\n                object.attribute = [];\n                for (var j = 0; j < message.attribute.length; ++j)\n                    object.attribute[j] = $root.onnx.AttributeProto.toObject(message.attribute[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            return object;\n        };\n\n        /**\n         * Converts this NodeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.NodeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        NodeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for NodeProto\n         * @function getTypeUrl\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        NodeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.NodeProto\";\n        };\n\n        return NodeProto;\n    })();\n\n    onnx.TrainingInfoProto = (function() {\n\n        /**\n         * Properties of a TrainingInfoProto.\n         * @memberof onnx\n         * @interface ITrainingInfoProto\n         * @property {onnx.IGraphProto|null} [initialization] TrainingInfoProto initialization\n         * @property {onnx.IGraphProto|null} [algorithm] TrainingInfoProto algorithm\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [initializationBinding] TrainingInfoProto initializationBinding\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [updateBinding] TrainingInfoProto updateBinding\n         */\n\n        /**\n         * Constructs a new TrainingInfoProto.\n         * @memberof onnx\n         * @classdesc Represents a TrainingInfoProto.\n         * @implements ITrainingInfoProto\n         * @constructor\n         * @param {onnx.ITrainingInfoProto=} [properties] Properties to set\n         */\n        function TrainingInfoProto(properties) {\n            this.initializationBinding = [];\n            this.updateBinding = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TrainingInfoProto initialization.\n         * @member {onnx.IGraphProto|null|undefined} initialization\n         * @memberof onnx.TrainingInfoProto\n         * @instance\n         */\n        TrainingInfoProto.prototype.initialization = null;\n\n        /**\n         * TrainingInfoProto algorithm.\n         * @member {onnx.IGraphProto|null|undefined} algorithm\n         * @memberof onnx.TrainingInfoProto\n         * @instance\n         */\n        TrainingInfoProto.prototype.algorithm = null;\n\n        /**\n         * TrainingInfoProto initializationBinding.\n         * @member {Array.<onnx.IStringStringEntryProto>} initializationBinding\n         * @memberof onnx.TrainingInfoProto\n         * @instance\n         */\n        TrainingInfoProto.prototype.initializationBinding = $util.emptyArray;\n\n        /**\n         * TrainingInfoProto updateBinding.\n         * @member {Array.<onnx.IStringStringEntryProto>} updateBinding\n         * @memberof onnx.TrainingInfoProto\n         * @instance\n         */\n        TrainingInfoProto.prototype.updateBinding = $util.emptyArray;\n\n        /**\n         * Creates a new TrainingInfoProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {onnx.ITrainingInfoProto=} [properties] Properties to set\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto instance\n         */\n        TrainingInfoProto.create = function create(properties) {\n            return new TrainingInfoProto(properties);\n        };\n\n        /**\n         * Encodes the specified TrainingInfoProto message. Does not implicitly {@link onnx.TrainingInfoProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {onnx.ITrainingInfoProto} message TrainingInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TrainingInfoProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.initialization != null && Object.hasOwnProperty.call(message, \"initialization\"))\n                $root.onnx.GraphProto.encode(message.initialization, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.algorithm != null && Object.hasOwnProperty.call(message, \"algorithm\"))\n                $root.onnx.GraphProto.encode(message.algorithm, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.initializationBinding != null && message.initializationBinding.length)\n                for (var i = 0; i < message.initializationBinding.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.initializationBinding[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.updateBinding != null && message.updateBinding.length)\n                for (var i = 0; i < message.updateBinding.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.updateBinding[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TrainingInfoProto message, length delimited. Does not implicitly {@link onnx.TrainingInfoProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {onnx.ITrainingInfoProto} message TrainingInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TrainingInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TrainingInfoProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TrainingInfoProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TrainingInfoProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.initialization = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 2: {\n                        message.algorithm = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 3: {\n                        if (!(message.initializationBinding && message.initializationBinding.length))\n                            message.initializationBinding = [];\n                        message.initializationBinding.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 4: {\n                        if (!(message.updateBinding && message.updateBinding.length))\n                            message.updateBinding = [];\n                        message.updateBinding.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TrainingInfoProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TrainingInfoProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TrainingInfoProto message.\n         * @function verify\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TrainingInfoProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.initialization != null && message.hasOwnProperty(\"initialization\")) {\n                var error = $root.onnx.GraphProto.verify(message.initialization);\n                if (error)\n                    return \"initialization.\" + error;\n            }\n            if (message.algorithm != null && message.hasOwnProperty(\"algorithm\")) {\n                var error = $root.onnx.GraphProto.verify(message.algorithm);\n                if (error)\n                    return \"algorithm.\" + error;\n            }\n            if (message.initializationBinding != null && message.hasOwnProperty(\"initializationBinding\")) {\n                if (!Array.isArray(message.initializationBinding))\n                    return \"initializationBinding: array expected\";\n                for (var i = 0; i < message.initializationBinding.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.initializationBinding[i]);\n                    if (error)\n                        return \"initializationBinding.\" + error;\n                }\n            }\n            if (message.updateBinding != null && message.hasOwnProperty(\"updateBinding\")) {\n                if (!Array.isArray(message.updateBinding))\n                    return \"updateBinding: array expected\";\n                for (var i = 0; i < message.updateBinding.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.updateBinding[i]);\n                    if (error)\n                        return \"updateBinding.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TrainingInfoProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto\n         */\n        TrainingInfoProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TrainingInfoProto)\n                return object;\n            var message = new $root.onnx.TrainingInfoProto();\n            if (object.initialization != null) {\n                if (typeof object.initialization !== \"object\")\n                    throw TypeError(\".onnx.TrainingInfoProto.initialization: object expected\");\n                message.initialization = $root.onnx.GraphProto.fromObject(object.initialization);\n            }\n            if (object.algorithm != null) {\n                if (typeof object.algorithm !== \"object\")\n                    throw TypeError(\".onnx.TrainingInfoProto.algorithm: object expected\");\n                message.algorithm = $root.onnx.GraphProto.fromObject(object.algorithm);\n            }\n            if (object.initializationBinding) {\n                if (!Array.isArray(object.initializationBinding))\n                    throw TypeError(\".onnx.TrainingInfoProto.initializationBinding: array expected\");\n                message.initializationBinding = [];\n                for (var i = 0; i < object.initializationBinding.length; ++i) {\n                    if (typeof object.initializationBinding[i] !== \"object\")\n                        throw TypeError(\".onnx.TrainingInfoProto.initializationBinding: object expected\");\n                    message.initializationBinding[i] = $root.onnx.StringStringEntryProto.fromObject(object.initializationBinding[i]);\n                }\n            }\n            if (object.updateBinding) {\n                if (!Array.isArray(object.updateBinding))\n                    throw TypeError(\".onnx.TrainingInfoProto.updateBinding: array expected\");\n                message.updateBinding = [];\n                for (var i = 0; i < object.updateBinding.length; ++i) {\n                    if (typeof object.updateBinding[i] !== \"object\")\n                        throw TypeError(\".onnx.TrainingInfoProto.updateBinding: object expected\");\n                    message.updateBinding[i] = $root.onnx.StringStringEntryProto.fromObject(object.updateBinding[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TrainingInfoProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {onnx.TrainingInfoProto} message TrainingInfoProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TrainingInfoProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.initializationBinding = [];\n                object.updateBinding = [];\n            }\n            if (options.defaults) {\n                object.initialization = null;\n                object.algorithm = null;\n            }\n            if (message.initialization != null && message.hasOwnProperty(\"initialization\"))\n                object.initialization = $root.onnx.GraphProto.toObject(message.initialization, options);\n            if (message.algorithm != null && message.hasOwnProperty(\"algorithm\"))\n                object.algorithm = $root.onnx.GraphProto.toObject(message.algorithm, options);\n            if (message.initializationBinding && message.initializationBinding.length) {\n                object.initializationBinding = [];\n                for (var j = 0; j < message.initializationBinding.length; ++j)\n                    object.initializationBinding[j] = $root.onnx.StringStringEntryProto.toObject(message.initializationBinding[j], options);\n            }\n            if (message.updateBinding && message.updateBinding.length) {\n                object.updateBinding = [];\n                for (var j = 0; j < message.updateBinding.length; ++j)\n                    object.updateBinding[j] = $root.onnx.StringStringEntryProto.toObject(message.updateBinding[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TrainingInfoProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TrainingInfoProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TrainingInfoProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TrainingInfoProto\n         * @function getTypeUrl\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TrainingInfoProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.TrainingInfoProto\";\n        };\n\n        return TrainingInfoProto;\n    })();\n\n    onnx.ModelProto = (function() {\n\n        /**\n         * Properties of a ModelProto.\n         * @memberof onnx\n         * @interface IModelProto\n         * @property {number|Long|null} [irVersion] ModelProto irVersion\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] ModelProto opsetImport\n         * @property {string|null} [producerName] ModelProto producerName\n         * @property {string|null} [producerVersion] ModelProto producerVersion\n         * @property {string|null} [domain] ModelProto domain\n         * @property {number|Long|null} [modelVersion] ModelProto modelVersion\n         * @property {string|null} [docString] ModelProto docString\n         * @property {onnx.IGraphProto|null} [graph] ModelProto graph\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [metadataProps] ModelProto metadataProps\n         * @property {Array.<onnx.ITrainingInfoProto>|null} [trainingInfo] ModelProto trainingInfo\n         * @property {Array.<onnx.IFunctionProto>|null} [functions] ModelProto functions\n         */\n\n        /**\n         * Constructs a new ModelProto.\n         * @memberof onnx\n         * @classdesc Represents a ModelProto.\n         * @implements IModelProto\n         * @constructor\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         */\n        function ModelProto(properties) {\n            this.opsetImport = [];\n            this.metadataProps = [];\n            this.trainingInfo = [];\n            this.functions = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ModelProto irVersion.\n         * @member {number|Long} irVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.irVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto opsetImport.\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.opsetImport = $util.emptyArray;\n\n        /**\n         * ModelProto producerName.\n         * @member {string} producerName\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerName = \"\";\n\n        /**\n         * ModelProto producerVersion.\n         * @member {string} producerVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerVersion = \"\";\n\n        /**\n         * ModelProto domain.\n         * @member {string} domain\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.domain = \"\";\n\n        /**\n         * ModelProto modelVersion.\n         * @member {number|Long} modelVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.modelVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto docString.\n         * @member {string} docString\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.docString = \"\";\n\n        /**\n         * ModelProto graph.\n         * @member {onnx.IGraphProto|null|undefined} graph\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.graph = null;\n\n        /**\n         * ModelProto metadataProps.\n         * @member {Array.<onnx.IStringStringEntryProto>} metadataProps\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.metadataProps = $util.emptyArray;\n\n        /**\n         * ModelProto trainingInfo.\n         * @member {Array.<onnx.ITrainingInfoProto>} trainingInfo\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.trainingInfo = $util.emptyArray;\n\n        /**\n         * ModelProto functions.\n         * @member {Array.<onnx.IFunctionProto>} functions\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.functions = $util.emptyArray;\n\n        /**\n         * Creates a new ModelProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         * @returns {onnx.ModelProto} ModelProto instance\n         */\n        ModelProto.create = function create(properties) {\n            return new ModelProto(properties);\n        };\n\n        /**\n         * Encodes the specified ModelProto message. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.irVersion != null && Object.hasOwnProperty.call(message, \"irVersion\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.irVersion);\n            if (message.producerName != null && Object.hasOwnProperty.call(message, \"producerName\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.producerName);\n            if (message.producerVersion != null && Object.hasOwnProperty.call(message, \"producerVersion\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.producerVersion);\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.domain);\n            if (message.modelVersion != null && Object.hasOwnProperty.call(message, \"modelVersion\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.modelVersion);\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.graph != null && Object.hasOwnProperty.call(message, \"graph\"))\n                $root.onnx.GraphProto.encode(message.graph, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.opsetImport != null && message.opsetImport.length)\n                for (var i = 0; i < message.opsetImport.length; ++i)\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.metadataProps != null && message.metadataProps.length)\n                for (var i = 0; i < message.metadataProps.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.metadataProps[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            if (message.trainingInfo != null && message.trainingInfo.length)\n                for (var i = 0; i < message.trainingInfo.length; ++i)\n                    $root.onnx.TrainingInfoProto.encode(message.trainingInfo[i], writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();\n            if (message.functions != null && message.functions.length)\n                for (var i = 0; i < message.functions.length; ++i)\n                    $root.onnx.FunctionProto.encode(message.functions[i], writer.uint32(/* id 25, wireType 2 =*/202).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ModelProto message, length delimited. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ModelProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.irVersion = reader.int64();\n                        break;\n                    }\n                case 8: {\n                        if (!(message.opsetImport && message.opsetImport.length))\n                            message.opsetImport = [];\n                        message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 2: {\n                        message.producerName = reader.string();\n                        break;\n                    }\n                case 3: {\n                        message.producerVersion = reader.string();\n                        break;\n                    }\n                case 4: {\n                        message.domain = reader.string();\n                        break;\n                    }\n                case 5: {\n                        message.modelVersion = reader.int64();\n                        break;\n                    }\n                case 6: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                case 7: {\n                        message.graph = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 14: {\n                        if (!(message.metadataProps && message.metadataProps.length))\n                            message.metadataProps = [];\n                        message.metadataProps.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 20: {\n                        if (!(message.trainingInfo && message.trainingInfo.length))\n                            message.trainingInfo = [];\n                        message.trainingInfo.push($root.onnx.TrainingInfoProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 25: {\n                        if (!(message.functions && message.functions.length))\n                            message.functions = [];\n                        message.functions.push($root.onnx.FunctionProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ModelProto message.\n         * @function verify\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ModelProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (!$util.isInteger(message.irVersion) && !(message.irVersion && $util.isInteger(message.irVersion.low) && $util.isInteger(message.irVersion.high)))\n                    return \"irVersion: integer|Long expected\";\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\n                if (!Array.isArray(message.opsetImport))\n                    return \"opsetImport: array expected\";\n                for (var i = 0; i < message.opsetImport.length; ++i) {\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n                    if (error)\n                        return \"opsetImport.\" + error;\n                }\n            }\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                if (!$util.isString(message.producerName))\n                    return \"producerName: string expected\";\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                if (!$util.isString(message.producerVersion))\n                    return \"producerVersion: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (!$util.isInteger(message.modelVersion) && !(message.modelVersion && $util.isInteger(message.modelVersion.low) && $util.isInteger(message.modelVersion.high)))\n                    return \"modelVersion: integer|Long expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.graph != null && message.hasOwnProperty(\"graph\")) {\n                var error = $root.onnx.GraphProto.verify(message.graph);\n                if (error)\n                    return \"graph.\" + error;\n            }\n            if (message.metadataProps != null && message.hasOwnProperty(\"metadataProps\")) {\n                if (!Array.isArray(message.metadataProps))\n                    return \"metadataProps: array expected\";\n                for (var i = 0; i < message.metadataProps.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.metadataProps[i]);\n                    if (error)\n                        return \"metadataProps.\" + error;\n                }\n            }\n            if (message.trainingInfo != null && message.hasOwnProperty(\"trainingInfo\")) {\n                if (!Array.isArray(message.trainingInfo))\n                    return \"trainingInfo: array expected\";\n                for (var i = 0; i < message.trainingInfo.length; ++i) {\n                    var error = $root.onnx.TrainingInfoProto.verify(message.trainingInfo[i]);\n                    if (error)\n                        return \"trainingInfo.\" + error;\n                }\n            }\n            if (message.functions != null && message.hasOwnProperty(\"functions\")) {\n                if (!Array.isArray(message.functions))\n                    return \"functions: array expected\";\n                for (var i = 0; i < message.functions.length; ++i) {\n                    var error = $root.onnx.FunctionProto.verify(message.functions[i]);\n                    if (error)\n                        return \"functions.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ModelProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ModelProto} ModelProto\n         */\n        ModelProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ModelProto)\n                return object;\n            var message = new $root.onnx.ModelProto();\n            if (object.irVersion != null)\n                if ($util.Long)\n                    (message.irVersion = $util.Long.fromValue(object.irVersion)).unsigned = false;\n                else if (typeof object.irVersion === \"string\")\n                    message.irVersion = parseInt(object.irVersion, 10);\n                else if (typeof object.irVersion === \"number\")\n                    message.irVersion = object.irVersion;\n                else if (typeof object.irVersion === \"object\")\n                    message.irVersion = new $util.LongBits(object.irVersion.low >>> 0, object.irVersion.high >>> 0).toNumber();\n            if (object.opsetImport) {\n                if (!Array.isArray(object.opsetImport))\n                    throw TypeError(\".onnx.ModelProto.opsetImport: array expected\");\n                message.opsetImport = [];\n                for (var i = 0; i < object.opsetImport.length; ++i) {\n                    if (typeof object.opsetImport[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.opsetImport: object expected\");\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n                }\n            }\n            if (object.producerName != null)\n                message.producerName = String(object.producerName);\n            if (object.producerVersion != null)\n                message.producerVersion = String(object.producerVersion);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.modelVersion != null)\n                if ($util.Long)\n                    (message.modelVersion = $util.Long.fromValue(object.modelVersion)).unsigned = false;\n                else if (typeof object.modelVersion === \"string\")\n                    message.modelVersion = parseInt(object.modelVersion, 10);\n                else if (typeof object.modelVersion === \"number\")\n                    message.modelVersion = object.modelVersion;\n                else if (typeof object.modelVersion === \"object\")\n                    message.modelVersion = new $util.LongBits(object.modelVersion.low >>> 0, object.modelVersion.high >>> 0).toNumber();\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.graph != null) {\n                if (typeof object.graph !== \"object\")\n                    throw TypeError(\".onnx.ModelProto.graph: object expected\");\n                message.graph = $root.onnx.GraphProto.fromObject(object.graph);\n            }\n            if (object.metadataProps) {\n                if (!Array.isArray(object.metadataProps))\n                    throw TypeError(\".onnx.ModelProto.metadataProps: array expected\");\n                message.metadataProps = [];\n                for (var i = 0; i < object.metadataProps.length; ++i) {\n                    if (typeof object.metadataProps[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.metadataProps: object expected\");\n                    message.metadataProps[i] = $root.onnx.StringStringEntryProto.fromObject(object.metadataProps[i]);\n                }\n            }\n            if (object.trainingInfo) {\n                if (!Array.isArray(object.trainingInfo))\n                    throw TypeError(\".onnx.ModelProto.trainingInfo: array expected\");\n                message.trainingInfo = [];\n                for (var i = 0; i < object.trainingInfo.length; ++i) {\n                    if (typeof object.trainingInfo[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.trainingInfo: object expected\");\n                    message.trainingInfo[i] = $root.onnx.TrainingInfoProto.fromObject(object.trainingInfo[i]);\n                }\n            }\n            if (object.functions) {\n                if (!Array.isArray(object.functions))\n                    throw TypeError(\".onnx.ModelProto.functions: array expected\");\n                message.functions = [];\n                for (var i = 0; i < object.functions.length; ++i) {\n                    if (typeof object.functions[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.functions: object expected\");\n                    message.functions[i] = $root.onnx.FunctionProto.fromObject(object.functions[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ModelProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.ModelProto} message ModelProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ModelProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.opsetImport = [];\n                object.metadataProps = [];\n                object.trainingInfo = [];\n                object.functions = [];\n            }\n            if (options.defaults) {\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.irVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.irVersion = options.longs === String ? \"0\" : 0;\n                object.producerName = \"\";\n                object.producerVersion = \"\";\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.modelVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.modelVersion = options.longs === String ? \"0\" : 0;\n                object.docString = \"\";\n                object.graph = null;\n            }\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (typeof message.irVersion === \"number\")\n                    object.irVersion = options.longs === String ? String(message.irVersion) : message.irVersion;\n                else\n                    object.irVersion = options.longs === String ? $util.Long.prototype.toString.call(message.irVersion) : options.longs === Number ? new $util.LongBits(message.irVersion.low >>> 0, message.irVersion.high >>> 0).toNumber() : message.irVersion;\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                object.producerName = message.producerName;\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                object.producerVersion = message.producerVersion;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (typeof message.modelVersion === \"number\")\n                    object.modelVersion = options.longs === String ? String(message.modelVersion) : message.modelVersion;\n                else\n                    object.modelVersion = options.longs === String ? $util.Long.prototype.toString.call(message.modelVersion) : options.longs === Number ? new $util.LongBits(message.modelVersion.low >>> 0, message.modelVersion.high >>> 0).toNumber() : message.modelVersion;\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                object.graph = $root.onnx.GraphProto.toObject(message.graph, options);\n            if (message.opsetImport && message.opsetImport.length) {\n                object.opsetImport = [];\n                for (var j = 0; j < message.opsetImport.length; ++j)\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n            }\n            if (message.metadataProps && message.metadataProps.length) {\n                object.metadataProps = [];\n                for (var j = 0; j < message.metadataProps.length; ++j)\n                    object.metadataProps[j] = $root.onnx.StringStringEntryProto.toObject(message.metadataProps[j], options);\n            }\n            if (message.trainingInfo && message.trainingInfo.length) {\n                object.trainingInfo = [];\n                for (var j = 0; j < message.trainingInfo.length; ++j)\n                    object.trainingInfo[j] = $root.onnx.TrainingInfoProto.toObject(message.trainingInfo[j], options);\n            }\n            if (message.functions && message.functions.length) {\n                object.functions = [];\n                for (var j = 0; j < message.functions.length; ++j)\n                    object.functions[j] = $root.onnx.FunctionProto.toObject(message.functions[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ModelProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ModelProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ModelProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ModelProto\n         * @function getTypeUrl\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ModelProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.ModelProto\";\n        };\n\n        return ModelProto;\n    })();\n\n    onnx.StringStringEntryProto = (function() {\n\n        /**\n         * Properties of a StringStringEntryProto.\n         * @memberof onnx\n         * @interface IStringStringEntryProto\n         * @property {string|null} [key] StringStringEntryProto key\n         * @property {string|null} [value] StringStringEntryProto value\n         */\n\n        /**\n         * Constructs a new StringStringEntryProto.\n         * @memberof onnx\n         * @classdesc Represents a StringStringEntryProto.\n         * @implements IStringStringEntryProto\n         * @constructor\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         */\n        function StringStringEntryProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * StringStringEntryProto key.\n         * @member {string} key\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.key = \"\";\n\n        /**\n         * StringStringEntryProto value.\n         * @member {string} value\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.value = \"\";\n\n        /**\n         * Creates a new StringStringEntryProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto instance\n         */\n        StringStringEntryProto.create = function create(properties) {\n            return new StringStringEntryProto(properties);\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && Object.hasOwnProperty.call(message, \"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);\n            if (message.value != null && Object.hasOwnProperty.call(message, \"value\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message, length delimited. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.StringStringEntryProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.key = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.value = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a StringStringEntryProto message.\n         * @function verify\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        StringStringEntryProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!$util.isString(message.key))\n                    return \"key: string expected\";\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                if (!$util.isString(message.value))\n                    return \"value: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a StringStringEntryProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         */\n        StringStringEntryProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.StringStringEntryProto)\n                return object;\n            var message = new $root.onnx.StringStringEntryProto();\n            if (object.key != null)\n                message.key = String(object.key);\n            if (object.value != null)\n                message.value = String(object.value);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a StringStringEntryProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.StringStringEntryProto} message StringStringEntryProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        StringStringEntryProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.key = \"\";\n                object.value = \"\";\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = message.key;\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                object.value = message.value;\n            return object;\n        };\n\n        /**\n         * Converts this StringStringEntryProto to JSON.\n         * @function toJSON\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        StringStringEntryProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for StringStringEntryProto\n         * @function getTypeUrl\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        StringStringEntryProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.StringStringEntryProto\";\n        };\n\n        return StringStringEntryProto;\n    })();\n\n    onnx.TensorAnnotation = (function() {\n\n        /**\n         * Properties of a TensorAnnotation.\n         * @memberof onnx\n         * @interface ITensorAnnotation\n         * @property {string|null} [tensorName] TensorAnnotation tensorName\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [quantParameterTensorNames] TensorAnnotation quantParameterTensorNames\n         */\n\n        /**\n         * Constructs a new TensorAnnotation.\n         * @memberof onnx\n         * @classdesc Represents a TensorAnnotation.\n         * @implements ITensorAnnotation\n         * @constructor\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         */\n        function TensorAnnotation(properties) {\n            this.quantParameterTensorNames = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorAnnotation tensorName.\n         * @member {string} tensorName\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.tensorName = \"\";\n\n        /**\n         * TensorAnnotation quantParameterTensorNames.\n         * @member {Array.<onnx.IStringStringEntryProto>} quantParameterTensorNames\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.quantParameterTensorNames = $util.emptyArray;\n\n        /**\n         * Creates a new TensorAnnotation instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         * @returns {onnx.TensorAnnotation} TensorAnnotation instance\n         */\n        TensorAnnotation.create = function create(properties) {\n            return new TensorAnnotation(properties);\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorName != null && Object.hasOwnProperty.call(message, \"tensorName\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.tensorName);\n            if (message.quantParameterTensorNames != null && message.quantParameterTensorNames.length)\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.quantParameterTensorNames[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message, length delimited. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorAnnotation();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.tensorName = reader.string();\n                        break;\n                    }\n                case 2: {\n                        if (!(message.quantParameterTensorNames && message.quantParameterTensorNames.length))\n                            message.quantParameterTensorNames = [];\n                        message.quantParameterTensorNames.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorAnnotation message.\n         * @function verify\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorAnnotation.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                if (!$util.isString(message.tensorName))\n                    return \"tensorName: string expected\";\n            if (message.quantParameterTensorNames != null && message.hasOwnProperty(\"quantParameterTensorNames\")) {\n                if (!Array.isArray(message.quantParameterTensorNames))\n                    return \"quantParameterTensorNames: array expected\";\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.quantParameterTensorNames[i]);\n                    if (error)\n                        return \"quantParameterTensorNames.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorAnnotation message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         */\n        TensorAnnotation.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorAnnotation)\n                return object;\n            var message = new $root.onnx.TensorAnnotation();\n            if (object.tensorName != null)\n                message.tensorName = String(object.tensorName);\n            if (object.quantParameterTensorNames) {\n                if (!Array.isArray(object.quantParameterTensorNames))\n                    throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: array expected\");\n                message.quantParameterTensorNames = [];\n                for (var i = 0; i < object.quantParameterTensorNames.length; ++i) {\n                    if (typeof object.quantParameterTensorNames[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: object expected\");\n                    message.quantParameterTensorNames[i] = $root.onnx.StringStringEntryProto.fromObject(object.quantParameterTensorNames[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorAnnotation message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.TensorAnnotation} message TensorAnnotation\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorAnnotation.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.quantParameterTensorNames = [];\n            if (options.defaults)\n                object.tensorName = \"\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                object.tensorName = message.tensorName;\n            if (message.quantParameterTensorNames && message.quantParameterTensorNames.length) {\n                object.quantParameterTensorNames = [];\n                for (var j = 0; j < message.quantParameterTensorNames.length; ++j)\n                    object.quantParameterTensorNames[j] = $root.onnx.StringStringEntryProto.toObject(message.quantParameterTensorNames[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorAnnotation to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorAnnotation.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TensorAnnotation\n         * @function getTypeUrl\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TensorAnnotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.TensorAnnotation\";\n        };\n\n        return TensorAnnotation;\n    })();\n\n    onnx.GraphProto = (function() {\n\n        /**\n         * Properties of a GraphProto.\n         * @memberof onnx\n         * @interface IGraphProto\n         * @property {Array.<onnx.INodeProto>|null} [node] GraphProto node\n         * @property {string|null} [name] GraphProto name\n         * @property {Array.<onnx.ITensorProto>|null} [initializer] GraphProto initializer\n         * @property {Array.<onnx.ISparseTensorProto>|null} [sparseInitializer] GraphProto sparseInitializer\n         * @property {string|null} [docString] GraphProto docString\n         * @property {Array.<onnx.IValueInfoProto>|null} [input] GraphProto input\n         * @property {Array.<onnx.IValueInfoProto>|null} [output] GraphProto output\n         * @property {Array.<onnx.IValueInfoProto>|null} [valueInfo] GraphProto valueInfo\n         * @property {Array.<onnx.ITensorAnnotation>|null} [quantizationAnnotation] GraphProto quantizationAnnotation\n         */\n\n        /**\n         * Constructs a new GraphProto.\n         * @memberof onnx\n         * @classdesc Represents a GraphProto.\n         * @implements IGraphProto\n         * @constructor\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         */\n        function GraphProto(properties) {\n            this.node = [];\n            this.initializer = [];\n            this.sparseInitializer = [];\n            this.input = [];\n            this.output = [];\n            this.valueInfo = [];\n            this.quantizationAnnotation = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * GraphProto node.\n         * @member {Array.<onnx.INodeProto>} node\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.node = $util.emptyArray;\n\n        /**\n         * GraphProto name.\n         * @member {string} name\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.name = \"\";\n\n        /**\n         * GraphProto initializer.\n         * @member {Array.<onnx.ITensorProto>} initializer\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.initializer = $util.emptyArray;\n\n        /**\n         * GraphProto sparseInitializer.\n         * @member {Array.<onnx.ISparseTensorProto>} sparseInitializer\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.sparseInitializer = $util.emptyArray;\n\n        /**\n         * GraphProto docString.\n         * @member {string} docString\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.docString = \"\";\n\n        /**\n         * GraphProto input.\n         * @member {Array.<onnx.IValueInfoProto>} input\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.input = $util.emptyArray;\n\n        /**\n         * GraphProto output.\n         * @member {Array.<onnx.IValueInfoProto>} output\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.output = $util.emptyArray;\n\n        /**\n         * GraphProto valueInfo.\n         * @member {Array.<onnx.IValueInfoProto>} valueInfo\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.valueInfo = $util.emptyArray;\n\n        /**\n         * GraphProto quantizationAnnotation.\n         * @member {Array.<onnx.ITensorAnnotation>} quantizationAnnotation\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.quantizationAnnotation = $util.emptyArray;\n\n        /**\n         * Creates a new GraphProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         * @returns {onnx.GraphProto} GraphProto instance\n         */\n        GraphProto.create = function create(properties) {\n            return new GraphProto(properties);\n        };\n\n        /**\n         * Encodes the specified GraphProto message. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.node != null && message.node.length)\n                for (var i = 0; i < message.node.length; ++i)\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n            if (message.initializer != null && message.initializer.length)\n                for (var i = 0; i < message.initializer.length; ++i)\n                    $root.onnx.TensorProto.encode(message.initializer[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.docString);\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.input[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.output[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.valueInfo != null && message.valueInfo.length)\n                for (var i = 0; i < message.valueInfo.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.valueInfo[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.quantizationAnnotation != null && message.quantizationAnnotation.length)\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i)\n                    $root.onnx.TensorAnnotation.encode(message.quantizationAnnotation[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            if (message.sparseInitializer != null && message.sparseInitializer.length)\n                for (var i = 0; i < message.sparseInitializer.length; ++i)\n                    $root.onnx.SparseTensorProto.encode(message.sparseInitializer[i], writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified GraphProto message, length delimited. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.GraphProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        if (!(message.node && message.node.length))\n                            message.node = [];\n                        message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 2: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 5: {\n                        if (!(message.initializer && message.initializer.length))\n                            message.initializer = [];\n                        message.initializer.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 15: {\n                        if (!(message.sparseInitializer && message.sparseInitializer.length))\n                            message.sparseInitializer = [];\n                        message.sparseInitializer.push($root.onnx.SparseTensorProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 10: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                case 11: {\n                        if (!(message.input && message.input.length))\n                            message.input = [];\n                        message.input.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 12: {\n                        if (!(message.output && message.output.length))\n                            message.output = [];\n                        message.output.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 13: {\n                        if (!(message.valueInfo && message.valueInfo.length))\n                            message.valueInfo = [];\n                        message.valueInfo.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 14: {\n                        if (!(message.quantizationAnnotation && message.quantizationAnnotation.length))\n                            message.quantizationAnnotation = [];\n                        message.quantizationAnnotation.push($root.onnx.TensorAnnotation.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a GraphProto message.\n         * @function verify\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        GraphProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\n                if (!Array.isArray(message.node))\n                    return \"node: array expected\";\n                for (var i = 0; i < message.node.length; ++i) {\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\n                    if (error)\n                        return \"node.\" + error;\n                }\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.initializer != null && message.hasOwnProperty(\"initializer\")) {\n                if (!Array.isArray(message.initializer))\n                    return \"initializer: array expected\";\n                for (var i = 0; i < message.initializer.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.initializer[i]);\n                    if (error)\n                        return \"initializer.\" + error;\n                }\n            }\n            if (message.sparseInitializer != null && message.hasOwnProperty(\"sparseInitializer\")) {\n                if (!Array.isArray(message.sparseInitializer))\n                    return \"sparseInitializer: array expected\";\n                for (var i = 0; i < message.sparseInitializer.length; ++i) {\n                    var error = $root.onnx.SparseTensorProto.verify(message.sparseInitializer[i]);\n                    if (error)\n                        return \"sparseInitializer.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.input[i]);\n                    if (error)\n                        return \"input.\" + error;\n                }\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.output[i]);\n                    if (error)\n                        return \"output.\" + error;\n                }\n            }\n            if (message.valueInfo != null && message.hasOwnProperty(\"valueInfo\")) {\n                if (!Array.isArray(message.valueInfo))\n                    return \"valueInfo: array expected\";\n                for (var i = 0; i < message.valueInfo.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.valueInfo[i]);\n                    if (error)\n                        return \"valueInfo.\" + error;\n                }\n            }\n            if (message.quantizationAnnotation != null && message.hasOwnProperty(\"quantizationAnnotation\")) {\n                if (!Array.isArray(message.quantizationAnnotation))\n                    return \"quantizationAnnotation: array expected\";\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i) {\n                    var error = $root.onnx.TensorAnnotation.verify(message.quantizationAnnotation[i]);\n                    if (error)\n                        return \"quantizationAnnotation.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a GraphProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.GraphProto} GraphProto\n         */\n        GraphProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.GraphProto)\n                return object;\n            var message = new $root.onnx.GraphProto();\n            if (object.node) {\n                if (!Array.isArray(object.node))\n                    throw TypeError(\".onnx.GraphProto.node: array expected\");\n                message.node = [];\n                for (var i = 0; i < object.node.length; ++i) {\n                    if (typeof object.node[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.node: object expected\");\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n                }\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.initializer) {\n                if (!Array.isArray(object.initializer))\n                    throw TypeError(\".onnx.GraphProto.initializer: array expected\");\n                message.initializer = [];\n                for (var i = 0; i < object.initializer.length; ++i) {\n                    if (typeof object.initializer[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.initializer: object expected\");\n                    message.initializer[i] = $root.onnx.TensorProto.fromObject(object.initializer[i]);\n                }\n            }\n            if (object.sparseInitializer) {\n                if (!Array.isArray(object.sparseInitializer))\n                    throw TypeError(\".onnx.GraphProto.sparseInitializer: array expected\");\n                message.sparseInitializer = [];\n                for (var i = 0; i < object.sparseInitializer.length; ++i) {\n                    if (typeof object.sparseInitializer[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.sparseInitializer: object expected\");\n                    message.sparseInitializer[i] = $root.onnx.SparseTensorProto.fromObject(object.sparseInitializer[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.GraphProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i) {\n                    if (typeof object.input[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.input: object expected\");\n                    message.input[i] = $root.onnx.ValueInfoProto.fromObject(object.input[i]);\n                }\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.GraphProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i) {\n                    if (typeof object.output[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.output: object expected\");\n                    message.output[i] = $root.onnx.ValueInfoProto.fromObject(object.output[i]);\n                }\n            }\n            if (object.valueInfo) {\n                if (!Array.isArray(object.valueInfo))\n                    throw TypeError(\".onnx.GraphProto.valueInfo: array expected\");\n                message.valueInfo = [];\n                for (var i = 0; i < object.valueInfo.length; ++i) {\n                    if (typeof object.valueInfo[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.valueInfo: object expected\");\n                    message.valueInfo[i] = $root.onnx.ValueInfoProto.fromObject(object.valueInfo[i]);\n                }\n            }\n            if (object.quantizationAnnotation) {\n                if (!Array.isArray(object.quantizationAnnotation))\n                    throw TypeError(\".onnx.GraphProto.quantizationAnnotation: array expected\");\n                message.quantizationAnnotation = [];\n                for (var i = 0; i < object.quantizationAnnotation.length; ++i) {\n                    if (typeof object.quantizationAnnotation[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.quantizationAnnotation: object expected\");\n                    message.quantizationAnnotation[i] = $root.onnx.TensorAnnotation.fromObject(object.quantizationAnnotation[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a GraphProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.GraphProto} message GraphProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        GraphProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.node = [];\n                object.initializer = [];\n                object.input = [];\n                object.output = [];\n                object.valueInfo = [];\n                object.quantizationAnnotation = [];\n                object.sparseInitializer = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.docString = \"\";\n            }\n            if (message.node && message.node.length) {\n                object.node = [];\n                for (var j = 0; j < message.node.length; ++j)\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.initializer && message.initializer.length) {\n                object.initializer = [];\n                for (var j = 0; j < message.initializer.length; ++j)\n                    object.initializer[j] = $root.onnx.TensorProto.toObject(message.initializer[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = $root.onnx.ValueInfoProto.toObject(message.input[j], options);\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = $root.onnx.ValueInfoProto.toObject(message.output[j], options);\n            }\n            if (message.valueInfo && message.valueInfo.length) {\n                object.valueInfo = [];\n                for (var j = 0; j < message.valueInfo.length; ++j)\n                    object.valueInfo[j] = $root.onnx.ValueInfoProto.toObject(message.valueInfo[j], options);\n            }\n            if (message.quantizationAnnotation && message.quantizationAnnotation.length) {\n                object.quantizationAnnotation = [];\n                for (var j = 0; j < message.quantizationAnnotation.length; ++j)\n                    object.quantizationAnnotation[j] = $root.onnx.TensorAnnotation.toObject(message.quantizationAnnotation[j], options);\n            }\n            if (message.sparseInitializer && message.sparseInitializer.length) {\n                object.sparseInitializer = [];\n                for (var j = 0; j < message.sparseInitializer.length; ++j)\n                    object.sparseInitializer[j] = $root.onnx.SparseTensorProto.toObject(message.sparseInitializer[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this GraphProto to JSON.\n         * @function toJSON\n         * @memberof onnx.GraphProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        GraphProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for GraphProto\n         * @function getTypeUrl\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        GraphProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.GraphProto\";\n        };\n\n        return GraphProto;\n    })();\n\n    onnx.TensorProto = (function() {\n\n        /**\n         * Properties of a TensorProto.\n         * @memberof onnx\n         * @interface ITensorProto\n         * @property {Array.<number|Long>|null} [dims] TensorProto dims\n         * @property {number|null} [dataType] TensorProto dataType\n         * @property {onnx.TensorProto.ISegment|null} [segment] TensorProto segment\n         * @property {Array.<number>|null} [floatData] TensorProto floatData\n         * @property {Array.<number>|null} [int32Data] TensorProto int32Data\n         * @property {Array.<Uint8Array>|null} [stringData] TensorProto stringData\n         * @property {Array.<number|Long>|null} [int64Data] TensorProto int64Data\n         * @property {string|null} [name] TensorProto name\n         * @property {string|null} [docString] TensorProto docString\n         * @property {Uint8Array|null} [rawData] TensorProto rawData\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [externalData] TensorProto externalData\n         * @property {onnx.TensorProto.DataLocation|null} [dataLocation] TensorProto dataLocation\n         * @property {Array.<number>|null} [doubleData] TensorProto doubleData\n         * @property {Array.<number|Long>|null} [uint64Data] TensorProto uint64Data\n         */\n\n        /**\n         * Constructs a new TensorProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorProto.\n         * @implements ITensorProto\n         * @constructor\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         */\n        function TensorProto(properties) {\n            this.dims = [];\n            this.floatData = [];\n            this.int32Data = [];\n            this.stringData = [];\n            this.int64Data = [];\n            this.externalData = [];\n            this.doubleData = [];\n            this.uint64Data = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorProto dims.\n         * @member {Array.<number|Long>} dims\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dims = $util.emptyArray;\n\n        /**\n         * TensorProto dataType.\n         * @member {number} dataType\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataType = 0;\n\n        /**\n         * TensorProto segment.\n         * @member {onnx.TensorProto.ISegment|null|undefined} segment\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.segment = null;\n\n        /**\n         * TensorProto floatData.\n         * @member {Array.<number>} floatData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.floatData = $util.emptyArray;\n\n        /**\n         * TensorProto int32Data.\n         * @member {Array.<number>} int32Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int32Data = $util.emptyArray;\n\n        /**\n         * TensorProto stringData.\n         * @member {Array.<Uint8Array>} stringData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.stringData = $util.emptyArray;\n\n        /**\n         * TensorProto int64Data.\n         * @member {Array.<number|Long>} int64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int64Data = $util.emptyArray;\n\n        /**\n         * TensorProto name.\n         * @member {string} name\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.name = \"\";\n\n        /**\n         * TensorProto docString.\n         * @member {string} docString\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.docString = \"\";\n\n        /**\n         * TensorProto rawData.\n         * @member {Uint8Array} rawData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.rawData = $util.newBuffer([]);\n\n        /**\n         * TensorProto externalData.\n         * @member {Array.<onnx.IStringStringEntryProto>} externalData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.externalData = $util.emptyArray;\n\n        /**\n         * TensorProto dataLocation.\n         * @member {onnx.TensorProto.DataLocation} dataLocation\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataLocation = 0;\n\n        /**\n         * TensorProto doubleData.\n         * @member {Array.<number>} doubleData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.doubleData = $util.emptyArray;\n\n        /**\n         * TensorProto uint64Data.\n         * @member {Array.<number|Long>} uint64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.uint64Data = $util.emptyArray;\n\n        /**\n         * Creates a new TensorProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         * @returns {onnx.TensorProto} TensorProto instance\n         */\n        TensorProto.create = function create(properties) {\n            return new TensorProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorProto message. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dims != null && message.dims.length) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork();\n                for (var i = 0; i < message.dims.length; ++i)\n                    writer.int64(message.dims[i]);\n                writer.ldelim();\n            }\n            if (message.dataType != null && Object.hasOwnProperty.call(message, \"dataType\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.dataType);\n            if (message.segment != null && Object.hasOwnProperty.call(message, \"segment\"))\n                $root.onnx.TensorProto.Segment.encode(message.segment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.floatData != null && message.floatData.length) {\n                writer.uint32(/* id 4, wireType 2 =*/34).fork();\n                for (var i = 0; i < message.floatData.length; ++i)\n                    writer.float(message.floatData[i]);\n                writer.ldelim();\n            }\n            if (message.int32Data != null && message.int32Data.length) {\n                writer.uint32(/* id 5, wireType 2 =*/42).fork();\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    writer.int32(message.int32Data[i]);\n                writer.ldelim();\n            }\n            if (message.stringData != null && message.stringData.length)\n                for (var i = 0; i < message.stringData.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.stringData[i]);\n            if (message.int64Data != null && message.int64Data.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    writer.int64(message.int64Data[i]);\n                writer.ldelim();\n            }\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.name);\n            if (message.rawData != null && Object.hasOwnProperty.call(message, \"rawData\"))\n                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.rawData);\n            if (message.doubleData != null && message.doubleData.length) {\n                writer.uint32(/* id 10, wireType 2 =*/82).fork();\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    writer.double(message.doubleData[i]);\n                writer.ldelim();\n            }\n            if (message.uint64Data != null && message.uint64Data.length) {\n                writer.uint32(/* id 11, wireType 2 =*/90).fork();\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    writer.uint64(message.uint64Data[i]);\n                writer.ldelim();\n            }\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 12, wireType 2 =*/98).string(message.docString);\n            if (message.externalData != null && message.externalData.length)\n                for (var i = 0; i < message.externalData.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.externalData[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.dataLocation != null && Object.hasOwnProperty.call(message, \"dataLocation\"))\n                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.dataLocation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorProto message, length delimited. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        if (!(message.dims && message.dims.length))\n                            message.dims = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.dims.push(reader.int64());\n                        } else\n                            message.dims.push(reader.int64());\n                        break;\n                    }\n                case 2: {\n                        message.dataType = reader.int32();\n                        break;\n                    }\n                case 3: {\n                        message.segment = $root.onnx.TensorProto.Segment.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 4: {\n                        if (!(message.floatData && message.floatData.length))\n                            message.floatData = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.floatData.push(reader.float());\n                        } else\n                            message.floatData.push(reader.float());\n                        break;\n                    }\n                case 5: {\n                        if (!(message.int32Data && message.int32Data.length))\n                            message.int32Data = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.int32Data.push(reader.int32());\n                        } else\n                            message.int32Data.push(reader.int32());\n                        break;\n                    }\n                case 6: {\n                        if (!(message.stringData && message.stringData.length))\n                            message.stringData = [];\n                        message.stringData.push(reader.bytes());\n                        break;\n                    }\n                case 7: {\n                        if (!(message.int64Data && message.int64Data.length))\n                            message.int64Data = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.int64Data.push(reader.int64());\n                        } else\n                            message.int64Data.push(reader.int64());\n                        break;\n                    }\n                case 8: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 12: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                case 9: {\n                        message.rawData = reader.bytes();\n                        break;\n                    }\n                case 13: {\n                        if (!(message.externalData && message.externalData.length))\n                            message.externalData = [];\n                        message.externalData.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 14: {\n                        message.dataLocation = reader.int32();\n                        break;\n                    }\n                case 10: {\n                        if (!(message.doubleData && message.doubleData.length))\n                            message.doubleData = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.doubleData.push(reader.double());\n                        } else\n                            message.doubleData.push(reader.double());\n                        break;\n                    }\n                case 11: {\n                        if (!(message.uint64Data && message.uint64Data.length))\n                            message.uint64Data = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.uint64Data.push(reader.uint64());\n                        } else\n                            message.uint64Data.push(reader.uint64());\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorProto message.\n         * @function verify\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                if (!Array.isArray(message.dims))\n                    return \"dims: array expected\";\n                for (var i = 0; i < message.dims.length; ++i)\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\n                        return \"dims: integer|Long[] expected\";\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                if (!$util.isInteger(message.dataType))\n                    return \"dataType: integer expected\";\n            if (message.segment != null && message.hasOwnProperty(\"segment\")) {\n                var error = $root.onnx.TensorProto.Segment.verify(message.segment);\n                if (error)\n                    return \"segment.\" + error;\n            }\n            if (message.floatData != null && message.hasOwnProperty(\"floatData\")) {\n                if (!Array.isArray(message.floatData))\n                    return \"floatData: array expected\";\n                for (var i = 0; i < message.floatData.length; ++i)\n                    if (typeof message.floatData[i] !== \"number\")\n                        return \"floatData: number[] expected\";\n            }\n            if (message.int32Data != null && message.hasOwnProperty(\"int32Data\")) {\n                if (!Array.isArray(message.int32Data))\n                    return \"int32Data: array expected\";\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    if (!$util.isInteger(message.int32Data[i]))\n                        return \"int32Data: integer[] expected\";\n            }\n            if (message.stringData != null && message.hasOwnProperty(\"stringData\")) {\n                if (!Array.isArray(message.stringData))\n                    return \"stringData: array expected\";\n                for (var i = 0; i < message.stringData.length; ++i)\n                    if (!(message.stringData[i] && typeof message.stringData[i].length === \"number\" || $util.isString(message.stringData[i])))\n                        return \"stringData: buffer[] expected\";\n            }\n            if (message.int64Data != null && message.hasOwnProperty(\"int64Data\")) {\n                if (!Array.isArray(message.int64Data))\n                    return \"int64Data: array expected\";\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    if (!$util.isInteger(message.int64Data[i]) && !(message.int64Data[i] && $util.isInteger(message.int64Data[i].low) && $util.isInteger(message.int64Data[i].high)))\n                        return \"int64Data: integer|Long[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                if (!(message.rawData && typeof message.rawData.length === \"number\" || $util.isString(message.rawData)))\n                    return \"rawData: buffer expected\";\n            if (message.externalData != null && message.hasOwnProperty(\"externalData\")) {\n                if (!Array.isArray(message.externalData))\n                    return \"externalData: array expected\";\n                for (var i = 0; i < message.externalData.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.externalData[i]);\n                    if (error)\n                        return \"externalData.\" + error;\n                }\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                switch (message.dataLocation) {\n                default:\n                    return \"dataLocation: enum value expected\";\n                case 0:\n                case 1:\n                    break;\n                }\n            if (message.doubleData != null && message.hasOwnProperty(\"doubleData\")) {\n                if (!Array.isArray(message.doubleData))\n                    return \"doubleData: array expected\";\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    if (typeof message.doubleData[i] !== \"number\")\n                        return \"doubleData: number[] expected\";\n            }\n            if (message.uint64Data != null && message.hasOwnProperty(\"uint64Data\")) {\n                if (!Array.isArray(message.uint64Data))\n                    return \"uint64Data: array expected\";\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    if (!$util.isInteger(message.uint64Data[i]) && !(message.uint64Data[i] && $util.isInteger(message.uint64Data[i].low) && $util.isInteger(message.uint64Data[i].high)))\n                        return \"uint64Data: integer|Long[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorProto} TensorProto\n         */\n        TensorProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorProto)\n                return object;\n            var message = new $root.onnx.TensorProto();\n            if (object.dims) {\n                if (!Array.isArray(object.dims))\n                    throw TypeError(\".onnx.TensorProto.dims: array expected\");\n                message.dims = [];\n                for (var i = 0; i < object.dims.length; ++i)\n                    if ($util.Long)\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n                    else if (typeof object.dims[i] === \"string\")\n                        message.dims[i] = parseInt(object.dims[i], 10);\n                    else if (typeof object.dims[i] === \"number\")\n                        message.dims[i] = object.dims[i];\n                    else if (typeof object.dims[i] === \"object\")\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n            }\n            if (object.dataType != null)\n                message.dataType = object.dataType | 0;\n            if (object.segment != null) {\n                if (typeof object.segment !== \"object\")\n                    throw TypeError(\".onnx.TensorProto.segment: object expected\");\n                message.segment = $root.onnx.TensorProto.Segment.fromObject(object.segment);\n            }\n            if (object.floatData) {\n                if (!Array.isArray(object.floatData))\n                    throw TypeError(\".onnx.TensorProto.floatData: array expected\");\n                message.floatData = [];\n                for (var i = 0; i < object.floatData.length; ++i)\n                    message.floatData[i] = Number(object.floatData[i]);\n            }\n            if (object.int32Data) {\n                if (!Array.isArray(object.int32Data))\n                    throw TypeError(\".onnx.TensorProto.int32Data: array expected\");\n                message.int32Data = [];\n                for (var i = 0; i < object.int32Data.length; ++i)\n                    message.int32Data[i] = object.int32Data[i] | 0;\n            }\n            if (object.stringData) {\n                if (!Array.isArray(object.stringData))\n                    throw TypeError(\".onnx.TensorProto.stringData: array expected\");\n                message.stringData = [];\n                for (var i = 0; i < object.stringData.length; ++i)\n                    if (typeof object.stringData[i] === \"string\")\n                        $util.base64.decode(object.stringData[i], message.stringData[i] = $util.newBuffer($util.base64.length(object.stringData[i])), 0);\n                    else if (object.stringData[i].length >= 0)\n                        message.stringData[i] = object.stringData[i];\n            }\n            if (object.int64Data) {\n                if (!Array.isArray(object.int64Data))\n                    throw TypeError(\".onnx.TensorProto.int64Data: array expected\");\n                message.int64Data = [];\n                for (var i = 0; i < object.int64Data.length; ++i)\n                    if ($util.Long)\n                        (message.int64Data[i] = $util.Long.fromValue(object.int64Data[i])).unsigned = false;\n                    else if (typeof object.int64Data[i] === \"string\")\n                        message.int64Data[i] = parseInt(object.int64Data[i], 10);\n                    else if (typeof object.int64Data[i] === \"number\")\n                        message.int64Data[i] = object.int64Data[i];\n                    else if (typeof object.int64Data[i] === \"object\")\n                        message.int64Data[i] = new $util.LongBits(object.int64Data[i].low >>> 0, object.int64Data[i].high >>> 0).toNumber();\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.rawData != null)\n                if (typeof object.rawData === \"string\")\n                    $util.base64.decode(object.rawData, message.rawData = $util.newBuffer($util.base64.length(object.rawData)), 0);\n                else if (object.rawData.length >= 0)\n                    message.rawData = object.rawData;\n            if (object.externalData) {\n                if (!Array.isArray(object.externalData))\n                    throw TypeError(\".onnx.TensorProto.externalData: array expected\");\n                message.externalData = [];\n                for (var i = 0; i < object.externalData.length; ++i) {\n                    if (typeof object.externalData[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorProto.externalData: object expected\");\n                    message.externalData[i] = $root.onnx.StringStringEntryProto.fromObject(object.externalData[i]);\n                }\n            }\n            switch (object.dataLocation) {\n            default:\n                if (typeof object.dataLocation === \"number\") {\n                    message.dataLocation = object.dataLocation;\n                    break;\n                }\n                break;\n            case \"DEFAULT\":\n            case 0:\n                message.dataLocation = 0;\n                break;\n            case \"EXTERNAL\":\n            case 1:\n                message.dataLocation = 1;\n                break;\n            }\n            if (object.doubleData) {\n                if (!Array.isArray(object.doubleData))\n                    throw TypeError(\".onnx.TensorProto.doubleData: array expected\");\n                message.doubleData = [];\n                for (var i = 0; i < object.doubleData.length; ++i)\n                    message.doubleData[i] = Number(object.doubleData[i]);\n            }\n            if (object.uint64Data) {\n                if (!Array.isArray(object.uint64Data))\n                    throw TypeError(\".onnx.TensorProto.uint64Data: array expected\");\n                message.uint64Data = [];\n                for (var i = 0; i < object.uint64Data.length; ++i)\n                    if ($util.Long)\n                        (message.uint64Data[i] = $util.Long.fromValue(object.uint64Data[i])).unsigned = true;\n                    else if (typeof object.uint64Data[i] === \"string\")\n                        message.uint64Data[i] = parseInt(object.uint64Data[i], 10);\n                    else if (typeof object.uint64Data[i] === \"number\")\n                        message.uint64Data[i] = object.uint64Data[i];\n                    else if (typeof object.uint64Data[i] === \"object\")\n                        message.uint64Data[i] = new $util.LongBits(object.uint64Data[i].low >>> 0, object.uint64Data[i].high >>> 0).toNumber(true);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.TensorProto} message TensorProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.dims = [];\n                object.floatData = [];\n                object.int32Data = [];\n                object.stringData = [];\n                object.int64Data = [];\n                object.doubleData = [];\n                object.uint64Data = [];\n                object.externalData = [];\n            }\n            if (options.defaults) {\n                object.dataType = 0;\n                object.segment = null;\n                object.name = \"\";\n                if (options.bytes === String)\n                    object.rawData = \"\";\n                else {\n                    object.rawData = [];\n                    if (options.bytes !== Array)\n                        object.rawData = $util.newBuffer(object.rawData);\n                }\n                object.docString = \"\";\n                object.dataLocation = options.enums === String ? \"DEFAULT\" : 0;\n            }\n            if (message.dims && message.dims.length) {\n                object.dims = [];\n                for (var j = 0; j < message.dims.length; ++j)\n                    if (typeof message.dims[j] === \"number\")\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n                    else\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                object.dataType = message.dataType;\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                object.segment = $root.onnx.TensorProto.Segment.toObject(message.segment, options);\n            if (message.floatData && message.floatData.length) {\n                object.floatData = [];\n                for (var j = 0; j < message.floatData.length; ++j)\n                    object.floatData[j] = options.json && !isFinite(message.floatData[j]) ? String(message.floatData[j]) : message.floatData[j];\n            }\n            if (message.int32Data && message.int32Data.length) {\n                object.int32Data = [];\n                for (var j = 0; j < message.int32Data.length; ++j)\n                    object.int32Data[j] = message.int32Data[j];\n            }\n            if (message.stringData && message.stringData.length) {\n                object.stringData = [];\n                for (var j = 0; j < message.stringData.length; ++j)\n                    object.stringData[j] = options.bytes === String ? $util.base64.encode(message.stringData[j], 0, message.stringData[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.stringData[j]) : message.stringData[j];\n            }\n            if (message.int64Data && message.int64Data.length) {\n                object.int64Data = [];\n                for (var j = 0; j < message.int64Data.length; ++j)\n                    if (typeof message.int64Data[j] === \"number\")\n                        object.int64Data[j] = options.longs === String ? String(message.int64Data[j]) : message.int64Data[j];\n                    else\n                        object.int64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.int64Data[j]) : options.longs === Number ? new $util.LongBits(message.int64Data[j].low >>> 0, message.int64Data[j].high >>> 0).toNumber() : message.int64Data[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                object.rawData = options.bytes === String ? $util.base64.encode(message.rawData, 0, message.rawData.length) : options.bytes === Array ? Array.prototype.slice.call(message.rawData) : message.rawData;\n            if (message.doubleData && message.doubleData.length) {\n                object.doubleData = [];\n                for (var j = 0; j < message.doubleData.length; ++j)\n                    object.doubleData[j] = options.json && !isFinite(message.doubleData[j]) ? String(message.doubleData[j]) : message.doubleData[j];\n            }\n            if (message.uint64Data && message.uint64Data.length) {\n                object.uint64Data = [];\n                for (var j = 0; j < message.uint64Data.length; ++j)\n                    if (typeof message.uint64Data[j] === \"number\")\n                        object.uint64Data[j] = options.longs === String ? String(message.uint64Data[j]) : message.uint64Data[j];\n                    else\n                        object.uint64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.uint64Data[j]) : options.longs === Number ? new $util.LongBits(message.uint64Data[j].low >>> 0, message.uint64Data[j].high >>> 0).toNumber(true) : message.uint64Data[j];\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.externalData && message.externalData.length) {\n                object.externalData = [];\n                for (var j = 0; j < message.externalData.length; ++j)\n                    object.externalData[j] = $root.onnx.StringStringEntryProto.toObject(message.externalData[j], options);\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                object.dataLocation = options.enums === String ? $root.onnx.TensorProto.DataLocation[message.dataLocation] === undefined ? message.dataLocation : $root.onnx.TensorProto.DataLocation[message.dataLocation] : message.dataLocation;\n            return object;\n        };\n\n        /**\n         * Converts this TensorProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TensorProto\n         * @function getTypeUrl\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TensorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.TensorProto\";\n        };\n\n        /**\n         * DataType enum.\n         * @name onnx.TensorProto.DataType\n         * @enum {number}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} UINT8=2 UINT8 value\n         * @property {number} INT8=3 INT8 value\n         * @property {number} UINT16=4 UINT16 value\n         * @property {number} INT16=5 INT16 value\n         * @property {number} INT32=6 INT32 value\n         * @property {number} INT64=7 INT64 value\n         * @property {number} STRING=8 STRING value\n         * @property {number} BOOL=9 BOOL value\n         * @property {number} FLOAT16=10 FLOAT16 value\n         * @property {number} DOUBLE=11 DOUBLE value\n         * @property {number} UINT32=12 UINT32 value\n         * @property {number} UINT64=13 UINT64 value\n         * @property {number} COMPLEX64=14 COMPLEX64 value\n         * @property {number} COMPLEX128=15 COMPLEX128 value\n         * @property {number} BFLOAT16=16 BFLOAT16 value\n         * @property {number} FLOAT8E4M3FN=17 FLOAT8E4M3FN value\n         * @property {number} FLOAT8E4M3FNUZ=18 FLOAT8E4M3FNUZ value\n         * @property {number} FLOAT8E5M2=19 FLOAT8E5M2 value\n         * @property {number} FLOAT8E5M2FNUZ=20 FLOAT8E5M2FNUZ value\n         */\n        TensorProto.DataType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"UINT8\"] = 2;\n            values[valuesById[3] = \"INT8\"] = 3;\n            values[valuesById[4] = \"UINT16\"] = 4;\n            values[valuesById[5] = \"INT16\"] = 5;\n            values[valuesById[6] = \"INT32\"] = 6;\n            values[valuesById[7] = \"INT64\"] = 7;\n            values[valuesById[8] = \"STRING\"] = 8;\n            values[valuesById[9] = \"BOOL\"] = 9;\n            values[valuesById[10] = \"FLOAT16\"] = 10;\n            values[valuesById[11] = \"DOUBLE\"] = 11;\n            values[valuesById[12] = \"UINT32\"] = 12;\n            values[valuesById[13] = \"UINT64\"] = 13;\n            values[valuesById[14] = \"COMPLEX64\"] = 14;\n            values[valuesById[15] = \"COMPLEX128\"] = 15;\n            values[valuesById[16] = \"BFLOAT16\"] = 16;\n            values[valuesById[17] = \"FLOAT8E4M3FN\"] = 17;\n            values[valuesById[18] = \"FLOAT8E4M3FNUZ\"] = 18;\n            values[valuesById[19] = \"FLOAT8E5M2\"] = 19;\n            values[valuesById[20] = \"FLOAT8E5M2FNUZ\"] = 20;\n            return values;\n        })();\n\n        TensorProto.Segment = (function() {\n\n            /**\n             * Properties of a Segment.\n             * @memberof onnx.TensorProto\n             * @interface ISegment\n             * @property {number|Long|null} [begin] Segment begin\n             * @property {number|Long|null} [end] Segment end\n             */\n\n            /**\n             * Constructs a new Segment.\n             * @memberof onnx.TensorProto\n             * @classdesc Represents a Segment.\n             * @implements ISegment\n             * @constructor\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             */\n            function Segment(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Segment begin.\n             * @member {number|Long} begin\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.begin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Segment end.\n             * @member {number|Long} end\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.end = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Creates a new Segment instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             * @returns {onnx.TensorProto.Segment} Segment instance\n             */\n            Segment.create = function create(properties) {\n                return new Segment(properties);\n            };\n\n            /**\n             * Encodes the specified Segment message. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.begin != null && Object.hasOwnProperty.call(message, \"begin\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.begin);\n                if (message.end != null && Object.hasOwnProperty.call(message, \"end\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.end);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Segment message, length delimited. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto.Segment();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.begin = reader.int64();\n                            break;\n                        }\n                    case 2: {\n                            message.end = reader.int64();\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Segment message.\n             * @function verify\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Segment.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (!$util.isInteger(message.begin) && !(message.begin && $util.isInteger(message.begin.low) && $util.isInteger(message.begin.high)))\n                        return \"begin: integer|Long expected\";\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (!$util.isInteger(message.end) && !(message.end && $util.isInteger(message.end.low) && $util.isInteger(message.end.high)))\n                        return \"end: integer|Long expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Segment message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorProto.Segment} Segment\n             */\n            Segment.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorProto.Segment)\n                    return object;\n                var message = new $root.onnx.TensorProto.Segment();\n                if (object.begin != null)\n                    if ($util.Long)\n                        (message.begin = $util.Long.fromValue(object.begin)).unsigned = false;\n                    else if (typeof object.begin === \"string\")\n                        message.begin = parseInt(object.begin, 10);\n                    else if (typeof object.begin === \"number\")\n                        message.begin = object.begin;\n                    else if (typeof object.begin === \"object\")\n                        message.begin = new $util.LongBits(object.begin.low >>> 0, object.begin.high >>> 0).toNumber();\n                if (object.end != null)\n                    if ($util.Long)\n                        (message.end = $util.Long.fromValue(object.end)).unsigned = false;\n                    else if (typeof object.end === \"string\")\n                        message.end = parseInt(object.end, 10);\n                    else if (typeof object.end === \"number\")\n                        message.end = object.end;\n                    else if (typeof object.end === \"object\")\n                        message.end = new $util.LongBits(object.end.low >>> 0, object.end.high >>> 0).toNumber();\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Segment message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.Segment} message Segment\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Segment.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.begin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.begin = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.end = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.end = options.longs === String ? \"0\" : 0;\n                }\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (typeof message.begin === \"number\")\n                        object.begin = options.longs === String ? String(message.begin) : message.begin;\n                    else\n                        object.begin = options.longs === String ? $util.Long.prototype.toString.call(message.begin) : options.longs === Number ? new $util.LongBits(message.begin.low >>> 0, message.begin.high >>> 0).toNumber() : message.begin;\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (typeof message.end === \"number\")\n                        object.end = options.longs === String ? String(message.end) : message.end;\n                    else\n                        object.end = options.longs === String ? $util.Long.prototype.toString.call(message.end) : options.longs === Number ? new $util.LongBits(message.end.low >>> 0, message.end.high >>> 0).toNumber() : message.end;\n                return object;\n            };\n\n            /**\n             * Converts this Segment to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Segment.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Segment\n             * @function getTypeUrl\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Segment.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TensorProto.Segment\";\n            };\n\n            return Segment;\n        })();\n\n        /**\n         * DataLocation enum.\n         * @name onnx.TensorProto.DataLocation\n         * @enum {number}\n         * @property {number} DEFAULT=0 DEFAULT value\n         * @property {number} EXTERNAL=1 EXTERNAL value\n         */\n        TensorProto.DataLocation = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"DEFAULT\"] = 0;\n            values[valuesById[1] = \"EXTERNAL\"] = 1;\n            return values;\n        })();\n\n        return TensorProto;\n    })();\n\n    onnx.SparseTensorProto = (function() {\n\n        /**\n         * Properties of a SparseTensorProto.\n         * @memberof onnx\n         * @interface ISparseTensorProto\n         * @property {onnx.ITensorProto|null} [values] SparseTensorProto values\n         * @property {onnx.ITensorProto|null} [indices] SparseTensorProto indices\n         * @property {Array.<number|Long>|null} [dims] SparseTensorProto dims\n         */\n\n        /**\n         * Constructs a new SparseTensorProto.\n         * @memberof onnx\n         * @classdesc Represents a SparseTensorProto.\n         * @implements ISparseTensorProto\n         * @constructor\n         * @param {onnx.ISparseTensorProto=} [properties] Properties to set\n         */\n        function SparseTensorProto(properties) {\n            this.dims = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * SparseTensorProto values.\n         * @member {onnx.ITensorProto|null|undefined} values\n         * @memberof onnx.SparseTensorProto\n         * @instance\n         */\n        SparseTensorProto.prototype.values = null;\n\n        /**\n         * SparseTensorProto indices.\n         * @member {onnx.ITensorProto|null|undefined} indices\n         * @memberof onnx.SparseTensorProto\n         * @instance\n         */\n        SparseTensorProto.prototype.indices = null;\n\n        /**\n         * SparseTensorProto dims.\n         * @member {Array.<number|Long>} dims\n         * @memberof onnx.SparseTensorProto\n         * @instance\n         */\n        SparseTensorProto.prototype.dims = $util.emptyArray;\n\n        /**\n         * Creates a new SparseTensorProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {onnx.ISparseTensorProto=} [properties] Properties to set\n         * @returns {onnx.SparseTensorProto} SparseTensorProto instance\n         */\n        SparseTensorProto.create = function create(properties) {\n            return new SparseTensorProto(properties);\n        };\n\n        /**\n         * Encodes the specified SparseTensorProto message. Does not implicitly {@link onnx.SparseTensorProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {onnx.ISparseTensorProto} message SparseTensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SparseTensorProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.values != null && Object.hasOwnProperty.call(message, \"values\"))\n                $root.onnx.TensorProto.encode(message.values, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.indices != null && Object.hasOwnProperty.call(message, \"indices\"))\n                $root.onnx.TensorProto.encode(message.indices, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.dims != null && message.dims.length) {\n                writer.uint32(/* id 3, wireType 2 =*/26).fork();\n                for (var i = 0; i < message.dims.length; ++i)\n                    writer.int64(message.dims[i]);\n                writer.ldelim();\n            }\n            return writer;\n        };\n\n        /**\n         * Encodes the specified SparseTensorProto message, length delimited. Does not implicitly {@link onnx.SparseTensorProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {onnx.ISparseTensorProto} message SparseTensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SparseTensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a SparseTensorProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.SparseTensorProto} SparseTensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SparseTensorProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.SparseTensorProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.values = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 2: {\n                        message.indices = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 3: {\n                        if (!(message.dims && message.dims.length))\n                            message.dims = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.dims.push(reader.int64());\n                        } else\n                            message.dims.push(reader.int64());\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a SparseTensorProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.SparseTensorProto} SparseTensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SparseTensorProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a SparseTensorProto message.\n         * @function verify\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        SparseTensorProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.values != null && message.hasOwnProperty(\"values\")) {\n                var error = $root.onnx.TensorProto.verify(message.values);\n                if (error)\n                    return \"values.\" + error;\n            }\n            if (message.indices != null && message.hasOwnProperty(\"indices\")) {\n                var error = $root.onnx.TensorProto.verify(message.indices);\n                if (error)\n                    return \"indices.\" + error;\n            }\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                if (!Array.isArray(message.dims))\n                    return \"dims: array expected\";\n                for (var i = 0; i < message.dims.length; ++i)\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\n                        return \"dims: integer|Long[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a SparseTensorProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.SparseTensorProto} SparseTensorProto\n         */\n        SparseTensorProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.SparseTensorProto)\n                return object;\n            var message = new $root.onnx.SparseTensorProto();\n            if (object.values != null) {\n                if (typeof object.values !== \"object\")\n                    throw TypeError(\".onnx.SparseTensorProto.values: object expected\");\n                message.values = $root.onnx.TensorProto.fromObject(object.values);\n            }\n            if (object.indices != null) {\n                if (typeof object.indices !== \"object\")\n                    throw TypeError(\".onnx.SparseTensorProto.indices: object expected\");\n                message.indices = $root.onnx.TensorProto.fromObject(object.indices);\n            }\n            if (object.dims) {\n                if (!Array.isArray(object.dims))\n                    throw TypeError(\".onnx.SparseTensorProto.dims: array expected\");\n                message.dims = [];\n                for (var i = 0; i < object.dims.length; ++i)\n                    if ($util.Long)\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n                    else if (typeof object.dims[i] === \"string\")\n                        message.dims[i] = parseInt(object.dims[i], 10);\n                    else if (typeof object.dims[i] === \"number\")\n                        message.dims[i] = object.dims[i];\n                    else if (typeof object.dims[i] === \"object\")\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a SparseTensorProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {onnx.SparseTensorProto} message SparseTensorProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        SparseTensorProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.dims = [];\n            if (options.defaults) {\n                object.values = null;\n                object.indices = null;\n            }\n            if (message.values != null && message.hasOwnProperty(\"values\"))\n                object.values = $root.onnx.TensorProto.toObject(message.values, options);\n            if (message.indices != null && message.hasOwnProperty(\"indices\"))\n                object.indices = $root.onnx.TensorProto.toObject(message.indices, options);\n            if (message.dims && message.dims.length) {\n                object.dims = [];\n                for (var j = 0; j < message.dims.length; ++j)\n                    if (typeof message.dims[j] === \"number\")\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n                    else\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\n            }\n            return object;\n        };\n\n        /**\n         * Converts this SparseTensorProto to JSON.\n         * @function toJSON\n         * @memberof onnx.SparseTensorProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        SparseTensorProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for SparseTensorProto\n         * @function getTypeUrl\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        SparseTensorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.SparseTensorProto\";\n        };\n\n        return SparseTensorProto;\n    })();\n\n    onnx.TensorShapeProto = (function() {\n\n        /**\n         * Properties of a TensorShapeProto.\n         * @memberof onnx\n         * @interface ITensorShapeProto\n         * @property {Array.<onnx.TensorShapeProto.IDimension>|null} [dim] TensorShapeProto dim\n         */\n\n        /**\n         * Constructs a new TensorShapeProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorShapeProto.\n         * @implements ITensorShapeProto\n         * @constructor\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         */\n        function TensorShapeProto(properties) {\n            this.dim = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorShapeProto dim.\n         * @member {Array.<onnx.TensorShapeProto.IDimension>} dim\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         */\n        TensorShapeProto.prototype.dim = $util.emptyArray;\n\n        /**\n         * Creates a new TensorShapeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         * @returns {onnx.TensorShapeProto} TensorShapeProto instance\n         */\n        TensorShapeProto.create = function create(properties) {\n            return new TensorShapeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dim != null && message.dim.length)\n                for (var i = 0; i < message.dim.length; ++i)\n                    $root.onnx.TensorShapeProto.Dimension.encode(message.dim[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        if (!(message.dim && message.dim.length))\n                            message.dim = [];\n                        message.dim.push($root.onnx.TensorShapeProto.Dimension.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorShapeProto message.\n         * @function verify\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorShapeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dim != null && message.hasOwnProperty(\"dim\")) {\n                if (!Array.isArray(message.dim))\n                    return \"dim: array expected\";\n                for (var i = 0; i < message.dim.length; ++i) {\n                    var error = $root.onnx.TensorShapeProto.Dimension.verify(message.dim[i]);\n                    if (error)\n                        return \"dim.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorShapeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         */\n        TensorShapeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorShapeProto)\n                return object;\n            var message = new $root.onnx.TensorShapeProto();\n            if (object.dim) {\n                if (!Array.isArray(object.dim))\n                    throw TypeError(\".onnx.TensorShapeProto.dim: array expected\");\n                message.dim = [];\n                for (var i = 0; i < object.dim.length; ++i) {\n                    if (typeof object.dim[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorShapeProto.dim: object expected\");\n                    message.dim[i] = $root.onnx.TensorShapeProto.Dimension.fromObject(object.dim[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorShapeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.TensorShapeProto} message TensorShapeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorShapeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.dim = [];\n            if (message.dim && message.dim.length) {\n                object.dim = [];\n                for (var j = 0; j < message.dim.length; ++j)\n                    object.dim[j] = $root.onnx.TensorShapeProto.Dimension.toObject(message.dim[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorShapeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorShapeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TensorShapeProto\n         * @function getTypeUrl\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TensorShapeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.TensorShapeProto\";\n        };\n\n        TensorShapeProto.Dimension = (function() {\n\n            /**\n             * Properties of a Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @interface IDimension\n             * @property {number|Long|null} [dimValue] Dimension dimValue\n             * @property {string|null} [dimParam] Dimension dimParam\n             * @property {string|null} [denotation] Dimension denotation\n             */\n\n            /**\n             * Constructs a new Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @classdesc Represents a Dimension.\n             * @implements IDimension\n             * @constructor\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             */\n            function Dimension(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Dimension dimValue.\n             * @member {number|Long|null|undefined} dimValue\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimValue = null;\n\n            /**\n             * Dimension dimParam.\n             * @member {string|null|undefined} dimParam\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimParam = null;\n\n            /**\n             * Dimension denotation.\n             * @member {string} denotation\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.denotation = \"\";\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * Dimension value.\n             * @member {\"dimValue\"|\"dimParam\"|undefined} value\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Object.defineProperty(Dimension.prototype, \"value\", {\n                get: $util.oneOfGetter($oneOfFields = [\"dimValue\", \"dimParam\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new Dimension instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension instance\n             */\n            Dimension.create = function create(properties) {\n                return new Dimension(properties);\n            };\n\n            /**\n             * Encodes the specified Dimension message. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.dimValue != null && Object.hasOwnProperty.call(message, \"dimValue\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.dimValue);\n                if (message.dimParam != null && Object.hasOwnProperty.call(message, \"dimParam\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.dimParam);\n                if (message.denotation != null && Object.hasOwnProperty.call(message, \"denotation\"))\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.denotation);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Dimension message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto.Dimension();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.dimValue = reader.int64();\n                            break;\n                        }\n                    case 2: {\n                            message.dimParam = reader.string();\n                            break;\n                        }\n                    case 3: {\n                            message.denotation = reader.string();\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Dimension message.\n             * @function verify\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Dimension.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    properties.value = 1;\n                    if (!$util.isInteger(message.dimValue) && !(message.dimValue && $util.isInteger(message.dimValue.low) && $util.isInteger(message.dimValue.high)))\n                        return \"dimValue: integer|Long expected\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    if (properties.value === 1)\n                        return \"value: multiple values\";\n                    properties.value = 1;\n                    if (!$util.isString(message.dimParam))\n                        return \"dimParam: string expected\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    if (!$util.isString(message.denotation))\n                        return \"denotation: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Dimension message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             */\n            Dimension.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorShapeProto.Dimension)\n                    return object;\n                var message = new $root.onnx.TensorShapeProto.Dimension();\n                if (object.dimValue != null)\n                    if ($util.Long)\n                        (message.dimValue = $util.Long.fromValue(object.dimValue)).unsigned = false;\n                    else if (typeof object.dimValue === \"string\")\n                        message.dimValue = parseInt(object.dimValue, 10);\n                    else if (typeof object.dimValue === \"number\")\n                        message.dimValue = object.dimValue;\n                    else if (typeof object.dimValue === \"object\")\n                        message.dimValue = new $util.LongBits(object.dimValue.low >>> 0, object.dimValue.high >>> 0).toNumber();\n                if (object.dimParam != null)\n                    message.dimParam = String(object.dimParam);\n                if (object.denotation != null)\n                    message.denotation = String(object.denotation);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Dimension message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.Dimension} message Dimension\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Dimension.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.denotation = \"\";\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    if (typeof message.dimValue === \"number\")\n                        object.dimValue = options.longs === String ? String(message.dimValue) : message.dimValue;\n                    else\n                        object.dimValue = options.longs === String ? $util.Long.prototype.toString.call(message.dimValue) : options.longs === Number ? new $util.LongBits(message.dimValue.low >>> 0, message.dimValue.high >>> 0).toNumber() : message.dimValue;\n                    if (options.oneofs)\n                        object.value = \"dimValue\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    object.dimParam = message.dimParam;\n                    if (options.oneofs)\n                        object.value = \"dimParam\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    object.denotation = message.denotation;\n                return object;\n            };\n\n            /**\n             * Converts this Dimension to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Dimension.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Dimension\n             * @function getTypeUrl\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Dimension.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TensorShapeProto.Dimension\";\n            };\n\n            return Dimension;\n        })();\n\n        return TensorShapeProto;\n    })();\n\n    onnx.TypeProto = (function() {\n\n        /**\n         * Properties of a TypeProto.\n         * @memberof onnx\n         * @interface ITypeProto\n         * @property {onnx.TypeProto.ITensor|null} [tensorType] TypeProto tensorType\n         * @property {onnx.TypeProto.ISequence|null} [sequenceType] TypeProto sequenceType\n         * @property {onnx.TypeProto.IMap|null} [mapType] TypeProto mapType\n         * @property {onnx.TypeProto.IOptional|null} [optionalType] TypeProto optionalType\n         * @property {onnx.TypeProto.ISparseTensor|null} [sparseTensorType] TypeProto sparseTensorType\n         * @property {string|null} [denotation] TypeProto denotation\n         */\n\n        /**\n         * Constructs a new TypeProto.\n         * @memberof onnx\n         * @classdesc Represents a TypeProto.\n         * @implements ITypeProto\n         * @constructor\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         */\n        function TypeProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TypeProto tensorType.\n         * @member {onnx.TypeProto.ITensor|null|undefined} tensorType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.tensorType = null;\n\n        /**\n         * TypeProto sequenceType.\n         * @member {onnx.TypeProto.ISequence|null|undefined} sequenceType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.sequenceType = null;\n\n        /**\n         * TypeProto mapType.\n         * @member {onnx.TypeProto.IMap|null|undefined} mapType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.mapType = null;\n\n        /**\n         * TypeProto optionalType.\n         * @member {onnx.TypeProto.IOptional|null|undefined} optionalType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.optionalType = null;\n\n        /**\n         * TypeProto sparseTensorType.\n         * @member {onnx.TypeProto.ISparseTensor|null|undefined} sparseTensorType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.sparseTensorType = null;\n\n        /**\n         * TypeProto denotation.\n         * @member {string} denotation\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.denotation = \"\";\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * TypeProto value.\n         * @member {\"tensorType\"|\"sequenceType\"|\"mapType\"|\"optionalType\"|\"sparseTensorType\"|undefined} value\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        Object.defineProperty(TypeProto.prototype, \"value\", {\n            get: $util.oneOfGetter($oneOfFields = [\"tensorType\", \"sequenceType\", \"mapType\", \"optionalType\", \"sparseTensorType\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new TypeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         * @returns {onnx.TypeProto} TypeProto instance\n         */\n        TypeProto.create = function create(properties) {\n            return new TypeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TypeProto message. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorType != null && Object.hasOwnProperty.call(message, \"tensorType\"))\n                $root.onnx.TypeProto.Tensor.encode(message.tensorType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.sequenceType != null && Object.hasOwnProperty.call(message, \"sequenceType\"))\n                $root.onnx.TypeProto.Sequence.encode(message.sequenceType, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            if (message.mapType != null && Object.hasOwnProperty.call(message, \"mapType\"))\n                $root.onnx.TypeProto.Map.encode(message.mapType, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.denotation != null && Object.hasOwnProperty.call(message, \"denotation\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.denotation);\n            if (message.sparseTensorType != null && Object.hasOwnProperty.call(message, \"sparseTensorType\"))\n                $root.onnx.TypeProto.SparseTensor.encode(message.sparseTensorType, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.optionalType != null && Object.hasOwnProperty.call(message, \"optionalType\"))\n                $root.onnx.TypeProto.Optional.encode(message.optionalType, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TypeProto message, length delimited. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.tensorType = $root.onnx.TypeProto.Tensor.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 4: {\n                        message.sequenceType = $root.onnx.TypeProto.Sequence.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 5: {\n                        message.mapType = $root.onnx.TypeProto.Map.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 9: {\n                        message.optionalType = $root.onnx.TypeProto.Optional.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 8: {\n                        message.sparseTensorType = $root.onnx.TypeProto.SparseTensor.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 6: {\n                        message.denotation = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TypeProto message.\n         * @function verify\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TypeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Tensor.verify(message.tensorType);\n                    if (error)\n                        return \"tensorType.\" + error;\n                }\n            }\n            if (message.sequenceType != null && message.hasOwnProperty(\"sequenceType\")) {\n                if (properties.value === 1)\n                    return \"value: multiple values\";\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Sequence.verify(message.sequenceType);\n                    if (error)\n                        return \"sequenceType.\" + error;\n                }\n            }\n            if (message.mapType != null && message.hasOwnProperty(\"mapType\")) {\n                if (properties.value === 1)\n                    return \"value: multiple values\";\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Map.verify(message.mapType);\n                    if (error)\n                        return \"mapType.\" + error;\n                }\n            }\n            if (message.optionalType != null && message.hasOwnProperty(\"optionalType\")) {\n                if (properties.value === 1)\n                    return \"value: multiple values\";\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Optional.verify(message.optionalType);\n                    if (error)\n                        return \"optionalType.\" + error;\n                }\n            }\n            if (message.sparseTensorType != null && message.hasOwnProperty(\"sparseTensorType\")) {\n                if (properties.value === 1)\n                    return \"value: multiple values\";\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.SparseTensor.verify(message.sparseTensorType);\n                    if (error)\n                        return \"sparseTensorType.\" + error;\n                }\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                if (!$util.isString(message.denotation))\n                    return \"denotation: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a TypeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TypeProto} TypeProto\n         */\n        TypeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TypeProto)\n                return object;\n            var message = new $root.onnx.TypeProto();\n            if (object.tensorType != null) {\n                if (typeof object.tensorType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.tensorType: object expected\");\n                message.tensorType = $root.onnx.TypeProto.Tensor.fromObject(object.tensorType);\n            }\n            if (object.sequenceType != null) {\n                if (typeof object.sequenceType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.sequenceType: object expected\");\n                message.sequenceType = $root.onnx.TypeProto.Sequence.fromObject(object.sequenceType);\n            }\n            if (object.mapType != null) {\n                if (typeof object.mapType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.mapType: object expected\");\n                message.mapType = $root.onnx.TypeProto.Map.fromObject(object.mapType);\n            }\n            if (object.optionalType != null) {\n                if (typeof object.optionalType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.optionalType: object expected\");\n                message.optionalType = $root.onnx.TypeProto.Optional.fromObject(object.optionalType);\n            }\n            if (object.sparseTensorType != null) {\n                if (typeof object.sparseTensorType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.sparseTensorType: object expected\");\n                message.sparseTensorType = $root.onnx.TypeProto.SparseTensor.fromObject(object.sparseTensorType);\n            }\n            if (object.denotation != null)\n                message.denotation = String(object.denotation);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TypeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.TypeProto} message TypeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TypeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.denotation = \"\";\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                object.tensorType = $root.onnx.TypeProto.Tensor.toObject(message.tensorType, options);\n                if (options.oneofs)\n                    object.value = \"tensorType\";\n            }\n            if (message.sequenceType != null && message.hasOwnProperty(\"sequenceType\")) {\n                object.sequenceType = $root.onnx.TypeProto.Sequence.toObject(message.sequenceType, options);\n                if (options.oneofs)\n                    object.value = \"sequenceType\";\n            }\n            if (message.mapType != null && message.hasOwnProperty(\"mapType\")) {\n                object.mapType = $root.onnx.TypeProto.Map.toObject(message.mapType, options);\n                if (options.oneofs)\n                    object.value = \"mapType\";\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                object.denotation = message.denotation;\n            if (message.sparseTensorType != null && message.hasOwnProperty(\"sparseTensorType\")) {\n                object.sparseTensorType = $root.onnx.TypeProto.SparseTensor.toObject(message.sparseTensorType, options);\n                if (options.oneofs)\n                    object.value = \"sparseTensorType\";\n            }\n            if (message.optionalType != null && message.hasOwnProperty(\"optionalType\")) {\n                object.optionalType = $root.onnx.TypeProto.Optional.toObject(message.optionalType, options);\n                if (options.oneofs)\n                    object.value = \"optionalType\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TypeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TypeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TypeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TypeProto\n         * @function getTypeUrl\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TypeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.TypeProto\";\n        };\n\n        TypeProto.Tensor = (function() {\n\n            /**\n             * Properties of a Tensor.\n             * @memberof onnx.TypeProto\n             * @interface ITensor\n             * @property {number|null} [elemType] Tensor elemType\n             * @property {onnx.ITensorShapeProto|null} [shape] Tensor shape\n             */\n\n            /**\n             * Constructs a new Tensor.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Tensor.\n             * @implements ITensor\n             * @constructor\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             */\n            function Tensor(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Tensor elemType.\n             * @member {number} elemType\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.elemType = 0;\n\n            /**\n             * Tensor shape.\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.shape = null;\n\n            /**\n             * Creates a new Tensor instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Tensor} Tensor instance\n             */\n            Tensor.create = function create(properties) {\n                return new Tensor(properties);\n            };\n\n            /**\n             * Encodes the specified Tensor message. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\n                if (message.shape != null && Object.hasOwnProperty.call(message, \"shape\"))\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Tensor message, length delimited. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Tensor();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.elemType = reader.int32();\n                            break;\n                        }\n                    case 2: {\n                            message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Tensor message.\n             * @function verify\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Tensor.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    if (!$util.isInteger(message.elemType))\n                        return \"elemType: integer expected\";\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\n                    if (error)\n                        return \"shape.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Tensor message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             */\n            Tensor.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Tensor)\n                    return object;\n                var message = new $root.onnx.TypeProto.Tensor();\n                if (object.elemType != null)\n                    message.elemType = object.elemType | 0;\n                if (object.shape != null) {\n                    if (typeof object.shape !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Tensor.shape: object expected\");\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Tensor message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.Tensor} message Tensor\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Tensor.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.elemType = 0;\n                    object.shape = null;\n                }\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = message.elemType;\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n                return object;\n            };\n\n            /**\n             * Converts this Tensor to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Tensor.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Tensor\n             * @function getTypeUrl\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Tensor.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TypeProto.Tensor\";\n            };\n\n            return Tensor;\n        })();\n\n        TypeProto.Sequence = (function() {\n\n            /**\n             * Properties of a Sequence.\n             * @memberof onnx.TypeProto\n             * @interface ISequence\n             * @property {onnx.ITypeProto|null} [elemType] Sequence elemType\n             */\n\n            /**\n             * Constructs a new Sequence.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Sequence.\n             * @implements ISequence\n             * @constructor\n             * @param {onnx.TypeProto.ISequence=} [properties] Properties to set\n             */\n            function Sequence(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Sequence elemType.\n             * @member {onnx.ITypeProto|null|undefined} elemType\n             * @memberof onnx.TypeProto.Sequence\n             * @instance\n             */\n            Sequence.prototype.elemType = null;\n\n            /**\n             * Creates a new Sequence instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {onnx.TypeProto.ISequence=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Sequence} Sequence instance\n             */\n            Sequence.create = function create(properties) {\n                return new Sequence(properties);\n            };\n\n            /**\n             * Encodes the specified Sequence message. Does not implicitly {@link onnx.TypeProto.Sequence.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {onnx.TypeProto.ISequence} message Sequence message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Sequence.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\n                    $root.onnx.TypeProto.encode(message.elemType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Sequence message, length delimited. Does not implicitly {@link onnx.TypeProto.Sequence.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {onnx.TypeProto.ISequence} message Sequence message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Sequence.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Sequence message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Sequence} Sequence\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Sequence.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Sequence();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.elemType = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Sequence message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Sequence} Sequence\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Sequence.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Sequence message.\n             * @function verify\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Sequence.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\")) {\n                    var error = $root.onnx.TypeProto.verify(message.elemType);\n                    if (error)\n                        return \"elemType.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Sequence message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Sequence} Sequence\n             */\n            Sequence.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Sequence)\n                    return object;\n                var message = new $root.onnx.TypeProto.Sequence();\n                if (object.elemType != null) {\n                    if (typeof object.elemType !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Sequence.elemType: object expected\");\n                    message.elemType = $root.onnx.TypeProto.fromObject(object.elemType);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Sequence message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {onnx.TypeProto.Sequence} message Sequence\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Sequence.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.elemType = null;\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = $root.onnx.TypeProto.toObject(message.elemType, options);\n                return object;\n            };\n\n            /**\n             * Converts this Sequence to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Sequence\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Sequence.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Sequence\n             * @function getTypeUrl\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Sequence.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TypeProto.Sequence\";\n            };\n\n            return Sequence;\n        })();\n\n        TypeProto.Map = (function() {\n\n            /**\n             * Properties of a Map.\n             * @memberof onnx.TypeProto\n             * @interface IMap\n             * @property {number|null} [keyType] Map keyType\n             * @property {onnx.ITypeProto|null} [valueType] Map valueType\n             */\n\n            /**\n             * Constructs a new Map.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Map.\n             * @implements IMap\n             * @constructor\n             * @param {onnx.TypeProto.IMap=} [properties] Properties to set\n             */\n            function Map(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Map keyType.\n             * @member {number} keyType\n             * @memberof onnx.TypeProto.Map\n             * @instance\n             */\n            Map.prototype.keyType = 0;\n\n            /**\n             * Map valueType.\n             * @member {onnx.ITypeProto|null|undefined} valueType\n             * @memberof onnx.TypeProto.Map\n             * @instance\n             */\n            Map.prototype.valueType = null;\n\n            /**\n             * Creates a new Map instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {onnx.TypeProto.IMap=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Map} Map instance\n             */\n            Map.create = function create(properties) {\n                return new Map(properties);\n            };\n\n            /**\n             * Encodes the specified Map message. Does not implicitly {@link onnx.TypeProto.Map.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {onnx.TypeProto.IMap} message Map message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Map.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.keyType != null && Object.hasOwnProperty.call(message, \"keyType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.keyType);\n                if (message.valueType != null && Object.hasOwnProperty.call(message, \"valueType\"))\n                    $root.onnx.TypeProto.encode(message.valueType, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Map message, length delimited. Does not implicitly {@link onnx.TypeProto.Map.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {onnx.TypeProto.IMap} message Map message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Map.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Map message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Map} Map\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Map.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Map();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.keyType = reader.int32();\n                            break;\n                        }\n                    case 2: {\n                            message.valueType = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Map message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Map} Map\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Map.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Map message.\n             * @function verify\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Map.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.keyType != null && message.hasOwnProperty(\"keyType\"))\n                    if (!$util.isInteger(message.keyType))\n                        return \"keyType: integer expected\";\n                if (message.valueType != null && message.hasOwnProperty(\"valueType\")) {\n                    var error = $root.onnx.TypeProto.verify(message.valueType);\n                    if (error)\n                        return \"valueType.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Map message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Map} Map\n             */\n            Map.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Map)\n                    return object;\n                var message = new $root.onnx.TypeProto.Map();\n                if (object.keyType != null)\n                    message.keyType = object.keyType | 0;\n                if (object.valueType != null) {\n                    if (typeof object.valueType !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Map.valueType: object expected\");\n                    message.valueType = $root.onnx.TypeProto.fromObject(object.valueType);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Map message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {onnx.TypeProto.Map} message Map\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Map.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.keyType = 0;\n                    object.valueType = null;\n                }\n                if (message.keyType != null && message.hasOwnProperty(\"keyType\"))\n                    object.keyType = message.keyType;\n                if (message.valueType != null && message.hasOwnProperty(\"valueType\"))\n                    object.valueType = $root.onnx.TypeProto.toObject(message.valueType, options);\n                return object;\n            };\n\n            /**\n             * Converts this Map to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Map\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Map.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Map\n             * @function getTypeUrl\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Map.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TypeProto.Map\";\n            };\n\n            return Map;\n        })();\n\n        TypeProto.Optional = (function() {\n\n            /**\n             * Properties of an Optional.\n             * @memberof onnx.TypeProto\n             * @interface IOptional\n             * @property {onnx.ITypeProto|null} [elemType] Optional elemType\n             */\n\n            /**\n             * Constructs a new Optional.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents an Optional.\n             * @implements IOptional\n             * @constructor\n             * @param {onnx.TypeProto.IOptional=} [properties] Properties to set\n             */\n            function Optional(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Optional elemType.\n             * @member {onnx.ITypeProto|null|undefined} elemType\n             * @memberof onnx.TypeProto.Optional\n             * @instance\n             */\n            Optional.prototype.elemType = null;\n\n            /**\n             * Creates a new Optional instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {onnx.TypeProto.IOptional=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Optional} Optional instance\n             */\n            Optional.create = function create(properties) {\n                return new Optional(properties);\n            };\n\n            /**\n             * Encodes the specified Optional message. Does not implicitly {@link onnx.TypeProto.Optional.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {onnx.TypeProto.IOptional} message Optional message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Optional.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\n                    $root.onnx.TypeProto.encode(message.elemType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Optional message, length delimited. Does not implicitly {@link onnx.TypeProto.Optional.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {onnx.TypeProto.IOptional} message Optional message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Optional.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes an Optional message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Optional} Optional\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Optional.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Optional();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.elemType = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes an Optional message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Optional} Optional\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Optional.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies an Optional message.\n             * @function verify\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Optional.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\")) {\n                    var error = $root.onnx.TypeProto.verify(message.elemType);\n                    if (error)\n                        return \"elemType.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates an Optional message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Optional} Optional\n             */\n            Optional.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Optional)\n                    return object;\n                var message = new $root.onnx.TypeProto.Optional();\n                if (object.elemType != null) {\n                    if (typeof object.elemType !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Optional.elemType: object expected\");\n                    message.elemType = $root.onnx.TypeProto.fromObject(object.elemType);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from an Optional message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {onnx.TypeProto.Optional} message Optional\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Optional.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.elemType = null;\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = $root.onnx.TypeProto.toObject(message.elemType, options);\n                return object;\n            };\n\n            /**\n             * Converts this Optional to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Optional\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Optional.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Optional\n             * @function getTypeUrl\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Optional.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TypeProto.Optional\";\n            };\n\n            return Optional;\n        })();\n\n        TypeProto.SparseTensor = (function() {\n\n            /**\n             * Properties of a SparseTensor.\n             * @memberof onnx.TypeProto\n             * @interface ISparseTensor\n             * @property {number|null} [elemType] SparseTensor elemType\n             * @property {onnx.ITensorShapeProto|null} [shape] SparseTensor shape\n             */\n\n            /**\n             * Constructs a new SparseTensor.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a SparseTensor.\n             * @implements ISparseTensor\n             * @constructor\n             * @param {onnx.TypeProto.ISparseTensor=} [properties] Properties to set\n             */\n            function SparseTensor(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * SparseTensor elemType.\n             * @member {number} elemType\n             * @memberof onnx.TypeProto.SparseTensor\n             * @instance\n             */\n            SparseTensor.prototype.elemType = 0;\n\n            /**\n             * SparseTensor shape.\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\n             * @memberof onnx.TypeProto.SparseTensor\n             * @instance\n             */\n            SparseTensor.prototype.shape = null;\n\n            /**\n             * Creates a new SparseTensor instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {onnx.TypeProto.ISparseTensor=} [properties] Properties to set\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor instance\n             */\n            SparseTensor.create = function create(properties) {\n                return new SparseTensor(properties);\n            };\n\n            /**\n             * Encodes the specified SparseTensor message. Does not implicitly {@link onnx.TypeProto.SparseTensor.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {onnx.TypeProto.ISparseTensor} message SparseTensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            SparseTensor.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\n                if (message.shape != null && Object.hasOwnProperty.call(message, \"shape\"))\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified SparseTensor message, length delimited. Does not implicitly {@link onnx.TypeProto.SparseTensor.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {onnx.TypeProto.ISparseTensor} message SparseTensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            SparseTensor.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a SparseTensor message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            SparseTensor.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.SparseTensor();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.elemType = reader.int32();\n                            break;\n                        }\n                    case 2: {\n                            message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a SparseTensor message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            SparseTensor.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a SparseTensor message.\n             * @function verify\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            SparseTensor.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    if (!$util.isInteger(message.elemType))\n                        return \"elemType: integer expected\";\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\n                    if (error)\n                        return \"shape.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a SparseTensor message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor\n             */\n            SparseTensor.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.SparseTensor)\n                    return object;\n                var message = new $root.onnx.TypeProto.SparseTensor();\n                if (object.elemType != null)\n                    message.elemType = object.elemType | 0;\n                if (object.shape != null) {\n                    if (typeof object.shape !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.SparseTensor.shape: object expected\");\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a SparseTensor message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {onnx.TypeProto.SparseTensor} message SparseTensor\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            SparseTensor.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.elemType = 0;\n                    object.shape = null;\n                }\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = message.elemType;\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n                return object;\n            };\n\n            /**\n             * Converts this SparseTensor to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.SparseTensor\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            SparseTensor.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for SparseTensor\n             * @function getTypeUrl\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            SparseTensor.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TypeProto.SparseTensor\";\n            };\n\n            return SparseTensor;\n        })();\n\n        return TypeProto;\n    })();\n\n    onnx.OperatorSetIdProto = (function() {\n\n        /**\n         * Properties of an OperatorSetIdProto.\n         * @memberof onnx\n         * @interface IOperatorSetIdProto\n         * @property {string|null} [domain] OperatorSetIdProto domain\n         * @property {number|Long|null} [version] OperatorSetIdProto version\n         */\n\n        /**\n         * Constructs a new OperatorSetIdProto.\n         * @memberof onnx\n         * @classdesc Represents an OperatorSetIdProto.\n         * @implements IOperatorSetIdProto\n         * @constructor\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         */\n        function OperatorSetIdProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * OperatorSetIdProto domain.\n         * @member {string} domain\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.domain = \"\";\n\n        /**\n         * OperatorSetIdProto version.\n         * @member {number|Long} version\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new OperatorSetIdProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto instance\n         */\n        OperatorSetIdProto.create = function create(properties) {\n            return new OperatorSetIdProto(properties);\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.domain);\n            if (message.version != null && Object.hasOwnProperty.call(message, \"version\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.version);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message, length delimited. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.OperatorSetIdProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.domain = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.version = reader.int64();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an OperatorSetIdProto message.\n         * @function verify\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        OperatorSetIdProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))\n                    return \"version: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates an OperatorSetIdProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         */\n        OperatorSetIdProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.OperatorSetIdProto)\n                return object;\n            var message = new $root.onnx.OperatorSetIdProto();\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.version != null)\n                if ($util.Long)\n                    (message.version = $util.Long.fromValue(object.version)).unsigned = false;\n                else if (typeof object.version === \"string\")\n                    message.version = parseInt(object.version, 10);\n                else if (typeof object.version === \"number\")\n                    message.version = object.version;\n                else if (typeof object.version === \"object\")\n                    message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an OperatorSetIdProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.OperatorSetIdProto} message OperatorSetIdProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        OperatorSetIdProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.version = options.longs === String ? \"0\" : 0;\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (typeof message.version === \"number\")\n                    object.version = options.longs === String ? String(message.version) : message.version;\n                else\n                    object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;\n            return object;\n        };\n\n        /**\n         * Converts this OperatorSetIdProto to JSON.\n         * @function toJSON\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        OperatorSetIdProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for OperatorSetIdProto\n         * @function getTypeUrl\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        OperatorSetIdProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.OperatorSetIdProto\";\n        };\n\n        return OperatorSetIdProto;\n    })();\n\n    /**\n     * OperatorStatus enum.\n     * @name onnx.OperatorStatus\n     * @enum {number}\n     * @property {number} EXPERIMENTAL=0 EXPERIMENTAL value\n     * @property {number} STABLE=1 STABLE value\n     */\n    onnx.OperatorStatus = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"EXPERIMENTAL\"] = 0;\n        values[valuesById[1] = \"STABLE\"] = 1;\n        return values;\n    })();\n\n    onnx.FunctionProto = (function() {\n\n        /**\n         * Properties of a FunctionProto.\n         * @memberof onnx\n         * @interface IFunctionProto\n         * @property {string|null} [name] FunctionProto name\n         * @property {Array.<string>|null} [input] FunctionProto input\n         * @property {Array.<string>|null} [output] FunctionProto output\n         * @property {Array.<string>|null} [attribute] FunctionProto attribute\n         * @property {Array.<onnx.IAttributeProto>|null} [attributeProto] FunctionProto attributeProto\n         * @property {Array.<onnx.INodeProto>|null} [node] FunctionProto node\n         * @property {string|null} [docString] FunctionProto docString\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] FunctionProto opsetImport\n         * @property {string|null} [domain] FunctionProto domain\n         */\n\n        /**\n         * Constructs a new FunctionProto.\n         * @memberof onnx\n         * @classdesc Represents a FunctionProto.\n         * @implements IFunctionProto\n         * @constructor\n         * @param {onnx.IFunctionProto=} [properties] Properties to set\n         */\n        function FunctionProto(properties) {\n            this.input = [];\n            this.output = [];\n            this.attribute = [];\n            this.attributeProto = [];\n            this.node = [];\n            this.opsetImport = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * FunctionProto name.\n         * @member {string} name\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.name = \"\";\n\n        /**\n         * FunctionProto input.\n         * @member {Array.<string>} input\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.input = $util.emptyArray;\n\n        /**\n         * FunctionProto output.\n         * @member {Array.<string>} output\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.output = $util.emptyArray;\n\n        /**\n         * FunctionProto attribute.\n         * @member {Array.<string>} attribute\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.attribute = $util.emptyArray;\n\n        /**\n         * FunctionProto attributeProto.\n         * @member {Array.<onnx.IAttributeProto>} attributeProto\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.attributeProto = $util.emptyArray;\n\n        /**\n         * FunctionProto node.\n         * @member {Array.<onnx.INodeProto>} node\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.node = $util.emptyArray;\n\n        /**\n         * FunctionProto docString.\n         * @member {string} docString\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.docString = \"\";\n\n        /**\n         * FunctionProto opsetImport.\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.opsetImport = $util.emptyArray;\n\n        /**\n         * FunctionProto domain.\n         * @member {string} domain\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.domain = \"\";\n\n        /**\n         * Creates a new FunctionProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {onnx.IFunctionProto=} [properties] Properties to set\n         * @returns {onnx.FunctionProto} FunctionProto instance\n         */\n        FunctionProto.create = function create(properties) {\n            return new FunctionProto(properties);\n        };\n\n        /**\n         * Encodes the specified FunctionProto message. Does not implicitly {@link onnx.FunctionProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {onnx.IFunctionProto} message FunctionProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FunctionProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.input[i]);\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.output[i]);\n            if (message.attribute != null && message.attribute.length)\n                for (var i = 0; i < message.attribute.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.attribute[i]);\n            if (message.node != null && message.node.length)\n                for (var i = 0; i < message.node.length; ++i)\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.docString);\n            if (message.opsetImport != null && message.opsetImport.length)\n                for (var i = 0; i < message.opsetImport.length; ++i)\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.domain);\n            if (message.attributeProto != null && message.attributeProto.length)\n                for (var i = 0; i < message.attributeProto.length; ++i)\n                    $root.onnx.AttributeProto.encode(message.attributeProto[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified FunctionProto message, length delimited. Does not implicitly {@link onnx.FunctionProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {onnx.IFunctionProto} message FunctionProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FunctionProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a FunctionProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.FunctionProto} FunctionProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FunctionProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.FunctionProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 4: {\n                        if (!(message.input && message.input.length))\n                            message.input = [];\n                        message.input.push(reader.string());\n                        break;\n                    }\n                case 5: {\n                        if (!(message.output && message.output.length))\n                            message.output = [];\n                        message.output.push(reader.string());\n                        break;\n                    }\n                case 6: {\n                        if (!(message.attribute && message.attribute.length))\n                            message.attribute = [];\n                        message.attribute.push(reader.string());\n                        break;\n                    }\n                case 11: {\n                        if (!(message.attributeProto && message.attributeProto.length))\n                            message.attributeProto = [];\n                        message.attributeProto.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 7: {\n                        if (!(message.node && message.node.length))\n                            message.node = [];\n                        message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 8: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                case 9: {\n                        if (!(message.opsetImport && message.opsetImport.length))\n                            message.opsetImport = [];\n                        message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 10: {\n                        message.domain = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a FunctionProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.FunctionProto} FunctionProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FunctionProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a FunctionProto message.\n         * @function verify\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        FunctionProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i)\n                    if (!$util.isString(message.input[i]))\n                        return \"input: string[] expected\";\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i)\n                    if (!$util.isString(message.output[i]))\n                        return \"output: string[] expected\";\n            }\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\n                if (!Array.isArray(message.attribute))\n                    return \"attribute: array expected\";\n                for (var i = 0; i < message.attribute.length; ++i)\n                    if (!$util.isString(message.attribute[i]))\n                        return \"attribute: string[] expected\";\n            }\n            if (message.attributeProto != null && message.hasOwnProperty(\"attributeProto\")) {\n                if (!Array.isArray(message.attributeProto))\n                    return \"attributeProto: array expected\";\n                for (var i = 0; i < message.attributeProto.length; ++i) {\n                    var error = $root.onnx.AttributeProto.verify(message.attributeProto[i]);\n                    if (error)\n                        return \"attributeProto.\" + error;\n                }\n            }\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\n                if (!Array.isArray(message.node))\n                    return \"node: array expected\";\n                for (var i = 0; i < message.node.length; ++i) {\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\n                    if (error)\n                        return \"node.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\n                if (!Array.isArray(message.opsetImport))\n                    return \"opsetImport: array expected\";\n                for (var i = 0; i < message.opsetImport.length; ++i) {\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n                    if (error)\n                        return \"opsetImport.\" + error;\n                }\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a FunctionProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.FunctionProto} FunctionProto\n         */\n        FunctionProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.FunctionProto)\n                return object;\n            var message = new $root.onnx.FunctionProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.FunctionProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i)\n                    message.input[i] = String(object.input[i]);\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.FunctionProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i)\n                    message.output[i] = String(object.output[i]);\n            }\n            if (object.attribute) {\n                if (!Array.isArray(object.attribute))\n                    throw TypeError(\".onnx.FunctionProto.attribute: array expected\");\n                message.attribute = [];\n                for (var i = 0; i < object.attribute.length; ++i)\n                    message.attribute[i] = String(object.attribute[i]);\n            }\n            if (object.attributeProto) {\n                if (!Array.isArray(object.attributeProto))\n                    throw TypeError(\".onnx.FunctionProto.attributeProto: array expected\");\n                message.attributeProto = [];\n                for (var i = 0; i < object.attributeProto.length; ++i) {\n                    if (typeof object.attributeProto[i] !== \"object\")\n                        throw TypeError(\".onnx.FunctionProto.attributeProto: object expected\");\n                    message.attributeProto[i] = $root.onnx.AttributeProto.fromObject(object.attributeProto[i]);\n                }\n            }\n            if (object.node) {\n                if (!Array.isArray(object.node))\n                    throw TypeError(\".onnx.FunctionProto.node: array expected\");\n                message.node = [];\n                for (var i = 0; i < object.node.length; ++i) {\n                    if (typeof object.node[i] !== \"object\")\n                        throw TypeError(\".onnx.FunctionProto.node: object expected\");\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.opsetImport) {\n                if (!Array.isArray(object.opsetImport))\n                    throw TypeError(\".onnx.FunctionProto.opsetImport: array expected\");\n                message.opsetImport = [];\n                for (var i = 0; i < object.opsetImport.length; ++i) {\n                    if (typeof object.opsetImport[i] !== \"object\")\n                        throw TypeError(\".onnx.FunctionProto.opsetImport: object expected\");\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n                }\n            }\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a FunctionProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {onnx.FunctionProto} message FunctionProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        FunctionProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.input = [];\n                object.output = [];\n                object.attribute = [];\n                object.node = [];\n                object.opsetImport = [];\n                object.attributeProto = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.docString = \"\";\n                object.domain = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = message.input[j];\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = message.output[j];\n            }\n            if (message.attribute && message.attribute.length) {\n                object.attribute = [];\n                for (var j = 0; j < message.attribute.length; ++j)\n                    object.attribute[j] = message.attribute[j];\n            }\n            if (message.node && message.node.length) {\n                object.node = [];\n                for (var j = 0; j < message.node.length; ++j)\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.opsetImport && message.opsetImport.length) {\n                object.opsetImport = [];\n                for (var j = 0; j < message.opsetImport.length; ++j)\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.attributeProto && message.attributeProto.length) {\n                object.attributeProto = [];\n                for (var j = 0; j < message.attributeProto.length; ++j)\n                    object.attributeProto[j] = $root.onnx.AttributeProto.toObject(message.attributeProto[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this FunctionProto to JSON.\n         * @function toJSON\n         * @memberof onnx.FunctionProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        FunctionProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for FunctionProto\n         * @function getTypeUrl\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        FunctionProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.FunctionProto\";\n        };\n\n        return FunctionProto;\n    })();\n\n    return onnx;\n})();\n\nmodule.exports = $root;\n","\nvar ortWasmThreaded = (() => {\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\n  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;\n  return (\nfunction(ortWasmThreaded = {})  {\n\nfunction e(){m.buffer!=r.buffer&&v();return r}function y(){m.buffer!=r.buffer&&v();return aa}function z(){m.buffer!=r.buffer&&v();return ba}function ca(){m.buffer!=r.buffer&&v();return da}function A(){m.buffer!=r.buffer&&v();return ea}function B(){m.buffer!=r.buffer&&v();return fa}function ha(){m.buffer!=r.buffer&&v();return ia}var C;C||(C=typeof ortWasmThreaded !== 'undefined' ? ortWasmThreaded : {});var ja,ka;C.ready=new Promise((a,b)=>{ja=a;ka=b});\"use strict\";\nC.jsepInit=function(a,b,c,d,f,g,k,l){C.oc=a;C.Tb=b;C.Vb=c;C.Gb=d;C.Ub=f;C.$a=g;C.Wb=k;C.Xb=l};var la=Object.assign({},C),ma=\"./this.program\",na=(a,b)=>{throw b;},oa=\"object\"==typeof window,D=\"function\"==typeof importScripts,E=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,F=C.ENVIRONMENT_IS_PTHREAD||!1,G=\"\";function pa(a){return C.locateFile?C.locateFile(a,G):G+a}var qa,ra,sa;\nif(E){var fs=require(\"fs\"),ta=require(\"path\");G=D?ta.dirname(G)+\"/\":__dirname+\"/\";qa=(b,c)=>{b=b.startsWith(\"file://\")?new URL(b):ta.normalize(b);return fs.readFileSync(b,c?void 0:\"utf8\")};sa=b=>{b=qa(b,!0);b.buffer||(b=new Uint8Array(b));return b};ra=(b,c,d,f=!0)=>{b=b.startsWith(\"file://\")?new URL(b):ta.normalize(b);fs.readFile(b,f?void 0:\"utf8\",(g,k)=>{g?d(g):c(f?k.buffer:k)})};!C.thisProgram&&1<process.argv.length&&(ma=process.argv[1].replace(/\\\\/g,\"/\"));process.argv.slice(2);na=(b,c)=>{process.exitCode=\nb;throw c;};C.inspect=()=>\"[Emscripten Module object]\";let a;try{a=require(\"worker_threads\")}catch(b){throw console.error('The \"worker_threads\" module is not supported in this node.js build - perhaps a newer version is needed?'),b;}global.Worker=a.Worker}else if(oa||D)D?G=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(G=document.currentScript.src),_scriptDir&&(G=_scriptDir),0!==G.indexOf(\"blob:\")?G=G.substr(0,G.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):G=\"\",E||(qa=a=>{var b=\nnew XMLHttpRequest;b.open(\"GET\",a,!1);b.send(null);return b.responseText},D&&(sa=a=>{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.responseType=\"arraybuffer\";b.send(null);return new Uint8Array(b.response)}),ra=(a,b,c)=>{var d=new XMLHttpRequest;d.open(\"GET\",a,!0);d.responseType=\"arraybuffer\";d.onload=()=>{200==d.status||0==d.status&&d.response?b(d.response):c()};d.onerror=c;d.send(null)});E&&\"undefined\"==typeof performance&&(global.performance=require(\"perf_hooks\").performance);\nvar ua=console.log.bind(console),va=console.warn.bind(console);E&&(ua=(...a)=>fs.writeSync(1,a.join(\" \")+\"\\n\"),va=(...a)=>fs.writeSync(2,a.join(\" \")+\"\\n\"));var wa=C.print||ua,H=C.printErr||va;Object.assign(C,la);la=null;C.thisProgram&&(ma=C.thisProgram);C.quit&&(na=C.quit);var xa;C.wasmBinary&&(xa=C.wasmBinary);var noExitRuntime=C.noExitRuntime||!0;\"object\"!=typeof WebAssembly&&I(\"no native wasm support detected\");var m,ya,J=!1,K,r,aa,ba,da,ea,fa,za,L,Aa,ia;\nfunction v(){var a=m.buffer;C.HEAP8=r=new Int8Array(a);C.HEAP16=ba=new Int16Array(a);C.HEAP32=ea=new Int32Array(a);C.HEAPU8=aa=new Uint8Array(a);C.HEAPU16=da=new Uint16Array(a);C.HEAPU32=fa=new Uint32Array(a);C.HEAPF32=za=new Float32Array(a);C.HEAPF64=ia=new Float64Array(a);C.HEAP64=L=new BigInt64Array(a);C.HEAPU64=Aa=new BigUint64Array(a)}var Ba=C.INITIAL_MEMORY||16777216;5242880<=Ba||I(\"INITIAL_MEMORY should be larger than STACK_SIZE, was \"+Ba+\"! (STACK_SIZE=5242880)\");\nif(F)m=C.wasmMemory;else if(C.wasmMemory)m=C.wasmMemory;else if(m=new WebAssembly.Memory({initial:Ba/65536,maximum:65536,shared:!0}),!(m.buffer instanceof SharedArrayBuffer))throw H(\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\"),E&&H(\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)\"),\nError(\"bad memory\");v();Ba=m.buffer.byteLength;var Ca=[],Da=[],Ea=[],Fa=0;function Ga(){return noExitRuntime||0<Fa}function Ha(){var a=C.preRun.shift();Ca.unshift(a)}var M=0,Ia=null,Ja=null;function I(a){if(C.onAbort)C.onAbort(a);a=\"Aborted(\"+a+\")\";H(a);J=!0;K=1;a=new WebAssembly.RuntimeError(a+\". Build with -sASSERTIONS for more info.\");ka(a);throw a;}function Ka(a){return a.startsWith(\"data:application/octet-stream;base64,\")}var N;N=\"ort-wasm-simd-threaded.wasm\";Ka(N)||(N=pa(N));\nfunction La(a){try{if(a==N&&xa)return new Uint8Array(xa);if(sa)return sa(a);throw\"both async and sync fetching of the wasm failed\";}catch(b){I(b)}}function Ma(a){if(!xa&&(oa||D)){if(\"function\"==typeof fetch&&!a.startsWith(\"file://\"))return fetch(a,{credentials:\"same-origin\"}).then(b=>{if(!b.ok)throw\"failed to load wasm binary file at '\"+a+\"'\";return b.arrayBuffer()}).catch(()=>La(a));if(ra)return new Promise((b,c)=>{ra(a,d=>b(new Uint8Array(d)),c)})}return Promise.resolve().then(()=>La(a))}\nfunction Na(a,b,c){return Ma(a).then(d=>WebAssembly.instantiate(d,b)).then(d=>d).then(c,d=>{H(\"failed to asynchronously prepare wasm: \"+d);I(d)})}\nfunction Oa(a,b){var c=N;return xa||\"function\"!=typeof WebAssembly.instantiateStreaming||Ka(c)||c.startsWith(\"file://\")||E||\"function\"!=typeof fetch?Na(c,a,b):fetch(c,{credentials:\"same-origin\"}).then(d=>WebAssembly.instantiateStreaming(d,a).then(b,function(f){H(\"wasm streaming compile failed: \"+f);H(\"falling back to ArrayBuffer instantiation\");return Na(c,a,b)}))}\nvar Pa={1298168:()=>{C.jsepRunPromise=new Promise(function(a){C.Yb=a})},1298263:a=>{C.Yb(a)},1298301:a=>C.Tb(a),1298334:a=>C.Vb(a),1298366:(a,b,c)=>{C.Gb(a,b,c,!0)},1298405:(a,b,c)=>{C.Gb(a,b,c)},1298438:a=>{C.$a(\"Abs\",a,void 0)},1298489:a=>{C.$a(\"Neg\",a,void 0)},1298540:a=>{C.$a(\"Floor\",a,void 0)},1298593:a=>{C.$a(\"Ceil\",a,void 0)},1298645:a=>{C.$a(\"Reciprocal\",a,void 0)},1298703:a=>{C.$a(\"Sqrt\",a,void 0)},1298755:a=>{C.$a(\"Exp\",a,void 0)},1298806:a=>{C.$a(\"Erf\",a,void 0)},1298857:a=>{C.$a(\"Sigmoid\",\na,void 0)},1298912:a=>{C.$a(\"Sin\",a,void 0)},1298963:a=>{C.$a(\"Cos\",a,void 0)},1299014:a=>{C.$a(\"Tan\",a,void 0)},1299065:a=>{C.$a(\"Asin\",a,void 0)},1299117:a=>{C.$a(\"Acos\",a,void 0)},1299169:a=>{C.$a(\"Atan\",a,void 0)},1299221:a=>{C.$a(\"Sinh\",a,void 0)},1299273:a=>{C.$a(\"Cosh\",a,void 0)},1299325:a=>{C.$a(\"Asinh\",a,void 0)},1299378:a=>{C.$a(\"Acosh\",a,void 0)},1299431:a=>{C.$a(\"Atanh\",a,void 0)},1299484:(a,b,c)=>{C.$a(\"ClipV10\",a,{min:b,max:c})},1299556:a=>{C.$a(\"Clip\",a,void 0)},1299608:(a,b)=>{C.$a(\"Elu\",\na,{alpha:b})},1299666:a=>{C.$a(\"Relu\",a,void 0)},1299718:(a,b)=>{C.$a(\"LeakyRelu\",a,{alpha:b})},1299782:(a,b)=>{C.$a(\"ThresholdedRelu\",a,{alpha:b})},1299852:a=>{C.$a(\"Add\",a,void 0)},1299903:a=>{C.$a(\"Sub\",a,void 0)},1299954:a=>{C.$a(\"Mul\",a,void 0)},1300005:a=>{C.$a(\"Div\",a,void 0)},1300056:a=>{C.$a(\"Pow\",a,void 0)},1300107:(a,b,c,d,f)=>{C.$a(\"ReduceMean\",a,{keepDims:!!b,noopWithEmptyAxes:!!c,axes:d?Array.from(A().subarray(f>>>0,f+d>>>0)):[]})},1300271:(a,b,c,d,f)=>{C.$a(\"ReduceMax\",a,{keepDims:!!b,\nnoopWithEmptyAxes:!!c,axes:d?Array.from(A().subarray(f>>>0,f+d>>>0)):[]})},1300434:(a,b,c,d,f)=>{C.$a(\"ReduceMin\",a,{keepDims:!!b,noopWithEmptyAxes:!!c,axes:d?Array.from(A().subarray(f>>>0,f+d>>>0)):[]})},1300597:(a,b,c,d,f)=>{C.$a(\"ReduceProd\",a,{keepDims:!!b,noopWithEmptyAxes:!!c,axes:d?Array.from(A().subarray(f>>>0,f+d>>>0)):[]})},1300761:(a,b,c,d,f)=>{C.$a(\"ReduceSum\",a,{keepDims:!!b,noopWithEmptyAxes:!!c,axes:d?Array.from(A().subarray(f>>>0,f+d>>>0)):[]})},1300924:(a,b,c,d,f)=>{C.$a(\"ReduceL1\",\na,{keepDims:!!b,noopWithEmptyAxes:!!c,axes:d?Array.from(A().subarray(f>>>0,f+d>>>0)):[]})},1301086:(a,b,c,d,f)=>{C.$a(\"ReduceL2\",a,{keepDims:!!b,noopWithEmptyAxes:!!c,axes:d?Array.from(A().subarray(f>>>0,f+d>>>0)):[]})},1301248:(a,b,c,d,f)=>{C.$a(\"ReduceLogSum\",a,{keepDims:!!b,noopWithEmptyAxes:!!c,axes:d?Array.from(A().subarray(f>>>0,f+d>>>0)):[]})},1301414:(a,b,c,d,f)=>{C.$a(\"ReduceSumSquare\",a,{keepDims:!!b,noopWithEmptyAxes:!!c,axes:d?Array.from(A().subarray(f>>>0,f+d>>>0)):[]})},1301583:(a,b,\nc,d,f)=>{C.$a(\"ReduceLogSumExp\",a,{keepDims:!!b,noopWithEmptyAxes:!!c,axes:d?Array.from(A().subarray(f>>>0,f+d>>>0)):[]})},1301752:(a,b,c)=>{C.$a(\"Transpose\",a,{perm:b?Array.from(A().subarray(c>>>0,c+b>>>0)):[]})},1301865:(a,b,c,d,f,g,k,l,n,p)=>{C.$a(\"Conv\",a,{format:n?\"NHWC\":\"NCHW\",auto_pad:b,dilations:[c],group:d,kernel_shape:[f],pads:[g,k],strides:[l],w_is_const:()=>!!e()[p>>>0]})},1302093:(a,b,c,d,f,g,k,l,n,p,q,u,w,h,t)=>{C.$a(\"Conv\",a,{format:h?\"NHWC\":\"NCHW\",auto_pad:b,dilations:[c,d],group:f,\nkernel_shape:[g,k],pads:[l,n,p,q],strides:[u,w],w_is_const:()=>!!e()[t>>>0]})},1302352:(a,b,c,d,f,g,k,l,n,p)=>{C.$a(\"Conv\",a,{format:n?\"NHWC\":\"NCHW\",auto_pad:b,dilations:[c],group:d,kernel_shape:[f],pads:[g,k],strides:[l],w_is_const:()=>!!e()[p>>>0]})},1302580:(a,b,c,d,f,g,k,l,n,p,q,u,w,h,t)=>{C.$a(\"Conv\",a,{format:h?\"NHWC\":\"NCHW\",auto_pad:b,dilations:[c,d],group:f,kernel_shape:[g,k],pads:[l,n,p,q],strides:[u,w],w_is_const:()=>!!e()[t>>>0]})},1302839:(a,b,c,d,f,g,k,l,n,p,q,u,w,h)=>{C.$a(\"ConvTranspose\",\na,{format:n?\"NHWC\":\"NCHW\",autoPad:b,dilations:[c],group:d,kernel_shape:[f],pads:[g,k],strides:[l],wIsConst:()=>!!e()[p>>>0],outputPadding:q?Array.from(A().subarray(u>>>0,u+q>>>0)):[],outputShape:w?Array.from(A().subarray(w>>>0,h+w>>>0)):[]})},1303219:(a,b,c,d,f,g,k,l,n,p,q,u,w)=>{C.$a(\"ConvTranspose\",a,{format:l?\"NHWC\":\"NCHW\",autoPad:b,dilations:Array.from(A().subarray(c>>>0,c+2>>>0)),group:d,kernelShape:Array.from(A().subarray(f>>>0,f+2>>>0)),pads:Array.from(A().subarray(g>>>0,g+4>>>0)),strides:Array.from(A().subarray(k>>>\n0,k+2>>>0)),wIsConst:()=>!!e()[n>>>0],outputPadding:0<p?Array.from(A().subarray(q>>>0,q+p>>>0)):[],outputShape:0<u?Array.from(A().subarray(w>>>0,w+u>>>0)):[]})},1303742:(a,b,c,d,f,g,k,l,n,p,q,u,w,h)=>{C.$a(\"ConvTranspose\",a,{format:n?\"NHWC\":\"NCHW\",autoPad:b,dilations:[c],group:d,kernel_shape:[f],pads:[g,k],strides:[l],wIsConst:()=>!!e()[p>>>0],outputPadding:q?Array.from(A().subarray(u>>>0,u+q>>>0)):[],outputShape:w?Array.from(A().subarray(w>>>0,h+w>>>0)):[]})},1304122:(a,b,c,d,f,g,k,l,n,p,q,u,w)=>\n{C.$a(\"ConvTranspose\",a,{format:l?\"NHWC\":\"NCHW\",autoPad:b,dilations:Array.from(A().subarray(c>>>0,c+2>>>0)),group:d,kernelShape:Array.from(A().subarray(f>>>0,f+2>>>0)),pads:Array.from(A().subarray(g>>>0,g+4>>>0)),strides:Array.from(A().subarray(k>>>0,k+2>>>0)),wIsConst:()=>!!e()[n>>>0],outputPadding:0<p?Array.from(A().subarray(q>>>0,q+p>>>0)):[],outputShape:0<u?Array.from(A().subarray(w>>>0,w+u>>>0)):[]})},1304645:(a,b)=>{C.$a(\"GlobalAveragePool\",a,{format:b?\"NHWC\":\"NCHW\"})},1304736:(a,b,c,d,f,g,\nk,l,n,p,q,u,w,h,t,x)=>{C.$a(\"AveragePool\",a,{format:x?\"NHWC\":\"NCHW\",auto_pad:b,ceil_mode:c,count_include_pad:d,storage_order:f,dilations:[g,k],kernel_shape:[l,n],pads:[p,q,u,w],strides:[h,t]})},1305020:(a,b)=>{C.$a(\"GlobalAveragePool\",a,{format:b?\"NHWC\":\"NCHW\"})},1305111:(a,b,c,d,f,g,k,l,n,p,q,u,w,h,t,x)=>{C.$a(\"AveragePool\",a,{format:x?\"NHWC\":\"NCHW\",auto_pad:b,ceil_mode:c,count_include_pad:d,storage_order:f,dilations:[g,k],kernel_shape:[l,n],pads:[p,q,u,w],strides:[h,t]})},1305395:(a,b)=>{C.$a(\"GlobalMaxPool\",\na,{format:b?\"NHWC\":\"NCHW\"})},1305482:(a,b,c,d,f,g,k,l,n,p,q,u,w,h,t,x)=>{C.$a(\"MaxPool\",a,{format:x?\"NHWC\":\"NCHW\",auto_pad:b,ceil_mode:c,count_include_pad:d,storage_order:f,dilations:[g,k],kernel_shape:[l,n],pads:[p,q,u,w],strides:[h,t]})},1305762:(a,b)=>{C.$a(\"GlobalMaxPool\",a,{format:b?\"NHWC\":\"NCHW\"})},1305849:(a,b,c,d,f,g,k,l,n,p,q,u,w,h,t,x)=>{C.$a(\"MaxPool\",a,{format:x?\"NHWC\":\"NCHW\",auto_pad:b,ceil_mode:c,count_include_pad:d,storage_order:f,dilations:[g,k],kernel_shape:[l,n],pads:[p,q,u,w],strides:[h,\nt]})},1306129:(a,b,c,d,f)=>{C.$a(\"Gemm\",a,{alpha:b,beta:c,transA:d,transB:f})},1306233:a=>{C.$a(\"MatMul\",a,void 0)},1306287:(a,b)=>{C.$a(\"Concat\",a,{axis:b})},1306347:(a,b,c,d,f)=>{C.$a(\"Split\",a,{axis:b,numOutputs:c,splitSizes:d?Array.from(A().subarray(f>>>0,f+d>>>0)):[]})},1306492:a=>{C.$a(\"Expand\",a,void 0)},1306546:(a,b,c,d,f,g,k)=>{C.$a(\"Slice\",a,{starts:b?Array.from(A().subarray(c>>>0,c+b>>>0)):[],ends:d?Array.from(A().subarray(f>>>0,f+d>>>0)):[],axes:g?Array.from(A().subarray(k>>>0,k+g>>>0)):\n[]})},1306777:a=>{C.Wb(a)},1306811:(a,b)=>C.Xb(a,b)};function Qa(a){this.name=\"ExitStatus\";this.message=\"Program terminated with exit(\"+a+\")\";this.status=a}function Ra(a){a.terminate();a.onmessage=()=>{}}function Sa(a){(a=O.qb[a])||I();O.bc(a)}function Ta(a){var b=O.Pb();if(!b)return 6;O.tb.push(b);O.qb[a.sb]=b;b.sb=a.sb;var c={cmd:\"run\",start_routine:a.dc,arg:a.Mb,pthread_ptr:a.sb};E&&b.unref();b.postMessage(c,a.kc);return 0}var Ua=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;\nfunction Va(a,b,c){b>>>=0;var d=b+c;for(c=b;a[c]&&!(c>=d);)++c;if(16<c-b&&a.buffer&&Ua)return Ua.decode(a.buffer instanceof SharedArrayBuffer?a.slice(b,c):a.subarray(b,c));for(d=\"\";b<c;){var f=a[b++];if(f&128){var g=a[b++]&63;if(192==(f&224))d+=String.fromCharCode((f&31)<<6|g);else{var k=a[b++]&63;f=224==(f&240)?(f&15)<<12|g<<6|k:(f&7)<<18|g<<12|k<<6|a[b++]&63;65536>f?d+=String.fromCharCode(f):(f-=65536,d+=String.fromCharCode(55296|f>>10,56320|f&1023))}}else d+=String.fromCharCode(f)}return d}\nfunction Wa(a,b){return(a>>>=0)?Va(y(),a,b):\"\"}function Xa(a){if(F)return P(1,1,a);K=a;if(!Ga()){O.ec();if(C.onExit)C.onExit(a);J=!0}na(a,new Qa(a))}function Ya(a){K=a;if(F)throw Za(a),\"unwind\";Xa(a)}function $a(a){a instanceof Qa||\"unwind\"==a||na(1,a)}\nvar O={wb:[],tb:[],Kb:[],qb:{},Cb:function(){F&&O.Rb()},nc:function(){},Rb:function(){O.receiveObjectTransfer=O.ac;O.threadInitTLS=O.Jb;O.setExitStatus=O.Ib;noExitRuntime=!1},Ib:function(a){K=a},qc:[\"$terminateWorker\"],ec:function(){for(var a of O.tb)Ra(a);for(a of O.wb)Ra(a);O.wb=[];O.tb=[];O.qb=[]},bc:function(a){var b=a.sb;delete O.qb[b];O.wb.push(a);O.tb.splice(O.tb.indexOf(a),1);a.sb=0;ab(b)},ac:function(){},Jb:function(){O.Kb.forEach(a=>a())},$b:a=>new Promise(b=>{a.onmessage=g=>{g=g.data;var k=\ng.cmd;a.sb&&(O.Nb=a.sb);if(g.targetThread&&g.targetThread!=bb()){var l=O.qb[g.pc];l?l.postMessage(g,g.transferList):H('Internal error! Worker sent a message \"'+k+'\" to target pthread '+g.targetThread+\", but that thread no longer exists!\")}else if(\"checkMailbox\"===k)cb();else if(\"spawnThread\"===k)Ta(g);else if(\"cleanupThread\"===k)Sa(g.thread);else if(\"killThread\"===k)g=g.thread,k=O.qb[g],delete O.qb[g],Ra(k),ab(g),O.tb.splice(O.tb.indexOf(k),1),k.sb=0;else if(\"cancelThread\"===k)O.qb[g.thread].postMessage({cmd:\"cancel\"});\nelse if(\"loaded\"===k)a.loaded=!0,b(a);else if(\"print\"===k)wa(\"Thread \"+g.threadId+\": \"+g.text);else if(\"printErr\"===k)H(\"Thread \"+g.threadId+\": \"+g.text);else if(\"alert\"===k)alert(\"Thread \"+g.threadId+\": \"+g.text);else if(\"setimmediate\"===g.target)a.postMessage(g);else if(\"callHandler\"===k)C[g.handler](...g.args);else k&&H(\"worker sent an unknown command \"+k);O.Nb=void 0};a.onerror=g=>{H(\"worker sent an error! \"+g.filename+\":\"+g.lineno+\": \"+g.message);throw g;};E&&(a.on(\"message\",function(g){a.onmessage({data:g})}),\na.on(\"error\",function(g){a.onerror(g)}));var c=[],d=[\"onExit\",\"onAbort\",\"print\",\"printErr\"],f;for(f of d)C.hasOwnProperty(f)&&c.push(f);a.postMessage({cmd:\"load\",handlers:c,urlOrBlob:C.mainScriptUrlOrBlob||_scriptDir,wasmMemory:m,wasmModule:ya})}),Zb:function(a){a()},Lb:function(){var a=pa(\"ort-wasm-simd-threaded.worker.js\");a=new Worker(a);O.wb.push(a)},Pb:function(){0==O.wb.length&&(O.Lb(),O.$b(O.wb[0]));return O.wb.pop()}};C.PThread=O;function db(a){for(;0<a.length;)a.shift()(C)}\nC.establishStackSpace=function(){var a=bb(),b=A()[a+52>>2>>>0];a=A()[a+56>>2>>>0];eb(b,b-a);fb(b)};function Za(a){if(F)return P(2,0,a);Ya(a)}C.invokeEntryPoint=function(a,b){a=gb.apply(null,[a,b]);Ga()?O.Ib(a):hb(a)};function ib(a){this.kb=a-24;this.Eb=function(b){B()[this.kb+4>>2>>>0]=b};this.zb=function(b){B()[this.kb+8>>2>>>0]=b};this.Cb=function(b,c){this.yb();this.Eb(b);this.zb(c)};this.yb=function(){B()[this.kb+16>>2>>>0]=0}}var jb=0,kb=0;\nfunction lb(a,b,c,d){return F?P(3,1,a,b,c,d):mb(a,b,c,d)}function mb(a,b,c,d){if(\"undefined\"==typeof SharedArrayBuffer)return H(\"Current environment does not support SharedArrayBuffer, pthreads are not available!\"),6;var f=[];if(F&&0===f.length)return lb(a,b,c,d);a={dc:c,sb:a,Mb:d,kc:f};return F?(a.mc=\"spawnThread\",postMessage(a,f),0):Ta(a)}function nb(a,b,c){return F?P(4,1,a,b,c):0}function ob(a,b){if(F)return P(5,1,a,b)}\nfunction pb(a){for(var b=0,c=0;c<a.length;++c){var d=a.charCodeAt(c);127>=d?b++:2047>=d?b+=2:55296<=d&&57343>=d?(b+=4,++c):b+=3}return b}\nfunction qb(a,b,c,d){c>>>=0;if(!(0<d))return 0;var f=c;d=c+d-1;for(var g=0;g<a.length;++g){var k=a.charCodeAt(g);if(55296<=k&&57343>=k){var l=a.charCodeAt(++g);k=65536+((k&1023)<<10)|l&1023}if(127>=k){if(c>=d)break;b[c++>>>0]=k}else{if(2047>=k){if(c+1>=d)break;b[c++>>>0]=192|k>>6}else{if(65535>=k){if(c+2>=d)break;b[c++>>>0]=224|k>>12}else{if(c+3>=d)break;b[c++>>>0]=240|k>>18;b[c++>>>0]=128|k>>12&63}b[c++>>>0]=128|k>>6&63}b[c++>>>0]=128|k&63}}b[c>>>0]=0;return c-f}\nfunction rb(a,b,c){return qb(a,y(),b,c)}function sb(a,b){if(F)return P(6,1,a,b)}function tb(a,b,c){if(F)return P(7,1,a,b,c)}function ub(a,b,c){return F?P(8,1,a,b,c):0}function vb(a,b){if(F)return P(9,1,a,b)}function wb(a,b,c){if(F)return P(10,1,a,b,c)}function xb(a,b,c,d){if(F)return P(11,1,a,b,c,d)}function yb(a,b,c,d){if(F)return P(12,1,a,b,c,d)}function zb(a,b,c,d){if(F)return P(13,1,a,b,c,d)}function Ab(a){if(F)return P(14,1,a)}function Bb(a,b){if(F)return P(15,1,a,b)}\nfunction Cb(a,b,c){if(F)return P(16,1,a,b,c)}function Db(a){if(null===a)return\"null\";var b=typeof a;return\"object\"===b||\"array\"===b||\"function\"===b?a.toString():\"\"+a}var Eb=void 0;function Q(a){for(var b=\"\";y()[a>>>0];)b+=Eb[y()[a++>>>0]];return b}var Fb={},Gb={},Hb={};function Ib(a){if(void 0===a)return\"_unknown\";a=a.replace(/[^a-zA-Z0-9_]/g,\"$\");var b=a.charCodeAt(0);return 48<=b&&57>=b?\"_\"+a:a}function Jb(a,b){a=Ib(a);return{[a]:function(){return b.apply(this,arguments)}}[a]}\nfunction Kb(a){var b=Error,c=Jb(a,function(d){this.name=a;this.message=d;d=Error(d).stack;void 0!==d&&(this.stack=this.toString()+\"\\n\"+d.replace(/^Error(:[^\\n]*)?\\n/,\"\"))});c.prototype=Object.create(b.prototype);c.prototype.constructor=c;c.prototype.toString=function(){return void 0===this.message?this.name:this.name+\": \"+this.message};return c}var Lb=void 0;function R(a){throw new Lb(a);}\nfunction S(a,b,c={}){if(!(\"argPackAdvance\"in b))throw new TypeError(\"registerType registeredInstance requires argPackAdvance\");var d=b.name;a||R('type \"'+d+'\" must have a positive integer typeid pointer');if(Gb.hasOwnProperty(a)){if(c.Qb)return;R(\"Cannot register type '\"+d+\"' twice\")}Gb[a]=b;delete Hb[a];Fb.hasOwnProperty(a)&&(b=Fb[a],delete Fb[a],b.forEach(f=>f()))}\nfunction Mb(a,b,c){switch(b){case 0:return c?function(d){return e()[d>>>0]}:function(d){return y()[d>>>0]};case 1:return c?function(d){return z()[d>>>1]}:function(d){return ca()[d>>>1]};case 2:return c?function(d){return A()[d>>>2]}:function(d){return B()[d>>>2]};case 3:return c?function(d){return L[d>>3]}:function(d){return Aa[d>>3]};default:throw new TypeError(\"Unknown integer type: \"+a);}}\nfunction Nb(a){switch(a){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError(\"Unknown type size: \"+a);}}var T=new function(){this.kb=[void 0];this.yb=[];this.get=function(a){return this.kb[a]};this.Eb=function(a){let b=this.yb.pop()||this.kb.length;this.kb[b]=a;return b};this.cc=function(a){this.kb[a]=void 0;this.yb.push(a)}};function Ob(a){a>=T.zb&&0===--T.get(a).Hb&&T.cc(a)}\nvar U=a=>{a||R(\"Cannot use deleted val. handle = \"+a);return T.get(a).value},W=a=>{switch(a){case void 0:return 1;case null:return 2;case !0:return 3;case !1:return 4;default:return T.Eb({Hb:1,value:a})}};function Pb(a){return this.fromWireType(A()[a>>2>>>0])}\nfunction Qb(a,b){switch(b){case 2:return function(c){var d=this.fromWireType;m.buffer!=r.buffer&&v();return d.call(this,za[c>>>2])};case 3:return function(c){return this.fromWireType(ha()[c>>>3])};default:throw new TypeError(\"Unknown float type: \"+a);}}var Rb=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf-16le\"):void 0;\nfunction Sb(a,b){var c=a>>1;for(var d=c+b/2;!(c>=d)&&ca()[c>>>0];)++c;c<<=1;if(32<c-a&&Rb)return Rb.decode(y().slice(a,c));c=\"\";for(d=0;!(d>=b/2);++d){var f=z()[a+2*d>>1>>>0];if(0==f)break;c+=String.fromCharCode(f)}return c}function Tb(a,b,c){void 0===c&&(c=2147483647);if(2>c)return 0;c-=2;var d=b;c=c<2*a.length?c/2:a.length;for(var f=0;f<c;++f){var g=a.charCodeAt(f);z()[b>>1>>>0]=g;b+=2}z()[b>>1>>>0]=0;return b-d}function Ub(a){return 2*a.length}\nfunction Vb(a,b){for(var c=0,d=\"\";!(c>=b/4);){var f=A()[a+4*c>>2>>>0];if(0==f)break;++c;65536<=f?(f-=65536,d+=String.fromCharCode(55296|f>>10,56320|f&1023)):d+=String.fromCharCode(f)}return d}function Wb(a,b,c){b>>>=0;void 0===c&&(c=2147483647);if(4>c)return 0;var d=b;c=d+c-4;for(var f=0;f<a.length;++f){var g=a.charCodeAt(f);if(55296<=g&&57343>=g){var k=a.charCodeAt(++f);g=65536+((g&1023)<<10)|k&1023}A()[b>>2>>>0]=g;b+=4;if(b+4>c)break}A()[b>>2>>>0]=0;return b-d}\nfunction Xb(a){for(var b=0,c=0;c<a.length;++c){var d=a.charCodeAt(c);55296<=d&&57343>=d&&++c;b+=4}return b}function Yb(a){if(!J)try{if(a(),!Ga())try{F?hb(K):Ya(K)}catch(b){$a(b)}}catch(b){$a(b)}}function Zb(a){\"function\"===typeof Atomics.lc&&(Atomics.lc(A(),a>>2,a).value.then(cb),a+=128,Atomics.store(A(),a>>2,1))}C.__emscripten_thread_mailbox_await=Zb;function cb(){var a=bb();a&&(Zb(a),Yb(()=>$b()))}C.checkMailbox=cb;\nfunction ac(a,b){var c=Gb[a];if(void 0===c){a=bc(a);var d=Q(a);X(a);R(b+\" has unknown type \"+d)}return c}var cc={};function dc(a){var b=cc[a];return void 0===b?Q(a):b}var ec=[];function fc(){return\"object\"==typeof globalThis?globalThis:Function(\"return this\")()}function gc(a){var b=ec.length;ec.push(a);return b}function hc(a,b){for(var c=Array(a),d=0;d<a;++d)c[d]=ac(B()[b+4*d>>2>>>0],\"parameter \"+d);return c}var ic=[];\nfunction jc(a){var b=Function;if(!(b instanceof Function))throw new TypeError(\"new_ called with constructor type \"+typeof b+\" which is not a function\");var c=Jb(b.name||\"unknownFunctionName\",function(){});c.prototype=b.prototype;c=new c;a=b.apply(c,a);return a instanceof Object?a:c}\nfunction kc(a){for(var b=\"\",c=0;c<a;++c)b+=(0!==c?\", \":\"\")+\"arg\"+c;var d=\"return function emval_allocator_\"+a+\"(constructor, argTypes, args) {\\n  var HEAPU32 = getMemory();\\n\";for(c=0;c<a;++c)d+=\"var argType\"+c+\" = requireRegisteredType(HEAPU32[((argTypes)>>2)], 'parameter \"+c+\"');\\nvar arg\"+c+\" = argType\"+c+\".readValueFromPointer(args);\\nargs += argType\"+c+\"['argPackAdvance'];\\nargTypes += 4;\\n\";return(new Function(\"requireRegisteredType\",\"Module\",\"valueToHandle\",\"getMemory\",d+(\"var obj = new constructor(\"+\nb+\");\\nreturn valueToHandle(obj);\\n}\\n\")))(ac,C,W,()=>B())}var lc={};function mc(a){return B()[a>>>2]+4294967296*A()[a+4>>>2]}function nc(a){return 0===a%4&&(0!==a%100||0===a%400)}var oc=[0,31,60,91,121,152,182,213,244,274,305,335],pc=[0,31,59,90,120,151,181,212,243,273,304,334];function qc(a){return(nc(a.getFullYear())?oc:pc)[a.getMonth()]+a.getDate()-1}function rc(a,b,c,d,f,g,k){return F?P(17,1,a,b,c,d,f,g,k):-52}function sc(a,b,c,d,f,g){if(F)return P(18,1,a,b,c,d,f,g)}\nfunction tc(a){var b=pb(a)+1,c=uc(b);c&&rb(a,c,b);return c}var vc=[];function wc(a,b,c){vc.length=0;var d;for(c>>=2;d=y()[b++>>>0];)c+=105!=d&c,vc.push(105==d?A()[c>>>0]:(106==d?L:ha())[c++>>1]),++c;return Pa[a].apply(null,vc)}var xc;xc=E?()=>{var a=process.hrtime();return 1E3*a[0]+a[1]/1E6}:()=>performance.timeOrigin+performance.now();function zc(a){var b=Ac();a=a();fb(b);return a}\nfunction P(a,b){var c=arguments.length-2,d=arguments;return zc(()=>{for(var f=2*c,g=Bc(8*f),k=g>>3,l=0;l<c;l++){var n=d[2+l];\"bigint\"==typeof n?(L[k+2*l]=1n,L[k+2*l+1]=n):(L[k+2*l]=0n,ha()[k+2*l+1>>>0]=n)}return Cc(a,f,g,b)})}var Dc=[],Ec={};\nfunction Fc(){if(!Gc){var a={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:ma||\"./this.program\"},b;for(b in Ec)void 0===Ec[b]?delete a[b]:a[b]=Ec[b];var c=[];for(b in a)c.push(b+\"=\"+a[b]);Gc=c}return Gc}var Gc;\nfunction Hc(a,b){if(F)return P(19,1,a,b);var c=0;Fc().forEach(function(d,f){var g=b+c;f=B()[a+4*f>>2>>>0]=g;for(g=0;g<d.length;++g)e()[f++>>0>>>0]=d.charCodeAt(g);e()[f>>0>>>0]=0;c+=d.length+1});return 0}function Ic(a,b){if(F)return P(20,1,a,b);var c=Fc();B()[a>>2>>>0]=c.length;var d=0;c.forEach(function(f){d+=f.length+1});B()[b>>2>>>0]=d;return 0}function Jc(a){return F?P(21,1,a):52}function Kc(a,b,c,d){return F?P(22,1,a,b,c,d):52}function Lc(a,b,c,d){return F?P(23,1,a,b,c,d):70}\nvar Mc=[null,[],[]];function Nc(a,b,c,d){if(F)return P(24,1,a,b,c,d);for(var f=0,g=0;g<c;g++){var k=B()[b>>2>>>0],l=B()[b+4>>2>>>0];b+=8;for(var n=0;n<l;n++){var p=y()[k+n>>>0],q=Mc[a];0===p||10===p?((1===a?wa:H)(Va(q,0)),q.length=0):q.push(p)}f+=l}B()[d>>2>>>0]=f;return 0}var Oc=[31,29,31,30,31,30,31,31,30,31,30,31],Pc=[31,28,31,30,31,30,31,31,30,31,30,31];function Qc(a){var b=Array(pb(a)+1);qb(a,b,0,b.length);return b}function Rc(a,b){e().set(a,b>>>0)}\nfunction Sc(a,b,c,d){function f(h,t,x){for(h=\"number\"==typeof h?h.toString():h||\"\";h.length<t;)h=x[0]+h;return h}function g(h,t){return f(h,t,\"0\")}function k(h,t){function x(yc){return 0>yc?-1:0<yc?1:0}var V;0===(V=x(h.getFullYear()-t.getFullYear()))&&0===(V=x(h.getMonth()-t.getMonth()))&&(V=x(h.getDate()-t.getDate()));return V}function l(h){switch(h.getDay()){case 0:return new Date(h.getFullYear()-1,11,29);case 1:return h;case 2:return new Date(h.getFullYear(),0,3);case 3:return new Date(h.getFullYear(),\n0,2);case 4:return new Date(h.getFullYear(),0,1);case 5:return new Date(h.getFullYear()-1,11,31);case 6:return new Date(h.getFullYear()-1,11,30)}}function n(h){var t=h.ub;for(h=new Date((new Date(h.vb+1900,0,1)).getTime());0<t;){var x=h.getMonth(),V=(nc(h.getFullYear())?Oc:Pc)[x];if(t>V-h.getDate())t-=V-h.getDate()+1,h.setDate(1),11>x?h.setMonth(x+1):(h.setMonth(0),h.setFullYear(h.getFullYear()+1));else{h.setDate(h.getDate()+t);break}}x=new Date(h.getFullYear()+1,0,4);t=l(new Date(h.getFullYear(),\n0,4));x=l(x);return 0>=k(t,h)?0>=k(x,h)?h.getFullYear()+1:h.getFullYear():h.getFullYear()-1}var p=A()[d+40>>2>>>0];d={ic:A()[d>>2>>>0],hc:A()[d+4>>2>>>0],Ab:A()[d+8>>2>>>0],Fb:A()[d+12>>2>>>0],Bb:A()[d+16>>2>>>0],vb:A()[d+20>>2>>>0],rb:A()[d+24>>2>>>0],ub:A()[d+28>>2>>>0],rc:A()[d+32>>2>>>0],fc:A()[d+36>>2>>>0],jc:p?Wa(p):\"\"};c=Wa(c);p={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\n\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var q in p)c=c.replace(new RegExp(q,\"g\"),p[q]);var u=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),w=\"January February March April May June July August September October November December\".split(\" \");p={\"%a\":function(h){return u[h.rb].substring(0,3)},\"%A\":function(h){return u[h.rb]},\n\"%b\":function(h){return w[h.Bb].substring(0,3)},\"%B\":function(h){return w[h.Bb]},\"%C\":function(h){return g((h.vb+1900)/100|0,2)},\"%d\":function(h){return g(h.Fb,2)},\"%e\":function(h){return f(h.Fb,2,\" \")},\"%g\":function(h){return n(h).toString().substring(2)},\"%G\":function(h){return n(h)},\"%H\":function(h){return g(h.Ab,2)},\"%I\":function(h){h=h.Ab;0==h?h=12:12<h&&(h-=12);return g(h,2)},\"%j\":function(h){for(var t=0,x=0;x<=h.Bb-1;t+=(nc(h.vb+1900)?Oc:Pc)[x++]);return g(h.Fb+t,3)},\"%m\":function(h){return g(h.Bb+\n1,2)},\"%M\":function(h){return g(h.hc,2)},\"%n\":function(){return\"\\n\"},\"%p\":function(h){return 0<=h.Ab&&12>h.Ab?\"AM\":\"PM\"},\"%S\":function(h){return g(h.ic,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(h){return h.rb||7},\"%U\":function(h){return g(Math.floor((h.ub+7-h.rb)/7),2)},\"%V\":function(h){var t=Math.floor((h.ub+7-(h.rb+6)%7)/7);2>=(h.rb+371-h.ub-2)%7&&t++;if(t)53==t&&(x=(h.rb+371-h.ub)%7,4==x||3==x&&nc(h.vb)||(t=1));else{t=52;var x=(h.rb+7-h.ub-1)%7;(4==x||5==x&&nc(h.vb%400-1))&&t++}return g(t,\n2)},\"%w\":function(h){return h.rb},\"%W\":function(h){return g(Math.floor((h.ub+7-(h.rb+6)%7)/7),2)},\"%y\":function(h){return(h.vb+1900).toString().substring(2)},\"%Y\":function(h){return h.vb+1900},\"%z\":function(h){h=h.fc;var t=0<=h;h=Math.abs(h)/60;return(t?\"+\":\"-\")+String(\"0000\"+(h/60*100+h%60)).slice(-4)},\"%Z\":function(h){return h.jc},\"%%\":function(){return\"%\"}};c=c.replace(/%%/g,\"\\x00\\x00\");for(q in p)c.includes(q)&&(c=c.replace(new RegExp(q,\"g\"),p[q](d)));c=c.replace(/\\0\\0/g,\"%\");q=Qc(c);if(q.length>\nb)return 0;Rc(q,a);return q.length-1}function Tc(a){try{a()}catch(b){I(b)}}function Uc(a){var b={},c;for(c in a)(function(d){var f=a[d];b[d]=\"function\"==typeof f?function(){Vc.push(d);try{return f.apply(null,arguments)}finally{J||(Vc.pop()===d||I(),Y&&1===Z&&0===Vc.length&&(Z=0,Fa+=1,Tc(Wc),\"undefined\"!=typeof Fibers&&Fibers.sc()))}}:f})(c);return b}var Z=0,Y=null,Xc=0,Vc=[],Yc={},Zc={},$c=0,ad=null,bd=[];\nfunction cd(){var a=uc(65548),b=a+12;A()[a>>2>>>0]=b;A()[a+4>>2>>>0]=b+65536;b=Vc[0];var c=Yc[b];void 0===c&&(c=$c++,Yc[b]=c,Zc[c]=b);b=c;A()[a+8>>2>>>0]=b;return a}function dd(){var a=A()[Y+8>>2>>>0];a=C.asm[Zc[a]];--Fa;return a()}\nfunction ed(a){if(!J){if(0===Z){var b=!1,c=!1;a((d=0)=>{if(!J&&(Xc=d,b=!0,c)){Z=2;Tc(()=>fd(Y));\"undefined\"!=typeof Browser&&Browser.Db.Ob&&Browser.Db.resume();d=!1;try{var f=dd()}catch(l){f=l,d=!0}var g=!1;if(!Y){var k=ad;k&&(ad=null,(d?k.reject:k.resolve)(f),g=!0)}if(d&&!g)throw f;}});c=!0;b||(Z=1,Y=cd(),\"undefined\"!=typeof Browser&&Browser.Db.Ob&&Browser.Db.pause(),Tc(()=>gd(Y)))}else 2===Z?(Z=0,Tc(hd),X(Y),Y=null,bd.forEach(d=>Yb(d))):I(\"invalid state: \"+Z);return Xc}}\nfunction jd(a){return ed(b=>{a().then(b)})}O.Cb();for(var kd=Array(256),ld=0;256>ld;++ld)kd[ld]=String.fromCharCode(ld);Eb=kd;Lb=C.BindingError=Kb(\"BindingError\");C.InternalError=Kb(\"InternalError\");T.kb.push({value:void 0},{value:null},{value:!0},{value:!1});T.zb=T.kb.length;C.count_emval_handles=function(){for(var a=0,b=T.zb;b<T.kb.length;++b)void 0!==T.kb[b]&&++a;return a};\nvar md=[null,Xa,Za,lb,nb,ob,sb,tb,ub,vb,wb,xb,yb,zb,Ab,Bb,Cb,rc,sc,Hc,Ic,Jc,Kc,Lc,Nc],od={ya:function(a,b,c){return jd(async()=>{await C.Ub(a,b,c)})},b:function(a,b,c){(new ib(a)).Cb(b,c);jb=a;kb++;throw jb;},ta:function(){I(\"To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html\")},ja:function(a){nd(a,!D,1,!oa);O.Jb()},E:function(a){F?postMessage({cmd:\"cleanupThread\",thread:a}):Sa(a)},Y:mb,z:nb,pa:ob,U:sb,W:tb,N:ub,na:vb,da:wb,ma:xb,G:yb,V:zb,\nS:Ab,oa:Bb,T:Cb,J:function(a,b,c,d,f){b=Q(b);c=Nb(c);var g=-1!=b.indexOf(\"u\");g&&(f=(1n<<64n)-1n);S(a,{name:b,fromWireType:function(k){return k},toWireType:function(k,l){if(\"bigint\"!=typeof l&&\"number\"!=typeof l)throw new TypeError('Cannot convert \"'+Db(l)+'\" to '+this.name);if(l<d||l>f)throw new TypeError('Passing a number \"'+Db(l)+'\" from JS side to C/C++ side to an argument of type \"'+b+'\", which is outside the valid range ['+d+\", \"+f+\"]!\");return l},argPackAdvance:8,readValueFromPointer:Mb(b,\nc,!g),xb:null})},wa:function(a,b,c,d,f){var g=Nb(c);b=Q(b);S(a,{name:b,fromWireType:function(k){return!!k},toWireType:function(k,l){return l?d:f},argPackAdvance:8,readValueFromPointer:function(k){if(1===c)var l=e();else if(2===c)l=z();else if(4===c)l=A();else throw new TypeError(\"Unknown boolean type size: \"+b);return this.fromWireType(l[k>>>g])},xb:null})},va:function(a,b){b=Q(b);S(a,{name:b,fromWireType:function(c){var d=U(c);Ob(c);return d},toWireType:function(c,d){return W(d)},argPackAdvance:8,\nreadValueFromPointer:Pb,xb:null})},I:function(a,b,c){c=Nb(c);b=Q(b);S(a,{name:b,fromWireType:function(d){return d},toWireType:function(d,f){return f},argPackAdvance:8,readValueFromPointer:Qb(b,c),xb:null})},v:function(a,b,c,d,f){b=Q(b);-1===f&&(f=4294967295);f=Nb(c);var g=l=>l;if(0===d){var k=32-8*c;g=l=>l<<k>>>k}c=b.includes(\"unsigned\")?function(l,n){return n>>>0}:function(l,n){return n};S(a,{name:b,fromWireType:g,toWireType:c,argPackAdvance:8,readValueFromPointer:Mb(b,f,0!==d),xb:null})},n:function(a,\nb,c){function d(g){g>>=2;var k=B();return new f(k.buffer,k[g+1>>>0],k[g>>>0])}var f=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array][b];c=Q(c);S(a,{name:c,fromWireType:d,argPackAdvance:8,readValueFromPointer:d},{Qb:!0})},K:function(a,b){b=Q(b);var c=\"std::string\"===b;S(a,{name:b,fromWireType:function(d){var f=B()[d>>2>>>0],g=d+4;if(c)for(var k=g,l=0;l<=f;++l){var n=g+l;if(l==f||0==y()[n>>>0]){k=Wa(k,n-k);if(void 0===p)var p=\nk;else p+=String.fromCharCode(0),p+=k;k=n+1}}else{p=Array(f);for(l=0;l<f;++l)p[l]=String.fromCharCode(y()[g+l>>>0]);p=p.join(\"\")}X(d);return p},toWireType:function(d,f){f instanceof ArrayBuffer&&(f=new Uint8Array(f));var g=\"string\"==typeof f;g||f instanceof Uint8Array||f instanceof Uint8ClampedArray||f instanceof Int8Array||R(\"Cannot pass non-string to std::string\");var k=c&&g?pb(f):f.length;var l=uc(4+k+1);var n=l+4>>>0;B()[l>>2>>>0]=k;if(c&&g)rb(f,n,k+1);else if(g)for(g=0;g<k;++g){var p=f.charCodeAt(g);\n255<p&&(X(n),R(\"String has UTF-16 code units that do not fit in 8 bits\"));y()[n+g>>>0]=p}else for(g=0;g<k;++g)y()[n+g>>>0]=f[g];null!==d&&d.push(X,l);return l},argPackAdvance:8,readValueFromPointer:Pb,xb:function(d){X(d)}})},B:function(a,b,c){c=Q(c);if(2===b){var d=Sb;var f=Tb;var g=Ub;var k=()=>ca();var l=1}else 4===b&&(d=Vb,f=Wb,g=Xb,k=()=>B(),l=2);S(a,{name:c,fromWireType:function(n){for(var p=B()[n>>>2],q=k(),u,w=n+4,h=0;h<=p;++h){var t=n+4+h*b;if(h==p||0==q[t>>>l])w=d(w,t-w),void 0===u?u=w:(u+=\nString.fromCharCode(0),u+=w),w=t+b}X(n);return u},toWireType:function(n,p){\"string\"!=typeof p&&R(\"Cannot pass non-string to C++ string type \"+c);var q=g(p),u=uc(4+q+b);u>>>=0;B()[u>>>2]=q>>l;f(p,u+4,q+b);null!==n&&n.push(X,u);return u},argPackAdvance:8,readValueFromPointer:Pb,xb:function(n){X(n)}})},xa:function(a,b){b=Q(b);S(a,{Sb:!0,name:b,argPackAdvance:0,fromWireType:function(){},toWireType:function(){}})},Z:function(){return 131072},sa:function(){return!0},Q:function(a,b){a==b?setTimeout(()=>\ncb()):F?postMessage({targetThread:a,cmd:\"checkMailbox\"}):(a=O.qb[a])&&a.postMessage({cmd:\"checkMailbox\"})},ga:function(){return-1},ia:Zb,ra:function(a){E&&O.qb[a].ref()},s:function(a,b,c){a=U(a);b=ac(b,\"emval::as\");var d=[],f=W(d);B()[c>>2>>>0]=f;return b.toWireType(d,a)},i:function(a,b,c,d,f){a=ec[a];b=U(b);c=dc(c);var g=[];B()[d>>2>>>0]=W(g);return a(b,c,g,f)},t:function(a,b,c,d){a=ec[a];b=U(b);c=dc(c);a(b,c,null,d)},c:Ob,M:function(a,b){a=U(a);b=U(b);return a==b},p:function(a){if(0===a)return W(fc());\na=dc(a);return W(fc()[a])},g:function(a,b){var c=hc(a,b),d=c[0];b=d.name+\"_$\"+c.slice(1).map(function(q){return q.name}).join(\"_\")+\"$\";var f=ic[b];if(void 0!==f)return f;f=[\"retType\"];for(var g=[d],k=\"\",l=0;l<a-1;++l)k+=(0!==l?\", \":\"\")+\"arg\"+l,f.push(\"argType\"+l),g.push(c[1+l]);var n=\"return function \"+Ib(\"methodCaller_\"+b)+\"(handle, name, destructors, args) {\\n\",p=0;for(l=0;l<a-1;++l)n+=\"    var arg\"+l+\" = argType\"+l+\".readValueFromPointer(args\"+(p?\"+\"+p:\"\")+\");\\n\",p+=c[l+1].argPackAdvance;n+=\"    var rv = handle[name](\"+\nk+\");\\n\";for(l=0;l<a-1;++l)c[l+1].deleteObject&&(n+=\"    argType\"+l+\".deleteObject(arg\"+l+\");\\n\");d.Sb||(n+=\"    return retType.toWireType(destructors, rv);\\n\");f.push(n+\"};\\n\");a=jc(f).apply(null,g);f=gc(a);return ic[b]=f},u:function(a,b){a=U(a);b=U(b);return W(a[b])},d:function(a){4<a&&(T.get(a).Hb+=1)},y:function(a,b,c,d){a=U(a);var f=lc[b];f||(f=kc(b),lc[b]=f);return f(a,c,d)},w:function(){return W([])},m:function(a){a=U(a);for(var b=Array(a.length),c=0;c<a.length;c++)b[c]=a[c];return W(b)},e:function(a){return W(dc(a))},\nl:function(){return W({})},h:function(a){for(var b=U(a);b.length;){var c=b.pop();b.pop()(c)}Ob(a)},k:function(a,b,c){a=U(a);b=U(b);c=U(c);a[b]=c},f:function(a,b){a=ac(a,\"_emval_take_value\");a=a.readValueFromPointer(b);return W(a)},aa:function(a,b){a=new Date(1E3*mc(a));A()[b>>2>>>0]=a.getUTCSeconds();A()[b+4>>2>>>0]=a.getUTCMinutes();A()[b+8>>2>>>0]=a.getUTCHours();A()[b+12>>2>>>0]=a.getUTCDate();A()[b+16>>2>>>0]=a.getUTCMonth();A()[b+20>>2>>>0]=a.getUTCFullYear()-1900;A()[b+24>>2>>>0]=a.getUTCDay();\na=(a.getTime()-Date.UTC(a.getUTCFullYear(),0,1,0,0,0,0))/864E5|0;A()[b+28>>2>>>0]=a},ba:function(a,b){a=new Date(1E3*mc(a));A()[b>>2>>>0]=a.getSeconds();A()[b+4>>2>>>0]=a.getMinutes();A()[b+8>>2>>>0]=a.getHours();A()[b+12>>2>>>0]=a.getDate();A()[b+16>>2>>>0]=a.getMonth();A()[b+20>>2>>>0]=a.getFullYear()-1900;A()[b+24>>2>>>0]=a.getDay();var c=qc(a)|0;A()[b+28>>2>>>0]=c;A()[b+36>>2>>>0]=-(60*a.getTimezoneOffset());c=(new Date(a.getFullYear(),6,1)).getTimezoneOffset();var d=(new Date(a.getFullYear(),\n0,1)).getTimezoneOffset();a=(c!=d&&a.getTimezoneOffset()==Math.min(d,c))|0;A()[b+32>>2>>>0]=a},ca:function(a){var b=new Date(A()[a+20>>2>>>0]+1900,A()[a+16>>2>>>0],A()[a+12>>2>>>0],A()[a+8>>2>>>0],A()[a+4>>2>>>0],A()[a>>2>>>0],0),c=A()[a+32>>2>>>0],d=b.getTimezoneOffset(),f=(new Date(b.getFullYear(),6,1)).getTimezoneOffset(),g=(new Date(b.getFullYear(),0,1)).getTimezoneOffset(),k=Math.min(g,f);0>c?A()[a+32>>2>>>0]=Number(f!=g&&k==d):0<c!=(k==d)&&(f=Math.max(g,f),b.setTime(b.getTime()+6E4*((0<c?k:\nf)-d)));A()[a+24>>2>>>0]=b.getDay();c=qc(b)|0;A()[a+28>>2>>>0]=c;A()[a>>2>>>0]=b.getSeconds();A()[a+4>>2>>>0]=b.getMinutes();A()[a+8>>2>>>0]=b.getHours();A()[a+12>>2>>>0]=b.getDate();A()[a+16>>2>>>0]=b.getMonth();A()[a+20>>2>>>0]=b.getYear();return b.getTime()/1E3|0},_:rc,$:sc,P:function(a,b,c){function d(p){return(p=p.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?p[1]:\"GMT\"}var f=(new Date).getFullYear(),g=new Date(f,0,1),k=new Date(f,6,1);f=g.getTimezoneOffset();var l=k.getTimezoneOffset(),n=Math.max(f,\nl);B()[a>>2>>>0]=60*n;A()[b>>2>>>0]=Number(f!=l);a=d(g);b=d(k);a=tc(a);b=tc(b);l<f?(B()[c>>2>>>0]=a,B()[c+4>>2>>>0]=b):(B()[c>>2>>>0]=b,B()[c+4>>2>>>0]=a)},o:function(){I(\"\")},ua:function(){I(\"To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html\")},j:function(a,b,c){return wc(a,b,c)},L:function(a,b,c){return wc(a,b,c)},F:function(){},H:function(){return Date.now()},qa:function(){Fa+=1;throw\"unwind\";},R:function(){return 4294901760},r:xc,x:function(){return E?\nrequire(\"os\").cpus().length:navigator.hardwareConcurrency},fa:function(a,b,c){b/=2;Dc.length=b;c>>=3;for(var d=0;d<b;d++)Dc[d]=L[c+2*d]?L[c+2*d+1]:ha()[c+2*d+1>>>0];return(0>a?Pa[-a-1]:md[a]).apply(null,Dc)},O:function(a){var b=y().length;a>>>=0;if(a<=b||4294901760<a)return!1;for(var c=1;4>=c;c*=2){var d=b*(1+.2/c);d=Math.min(d,a+100663296);var f=Math,g=f.min;d=Math.max(a,d);d+=(65536-d%65536)%65536;a:{var k=m.buffer;try{m.grow(g.call(f,4294901760,d)-k.byteLength+65535>>>16);v();var l=1;break a}catch(n){}l=\nvoid 0}if(l)return!0}return!1},ka:Hc,la:Ic,X:Ya,A:Jc,D:Kc,ea:Lc,C:Nc,a:m||C.wasmMemory,ha:Sc,q:function(a,b,c,d){return Sc(a,b,c,d)}};\n(function(){function a(c,d){c=c.exports;c=Uc(c);C.asm=c;O.Kb.push(C.asm.Ya);Da.unshift(C.asm.za);ya=d;O.Zb(()=>{M--;C.monitorRunDependencies&&C.monitorRunDependencies(M);if(0==M&&(null!==Ia&&(clearInterval(Ia),Ia=null),Ja)){var f=Ja;Ja=null;f()}});return c}var b={a:od};M++;C.monitorRunDependencies&&C.monitorRunDependencies(M);if(C.instantiateWasm)try{return C.instantiateWasm(b,a)}catch(c){H(\"Module.instantiateWasm callback failed with error: \"+c),ka(c)}Oa(b,function(c){a(c.instance,c.module)}).catch(ka);\nreturn{}})();C._OrtInit=function(){return(C._OrtInit=C.asm.Aa).apply(null,arguments)};C._OrtGetLastError=function(){return(C._OrtGetLastError=C.asm.Ba).apply(null,arguments)};C._OrtCreateSessionOptions=function(){return(C._OrtCreateSessionOptions=C.asm.Ca).apply(null,arguments)};C._OrtAppendExecutionProvider=function(){return(C._OrtAppendExecutionProvider=C.asm.Da).apply(null,arguments)};C._OrtAddSessionConfigEntry=function(){return(C._OrtAddSessionConfigEntry=C.asm.Ea).apply(null,arguments)};\nC._OrtReleaseSessionOptions=function(){return(C._OrtReleaseSessionOptions=C.asm.Fa).apply(null,arguments)};C._OrtCreateSession=function(){return(C._OrtCreateSession=C.asm.Ga).apply(null,arguments)};C._OrtReleaseSession=function(){return(C._OrtReleaseSession=C.asm.Ha).apply(null,arguments)};C._OrtGetInputOutputCount=function(){return(C._OrtGetInputOutputCount=C.asm.Ia).apply(null,arguments)};C._OrtGetInputName=function(){return(C._OrtGetInputName=C.asm.Ja).apply(null,arguments)};\nC._OrtGetOutputName=function(){return(C._OrtGetOutputName=C.asm.Ka).apply(null,arguments)};C._OrtFree=function(){return(C._OrtFree=C.asm.La).apply(null,arguments)};C._OrtCreateTensor=function(){return(C._OrtCreateTensor=C.asm.Ma).apply(null,arguments)};C._OrtGetTensorData=function(){return(C._OrtGetTensorData=C.asm.Na).apply(null,arguments)};C._OrtReleaseTensor=function(){return(C._OrtReleaseTensor=C.asm.Oa).apply(null,arguments)};\nC._OrtCreateRunOptions=function(){return(C._OrtCreateRunOptions=C.asm.Pa).apply(null,arguments)};C._OrtAddRunConfigEntry=function(){return(C._OrtAddRunConfigEntry=C.asm.Qa).apply(null,arguments)};C._OrtReleaseRunOptions=function(){return(C._OrtReleaseRunOptions=C.asm.Ra).apply(null,arguments)};C._OrtRun=function(){return(C._OrtRun=C.asm.Sa).apply(null,arguments)};C._OrtEndProfiling=function(){return(C._OrtEndProfiling=C.asm.Ta).apply(null,arguments)};\nC._JsepOutput=function(){return(C._JsepOutput=C.asm.Ua).apply(null,arguments)};var bb=C._pthread_self=function(){return(bb=C._pthread_self=C.asm.Va).apply(null,arguments)},uc=C._malloc=function(){return(uc=C._malloc=C.asm.Wa).apply(null,arguments)},X=C._free=function(){return(X=C._free=C.asm.Xa).apply(null,arguments)};C.__emscripten_tls_init=function(){return(C.__emscripten_tls_init=C.asm.Ya).apply(null,arguments)};function bc(){return(bc=C.asm.Za).apply(null,arguments)}\nC.__embind_initialize_bindings=function(){return(C.__embind_initialize_bindings=C.asm._a).apply(null,arguments)};var nd=C.__emscripten_thread_init=function(){return(nd=C.__emscripten_thread_init=C.asm.ab).apply(null,arguments)};C.__emscripten_thread_crashed=function(){return(C.__emscripten_thread_crashed=C.asm.bb).apply(null,arguments)};function Cc(){return(Cc=C.asm.cb).apply(null,arguments)}function ab(){return(ab=C.asm.db).apply(null,arguments)}\nvar hb=C.__emscripten_thread_exit=function(){return(hb=C.__emscripten_thread_exit=C.asm.eb).apply(null,arguments)},$b=C.__emscripten_check_mailbox=function(){return($b=C.__emscripten_check_mailbox=C.asm.fb).apply(null,arguments)};function eb(){return(eb=C.asm.gb).apply(null,arguments)}function Ac(){return(Ac=C.asm.hb).apply(null,arguments)}function fb(){return(fb=C.asm.ib).apply(null,arguments)}function Bc(){return(Bc=C.asm.jb).apply(null,arguments)}\nvar gb=C.dynCall_ii=function(){return(gb=C.dynCall_ii=C.asm.lb).apply(null,arguments)};function gd(){return(gd=C.asm.mb).apply(null,arguments)}function Wc(){return(Wc=C.asm.nb).apply(null,arguments)}function fd(){return(fd=C.asm.ob).apply(null,arguments)}function hd(){return(hd=C.asm.pb).apply(null,arguments)}C.___start_em_js=1306846;C.___stop_em_js=1307007;C.keepRuntimeAlive=Ga;C.wasmMemory=m;C.stackAlloc=Bc;C.stackSave=Ac;C.stackRestore=fb;C.UTF8ToString=Wa;C.stringToUTF8=rb;C.lengthBytesUTF8=pb;\nC.ExitStatus=Qa;C.PThread=O;var pd;Ja=function qd(){pd||rd();pd||(Ja=qd)};\nfunction rd(){function a(){if(!pd&&(pd=!0,C.calledRun=!0,!J)){F||db(Da);ja(C);if(C.onRuntimeInitialized)C.onRuntimeInitialized();if(!F){if(C.postRun)for(\"function\"==typeof C.postRun&&(C.postRun=[C.postRun]);C.postRun.length;){var b=C.postRun.shift();Ea.unshift(b)}db(Ea)}}}if(!(0<M))if(F)ja(C),F||db(Da),startWorker(C);else{if(C.preRun)for(\"function\"==typeof C.preRun&&(C.preRun=[C.preRun]);C.preRun.length;)Ha();db(Ca);0<M||(C.setStatus?(C.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){C.setStatus(\"\")},\n1);a()},1)):a())}}if(C.preInit)for(\"function\"==typeof C.preInit&&(C.preInit=[C.preInit]);0<C.preInit.length;)C.preInit.pop()();rd();\n\n\n  return ortWasmThreaded.ready\n}\n\n);\n})();\nif (typeof exports === 'object' && typeof module === 'object')\n  module.exports = ortWasmThreaded;\nelse if (typeof define === 'function' && define['amd'])\n  define([], function() { return ortWasmThreaded; });\nelse if (typeof exports === 'object')\n  exports[\"ortWasmThreaded\"] = ortWasmThreaded;\n","\nvar ortWasm = (() => {\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\n  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;\n  return (\nfunction(ortWasm = {})  {\n\nvar e;e||(e=typeof ortWasm !== 'undefined' ? ortWasm : {});var aa,m;e.ready=new Promise((a,b)=>{aa=a;m=b});\"use strict\";e.jsepInit=function(a,b,c,d,f,h,k,l){e.xb=a;e.nb=b;e.pb=c;e.ib=d;e.ob=f;e.Na=h;e.qb=k;e.rb=l};var ba=Object.assign({},e),ca=\"./this.program\",w=(a,b)=>{throw b;},da=\"object\"==typeof window,x=\"function\"==typeof importScripts,ea=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,y=\"\",fa,z,A;\nif(ea){var fs=require(\"fs\"),ha=require(\"path\");y=x?ha.dirname(y)+\"/\":__dirname+\"/\";fa=(a,b)=>{a=a.startsWith(\"file://\")?new URL(a):ha.normalize(a);return fs.readFileSync(a,b?void 0:\"utf8\")};A=a=>{a=fa(a,!0);a.buffer||(a=new Uint8Array(a));return a};z=(a,b,c,d=!0)=>{a=a.startsWith(\"file://\")?new URL(a):ha.normalize(a);fs.readFile(a,d?void 0:\"utf8\",(f,h)=>{f?c(f):b(d?h.buffer:h)})};!e.thisProgram&&1<process.argv.length&&(ca=process.argv[1].replace(/\\\\/g,\"/\"));process.argv.slice(2);w=(a,b)=>{process.exitCode=\na;throw b;};e.inspect=()=>\"[Emscripten Module object]\"}else if(da||x)x?y=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(y=document.currentScript.src),_scriptDir&&(y=_scriptDir),0!==y.indexOf(\"blob:\")?y=y.substr(0,y.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):y=\"\",fa=a=>{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.send(null);return b.responseText},x&&(A=a=>{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.responseType=\"arraybuffer\";b.send(null);return new Uint8Array(b.response)}),\nz=(a,b,c)=>{var d=new XMLHttpRequest;d.open(\"GET\",a,!0);d.responseType=\"arraybuffer\";d.onload=()=>{200==d.status||0==d.status&&d.response?b(d.response):c()};d.onerror=c;d.send(null)};var ia=e.print||console.log.bind(console),B=e.printErr||console.warn.bind(console);Object.assign(e,ba);ba=null;e.thisProgram&&(ca=e.thisProgram);e.quit&&(w=e.quit);var C;e.wasmBinary&&(C=e.wasmBinary);var noExitRuntime=e.noExitRuntime||!0;\"object\"!=typeof WebAssembly&&D(\"no native wasm support detected\");\nvar E,F=!1,ja,G,H,I,ka,J,K,la,ma,na,oa;function pa(){var a=E.buffer;e.HEAP8=G=new Int8Array(a);e.HEAP16=I=new Int16Array(a);e.HEAP32=J=new Int32Array(a);e.HEAPU8=H=new Uint8Array(a);e.HEAPU16=ka=new Uint16Array(a);e.HEAPU32=K=new Uint32Array(a);e.HEAPF32=la=new Float32Array(a);e.HEAPF64=oa=new Float64Array(a);e.HEAP64=ma=new BigInt64Array(a);e.HEAPU64=na=new BigUint64Array(a)}var qa=[],ra=[],sa=[];function ta(){var a=e.preRun.shift();qa.unshift(a)}var L=0,ua=null,N=null;\nfunction D(a){if(e.onAbort)e.onAbort(a);a=\"Aborted(\"+a+\")\";B(a);F=!0;ja=1;a=new WebAssembly.RuntimeError(a+\". Build with -sASSERTIONS for more info.\");m(a);throw a;}function va(a){return a.startsWith(\"data:application/octet-stream;base64,\")}var O;O=\"ort-wasm-simd.wasm\";if(!va(O)){var wa=O;O=e.locateFile?e.locateFile(wa,y):y+wa}function xa(a){try{if(a==O&&C)return new Uint8Array(C);if(A)return A(a);throw\"both async and sync fetching of the wasm failed\";}catch(b){D(b)}}\nfunction ya(a){if(!C&&(da||x)){if(\"function\"==typeof fetch&&!a.startsWith(\"file://\"))return fetch(a,{credentials:\"same-origin\"}).then(b=>{if(!b.ok)throw\"failed to load wasm binary file at '\"+a+\"'\";return b.arrayBuffer()}).catch(()=>xa(a));if(z)return new Promise((b,c)=>{z(a,d=>b(new Uint8Array(d)),c)})}return Promise.resolve().then(()=>xa(a))}function za(a,b,c){return ya(a).then(d=>WebAssembly.instantiate(d,b)).then(d=>d).then(c,d=>{B(\"failed to asynchronously prepare wasm: \"+d);D(d)})}\nfunction Aa(a,b){var c=O;return C||\"function\"!=typeof WebAssembly.instantiateStreaming||va(c)||c.startsWith(\"file://\")||ea||\"function\"!=typeof fetch?za(c,a,b):fetch(c,{credentials:\"same-origin\"}).then(d=>WebAssembly.instantiateStreaming(d,a).then(b,function(f){B(\"wasm streaming compile failed: \"+f);B(\"falling back to ArrayBuffer instantiation\");return za(c,a,b)}))}\nvar Ba={1296520:()=>{e.jsepRunPromise=new Promise(function(a){e.sb=a})},1296615:a=>{e.sb(a)},1296653:a=>e.nb(a),1296686:a=>e.pb(a),1296718:(a,b,c)=>{e.ib(a,b,c,!0)},1296757:(a,b,c)=>{e.ib(a,b,c)},1296790:a=>{e.Na(\"Abs\",a,void 0)},1296841:a=>{e.Na(\"Neg\",a,void 0)},1296892:a=>{e.Na(\"Floor\",a,void 0)},1296945:a=>{e.Na(\"Ceil\",a,void 0)},1296997:a=>{e.Na(\"Reciprocal\",a,void 0)},1297055:a=>{e.Na(\"Sqrt\",a,void 0)},1297107:a=>{e.Na(\"Exp\",a,void 0)},1297158:a=>{e.Na(\"Erf\",a,void 0)},1297209:a=>{e.Na(\"Sigmoid\",\na,void 0)},1297264:a=>{e.Na(\"Sin\",a,void 0)},1297315:a=>{e.Na(\"Cos\",a,void 0)},1297366:a=>{e.Na(\"Tan\",a,void 0)},1297417:a=>{e.Na(\"Asin\",a,void 0)},1297469:a=>{e.Na(\"Acos\",a,void 0)},1297521:a=>{e.Na(\"Atan\",a,void 0)},1297573:a=>{e.Na(\"Sinh\",a,void 0)},1297625:a=>{e.Na(\"Cosh\",a,void 0)},1297677:a=>{e.Na(\"Asinh\",a,void 0)},1297730:a=>{e.Na(\"Acosh\",a,void 0)},1297783:a=>{e.Na(\"Atanh\",a,void 0)},1297836:(a,b,c)=>{e.Na(\"ClipV10\",a,{min:b,max:c})},1297908:a=>{e.Na(\"Clip\",a,void 0)},1297960:(a,b)=>{e.Na(\"Elu\",\na,{alpha:b})},1298018:a=>{e.Na(\"Relu\",a,void 0)},1298070:(a,b)=>{e.Na(\"LeakyRelu\",a,{alpha:b})},1298134:(a,b)=>{e.Na(\"ThresholdedRelu\",a,{alpha:b})},1298204:a=>{e.Na(\"Add\",a,void 0)},1298255:a=>{e.Na(\"Sub\",a,void 0)},1298306:a=>{e.Na(\"Mul\",a,void 0)},1298357:a=>{e.Na(\"Div\",a,void 0)},1298408:a=>{e.Na(\"Pow\",a,void 0)},1298459:(a,b,c,d,f)=>{e.Na(\"ReduceMean\",a,{keepDims:!!b,noopWithEmptyAxes:!!c,axes:d?Array.from(J.subarray(f>>>0,f+d>>>0)):[]})},1298623:(a,b,c,d,f)=>{e.Na(\"ReduceMax\",a,{keepDims:!!b,\nnoopWithEmptyAxes:!!c,axes:d?Array.from(J.subarray(f>>>0,f+d>>>0)):[]})},1298786:(a,b,c,d,f)=>{e.Na(\"ReduceMin\",a,{keepDims:!!b,noopWithEmptyAxes:!!c,axes:d?Array.from(J.subarray(f>>>0,f+d>>>0)):[]})},1298949:(a,b,c,d,f)=>{e.Na(\"ReduceProd\",a,{keepDims:!!b,noopWithEmptyAxes:!!c,axes:d?Array.from(J.subarray(f>>>0,f+d>>>0)):[]})},1299113:(a,b,c,d,f)=>{e.Na(\"ReduceSum\",a,{keepDims:!!b,noopWithEmptyAxes:!!c,axes:d?Array.from(J.subarray(f>>>0,f+d>>>0)):[]})},1299276:(a,b,c,d,f)=>{e.Na(\"ReduceL1\",a,{keepDims:!!b,\nnoopWithEmptyAxes:!!c,axes:d?Array.from(J.subarray(f>>>0,f+d>>>0)):[]})},1299438:(a,b,c,d,f)=>{e.Na(\"ReduceL2\",a,{keepDims:!!b,noopWithEmptyAxes:!!c,axes:d?Array.from(J.subarray(f>>>0,f+d>>>0)):[]})},1299600:(a,b,c,d,f)=>{e.Na(\"ReduceLogSum\",a,{keepDims:!!b,noopWithEmptyAxes:!!c,axes:d?Array.from(J.subarray(f>>>0,f+d>>>0)):[]})},1299766:(a,b,c,d,f)=>{e.Na(\"ReduceSumSquare\",a,{keepDims:!!b,noopWithEmptyAxes:!!c,axes:d?Array.from(J.subarray(f>>>0,f+d>>>0)):[]})},1299935:(a,b,c,d,f)=>{e.Na(\"ReduceLogSumExp\",\na,{keepDims:!!b,noopWithEmptyAxes:!!c,axes:d?Array.from(J.subarray(f>>>0,f+d>>>0)):[]})},1300104:(a,b,c)=>{e.Na(\"Transpose\",a,{perm:b?Array.from(J.subarray(c>>>0,c+b>>>0)):[]})},1300217:(a,b,c,d,f,h,k,l,n,p)=>{e.Na(\"Conv\",a,{format:n?\"NHWC\":\"NCHW\",auto_pad:b,dilations:[c],group:d,kernel_shape:[f],pads:[h,k],strides:[l],w_is_const:()=>!!G[p>>>0]})},1300445:(a,b,c,d,f,h,k,l,n,p,q,t,u,g,r)=>{e.Na(\"Conv\",a,{format:g?\"NHWC\":\"NCHW\",auto_pad:b,dilations:[c,d],group:f,kernel_shape:[h,k],pads:[l,n,p,q],strides:[t,\nu],w_is_const:()=>!!G[r>>>0]})},1300704:(a,b,c,d,f,h,k,l,n,p)=>{e.Na(\"Conv\",a,{format:n?\"NHWC\":\"NCHW\",auto_pad:b,dilations:[c],group:d,kernel_shape:[f],pads:[h,k],strides:[l],w_is_const:()=>!!G[p>>>0]})},1300932:(a,b,c,d,f,h,k,l,n,p,q,t,u,g,r)=>{e.Na(\"Conv\",a,{format:g?\"NHWC\":\"NCHW\",auto_pad:b,dilations:[c,d],group:f,kernel_shape:[h,k],pads:[l,n,p,q],strides:[t,u],w_is_const:()=>!!G[r>>>0]})},1301191:(a,b,c,d,f,h,k,l,n,p,q,t,u,g)=>{e.Na(\"ConvTranspose\",a,{format:n?\"NHWC\":\"NCHW\",autoPad:b,dilations:[c],\ngroup:d,kernel_shape:[f],pads:[h,k],strides:[l],wIsConst:()=>!!G[p>>>0],outputPadding:q?Array.from(J.subarray(t>>>0,t+q>>>0)):[],outputShape:u?Array.from(J.subarray(u>>>0,g+u>>>0)):[]})},1301571:(a,b,c,d,f,h,k,l,n,p,q,t,u)=>{e.Na(\"ConvTranspose\",a,{format:l?\"NHWC\":\"NCHW\",autoPad:b,dilations:Array.from(J.subarray(c>>>0,c+2>>>0)),group:d,kernelShape:Array.from(J.subarray(f>>>0,f+2>>>0)),pads:Array.from(J.subarray(h>>>0,h+4>>>0)),strides:Array.from(J.subarray(k>>>0,k+2>>>0)),wIsConst:()=>!!G[n>>>0],\noutputPadding:0<p?Array.from(J.subarray(q>>>0,q+p>>>0)):[],outputShape:0<t?Array.from(J.subarray(u>>>0,u+t>>>0)):[]})},1302094:(a,b,c,d,f,h,k,l,n,p,q,t,u,g)=>{e.Na(\"ConvTranspose\",a,{format:n?\"NHWC\":\"NCHW\",autoPad:b,dilations:[c],group:d,kernel_shape:[f],pads:[h,k],strides:[l],wIsConst:()=>!!G[p>>>0],outputPadding:q?Array.from(J.subarray(t>>>0,t+q>>>0)):[],outputShape:u?Array.from(J.subarray(u>>>0,g+u>>>0)):[]})},1302474:(a,b,c,d,f,h,k,l,n,p,q,t,u)=>{e.Na(\"ConvTranspose\",a,{format:l?\"NHWC\":\"NCHW\",\nautoPad:b,dilations:Array.from(J.subarray(c>>>0,c+2>>>0)),group:d,kernelShape:Array.from(J.subarray(f>>>0,f+2>>>0)),pads:Array.from(J.subarray(h>>>0,h+4>>>0)),strides:Array.from(J.subarray(k>>>0,k+2>>>0)),wIsConst:()=>!!G[n>>>0],outputPadding:0<p?Array.from(J.subarray(q>>>0,q+p>>>0)):[],outputShape:0<t?Array.from(J.subarray(u>>>0,u+t>>>0)):[]})},1302997:(a,b)=>{e.Na(\"GlobalAveragePool\",a,{format:b?\"NHWC\":\"NCHW\"})},1303088:(a,b,c,d,f,h,k,l,n,p,q,t,u,g,r,v)=>{e.Na(\"AveragePool\",a,{format:v?\"NHWC\":\"NCHW\",\nauto_pad:b,ceil_mode:c,count_include_pad:d,storage_order:f,dilations:[h,k],kernel_shape:[l,n],pads:[p,q,t,u],strides:[g,r]})},1303372:(a,b)=>{e.Na(\"GlobalAveragePool\",a,{format:b?\"NHWC\":\"NCHW\"})},1303463:(a,b,c,d,f,h,k,l,n,p,q,t,u,g,r,v)=>{e.Na(\"AveragePool\",a,{format:v?\"NHWC\":\"NCHW\",auto_pad:b,ceil_mode:c,count_include_pad:d,storage_order:f,dilations:[h,k],kernel_shape:[l,n],pads:[p,q,t,u],strides:[g,r]})},1303747:(a,b)=>{e.Na(\"GlobalMaxPool\",a,{format:b?\"NHWC\":\"NCHW\"})},1303834:(a,b,c,d,f,h,k,l,\nn,p,q,t,u,g,r,v)=>{e.Na(\"MaxPool\",a,{format:v?\"NHWC\":\"NCHW\",auto_pad:b,ceil_mode:c,count_include_pad:d,storage_order:f,dilations:[h,k],kernel_shape:[l,n],pads:[p,q,t,u],strides:[g,r]})},1304114:(a,b)=>{e.Na(\"GlobalMaxPool\",a,{format:b?\"NHWC\":\"NCHW\"})},1304201:(a,b,c,d,f,h,k,l,n,p,q,t,u,g,r,v)=>{e.Na(\"MaxPool\",a,{format:v?\"NHWC\":\"NCHW\",auto_pad:b,ceil_mode:c,count_include_pad:d,storage_order:f,dilations:[h,k],kernel_shape:[l,n],pads:[p,q,t,u],strides:[g,r]})},1304481:(a,b,c,d,f)=>{e.Na(\"Gemm\",a,{alpha:b,\nbeta:c,transA:d,transB:f})},1304585:a=>{e.Na(\"MatMul\",a,void 0)},1304639:(a,b)=>{e.Na(\"Concat\",a,{axis:b})},1304699:(a,b,c,d,f)=>{e.Na(\"Split\",a,{axis:b,numOutputs:c,splitSizes:d?Array.from(J.subarray(f>>>0,f+d>>>0)):[]})},1304844:a=>{e.Na(\"Expand\",a,void 0)},1304898:(a,b,c,d,f,h,k)=>{e.Na(\"Slice\",a,{starts:b?Array.from(J.subarray(c>>>0,c+b>>>0)):[],ends:d?Array.from(J.subarray(f>>>0,f+d>>>0)):[],axes:h?Array.from(J.subarray(k>>>0,k+h>>>0)):[]})},1305129:a=>{e.qb(a)},1305163:(a,b)=>e.rb(a,b)};\nfunction Ca(a){this.name=\"ExitStatus\";this.message=\"Program terminated with exit(\"+a+\")\";this.status=a}function Da(a){for(;0<a.length;)a.shift()(e)}function Ea(a){this.Ra=a-24;this.fb=function(b){K[this.Ra+4>>2>>>0]=b};this.eb=function(b){K[this.Ra+8>>2>>>0]=b};this.$a=function(b,c){this.ab();this.fb(b);this.eb(c)};this.ab=function(){K[this.Ra+16>>2>>>0]=0}}var Fa=0,Ga=0,Ha=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;\nfunction Ia(a,b,c){b>>>=0;var d=b+c;for(c=b;a[c]&&!(c>=d);)++c;if(16<c-b&&a.buffer&&Ha)return Ha.decode(a.subarray(b,c));for(d=\"\";b<c;){var f=a[b++];if(f&128){var h=a[b++]&63;if(192==(f&224))d+=String.fromCharCode((f&31)<<6|h);else{var k=a[b++]&63;f=224==(f&240)?(f&15)<<12|h<<6|k:(f&7)<<18|h<<12|k<<6|a[b++]&63;65536>f?d+=String.fromCharCode(f):(f-=65536,d+=String.fromCharCode(55296|f>>10,56320|f&1023))}}else d+=String.fromCharCode(f)}return d}function Ja(a,b){return(a>>>=0)?Ia(H,a,b):\"\"}\nfunction Ka(a){for(var b=0,c=0;c<a.length;++c){var d=a.charCodeAt(c);127>=d?b++:2047>=d?b+=2:55296<=d&&57343>=d?(b+=4,++c):b+=3}return b}\nfunction La(a,b,c,d){c>>>=0;if(!(0<d))return 0;var f=c;d=c+d-1;for(var h=0;h<a.length;++h){var k=a.charCodeAt(h);if(55296<=k&&57343>=k){var l=a.charCodeAt(++h);k=65536+((k&1023)<<10)|l&1023}if(127>=k){if(c>=d)break;b[c++>>>0]=k}else{if(2047>=k){if(c+1>=d)break;b[c++>>>0]=192|k>>6}else{if(65535>=k){if(c+2>=d)break;b[c++>>>0]=224|k>>12}else{if(c+3>=d)break;b[c++>>>0]=240|k>>18;b[c++>>>0]=128|k>>12&63}b[c++>>>0]=128|k>>6&63}b[c++>>>0]=128|k&63}}b[c>>>0]=0;return c-f}\nfunction Ma(a,b,c){return La(a,H,b,c)}function Na(a){if(null===a)return\"null\";var b=typeof a;return\"object\"===b||\"array\"===b||\"function\"===b?a.toString():\"\"+a}var Oa=void 0;function P(a){for(var b=\"\";H[a>>>0];)b+=Oa[H[a++>>>0]];return b}var Pa={},Qa={},Ra={};function Sa(a){if(void 0===a)return\"_unknown\";a=a.replace(/[^a-zA-Z0-9_]/g,\"$\");var b=a.charCodeAt(0);return 48<=b&&57>=b?\"_\"+a:a}function Ta(a,b){a=Sa(a);return{[a]:function(){return b.apply(this,arguments)}}[a]}\nfunction Ua(a){var b=Error,c=Ta(a,function(d){this.name=a;this.message=d;d=Error(d).stack;void 0!==d&&(this.stack=this.toString()+\"\\n\"+d.replace(/^Error(:[^\\n]*)?\\n/,\"\"))});c.prototype=Object.create(b.prototype);c.prototype.constructor=c;c.prototype.toString=function(){return void 0===this.message?this.name:this.name+\": \"+this.message};return c}var Va=void 0;function Q(a){throw new Va(a);}\nfunction R(a,b,c={}){if(!(\"argPackAdvance\"in b))throw new TypeError(\"registerType registeredInstance requires argPackAdvance\");var d=b.name;a||Q('type \"'+d+'\" must have a positive integer typeid pointer');if(Qa.hasOwnProperty(a)){if(c.lb)return;Q(\"Cannot register type '\"+d+\"' twice\")}Qa[a]=b;delete Ra[a];Pa.hasOwnProperty(a)&&(b=Pa[a],delete Pa[a],b.forEach(f=>f()))}\nfunction Wa(a,b,c){switch(b){case 0:return c?function(d){return G[d>>>0]}:function(d){return H[d>>>0]};case 1:return c?function(d){return I[d>>>1]}:function(d){return ka[d>>>1]};case 2:return c?function(d){return J[d>>>2]}:function(d){return K[d>>>2]};case 3:return c?function(d){return ma[d>>3]}:function(d){return na[d>>3]};default:throw new TypeError(\"Unknown integer type: \"+a);}}\nfunction Xa(a){switch(a){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError(\"Unknown type size: \"+a);}}var S=new function(){this.Ra=[void 0];this.$a=[];this.get=function(a){return this.Ra[a]};this.eb=function(a){let b=this.$a.pop()||this.Ra.length;this.Ra[b]=a;return b};this.fb=function(a){this.Ra[a]=void 0;this.$a.push(a)}};function Ya(a){a>=S.ab&&0===--S.get(a).jb&&S.fb(a)}\nvar T=a=>{a||Q(\"Cannot use deleted val. handle = \"+a);return S.get(a).value},U=a=>{switch(a){case void 0:return 1;case null:return 2;case !0:return 3;case !1:return 4;default:return S.eb({jb:1,value:a})}};function Za(a){return this.fromWireType(J[a>>2>>>0])}function $a(a,b){switch(b){case 2:return function(c){return this.fromWireType(la[c>>>2])};case 3:return function(c){return this.fromWireType(oa[c>>>3])};default:throw new TypeError(\"Unknown float type: \"+a);}}\nvar ab=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf-16le\"):void 0;function bb(a,b){var c=a>>1;for(var d=c+b/2;!(c>=d)&&ka[c>>>0];)++c;c<<=1;if(32<c-a&&ab)return ab.decode(H.subarray(a>>>0,c>>>0));c=\"\";for(d=0;!(d>=b/2);++d){var f=I[a+2*d>>1>>>0];if(0==f)break;c+=String.fromCharCode(f)}return c}function cb(a,b,c){void 0===c&&(c=2147483647);if(2>c)return 0;c-=2;var d=b;c=c<2*a.length?c/2:a.length;for(var f=0;f<c;++f)I[b>>1>>>0]=a.charCodeAt(f),b+=2;I[b>>1>>>0]=0;return b-d}\nfunction db(a){return 2*a.length}function eb(a,b){for(var c=0,d=\"\";!(c>=b/4);){var f=J[a+4*c>>2>>>0];if(0==f)break;++c;65536<=f?(f-=65536,d+=String.fromCharCode(55296|f>>10,56320|f&1023)):d+=String.fromCharCode(f)}return d}function fb(a,b,c){b>>>=0;void 0===c&&(c=2147483647);if(4>c)return 0;var d=b;c=d+c-4;for(var f=0;f<a.length;++f){var h=a.charCodeAt(f);if(55296<=h&&57343>=h){var k=a.charCodeAt(++f);h=65536+((h&1023)<<10)|k&1023}J[b>>2>>>0]=h;b+=4;if(b+4>c)break}J[b>>2>>>0]=0;return b-d}\nfunction gb(a){for(var b=0,c=0;c<a.length;++c){var d=a.charCodeAt(c);55296<=d&&57343>=d&&++c;b+=4}return b}function hb(a,b){var c=Qa[a];if(void 0===c){a=ib(a);var d=P(a);V(a);Q(b+\" has unknown type \"+d)}return c}var jb={};function kb(a){var b=jb[a];return void 0===b?P(a):b}var lb=[];function mb(){return\"object\"==typeof globalThis?globalThis:Function(\"return this\")()}function nb(a){var b=lb.length;lb.push(a);return b}\nfunction pb(a,b){for(var c=Array(a),d=0;d<a;++d)c[d]=hb(K[b+4*d>>2>>>0],\"parameter \"+d);return c}var qb=[];function rb(a){var b=Function;if(!(b instanceof Function))throw new TypeError(\"new_ called with constructor type \"+typeof b+\" which is not a function\");var c=Ta(b.name||\"unknownFunctionName\",function(){});c.prototype=b.prototype;c=new c;a=b.apply(c,a);return a instanceof Object?a:c}\nfunction sb(a){for(var b=\"\",c=0;c<a;++c)b+=(0!==c?\", \":\"\")+\"arg\"+c;var d=\"return function emval_allocator_\"+a+\"(constructor, argTypes, args) {\\n  var HEAPU32 = getMemory();\\n\";for(c=0;c<a;++c)d+=\"var argType\"+c+\" = requireRegisteredType(HEAPU32[((argTypes)>>2)], 'parameter \"+c+\"');\\nvar arg\"+c+\" = argType\"+c+\".readValueFromPointer(args);\\nargs += argType\"+c+\"['argPackAdvance'];\\nargTypes += 4;\\n\";return(new Function(\"requireRegisteredType\",\"Module\",\"valueToHandle\",\"getMemory\",d+(\"var obj = new constructor(\"+\nb+\");\\nreturn valueToHandle(obj);\\n}\\n\")))(hb,e,U,()=>K)}var tb={};function W(a){return 0===a%4&&(0!==a%100||0===a%400)}var ub=[0,31,60,91,121,152,182,213,244,274,305,335],vb=[0,31,59,90,120,151,181,212,243,273,304,334];function wb(a){return(W(a.getFullYear())?ub:vb)[a.getMonth()]+a.getDate()-1}function xb(a){var b=Ka(a)+1,c=X(b);c&&Ma(a,c,b);return c}var yb=[];\nfunction zb(a,b,c){yb.length=0;var d;for(c>>=2;d=H[b++>>>0];)c+=105!=d&c,yb.push(105==d?J[c>>>0]:(106==d?ma:oa)[c++>>1]),++c;return Ba[a].apply(null,yb)}var Ab;Ab=ea?()=>{var a=process.hrtime();return 1E3*a[0]+a[1]/1E6}:()=>performance.now();var Bb={};\nfunction Cb(){if(!Db){var a={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:ca||\"./this.program\"},b;for(b in Bb)void 0===Bb[b]?delete a[b]:a[b]=Bb[b];var c=[];for(b in a)c.push(b+\"=\"+a[b]);Db=c}return Db}var Db,Eb=[null,[],[]],Fb=[31,29,31,30,31,30,31,31,30,31,30,31],Gb=[31,28,31,30,31,30,31,31,30,31,30,31];\nfunction Hb(a){var b=Array(Ka(a)+1);La(a,b,0,b.length);return b}\nfunction Ib(a,b,c,d){function f(g,r,v){for(g=\"number\"==typeof g?g.toString():g||\"\";g.length<r;)g=v[0]+g;return g}function h(g,r){return f(g,r,\"0\")}function k(g,r){function v(ob){return 0>ob?-1:0<ob?1:0}var M;0===(M=v(g.getFullYear()-r.getFullYear()))&&0===(M=v(g.getMonth()-r.getMonth()))&&(M=v(g.getDate()-r.getDate()));return M}function l(g){switch(g.getDay()){case 0:return new Date(g.getFullYear()-1,11,29);case 1:return g;case 2:return new Date(g.getFullYear(),0,3);case 3:return new Date(g.getFullYear(),\n0,2);case 4:return new Date(g.getFullYear(),0,1);case 5:return new Date(g.getFullYear()-1,11,31);case 6:return new Date(g.getFullYear()-1,11,30)}}function n(g){var r=g.Xa;for(g=new Date((new Date(g.Ya+1900,0,1)).getTime());0<r;){var v=g.getMonth(),M=(W(g.getFullYear())?Fb:Gb)[v];if(r>M-g.getDate())r-=M-g.getDate()+1,g.setDate(1),11>v?g.setMonth(v+1):(g.setMonth(0),g.setFullYear(g.getFullYear()+1));else{g.setDate(g.getDate()+r);break}}v=new Date(g.getFullYear()+1,0,4);r=l(new Date(g.getFullYear(),\n0,4));v=l(v);return 0>=k(r,g)?0>=k(v,g)?g.getFullYear()+1:g.getFullYear():g.getFullYear()-1}var p=J[d+40>>2>>>0];d={vb:J[d>>2>>>0],ub:J[d+4>>2>>>0],bb:J[d+8>>2>>>0],hb:J[d+12>>2>>>0],cb:J[d+16>>2>>>0],Ya:J[d+20>>2>>>0],Wa:J[d+24>>2>>>0],Xa:J[d+28>>2>>>0],yb:J[d+32>>2>>>0],tb:J[d+36>>2>>>0],wb:p?Ja(p):\"\"};c=Ja(c);p={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\n\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var q in p)c=c.replace(new RegExp(q,\"g\"),p[q]);var t=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),u=\"January February March April May June July August September October November December\".split(\" \");p={\"%a\":function(g){return t[g.Wa].substring(0,3)},\"%A\":function(g){return t[g.Wa]},\"%b\":function(g){return u[g.cb].substring(0,\n3)},\"%B\":function(g){return u[g.cb]},\"%C\":function(g){return h((g.Ya+1900)/100|0,2)},\"%d\":function(g){return h(g.hb,2)},\"%e\":function(g){return f(g.hb,2,\" \")},\"%g\":function(g){return n(g).toString().substring(2)},\"%G\":function(g){return n(g)},\"%H\":function(g){return h(g.bb,2)},\"%I\":function(g){g=g.bb;0==g?g=12:12<g&&(g-=12);return h(g,2)},\"%j\":function(g){for(var r=0,v=0;v<=g.cb-1;r+=(W(g.Ya+1900)?Fb:Gb)[v++]);return h(g.hb+r,3)},\"%m\":function(g){return h(g.cb+1,2)},\"%M\":function(g){return h(g.ub,\n2)},\"%n\":function(){return\"\\n\"},\"%p\":function(g){return 0<=g.bb&&12>g.bb?\"AM\":\"PM\"},\"%S\":function(g){return h(g.vb,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(g){return g.Wa||7},\"%U\":function(g){return h(Math.floor((g.Xa+7-g.Wa)/7),2)},\"%V\":function(g){var r=Math.floor((g.Xa+7-(g.Wa+6)%7)/7);2>=(g.Wa+371-g.Xa-2)%7&&r++;if(r)53==r&&(v=(g.Wa+371-g.Xa)%7,4==v||3==v&&W(g.Ya)||(r=1));else{r=52;var v=(g.Wa+7-g.Xa-1)%7;(4==v||5==v&&W(g.Ya%400-1))&&r++}return h(r,2)},\"%w\":function(g){return g.Wa},\"%W\":function(g){return h(Math.floor((g.Xa+\n7-(g.Wa+6)%7)/7),2)},\"%y\":function(g){return(g.Ya+1900).toString().substring(2)},\"%Y\":function(g){return g.Ya+1900},\"%z\":function(g){g=g.tb;var r=0<=g;g=Math.abs(g)/60;return(r?\"+\":\"-\")+String(\"0000\"+(g/60*100+g%60)).slice(-4)},\"%Z\":function(g){return g.wb},\"%%\":function(){return\"%\"}};c=c.replace(/%%/g,\"\\x00\\x00\");for(q in p)c.includes(q)&&(c=c.replace(new RegExp(q,\"g\"),p[q](d)));c=c.replace(/\\0\\0/g,\"%\");q=Hb(c);if(q.length>b)return 0;G.set(q,a>>>0);return q.length-1}\nfunction Jb(a){try{a()}catch(b){D(b)}}function Kb(a){a instanceof Ca||\"unwind\"==a||w(1,a)}function Lb(a){var b={},c;for(c in a)(function(d){var f=a[d];b[d]=\"function\"==typeof f?function(){Mb.push(d);try{return f.apply(null,arguments)}finally{F||(Mb.pop()===d||D(),Y&&1===Z&&0===Mb.length&&(Z=0,Jb(Nb),\"undefined\"!=typeof Fibers&&Fibers.zb()))}}:f})(c);return b}var Z=0,Y=null,Ob=0,Mb=[],Pb={},Qb={},Rb=0,Sb=null,Tb=[];\nfunction Ub(){var a=X(65548),b=a+12;J[a>>2>>>0]=b;J[a+4>>2>>>0]=b+65536;b=Mb[0];var c=Pb[b];void 0===c&&(c=Rb++,Pb[b]=c,Qb[c]=b);J[a+8>>2>>>0]=c;return a}\nfunction Vb(a){if(!F){if(0===Z){var b=!1,c=!1;a((d=0)=>{if(!F&&(Ob=d,b=!0,c)){Z=2;Jb(()=>Wb(Y));\"undefined\"!=typeof Browser&&Browser.gb.kb&&Browser.gb.resume();d=!1;try{var f=(0,e.asm[Qb[J[Y+8>>2>>>0]]])()}catch(l){f=l,d=!0}var h=!1;if(!Y){var k=Sb;k&&(Sb=null,(d?k.reject:k.resolve)(f),h=!0)}if(d&&!h)throw f;}});c=!0;b||(Z=1,Y=Ub(),\"undefined\"!=typeof Browser&&Browser.gb.kb&&Browser.gb.pause(),Jb(()=>Xb(Y)))}else 2===Z?(Z=0,Jb(Yb),V(Y),Y=null,Tb.forEach(d=>{if(!F)try{if(d(),!noExitRuntime)try{ja=\nja=d=ja;if(!noExitRuntime){if(e.onExit)e.onExit(d);F=!0}w(d,new Ca(d))}catch(f){Kb(f)}}catch(f){Kb(f)}})):D(\"invalid state: \"+Z);return Ob}}function Zb(a){return Vb(b=>{a().then(b)})}for(var $b=Array(256),ac=0;256>ac;++ac)$b[ac]=String.fromCharCode(ac);Oa=$b;Va=e.BindingError=Ua(\"BindingError\");e.InternalError=Ua(\"InternalError\");S.Ra.push({value:void 0},{value:null},{value:!0},{value:!1});S.ab=S.Ra.length;\ne.count_emval_handles=function(){for(var a=0,b=S.ab;b<S.Ra.length;++b)void 0!==S.Ra[b]&&++a;return a};\nvar bc={la:function(a,b,c){return Zb(async()=>{await e.ob(a,b,c)})},a:function(a,b,c){(new Ea(a)).$a(b,c);Fa=a;Ga++;throw Fa;},ga:function(){D(\"To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html\")},w:function(){return 0},ea:function(){},P:function(){},R:function(){},J:function(){return 0},ba:function(){},X:function(){},aa:function(){},B:function(){},Q:function(){},N:function(){},ca:function(){},O:function(){},E:function(a,b,c,d,f){b=P(b);\nc=Xa(c);var h=-1!=b.indexOf(\"u\");h&&(f=(1n<<64n)-1n);R(a,{name:b,fromWireType:function(k){return k},toWireType:function(k,l){if(\"bigint\"!=typeof l&&\"number\"!=typeof l)throw new TypeError('Cannot convert \"'+Na(l)+'\" to '+this.name);if(l<d||l>f)throw new TypeError('Passing a number \"'+Na(l)+'\" from JS side to C/C++ side to an argument of type \"'+b+'\", which is outside the valid range ['+d+\", \"+f+\"]!\");return l},argPackAdvance:8,readValueFromPointer:Wa(b,c,!h),Za:null})},ja:function(a,b,c,d,f){var h=\nXa(c);b=P(b);R(a,{name:b,fromWireType:function(k){return!!k},toWireType:function(k,l){return l?d:f},argPackAdvance:8,readValueFromPointer:function(k){if(1===c)var l=G;else if(2===c)l=I;else if(4===c)l=J;else throw new TypeError(\"Unknown boolean type size: \"+b);return this.fromWireType(l[k>>>h])},Za:null})},ia:function(a,b){b=P(b);R(a,{name:b,fromWireType:function(c){var d=T(c);Ya(c);return d},toWireType:function(c,d){return U(d)},argPackAdvance:8,readValueFromPointer:Za,Za:null})},D:function(a,b,\nc){c=Xa(c);b=P(b);R(a,{name:b,fromWireType:function(d){return d},toWireType:function(d,f){return f},argPackAdvance:8,readValueFromPointer:$a(b,c),Za:null})},q:function(a,b,c,d,f){b=P(b);-1===f&&(f=4294967295);f=Xa(c);var h=l=>l;if(0===d){var k=32-8*c;h=l=>l<<k>>>k}c=b.includes(\"unsigned\")?function(l,n){return n>>>0}:function(l,n){return n};R(a,{name:b,fromWireType:h,toWireType:c,argPackAdvance:8,readValueFromPointer:Wa(b,f,0!==d),Za:null})},m:function(a,b,c){function d(h){h>>=2;var k=K;return new f(k.buffer,\nk[h+1>>>0],k[h>>>0])}var f=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array][b];c=P(c);R(a,{name:c,fromWireType:d,argPackAdvance:8,readValueFromPointer:d},{lb:!0})},F:function(a,b){b=P(b);var c=\"std::string\"===b;R(a,{name:b,fromWireType:function(d){var f=K[d>>2>>>0],h=d+4;if(c)for(var k=h,l=0;l<=f;++l){var n=h+l;if(l==f||0==H[n>>>0]){k=Ja(k,n-k);if(void 0===p)var p=k;else p+=String.fromCharCode(0),p+=k;k=n+1}}else{p=Array(f);\nfor(l=0;l<f;++l)p[l]=String.fromCharCode(H[h+l>>>0]);p=p.join(\"\")}V(d);return p},toWireType:function(d,f){f instanceof ArrayBuffer&&(f=new Uint8Array(f));var h=\"string\"==typeof f;h||f instanceof Uint8Array||f instanceof Uint8ClampedArray||f instanceof Int8Array||Q(\"Cannot pass non-string to std::string\");var k=c&&h?Ka(f):f.length;var l=X(4+k+1);var n=l+4>>>0;K[l>>2>>>0]=k;if(c&&h)Ma(f,n,k+1);else if(h)for(h=0;h<k;++h){var p=f.charCodeAt(h);255<p&&(V(n),Q(\"String has UTF-16 code units that do not fit in 8 bits\"));\nH[n+h>>>0]=p}else for(h=0;h<k;++h)H[n+h>>>0]=f[h];null!==d&&d.push(V,l);return l},argPackAdvance:8,readValueFromPointer:Za,Za:function(d){V(d)}})},y:function(a,b,c){c=P(c);if(2===b){var d=bb;var f=cb;var h=db;var k=()=>ka;var l=1}else 4===b&&(d=eb,f=fb,h=gb,k=()=>K,l=2);R(a,{name:c,fromWireType:function(n){for(var p=K[n>>>2],q=k(),t,u=n+4,g=0;g<=p;++g){var r=n+4+g*b;if(g==p||0==q[r>>>l])u=d(u,r-u),void 0===t?t=u:(t+=String.fromCharCode(0),t+=u),u=r+b}V(n);return t},toWireType:function(n,p){\"string\"!=\ntypeof p&&Q(\"Cannot pass non-string to C++ string type \"+c);var q=h(p),t=X(4+q+b);t>>>=0;K[t>>>2]=q>>l;f(p,t+4,q+b);null!==n&&n.push(V,t);return t},argPackAdvance:8,readValueFromPointer:Za,Za:function(n){V(n)}})},ka:function(a,b){b=P(b);R(a,{mb:!0,name:b,argPackAdvance:0,fromWireType:function(){},toWireType:function(){}})},fa:function(){return!0},p:function(a,b,c){a=T(a);b=hb(b,\"emval::as\");var d=[],f=U(d);K[c>>2>>>0]=f;return b.toWireType(d,a)},i:function(a,b,c,d,f){a=lb[a];b=T(b);c=kb(c);var h=\n[];K[d>>2>>>0]=U(h);return a(b,c,h,f)},r:function(a,b,c,d){a=lb[a];b=T(b);c=kb(c);a(b,c,null,d)},b:Ya,H:function(a,b){a=T(a);b=T(b);return a==b},v:function(a){if(0===a)return U(mb());a=kb(a);return U(mb()[a])},g:function(a,b){var c=pb(a,b),d=c[0];b=d.name+\"_$\"+c.slice(1).map(function(q){return q.name}).join(\"_\")+\"$\";var f=qb[b];if(void 0!==f)return f;f=[\"retType\"];for(var h=[d],k=\"\",l=0;l<a-1;++l)k+=(0!==l?\", \":\"\")+\"arg\"+l,f.push(\"argType\"+l),h.push(c[1+l]);var n=\"return function \"+Sa(\"methodCaller_\"+\nb)+\"(handle, name, destructors, args) {\\n\",p=0;for(l=0;l<a-1;++l)n+=\"    var arg\"+l+\" = argType\"+l+\".readValueFromPointer(args\"+(p?\"+\"+p:\"\")+\");\\n\",p+=c[l+1].argPackAdvance;n+=\"    var rv = handle[name](\"+k+\");\\n\";for(l=0;l<a-1;++l)c[l+1].deleteObject&&(n+=\"    argType\"+l+\".deleteObject(arg\"+l+\");\\n\");d.mb||(n+=\"    return retType.toWireType(destructors, rv);\\n\");f.push(n+\"};\\n\");a=rb(f).apply(null,h);f=nb(a);return qb[b]=f},s:function(a,b){a=T(a);b=T(b);return U(a[b])},c:function(a){4<a&&(S.get(a).jb+=\n1)},I:function(a,b,c,d){a=T(a);var f=tb[b];f||(f=sb(b),tb[b]=f);return f(a,c,d)},t:function(){return U([])},l:function(a){a=T(a);for(var b=Array(a.length),c=0;c<a.length;c++)b[c]=a[c];return U(b)},d:function(a){return U(kb(a))},k:function(){return U({})},f:function(a){for(var b=T(a);b.length;){var c=b.pop();b.pop()(c)}Ya(a)},j:function(a,b,c){a=T(a);b=T(b);c=T(c);a[b]=c},e:function(a,b){a=hb(a,\"_emval_take_value\");a=a.readValueFromPointer(b);return U(a)},U:function(a,b){a=new Date(1E3*(K[a>>>2]+4294967296*\nJ[a+4>>>2]));J[b>>2>>>0]=a.getUTCSeconds();J[b+4>>2>>>0]=a.getUTCMinutes();J[b+8>>2>>>0]=a.getUTCHours();J[b+12>>2>>>0]=a.getUTCDate();J[b+16>>2>>>0]=a.getUTCMonth();J[b+20>>2>>>0]=a.getUTCFullYear()-1900;J[b+24>>2>>>0]=a.getUTCDay();J[b+28>>2>>>0]=(a.getTime()-Date.UTC(a.getUTCFullYear(),0,1,0,0,0,0))/864E5|0},V:function(a,b){a=new Date(1E3*(K[a>>>2]+4294967296*J[a+4>>>2]));J[b>>2>>>0]=a.getSeconds();J[b+4>>2>>>0]=a.getMinutes();J[b+8>>2>>>0]=a.getHours();J[b+12>>2>>>0]=a.getDate();J[b+16>>2>>>0]=\na.getMonth();J[b+20>>2>>>0]=a.getFullYear()-1900;J[b+24>>2>>>0]=a.getDay();J[b+28>>2>>>0]=wb(a)|0;J[b+36>>2>>>0]=-(60*a.getTimezoneOffset());var c=(new Date(a.getFullYear(),6,1)).getTimezoneOffset(),d=(new Date(a.getFullYear(),0,1)).getTimezoneOffset();J[b+32>>2>>>0]=(c!=d&&a.getTimezoneOffset()==Math.min(d,c))|0},W:function(a){var b=new Date(J[a+20>>2>>>0]+1900,J[a+16>>2>>>0],J[a+12>>2>>>0],J[a+8>>2>>>0],J[a+4>>2>>>0],J[a>>2>>>0],0),c=J[a+32>>2>>>0],d=b.getTimezoneOffset(),f=(new Date(b.getFullYear(),\n6,1)).getTimezoneOffset(),h=(new Date(b.getFullYear(),0,1)).getTimezoneOffset(),k=Math.min(h,f);0>c?J[a+32>>2>>>0]=Number(f!=h&&k==d):0<c!=(k==d)&&(f=Math.max(h,f),b.setTime(b.getTime()+6E4*((0<c?k:f)-d)));J[a+24>>2>>>0]=b.getDay();J[a+28>>2>>>0]=wb(b)|0;J[a>>2>>>0]=b.getSeconds();J[a+4>>2>>>0]=b.getMinutes();J[a+8>>2>>>0]=b.getHours();J[a+12>>2>>>0]=b.getDate();J[a+16>>2>>>0]=b.getMonth();J[a+20>>2>>>0]=b.getYear();return b.getTime()/1E3|0},S:function(){return-52},T:function(){},L:function(a,b,c){function d(n){return(n=\nn.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?n[1]:\"GMT\"}var f=(new Date).getFullYear(),h=new Date(f,0,1),k=new Date(f,6,1);f=h.getTimezoneOffset();var l=k.getTimezoneOffset();K[a>>2>>>0]=60*Math.max(f,l);J[b>>2>>>0]=Number(f!=l);a=d(h);b=d(k);a=xb(a);b=xb(b);l<f?(K[c>>2>>>0]=a,K[c+4>>2>>>0]=b):(K[c>>2>>>0]=b,K[c+4>>2>>>0]=a)},u:function(){D(\"\")},ha:function(){D(\"To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html\")},h:function(a,b,c){return zb(a,\nb,c)},G:function(a,b,c){return zb(a,b,c)},C:function(){return Date.now()},M:function(){return 4294901760},o:Ab,$:function(a,b,c){H.copyWithin(a>>>0,b>>>0,b+c>>>0)},K:function(a){var b=H.length;a>>>=0;if(4294901760<a)return!1;for(var c=1;4>=c;c*=2){var d=b*(1+.2/c);d=Math.min(d,a+100663296);var f=Math,h=f.min;d=Math.max(a,d);d+=(65536-d%65536)%65536;a:{var k=E.buffer;try{E.grow(h.call(f,4294901760,d)-k.byteLength+65535>>>16);pa();var l=1;break a}catch(n){}l=void 0}if(l)return!0}return!1},Z:function(a,\nb){var c=0;Cb().forEach(function(d,f){var h=b+c;f=K[a+4*f>>2>>>0]=h;for(h=0;h<d.length;++h)G[f++>>0>>>0]=d.charCodeAt(h);G[f>>0>>>0]=0;c+=d.length+1});return 0},_:function(a,b){var c=Cb();K[a>>2>>>0]=c.length;var d=0;c.forEach(function(f){d+=f.length+1});K[b>>2>>>0]=d;return 0},x:function(){return 52},A:function(){return 52},Y:function(){return 70},z:function(a,b,c,d){for(var f=0,h=0;h<c;h++){var k=K[b>>2>>>0],l=K[b+4>>2>>>0];b+=8;for(var n=0;n<l;n++){var p=H[k+n>>>0],q=Eb[a];0===p||10===p?((1===\na?ia:B)(Ia(q,0)),q.length=0):q.push(p)}f+=l}K[d>>2>>>0]=f;return 0},da:Ib,n:function(a,b,c,d){return Ib(a,b,c,d)}};\n(function(){function a(c){c=c.exports;c=Lb(c);e.asm=c;E=e.asm.ma;pa();ra.unshift(e.asm.na);L--;e.monitorRunDependencies&&e.monitorRunDependencies(L);if(0==L&&(null!==ua&&(clearInterval(ua),ua=null),N)){var d=N;N=null;d()}return c}var b={a:bc};L++;e.monitorRunDependencies&&e.monitorRunDependencies(L);if(e.instantiateWasm)try{return e.instantiateWasm(b,a)}catch(c){B(\"Module.instantiateWasm callback failed with error: \"+c),m(c)}Aa(b,function(c){a(c.instance)}).catch(m);return{}})();\ne._OrtInit=function(){return(e._OrtInit=e.asm.oa).apply(null,arguments)};e._OrtGetLastError=function(){return(e._OrtGetLastError=e.asm.pa).apply(null,arguments)};e._OrtCreateSessionOptions=function(){return(e._OrtCreateSessionOptions=e.asm.qa).apply(null,arguments)};e._OrtAppendExecutionProvider=function(){return(e._OrtAppendExecutionProvider=e.asm.ra).apply(null,arguments)};e._OrtAddSessionConfigEntry=function(){return(e._OrtAddSessionConfigEntry=e.asm.sa).apply(null,arguments)};\ne._OrtReleaseSessionOptions=function(){return(e._OrtReleaseSessionOptions=e.asm.ta).apply(null,arguments)};e._OrtCreateSession=function(){return(e._OrtCreateSession=e.asm.ua).apply(null,arguments)};e._OrtReleaseSession=function(){return(e._OrtReleaseSession=e.asm.va).apply(null,arguments)};e._OrtGetInputOutputCount=function(){return(e._OrtGetInputOutputCount=e.asm.wa).apply(null,arguments)};e._OrtGetInputName=function(){return(e._OrtGetInputName=e.asm.xa).apply(null,arguments)};\ne._OrtGetOutputName=function(){return(e._OrtGetOutputName=e.asm.ya).apply(null,arguments)};e._OrtFree=function(){return(e._OrtFree=e.asm.za).apply(null,arguments)};e._OrtCreateTensor=function(){return(e._OrtCreateTensor=e.asm.Aa).apply(null,arguments)};e._OrtGetTensorData=function(){return(e._OrtGetTensorData=e.asm.Ba).apply(null,arguments)};e._OrtReleaseTensor=function(){return(e._OrtReleaseTensor=e.asm.Ca).apply(null,arguments)};\ne._OrtCreateRunOptions=function(){return(e._OrtCreateRunOptions=e.asm.Da).apply(null,arguments)};e._OrtAddRunConfigEntry=function(){return(e._OrtAddRunConfigEntry=e.asm.Ea).apply(null,arguments)};e._OrtReleaseRunOptions=function(){return(e._OrtReleaseRunOptions=e.asm.Fa).apply(null,arguments)};e._OrtRun=function(){return(e._OrtRun=e.asm.Ga).apply(null,arguments)};e._OrtEndProfiling=function(){return(e._OrtEndProfiling=e.asm.Ha).apply(null,arguments)};\ne._JsepOutput=function(){return(e._JsepOutput=e.asm.Ia).apply(null,arguments)};var X=e._malloc=function(){return(X=e._malloc=e.asm.Ja).apply(null,arguments)},V=e._free=function(){return(V=e._free=e.asm.Ka).apply(null,arguments)};function ib(){return(ib=e.asm.La).apply(null,arguments)}e.__embind_initialize_bindings=function(){return(e.__embind_initialize_bindings=e.asm.Ma).apply(null,arguments)};function cc(){return(cc=e.asm.Oa).apply(null,arguments)}\nfunction dc(){return(dc=e.asm.Pa).apply(null,arguments)}function ec(){return(ec=e.asm.Qa).apply(null,arguments)}function Xb(){return(Xb=e.asm.Sa).apply(null,arguments)}function Nb(){return(Nb=e.asm.Ta).apply(null,arguments)}function Wb(){return(Wb=e.asm.Ua).apply(null,arguments)}function Yb(){return(Yb=e.asm.Va).apply(null,arguments)}e.___start_em_js=1305198;e.___stop_em_js=1305359;e.stackAlloc=ec;e.stackSave=cc;e.stackRestore=dc;e.UTF8ToString=Ja;e.stringToUTF8=Ma;e.lengthBytesUTF8=Ka;var fc;\nN=function gc(){fc||hc();fc||(N=gc)};\nfunction hc(){function a(){if(!fc&&(fc=!0,e.calledRun=!0,!F)){Da(ra);aa(e);if(e.onRuntimeInitialized)e.onRuntimeInitialized();if(e.postRun)for(\"function\"==typeof e.postRun&&(e.postRun=[e.postRun]);e.postRun.length;){var b=e.postRun.shift();sa.unshift(b)}Da(sa)}}if(!(0<L)){if(e.preRun)for(\"function\"==typeof e.preRun&&(e.preRun=[e.preRun]);e.preRun.length;)ta();Da(qa);0<L||(e.setStatus?(e.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){e.setStatus(\"\")},1);a()},1)):a())}}\nif(e.preInit)for(\"function\"==typeof e.preInit&&(e.preInit=[e.preInit]);0<e.preInit.length;)e.preInit.pop()();hc();\n\n\n  return ortWasm.ready\n}\n\n);\n})();\nif (typeof exports === 'object' && typeof module === 'object')\n  module.exports = ortWasm;\nelse if (typeof define === 'function' && define['amd'])\n  define([], function() { return ortWasm; });\nelse if (typeof exports === 'object')\n  exports[\"ortWasm\"] = ortWasm;\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nexports.__esModule = true;\r\nvar Guid = /** @class */ (function () {\r\n    function Guid(guid) {\r\n        if (!guid) {\r\n            throw new TypeError(\"Invalid argument; `value` has no value.\");\r\n        }\r\n        this.value = Guid.EMPTY;\r\n        if (guid && Guid.isGuid(guid)) {\r\n            this.value = guid;\r\n        }\r\n    }\r\n    Guid.isGuid = function (guid) {\r\n        var value = guid.toString();\r\n        return guid && (guid instanceof Guid || Guid.validator.test(value));\r\n    };\r\n    Guid.create = function () {\r\n        return new Guid([Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\"));\r\n    };\r\n    Guid.createEmpty = function () {\r\n        return new Guid(\"emptyguid\");\r\n    };\r\n    Guid.parse = function (guid) {\r\n        return new Guid(guid);\r\n    };\r\n    Guid.raw = function () {\r\n        return [Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\");\r\n    };\r\n    Guid.gen = function (count) {\r\n        var out = \"\";\r\n        for (var i = 0; i < count; i++) {\r\n            // tslint:disable-next-line:no-bitwise\r\n            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n        }\r\n        return out;\r\n    };\r\n    Guid.prototype.equals = function (other) {\r\n        // Comparing string `value` against provided `guid` will auto-call\r\n        // toString on `guid` for comparison\r\n        return Guid.isGuid(other) && this.value === other.toString();\r\n    };\r\n    Guid.prototype.isEmpty = function () {\r\n        return this.value === Guid.EMPTY;\r\n    };\r\n    Guid.prototype.toString = function () {\r\n        return this.value;\r\n    };\r\n    Guid.prototype.toJSON = function () {\r\n        return {\r\n            value: this.value\r\n        };\r\n    };\r\n    Guid.validator = new RegExp(\"^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$\", \"i\");\r\n    Guid.EMPTY = \"00000000-0000-0000-0000-000000000000\";\r\n    return Guid;\r\n}());\r\nexports.Guid = Guid;\r\n","// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available across modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    CustomError.prototype = Object.create(Error.prototype, {\n        constructor: {\n            value: CustomError,\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n        name: {\n            get: function get() { return name; },\n            set: undefined,\n            enumerable: false,\n            // configurable: false would accurately preserve the behavior of\n            // the original, but I'm guessing that was not intentional.\n            // For an actual error subclass, this property would\n            // be configurable.\n            configurable: true,\n        },\n        toString: {\n            value: function value() { return this.name + \": \" + this.message; },\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n    });\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.resolveBackend = exports.registerBackend = void 0;\nconst backends = {};\nconst backendsSortedByPriority = [];\n/**\n * Register a backend.\n *\n * @param name - the name as a key to lookup as an execution provider.\n * @param backend - the backend object.\n * @param priority - an integer indicating the priority of the backend. Higher number means higher priority. if priority\n * < 0, it will be considered as a 'beta' version and will not be used as a fallback backend by default.\n *\n * @internal\n */\nconst registerBackend = (name, backend, priority) => {\n    if (backend && typeof backend.init === 'function' && typeof backend.createSessionHandler === 'function') {\n        const currentBackend = backends[name];\n        if (currentBackend === undefined) {\n            backends[name] = { backend, priority };\n        }\n        else if (currentBackend.priority > priority) {\n            // same name is already registered with a higher priority. skip registeration.\n            return;\n        }\n        else if (currentBackend.priority === priority) {\n            if (currentBackend.backend !== backend) {\n                throw new Error(`cannot register backend \"${name}\" using priority ${priority}`);\n            }\n        }\n        if (priority >= 0) {\n            const i = backendsSortedByPriority.indexOf(name);\n            if (i !== -1) {\n                backendsSortedByPriority.splice(i, 1);\n            }\n            for (let i = 0; i < backendsSortedByPriority.length; i++) {\n                if (backends[backendsSortedByPriority[i]].priority <= priority) {\n                    backendsSortedByPriority.splice(i, 0, name);\n                    return;\n                }\n            }\n            backendsSortedByPriority.push(name);\n        }\n        return;\n    }\n    throw new TypeError('not a valid backend');\n};\nexports.registerBackend = registerBackend;\n/**\n * Resolve backend by specified hints.\n *\n * @param backendHints - a list of execution provider names to lookup. If omitted use registered backends as list.\n * @returns a promise that resolves to the backend.\n *\n * @internal\n */\nconst resolveBackend = async (backendHints) => {\n    const backendNames = backendHints.length === 0 ? backendsSortedByPriority : backendHints;\n    const errors = [];\n    for (const backendName of backendNames) {\n        const backendInfo = backends[backendName];\n        if (backendInfo) {\n            if (backendInfo.initialized) {\n                return backendInfo.backend;\n            }\n            else if (backendInfo.aborted) {\n                continue; // current backend is unavailable; try next\n            }\n            const isInitializing = !!backendInfo.initPromise;\n            try {\n                if (!isInitializing) {\n                    backendInfo.initPromise = backendInfo.backend.init();\n                }\n                await backendInfo.initPromise;\n                backendInfo.initialized = true;\n                return backendInfo.backend;\n            }\n            catch (e) {\n                if (!isInitializing) {\n                    errors.push({ name: backendName, err: e });\n                }\n                backendInfo.aborted = true;\n            }\n            finally {\n                delete backendInfo.initPromise;\n            }\n        }\n    }\n    throw new Error(`no available backend found. ERR: ${errors.map(e => `[${e.name}] ${e.err}`).join(', ')}`);\n};\nexports.resolveBackend = resolveBackend;\n//# sourceMappingURL=backend-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.registerBackend = void 0;\nvar backend_impl_js_1 = require(\"./backend-impl.js\");\nObject.defineProperty(exports, \"registerBackend\", { enumerable: true, get: function () { return backend_impl_js_1.registerBackend; } });\n//# sourceMappingURL=backend.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.env = void 0;\nconst version_js_1 = require(\"./version.js\");\nlet logLevelValue = 'warning';\nexports.env = {\n    wasm: {},\n    webgl: {},\n    webgpu: {},\n    versions: { common: version_js_1.version },\n    set logLevel(value) {\n        if (value === undefined) {\n            return;\n        }\n        if (typeof value !== 'string' || ['verbose', 'info', 'warning', 'error', 'fatal'].indexOf(value) === -1) {\n            throw new Error(`Unsupported logging level: ${value}`);\n        }\n        logLevelValue = value;\n    },\n    get logLevel() {\n        return logLevelValue;\n    },\n};\n// set property 'logLevel' so that they can be correctly transferred to worker by `postMessage()`.\nObject.defineProperty(exports.env, 'logLevel', { enumerable: true });\n//# sourceMappingURL=env-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.env = void 0;\nconst env_impl_js_1 = require(\"./env-impl.js\");\n/**\n * Represent a set of flags as a global singleton.\n */\nexports.env = env_impl_js_1.env;\n//# sourceMappingURL=env.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * # ONNX Runtime JavaScript API\n *\n * ONNX Runtime JavaScript API is a unified API for all JavaScript usages, including the following NPM packages:\n *\n * - [onnxruntime-node](https://www.npmjs.com/package/onnxruntime-node)\n * - [onnxruntime-web](https://www.npmjs.com/package/onnxruntime-web)\n * - [onnxruntime-react-native](https://www.npmjs.com/package/onnxruntime-react-native)\n *\n * See also:\n * - [Get Started](https://onnxruntime.ai/docs/get-started/with-javascript.html)\n * - [Inference examples](https://github.com/microsoft/onnxruntime-inference-examples/tree/main/js)\n *\n * @packageDocumentation\n */\n__exportStar(require(\"./backend.js\"), exports);\n__exportStar(require(\"./env.js\"), exports);\n__exportStar(require(\"./inference-session.js\"), exports);\n__exportStar(require(\"./tensor.js\"), exports);\n__exportStar(require(\"./onnx-value.js\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InferenceSession = void 0;\nconst backend_impl_js_1 = require(\"./backend-impl.js\");\nconst tensor_js_1 = require(\"./tensor.js\");\nclass InferenceSession {\n    constructor(handler) {\n        this.handler = handler;\n    }\n    async run(feeds, arg1, arg2) {\n        const fetches = {};\n        let options = {};\n        // check inputs\n        if (typeof feeds !== 'object' || feeds === null || feeds instanceof tensor_js_1.Tensor || Array.isArray(feeds)) {\n            throw new TypeError('\\'feeds\\' must be an object that use input names as keys and OnnxValue as corresponding values.');\n        }\n        let isFetchesEmpty = true;\n        // determine which override is being used\n        if (typeof arg1 === 'object') {\n            if (arg1 === null) {\n                throw new TypeError('Unexpected argument[1]: cannot be null.');\n            }\n            if (arg1 instanceof tensor_js_1.Tensor) {\n                throw new TypeError('\\'fetches\\' cannot be a Tensor');\n            }\n            if (Array.isArray(arg1)) {\n                if (arg1.length === 0) {\n                    throw new TypeError('\\'fetches\\' cannot be an empty array.');\n                }\n                isFetchesEmpty = false;\n                // output names\n                for (const name of arg1) {\n                    if (typeof name !== 'string') {\n                        throw new TypeError('\\'fetches\\' must be a string array or an object.');\n                    }\n                    if (this.outputNames.indexOf(name) === -1) {\n                        throw new RangeError(`'fetches' contains invalid output name: ${name}.`);\n                    }\n                    fetches[name] = null;\n                }\n                if (typeof arg2 === 'object' && arg2 !== null) {\n                    options = arg2;\n                }\n                else if (typeof arg2 !== 'undefined') {\n                    throw new TypeError('\\'options\\' must be an object.');\n                }\n            }\n            else {\n                // decide whether arg1 is fetches or options\n                // if any output name is present and its value is valid OnnxValue, we consider it fetches\n                let isFetches = false;\n                const arg1Keys = Object.getOwnPropertyNames(arg1);\n                for (const name of this.outputNames) {\n                    if (arg1Keys.indexOf(name) !== -1) {\n                        const v = arg1[name];\n                        if (v === null || v instanceof tensor_js_1.Tensor) {\n                            isFetches = true;\n                            isFetchesEmpty = false;\n                            fetches[name] = v;\n                        }\n                    }\n                }\n                if (isFetches) {\n                    if (typeof arg2 === 'object' && arg2 !== null) {\n                        options = arg2;\n                    }\n                    else if (typeof arg2 !== 'undefined') {\n                        throw new TypeError('\\'options\\' must be an object.');\n                    }\n                }\n                else {\n                    options = arg1;\n                }\n            }\n        }\n        else if (typeof arg1 !== 'undefined') {\n            throw new TypeError('Unexpected argument[1]: must be \\'fetches\\' or \\'options\\'.');\n        }\n        // check if all inputs are in feed\n        for (const name of this.inputNames) {\n            if (typeof feeds[name] === 'undefined') {\n                throw new Error(`input '${name}' is missing in 'feeds'.`);\n            }\n        }\n        // if no fetches is specified, we use the full output names list\n        if (isFetchesEmpty) {\n            for (const name of this.outputNames) {\n                fetches[name] = null;\n            }\n        }\n        // feeds, fetches and options are prepared\n        const results = await this.handler.run(feeds, fetches, options);\n        const returnValue = {};\n        for (const key in results) {\n            if (Object.hasOwnProperty.call(results, key)) {\n                returnValue[key] = new tensor_js_1.Tensor(results[key].type, results[key].data, results[key].dims);\n            }\n        }\n        return returnValue;\n    }\n    async release() {\n        return this.handler.dispose();\n    }\n    static async create(arg0, arg1, arg2, arg3) {\n        // either load from a file or buffer\n        let filePathOrUint8Array;\n        let options = {};\n        if (typeof arg0 === 'string') {\n            filePathOrUint8Array = arg0;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n        }\n        else if (arg0 instanceof Uint8Array) {\n            filePathOrUint8Array = arg0;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n        }\n        else if (arg0 instanceof ArrayBuffer ||\n            (typeof SharedArrayBuffer !== 'undefined' && arg0 instanceof SharedArrayBuffer)) {\n            const buffer = arg0;\n            let byteOffset = 0;\n            let byteLength = arg0.byteLength;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 === 'number') {\n                byteOffset = arg1;\n                if (!Number.isSafeInteger(byteOffset)) {\n                    throw new RangeError('\\'byteOffset\\' must be an integer.');\n                }\n                if (byteOffset < 0 || byteOffset >= buffer.byteLength) {\n                    throw new RangeError(`'byteOffset' is out of range [0, ${buffer.byteLength}).`);\n                }\n                byteLength = arg0.byteLength - byteOffset;\n                if (typeof arg2 === 'number') {\n                    byteLength = arg2;\n                    if (!Number.isSafeInteger(byteLength)) {\n                        throw new RangeError('\\'byteLength\\' must be an integer.');\n                    }\n                    if (byteLength <= 0 || byteOffset + byteLength > buffer.byteLength) {\n                        throw new RangeError(`'byteLength' is out of range (0, ${buffer.byteLength - byteOffset}].`);\n                    }\n                    if (typeof arg3 === 'object' && arg3 !== null) {\n                        options = arg3;\n                    }\n                    else if (typeof arg3 !== 'undefined') {\n                        throw new TypeError('\\'options\\' must be an object.');\n                    }\n                }\n                else if (typeof arg2 !== 'undefined') {\n                    throw new TypeError('\\'byteLength\\' must be a number.');\n                }\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n            filePathOrUint8Array = new Uint8Array(buffer, byteOffset, byteLength);\n        }\n        else {\n            throw new TypeError('Unexpected argument[0]: must be \\'path\\' or \\'buffer\\'.');\n        }\n        // get backend hints\n        const eps = options.executionProviders || [];\n        const backendHints = eps.map(i => typeof i === 'string' ? i : i.name);\n        const backend = await (0, backend_impl_js_1.resolveBackend)(backendHints);\n        const handler = await backend.createSessionHandler(filePathOrUint8Array, options);\n        return new InferenceSession(handler);\n    }\n    startProfiling() {\n        this.handler.startProfiling();\n    }\n    endProfiling() {\n        this.handler.endProfiling();\n    }\n    get inputNames() {\n        return this.handler.inputNames;\n    }\n    get outputNames() {\n        return this.handler.outputNames;\n    }\n}\nexports.InferenceSession = InferenceSession;\n//# sourceMappingURL=inference-session-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InferenceSession = void 0;\nconst inference_session_impl_js_1 = require(\"./inference-session-impl.js\");\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexports.InferenceSession = inference_session_impl_js_1.InferenceSession;\n//# sourceMappingURL=inference-session.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=onnx-value.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.tensorToImageData = exports.tensorToDataURL = void 0;\n/**\n * implementation of Tensor.toDataURL()\n */\nconst tensorToDataURL = (tensor, options) => {\n    const canvas = document.createElement('canvas');\n    canvas.width = tensor.dims[3];\n    canvas.height = tensor.dims[2];\n    const pixels2DContext = canvas.getContext('2d');\n    if (pixels2DContext != null) {\n        // Default values for height and width & format\n        let width;\n        let height;\n        if (options?.tensorLayout !== undefined && options.tensorLayout === 'NHWC') {\n            width = tensor.dims[2];\n            height = tensor.dims[3];\n        }\n        else { // Default layout is NCWH\n            width = tensor.dims[3];\n            height = tensor.dims[2];\n        }\n        const inputformat = options?.format !== undefined ? options.format : 'RGB';\n        const norm = options?.norm;\n        let normMean;\n        let normBias;\n        if (norm === undefined || norm.mean === undefined) {\n            normMean = [255, 255, 255, 255];\n        }\n        else {\n            if (typeof (norm.mean) === 'number') {\n                normMean = [norm.mean, norm.mean, norm.mean, norm.mean];\n            }\n            else {\n                normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 0];\n                if (norm.mean[3] !== undefined) {\n                    normMean[3] = norm.mean[3];\n                }\n            }\n        }\n        if (norm === undefined || norm.bias === undefined) {\n            normBias = [0, 0, 0, 0];\n        }\n        else {\n            if (typeof (norm.bias) === 'number') {\n                normBias = [norm.bias, norm.bias, norm.bias, norm.bias];\n            }\n            else {\n                normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];\n                if (norm.bias[3] !== undefined) {\n                    normBias[3] = norm.bias[3];\n                }\n            }\n        }\n        const stride = height * width;\n        // Default pointer assignments\n        let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;\n        // Updating the pointer assignments based on the input image format\n        if (inputformat === 'RGBA') {\n            rTensorPointer = 0;\n            gTensorPointer = stride;\n            bTensorPointer = stride * 2;\n            aTensorPointer = stride * 3;\n        }\n        else if (inputformat === 'RGB') {\n            rTensorPointer = 0;\n            gTensorPointer = stride;\n            bTensorPointer = stride * 2;\n        }\n        else if (inputformat === 'RBG') {\n            rTensorPointer = 0;\n            bTensorPointer = stride;\n            gTensorPointer = stride * 2;\n        }\n        for (let i = 0; i < height; i++) {\n            for (let j = 0; j < width; j++) {\n                const R = (tensor.data[rTensorPointer++] - normBias[0]) * normMean[0]; // R value\n                const G = (tensor.data[gTensorPointer++] - normBias[1]) * normMean[1]; // G value\n                const B = (tensor.data[bTensorPointer++] - normBias[2]) * normMean[2]; // B value\n                const A = aTensorPointer === -1 ?\n                    255 :\n                    (tensor.data[aTensorPointer++] - normBias[3]) * normMean[3]; // A value\n                // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n                pixels2DContext.fillStyle = 'rgba(' + R + ',' + G + ',' + B + ',' + A + ')';\n                pixels2DContext.fillRect(j, i, 1, 1);\n            }\n        }\n        return canvas.toDataURL();\n    }\n    else {\n        throw new Error('Can not access image data');\n    }\n};\nexports.tensorToDataURL = tensorToDataURL;\n/**\n * implementation of Tensor.toImageData()\n */\nconst tensorToImageData = (tensor, options) => {\n    const pixels2DContext = document.createElement('canvas').getContext('2d');\n    let image;\n    if (pixels2DContext != null) {\n        // Default values for height and width & format\n        let width;\n        let height;\n        let channels;\n        if (options?.tensorLayout !== undefined && options.tensorLayout === 'NHWC') {\n            width = tensor.dims[2];\n            height = tensor.dims[1];\n            channels = tensor.dims[3];\n        }\n        else { // Default layout is NCWH\n            width = tensor.dims[3];\n            height = tensor.dims[2];\n            channels = tensor.dims[1];\n        }\n        const inputformat = options !== undefined ? (options.format !== undefined ? options.format : 'RGB') : 'RGB';\n        const norm = options?.norm;\n        let normMean;\n        let normBias;\n        if (norm === undefined || norm.mean === undefined) {\n            normMean = [255, 255, 255, 255];\n        }\n        else {\n            if (typeof (norm.mean) === 'number') {\n                normMean = [norm.mean, norm.mean, norm.mean, norm.mean];\n            }\n            else {\n                normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 255];\n                if (norm.mean[3] !== undefined) {\n                    normMean[3] = norm.mean[3];\n                }\n            }\n        }\n        if (norm === undefined || norm.bias === undefined) {\n            normBias = [0, 0, 0, 0];\n        }\n        else {\n            if (typeof (norm.bias) === 'number') {\n                normBias = [norm.bias, norm.bias, norm.bias, norm.bias];\n            }\n            else {\n                normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];\n                if (norm.bias[3] !== undefined) {\n                    normBias[3] = norm.bias[3];\n                }\n            }\n        }\n        const stride = height * width;\n        if (options !== undefined) {\n            if (options.format !== undefined && (channels === 4 && options.format !== 'RGBA') ||\n                (channels === 3 && (options.format !== 'RGB' && options.format !== 'BGR'))) {\n                throw new Error('Tensor format doesn\\'t match input tensor dims');\n            }\n        }\n        // Default pointer assignments\n        const step = 4;\n        let rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;\n        let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;\n        // Updating the pointer assignments based on the input image format\n        if (inputformat === 'RGBA') {\n            rTensorPointer = 0;\n            gTensorPointer = stride;\n            bTensorPointer = stride * 2;\n            aTensorPointer = stride * 3;\n        }\n        else if (inputformat === 'RGB') {\n            rTensorPointer = 0;\n            gTensorPointer = stride;\n            bTensorPointer = stride * 2;\n        }\n        else if (inputformat === 'RBG') {\n            rTensorPointer = 0;\n            bTensorPointer = stride;\n            gTensorPointer = stride * 2;\n        }\n        image = pixels2DContext.createImageData(width, height);\n        for (let i = 0; i < height * width; rImagePointer += step, gImagePointer += step, bImagePointer += step, aImagePointer += step, i++) {\n            image.data[rImagePointer] = (tensor.data[rTensorPointer++] - normBias[0]) * normMean[0]; // R value\n            image.data[gImagePointer] = (tensor.data[gTensorPointer++] - normBias[1]) * normMean[1]; // G value\n            image.data[bImagePointer] = (tensor.data[bTensorPointer++] - normBias[2]) * normMean[2]; // B value\n            image.data[aImagePointer] = aTensorPointer === -1 ?\n                255 :\n                (tensor.data[aTensorPointer++] - normBias[3]) * normMean[3]; // A value\n        }\n    }\n    else {\n        throw new Error('Can not access image data');\n    }\n    return image;\n};\nexports.tensorToImageData = tensorToImageData;\n//# sourceMappingURL=tensor-conversion-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.tensorFromImage = exports.bufferToTensor = void 0;\nconst tensor_js_1 = require(\"./tensor.js\");\n/**\n * Create a new tensor object from image object\n *\n * @param buffer - Extracted image buffer data - assuming RGBA format\n * @param imageFormat - input image configuration - required configurations height, width, format\n * @param tensorFormat - output tensor configuration - Default is RGB format\n */\nconst bufferToTensor = (buffer, options) => {\n    if (buffer === undefined) {\n        throw new Error('Image buffer must be defined');\n    }\n    if (options.height === undefined || options.width === undefined) {\n        throw new Error('Image height and width must be defined');\n    }\n    if (options.tensorLayout === 'NHWC') {\n        throw new Error('NHWC Tensor layout is not supported yet');\n    }\n    const { height, width } = options;\n    const norm = options.norm ?? { mean: 255, bias: 0 };\n    let normMean;\n    let normBias;\n    if (typeof (norm.mean) === 'number') {\n        normMean = [norm.mean, norm.mean, norm.mean, norm.mean];\n    }\n    else {\n        normMean = [norm.mean[0], norm.mean[1], norm.mean[2], norm.mean[3] ?? 255];\n    }\n    if (typeof (norm.bias) === 'number') {\n        normBias = [norm.bias, norm.bias, norm.bias, norm.bias];\n    }\n    else {\n        normBias = [norm.bias[0], norm.bias[1], norm.bias[2], norm.bias[3] ?? 0];\n    }\n    const inputformat = options.format !== undefined ? options.format : 'RGBA';\n    // default value is RGBA since imagedata and HTMLImageElement uses it\n    const outputformat = options.tensorFormat !== undefined ?\n        (options.tensorFormat !== undefined ? options.tensorFormat : 'RGB') :\n        'RGB';\n    const stride = height * width;\n    const float32Data = outputformat === 'RGBA' ? new Float32Array(stride * 4) : new Float32Array(stride * 3);\n    // Default pointer assignments\n    let step = 4, rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;\n    let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;\n    // Updating the pointer assignments based on the input image format\n    if (inputformat === 'RGB') {\n        step = 3;\n        rImagePointer = 0;\n        gImagePointer = 1;\n        bImagePointer = 2;\n        aImagePointer = -1;\n    }\n    // Updating the pointer assignments based on the output tensor format\n    if (outputformat === 'RGBA') {\n        aTensorPointer = stride * 3;\n    }\n    else if (outputformat === 'RBG') {\n        rTensorPointer = 0;\n        bTensorPointer = stride;\n        gTensorPointer = stride * 2;\n    }\n    else if (outputformat === 'BGR') {\n        bTensorPointer = 0;\n        gTensorPointer = stride;\n        rTensorPointer = stride * 2;\n    }\n    for (let i = 0; i < stride; i++, rImagePointer += step, bImagePointer += step, gImagePointer += step, aImagePointer += step) {\n        float32Data[rTensorPointer++] = (buffer[rImagePointer] + normBias[0]) / normMean[0];\n        float32Data[gTensorPointer++] = (buffer[gImagePointer] + normBias[1]) / normMean[1];\n        float32Data[bTensorPointer++] = (buffer[bImagePointer] + normBias[2]) / normMean[2];\n        if (aTensorPointer !== -1 && aImagePointer !== -1) {\n            float32Data[aTensorPointer++] = (buffer[aImagePointer] + normBias[3]) / normMean[3];\n        }\n    }\n    // Float32Array -> ort.Tensor\n    const outputTensor = outputformat === 'RGBA' ? new tensor_js_1.Tensor('float32', float32Data, [1, 4, height, width]) :\n        new tensor_js_1.Tensor('float32', float32Data, [1, 3, height, width]);\n    return outputTensor;\n};\nexports.bufferToTensor = bufferToTensor;\n/**\n * implementation of Tensor.fromImage().\n */\nconst tensorFromImage = async (image, options) => {\n    // checking the type of image object\n    const isHTMLImageEle = typeof (HTMLImageElement) !== 'undefined' && image instanceof HTMLImageElement;\n    const isImageDataEle = typeof (ImageData) !== 'undefined' && image instanceof ImageData;\n    const isImageBitmap = typeof (ImageBitmap) !== 'undefined' && image instanceof ImageBitmap;\n    const isString = typeof image === 'string';\n    let data;\n    let bufferToTensorOptions = options ?? {};\n    // filling and checking image configuration options\n    if (isHTMLImageEle) {\n        // HTMLImageElement - image object - format is RGBA by default\n        const canvas = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const pixels2DContext = canvas.getContext('2d');\n        if (pixels2DContext != null) {\n            let height = image.height;\n            let width = image.width;\n            if (options !== undefined && options.resizedHeight !== undefined && options.resizedWidth !== undefined) {\n                height = options.resizedHeight;\n                width = options.resizedWidth;\n            }\n            if (options !== undefined) {\n                bufferToTensorOptions = options;\n                if (options.tensorFormat !== undefined) {\n                    throw new Error('Image input config format must be RGBA for HTMLImageElement');\n                }\n                else {\n                    bufferToTensorOptions.tensorFormat = 'RGBA';\n                }\n                bufferToTensorOptions.height = height;\n                bufferToTensorOptions.width = width;\n            }\n            else {\n                bufferToTensorOptions.tensorFormat = 'RGBA';\n                bufferToTensorOptions.height = height;\n                bufferToTensorOptions.width = width;\n            }\n            pixels2DContext.drawImage(image, 0, 0);\n            data = pixels2DContext.getImageData(0, 0, width, height).data;\n        }\n        else {\n            throw new Error('Can not access image data');\n        }\n    }\n    else if (isImageDataEle) {\n        let height;\n        let width;\n        if (options !== undefined && options.resizedWidth !== undefined && options.resizedHeight !== undefined) {\n            height = options.resizedHeight;\n            width = options.resizedWidth;\n        }\n        else {\n            height = image.height;\n            width = image.width;\n        }\n        if (options !== undefined) {\n            bufferToTensorOptions = options;\n        }\n        bufferToTensorOptions.format = 'RGBA';\n        bufferToTensorOptions.height = height;\n        bufferToTensorOptions.width = width;\n        if (options !== undefined) {\n            const tempCanvas = document.createElement('canvas');\n            tempCanvas.width = width;\n            tempCanvas.height = height;\n            const pixels2DContext = tempCanvas.getContext('2d');\n            if (pixels2DContext != null) {\n                pixels2DContext.putImageData(image, 0, 0);\n                data = pixels2DContext.getImageData(0, 0, width, height).data;\n            }\n            else {\n                throw new Error('Can not access image data');\n            }\n        }\n        else {\n            data = image.data;\n        }\n    }\n    else if (isImageBitmap) {\n        // ImageBitmap - image object - format must be provided by user\n        if (options === undefined) {\n            throw new Error('Please provide image config with format for Imagebitmap');\n        }\n        const pixels2DContext = document.createElement('canvas').getContext('2d');\n        if (pixels2DContext != null) {\n            const height = image.height;\n            const width = image.width;\n            pixels2DContext.drawImage(image, 0, 0, width, height);\n            data = pixels2DContext.getImageData(0, 0, width, height).data;\n            bufferToTensorOptions.height = height;\n            bufferToTensorOptions.width = width;\n            return (0, exports.bufferToTensor)(data, bufferToTensorOptions);\n        }\n        else {\n            throw new Error('Can not access image data');\n        }\n    }\n    else if (isString) {\n        return new Promise((resolve, reject) => {\n            const canvas = document.createElement('canvas');\n            const context = canvas.getContext('2d');\n            if (!image || !context) {\n                return reject();\n            }\n            const newImage = new Image();\n            newImage.crossOrigin = 'Anonymous';\n            newImage.src = image;\n            newImage.onload = () => {\n                canvas.width = newImage.width;\n                canvas.height = newImage.height;\n                context.drawImage(newImage, 0, 0, canvas.width, canvas.height);\n                const img = context.getImageData(0, 0, canvas.width, canvas.height);\n                bufferToTensorOptions.height = canvas.height;\n                bufferToTensorOptions.width = canvas.width;\n                resolve((0, exports.bufferToTensor)(img.data, bufferToTensorOptions));\n            };\n        });\n    }\n    else {\n        throw new Error('Input data provided is not supported - aborted tensor creation');\n    }\n    if (data !== undefined) {\n        return (0, exports.bufferToTensor)(data, bufferToTensorOptions);\n    }\n    else {\n        throw new Error('Input data provided is not supported - aborted tensor creation');\n    }\n};\nexports.tensorFromImage = tensorFromImage;\n//# sourceMappingURL=tensor-factory-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Tensor = void 0;\nconst tensor_conversion_impl_js_1 = require(\"./tensor-conversion-impl.js\");\nconst tensor_factory_impl_js_1 = require(\"./tensor-factory-impl.js\");\nconst tensor_utils_impl_js_1 = require(\"./tensor-utils-impl.js\");\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nconst NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP = new Map([\n    ['float32', Float32Array],\n    ['uint8', Uint8Array],\n    ['int8', Int8Array],\n    ['uint16', Uint16Array],\n    ['float16', Uint16Array],\n    ['int16', Int16Array],\n    ['int32', Int32Array],\n    ['bool', Uint8Array],\n    ['float64', Float64Array],\n    ['uint32', Uint32Array],\n]);\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nconst NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP = new Map([\n    [Float32Array, 'float32'],\n    [Uint8Array, 'uint8'],\n    [Int8Array, 'int8'],\n    [Uint16Array, 'uint16'],\n    [Int16Array, 'int16'],\n    [Int32Array, 'int32'],\n    [Float64Array, 'float64'],\n    [Uint32Array, 'uint32'],\n]);\n// the following code allows delaying execution of BigInt checking. This allows lazy initialization for\n// NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP and NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP, which allows BigInt polyfill\n// if available.\nlet isBigIntChecked = false;\nconst checkBigInt = () => {\n    if (!isBigIntChecked) {\n        isBigIntChecked = true;\n        const isBigInt64ArrayAvailable = typeof BigInt64Array !== 'undefined' && typeof BigInt64Array.from === 'function';\n        const isBigUint64ArrayAvailable = typeof BigUint64Array !== 'undefined' && typeof BigUint64Array.from === 'function';\n        if (isBigInt64ArrayAvailable) {\n            NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('int64', BigInt64Array);\n            NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigInt64Array, 'int64');\n        }\n        if (isBigUint64ArrayAvailable) {\n            NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('uint64', BigUint64Array);\n            NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigUint64Array, 'uint64');\n        }\n    }\n};\nclass Tensor {\n    constructor(arg0, arg1, arg2) {\n        checkBigInt();\n        let type;\n        let data;\n        let dims;\n        // check whether arg0 is type or data\n        if (typeof arg0 === 'string') {\n            //\n            // Override: constructor(type, data, ...)\n            //\n            type = arg0;\n            dims = arg2;\n            if (arg0 === 'string') {\n                // string tensor\n                if (!Array.isArray(arg1)) {\n                    throw new TypeError('A string tensor\\'s data must be a string array.');\n                }\n                // we don't check whether every element in the array is string; this is too slow. we assume it's correct and\n                // error will be populated at inference\n                data = arg1;\n            }\n            else {\n                // numeric tensor\n                const typedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(arg0);\n                if (typedArrayConstructor === undefined) {\n                    throw new TypeError(`Unsupported tensor type: ${arg0}.`);\n                }\n                if (Array.isArray(arg1)) {\n                    if (arg0 === 'float16') {\n                        // Throw error here because when user try to use number array as data,\n                        // e.g. new Tensor('float16', [1, 2, 3, 4], dims)), it will actually call\n                        // Uint16Array.from(arg1) which generates wrong data.\n                        throw new TypeError('Creating a float16 tensor from number array is not supported. Please use Uint16Array as data.');\n                    }\n                    else if (arg0 === 'uint64' || arg0 === 'int64') {\n                        // use 'as any' here because:\n                        // 1. TypeScript's check on type of 'Array.isArray()' does not work with readonly arrays.\n                        // see https://github.com/microsoft/TypeScript/issues/17002\n                        // 2. TypeScript's check on union type of '(BigInt64ArrayConstructor|BigUint64ArrayConstructor).from()' does\n                        // not accept parameter mapFn.\n                        // 3. parameters of 'SupportedTypedArrayConstructors.from()' does not match the requirement of the union\n                        // type.\n                        // assume 'arg1' is of type \"readonly number[]|readonly bigint[]\" here.\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        data = typedArrayConstructor.from(arg1, BigInt);\n                    }\n                    else {\n                        // assume 'arg1' is of type \"readonly number[]\" here.\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        data = typedArrayConstructor.from(arg1);\n                    }\n                }\n                else if (arg1 instanceof typedArrayConstructor) {\n                    data = arg1;\n                }\n                else {\n                    throw new TypeError(`A ${type} tensor's data must be type of ${typedArrayConstructor}`);\n                }\n            }\n        }\n        else {\n            //\n            // Override: constructor(data, ...)\n            //\n            dims = arg1;\n            if (Array.isArray(arg0)) {\n                // only boolean[] and string[] is supported\n                if (arg0.length === 0) {\n                    throw new TypeError('Tensor type cannot be inferred from an empty array.');\n                }\n                const firstElementType = typeof arg0[0];\n                if (firstElementType === 'string') {\n                    type = 'string';\n                    data = arg0;\n                }\n                else if (firstElementType === 'boolean') {\n                    type = 'bool';\n                    // 'arg0' is of type 'boolean[]'. Uint8Array.from(boolean[]) actually works, but typescript thinks this is\n                    // wrong type. We use 'as any' to make it happy.\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    data = Uint8Array.from(arg0);\n                }\n                else {\n                    throw new TypeError(`Invalid element type of data array: ${firstElementType}.`);\n                }\n            }\n            else {\n                // get tensor type from TypedArray\n                const mappedType = NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(arg0.constructor);\n                if (mappedType === undefined) {\n                    throw new TypeError(`Unsupported type for tensor data: ${arg0.constructor}.`);\n                }\n                type = mappedType;\n                data = arg0;\n            }\n        }\n        // type and data is processed, now processing dims\n        if (dims === undefined) {\n            // assume 1-D tensor if dims omitted\n            dims = [data.length];\n        }\n        else if (!Array.isArray(dims)) {\n            throw new TypeError('A tensor\\'s dims must be a number array');\n        }\n        // perform check\n        const size = (0, tensor_utils_impl_js_1.calculateSize)(dims);\n        if (size !== data.length) {\n            throw new Error(`Tensor's size(${size}) does not match data length(${data.length}).`);\n        }\n        this.dims = dims;\n        this.type = type;\n        this.data = data;\n        this.size = size;\n    }\n    static async fromImage(image, options) {\n        return (0, tensor_factory_impl_js_1.tensorFromImage)(image, options);\n    }\n    // #endregion\n    // #region conversions\n    toDataURL(options) {\n        return (0, tensor_conversion_impl_js_1.tensorToDataURL)(this, options);\n    }\n    toImageData(options) {\n        return (0, tensor_conversion_impl_js_1.tensorToImageData)(this, options);\n    }\n    // #endregion\n    // #region tensor utilities\n    reshape(dims) {\n        return (0, tensor_utils_impl_js_1.tensorReshape)(this, dims);\n    }\n}\nexports.Tensor = Tensor;\n//# sourceMappingURL=tensor-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.tensorReshape = exports.calculateSize = void 0;\nconst tensor_js_1 = require(\"./tensor.js\");\n/**\n * calculate size from dims.\n *\n * @param dims the dims array. May be an illegal input.\n */\nconst calculateSize = (dims) => {\n    let size = 1;\n    for (let i = 0; i < dims.length; i++) {\n        const dim = dims[i];\n        if (typeof dim !== 'number' || !Number.isSafeInteger(dim)) {\n            throw new TypeError(`dims[${i}] must be an integer, got: ${dim}`);\n        }\n        if (dim < 0) {\n            throw new RangeError(`dims[${i}] must be a non-negative integer, got: ${dim}`);\n        }\n        size *= dim;\n    }\n    return size;\n};\nexports.calculateSize = calculateSize;\n/**\n * implementation of Tensor.reshape()\n */\nconst tensorReshape = (tensor, dims) => new tensor_js_1.Tensor(tensor.type, tensor.data, dims);\nexports.tensorReshape = tensorReshape;\n//# sourceMappingURL=tensor-utils-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Tensor = void 0;\nconst tensor_impl_js_1 = require(\"./tensor-impl.js\");\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexports.Tensor = tensor_impl_js_1.Tensor;\n//# sourceMappingURL=tensor.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.version = void 0;\n// This file is generated by /js/scripts/update-version.ts\n// Do not modify file content manually.\nexports.version = '1.16.0';\n//# sourceMappingURL=version.js.map","// GENERATED FILE. DO NOT EDIT.\nvar Long = (function(exports) {\n  \"use strict\";\n  \n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  \n  /**\n   * @license\n   * Copyright 2009 The Closure Library Authors\n   * Copyright 2020 Daniel Wirtz / The long.js Authors.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *\n   * SPDX-License-Identifier: Apache-2.0\n   */\n  // WebAssembly optimizations to do native i64 multiplication and divide\n  var wasm = null;\n  \n  try {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;\n  } catch (e) {// no wasm support :(\n  }\n  /**\n   * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n   *  See the from* functions below for more convenient ways of constructing Longs.\n   * @exports Long\n   * @class A Long class for representing a 64 bit two's-complement integer value.\n   * @param {number} low The low (signed) 32 bits of the long\n   * @param {number} high The high (signed) 32 bits of the long\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @constructor\n   */\n  \n  \n  function Long(low, high, unsigned) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     */\n    this.low = low | 0;\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     */\n  \n    this.high = high | 0;\n    /**\n     * Whether unsigned or not.\n     * @type {boolean}\n     */\n  \n    this.unsigned = !!unsigned;\n  } // The internal representation of a long is the two given signed, 32-bit values.\n  // We use 32-bit pieces because these are the size of integers on which\n  // Javascript performs bit-operations.  For operations like addition and\n  // multiplication, we split each number into 16 bit pieces, which can easily be\n  // multiplied within Javascript's floating-point representation without overflow\n  // or change in sign.\n  //\n  // In the algorithms below, we frequently reduce the negative case to the\n  // positive case by negating the input(s) and then post-processing the result.\n  // Note that we must ALWAYS check specially whether those values are MIN_VALUE\n  // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n  // a positive number, it overflows back into a negative).  Not handling this\n  // case would often result in infinite recursion.\n  //\n  // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n  // methods on which they depend.\n  \n  /**\n   * An indicator used to reliably determine if an object is a Long or not.\n   * @type {boolean}\n   * @const\n   * @private\n   */\n  \n  \n  Long.prototype.__isLong__;\n  Object.defineProperty(Long.prototype, \"__isLong__\", {\n    value: true\n  });\n  /**\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   * @inner\n   */\n  \n  function isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n  }\n  /**\n   * @function\n   * @param {*} value number\n   * @returns {number}\n   * @inner\n   */\n  \n  \n  function ctz32(value) {\n    var c = Math.clz32(value & -value);\n    return value ? 31 - c : c;\n  }\n  /**\n   * Tests if the specified object is a Long.\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   */\n  \n  \n  Long.isLong = isLong;\n  /**\n   * A cache of the Long representations of small integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var INT_CACHE = {};\n  /**\n   * A cache of the Long representations of small unsigned integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var UINT_CACHE = {};\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromInt(value, unsigned) {\n    var obj, cachedObj, cache;\n  \n    if (unsigned) {\n      value >>>= 0;\n  \n      if (cache = 0 <= value && value < 256) {\n        cachedObj = UINT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, 0, true);\n      if (cache) UINT_CACHE[value] = obj;\n      return obj;\n    } else {\n      value |= 0;\n  \n      if (cache = -128 <= value && value < 128) {\n        cachedObj = INT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, value < 0 ? -1 : 0, false);\n      if (cache) INT_CACHE[value] = obj;\n      return obj;\n    }\n  }\n  /**\n   * Returns a Long representing the given 32 bit integer value.\n   * @function\n   * @param {number} value The 32 bit integer in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromInt = fromInt;\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromNumber(value, unsigned) {\n    if (isNaN(value)) return unsigned ? UZERO : ZERO;\n  \n    if (unsigned) {\n      if (value < 0) return UZERO;\n      if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;\n    } else {\n      if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;\n      if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;\n    }\n  \n    if (value < 0) return fromNumber(-value, unsigned).neg();\n    return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);\n  }\n  /**\n   * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n   * @function\n   * @param {number} value The number in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromNumber = fromNumber;\n  /**\n   * @param {number} lowBits\n   * @param {number} highBits\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n  }\n  /**\n   * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n   *  assumed to use 32 bits.\n   * @function\n   * @param {number} lowBits The low 32 bits\n   * @param {number} highBits The high 32 bits\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBits = fromBits;\n  /**\n   * @function\n   * @param {number} base\n   * @param {number} exponent\n   * @returns {number}\n   * @inner\n   */\n  \n  var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n  \n  /**\n   * @param {string} str\n   * @param {(boolean|number)=} unsigned\n   * @param {number=} radix\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromString(str, unsigned, radix) {\n    if (str.length === 0) throw Error('empty string');\n  \n    if (typeof unsigned === 'number') {\n      // For goog.math.long compatibility\n      radix = unsigned;\n      unsigned = false;\n    } else {\n      unsigned = !!unsigned;\n    }\n  \n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\") return unsigned ? UZERO : ZERO;\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    var p;\n    if ((p = str.indexOf('-')) > 0) throw Error('interior hyphen');else if (p === 0) {\n      return fromString(str.substring(1), unsigned, radix).neg();\n    } // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n  \n    for (var i = 0; i < str.length; i += 8) {\n      var size = Math.min(8, str.length - i),\n          value = parseInt(str.substring(i, i + size), radix);\n  \n      if (size < 8) {\n        var power = fromNumber(pow_dbl(radix, size));\n        result = result.mul(power).add(fromNumber(value));\n      } else {\n        result = result.mul(radixToPower);\n        result = result.add(fromNumber(value));\n      }\n    }\n  \n    result.unsigned = unsigned;\n    return result;\n  }\n  /**\n   * Returns a Long representation of the given string, written using the specified radix.\n   * @function\n   * @param {string} str The textual representation of the Long\n   * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n   * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromString = fromString;\n  /**\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromValue(val, unsigned) {\n    if (typeof val === 'number') return fromNumber(val, unsigned);\n    if (typeof val === 'string') return fromString(val, unsigned); // Throws for non-objects, converts non-instanceof Long:\n  \n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n  }\n  /**\n   * Converts the specified value to a Long using the appropriate from* function for its type.\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long}\n   */\n  \n  \n  Long.fromValue = fromValue; // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n  // no runtime penalty for these.\n  \n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_16_DBL = 1 << 16;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24_DBL = 1 << 24;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n  /**\n   * @type {!Long}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ZERO = fromInt(0);\n  /**\n   * Signed zero.\n   * @type {!Long}\n   */\n  \n  Long.ZERO = ZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UZERO = fromInt(0, true);\n  /**\n   * Unsigned zero.\n   * @type {!Long}\n   */\n  \n  Long.UZERO = UZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ONE = fromInt(1);\n  /**\n   * Signed one.\n   * @type {!Long}\n   */\n  \n  Long.ONE = ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UONE = fromInt(1, true);\n  /**\n   * Unsigned one.\n   * @type {!Long}\n   */\n  \n  Long.UONE = UONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var NEG_ONE = fromInt(-1);\n  /**\n   * Signed negative one.\n   * @type {!Long}\n   */\n  \n  Long.NEG_ONE = NEG_ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n  /**\n   * Maximum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_VALUE = MAX_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n  /**\n   * Maximum unsigned value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n  /**\n   * Minimum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MIN_VALUE = MIN_VALUE;\n  /**\n   * @alias Long.prototype\n   * @inner\n   */\n  \n  var LongPrototype = Long.prototype;\n  /**\n   * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  LongPrototype.toInt = function toInt() {\n    return this.unsigned ? this.low >>> 0 : this.low;\n  };\n  /**\n   * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.toNumber = function toNumber() {\n    if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n  };\n  /**\n   * Converts the Long to a string written in the specified radix.\n   * @this {!Long}\n   * @param {number=} radix Radix (2-36), defaults to 10\n   * @returns {string}\n   * @override\n   * @throws {RangeError} If `radix` is out of range\n   */\n  \n  \n  LongPrototype.toString = function toString(radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    if (this.isZero()) return '0';\n  \n    if (this.isNegative()) {\n      // Unsigned Longs are never negative\n      if (this.eq(MIN_VALUE)) {\n        // We need to change the Long value before it can be negated, so we remove\n        // the bottom-most digit in this base and then recurse to do the rest.\n        var radixLong = fromNumber(radix),\n            div = this.div(radixLong),\n            rem1 = div.mul(radixLong).sub(this);\n        return div.toString(radix) + rem1.toInt().toString(radix);\n      } else return '-' + this.neg().toString(radix);\n    } // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n  \n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n        rem = this;\n    var result = '';\n  \n    while (true) {\n      var remDiv = rem.div(radixToPower),\n          intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n          digits = intval.toString(radix);\n      rem = remDiv;\n      if (rem.isZero()) return digits + result;else {\n        while (digits.length < 6) digits = '0' + digits;\n  \n        result = '' + digits + result;\n      }\n    }\n  };\n  /**\n   * Gets the high 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed high bits\n   */\n  \n  \n  LongPrototype.getHighBits = function getHighBits() {\n    return this.high;\n  };\n  /**\n   * Gets the high 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned high bits\n   */\n  \n  \n  LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n    return this.high >>> 0;\n  };\n  /**\n   * Gets the low 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed low bits\n   */\n  \n  \n  LongPrototype.getLowBits = function getLowBits() {\n    return this.low;\n  };\n  /**\n   * Gets the low 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned low bits\n   */\n  \n  \n  LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n    return this.low >>> 0;\n  };\n  /**\n   * Gets the number of bits needed to represent the absolute value of this Long.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n    if (this.isNegative()) // Unsigned Longs are never negative\n      return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n    var val = this.high != 0 ? this.high : this.low;\n  \n    for (var bit = 31; bit > 0; bit--) if ((val & 1 << bit) != 0) break;\n  \n    return this.high != 0 ? bit + 33 : bit + 1;\n  };\n  /**\n   * Tests if this Long's value equals zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isZero = function isZero() {\n    return this.high === 0 && this.low === 0;\n  };\n  /**\n   * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eqz = LongPrototype.isZero;\n  /**\n   * Tests if this Long's value is negative.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  LongPrototype.isNegative = function isNegative() {\n    return !this.unsigned && this.high < 0;\n  };\n  /**\n   * Tests if this Long's value is positive or zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isPositive = function isPositive() {\n    return this.unsigned || this.high >= 0;\n  };\n  /**\n   * Tests if this Long's value is odd.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isOdd = function isOdd() {\n    return (this.low & 1) === 1;\n  };\n  /**\n   * Tests if this Long's value is even.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isEven = function isEven() {\n    return (this.low & 1) === 0;\n  };\n  /**\n   * Tests if this Long's value equals the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.equals = function equals(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\n    return this.high === other.high && this.low === other.low;\n  };\n  /**\n   * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eq = LongPrototype.equals;\n  /**\n   * Tests if this Long's value differs from the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.notEquals = function notEquals(other) {\n    return !this.eq(\n    /* validates */\n    other);\n  };\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.neq = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ne = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value is less than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThan = function lessThan(other) {\n    return this.comp(\n    /* validates */\n    other) < 0;\n  };\n  /**\n   * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lt = LongPrototype.lessThan;\n  /**\n   * Tests if this Long's value is less than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) <= 0;\n  };\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lte = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.le = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThan = function greaterThan(other) {\n    return this.comp(\n    /* validates */\n    other) > 0;\n  };\n  /**\n   * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gt = LongPrototype.greaterThan;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) >= 0;\n  };\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ge = LongPrototype.greaterThanOrEqual;\n  /**\n   * Compares this Long's value with the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  LongPrototype.compare = function compare(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.eq(other)) return 0;\n    var thisNeg = this.isNegative(),\n        otherNeg = other.isNegative();\n    if (thisNeg && !otherNeg) return -1;\n    if (!thisNeg && otherNeg) return 1; // At this point the sign bits are the same\n  \n    if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1; // Both are positive if at least one is unsigned\n  \n    return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n  };\n  /**\n   * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  \n  LongPrototype.comp = LongPrototype.compare;\n  /**\n   * Negates this Long's value.\n   * @this {!Long}\n   * @returns {!Long} Negated Long\n   */\n  \n  LongPrototype.negate = function negate() {\n    if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;\n    return this.not().add(ONE);\n  };\n  /**\n   * Negates this Long's value. This is an alias of {@link Long#negate}.\n   * @function\n   * @returns {!Long} Negated Long\n   */\n  \n  \n  LongPrototype.neg = LongPrototype.negate;\n  /**\n   * Returns the sum of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} addend Addend\n   * @returns {!Long} Sum\n   */\n  \n  LongPrototype.add = function add(addend) {\n    if (!isLong(addend)) addend = fromValue(addend); // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the difference of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.subtract = function subtract(subtrahend) {\n    if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);\n    return this.add(subtrahend.neg());\n  };\n  /**\n   * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n   * @function\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.sub = LongPrototype.subtract;\n  /**\n   * Returns the product of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  LongPrototype.multiply = function multiply(multiplier) {\n    if (this.isZero()) return this;\n    if (!isLong(multiplier)) multiplier = fromValue(multiplier); // use wasm support if present\n  \n    if (wasm) {\n      var low = wasm[\"mul\"](this.low, this.high, multiplier.low, multiplier.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (multiplier.isZero()) return this.unsigned ? UZERO : ZERO;\n    if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;\n    if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;\n  \n    if (this.isNegative()) {\n      if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());else return this.neg().mul(multiplier).neg();\n    } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg(); // If both longs are small, use float multiplication\n  \n  \n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24)) return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned); // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n   * @function\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  \n  LongPrototype.mul = LongPrototype.multiply;\n  /**\n   * Returns this Long divided by the specified. The result is signed if this Long is signed or\n   *  unsigned if this Long is unsigned.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  LongPrototype.divide = function divide(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor);\n    if (divisor.isZero()) throw Error('division by zero'); // use wasm support if present\n  \n    if (wasm) {\n      // guard against signed division overflow: the largest\n      // negative number / -1 would be 1 larger than the largest\n      // positive number, due to two's complement.\n      if (!this.unsigned && this.high === -0x80000000 && divisor.low === -1 && divisor.high === -1) {\n        // be consistent with non-wasm code path\n        return this;\n      }\n  \n      var low = (this.unsigned ? wasm[\"div_u\"] : wasm[\"div_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (this.isZero()) return this.unsigned ? UZERO : ZERO;\n    var approx, rem, res;\n  \n    if (!this.unsigned) {\n      // This section is only relevant for signed longs and is derived from the\n      // closure library as a whole.\n      if (this.eq(MIN_VALUE)) {\n        if (divisor.eq(ONE) || divisor.eq(NEG_ONE)) return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n        else if (divisor.eq(MIN_VALUE)) return ONE;else {\n          // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n          var halfThis = this.shr(1);\n          approx = halfThis.div(divisor).shl(1);\n  \n          if (approx.eq(ZERO)) {\n            return divisor.isNegative() ? ONE : NEG_ONE;\n          } else {\n            rem = this.sub(divisor.mul(approx));\n            res = approx.add(rem.div(divisor));\n            return res;\n          }\n        }\n      } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;\n  \n      if (this.isNegative()) {\n        if (divisor.isNegative()) return this.neg().div(divisor.neg());\n        return this.neg().div(divisor).neg();\n      } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();\n  \n      res = ZERO;\n    } else {\n      // The algorithm below has not been made for unsigned longs. It's therefore\n      // required to take special care of the MSB prior to running it.\n      if (!divisor.unsigned) divisor = divisor.toUnsigned();\n      if (divisor.gt(this)) return UZERO;\n      if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n        return UONE;\n      res = UZERO;\n    } // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n  \n  \n    rem = this;\n  \n    while (rem.gte(divisor)) {\n      // Approximate the result of division. This may be a little greater or\n      // smaller than the actual value.\n      approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber())); // We will tweak the approximate result by changing it in the 48-th digit or\n      // the smallest non-fractional digit, whichever is larger.\n  \n      var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n          delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),\n          // Decrease the approximation until it is smaller than the remainder.  Note\n      // that if it is too large, the product overflows and is negative.\n      approxRes = fromNumber(approx),\n          approxRem = approxRes.mul(divisor);\n  \n      while (approxRem.isNegative() || approxRem.gt(rem)) {\n        approx -= delta;\n        approxRes = fromNumber(approx, this.unsigned);\n        approxRem = approxRes.mul(divisor);\n      } // We know the answer can't be zero... and actually, zero would cause\n      // infinite recursion since we would make no progress.\n  \n  \n      if (approxRes.isZero()) approxRes = ONE;\n      res = res.add(approxRes);\n      rem = rem.sub(approxRem);\n    }\n  \n    return res;\n  };\n  /**\n   * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  \n  LongPrototype.div = LongPrototype.divide;\n  /**\n   * Returns this Long modulo the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.modulo = function modulo(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor); // use wasm support if present\n  \n    if (wasm) {\n      var low = (this.unsigned ? wasm[\"rem_u\"] : wasm[\"rem_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    return this.sub(this.div(divisor).mul(divisor));\n  };\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  \n  LongPrototype.mod = LongPrototype.modulo;\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.rem = LongPrototype.modulo;\n  /**\n   * Returns the bitwise NOT of this Long.\n   * @this {!Long}\n   * @returns {!Long}\n   */\n  \n  LongPrototype.not = function not() {\n    return fromBits(~this.low, ~this.high, this.unsigned);\n  };\n  /**\n   * Returns count leading zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.countLeadingZeros = function countLeadingZeros() {\n    return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;\n  };\n  /**\n   * Returns count leading zeros. This is an alias of {@link Long#countLeadingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.clz = LongPrototype.countLeadingZeros;\n  /**\n   * Returns count trailing zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  LongPrototype.countTrailingZeros = function countTrailingZeros() {\n    return this.low ? ctz32(this.low) : ctz32(this.high) + 32;\n  };\n  /**\n   * Returns count trailing zeros. This is an alias of {@link Long#countTrailingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.ctz = LongPrototype.countTrailingZeros;\n  /**\n   * Returns the bitwise AND of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  LongPrototype.and = function and(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise OR of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.or = function or(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise XOR of this Long and the given one.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.xor = function xor(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shiftLeft = function shiftLeft(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);else return fromBits(0, this.low << numBits - 32, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shl = LongPrototype.shiftLeft;\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRight = function shiftRight(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);else return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shr = LongPrototype.shiftRight;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >>> numBits, this.unsigned);\n    if (numBits === 32) return fromBits(this.high, 0, this.unsigned);\n    return fromBits(this.high >>> numBits - 32, 0, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits rotated to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateLeft = function rotateLeft(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.low << numBits | this.high >>> b, this.high << numBits | this.low >>> b, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.high << numBits | this.low >>> b, this.low << numBits | this.high >>> b, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotl = LongPrototype.rotateLeft;\n  /**\n   * Returns this Long with bits rotated to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateRight = function rotateRight(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.high << b | this.low >>> numBits, this.low << b | this.high >>> numBits, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.low << b | this.high >>> numBits, this.high << b | this.low >>> numBits, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotr = LongPrototype.rotateRight;\n  /**\n   * Converts this Long to signed.\n   * @this {!Long}\n   * @returns {!Long} Signed long\n   */\n  \n  LongPrototype.toSigned = function toSigned() {\n    if (!this.unsigned) return this;\n    return fromBits(this.low, this.high, false);\n  };\n  /**\n   * Converts this Long to unsigned.\n   * @this {!Long}\n   * @returns {!Long} Unsigned long\n   */\n  \n  \n  LongPrototype.toUnsigned = function toUnsigned() {\n    if (this.unsigned) return this;\n    return fromBits(this.low, this.high, true);\n  };\n  /**\n   * Converts this Long to its byte representation.\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @this {!Long}\n   * @returns {!Array.<number>} Byte representation\n   */\n  \n  \n  LongPrototype.toBytes = function toBytes(le) {\n    return le ? this.toBytesLE() : this.toBytesBE();\n  };\n  /**\n   * Converts this Long to its little endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Little endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesLE = function toBytesLE() {\n    var hi = this.high,\n        lo = this.low;\n    return [lo & 0xff, lo >>> 8 & 0xff, lo >>> 16 & 0xff, lo >>> 24, hi & 0xff, hi >>> 8 & 0xff, hi >>> 16 & 0xff, hi >>> 24];\n  };\n  /**\n   * Converts this Long to its big endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Big endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesBE = function toBytesBE() {\n    var hi = this.high,\n        lo = this.low;\n    return [hi >>> 24, hi >>> 16 & 0xff, hi >>> 8 & 0xff, hi & 0xff, lo >>> 24, lo >>> 16 & 0xff, lo >>> 8 & 0xff, lo & 0xff];\n  };\n  /**\n   * Creates a Long from its byte representation.\n   * @param {!Array.<number>} bytes Byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytes = function fromBytes(bytes, unsigned, le) {\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\n  };\n  /**\n   * Creates a Long from its little endian byte representation.\n   * @param {!Array.<number>} bytes Little endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {\n    return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);\n  };\n  /**\n   * Creates a Long from its big endian byte representation.\n   * @param {!Array.<number>} bytes Big endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {\n    return new Long(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);\n  };\n  \n  var _default = Long;\n  exports.default = _default;\n  return \"default\" in exports ? exports.default : exports;\n})({});\nif (typeof define === 'function' && define.amd) define([], function() { return Long; });\nelse if (typeof module === 'object' && typeof exports === 'object') module.exports = Long;\n","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZE_PREFIX_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {!flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {!Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {!flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n * @param {boolean=} opt_size_prefix\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier, opt_size_prefix) {\n  var size_prefix = opt_size_prefix ? flatbuffers.SIZE_PREFIX_LENGTH : 0;\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH + size_prefix);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT + size_prefix);\n  this.addOffset(root_table);\n  if (size_prefix) {\n    this.addInt32(this.bb.capacity() - this.space);\n  }\n  this.bb.setPosition(this.space);\n};\n\n/**\n * Finalize a size prefixed buffer, pointing to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finishSizePrefixed = function (root_table, opt_file_identifier) {\n  this.finish(root_table, opt_file_identifier, true);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {!flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|!Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(1057);\n"],"names":["root","factory","exports","module","define","amd","self","async","pathOrBuffer","options","session","Session","loadModel","OnnxjsSessionHandler","env","wasm","initTimeout","simd","proxy","numThreads","Number","isInteger","numCpuLogicalCores","navigator","cpus","length","hardwareConcurrency","Math","min","ceil","initializeWebAssemblyInstance","handler","OnnxruntimeWebAssemblySessionHandler","Promise","resolve","onnxjsBackend","registerBackend","wasmBackend","gpu","versions","web","version","AttributeWithCacheKeyImpl","constructor","attribute","Object","assign","this","cacheKey","_cacheKey","getOwnPropertyNames","sort","map","name","join","createAttributeWithCacheKey","ortFbs","onnxruntime","experimental","fbs","Attribute","attributes","_attributes","Map","attr","onnx","AttributeProto","set","getValue","getType","size","Error","key","type","value","delete","getFloat","defaultValue","get","getInt","getString","getTensor","getFloats","getInts","getStrings","getTensors","valueAndType","undefined","static","AttributeType","FLOAT","INT","STRING","TENSOR","FLOATS","INTS","STRINGS","TENSORS","attrType","GRAPH","GRAPHS","getValueNoCheck","LongUtil","isLong","longToNumber","arr","numberValue","Array","i","maybeLong","Tensor","fromProto","fromOrtTensor","utf8String","decodeUtf8String","getValueNoCheckFromOnnxFormat","getValueNoCheckFromOrtFormat","f","s","t","g","floats","ints","strings","tensors","graphs","floatsArray","intsLength","push","stringsLength","tensorsLength","backendsCache","tryLoadBackend","backendHint","backendObj","backend","obj","o","initialize","createSessionHandler","dispose","isBackend","init","webgl","WebGLBackend","resolveBackend","hint","hints","cache","contextId","matmulMaxBatchSize","textureCacheMode","pack","glContext","createWebGLContext","Logger","setWithEnv","verbose","e","warning","context","WebGLSessionHandler","CoordsGlslLib","GlslLib","super","getFunctions","offsetToCoords","coordsToOffset","toVec","valueFrom","getCommonUtilFuncs","getInputsSamplingSnippets","getOutputSamplingSnippet","getCustomTypes","GlslLibRoutine","outputLayout","outputTextureLayout","isPacked","getPackedOutputSamplingSnippet","getUnpackedOutputSamplingSnippet","outShape","unpackedShape","outTexShape","width","height","result","funcName","getOutputScalarCoords","getOutputPacked1DCoords","getOutputPacked2DCoords","getOutputPacked3DCoords","getOutputPackedNDCoords","floatTextureSetRGBASource","getGlsl","output","getOutputUnpacked1DCoords","getOutputUnpacked2DCoords","getOutputUnpacked3DCoords","getOutputUnpacked4DCoords","getOutputUnpacked5DCoords","getOutputUnpacked6DCoords","floatTextureSetRSource","shape","texShape","packedTexShape","source","ArrayUtil","arraysEqual","texelsInLogicalRow","texelsInBatch","texelsInBatchN","batches","coords","b","rank","strides","coordsToCompute","coordsFromIndexSnippet","stride","glsl","texture2D","programInfo","inputNames","forEach","samplerName","inputLayout","inputTextureLayouts","generateShaderFuncNameFromInputSamplerName","getPackedSamplerFromInput","getUnpackedSamplerFromInput","outCoordFuncName","generateShaderFuncNameFromInputSamplerNameAtOutCoords","getPackedSamplerAtOutputCoords","getUnpackedSamplerAtOutputCoords","inShape","texName","texFuncSnippet","inRank","outRank","broadcastDims","BroadcastUtil","getBroadcastDims","getCoordsDataType","rankDiff","coordsSnippet","fields","getGlChannels","d","unpackedCoordsSnippet","isInputScalar","ShapeUtil","isOutputScalar","rows","cols","indexOf","inTexShape","getPackedSamplerScalar","getPackedSampler1D","getPackedSampler2D","getPackedSampler3D","getPackedSamplerND","getUnpackedSamplerScalar","getUnpackedSampler1D","getUnpackedSampler2D","getUnpackedSampler3D","getUnpackedSampler4D","getUnpackedSampler5D","getUnpackedSampler6D","texNumR","texNumC","packedSampler","valuesPerRow","squeezedShape","slice","keptDims","newInputShape","squeezeInputShape","params","newInputLayout","JSON","parse","stringify","samplerRoutine","routineBody","getSqueezedParams","dependencies","index","tNumR","tNumC","newShape","squeezeShape","stride0","stride1","routine","revDims","reverse","stride2","stride3","stride4","xScale","yScale","stridesBlock","body","layout","getValueFromSingle","varName","transpose","getPackedValueFrom","FunctionType","addDependency","node","nodes","cycleCheck","Set","alreadyTraversed","createOrderedNodes","graphNodes","dfsTraverse","has","add","EncodingGlslLib","encodeFloat32","decodeFloat32","encode","decode","encodeUint8","endianness","isLittleEndian","decodeUint8","ArrayBuffer","a","Uint32Array","c","Uint8Array","FragColorGlslLib","setFragColor","getColorAsFloat","INLINE_FUNC_DEF_REGEX","script","inlineDefs","match","exec","split","tokens","trim","filter","v","regexString","replace","regex","RegExp","variable","declLine","newBody","paramRedecLine","replacement","libs","glslLibRoutineDependencyGraph","GlslContext","keys","glslRegistry","lib","libName","routinesInLib","currentNode","GlslLibRoutineNode","preprocess","shaderSource","hasMain","getDefaultFragShaderMain","replaceInlines","getFragShaderPreamble","getUniforms","variables","getImports","routinesIncluded","selectGlslLibRoutinesToBeIncluded","routines","classAndRoutine","TopologicalSortGlslRoutines","returnOrderedNodes","samplers","uniformLines","sampler","arrayLength","VecGlslLib","ShapeUtilsGlslLib","bcastIndex","bcastMatmulIndex","offsetToIndices","indicesToOffset","incrementIndices","outputRank","dimOffset","block","indexToOffsetSingle","offsetToIndicesSingle","shapeInit","GLSL_ES_2_0","varyingVertex","varyingFrag","outputDeclaration","GLSL_ES_3_0","outputShapeLength","binaryVecFunctions","copyVec","setVecItem","getVecItem","nameOp","sub","mul","div","fname","assignmentBlock","packedTextureDataCache","unpackedTextureDataCache","calculateTextureWidthAndHeight","textureType","layoutStrategy","executeProgram","program","inputs","inputTypes","inputTextureDatas","getOrCreateTextureData","texture","cacheHint","getProgramInfoUniqueKey","artifact","programManager","getArtifact","createTextureLayoutFromTextureType","dims","outputTextureData","createTextureData","build","setArtifact","runProgram","run","tensor","TextureType","packed","td","getTextureData","dataId","unpack","packedLastDimension","group","channels","adjustedKernelShape","adjustedLayout","buffer","numberData","numFeatureMaps","oldRowSize","newRowSize","Float32Array","oldOffset","newOffset","subarray","unpackedTextureLayout","createTextureLayoutFromShape","reverseWH","unpackedTextureData","createTextureDataFromLayoutBindTensor","dataType","data","usage","textureManager","createTextureFromLayout","createTextureDataFromTexture","reshapeUnpacked","input","reshapedDims","inputTD","unpacked","newTextureLayout","computeStrides","reshapePacked","isReshapeCheap","squeezedInputShape","processDims3D","squeezedOutputShape","squeezedInputTensor","squeezedOutputTensor","createPackedReshape3DProgramInfoLoader","cast","tensorId","textureData","_id","readTexture","readTextureAsync","setTextureData","isInitializer","isTextureLayoutCached","clearActiveTextures","releaseTexture","isFloat32DownloadSupported","readUint8TextureAsFloat","encodeAsUint8","createPackProgramInfoLoader","createUnpackProgramInfoLoader","WEBGL_OP_RESOLVE_RULES","unaryOps","abs","acos","binaryOps","and","asin","atan","averagePool","parseAveragePoolAttributes","batchNormalization","parseBatchNormalizationAttributes","parseCastAttributes","clip","parseClipAttributes","clipV11","concat","parseConcatAttributes","conv","parseConvAttributes","convTranspose","parseConvTransposeAttributes","cos","identity","depthToSpace","parseDepthToSpaceAttributes","equal","elu","parseEluAttributes","exp","flatten","parseFlattenAttributes","floor","gather","parseGatherAttributes","gemm","parseGemmAttributesV7","parseGemmAttributesV11","globalAveragePool","parseGlobalAveragePoolAttributes","globalMaxPool","greater","imageScaler","parseImageScalerAttributes","instanceNormalization","parseInstanceNormalizationAttributes","leakyRelu","parseLeakyReluAttributes","less","lrn","parseLrnAttributes","log","matMul","parseMatMulAttributes","maxPool","parseMaxPoolAttributes","neg","not","or","padV2","parsePadAttributesV2","padV11","parsePadAttributesV11","pow","pRelu","reduceLogSum","parseReduceAttributes","reduceMax","reduceMean","reduceMin","reduceProd","reduceSum","reduceLogSumSquare","relu","reshape","resize","parseResizeAttributesV10","parseResizeAttributesV11","sigmoid","sin","sliceV10","parseSliceAttributes","softmax","parseSoftmaxAttributes","softmaxV13","parseSoftmaxAttributesV13","parseSplitAttributes","sqrt","squeeze","parseSqueezeAttributes","squeezeV13","sum","tan","tanh","tile","parseTransposeAttributes","upsample","parseUpsampleAttributesV7","parseUpsampleAttributesV9","unsqueeze","parseUnsqueezeAttributes","unsqueezeV13","xor","batchNormalizationProgramMetadata","inferenceHandler","validateInputs","createBatchNormalizationProgramInfo","epsilon","momentum","spatial","scaleWidth","scaleHeight","X","scale","B","mean","var_","glslAdd","ValueBased","glslDiv","glslMul","glslSub","glslEqual","glslGreater","glslLess","glslAnd","glslOr","glslXor","glslPow","glslBuiltinBinary","glslPRelu","createBinaryProgramInfoLoader","glslFunc","outputTensorType","createBinaryProgramInfo","isBroadcast","areEqual","outputShape","usePackedTexture","calculatedShape","calcShape","aRank","bRank","aBcast","bBcast","to","ProtoUtil","tensorDataTypeFromProto","createPackedConcatProgramInfoLoader","metadata","inputCount","from","fill","axis","inputShape","dataNShape","axisIndex","getChannels","dtype","unpackChannel","unpackFromChannel","shapes","offsets","channel","lastChannels","allChannels","getValueSnippet","shift","getShiftedChannelsSnippet","lastIndex","x","createPackedConcatProgramInfo","channelIdx","idx","createUnpackedConcatProgramInfoLoader","sizeInConcatAxis","previousSum","getTextureIndexWhereDataResidesMethod","getTextureIndexWhereDataResidesLinearSearch","getTextureIndexWhereDataResidesBinarySearch","getFetchDataFromCorrectTextureMethod","getGetSizeInConcatAxisValueFromIndexMethod","createUnpackedConcatProgramInfo","numberOfTensors","tensorRank","codeLines","inputType","inputDimensionality","createUnpackedGroupedConvProgramInfoLoader","hasBias","processBias","xShape","wShape","outputChannelsPerGroup","autoPad","dilations","kernelShape","pads","calculateOutputShape","activationFunction","applyActivation","getActivationSnippet","createUnpackedGroupedConvProgramInfo","conv2DPackedPointwise","xshape","kshape","reshapedX","reshapedK","matmulInputs","matmulOutput","createPackedMatmulProgramInfoLoader","conv2DPacked","im2colOutput","createPackedIm2ColProgramInfoLoader","kernelReshaped","computeTotalPad","inDim","adj","kernel","dilation","outSize","distributePadding","totalPad","head","tail","smallPad","convTranspose2d","adjustedAttributes","getAdjustedConvTransposeAttributes","convTranspose2DUnpacked","valueInit","inputChannelsPerGroup","createUnpackedConvTransposeProgramInfo","createUnpackedConvTransposeProgramInfoLoader","outputPadding","spatialRank","updateShape","calculateOutputShapeAndPads","newAttributes","activationAttributes","parseInternalActivationAttributes","featureMaps","adjustPads","batchSize","inputSpatialShape","outChannels","dilatedKernelShape","outputSpatialShape","conv2d","getAdjustedConvAttributes","packMode","isPointwise","conv2DUnpackedPointwise","conv2DUnpacked","createMatmulProgramInfoLoader","xIm2Col","createIm2ColProgramInfoLoader","dotProductInputs","createDotProductProgramInfoLoader","PoolConvUtil","adjustPadsBasedOnAutoPad","blocksize","blocksizeSqr","transposePerm","mode","firstReshapeShape","firstReshapedTensor","transposeAttributes","perm","transposeOutput","secondReshapeShape","TypeError","activationCacheKey","createDotProductProgramMetadata","im2colShape","calculateIm2ColDims","kWidth","kHeight","im2colStrides","im2colWidth","im2colHeight","initValue","sharedDim","createDotProductProgramInfo","outputDims","flattenShape","r","func","activation","glslRelu","glslSigmoid","glslClip","clipMin","clipMax","activationName","MIN_CLIP","MAX_CLIP","createGatherProgramInfoLoader","gatherProgramMetadata","indexDataShape","normalizeAxis","indexCopyOps","createGatherProgramInfo","NUMBER_TYPES","createGemmProgramInfoLoader","parseGemmAttributes","isOptionalC","transA","transB","alpha","beta","createGemmProgramInfo","aShape","bShape","M","N","GemmUtil","getShapeOfGemmResult","line","w","wshape","kernelSize","unrolled","row","col","createPackedIm2ColProgramInfo","im2colDims","createIm2ColProgramInfo","createImageScalerProgramInfoLoader","bias","imageScalerProgramMetadata","createGetBiasMethod","createImageScalerProgramInfo","numChannels","meanAndVariance","createMeanAndVarianceProgramInfoLoader","createComputeOutputProgramInfoLoader","meanAndVarianceProgramMetadata","xDims","channelSize","createMeanAndVarianceProgramInfo","computeOutputProgramMetadata","meanAndVarianceShape","textureWidth","textureHeight","meanAndVarianceWidth","meanAndVarianceHeight","createComputeOutputProgramInfo","createLrnProgramInfoLoader","lrnProgramMetadata","C","createLrnProgramInfo","sharedDimIndex","coordsDataType","allGlChannels","getBiasForMatmulSnippet","getBiasForMatmul","getBcastedSamplerForMatmulSnippet","unpackedACoordsSnippet","unpackedBCoordsSnippet","inAShape","inBShape","inARank","inBRank","rankADiff","rankBDiff","broadcastADims","broadcastBDims","coordsASnippet","coordsBSnippet","swapDimSnippet","getBcastSamplerForMatmul","getSamplerAInLoopSnippet","res","getA","getSamplerBInLoopSnippet","getB","createPackedMatmulProgramInfo","createMatmulProgramMetadata","arank","brank","createMatmulProgramInfo","packProgramMetadata","unpackedReversed","inputRank","setup","reversedInputWH","outOfBoundsCondition","cond","getOutOfBoundsCondition","D","getOutput","createPackProgramInfo","getVecChannels","padProgramMetadata","validateInputsV2","createPadProgramInfo","validateInputsV11","attrubutes","generatePadAttributesFromInputs","integerData","floatData","padShape","getPadFunction","getPadConstant","getPadReflect","getPadEdge","createAveragePoolProgramInfo","ceilMode","countIncludePad","isGlobalOperator","getAdjustedPoolAttributesAndOutputShape","op2","generatePoolingCode","createMaxPoolProgramInfo","storageOrder","hasDilations","hasOwnProperty","call","adjustPoolAttributes","computePoolOutputShape","globalMaxPoolAttributes","globalMaxPoolMetadata","inputDims","op1","start","kw","sw","pwStart","pwEnd","dimW","codeW","codeH","codeHEnd","kh","sh","phStart","phEnd","dimH","kernelStrides","stridesRank","padsRank","offsetToIndicesFunction","copyInputDims","copyArray","copyPads","copyKernelStrides","copyStrides","padCode","reduce","cur","array","arrayName","reduceOp","reduceProgramMetadata","createReduceProgramInfo","axes","keepDims","iRank","idxCopy","normalizeAxes","ops","reduceOps","k","idxZero","input3D","outputShape3D","createPackedReshape3DProgramMetadata","inputShape3D","mainLoop","outputCoords","getReshapedInputCoords","getFlattenedIndexFrom3D","createPackedReshape3DProgramInfo","batch","isCheapReshape","calculateReshapedDims","resizeProgramMetadata","createPackedResizeProgramInfo","parseUpsampleAttributes","scales","prepareInputs","every","coordinateTransformMode","dim","outputHeight","outputWidth","inputHeight","inputWidth","scalesHeight","scalesWidth","getSourceFracIndex","outputSizes","scalesTensor","scalesInputIdx","sizesInputIdx","parseScalesData","isResize","sizesTensor","parseScalesDataFromOutputSize","yDims","scalesValidation","end","Int32Array","sliceProgramMetadata","createSliceProgramInfo","starts","ends","val","normalizedAxes","sliceOps","validateInputsV10","generateSliceAttributesFromInputs","some","softmaxComputeMaxProgramMetadata","softmaxComputeScaleProgramMetadata","softmaxProgramMetadata","logicalRowCount","sizeToDimension","featureCount","sizeFromDimension","computeSoftmax","isTransposeRequired","transposedInputShape","transposeAttribute","transposedInputs","_","p","computeMaxProgramInfo","createComputeMaxProgramInfo","max","computeScaleProgramInfo","createComputScaleProgramInfo","softMaxProgramInfo","createSoftMaxProgramInfo","maxElementPerLogicalRow","normalizationPerLogicalRow","splitProgramMetadata","count","getProgramCount","createSplitProgramInfo","numOutputs","outputs","SplitUtil","splitShape","offset","validateInputsV13","sumProgramMetadata","createSumProgramInfo","j","tileProgramMetadata","createTileProgramInfo","tileOps","transposeProgramMetadata","createTransposeProgramInfo","getAdjustedPerm","unpackedOutputShape","getOutputShape","getPermFunctionBody","sortBasedOnPerm","reverseFunc","downloadUint8AsFloat","glslAbs","glslBuiltinUnary","glslAcos","glslAsin","glslAtan","glslCeil","glslCos","glslElu","glslExp","glslFloor","glslIdentity","glslLeakyRelu","glslLog","glslNeg","glslNot","glslSin","glslSqrt","glslTan","glslTanh","createElementwiseProgramInfoLoader","createElementwiseProgramInfo","generateClipAttributesFromInputs","unpackProgramMetadata","createUnpackProgramInfo","innerDims","sourceCoords","getSourceCoords","unsqueezeShape","upsampleProgramMetadata","createUpsampleProgramInfo","opset","extrapolationValue","needRoiInput","useExtrapolation","nearestMode","cubicCoefficientA","excludeOutside","useNearest2xOptimization","roiInputIdx","outputPitches","inputPitches","precalculatedPitches","getInputFloatFunction","profiler","textureLayoutStrategy","repo","attributesBound","buildArtifact","event","gl","useProgram","bindOutput","bindAttributes","attribLocations","bindUniforms","uniformLocations","err","error","draw","vertexShader","deleteShader","deleteProgram","preprocessor","GlslPreprocessor","fragScript","compile","getUniformLocations","getAttribLocations","fragShaderScript","vertexShaderScript","getVertexShaderSource","compileShader","VERTEX_SHADER","debug","fragShader","FRAGMENT_SHADER","createProgram","attachFramebuffer","positionHandle","position","textureCoordHandle","textureCoord","setVertexAttributes","textures","texturePosition","location","find","bindTexture","uniform1fv","uniform1f","uniform1iv","uniform1i","uniformHandle","bindTextureToUniform","getAttribLocation","getUniformLocation","reference","PreferLogicalStrategy","maxTextureSize","ProgramManager","TextureManager","reuseTextures","pack2unpackMap","unpack2packMap","createInferenceHandler","WebGLInferenceHandler","onGraphInitialized","graph","initializers","getValues","addInitializer","opsets","op","resolveOperator","impl","opImpl","opInit","internalFormat","R32F","format","RED","RGBA32F","RGBA","src","textureSize","allocate","dataSize","dest","ALPHA","UNSIGNED_BYTE","_textureSize","byteOffset","byteLength","isEmptyArray","isArray","parseAxisParam","assert","ax","isInt","sizeFromShape","sizeToSquarishShape","computeTextureWH","prefs","breakAxis","wsize","hsize","totalSize","wh","computeTexture","logShape","squeezeResult","dimsToSkip","inferredDims","reversedWH","config","pendingRead","inUseTextures","idleTextures","textureLookup","textureDataType","toEncoderType","encoder","getEncoder","pop","updateTexture","toTextureData","allocateTexture","toTensorData","subscribers","createAndWaitForFence","tensorData","deleteTexture","splice","Int16Array","Int8Array","Uint16Array","Float64Array","_dataType","len","checkFn","delayFn","_counter","maxCounter","reject","tryCount","tryFn","nextBackoff","setTimeout","charAt","toUpperCase","createNewWebGLContext","canvas","ca","depth","antialias","stencil","preserveDrawingBuffer","premultipliedAlpha","failIfMajorPerformanceCaveat","getContext","WebGLContext","webgl2","OffscreenCanvas","createOffscreenCanvas","document","createElement","createCanvas","isContextLost","disable","DEPTH_TEST","STENCIL_TEST","BLEND","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","enable","SCISSOR_TEST","CULL_FACE","cullFace","BACK","linearSearchLastTrue","frameBufferBound","itemsToPoll","getExtensions","vertexbuffer","createVertexbuffer","framebuffer","createFramebuffer","queryVitalParameters","createTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","checkError","texSubImage2D","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","viewport","scissor","readPixels","isFramebufferReady","getActiveTexture","getParameter","ACTIVE_TEXTURE","TEXTURE0","getTextureBinding","TEXTURE_BINDING_2D","getFramebufferBinding","FRAMEBUFFER_BINDING","vertexAttribPointer","enableVertexAttribArray","attachShader","linkProgram","shaderType","shader","createShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","activeTexture","drawArrays","TRIANGLE_STRIP","getError","label","toString","DataEncoders","RedFloat32DataEncoder","isRenderFloat32Supported","RGBAFloatDataEncoder","textureHalfFloatExtension","HALF_FLOAT_OES","Uint8DataEncoder","unit","maxTextureImageUnits","disposed","deleteFramebuffer","bindBuffer","ARRAY_BUFFER","deleteBuffer","ELEMENT_ARRAY_BUFFER","finish","createDefaultGeometry","createBuffer","geometry","bufferData","STATIC_DRAW","fb","isFloatTextureAttachableToFrameBuffer","checkFloatTextureAttachableToFrameBuffer","checkRenderFloat32","checkFloat32Download","isBlendSupported","checkFloat32Blend","MAX_TEXTURE_SIZE","MAX_TEXTURE_IMAGE_UNITS","colorBufferFloatExtension","getExtension","disjointTimerQueryWebgl2Extension","textureFloatExtension","frameBuffer","isComplete","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","fragmentShader","POINTS","NO_ERROR","beginTimer","gl2","ext","query","createQuery","beginQuery","TIME_ELAPSED_EXT","endTimer","endQuery","isTimerResultAvailable","available","disjoint","getQueryParameter","QUERY_RESULT_AVAILABLE","GPU_DISJOINT_EXT","getTimerResult","timeElapsed","QUERY_RESULT","deleteQuery","repeatedTry","fenceContext","createFence","pollFence","isFencePassed","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","status","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","addItemToPoll","pollItems","isDoneFn","resolveFn","KernelOp","getNodes","_ops","reset","_starter","resolved","_values","getInputIndices","sessionHandler","modelInputs","graphInputs","sequence","graphValues","rear","thisOpIndex","thisOp","inputList","inputTensors","outputList","downstreamNodes","currentDownstreamNodeIndex","currentDownstreamNode","getOutputIndices","outputIndex","outputTensor","getData","Graph","graphProto","initializer","GraphImpl","Value","valueInfo","_from","_to","tensorValueTypeFromProto","tensorType","Node","_nodeProto","NodeProto","opType","tensorAttributesFromORTFormat","executeNode","graphInitializer","buildGraph","transformGraph","checkIsAcyclic","_allInputIndices","getInputNames","_allInputNames","_allOutputIndices","getOutputNames","_allOutputNames","_allData","_nodes","GraphProto","buildGraphFromOnnxFormat","buildGraphFromOrtFormat","dataIndices","nodesIndices","inputValueNames","currentIndex","tensorDimsFromProto","nodeProto","pick","dataIndex","inputsLength","inputName","nodeArgsLength","nodeArgs","valueType","TypeInfoValue","tensor_type","TensorTypeAndShape","elemType","dimLength","dimValue","initializersLength","tensorDimsFromORTFormat","outputsLength","outputName","nodesLength","attributesLength","starters","nodesStack","nodesState","nodeIndex","outgoingEdgeIndex","downstreamNodeIndex","removeAllIdentityNodes","removeAllDropoutNodes","fuseConvActivationNodes","finalizeGraph","newIndices","nodePossition","ind","currentData","deleteNode","inputValueIndex","outputValueIndex","nodesConsumingOutput","delIndex","replaceIndex","isActivation","n","next","child","SEVERITY_VALUE","info","fatal","LOGGER_PROVIDER_MAP","_severity","_content","_category","severity","content","category","console","color","LOGGER_DEFAULT_CONFIG","provider","minimalSeverity","logDateTime","logSourceLocation","LOGGER_CONFIG_MAP","arg0","arg1","arg2","arg3","bind","logInternal","stack","Date","toISOString","previousConfig","logLevel","Event","startTime","endCallback","timer","ctx","waitForQueryAndGetTime","EventRecord","endTime","maxNumberEvents","flushBatchSize","flushIntervalInMilliseconds","_started","_flushPointer","_maxNumberEvents","_flushBatchSize","_flushIntervalInMilliseconds","_timingEvents","_flushTime","now","stop","logOneEvent","begin","isPromise","then","reason","eventRes","endSync","checkTimer","toFixed","currentTime","previousPointer","started","performance","load","buf","isOrtFormat","loadFromOnnxFormat","loadFromOrtFormat","modelProto","ModelProto","irVersion","_opsets","opsetImport","domain","_graph","flatbuffers","ByteBuffer","ortModel","InferenceSession","getRootAsInferenceSession","model","opsetImportLength","opsetId","INT_TYPES","FLOAT_TYPES","matchSelector","selector","endsWith","rangeStart","parseInt","substring","isNaN","pair","rangeEnd","rules","rule","versionSelector","DimensionValueType","TensorDataType","NodeType","Shape","bb","bb_pos","__init","readInt32","setPosition","SIZE_PREFIX_LENGTH","__offset","Dimension","__indirect","__vector","__vector_len","builder","startObject","addFieldOffset","startVector","addOffset","endVector","numElems","endObject","startShape","addDim","endShape","DimensionValue","denotation","optionalEncoding","__string","valueOffset","denotationOffset","startDimension","addValue","addDenotation","endDimension","dimType","readInt8","UNKNOWN","readInt64","createLong","dimParam","addFieldInt8","addFieldInt64","dimParamOffset","startDimensionValue","addDimType","addDimValue","addDimParam","endDimensionValue","UNDEFINED","addFieldInt32","shapeOffset","startTensorTypeAndShape","addElemType","addShape","endTensorTypeAndShape","MapType","keyType","TypeInfo","valueTypeOffset","startMapType","addKeyType","addValueType","endMapType","SequenceType","elemTypeOffset","startSequenceType","endSequenceType","EdgeEnd","readUint32","srcArgIndex","dstArgIndex","node_index","src_arg_index","dst_arg_index","prep","writeInt32","NodeEdge","inputEdges","inputEdgesLength","outputEdges","outputEdgesLength","inputEdgesOffset","outputEdgesOffset","startNodeEdge","addNodeIndex","addInputEdges","addOutputEdges","endNodeEdge","docString","sinceVersion","Primitive","executionProviderType","inputArgCounts","inputArgCountsLength","inputArgCountsArray","bytes","implicitInputs","implicitInputsLength","nameOffset","docStringOffset","domainOffset","opTypeOffset","executionProviderTypeOffset","inputsOffset","outputsOffset","attributesOffset","inputArgCountsOffset","addInt32","implicitInputsOffset","startNode","addName","addDocString","addDomain","addSinceVersion","addIndex","addOpType","addType","addExecutionProviderType","addInputs","addOutputs","addAttributes","addInputArgCounts","addImplicitInputs","endNode","ValueInfo","typeOffset","startValueInfo","endValueInfo","readUint8","NONE","__union","startTypeInfo","endTypeInfo","OperatorSetId","startOperatorSetId","addVersion","endOperatorSetId","dimsLength","rawData","rawDataLength","rawDataArray","stringData","stringDataLength","dimsOffset","addInt64","rawDataOffset","addInt8","stringDataOffset","startTensor","addDims","addDataType","addRawData","addStringData","endTensor","SparseTensor","values","indices","valuesOffset","indicesOffset","startSparseTensor","addValues","addIndices","endSparseTensor","readFloat32","floatsLength","graphsLength","addFieldFloat32","sOffset","tOffset","gOffset","floatsOffset","addFloat32","intsOffset","stringsOffset","tensorsOffset","graphsOffset","startAttribute","addF","addI","addS","addT","addG","addFloats","addInts","addStrings","addTensors","addGraphs","endAttribute","maxNodeIndex","nodeEdges","nodeEdgesLength","sparseInitializers","sparseInitializersLength","initializersOffset","nodeArgsOffset","nodesOffset","nodeEdgesOffset","sparseInitializersOffset","startGraph","addInitializers","addNodeArgs","addNodes","addMaxNodeIndex","addNodeEdges","addSparseInitializers","endGraph","Model","producerName","producerVersion","modelVersion","graphDocString","opsetImportOffset","producerNameOffset","producerVersionOffset","graphOffset","graphDocStringOffset","startModel","addIrVersion","addOpsetImport","addProducerName","addProducerVersion","addModelVersion","addGraph","addGraphDocString","endModel","KernelCreateInfos","nodeIndices","nodeIndicesLength","nodeIndicesArray","kernelDefHashes","readUint64","kernelDefHashesLength","nodeIndicesOffset","kernelDefHashesOffset","startKernelCreateInfos","addNodeIndices","addKernelDefHashes","endKernelCreateInfos","SubGraphSessionState","graphId","sessionState","SessionState","graphIdOffset","sessionStateOffset","requiredField","startSubGraphSessionState","addGraphId","addSessionState","endSubGraphSessionState","kernels","subGraphSessionStates","subGraphSessionStatesLength","kernelsOffset","subGraphSessionStatesOffset","startSessionState","addKernels","addSubGraphSessionStates","endSessionState","__has_identifier","ortVersion","ortVersionOffset","modelOffset","startInferenceSession","addOrtVersion","addModel","endInferenceSession","outputNames","feeds","_fetches","_options","inputMap","feed","outputMap","startProfiling","endProfiling","_initialized","Profiler","create","graphInputTypes","graphInputDims","_model","arg","process","promisify","readFile","response","fetch","arrayBuffer","isView","modelProtoBlob","initializeOps","_executionPlan","ExecutionPlan","normalizeAndValidateInputs","outputTensors","execute","createOutput","modelInputNames","sortedInputs","sortedInputsIndex","validateInputTensorDims","modelInputIndices","modelValues","graphInput","validateInputTensorTypes","givenInputs","expectedType","actualType","noneDimSupported","expectedDims","actualDims","compareTensorDims","modelOutputNames","dataProvider","asyncDataProvider","_strides","Guid","validateDimsAndCalcSize","empty","RangeError","dataviewConstructor","sizeof","dataBuffer","createView","tensorProto","str","dataDest","dataSource","DataView","elementSize","sizeofProto","readProto","TensorProto","DataType","INT32","INT16","UINT16","INT8","UINT8","BOOL","int32Data","INT64","int64Data","DOUBLE","doubleData","UINT32","UINT64","uint64Data","element","ortTensor","greaterThanOrEqual","lessThan","toNumber","view","getUint8","getInt8","getUint16","getInt16","getFloat32","getInt32","getUint32","fromBits","getFloat64","expectedDimensions","expr","msg","n1","n2","MatMulUtil","dimsA","dimsB","adims","bdims","isMatMul","crank","cdims","cShapeMatMul","calcMatMulShape","aLen","bLen","broadcastedIndices","originalShape","originalIndices","fillIndex","inplace","resultType","outputIndices","originalIndicesA","originalIndicesB","rest","valA","valB","isAScalar","isBScalar","finalShape","finalRank","unshift","target","targetIndex","sourceIndex","blockSize","leftShape","transLeft","rightShape","transRight","biasShape","K","kDim","isValidBroadcast","typeProto","unsigned","Long","fromValue","low","high","getSizeFromDimensionRange","axisToIncrementOn","originalDims","shapeHints","nDims","unknownDimension","newTensorSize","oldTensorSize","pad","shape1","shape2","total","y","right","inSqueezeList","inputDimsIterator","determineSplit","numElementsAlongAxis","ReduceUtil","keepdims","calcReduceShape","inputStrides","indicesY","calcReduceByAxis","curAxisInd","pos","step","adjustPadAndReturnShape","computeShapeHelper","filterDims","inSize","padHeadIndex","padTailIndex","dkernel","padNeeded","TextDecoder","currentKernelId","commandEncoder","computePassEncoder","pendingDispatchNumber","profilingEnabled","currentKernelCustomData","kernelCustomData","adapter","requestAdapter","deviceDescriptor","requiredLimits","maxComputeWorkgroupStorageSize","limits","maxComputeWorkgroupsPerDimension","maxStorageBufferBindingSize","features","webgpu","profilingMode","requiredFeatures","device","requestDevice","gpuDataManager","createGpuDataManager","kernelPersistentData","configureLogger","onuncapturederror","ev","GPUValidationError","message","profilingQuerySet","createQuerySet","getCommandEncoder","createCommandEncoder","getComputePassEncoder","beginComputePass","endComputePass","queue","submit","refreshPendingBuffers","createKernelOutput","createIntermediateOutput","inputDatas","gpuData","inputTensorShapes","inputGpuDataTypes","inputTensorShapesToString","inputGpuDataTypesToString","validatedOutputIndices","outputTensorViews","outputDatas","isTemporary","isPersistent","tensorView","temporaryData","persistentData","normalizedDispatchGroup","normalizeDispatchGroupSize","dispatchGroup","LOG_DEBUG","upload","gpuDataId","memcpy","dst","getTargetBuffer","download","alloc","id","free","ptr","release","createKernel","kernelId","WEBGPU_OP_RESOLVE_RULES","releaseKernel","computeKernel","kernelEntry","TensorViewImpl","getFloat32Array","elementCount","HEAP8","getBigInt64Array","BigInt64Array","getInt32Array","newDims","ComputeContextImpl","customDataBuffer","HEAPU8","customDataOffset","customDataSize","contextDataOffset","heapU32","HEAPU32","opKernelContext","compute","inputsOutputsMapping","mappedInputs","getTensorElementSize","bufferSize","stackSave","stackAlloc","_JsepOutput","stackRestore","jsepInit","WebGpuBackend","isSourceGpu","dataOffset","logLevelPrefix","configLogLevel","$configLogLevel","$debug","LOG","messageLevel","logLevelStringToEnum","level","args","isChannelLast","calcNormalizedBufferSize","guid","GpuDataManagerImpl","storageCache","downloadCache","freeBuffers","buffersForUploadingPending","buffersPending","srcArrayBuffer","srcOffset","srcLength","gpuDataCache","originalSize","gpuBufferForUploading","mappedAtCreation","GPUBufferUsage","MAP_WRITE","COPY_SRC","getMappedRange","unmap","copyBufferToBuffer","sourceId","destinationId","sourceGpuDataCache","destinationGpuDataCache","STORAGE","COPY_DST","gpuBuffer","buffers","GpuDataType","default","cachedData","downloadData","gpuReadBuffer","MAP_READ","readDataPromise","mapAsync","GPUMapMode","READ","destroy","storage","acosh","asinh","atanh","pool","clipV10","cosh","parseAlphaAttributes","erf","expand","parseGlobalMaxPoolAttributes","reciprocal","reduceL1","reduceL2","reduceLogSumExp","reduceSumSquare","sinh","thresholdedRelu","typeSnippet","component","activationFnSnippet","_hasPreluActivationWeights","_packed","_coordsLength","biasActivationSnippet","createConv2DMatMulProgramInfo","dimAOuter","dimBOuter","dimInner","sequentialAccessByThreads","isChannelsLast","inChannels","outWidth","outHeight","isVec4","dispatchX","dispatchY","workGroupSize","elementsPerThread","dispatch","innerElementSize","tileAOuter","tileBOuter","tileInner","fitAOuter","fitBOuter","fitInner","elementsSize","declareInputs","declareFunctions","gpuDataType","z","getShaderSource","utilFunctions","addBias","hasPreluActivationWeights","innerElementSizeX","innerElementSizeW","coordASnippet","coordResSnippet","xHeight","xWidth","readXSnippet","getXSnippet","sampleX","sampleW","getWSnippet","resType","aType","bType","conv2dCommonSnippet","makeMatMulPackedVec4Source","makeMatMulPackedSource","createConvTranspose2DProgramInfo","squeezeOutputShapeFunction","shaderHelper","rowDim","colDim","channelDim","outputSize","workPerThread","wIndicesHelper","createIndicesHelper","dyIndicesHelper","outputIndicesHelper","codeSnippet4","indicesVariableDeclaration","i2oExpression","codeSnippet","o2iCall","i2oImpl","o2iImpl","mainStart","guardAgainstOutOfBoundsWorkgroupSizes","createConvTranspose2DOpProgramShaderSource","workgroupSize","transposeA","splitK","splitedDimInner","isVectorA","tileAWidth","tileAHight","rowPerThreadB","calculateResultSnippet","writeDataToSubASnippet","rowPerThreadA","colPerThreadA","matmulSnippet","readDataFromSubASnippet","createBinaryOpProgramInfoLoader","funcCall","additionalImplementation","outputDataType","vectorize","sharedDimension","dimA","dimsOutput","doBroadcast","typeA","typeB","typeOutput","vecSize","expressionScalar","expressionVector","scalar","vector","broadcastImpl","calcOffsetImpl","iType","assignment","singleAssignment","expressionA","expressionB","createBinaryOpProgramShader","createBinaryOpProgramInfo","WORKGROUP_SIZE","o2iSnippet","varOffset","varIndices","isPtr","ShaderHelperImpl","workgroupSizeX","workgroupSizeY","workgroupSizeZ","is1DimensionDispatch","createShaderHelper","adjustedAxis","inputStorageBuffersDeclarations","inputIndicesHelpers","indicesAxis","indicesHelper","returnSnippet","readBufferDataImpl","createConcatProgramInfo","createConcatProgramInfoLoader","createGroupedConvProgramInfoLoader","getActicationSnippet","xIndicesHelper","createGroupedConvProgramInfo","updateOutputShape","wIsConst","createConvTranspose2DProgramInfoLoader","convTranspose1d","weightTransposeAttribute","auto_pad","kernel_shape","w_is_const","conv1d","inputChannels","weightHeight","weightWidth","transposedWeight","wT","convInputs","createConv2DMatMulProgramInfoLoader","createConv2DMatMulProgramMetadata","expandProgramMetadata","getAdjustedShape","diff","shapeIndex","inputShapeIndex","inputIndicesHelper","createExpandProgramInfo","activation_params","calculateAlpha","calculateC","m","broadcastM","broadcastN","offsetC","inputShapeAsChannelFirst","outputShapeAsChannelFirst","dimIdxW","dimIdxH","parsePoolCommonAttributes","ceil_mode","count_include_pad","globalPoolAttributes","storage_order","noOp","createReduceProgramInfoLoader","updatedAttributes","noopWithEmptyAxes","createReduceAttributesFromInputs","outputDimsLength","initInputIdx","reduceOnAllAxes","readInput","fixStartEndValues","steps","newValue","createSliceProgramInfoLoader","createSliceAttributesFromInputs","inputSize","includes","signs","sign","numSteps","newEnd","newStart","calculateInputIndicesImpl","splitSizes","createSplitAttributesFromInputs","outputStorageBuffersDeclarations","outputIndicesHelpers","outputShapes","writeBufferDataImpl","createSplitProgramInfoLoader","permAttr","permFunctionBody","datasize","expression","createElementwiseProgramShader","writeTimestamp","setPipeline","computePipeline","entries","binding","resource","bindGroup","createBindGroup","getBindGroupLayout","setBindGroup","dispatchWorkgroups","queryData","QUERY_RESOLVE","syncData","resolveQuerySet","kernelName","mappedData","BigUint64Array","startTimeU64","endTimeU64","profilingTimeBase","isSafeInteger","normalizedDispatchGroupSize","code","shaderModule","createShaderModule","createComputePipeline","entryPoint","limitPerDimension","dispatchAverage","cbrt","isProxy","proxyWorker","initWasmCallbacks","initOrtCallbacks","initializing","initialized","aborted","createSessionAllocateCallbacks","createSessionFinalizeCallbacks","createSessionCallbacks","releaseSessionCallbacks","runCallbacks","endProfilingCallbacks","ensureWorker","onProxyWorkerMessage","out","scriptSrc","currentScript","wasmPaths","substr","lastIndexOf","terminate","onmessage","in","postMessage","initializeWebAssembly","initializeRuntime","core","initRuntime","createSessionAllocate","createSessionFinalize","modeldata","createSession","releaseSession","sessionId","inputIndices","extractTransferableBuffers","setRunOptions","getInstance","runOptionsHandle","allocs","runOptions","logSeverityLevel","logVerbosityLevel","tagDataOffset","tag","allocWasmString","_OrtCreateRunOptions","checkLastError","extra","iterateExtraOptions","WeakSet","keyDataOffset","valueDataOffset","_OrtAddRunConfigEntry","_OrtReleaseRunOptions","_free","runtimeInitialized","path","modelData","fetches","inputArray","kvp","setSessionOptions","sessionOptionsHandle","sessionOptions","use_ort_model_bytes_directly","executionProviders","ep","enableMemPattern","appendDefaultOptions","graphOptimizationLevel","getGraphOptimzationLevel","executionMode","getExecutionMode","logIdDataOffset","logId","optimizedModelFilePathOffset","optimizedModelFilePath","_OrtCreateSessionOptions","enableCpuMemArena","enableProfiling","epName","webnnOptions","deviceType","_OrtAddSessionConfigEntry","powerPreference","epNameDataOffset","_OrtAppendExecutionProvider","setExecutionProviders","_OrtReleaseSessionOptions","tensorDataTypeStringToEnum","tensorDataTypeEnumToString","dateType","tensorTypeToTypedArrayConstructor","loggingLevel","_OrtInit","initJsep","activeSessions","modelDataOffset","_malloc","sessionHandle","inputNamesUTF8Encoded","outputNamesUTF8Encoded","_OrtCreateSession","outputCount","_OrtGetInputOutputCount","HEAP32","getSessionInputOutputCount","_OrtGetInputName","UTF8ToString","_OrtGetOutputName","_OrtFree","_OrtReleaseSession","runOptionsAllocs","inputValues","inputAllocs","dataByteLength","dimIndex","_OrtCreateTensor","beforeRunStack","inputValuesOffset","inputNamesOffset","outputValuesOffset","outputNamesOffset","inputValuesIndex","inputNamesIndex","outputValuesIndex","outputNamesIndex","errorCode","_OrtRun","runPromise","jsepRunPromise","beforeGetTensorDataStack","tensorDataOffset","_OrtGetTensorData","tensorDataIndex","maxBytesToRead","_OrtReleaseTensor","profileFileName","_OrtEndProfiling","ortWasmFactory","ortWasmFactoryThreaded","flags","timeout","useThreads","SharedArrayBuffer","MessageChannel","port1","WebAssembly","validate","isMultiThreadSupported","useSimd","isSimdSupported","wasmPrefixOverride","wasmFileName","getWasmFileName","wasmPathOverride","isTimeout","tasks","locateFile","fileName","scriptDirectory","Blob","URL","createObjectURL","prefix","mainScriptUrlOrBlob","__dirname","scriptSourceCode","what","race","PThread","terminateAllThreads","dataLength","lengthBytesUTF8","stringToUTF8","seen","paramsOffset","_OrtGetLastError","errorMessagePointer","errorMessage","Worker_fn","workerConstructor","workerOptions","url","globalScope","window","blob","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","append","getBlob","webkitURL","objectURL","worker","revokeObjectURL","encodeURIComponent","valuesById","$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Version","properties","sparseTensors","typeProtos","prototype","refAttrName","newBuffer","sparseTensor","tp","emptyArray","writer","uint32","string","float","int64","fork","ldelim","TypeProto","int32","SparseTensorProto","encodeDelimited","reader","end2","skipType","decodeDelimited","verify","isString","fromObject","object","String","LongBits","base64","toObject","arrays","defaults","long","longs","enums","json","isFinite","toJSON","toJSONOptions","getTypeUrl","typeUrlPrefix","ValueInfoProto","TrainingInfoProto","initializationBinding","updateBinding","initialization","algorithm","StringStringEntryProto","metadataProps","trainingInfo","functions","OperatorSetIdProto","FunctionProto","TensorAnnotation","quantParameterTensorNames","tensorName","sparseInitializer","quantizationAnnotation","externalData","segment","dataLocation","Segment","double","uint64","DataLocation","TensorShapeProto","$oneOfFields","defineProperty","oneOfGetter","oneOfSetter","oneofs","sequenceType","mapType","optionalType","sparseTensorType","Sequence","Optional","OperatorStatus","attributeProto","_scriptDir","ortWasmThreaded","__filename","aa","ba","da","A","ea","fa","ha","ia","ja","ka","ready","l","oc","Tb","Vb","Gb","Ub","$a","Wb","Xb","qa","ra","sa","la","ma","na","oa","importScripts","E","F","ENVIRONMENT_IS_PTHREAD","G","pa","fs","ta","dirname","startsWith","normalize","readFileSync","thisProgram","argv","exitCode","inspect","global","Worker","href","XMLHttpRequest","open","send","responseText","responseType","onload","onerror","ua","va","warn","writeSync","xa","wa","print","H","printErr","quit","wasmBinary","noExitRuntime","I","ya","za","L","Aa","J","HEAP16","HEAPU16","HEAPF32","HEAPF64","HEAP64","HEAPU64","Ba","INITIAL_MEMORY","wasmMemory","Memory","initial","maximum","shared","Ca","Da","Ea","Fa","Ga","Ha","preRun","Ia","Ja","onAbort","RuntimeError","Ka","La","Na","credentials","ok","catch","Ma","instantiate","Pa","Yb","q","u","h","Qa","Ra","Sa","O","qb","bc","Ta","Pb","tb","sb","cmd","start_routine","dc","Mb","pthread_ptr","unref","kc","Ua","Va","fromCharCode","Wa","Xa","P","ec","onExit","Ya","Za","wb","Kb","Cb","Rb","nc","receiveObjectTransfer","ac","threadInitTLS","Jb","setExitStatus","Ib","qc","ab","$b","Nb","targetThread","pc","transferList","cb","thread","loaded","threadId","text","alert","filename","lineno","on","handlers","urlOrBlob","wasmModule","Zb","Lb","db","ib","kb","Eb","zb","yb","lb","mb","mc","nb","ob","pb","charCodeAt","rb","ub","vb","xb","Ab","Bb","Db","establishStackSpace","eb","invokeEntryPoint","gb","apply","hb","Q","Fb","Hb","arguments","R","S","Qb","T","cc","Ob","U","W","fromWireType","Sb","Atomics","lc","store","__emscripten_thread_mailbox_await","checkMailbox","fc","globalThis","Function","ic","getFullYear","getMonth","getDate","rc","sc","tc","uc","xc","vc","wc","Ac","zc","Bc","Cc","hrtime","timeOrigin","Gc","Dc","Ec","Fc","USER","LOGNAME","PATH","PWD","HOME","LANG","languages","Hc","Ic","Jc","Kc","Lc","Mc","Nc","Oc","Pc","Sc","yc","V","getDay","getTime","setDate","setMonth","setFullYear","hc","jc","Qc","Rc","Tc","Z","Y","Xc","Vc","Yc","Zc","$c","ad","bd","ed","fd","Browser","resume","asm","dd","cd","pause","gd","hd","kd","ld","BindingError","InternalError","count_emval_handles","md","od","jd","nd","toWireType","argPackAdvance","readValueFromPointer","Uint8ClampedArray","ga","ref","deleteObject","gc","getUTCSeconds","getUTCMinutes","getUTCHours","getUTCDate","getUTCMonth","getUTCFullYear","getUTCDay","UTC","getSeconds","getMinutes","getHours","getTimezoneOffset","setTime","getYear","$","toTimeString","grow","Wc","Fibers","Uc","monitorRunDependencies","clearInterval","instantiateWasm","instantiateStreaming","Oa","instance","_pthread_self","__emscripten_tls_init","__embind_initialize_bindings","_a","__emscripten_thread_init","__emscripten_thread_crashed","__emscripten_thread_exit","__emscripten_check_mailbox","jb","pd","dynCall_ii","rd","calledRun","onRuntimeInitialized","postRun","startWorker","setStatus","___start_em_js","___stop_em_js","keepRuntimeAlive","ExitStatus","qd","preInit","ortWasm","copyWithin","fn","pending","b64","s64","parts","chunk","invalidEncoding","test","EventEmitter","_listeners","evt","off","listeners","emit","f32","f8b","le","writeFloat_f32_cpy","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","round","exponent","LN2","readFloat_ieee754","readUint","uint","mantissa","NaN","Infinity","writeUintLE","writeUintBE","readUintLE","readUintBE","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","inquire","moduleName","mod","eval","SIZE","MAX","slab","utf8","read","write","c1","c2","__esModule","EMPTY","isGuid","validator","gen","createEmpty","raw","random","equals","other","isEmpty","protobuf","configure","_configure","BufferWriter","BufferReader","rpc","indexOutOfRange","writeLength","create_array","Buffer","isBuffer","readLongVarint","bits","readFixed32_end","readFixed64","_slice","sint32","bool","fixed32","sfixed32","skip","wireType","BufferReader_","merge","sint64","zzDecode","fixed64","sfixed64","utf8Slice","Service","rpcImpl","requestDelimited","responseDelimited","Boolean","rpcCall","method","requestCtor","responseCtor","request","callback","asPromise","endedByRPC","zero","zzEncode","zeroHash","fromNumber","fromString","toLong","fromHash","hash","toHash","mask","part0","part1","part2","ifNotSet","newError","CustomError","captureStackTrace","writable","enumerable","configurable","isNode","freeze","emptyObject","isObject","isset","isSet","prop","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","lcFirst","toLowerCase","ProtocolError","fieldNames","fieldMap","encoding","allocUnsafe","Op","noop","State","states","writeByte","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","backends","backendsSortedByPriority","priority","currentBackend","backendHints","backendNames","errors","backendName","backendInfo","isInitializing","initPromise","backend_impl_js_1","version_js_1","logLevelValue","common","env_impl_js_1","__createBinding","k2","desc","getOwnPropertyDescriptor","__exportStar","tensor_js_1","isFetchesEmpty","isFetches","arg1Keys","results","returnValue","filePathOrUint8Array","inference_session_impl_js_1","tensorToImageData","tensorToDataURL","pixels2DContext","tensorLayout","inputformat","norm","normMean","normBias","rTensorPointer","gTensorPointer","bTensorPointer","aTensorPointer","fillStyle","fillRect","toDataURL","image","rImagePointer","gImagePointer","bImagePointer","aImagePointer","createImageData","tensorFromImage","bufferToTensor","outputformat","tensorFormat","float32Data","isHTMLImageEle","HTMLImageElement","isImageDataEle","ImageData","isImageBitmap","ImageBitmap","bufferToTensorOptions","resizedHeight","resizedWidth","drawImage","getImageData","newImage","Image","crossOrigin","img","tempCanvas","putImageData","tensor_conversion_impl_js_1","tensor_factory_impl_js_1","tensor_utils_impl_js_1","NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP","NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP","isBigIntChecked","isBigInt64ArrayAvailable","isBigUint64ArrayAvailable","checkBigInt","typedArrayConstructor","BigInt","firstElementType","mappedType","calculateSize","toImageData","tensorReshape","tensor_impl_js_1","Instance","Module","ctz32","clz32","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","radix","radixToPower","power","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","eq","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","ne","comp","lt","lessThanOrEqual","lte","greaterThan","gt","gte","ge","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","b00","divide","divisor","approx","toUnsigned","shru","shr","shl","log2","delta","approxRes","approxRem","modulo","countLeadingZeros","clz","countTrailingZeros","ctz","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","rotateLeft","rotl","rotateRight","rotr","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","_default","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","float32","float64","toFloat64","Builder","opt_initial_size","initial_size","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","clear","capacity","forceDefaults","asUint8Array","additional_bytes","align_size","old_buf_size","growByteBuffer","byte_size","writeInt8","writeInt16","writeInt64","writeFloat32","writeFloat64","addInt16","addFloat64","voffset","slot","addFieldInt16","addFieldFloat64","addFieldStruct","nested","notNested","new_buf_size","nbb","numfields","vtableloc","trimmed_size","existing_vtable","vt1","outer_loop","vt2","readInt16","root_table","opt_file_identifier","opt_size_prefix","size_prefix","file_identifier","finishSizePrefixed","table","field","table_start","vtable_start","elem_size","num_elems","alignment","createString","codePoint","bytes_","position_","readUint16","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","vtable_offset","opt_encoding","ident","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","definition","Symbol","toStringTag","__webpack_exports__"],"sourceRoot":""}