{"version":3,"file":"ort-web.es6.min.js","mappings":"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","sources":["webpack://onnxruntime-web/webpack/universalModuleDefinition","webpack://onnxruntime-web/./lib/backend-onnxjs.ts","webpack://onnxruntime-web/./lib/backend-wasm.ts","webpack://onnxruntime-web/./lib/index.ts","webpack://onnxruntime-web/./lib/onnxjs/attribute-with-cache-key.ts","webpack://onnxruntime-web/./lib/onnxjs/attribute.ts","webpack://onnxruntime-web/./lib/onnxjs/backend.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/backend-webgl.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-coordinate-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-definitions.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-encoding-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-fragcolor-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-function-inliner.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-preprocessor.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-registered-libs.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-shape-utils-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-source.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-vec-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/inference-handler.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/op-resolve-rules.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/batch-normalization.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/binary-op.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/cast.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/concat-packed.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/concat.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/conv-grouped.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/conv-pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/conv-transpose.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/conv.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/depth-to-space.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/dot-product.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/flatten.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/fuse-utils.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/gather.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/gemm.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/im2col-pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/im2col.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/image-scaler.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/instance-normalization.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/lrn.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/matmul-pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/matmul.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/packing-utils.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/pad.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/pool.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/reduce.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/reshape-packed.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/reshape.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/resize-packed.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/shape.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/slice.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/softmax.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/split.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/squeeze.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/sum.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/tile.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/transpose.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/uint8-encode.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/unary-op.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/unpack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/unsqueeze.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/upsample.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/program-manager.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/session-handler.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/texture-data-encoder.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/texture-layout-strategy.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/texture-layout.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/texture-manager.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/types.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/utils.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/webgl-context-factory.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/webgl-context.ts","webpack://onnxruntime-web/./lib/onnxjs/execution-plan.ts","webpack://onnxruntime-web/./lib/onnxjs/graph.ts","webpack://onnxruntime-web/./lib/onnxjs/instrument.ts","webpack://onnxruntime-web/./lib/onnxjs/model.ts","webpack://onnxruntime-web/./lib/onnxjs/operators.ts","webpack://onnxruntime-web/./lib/onnxjs/opset.ts","webpack://onnxruntime-web/./lib/onnxjs/ort-schema/flatbuffers/ort-generated.ts","webpack://onnxruntime-web/./lib/onnxjs/session-handler.ts","webpack://onnxruntime-web/./lib/onnxjs/session.ts","webpack://onnxruntime-web/./lib/onnxjs/tensor.ts","webpack://onnxruntime-web/./lib/onnxjs/util.ts","webpack://onnxruntime-web/./lib/version.ts","webpack://onnxruntime-web/./lib/wasm/proxy-wrapper.ts","webpack://onnxruntime-web/./lib/wasm/run-options.ts","webpack://onnxruntime-web/./lib/wasm/session-handler.ts","webpack://onnxruntime-web/./lib/wasm/session-options.ts","webpack://onnxruntime-web/./lib/wasm/wasm-common.ts","webpack://onnxruntime-web/./lib/wasm/wasm-core-impl.ts","webpack://onnxruntime-web/./lib/wasm/wasm-factory.ts","webpack://onnxruntime-web/./lib/wasm/wasm-utils.ts","webpack://onnxruntime-web/./lib/wasm/proxy-worker/main.ts","webpack://onnxruntime-web/../node_modules/worker-loader/dist/runtime/inline.js","webpack://onnxruntime-web/./lib/onnxjs/ort-schema/protobuf/onnx.js","webpack://onnxruntime-web/./lib/wasm/binding/ort-wasm-threaded.min.js","webpack://onnxruntime-web/./lib/wasm/binding/ort-wasm.js","webpack://onnxruntime-web/./node_modules/@protobufjs/aspromise/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/base64/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/eventemitter/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/float/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/inquire/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/pool/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/utf8/index.js","webpack://onnxruntime-web/./node_modules/guid-typescript/dist/guid.js","webpack://onnxruntime-web/./node_modules/protobufjs/minimal.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/index-minimal.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/reader.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/reader_buffer.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/roots.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/rpc.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/rpc/service.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/util/longbits.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/util/minimal.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/writer.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/writer_buffer.js","webpack://onnxruntime-web/external umd {\"commonjs\":\"onnxruntime-common\",\"commonjs2\":\"onnxruntime-common\",\"root\":\"ort\"}","webpack://onnxruntime-web/./node_modules/long/umd/index.js","webpack://onnxruntime-web/./node_modules/flatbuffers/js/flatbuffers.mjs","webpack://onnxruntime-web/webpack/bootstrap","webpack://onnxruntime-web/webpack/runtime/compat get default export","webpack://onnxruntime-web/webpack/runtime/define property getters","webpack://onnxruntime-web/webpack/runtime/hasOwnProperty shorthand","webpack://onnxruntime-web/webpack/runtime/make namespace object","webpack://onnxruntime-web/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"onnxruntime-common\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"onnxruntime-common\")) : factory(root[\"ort\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, (__WEBPACK_EXTERNAL_MODULE__1670__) => {\nreturn ","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n/* eslint-disable import/no-internal-modules */\r\nimport {Backend, InferenceSession, SessionHandler} from 'onnxruntime-common';\r\n\r\nimport {Session} from './onnxjs/session';\r\nimport {OnnxjsSessionHandler} from './onnxjs/session-handler';\r\n\r\nclass OnnxjsBackend implements Backend {\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n  async init(): Promise<void> {}\r\n\r\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\r\n      Promise<SessionHandler> {\r\n    // NOTE: Session.Config(from onnx.js) is not compatible with InferenceSession.SessionOptions(from\r\n    // onnxruntime-common).\r\n    //       In future we should remove Session.Config and use InferenceSession.SessionOptions.\r\n    //       Currently we allow this to happen to make test runner work.\r\n    const session = new Session(options as unknown as Session.Config);\r\n\r\n    // typescript cannot merge method override correctly (so far in 4.2.3). need if-else to call the method.\r\n    if (typeof pathOrBuffer === 'string') {\r\n      await session.loadModel(pathOrBuffer);\r\n    } else {\r\n      await session.loadModel(pathOrBuffer);\r\n    }\r\n\r\n    return new OnnxjsSessionHandler(session);\r\n  }\r\n}\r\n\r\nexport const onnxjsBackend = new OnnxjsBackend();\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Backend, env, InferenceSession, SessionHandler} from 'onnxruntime-common';\r\nimport {cpus} from 'os';\r\n\r\nimport {initializeWebAssemblyInstance} from './wasm/proxy-wrapper';\r\nimport {OnnxruntimeWebAssemblySessionHandler} from './wasm/session-handler';\r\n\r\n/**\r\n * This function initializes all flags for WebAssembly.\r\n *\r\n * Those flags are accessible from `ort.env.wasm`. Users are allow to set those flags before the first inference session\r\n * being created, to override default value.\r\n */\r\nexport const initializeFlags = (): void => {\r\n  if (typeof env.wasm.initTimeout !== 'number' || env.wasm.initTimeout < 0) {\r\n    env.wasm.initTimeout = 0;\r\n  }\r\n\r\n  if (typeof env.wasm.simd !== 'boolean') {\r\n    env.wasm.simd = true;\r\n  }\r\n\r\n  if (typeof env.wasm.proxy !== 'boolean') {\r\n    env.wasm.proxy = false;\r\n  }\r\n\r\n  if (typeof env.wasm.numThreads !== 'number' || !Number.isInteger(env.wasm.numThreads) || env.wasm.numThreads <= 0) {\r\n    const numCpuLogicalCores = typeof navigator === 'undefined' ? cpus().length : navigator.hardwareConcurrency;\r\n    env.wasm.numThreads = Math.min(4, Math.ceil((numCpuLogicalCores || 1) / 2));\r\n  }\r\n};\r\n\r\nclass OnnxruntimeWebAssemblyBackend implements Backend {\r\n  async init(): Promise<void> {\r\n    // populate wasm flags\r\n    initializeFlags();\r\n\r\n    // init wasm\r\n    await initializeWebAssemblyInstance();\r\n  }\r\n  createSessionHandler(path: string, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\r\n  createSessionHandler(buffer: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\r\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\r\n      Promise<SessionHandler> {\r\n    const handler = new OnnxruntimeWebAssemblySessionHandler();\r\n    await handler.loadModel(pathOrBuffer, options);\r\n    return Promise.resolve(handler);\r\n  }\r\n}\r\n\r\nexport const wasmBackend = new OnnxruntimeWebAssemblyBackend();\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n/* eslint-disable @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports */\r\n// We use \"require\" instead of \"import\" here because import statement must be put in top level. Our current code does\r\n// not allow terser to tree-shaking code as expected because some codes are treated as having side effects.\r\n// So we import code inside the if-clause to allow terser remove the code safely.\r\n\r\nexport * from 'onnxruntime-common';\r\nimport {registerBackend, env} from 'onnxruntime-common';\r\nimport {version} from './version';\r\n\r\nif (!BUILD_DEFS.DISABLE_WEBGL) {\r\n  const onnxjsBackend = require('./backend-onnxjs').onnxjsBackend;\r\n  registerBackend('webgl', onnxjsBackend, -10);\r\n}\r\n\r\nif (!BUILD_DEFS.DISABLE_WASM) {\r\n  const wasmBackend = require('./backend-wasm').wasmBackend;\r\n  if (!BUILD_DEFS.DISABLE_WEBGPU && typeof navigator !== 'undefined' && navigator.gpu) {\r\n    registerBackend('webgpu', wasmBackend, 5);\r\n  }\r\n  registerBackend('cpu', wasmBackend, 10);\r\n  registerBackend('wasm', wasmBackend, 10);\r\n  registerBackend('xnnpack', wasmBackend, 9);\r\n  registerBackend('webnn', wasmBackend, 9);\r\n}\r\n\r\nenv.versions.web = version;\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nclass AttributeWithCacheKeyImpl {\r\n  constructor(attribute: Record<string, unknown>) {\r\n    Object.assign(this, attribute);\r\n  }\r\n\r\n  private _cacheKey: string;\r\n  public get cacheKey(): string {\r\n    if (!this._cacheKey) {\r\n      this._cacheKey =\r\n          Object.getOwnPropertyNames(this).sort().map(name => `${(this as Record<string, unknown>)[name]}`).join(';');\r\n    }\r\n    return this._cacheKey;\r\n  }\r\n}\r\n\r\nexport interface AttributeWithCacheKey {\r\n  readonly cacheKey: string;\r\n}\r\n\r\nexport const createAttributeWithCacheKey = <T extends Record<string, unknown>>(attribute: T): T&AttributeWithCacheKey =>\r\n    new AttributeWithCacheKeyImpl(attribute) as unknown as T & AttributeWithCacheKey;\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport Long from 'long';\r\n\r\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\r\nimport {onnx} from './ort-schema/protobuf/onnx';\r\nimport {Tensor} from './tensor';\r\nimport {decodeUtf8String, LongUtil} from './util';\r\n\r\nimport ortFbs = onnxruntime.experimental.fbs;\r\n\r\nexport declare namespace Attribute {\r\n  export interface DataTypeMap {\r\n    float: number;\r\n    int: number;\r\n    string: string;\r\n    tensor: Tensor;\r\n    floats: number[];\r\n    ints: number[];\r\n    strings: string[];\r\n    tensors: Tensor[];\r\n  }\r\n\r\n  export type DataType = keyof DataTypeMap;\r\n}\r\n\r\ntype ValueTypes = Attribute.DataTypeMap[Attribute.DataType];\r\n\r\ntype Value = [ValueTypes, Attribute.DataType];\r\n\r\nexport class Attribute {\r\n  constructor(attributes: onnx.IAttributeProto[]|ortFbs.Attribute[]|null|undefined) {\r\n    this._attributes = new Map();\r\n    if (attributes !== null && attributes !== undefined) {\r\n      for (const attr of attributes) {\r\n        if (attr instanceof onnx.AttributeProto) {\r\n          this._attributes.set(attr.name, [Attribute.getValue(attr), Attribute.getType(attr)]);\r\n        } else if (attr instanceof ortFbs.Attribute) {\r\n          this._attributes.set(attr.name()!, [Attribute.getValue(attr), Attribute.getType(attr)]);\r\n        }\r\n      }\r\n      if (this._attributes.size < attributes.length) {\r\n        throw new Error('duplicated attribute names');\r\n      }\r\n    }\r\n  }\r\n\r\n  set(key: string, type: Attribute.DataType, value: ValueTypes): void {\r\n    this._attributes.set(key, [value, type]);\r\n  }\r\n  delete(key: string): void {\r\n    this._attributes.delete(key);\r\n  }\r\n  getFloat(key: string, defaultValue?: Attribute.DataTypeMap['float']) {\r\n    return this.get(key, 'float', defaultValue);\r\n  }\r\n\r\n  getInt(key: string, defaultValue?: Attribute.DataTypeMap['int']) {\r\n    return this.get(key, 'int', defaultValue);\r\n  }\r\n\r\n  getString(key: string, defaultValue?: Attribute.DataTypeMap['string']) {\r\n    return this.get(key, 'string', defaultValue);\r\n  }\r\n\r\n  getTensor(key: string, defaultValue?: Attribute.DataTypeMap['tensor']) {\r\n    return this.get(key, 'tensor', defaultValue);\r\n  }\r\n\r\n  getFloats(key: string, defaultValue?: Attribute.DataTypeMap['floats']) {\r\n    return this.get(key, 'floats', defaultValue);\r\n  }\r\n\r\n  getInts(key: string, defaultValue?: Attribute.DataTypeMap['ints']) {\r\n    return this.get(key, 'ints', defaultValue);\r\n  }\r\n\r\n  getStrings(key: string, defaultValue?: Attribute.DataTypeMap['strings']) {\r\n    return this.get(key, 'strings', defaultValue);\r\n  }\r\n\r\n  getTensors(key: string, defaultValue?: Attribute.DataTypeMap['tensors']) {\r\n    return this.get(key, 'tensors', defaultValue);\r\n  }\r\n\r\n  private get<V extends Attribute.DataTypeMap[Attribute.DataType]>(\r\n      key: string, type: Attribute.DataType, defaultValue?: V): V {\r\n    const valueAndType = this._attributes.get(key);\r\n    if (valueAndType === undefined) {\r\n      if (defaultValue !== undefined) {\r\n        return defaultValue;\r\n      }\r\n      throw new Error(`required attribute not found: ${key}`);\r\n    }\r\n    if (valueAndType[1] !== type) {\r\n      throw new Error(`type mismatch: expected ${type} but got ${valueAndType[1]}`);\r\n    }\r\n    return valueAndType[0] as V;\r\n  }\r\n\r\n  private static getType(attr: onnx.IAttributeProto|ortFbs.Attribute): Attribute.DataType {\r\n    const type = attr instanceof onnx.AttributeProto ? (attr).type : (attr as ortFbs.Attribute).type();\r\n    switch (type) {\r\n      case onnx.AttributeProto.AttributeType.FLOAT:\r\n        return 'float';\r\n      case onnx.AttributeProto.AttributeType.INT:\r\n        return 'int';\r\n      case onnx.AttributeProto.AttributeType.STRING:\r\n        return 'string';\r\n      case onnx.AttributeProto.AttributeType.TENSOR:\r\n        return 'tensor';\r\n      case onnx.AttributeProto.AttributeType.FLOATS:\r\n        return 'floats';\r\n      case onnx.AttributeProto.AttributeType.INTS:\r\n        return 'ints';\r\n      case onnx.AttributeProto.AttributeType.STRINGS:\r\n        return 'strings';\r\n      case onnx.AttributeProto.AttributeType.TENSORS:\r\n        return 'tensors';\r\n      default:\r\n        throw new Error(`attribute type is not supported yet: ${onnx.AttributeProto.AttributeType[type]}`);\r\n    }\r\n  }\r\n\r\n  private static getValue(attr: onnx.IAttributeProto|ortFbs.Attribute) {\r\n    const attrType = attr instanceof onnx.AttributeProto ? attr.type : (attr as ortFbs.Attribute).type();\r\n    if (attrType === onnx.AttributeProto.AttributeType.GRAPH || attrType === onnx.AttributeProto.AttributeType.GRAPHS) {\r\n      throw new Error('graph attribute is not supported yet');\r\n    }\r\n\r\n    const value = this.getValueNoCheck(attr);\r\n\r\n    // cast LONG to number\r\n    if (attrType === onnx.AttributeProto.AttributeType.INT && LongUtil.isLong(value)) {\r\n      return LongUtil.longToNumber(value as Long | flatbuffers.Long);\r\n    }\r\n\r\n    // cast LONG[] to number[]\r\n    if (attrType === onnx.AttributeProto.AttributeType.INTS) {\r\n      const arr = (value as Array<number|Long|flatbuffers.Long>);\r\n      const numberValue: number[] = new Array<number>(arr.length);\r\n\r\n      for (let i = 0; i < arr.length; i++) {\r\n        const maybeLong = arr[i];\r\n        numberValue[i] = LongUtil.longToNumber(maybeLong);\r\n      }\r\n\r\n      return numberValue;\r\n    }\r\n\r\n    // cast onnx.TensorProto to onnxjs.Tensor\r\n    if (attrType === onnx.AttributeProto.AttributeType.TENSOR) {\r\n      return attr instanceof onnx.AttributeProto ? Tensor.fromProto(value as onnx.ITensorProto) :\r\n                                                   Tensor.fromOrtTensor(value as ortFbs.Tensor);\r\n    }\r\n\r\n    // cast onnx.TensorProto[] to onnxjs.Tensor[]\r\n    if (attrType === onnx.AttributeProto.AttributeType.TENSORS) {\r\n      if (attr instanceof onnx.AttributeProto) {\r\n        const tensorProtos = value as onnx.ITensorProto[];\r\n        return tensorProtos.map(value => Tensor.fromProto(value));\r\n      } else if (attr instanceof ortFbs.Attribute) {\r\n        const tensorProtos = value as ortFbs.Tensor[];\r\n        return tensorProtos.map(value => Tensor.fromOrtTensor(value));\r\n      }\r\n    }\r\n\r\n    // cast Uint8Array to string\r\n    if (attrType === onnx.AttributeProto.AttributeType.STRING) {\r\n      // string in onnx attribute is of uint8array type, so we need to convert it to string below. While in ort format,\r\n      // string attributes are returned as string, so no conversion is needed.\r\n      if (attr instanceof onnx.AttributeProto) {\r\n        const utf8String = value as Uint8Array;\r\n        return decodeUtf8String(utf8String);\r\n      }\r\n    }\r\n\r\n    // cast Uint8Array[] to string[]\r\n    if (attrType === onnx.AttributeProto.AttributeType.STRINGS) {\r\n      // strings in onnx attribute is returned as uint8array[], so we need to convert it to string[] below. While in ort\r\n      // format strings attributes are returned as string[], so no conversion is needed.\r\n      if (attr instanceof onnx.AttributeProto) {\r\n        const utf8Strings = value as Uint8Array[];\r\n        return utf8Strings.map(decodeUtf8String);\r\n      }\r\n    }\r\n\r\n    return value as ValueTypes;\r\n  }\r\n\r\n  private static getValueNoCheck(attr: onnx.IAttributeProto|ortFbs.Attribute) {\r\n    return attr instanceof (onnx.AttributeProto) ? this.getValueNoCheckFromOnnxFormat(attr) :\r\n                                                   this.getValueNoCheckFromOrtFormat(attr as ortFbs.Attribute);\r\n  }\r\n\r\n  private static getValueNoCheckFromOnnxFormat(attr: onnx.IAttributeProto) {\r\n    switch (attr.type!) {\r\n      case onnx.AttributeProto.AttributeType.FLOAT:\r\n        return attr.f;\r\n      case onnx.AttributeProto.AttributeType.INT:\r\n        return attr.i;\r\n      case onnx.AttributeProto.AttributeType.STRING:\r\n        return attr.s;\r\n      case onnx.AttributeProto.AttributeType.TENSOR:\r\n        return attr.t;\r\n      case onnx.AttributeProto.AttributeType.GRAPH:\r\n        return attr.g;\r\n      case onnx.AttributeProto.AttributeType.FLOATS:\r\n        return attr.floats;\r\n      case onnx.AttributeProto.AttributeType.INTS:\r\n        return attr.ints;\r\n      case onnx.AttributeProto.AttributeType.STRINGS:\r\n        return attr.strings;\r\n      case onnx.AttributeProto.AttributeType.TENSORS:\r\n        return attr.tensors;\r\n      case onnx.AttributeProto.AttributeType.GRAPHS:\r\n        return attr.graphs;\r\n      default:\r\n        throw new Error(`unsupported attribute type: ${onnx.AttributeProto.AttributeType[attr.type!]}`);\r\n    }\r\n  }\r\n\r\n  private static getValueNoCheckFromOrtFormat(attr: ortFbs.Attribute) {\r\n    switch (attr.type()) {\r\n      case ortFbs.AttributeType.FLOAT:\r\n        return attr.f();\r\n      case ortFbs.AttributeType.INT:\r\n        return attr.i();\r\n      case ortFbs.AttributeType.STRING:\r\n        return attr.s();\r\n      case ortFbs.AttributeType.TENSOR:\r\n        return attr.t();\r\n      case ortFbs.AttributeType.GRAPH:\r\n        return attr.g();\r\n      case ortFbs.AttributeType.FLOATS:\r\n        return attr.floatsArray();\r\n      case ortFbs.AttributeType.INTS: {\r\n        const ints = [];\r\n        for (let i = 0; i < attr.intsLength(); i++) {\r\n          ints.push(attr.ints(i)!);\r\n        }\r\n        return ints;\r\n      }\r\n      case ortFbs.AttributeType.STRINGS: {\r\n        const strings = [];\r\n        for (let i = 0; i < attr.stringsLength(); i++) {\r\n          strings.push(attr.strings(i));\r\n        }\r\n        return strings;\r\n      }\r\n      case ortFbs.AttributeType.TENSORS: {\r\n        const tensors = [];\r\n        for (let i = 0; i < attr.tensorsLength(); i++) {\r\n          tensors.push(attr.tensors(i)!);\r\n        }\r\n        return tensors;\r\n      }\r\n      // case ortFbs.AttributeType.GRAPHS:\r\n      // TODO: Subgraph not supported yet.\r\n      // const graphs = [];\r\n      // for (let i = 0; i < attr.graphsLength(); i++) {\r\n      //   graphs.push(attr.graphs(i)!);\r\n      // }\r\n      // return graphs;\r\n      default:\r\n        throw new Error(`unsupported attribute type: ${ortFbs.AttributeType[attr.type()]}`);\r\n    }\r\n  }\r\n\r\n  protected _attributes: Map<string, Value>;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {WebGLBackend} from './backends/backend-webgl';\r\nimport {Graph} from './graph';\r\nimport {Operator} from './operators';\r\nimport {OpSet} from './opset';\r\nimport {Session} from './session';\r\n\r\nexport interface InferenceHandler {\r\n  /**\r\n   * dispose the inference handler. it will be called as the last step in Session.run()\r\n   */\r\n  dispose(): void;\r\n}\r\n\r\nexport interface SessionHandler {\r\n  /**\r\n   * transform the graph at initialization time\r\n   * @param graphTransformer the graph transformer to manipulate the model graph\r\n   */\r\n  transformGraph?(graphTransformer: Graph.Transformer): void;\r\n\r\n  /**\r\n   * create an instance of InferenceHandler to use in a Session.run() call\r\n   */\r\n  createInferenceHandler(): InferenceHandler;\r\n\r\n  /**\r\n   * dispose the session handler. it will be called when a session is being disposed explicitly\r\n   */\r\n  dispose(): void;\r\n\r\n  /**\r\n   * Resolves the operator from the name and opset version; backend specific\r\n   * @param node the node to resolve\r\n   * @param opsets a list of opsets that exported from the model\r\n   * @param graph the completely initialized graph\r\n   */\r\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator;\r\n\r\n  /**\r\n   * This method let's the sessionHandler know that the graph initialization is complete\r\n   * @param graph the completely initialized graph\r\n   */\r\n  onGraphInitialized?(graph: Graph): void;\r\n\r\n  /**\r\n   * a reference to the corresponding backend\r\n   */\r\n  readonly backend: Backend;\r\n\r\n  /**\r\n   * a reference to the session context\r\n   */\r\n  readonly context: Session.Context;\r\n}\r\n\r\nexport interface Backend {\r\n  /**\r\n   * initialize the backend. will be called only once, when the first time the\r\n   * backend it to be used\r\n   */\r\n  initialize(): boolean|Promise<boolean>;\r\n\r\n  /**\r\n   * create an instance of SessionHandler to use in a Session object's lifecycle\r\n   */\r\n  createSessionHandler(context: Session.Context): SessionHandler;\r\n\r\n  /**\r\n   * dispose the backend. currently this will not be called\r\n   */\r\n  dispose(): void;\r\n}\r\n\r\n// caches all initialized backend instances\r\nconst backendsCache: Map<string, Backend> = new Map();\r\n\r\nexport const backend: {[name: string]: Backend} = {\r\n  webgl: new WebGLBackend()\r\n};\r\n\r\n/**\r\n * Resolve a reference to the backend. If a hint is specified, the corresponding\r\n * backend will be used.\r\n */\r\nexport async function resolveBackend(hint?: string|readonly string[]): Promise<Backend> {\r\n  if (!hint) {\r\n    return resolveBackend(['webgl']);\r\n  } else {\r\n    const hints = typeof hint === 'string' ? [hint] : hint;\r\n\r\n    for (const backendHint of hints) {\r\n      const cache = backendsCache.get(backendHint);\r\n      if (cache) {\r\n        return cache;\r\n      }\r\n\r\n      const backend = await tryLoadBackend(backendHint);\r\n      if (backend) {\r\n        return backend;\r\n      }\r\n    }\r\n  }\r\n\r\n  throw new Error('no available backend to use');\r\n}\r\n\r\nasync function tryLoadBackend(backendHint: string): Promise<Backend|undefined> {\r\n  const backendObj = backend;\r\n\r\n  if (typeof backendObj[backendHint] !== 'undefined' && isBackend(backendObj[backendHint])) {\r\n    const backend = backendObj[backendHint];\r\n    let init = backend.initialize();\r\n    if (typeof init === 'object' && 'then' in init) {\r\n      init = await init;\r\n    }\r\n    if (init) {\r\n      backendsCache.set(backendHint, backend);\r\n      return backend;\r\n    }\r\n  }\r\n\r\n  return undefined;\r\n}\r\n\r\nfunction isBackend(obj: unknown) {\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  const o = obj as any;\r\n\r\n  // check if an object is a Backend instance\r\n  if (\r\n      'initialize' in o && typeof o.initialize === 'function' &&                      // initialize()\r\n      'createSessionHandler' in o && typeof o.createSessionHandler === 'function' &&  // createSessionHandler()\r\n      'dispose' in o && typeof o.dispose === 'function'                               // dispose()\r\n  ) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nexport type BackendType = Backend;\r\nexport type SessionHandlerType = ReturnType<BackendType['createSessionHandler']>;\r\nexport type InferenceHandlerType = ReturnType<SessionHandlerType['createInferenceHandler']>;\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {env} from 'onnxruntime-common';\r\n\r\nimport {Backend, SessionHandler} from '../backend';\r\nimport {Logger} from '../instrument';\r\nimport {Session} from '../session';\r\n\r\nimport {WebGLSessionHandler} from './webgl/session-handler';\r\nimport {WebGLContext} from './webgl/webgl-context';\r\nimport {createWebGLContext} from './webgl/webgl-context-factory';\r\n\r\n/**\r\n * WebGLBackend is the entry point for all WebGL opeartions\r\n * When it starts it created the WebGLRenderingContext\r\n * and other main framework components such as Program and Texture Managers\r\n */\r\nexport class WebGLBackend implements Backend {\r\n  glContext: WebGLContext;\r\n\r\n  get contextId(): 'webgl'|'webgl2'|undefined {\r\n    return env.webgl.contextId;\r\n  }\r\n  set contextId(value: 'webgl'|'webgl2'|undefined) {\r\n    env.webgl.contextId = value;\r\n  }\r\n\r\n  get matmulMaxBatchSize(): number|undefined {\r\n    return env.webgl.matmulMaxBatchSize;\r\n  }\r\n  set matmulMaxBatchSize(value: number|undefined) {\r\n    env.webgl.matmulMaxBatchSize = value;\r\n  }\r\n\r\n  get textureCacheMode(): 'initializerOnly'|'full'|undefined {\r\n    return env.webgl.textureCacheMode;\r\n  }\r\n  set textureCacheMode(value: 'initializerOnly'|'full'|undefined) {\r\n    env.webgl.textureCacheMode = value;\r\n  }\r\n\r\n  get pack(): boolean|undefined {\r\n    return env.webgl.pack;\r\n  }\r\n  set pack(value: boolean|undefined) {\r\n    env.webgl.pack = value;\r\n  }\r\n\r\n  get async(): boolean|undefined {\r\n    return env.webgl.async;\r\n  }\r\n  set async(value: boolean|undefined) {\r\n    env.webgl.async = value;\r\n  }\r\n\r\n  initialize(): boolean {\r\n    try {\r\n      this.glContext = createWebGLContext(this.contextId);\r\n      if (typeof this.matmulMaxBatchSize !== 'number') {\r\n        this.matmulMaxBatchSize = 16;\r\n      }\r\n      if (typeof this.textureCacheMode !== 'string') {\r\n        this.textureCacheMode = 'full';\r\n      }\r\n      if (typeof this.pack !== 'boolean') {\r\n        this.pack = false;\r\n      }\r\n      if (typeof this.async !== 'boolean') {\r\n        this.async = false;\r\n      }\r\n\r\n      Logger.setWithEnv(env);\r\n\r\n      Logger.verbose(\r\n          'WebGLBackend',\r\n          `Created WebGLContext: ${typeof this.glContext} with matmulMaxBatchSize: ${\r\n              this.matmulMaxBatchSize}; textureCacheMode: ${this.textureCacheMode}; pack: ${this.pack}; async: ${\r\n              this.async}.`);\r\n      return true;\r\n    } catch (e) {\r\n      Logger.warning('WebGLBackend', `Unable to initialize WebGLBackend. ${e}`);\r\n      return false;\r\n    }\r\n  }\r\n  createSessionHandler(context: Session.Context): SessionHandler {\r\n    return new WebGLSessionHandler(this, context);\r\n  }\r\n  dispose(): void {\r\n    this.glContext.dispose();\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {ArrayUtil, BroadcastUtil, ShapeUtil} from '../../util';\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\r\nimport {getGlsl} from './glsl-source';\r\nimport {squeezeShape} from './texture-layout-strategy';\r\nimport {TextureLayout} from './types';\r\nimport {generateShaderFuncNameFromInputSamplerName, generateShaderFuncNameFromInputSamplerNameAtOutCoords, getCoordsDataType, getGlChannels, getSqueezedParams, squeezeInputShape} from './utils';\r\n\r\n/**\r\n * GLSL Library responsible for data types and routines for manipulating\r\n * coordinates and mapping to/from tensor indices\r\n */\r\nexport class CoordsGlslLib extends GlslLib {\r\n  returnType: string;\r\n\r\n  constructor(context: GlslContext) {\r\n    super(context);\r\n  }\r\n  getFunctions(): {[name: string]: GlslLibRoutine} {\r\n    return {\r\n      ...this.offsetToCoords(),\r\n      ...this.coordsToOffset(),\r\n      ...this.toVec(),\r\n      ...this.valueFrom(),\r\n      // TODO return these only when packing is enabled.\r\n      ...this.getCommonUtilFuncs(),\r\n      ...this.getInputsSamplingSnippets(),\r\n      ...this.getOutputSamplingSnippet()\r\n    };\r\n  }\r\n  getCustomTypes() {\r\n    return {};\r\n  }\r\n  /**\r\n   * Produces a function that can map from\r\n   * 2D normalzied coordinates (s,t) to a flat offset\r\n   */\r\n  protected offsetToCoords(): {[name: string]: GlslLibRoutine} {\r\n    const funcName = 'offsetToCoords';\r\n    return {\r\n      offsetToCoords: new GlslLibRoutine(`\r\n      vec2 ${funcName}(int offset, int width, int height) {\r\n        int t = offset / width;\r\n        int s = offset - t*width;\r\n        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);\r\n        return coords;\r\n      }\r\n      `)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Produces a function that can map from\r\n   * 2D normalzied coordinates (s,t) to a flat offset\r\n   */\r\n  protected coordsToOffset(): {[name: string]: GlslLibRoutine} {\r\n    const funcName = 'coordsToOffset';\r\n    return {\r\n      coordsToOffset: new GlslLibRoutine(`\r\n      int ${funcName}(vec2 coords, int width, int height) {\r\n        float s = coords.s * float(width);\r\n        float t = coords.t * float(height);\r\n        int offset = int(t) * width + int(s);\r\n        return offset;\r\n      }\r\n      `)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generates code for output sampler.\r\n   */\r\n\r\n  protected getOutputSamplingSnippet(): {[name: string]: GlslLibRoutine} {\r\n    const outputLayout = this.context.outputTextureLayout;\r\n    if (outputLayout.isPacked) {\r\n      return this.getPackedOutputSamplingSnippet(outputLayout);\r\n    } else {\r\n      return this.getUnpackedOutputSamplingSnippet(outputLayout);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generates code for packed output sampler.\r\n   */\r\n  protected getPackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\r\n    const outShape = outputLayout.unpackedShape;\r\n    const outTexShape = [outputLayout.width, outputLayout.height];\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    const funcName = 'getOutputCoords';\r\n    switch (outShape.length) {\r\n      case 0:\r\n        result[funcName] = this.getOutputScalarCoords();\r\n        break;\r\n      case 1:\r\n        result[funcName] = this.getOutputPacked1DCoords(outShape as [number], outTexShape as [number, number]);\r\n        break;\r\n      case 2:\r\n        result[funcName] = this.getOutputPacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\r\n        break;\r\n      case 3:\r\n        result[funcName] =\r\n            this.getOutputPacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\r\n        break;\r\n      default:\r\n        result[funcName] = this.getOutputPackedNDCoords(outShape, outTexShape as [number, number]);\r\n    }\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    // TODO we need this to properly return a packed vec4 from kernels.\r\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\r\n    const floatTextureSetRGBASource = `\r\n      void setOutput(vec4 val) {\r\n        ${glsl.output} = val;\r\n      }\r\n    `;\r\n    const floatTextureSetRGBAFuncName = 'floatTextureSetRGBA';\r\n    result[floatTextureSetRGBAFuncName] = new GlslLibRoutine(floatTextureSetRGBASource);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Generates code for unpacked output sampler.\r\n   */\r\n  protected getUnpackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\r\n    const outShape = outputLayout.unpackedShape;\r\n    const outTexShape = [outputLayout.width, outputLayout.height];\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    const funcName = 'getOutputCoords';\r\n    switch (outShape.length) {\r\n      case 0:\r\n        result[funcName] = this.getOutputScalarCoords();\r\n        break;\r\n      case 1:\r\n        result[funcName] = this.getOutputUnpacked1DCoords(outShape as [number], outTexShape as [number, number]);\r\n        break;\r\n      case 2:\r\n        result[funcName] =\r\n            this.getOutputUnpacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\r\n        break;\r\n      case 3:\r\n        result[funcName] =\r\n            this.getOutputUnpacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\r\n        break;\r\n      case 4:\r\n        result[funcName] = this.getOutputUnpacked4DCoords(\r\n            outShape as [number, number, number, number], outTexShape as [number, number]);\r\n        break;\r\n      case 5:\r\n        result[funcName] = this.getOutputUnpacked5DCoords(\r\n            outShape as [number, number, number, number, number], outTexShape as [number, number]);\r\n        break;\r\n      case 6:\r\n        result[funcName] = this.getOutputUnpacked6DCoords(\r\n            outShape as [number, number, number, number, number, number], outTexShape as [number, number]);\r\n        break;\r\n      default:\r\n        throw new Error(`Unsupported output dimensionality: ${outShape.length}`);\r\n    }\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    // TODO we need this to properly return a packed vec4 from kernels.\r\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\r\n    const floatTextureSetRSource = `\r\n        void setOutput(float val) {\r\n          ${glsl.output} = vec4(val, 0, 0, 0);\r\n        }\r\n    `;\r\n    const floatTextureSetRFuncName = 'floatTextureSetR';\r\n    result[floatTextureSetRFuncName] = new GlslLibRoutine(floatTextureSetRSource);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Scalar output coordinates.\r\n   */\r\n  protected getOutputScalarCoords(): GlslLibRoutine {\r\n    return new GlslLibRoutine(`\r\n      int getOutputCoords() {\r\n        return 0;\r\n      }\r\n    `);\r\n  }\r\n\r\n  /**\r\n   * 1D packed output coordinates.\r\n   */\r\n  protected getOutputPacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\r\n    const packedTexShape = texShape;\r\n    let source = '';\r\n    if (packedTexShape[0] === 1) {\r\n      source = `\r\n          int getOutputCoords() {\r\n            return 2 * int(TexCoords.y * ${packedTexShape[1]}.0);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source);\r\n    }\r\n\r\n    if (packedTexShape[1] === 1) {\r\n      source = `\r\n          int getOutputCoords() {\r\n            return 2 * int(TexCoords.x * ${packedTexShape[0]}.0);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source);\r\n    }\r\n\r\n    source = `\r\n        int getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                 vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\r\n          return 2 * (resTexRC.y * ${packedTexShape[0]} + resTexRC.x);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * 2D packed output coordinates.\r\n   */\r\n  protected getOutputPacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\r\n    let source = '';\r\n    if (ArrayUtil.arraysEqual(shape, texShape)) {\r\n      source = `\r\n        ivec2 getOutputCoords() {\r\n          return 2 * ivec2(TexCoords.xy * vec2(${texShape[0]}, ${texShape[1]}));\r\n        }\r\n      `;\r\n      return new GlslLibRoutine(source);\r\n    }\r\n\r\n    const packedTexShape = texShape;\r\n    // texels needed to accommodate a logical row\r\n    const texelsInLogicalRow = Math.ceil(shape[1] / 2);\r\n\r\n    /**\r\n     * getOutputCoords\r\n     *\r\n     * resTexRC: The rows and columns of the texels. If you move over one\r\n     * texel to the right in the packed texture, you are moving over one column\r\n     * (not two).\r\n     *\r\n     * index: The texel index\r\n     */\r\n    source = `\r\n        ivec2 getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\r\n\r\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\r\n\r\n          // reverse r and c order for packed texture\r\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\r\n          int c = 2 * (index / ${texelsInLogicalRow});\r\n\r\n          return ivec2(r, c);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * 3D packed output coordinates.\r\n   */\r\n  protected getOutputPacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\r\n    const packedTexShape = [texShape[0], texShape[1]];\r\n    const texelsInLogicalRow = Math.ceil(shape[2] / 2);\r\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\r\n    const source = `\r\n        ivec3 getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\r\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\r\n\r\n          int b = index / ${texelsInBatch};\r\n          index -= b * ${texelsInBatch};\r\n\r\n          // reverse r and c order for packed texture\r\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\r\n          int c = 2 * (index / ${texelsInLogicalRow});\r\n\r\n          return ivec3(b, r, c);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * ND packed output coordinates.\r\n   */\r\n  protected getOutputPackedNDCoords(shape: readonly number[], texShape: [number, number]): GlslLibRoutine {\r\n    const packedTexShape = [texShape[0], texShape[1]];\r\n\r\n    const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\r\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\r\n    let texelsInBatchN = texelsInBatch;\r\n    let batches = '';\r\n    let coords = 'b, r, c';\r\n\r\n    for (let b = 2; b < shape.length - 1; b++) {\r\n      texelsInBatchN *= shape[shape.length - b - 1];\r\n      batches = `\r\n      int b${b} = index / ${texelsInBatchN};\r\n      index -= b${b} * ${texelsInBatchN};\r\n    ` + batches;\r\n      coords = `b${b}, ` + coords;\r\n    }\r\n    const source = `\r\n      ivec${shape.length} getOutputCoords() {\r\n        ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                              vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\r\n        int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\r\n\r\n        ${batches}\r\n\r\n        int b = index / ${texelsInBatch};\r\n        index -= b * ${texelsInBatch};\r\n\r\n        // reverse r and c order for packed texture\r\n        int r = imod(index, ${texelsInLogicalRow}) * 2;\r\n        int c = 2 * (index / ${texelsInLogicalRow});\r\n\r\n        return ivec${shape.length}(${coords});\r\n      }\r\n    `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 1D output coordinates.\r\n   */\r\n  protected getOutputUnpacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\r\n    const source = `\r\n        int getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${texShape[0]}, ${texShape[1]}));\r\n          return resTexRC.y * ${texShape[0]} + resTexRC.x;\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 2D output coordinates.\r\n   */\r\n  protected getOutputUnpacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\r\n    const source = `\r\n        ivec2 getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${texShape[0]}, ${texShape[1]}));\r\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\r\n          int r = index / ${shape[1]};\r\n          int c = index - r * ${shape[1]};\r\n          return ivec2(r, c);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 3D output coordinates.\r\n   */\r\n  protected getOutputUnpacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\r\n    let source = '';\r\n    const rank = shape.length;\r\n\r\n    let strides = null;\r\n    if (rank < 2) {\r\n      strides = [];\r\n    }\r\n\r\n    strides = new Array(rank - 1);\r\n    strides[rank - 2] = shape[rank - 1];\r\n    for (let i = rank - 3; i >= 0; --i) {\r\n      strides[i] = strides[i + 1] * shape[i + 1];\r\n    }\r\n    const coordsToCompute = ['r', 'c', 'd'];\r\n    const coordsFromIndexSnippet =\r\n        strides\r\n            .map((stride, i) => {\r\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\r\n              const line2 = i === strides.length - 1 ?\r\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\r\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\r\n              return `${line1}; ${line2};`;\r\n            })\r\n            .join('');\r\n\r\n    source = `\r\n        ivec3 getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${texShape[0]}, ${texShape[1]}));\r\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\r\n          ${coordsFromIndexSnippet}\r\n          return ivec3(r, c, d);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 4D output coordinates.\r\n   */\r\n  protected getOutputUnpacked4DCoords(shape: [number, number, number, number], texShape: [number, number]):\r\n      GlslLibRoutine {\r\n    let source = '';\r\n    const rank = shape.length;\r\n\r\n    let strides = null;\r\n    if (rank < 2) {\r\n      strides = [];\r\n    }\r\n\r\n    strides = new Array(rank - 1);\r\n    strides[rank - 2] = shape[rank - 1];\r\n    for (let i = rank - 3; i >= 0; --i) {\r\n      strides[i] = strides[i + 1] * shape[i + 1];\r\n    }\r\n    const coordsToCompute = ['r', 'c', 'd', 'd2'];\r\n    const coordsFromIndexSnippet =\r\n        strides\r\n            .map((stride, i) => {\r\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\r\n              const line2 = i === strides.length - 1 ?\r\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\r\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\r\n              return `${line1}; ${line2};`;\r\n            })\r\n            .join('');\r\n\r\n    source = `\r\n      ivec4 getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${texShape[0]}, ${texShape[1]}));\r\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\r\n          ${coordsFromIndexSnippet}\r\n          return ivec4(r, c, d, d2);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 5D output coordinates.\r\n   */\r\n  protected getOutputUnpacked5DCoords(shape: [number, number, number, number, number], texShape: [number, number]):\r\n      GlslLibRoutine {\r\n    let source = '';\r\n    const rank = shape.length;\r\n\r\n    let strides = null;\r\n    if (rank < 2) {\r\n      strides = [];\r\n    }\r\n\r\n    strides = new Array(rank - 1);\r\n    strides[rank - 2] = shape[rank - 1];\r\n    for (let i = rank - 3; i >= 0; --i) {\r\n      strides[i] = strides[i + 1] * shape[i + 1];\r\n    }\r\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3'];\r\n    const coordsFromIndexSnippet =\r\n        strides\r\n            .map((stride, i) => {\r\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\r\n              const line2 = i === strides.length - 1 ?\r\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\r\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\r\n              return `${line1}; ${line2};`;\r\n            })\r\n            .join('');\r\n\r\n    source = `\r\n      ivec5 getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${texShape[0]}, ${texShape[1]}));\r\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\r\n          ${coordsFromIndexSnippet}\r\n          return ivec5(r, c, d, d2, d3);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 6D output coordinates.\r\n   */\r\n  protected getOutputUnpacked6DCoords(shape: [number, number, number, number, number, number], texShape: [\r\n    number, number\r\n  ]): GlslLibRoutine {\r\n    let source = '';\r\n    const rank = shape.length;\r\n\r\n    let strides = null;\r\n    if (rank < 2) {\r\n      strides = [];\r\n    }\r\n\r\n    strides = new Array(rank - 1);\r\n    strides[rank - 2] = shape[rank - 1];\r\n    for (let i = rank - 3; i >= 0; --i) {\r\n      strides[i] = strides[i + 1] * shape[i + 1];\r\n    }\r\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3', 'd4'];\r\n    const coordsFromIndexSnippet =\r\n        strides\r\n            .map((stride, i) => {\r\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\r\n              const line2 = i === strides.length - 1 ?\r\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\r\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\r\n              return `${line1}; ${line2};`;\r\n            })\r\n            .join('');\r\n\r\n    source = `\r\n     ivec6 getOutputCoords() {\r\n         ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                               vec2(${texShape[0]}, ${texShape[1]}));\r\n         int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\r\n         ${coordsFromIndexSnippet}\r\n         return ivec6(r, c, d, d2, d3, d4);\r\n       }\r\n     `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Generates code for common UV coords computation utility functions.\r\n   */\r\n  protected getCommonUtilFuncs(): {[name: string]: GlslLibRoutine} {\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    let funcName = 'uvFromFlat';\r\n    result[funcName] = new GlslLibRoutine(`\r\n    vec2 uvFromFlat(int texNumR, int texNumC, int index) {\r\n      int texC = index / texNumR;\r\n      int texR = index - texC * texNumR;\r\n      // TODO: swap texR, texC order in following function so row is corresponding to u and column is corresponding to\r\n      //       v.\r\n      return (vec2(texR, texC) + halfCR) / vec2(texNumR, texNumC);\r\n    }\r\n    `);\r\n    funcName = 'packedUVfrom1D';\r\n    result[funcName] = new GlslLibRoutine(`\r\n      vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\r\n        int texelIndex = index / 2;\r\n        int texR = texelIndex / texNumC;\r\n        int texC = texelIndex - texR * texNumC;\r\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\r\n      }\r\n      `);\r\n    funcName = 'packedUVfrom2D';\r\n    result[funcName] = new GlslLibRoutine(`\r\n      vec2 packedUVfrom2D(int texNumR, int texNumC, int texelsInLogicalRow, int row, int col) {\r\n        int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\r\n        int texR = texelIndex / texNumC;\r\n        int texC = texelIndex - texR * texNumC;\r\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\r\n      }\r\n      `);\r\n    funcName = 'packedUVfrom3D';\r\n    result[funcName] = new GlslLibRoutine(`\r\n      vec2 packedUVfrom3D(int texNumR, int texNumC,\r\n          int texelsInBatch, int texelsInLogicalRow, int b,\r\n          int row, int col) {\r\n        int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\r\n        int texR = index / texNumC;\r\n        int texC = index - texR * texNumC;\r\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\r\n      }\r\n      `);\r\n    funcName = 'sampleTexture';\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    result[funcName] = new GlslLibRoutine(`\r\n        float sampleTexture(sampler2D textureSampler, vec2 uv) {\r\n            return ${glsl.texture2D}(textureSampler, uv).r;\r\n        }`);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Constructing snippets for inputs\r\n   */\r\n  protected getInputsSamplingSnippets(): {[name: string]: GlslLibRoutine} {\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    const outputLayout = this.context.outputTextureLayout;\r\n    this.context.programInfo.inputNames.forEach((samplerName, i) => {\r\n      const inputLayout = this.context.inputTextureLayouts[i];\r\n      const funcName = generateShaderFuncNameFromInputSamplerName(samplerName);\r\n      if (inputLayout.isPacked) {\r\n        result[funcName] = this.getPackedSamplerFromInput(funcName, samplerName, inputLayout);\r\n      } else {\r\n        result[funcName] = this.getUnpackedSamplerFromInput(funcName, samplerName, inputLayout);\r\n      }\r\n\r\n      const outCoordFuncName = generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName);\r\n      if (inputLayout.unpackedShape.length <= outputLayout.unpackedShape.length) {\r\n        if (inputLayout.isPacked) {\r\n          result[outCoordFuncName] =\r\n              this.getPackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\r\n        } else {\r\n          result[outCoordFuncName] =\r\n              this.getUnpackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\r\n        }\r\n      }\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Constructing snippets for output coordinates of samplers\r\n   */\r\n  protected getPackedSamplerAtOutputCoords(\r\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\r\n    const inShape = inputLayout.unpackedShape;\r\n    const outShape = outputLayout.unpackedShape;\r\n    const texName = name;\r\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(texName);\r\n\r\n    const inRank = inShape.length;\r\n    const outRank = outShape.length;\r\n\r\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\r\n\r\n    const type = getCoordsDataType(outRank);\r\n    const rankDiff = outRank - inRank;\r\n    let coordsSnippet: string;\r\n    const fields = getGlChannels();\r\n\r\n    if (inRank === 0) {\r\n      coordsSnippet = '';\r\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\r\n      coordsSnippet = 'coords = 0;';\r\n    } else {\r\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\r\n    }\r\n    let unpackedCoordsSnippet = '';\r\n    if (outRank < 2 && inRank > 0) {\r\n      unpackedCoordsSnippet = 'coords';\r\n    } else {\r\n      unpackedCoordsSnippet = inShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\r\n    }\r\n\r\n    let output = 'return outputValue;';\r\n    const inSize = ShapeUtil.size(inShape);\r\n    const isInputScalar = inSize === 1;\r\n    const outSize = ShapeUtil.size(outShape);\r\n    const isOutputScalar = outSize === 1;\r\n\r\n    if (inRank === 1 && !isInputScalar && !isOutputScalar) {\r\n      output = `\r\n        return vec4(outputValue.xy, outputValue.xy);\r\n      `;\r\n    } else if (isInputScalar && !isOutputScalar) {\r\n      if (outRank === 1) {\r\n        output = `\r\n          return vec4(outputValue.x, outputValue.x, 0., 0.);\r\n        `;\r\n      } else {\r\n        output = `\r\n          return vec4(outputValue.x);\r\n        `;\r\n      }\r\n    } else if (broadcastDims.length) {\r\n      const rows = inRank - 2;\r\n      const cols = inRank - 1;\r\n\r\n      if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\r\n        output = 'return vec4(outputValue.x);';\r\n      } else if (broadcastDims.indexOf(rows) > -1) {\r\n        output = 'return vec4(outputValue.x, outputValue.y, ' +\r\n            'outputValue.x, outputValue.y);';\r\n      } else if (broadcastDims.indexOf(cols) > -1) {\r\n        output = 'return vec4(outputValue.xx, outputValue.zz);';\r\n      }\r\n    }\r\n\r\n    const swapLastDimsSnippet = `\r\n        int lastDim = coords.${fields[outRank - 1]};\r\n        coords.${fields[outRank - 1]} = coords.${fields[outRank - 2]};\r\n        coords.${fields[outRank - 2]} = lastDim;\r\n      `;\r\n    const source = `\r\n      vec4 ${funcName}() {\r\n        ${type} coords = getOutputCoords();\r\n        ${swapLastDimsSnippet}\r\n        ${coordsSnippet}\r\n        vec4 outputValue = ${texFuncSnippet}(${unpackedCoordsSnippet});\r\n        ${output}\r\n      }\r\n    `;\r\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\r\n  }\r\n\r\n  /**\r\n   * Constructing snippets for unpacked output coordinates of samplers\r\n   */\r\n  protected getUnpackedSamplerAtOutputCoords(\r\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\r\n    const outTexShape = [outputLayout.width, outputLayout.height];\r\n    const inTexShape = [inputLayout.width, inputLayout.height];\r\n    const inRank = inputLayout.unpackedShape.length;\r\n    const outRank = outputLayout.unpackedShape.length;\r\n    const inShape = inputLayout.unpackedShape;\r\n    const outShape = outputLayout.unpackedShape;\r\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(name);\r\n\r\n    if (inRank === outRank && ArrayUtil.arraysEqual(inTexShape, outTexShape)) {\r\n      const source = `\r\n          float ${funcName}() {\r\n            return sampleTexture(${name}, TexCoords);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n\r\n    const type = getCoordsDataType(outRank);\r\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\r\n    const rankDiff = outRank - inRank;\r\n    let coordsSnippet: string;\r\n    const fields = getGlChannels();\r\n\r\n    if (inRank === 0) {\r\n      coordsSnippet = '';\r\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\r\n      coordsSnippet = 'coords = 0;';\r\n    } else {\r\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\r\n    }\r\n    let unpackedCoordsSnippet = '';\r\n    if (outRank < 2 && inRank > 0) {\r\n      unpackedCoordsSnippet = 'coords';\r\n    } else {\r\n      unpackedCoordsSnippet = inputLayout.unpackedShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\r\n    }\r\n    const source = `\r\n        float ${funcName}() {\r\n          ${type} coords = getOutputCoords();\r\n          ${coordsSnippet}\r\n          return ${texFuncSnippet}(${unpackedCoordsSnippet});\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\r\n  }\r\n\r\n  /**\r\n   * Constructing snippets for packed operations.\r\n   */\r\n  protected getPackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    switch (inputLayout.unpackedShape.length) {\r\n      case 0:\r\n        return this.getPackedSamplerScalar(funcName, name);\r\n      case 1:\r\n        return this.getPackedSampler1D(funcName, name, inputLayout);\r\n      case 2:\r\n        return this.getPackedSampler2D(funcName, name, inputLayout);\r\n      case 3:\r\n        return this.getPackedSampler3D(funcName, name, inputLayout);\r\n      default:\r\n        return this.getPackedSamplerND(funcName, name, inputLayout);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Constructing snippets for unpacked operations.\r\n   */\r\n  protected getUnpackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    switch (shape.length) {\r\n      case 0:\r\n        return this.getUnpackedSamplerScalar(funcName, name, inputLayout);\r\n      case 1:\r\n        return this.getUnpackedSampler1D(funcName, name, inputLayout);\r\n      case 2:\r\n        return this.getUnpackedSampler2D(funcName, name, inputLayout);\r\n      case 3:\r\n        return this.getUnpackedSampler3D(funcName, name, inputLayout);\r\n      case 4:\r\n        return this.getUnpackedSampler4D(funcName, name, inputLayout);\r\n      case 5:\r\n        return this.getUnpackedSampler5D(funcName, name, inputLayout);\r\n      case 6:\r\n        return this.getUnpackedSampler6D(funcName, name, inputLayout);\r\n      default:\r\n        // TODO support more dimensionalities\r\n        throw new Error(`Unsupported dimension ${shape.length}-D`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Packed scalar snippet.\r\n   */\r\n  protected getPackedSamplerScalar(funcName: string, name: string): GlslLibRoutine {\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    const source = `\r\n          vec4 ${funcName}() {\r\n            return ${glsl.texture2D}(${name}, halfCR);\r\n          }\r\n        `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Packed 1D snippet.\r\n   */\r\n  protected getPackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const texShape = [inputLayout.width, inputLayout.height];\r\n    const packedTexShape = [texShape[1], texShape[0]];\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n\r\n    const packedSampler = `vec4 ${funcName}(int index) {\r\n      vec2 uv = packedUVfrom1D(\r\n      ${packedTexShape[0]}, ${packedTexShape[1]}, index);\r\n      return ${glsl.texture2D}(${name}, uv);\r\n    }`;\r\n    const source = packedSampler;\r\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom1D']);\r\n  }\r\n\r\n  /**\r\n   * Packed 2D snippet.\r\n   */\r\n  protected getPackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const texShape = [inputLayout.width, inputLayout.height];\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    const texNumR = texShape[0];\r\n    const texNumC = texShape[1];\r\n\r\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\r\n      const packedSampler = `vec4 ${funcName}(int row, int col) {\r\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\r\n        return ${glsl.texture2D}(${name}, uv);\r\n      }`;\r\n\r\n      return new GlslLibRoutine(packedSampler);\r\n    }\r\n    const packedTexShape = texShape;\r\n    const valuesPerRow = Math.ceil(shape[1] / 2);\r\n    const packedSampler = `vec4 ${funcName}(int row, int col) {\r\n      vec2 uv = packedUVfrom2D(${packedTexShape[1]}, ${packedTexShape[0]}, ${valuesPerRow}, row, col);\r\n      return ${glsl.texture2D}(${name}, uv);\r\n    }`;\r\n    const source = packedSampler;\r\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom2D']);\r\n  }\r\n\r\n  /**\r\n   * Packed 3D snippet.\r\n   */\r\n  protected getPackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const texShape = [inputLayout.width, inputLayout.height];\r\n    const packedTexShape = [texShape[0], texShape[1]];\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n\r\n    if (shape[0] === 1) {\r\n      const squeezedShape = shape.slice(1);\r\n      const keptDims = [1, 2];\r\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\r\n      const params = ['b', 'row', 'col'];\r\n      // Deep copy of input texture layout.\r\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\r\n      newInputLayout.unpackedShape = newInputShape;\r\n      const samplerRoutine = this.getPackedSamplerFromInput(funcName, name, newInputLayout);\r\n      const packedSampler = `${samplerRoutine.routineBody}\r\n      vec4 ${funcName}(int b, int row, int col) {\r\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\r\n      } `;\r\n      const source = packedSampler;\r\n      return new GlslLibRoutine(source, samplerRoutine.dependencies);\r\n    }\r\n    const texNumR = packedTexShape[0];\r\n    const texNumC = packedTexShape[1];\r\n\r\n    const valuesPerRow = Math.ceil(shape[2] / 2);\r\n    const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\r\n\r\n    const packedSampler = `vec4 ${funcName}(int b, int row, int col) {\r\n      vec2 uv = packedUVfrom3D(\r\n        ${texNumC}, ${texNumR}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\r\n      return ${glsl.texture2D}(${name}, uv);}`;\r\n    const source = packedSampler;\r\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom3D']);\r\n  }\r\n  /*\r\n   * Packed ND snippet.\r\n   */\r\n  protected getPackedSamplerND(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const rank = shape.length;\r\n    const texShape = [inputLayout.width, inputLayout.height];\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n\r\n    const packedTexShape = [texShape[0], texShape[1]];\r\n    const texNumR = packedTexShape[1];\r\n    const texNumC = packedTexShape[0];\r\n    const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\r\n    let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\r\n    let params = 'int b, int row, int col';\r\n    let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\r\n    for (let b = 2; b < rank - 1; b++) {\r\n      params = `int b${b}, ` + params;\r\n      texelsInBatch *= shape[rank - b - 1];\r\n      index = `b${b} * ${texelsInBatch} + ` + index;\r\n    }\r\n    const packedSampler = `vec4 ${funcName}(${params}) {\r\n      int index = ${index};\r\n      int texR = index / ${texNumC};\r\n      int texC = index - texR * ${texNumC};\r\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\r\n      return ${glsl.texture2D}(${name}, uv);\r\n    }`;\r\n    const source = packedSampler;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked scalar snippet.\r\n   */\r\n  protected getUnpackedSamplerScalar(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const [texNumR, texNumC] = [inputLayout.width, inputLayout.height];\r\n    if (texNumR === 1 && texNumC === 1) {\r\n      const source = `\r\n          float ${funcName}() {\r\n            return sampleTexture(${name}, halfCR);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n\r\n    const source = `\r\n        float ${funcName}() {\r\n          int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\r\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, offset_${name});\r\n          return sampleTexture(${name}, uv);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(\r\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 1D snippet.\r\n   */\r\n  protected getUnpackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const tNumR = inputLayout.width;\r\n    const tNumC = inputLayout.height;\r\n\r\n    if (tNumC === 1 && tNumR === 1) {\r\n      const source = `\r\n        float ${funcName}(int index) {\r\n          return sampleTexture(${name}, halfCR);\r\n        }\r\n      `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n\r\n    if (tNumC === 1) {\r\n      const source = `\r\n          float ${funcName}(int index) {\r\n            vec2 uv = vec2((float(index) + 0.5) / ${tNumR}.0, 0.5);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n    if (tNumR === 1) {\r\n      const source = `\r\n          float ${funcName}(int index) {\r\n            vec2 uv = vec2(0.5, (float(index) + 0.5) / ${tNumC}.0);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n    const source = `\r\n        float ${funcName}(int index) {\r\n          vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index);\r\n          return sampleTexture(${name}, uv);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 2D snippet.\r\n   */\r\n\r\n  protected getUnpackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n\r\n    // TODO: modify row/col order for other dimensions.\r\n    const texShape = [inputLayout.height, inputLayout.width];\r\n\r\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\r\n      const texNumR = texShape[1];\r\n      const texNumC = texShape[0];\r\n      const source = `\r\n          float ${funcName}(int row, int col) {\r\n            vec2 uv = (vec2(row, col) + halfCR) / vec2(${texNumR}.0, ${texNumC}.0);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n\r\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\r\n    const squeezedShape = newShape;\r\n    if (squeezedShape.length < shape.length) {\r\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\r\n      // Deep copy of input texture layout.\r\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\r\n      newInputLayout.unpackedShape = newInputShape;\r\n\r\n      const params = ['col', 'row'];\r\n      const source = `\r\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\r\n          float ${funcName}(int row, int col) {\r\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n\r\n    const texNumR = texShape[1];\r\n    const texNumC = texShape[0];\r\n    if (texNumC === 1) {\r\n      const source = `\r\n          float ${funcName}(int row, int col) {\r\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\r\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\r\n            vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n    }\r\n\r\n    if (texNumR === 1) {\r\n      const source = `\r\n          float ${funcName}(int row, int col) {\r\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\r\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\r\n            vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n    }\r\n\r\n    const source = `\r\n        float ${funcName}(int row, int col) {\r\n          int index = col * ${shape[1]} + row;\r\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\r\n          return sampleTexture(${name}, uv);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(\r\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 3D snippet.\r\n   */\r\n\r\n  protected getUnpackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const stride0 = shape[1] * shape[2];\r\n    const stride1 = shape[2];\r\n\r\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\r\n    const squeezedShape = newShape;\r\n    if (squeezedShape.length < shape.length) {\r\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\r\n      const params = ['batch', 'col', 'row'];\r\n      // Deep copy of input texture layout.\r\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\r\n      newInputLayout.unpackedShape = newInputShape;\r\n      const routine = this.getUnpackedSamplerFromInput(funcName, name, newInputLayout);\r\n      // TODO: revisit the logic here to make it simpler\r\n      const revDims = keptDims.reverse();\r\n      const source = `\r\n          ${routine.routineBody}\r\n          float ${funcName}(int batch, int row, int col) {\r\n            return ${funcName}(${getSqueezedParams(params, revDims)});\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, routine.dependencies);\r\n    }\r\n\r\n    const texNumR = inputLayout.width;\r\n    const texNumC = inputLayout.height;\r\n    const source = `\r\n          float ${funcName}(int depth, int row, int col) {\r\n            // Explicitly use integer operations as dot() only works on floats.\r\n            int index = depth * ${stride0} + col * ${stride1} + row;\r\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n      `;\r\n    return new GlslLibRoutine(\r\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 4D snippet.\r\n   */\r\n\r\n  protected getUnpackedSampler4D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const stride2 = shape[3];\r\n    const stride1 = shape[2] * stride2;\r\n    const stride0 = shape[1] * stride1;\r\n\r\n    //\r\n    // TODO: re-enable this shortcut once the index calculation bug is fixed.\r\n    //\r\n    // const {newShape, keptDims} = squeezeShape(shape as number[]);\r\n    // if (newShape.length < shape.length) {\r\n    //   const newInputShape = squeezeInputShape(shape, newShape);\r\n    //   const params = ['row', 'col', 'depth', 'depth2'];\r\n    //   // Deep copy of input texture layout.\r\n    //   const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\r\n    //   newInputLayout.unpackedShape = newInputShape;\r\n    //   const source = `\r\n    //       ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\r\n    //       float ${funcName}(int row, int col, int depth, int depth2) {\r\n    //         return ${funcName}(${getSqueezedParams(params, keptDims)});\r\n    //       }\r\n    //     `;\r\n    //   return new GlslLibRoutine(\r\n    //       source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n    // }\r\n\r\n    const texNumR = inputLayout.width;\r\n    const texNumC = inputLayout.height;\r\n    const source = `\r\n        float ${funcName}(int row, int col, int depth, int depth2) {\r\n          int index = row * ${stride0} + col * ${stride1} +\r\n              depth2 * ${stride2} + depth;\r\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\r\n          return sampleTexture(${name}, uv);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 5D snippet.\r\n   */\r\n  protected getUnpackedSampler5D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const stride3 = shape[4];\r\n    const stride2 = shape[3] * stride3;\r\n    const stride1 = shape[2] * stride2;\r\n    const stride0 = shape[1] * stride1;\r\n\r\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\r\n    if (newShape.length < shape.length) {\r\n      const newInputShape = squeezeInputShape(shape, newShape);\r\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\r\n      // Deep copy of input texture layout.\r\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\r\n      newInputLayout.unpackedShape = newInputShape;\r\n\r\n      const source = `\r\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\r\n          float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\r\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\r\n    }\r\n\r\n    const texNumR = inputLayout.width;\r\n    const texNumC = inputLayout.height;\r\n    const source = `\r\n        float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\r\n          int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\r\n          depth3 * ${stride3} + depth2;\r\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\r\n          return sampleTexture(${name}, uv);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 6D snippet.\r\n   */\r\n  protected getUnpackedSampler6D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const stride4 = shape[5];\r\n    const stride3 = shape[4] * stride4;\r\n    const stride2 = shape[3] * stride3;\r\n    const stride1 = shape[2] * stride2;\r\n    const stride0 = shape[1] * stride1;\r\n\r\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\r\n    if (newShape.length < shape.length) {\r\n      const newInputShape = squeezeInputShape(shape, newShape);\r\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\r\n      // Deep copy of input texture layout.\r\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\r\n      newInputLayout.unpackedShape = newInputShape;\r\n\r\n      const source = `\r\n            ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\r\n            float ${funcName}(int row, int col, int depth,\r\n              int depth2, int depth3, int depth4) {\r\n              return ${funcName}(${getSqueezedParams(params, keptDims)});\r\n            }\r\n          `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\r\n    }\r\n\r\n    const texNumR = inputLayout.width;\r\n    const texNumC = inputLayout.height;\r\n    const source = `\r\n          float ${funcName}(int row, int col, int depth,\r\n            int depth2, int depth3, int depth4) {\r\n            int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\r\n            depth2 * ${stride3} + depth3 * ${stride4} + depth4;\r\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n        `;\r\n    return new GlslLibRoutine(\r\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n  }\r\n\r\n  /**\r\n   * This is the main function to map from the given texture coordiantes (s,t)\r\n   * to logical indices for the output\r\n   * There will only be one single variation of this\r\n   * Also see coordsToOffset and offsetToIndices for input-specific versions\r\n   */\r\n  protected toVec(): {[name: string]: GlslLibRoutine} {\r\n    const output = this.context.outputTextureLayout;\r\n    const rank = output.shape.length;\r\n    const strides = output.strides;\r\n    const xScale = output.width;\r\n    const yScale = output.height;\r\n\r\n    const stridesBlock = [];\r\n    for (let i = 0; i < rank - 1; ++i) {\r\n      stridesBlock.push(`\r\n        c[${i}] = offset / ${strides[i]};`);\r\n      stridesBlock.push(`\r\n        offset -= c[${i}] * ${strides[i]};`);\r\n    }\r\n    stridesBlock.push(`\r\n        c[${rank - 1}] = offset;`);\r\n    const body = `\r\n      void toVec(vec2 texCoords, out int c[${rank}]) {\r\n        int offset = coordsToOffset(texCoords, ${xScale}, ${yScale});\r\n        ${stridesBlock.join('')}\r\n      }\r\n      void toVec(int offset, out int c[${rank}]) {\r\n        ${stridesBlock.join('')}\r\n      }\r\n    `;\r\n    return {toVec: new GlslLibRoutine(body, ['coordinates.coordsToOffset'])};\r\n  }\r\n  /**\r\n   * These are value getter functions generated for each input\r\n   * Each function is hardwired to the name and dimensions of the input\r\n   * An '_T' variation is also produced which accesses values as if the\r\n   * input was transposed\r\n   */\r\n  protected valueFrom(): {[name: string]: GlslLibRoutine} {\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.inputNames.forEach((name, i) => {\r\n      const layout = this.context.inputTextureLayouts[i];\r\n      const shape = layout.unpackedShape.length > 0 ? layout.unpackedShape : layout.shape;\r\n      const rank = shape.length;\r\n      let funcName = `_${name}`;\r\n      result[funcName] = new GlslLibRoutine(\r\n          this.getValueFromSingle(name, rank, layout.width, layout.height, false),\r\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\r\n      funcName = funcName + '_T';\r\n      result[funcName] = new GlslLibRoutine(\r\n          this.getValueFromSingle(name, rank, layout.width, layout.height, true),\r\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\r\n    });\r\n    return result;\r\n  }\r\n  /**\r\n   * Produces one value getter function for the name and rank given\r\n   * If a transpose is set proper offsetToCoords mapping will be used\r\n   * @param name name of the function\r\n   * @param rank rank of the input\r\n   * @param transpose whether or not should generate a transpose variation\r\n   */\r\n  protected getValueFromSingle(varName: string, rank: number, width: number, height: number, transpose: boolean):\r\n      string {\r\n    let name = `_${varName}`;\r\n    if (transpose) {\r\n      name = name + '_T';\r\n    }\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    return `\r\n        float ${name}(int m[${rank}]) {\r\n          int offset = indicesToOffset${name}(m);\r\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\r\n          float value = getColorAsFloat(${glsl.texture2D}(${varName}, coords));\r\n          return value;\r\n        }\r\n        `;\r\n  }\r\n\r\n  /**\r\n   * Produces a packed value getter function for the name and rank given\r\n   * If a transpose is set proper offsetToCoords mapping will be used\r\n   * @param name name of the function\r\n   * @param rank rank of the input\r\n   * @param transpose whether or not should generate a transpose variation\r\n   */\r\n  protected getPackedValueFrom(varName: string, rank: number, width: number, height: number, transpose: boolean):\r\n      string {\r\n    let name = `_${varName}_Pack`;\r\n    if (transpose) {\r\n      name = name + '_T';\r\n    }\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    return `\r\n        vec4 ${name}(int m[${rank}]) {\r\n          int offset = indicesToOffset_${varName}(m);\r\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\r\n          return ${glsl.texture2D}(${varName}, coords);\r\n        }\r\n        `;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {ProgramInfo, TextureLayout} from './types';\r\nimport {WebGLContext} from './webgl-context';\r\n\r\n/* eslint-disable @typescript-eslint/naming-convention */\r\nexport enum FunctionType {\r\n  ValueBased,\r\n  Positional\r\n}\r\nexport interface GlslFunction<T extends FunctionType> {\r\n  body: string;\r\n  name: string;\r\n  type: T;\r\n}\r\nexport type GlslValueFunction = GlslFunction<FunctionType.ValueBased>;\r\nexport interface GlslPositionalFunction extends GlslFunction<FunctionType.Positional> {\r\n  inputShape: readonly number[];\r\n  outputShape: readonly number[];\r\n}\r\n\r\nexport class GlslContext {\r\n  constructor(\r\n      public glContext: WebGLContext, public programInfo: ProgramInfo, public inputTextureLayouts: TextureLayout[],\r\n      public outputTextureLayout: TextureLayout) {}\r\n}\r\nexport abstract class GlslLib {\r\n  constructor(public context: GlslContext) {}\r\n  abstract getFunctions(): {[name: string]: GlslLibRoutine};\r\n  abstract getCustomTypes(): {[name: string]: string};\r\n}\r\n\r\n// abstraction to represent a GLSL library routine and it's dependencies\r\nexport class GlslLibRoutine {\r\n  constructor(public routineBody: string, public dependencies?: string[]) {}\r\n}\r\n\r\n// abstraction to represent a GLSL library routine and it's dependencies AS GRAPH Nodes\r\n// this level of abstraction is used to topologically sort routines before fragment shade inclusion\r\nexport class GlslLibRoutineNode {\r\n  dependencies: GlslLibRoutineNode[];\r\n  routineBody: string;\r\n  constructor(public name: string, routineBody?: string, dependencies?: GlslLibRoutineNode[]) {\r\n    if (dependencies) {\r\n      this.dependencies = dependencies;\r\n    } else {\r\n      this.dependencies = [];\r\n    }\r\n\r\n    if (routineBody) {\r\n      this.routineBody = routineBody;\r\n    }\r\n  }\r\n  addDependency(node: GlslLibRoutineNode) {\r\n    if (node) {\r\n      this.dependencies.push(node);\r\n    }\r\n  }\r\n}\r\n\r\n// topologically sort GLSL library routines (graph nodes abstraction) before shader script inclusion\r\nexport class TopologicalSortGlslRoutines {\r\n  static returnOrderedNodes(nodes: GlslLibRoutineNode[]): GlslLibRoutineNode[] {\r\n    if (!nodes || nodes.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    if (nodes.length === 1) {\r\n      return nodes;\r\n    }\r\n\r\n    const cycleCheck = new Set<string>();\r\n    const alreadyTraversed = new Set<string>();\r\n    const result = new Array<GlslLibRoutineNode>();\r\n\r\n    this.createOrderedNodes(nodes, cycleCheck, alreadyTraversed, result);\r\n    return result;\r\n  }\r\n\r\n  private static createOrderedNodes(\r\n      graphNodes: GlslLibRoutineNode[], cycleCheck: Set<string>, alreadyTraversed: Set<string>,\r\n      result: GlslLibRoutineNode[]) {\r\n    for (let i = 0; i < graphNodes.length; ++i) {\r\n      this.dfsTraverse(graphNodes[i], cycleCheck, alreadyTraversed, result);\r\n    }\r\n  }\r\n\r\n  private static dfsTraverse(\r\n      root: GlslLibRoutineNode, cycleCheck: Set<string>, alreadyTraversed: Set<string>, result: GlslLibRoutineNode[]) {\r\n    // if this root has already been traversed return\r\n    if (!root || alreadyTraversed.has(root.name)) {\r\n      return;\r\n    }\r\n\r\n    // cyclic dependency has been detected\r\n    if (cycleCheck.has(root.name)) {\r\n      throw new Error('Cyclic dependency detected. Can\\'t topologically sort routines needed for shader.');\r\n    }\r\n\r\n    // hold this node to detect cycles if any\r\n    cycleCheck.add(root.name);\r\n\r\n    // traverse children in a dfs fashion\r\n    const dependencies = root.dependencies;\r\n    if (dependencies && dependencies.length > 0) {\r\n      for (let i = 0; i < dependencies.length; ++i) {\r\n        this.dfsTraverse(dependencies[i], cycleCheck, alreadyTraversed, result);\r\n      }\r\n    }\r\n\r\n    // add to result holder\r\n    result.push(root);\r\n\r\n    // mark this node as traversed so that we don't traverse from this again\r\n    alreadyTraversed.add(root.name);\r\n\r\n    // release the hold\r\n    cycleCheck.delete(root.name);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\r\n\r\n/**\r\n * This GLSL library handles routines converting\r\n * float32 to/from Unsigned byte or float 16\r\n */\r\nexport class EncodingGlslLib extends GlslLib {\r\n  constructor(context: GlslContext) {\r\n    super(context);\r\n  }\r\n  getFunctions(): {[name: string]: GlslLibRoutine} {\r\n    return {...this.encodeFloat32(), ...this.decodeFloat32()};\r\n  }\r\n  getCustomTypes(): {[name: string]: string} {\r\n    return {};\r\n  }\r\n  protected encodeFloat32(): {[name: string]: GlslLibRoutine} {\r\n    return {\r\n      encode: new GlslLibRoutine(`highp vec4 encode(highp float f) {\r\n        return vec4(f, 0.0, 0.0, 0.0);\r\n      }\r\n        `)\r\n    };\r\n  }\r\n  protected decodeFloat32(): {[name: string]: GlslLibRoutine} {\r\n    return {\r\n      decode: new GlslLibRoutine(`highp float decode(highp vec4 rgba) {\r\n        return rgba.r;\r\n      }\r\n        `)\r\n    };\r\n  }\r\n  /**\r\n   * returns the routine to encode encode a 32bit float to a vec4 (of unsigned bytes)\r\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\r\n   */\r\n  protected encodeUint8(): {[name: string]: GlslLibRoutine} {\r\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\r\n    return {\r\n      encode: new GlslLibRoutine(`\r\n      highp vec4 encode(highp float f) {\r\n        highp float F = abs(f);\r\n        highp float Sign = step(0.0,-f);\r\n        highp float Exponent = floor(log2(F));\r\n        highp float Mantissa = (exp2(- Exponent) * F);\r\n        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));\r\n        highp vec4 rgba;\r\n        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));\r\n        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);\r\n        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));\r\n        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));\r\n        ${endianness}\r\n        rgba = rgba / 255.0; // values need to be normalized to [0,1]\r\n        return rgba;\r\n    }\r\n        `)\r\n    };\r\n  }\r\n  /**\r\n   * returns the routine to encode a vec4 of unsigned bytes to float32\r\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\r\n   */\r\n  protected decodeUint8(): {[name: string]: GlslLibRoutine} {\r\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\r\n    return {\r\n      decode: new GlslLibRoutine(`\r\n        highp float decode(highp vec4 rgba) {\r\n          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]\r\n          ${endianness}\r\n          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;\r\n          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;\r\n          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);\r\n          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));\r\n          return Result;\r\n      }\r\n        `)\r\n    };\r\n  }\r\n  /**\r\n   * Determines if the machine is little endian or not\r\n   * @credit: https://gist.github.com/TooTallNate/4750953\r\n   */\r\n  static isLittleEndian(): boolean {\r\n    const b = new ArrayBuffer(4);\r\n    const a = new Uint32Array(b);\r\n    const c = new Uint8Array(b);\r\n    a[0] = 0xdeadbeef;\r\n    if (c[0] === 0xef) {\r\n      return true;\r\n    }\r\n    if (c[0] === 0xde) {\r\n      return false;\r\n    }\r\n    throw new Error('unknown endianness');\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\r\nimport {getGlsl} from './glsl-source';\r\n\r\n/**\r\n * This GLSL library handles routines around reading a texlet and writing to it\r\n * Reading and writing could be more than just dealing with one channel\r\n * It may require encoding/decoding to/from 4 channels into one\r\n */\r\nexport class FragColorGlslLib extends GlslLib {\r\n  constructor(context: GlslContext) {\r\n    super(context);\r\n  }\r\n  getFunctions(): {[name: string]: GlslLibRoutine} {\r\n    return {...this.setFragColor(), ...this.getColorAsFloat()};\r\n  }\r\n  getCustomTypes(): {[name: string]: string} {\r\n    return {};\r\n  }\r\n  protected setFragColor(): {[name: string]: GlslLibRoutine} {\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    return {\r\n      setFragColor: new GlslLibRoutine(\r\n          `\r\n        void setFragColor(float value) {\r\n            ${glsl.output} = encode(value);\r\n        }\r\n        `,\r\n          ['encoding.encode'])\r\n    };\r\n  }\r\n  protected getColorAsFloat(): {[name: string]: GlslLibRoutine} {\r\n    return {\r\n      getColorAsFloat: new GlslLibRoutine(\r\n          `\r\n        float getColorAsFloat(vec4 color) {\r\n            return decode(color);\r\n        }\r\n        `,\r\n          ['encoding.decode'])\r\n    };\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nconst INLINE_FUNC_DEF_REGEX = /@inline[\\s\\n\\r]+(\\w+)[\\s\\n\\r]+([0-9a-zA-Z_]+)\\s*\\(([^)]*)\\)\\s*{(([^}]|[\\n\\r])*)}/gm;\r\nconst FUNC_CALL_REGEX = '(\\\\w+)?\\\\s+([_0-9a-zA-Z]+)\\\\s+=\\\\s+__FUNC__\\\\((.*)\\\\)\\\\s*;';\r\n/**\r\n * GLSL preprocessor responsible for resolving @inline directives\r\n */\r\nexport function replaceInlines(script: string): string {\r\n  const inlineDefs: {[name: string]: {params: Array<{type: string; name: string}|null>; body: string}} = {};\r\n  let match;\r\n  while ((match = INLINE_FUNC_DEF_REGEX.exec(script)) !== null) {\r\n    const params = match[3]\r\n                       .split(',')\r\n                       .map(s => {\r\n                         const tokens = s.trim().split(' ');\r\n                         if (tokens && tokens.length === 2) {\r\n                           return {type: tokens[0], name: tokens[1]};\r\n                         }\r\n                         return null;\r\n                       })\r\n                       .filter(v => v !== null);\r\n    inlineDefs[match[2]] = {params, body: match[4]};\r\n  }\r\n  for (const name in inlineDefs) {\r\n    const regexString = FUNC_CALL_REGEX.replace('__FUNC__', name);\r\n    const regex = new RegExp(regexString, 'gm');\r\n    while ((match = regex.exec(script)) !== null) {\r\n      const type = match[1];\r\n      const variable = match[2];\r\n      const params = match[3].split(',');\r\n      const declLine = (type) ? `${type} ${variable};` : '';\r\n      let newBody: string = inlineDefs[name].body;\r\n      let paramRedecLine = '';\r\n      inlineDefs[name].params.forEach((v, i) => {\r\n        if (v) {\r\n          paramRedecLine += `${v.type} ${v.name} = ${params[i]};\\n`;\r\n        }\r\n      });\r\n      newBody = `${paramRedecLine}\\n ${newBody}`;\r\n      newBody = newBody.replace('return', `${variable} = `);\r\n      const replacement = `\r\n      ${declLine}\r\n      {\r\n        ${newBody}\r\n      }\r\n      `;\r\n      script = script.replace(match[0], replacement);\r\n    }\r\n  }\r\n  script = script.replace(INLINE_FUNC_DEF_REGEX, '');\r\n  return script;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutineNode, TopologicalSortGlslRoutines} from './glsl-definitions';\r\nimport {replaceInlines} from './glsl-function-inliner';\r\nimport {glslRegistry} from './glsl-registered-libs';\r\nimport {getDefaultFragShaderMain, getFragShaderPreamble} from './glsl-source';\r\nimport {ProgramInfo, TextureLayout, VariableInfo} from './types';\r\nimport {WebGLContext} from './webgl-context';\r\n\r\n/**\r\n * Preprocessor for the additions to the GLSL language\r\n * It deals with:\r\n *  @include directives\r\n *  @inline\r\n *  Loop unrolling (not implemented)\r\n *  Macro resolution (not implemented)\r\n */\r\nexport class GlslPreprocessor {\r\n  readonly context: GlslContext;\r\n  readonly libs: {[name: string]: GlslLib} = {};\r\n  readonly glslLibRoutineDependencyGraph: {[routineName: string]: GlslLibRoutineNode} = {};\r\n\r\n  constructor(\r\n      glContext: WebGLContext, programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[],\r\n      outputTextureLayout: TextureLayout) {\r\n    this.context = new GlslContext(glContext, programInfo, inputTextureLayouts, outputTextureLayout);\r\n\r\n    // construct GlslLibs\r\n    Object.keys(glslRegistry).forEach((name: string) => {\r\n      const lib = new glslRegistry[name](this.context);\r\n      this.libs[name] = lib;\r\n    });\r\n\r\n    // construct GlslRoutineDependencyGraph\r\n    const map = this.glslLibRoutineDependencyGraph;\r\n    for (const libName in this.libs) {\r\n      const lib = this.libs[libName];\r\n      const routinesInLib = lib.getFunctions();\r\n      for (const routine in routinesInLib) {\r\n        const key = libName + '.' + routine;\r\n        let currentNode: GlslLibRoutineNode;\r\n        if (map[key]) {\r\n          currentNode = map[key];\r\n          currentNode.routineBody = routinesInLib[routine].routineBody;\r\n        } else {\r\n          currentNode = new GlslLibRoutineNode(key, routinesInLib[routine].routineBody);\r\n          map[key] = currentNode;\r\n        }\r\n        const dependencies = routinesInLib[routine].dependencies;\r\n        if (dependencies) {\r\n          for (let i = 0; i < dependencies.length; ++i) {\r\n            if (!map[dependencies[i]]) {\r\n              const node = new GlslLibRoutineNode(dependencies[i]);\r\n              map[dependencies[i]] = node;\r\n              currentNode.addDependency(node);\r\n            } else {\r\n              currentNode.addDependency(map[dependencies[i]]);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  preprocess(): string {\r\n    const programInfo = this.context.programInfo;\r\n    let source = programInfo.shaderSource;\r\n\r\n    // append main() function\r\n    if (!this.context.programInfo.hasMain) {\r\n      source = `${source}\r\n      ${getDefaultFragShaderMain(this.context.glContext.version, this.context.outputTextureLayout.shape.length)}`;\r\n    }\r\n    // replace inlines\r\n    source = replaceInlines(source);\r\n\r\n    // concat final source string\r\n    return `${getFragShaderPreamble(this.context.glContext.version)}\r\n    ${this.getUniforms(programInfo.inputNames, programInfo.variables)}\r\n    ${this.getImports(source)}\r\n    ${source}`;\r\n  }\r\n\r\n  protected getImports(script: string): string {\r\n    const routinesIncluded = this.selectGlslLibRoutinesToBeIncluded(script);\r\n\r\n    if (routinesIncluded.length === 0) {\r\n      return '';\r\n    }\r\n\r\n    let routines = '';\r\n    for (let i = 0; i < routinesIncluded.length; ++i) {\r\n      if (routinesIncluded[i].routineBody) {\r\n        routines += routinesIncluded[i].routineBody + '\\n';\r\n      } else {\r\n        throw new Error(`Missing body for the Glsl Library routine: ${routinesIncluded[i].name}`);\r\n      }\r\n    }\r\n\r\n    return routines;\r\n  }\r\n  private selectGlslLibRoutinesToBeIncluded(script: string): GlslLibRoutineNode[] {\r\n    const nodes: GlslLibRoutineNode[] = [];\r\n\r\n    Object.keys(this.glslLibRoutineDependencyGraph).forEach(classAndRoutine => {\r\n      const routine = classAndRoutine.split('.')[1];\r\n      if (script.indexOf(routine) !== -1) {\r\n        nodes.push(this.glslLibRoutineDependencyGraph[classAndRoutine]);\r\n      }\r\n    });\r\n\r\n    return TopologicalSortGlslRoutines.returnOrderedNodes(nodes);\r\n  }\r\n\r\n  protected getUniforms(samplers?: string[], variables?: VariableInfo[]): string {\r\n    const uniformLines: string[] = [];\r\n    if (samplers) {\r\n      for (const sampler of samplers) {\r\n        uniformLines.push(`uniform sampler2D ${sampler};`);\r\n      }\r\n    }\r\n    if (variables) {\r\n      for (const variable of variables) {\r\n        uniformLines.push(\r\n            `uniform ${variable.type} ${variable.name}${variable.arrayLength ? `[${variable.arrayLength}]` : ''};`);\r\n      }\r\n    }\r\n    return uniformLines.join('\\n');\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {CoordsGlslLib} from './glsl-coordinate-lib';\r\nimport {GlslContext, GlslLib} from './glsl-definitions';\r\nimport {EncodingGlslLib} from './glsl-encoding-lib';\r\nimport {FragColorGlslLib} from './glsl-fragcolor-lib';\r\nimport {ShapeUtilsGlslLib} from './glsl-shape-utils-lib';\r\nimport {VecGlslLib} from './glsl-vec-lib';\r\n\r\nexport const glslRegistry: {[name: string]: new (context: GlslContext) => GlslLib} = {\r\n  'encoding': EncodingGlslLib,\r\n  'fragcolor': FragColorGlslLib,\r\n  'vec': VecGlslLib,\r\n  'shapeUtils': ShapeUtilsGlslLib,\r\n  'coordinates': CoordsGlslLib,\r\n  //  'arrays': ArrayGlslSLib\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\r\n\r\n/**\r\n * GLSL Library responsible for data types and routines for manipulating\r\n * coordinates and mapping to/from tensor indices\r\n */\r\nexport class ShapeUtilsGlslLib extends GlslLib {\r\n  constructor(context: GlslContext) {\r\n    super(context);\r\n  }\r\n  getFunctions(): {[name: string]: GlslLibRoutine} {\r\n    return {\r\n      ...this.bcastIndex(),\r\n      ...this.bcastMatmulIndex(),\r\n      ...this.offsetToIndices(),\r\n      ...this.indicesToOffset(),\r\n      ...this.incrementIndices()\r\n    };\r\n  }\r\n  getCustomTypes() {\r\n    return {};\r\n  }\r\n  protected bcastIndex(): {[name: string]: GlslLibRoutine} {\r\n    const outputRank = this.context.outputTextureLayout.shape.length;\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.inputNames.forEach((name, i) => {\r\n      const shape = this.context.inputTextureLayouts[i].unpackedShape;\r\n      if (shape.length <= outputRank) {\r\n        const rank = shape.length;\r\n        const dimOffset = outputRank - rank;\r\n        const funcName = `bcastIndices_${name}`;\r\n        let block = '';\r\n        for (let i = 0; i < rank; ++i) {\r\n          block += `\r\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\r\n          `;\r\n        }\r\n        const body = `\r\n        void ${funcName} (int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\r\n          ${block}\r\n        }\r\n        `;\r\n        result[funcName] = new GlslLibRoutine(body);\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  protected bcastMatmulIndex(): {[name: string]: GlslLibRoutine} {\r\n    const outputRank = this.context.outputTextureLayout.shape.length;\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.inputNames.forEach((name, i) => {\r\n      const shape = this.context.inputTextureLayouts[i].shape;\r\n      if (!(shape.length < 2 || shape.length > outputRank)) {\r\n        const rank = shape.length;\r\n        const dimOffset = outputRank - rank;\r\n        const funcName = `bcastMatmulIndices_${name}`;\r\n        let block = '';\r\n        for (let i = 0; i < rank - 2; ++i) {\r\n          block += `\r\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\r\n          `;\r\n        }\r\n        const body = `\r\n        void ${funcName}(int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\r\n          ${block}\r\n          realIndices[${rank - 1}] = bcastedIndices[${outputRank - 1}];\r\n          realIndices[${rank - 2}] = bcastedIndices[${outputRank - 2}];\r\n        }\r\n        `;\r\n        result[funcName] = new GlslLibRoutine(body);\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  protected indicesToOffset(): {[name: string]: GlslLibRoutine} {\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.inputNames.forEach((name, i) => {\r\n      const shape = this.context.inputTextureLayouts[i].shape;\r\n      const strides = this.context.inputTextureLayouts[i].strides;\r\n      const rank = shape.length;\r\n      let funcName = `indicesToOffset_${name}`;\r\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides));\r\n      funcName = `indicesToOffset_${name}_T`;\r\n      result[funcName] =\r\n          new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides.slice().reverse()));\r\n    });\r\n    return result;\r\n  }\r\n  static indexToOffsetSingle(name: string, rank: number, strides: readonly number[]): string {\r\n    let block = '';\r\n    for (let i = rank - 1; i >= 0; --i) {\r\n      block += `\r\n        offset += indices[${i}] * ${strides[i]};\r\n        `;\r\n    }\r\n    return `\r\n      int ${name}(int indices[${rank}]) {\r\n        int offset = 0;\r\n        ${block}\r\n        return offset;\r\n      }\r\n      `;\r\n  }\r\n  protected offsetToIndices(): {[name: string]: GlslLibRoutine} {\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.inputNames.forEach((name, i) => {\r\n      const shape = this.context.inputTextureLayouts[i].shape;\r\n      const strides = this.context.inputTextureLayouts[i].strides;\r\n      const rank = shape.length;\r\n      let funcName = `offsetToIndices_${name}`;\r\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides));\r\n      funcName = `offsetToIndices_${name}_T`;\r\n      result[funcName] =\r\n          new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides.slice().reverse()));\r\n    });\r\n    return result;\r\n  }\r\n  static offsetToIndicesSingle(name: string, rank: number, strides: readonly number[]): string {\r\n    const stridesBlock = [];\r\n    for (let i = 0; i < rank - 1; ++i) {\r\n      stridesBlock.push(`\r\n      indices[${i}] = offset / ${strides[i]};`);\r\n      stridesBlock.push(`\r\n        offset -= indices[${i}] * ${strides[i]};`);\r\n    }\r\n    stridesBlock.push(`\r\n      indices[${rank - 1}] = offset;`);\r\n    return `\r\n      void ${name}(int offset, out int indices[${rank}]) {\r\n        ${stridesBlock.join('')}\r\n      }\r\n      `;\r\n  }\r\n  protected incrementIndices(): {[name: string]: GlslLibRoutine} {\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.inputNames.forEach((name, i) => {\r\n      const shape = this.context.inputTextureLayouts[i].shape;\r\n      const rank = shape.length;\r\n      const funcName = `incrementIndices_${name}`;\r\n      let shapeInit = '';\r\n      for (let i = 0; i < rank; ++i) {\r\n        shapeInit += `\r\n        shape[${i}] = ${shape[i]};`;\r\n      }\r\n      const body = `\r\n        void ${funcName}(int axis, out int indices[${rank}]) {\r\n          int shape[${rank}];\r\n          ${shapeInit};\r\n          for(int i = ${rank} -1 ; i >= 0; --i) {\r\n            if(i > axis) continue;\r\n            indices[i] += 1;\r\n            if(indices[i] < shape[i]) {\r\n              break;\r\n            }\r\n            indices[i] = 0;\r\n          }\r\n        }\r\n        `;\r\n      result[funcName] = new GlslLibRoutine(body);\r\n    });\r\n    return result;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n/**\r\n * represent a version irrelevant abstraction of for GLSL source code\r\n */\r\nexport interface Glsl {\r\n  readonly version: string;\r\n  readonly attribute: string;\r\n  readonly varyingVertex: string;\r\n  readonly varyingFrag: string;\r\n  readonly texture2D: string;\r\n  readonly output: string;\r\n  readonly outputDeclaration: string;\r\n}\r\n\r\nconst GLSL_ES_2_0: Glsl = {\r\n  version: '',\r\n  attribute: 'attribute',\r\n  varyingVertex: 'varying',\r\n  varyingFrag: 'varying',\r\n  texture2D: 'texture2D',\r\n  output: 'gl_FragColor',\r\n  outputDeclaration: '',\r\n};\r\nconst GLSL_ES_3_0: Glsl = {\r\n  version: '#version 300 es',\r\n  attribute: 'in',\r\n  varyingVertex: 'out',\r\n  varyingFrag: 'in',\r\n  texture2D: 'texture',\r\n  output: 'outputColor',\r\n  outputDeclaration: 'out vec4 outputColor;',\r\n};\r\n\r\nexport function getGlsl(version: 1|2) {\r\n  return version === 1 ? GLSL_ES_2_0 : GLSL_ES_3_0;\r\n}\r\n\r\nexport function getVertexShaderSource(version: 1|2): string {\r\n  const glsl = getGlsl(version);\r\n  return `${glsl.version}\r\n      precision highp float;\r\n      ${glsl.attribute} vec3 position;\r\n      ${glsl.attribute} vec2 textureCoord;\r\n\r\n      ${glsl.varyingVertex} vec2 TexCoords;\r\n\r\n      void main()\r\n      {\r\n          gl_Position = vec4(position, 1.0);\r\n          TexCoords = textureCoord;\r\n      }`;\r\n}\r\n\r\nexport function getFragShaderPreamble(version: 1|2): string {\r\n  const glsl = getGlsl(version);\r\n  return `${glsl.version}\r\n    precision highp float;\r\n    precision highp int;\r\n    precision highp sampler2D;\r\n    ${glsl.varyingFrag} vec2 TexCoords;\r\n    ${glsl.outputDeclaration}\r\n    const vec2 halfCR = vec2(0.5, 0.5);\r\n\r\n    // Custom vector types to handle higher dimenalities.\r\n    struct ivec5\r\n    {\r\n      int x;\r\n      int y;\r\n      int z;\r\n      int w;\r\n      int u;\r\n    };\r\n\r\n    struct ivec6\r\n    {\r\n      int x;\r\n      int y;\r\n      int z;\r\n      int w;\r\n      int u;\r\n      int v;\r\n    };\r\n\r\n    int imod(int x, int y) {\r\n      return x - y * (x / y);\r\n    }\r\n\r\n    `;\r\n}\r\n\r\nexport function getDefaultFragShaderMain(version: 1|2, outputShapeLength: number): string {\r\n  const glsl = getGlsl(version);\r\n  return `\r\n  void main() {\r\n    int indices[${outputShapeLength}];\r\n    toVec(TexCoords, indices);\r\n    vec4 result = vec4(process(indices));\r\n    ${glsl.output} = result;\r\n  }\r\n  `;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\r\n\r\n/**\r\n * GLSL Library responsible for vec routines\r\n * Vec is an varible length int array. The length is fixed at the time of\r\n * generating the library functions from the dimensions of the output.\r\n */\r\nexport class VecGlslLib extends GlslLib {\r\n  constructor(context: GlslContext) {\r\n    super(context);\r\n  }\r\n  getCustomTypes(): {[name: string]: string} {\r\n    return {};\r\n  }\r\n  getFunctions(): {[name: string]: GlslLibRoutine} {\r\n    return {...this.binaryVecFunctions(), ...this.copyVec(), ...this.setVecItem(), ...this.getVecItem()};\r\n  }\r\n  protected binaryVecFunctions(): {[name: string]: GlslLibRoutine} {\r\n    const outputLayout = this.context.outputTextureLayout;\r\n    const rank = outputLayout.shape.length;\r\n    const nameOp: {[name: string]: string} = {add: '+=', sub: '-=', mul: '*=', div: '/='};\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    for (const name in nameOp) {\r\n      const fname = `${name}Vec`;\r\n      let assignmentBlock = '';\r\n      for (let i = 0; i < rank; ++i) {\r\n        assignmentBlock += `\r\n          dest[${i}] ${nameOp[name]} src[${i}];\r\n          `;\r\n      }\r\n      const body = `\r\n        void ${fname}(int src[${rank}], out int dest[${rank}]) {\r\n          ${assignmentBlock}\r\n        }\r\n        `;\r\n      result[fname] = new GlslLibRoutine(body);\r\n    }\r\n\r\n    return result;\r\n  }\r\n  protected copyVec(): {[name: string]: GlslLibRoutine} {\r\n    const outputLayout = this.context.outputTextureLayout;\r\n    const rank = outputLayout.shape.length;\r\n    let assignmentBlock = '';\r\n    for (let i = 0; i < rank; ++i) {\r\n      assignmentBlock += `\r\n        dest[${i}] = src[${i}];\r\n        `;\r\n    }\r\n    const body = `\r\n      void copyVec(int src[${rank}], out int dest[${rank}]) {\r\n        ${assignmentBlock}\r\n      }\r\n      `;\r\n    return {copyVec: new GlslLibRoutine(body)};\r\n  }\r\n\r\n  protected setVecItem(): {[name: string]: GlslLibRoutine} {\r\n    const outputLayout = this.context.outputTextureLayout;\r\n    const rank = outputLayout.shape.length;\r\n    let block = `\r\n        if(index < 0)\r\n            index =${rank} + index;\r\n        if (index == 0)\r\n            m[0] = value;\r\n        `;\r\n    for (let i = 1; i < rank - 1; ++i) {\r\n      block += `\r\n        else if (index == ${i})\r\n            m[${i}] = value;\r\n            `;\r\n    }\r\n    block += `\r\n        else\r\n            m[${rank - 1}] = value;\r\n        `;\r\n    const body = `\r\n      void setVecItem(out int m[${rank}], int index, int value) {\r\n        ${block}\r\n      }\r\n        `;\r\n    return {setVecItem: new GlslLibRoutine(body)};\r\n  }\r\n  protected getVecItem(): {[name: string]: GlslLibRoutine} {\r\n    const outputLayout = this.context.outputTextureLayout;\r\n    const rank = outputLayout.shape.length;\r\n    let block = `\r\n        if(index < 0)\r\n            index = ${rank} + index;\r\n        if (index == 0)\r\n            return m[0];\r\n      `;\r\n    for (let i = 1; i < rank - 1; ++i) {\r\n      block += `\r\n        else if (index == ${i})\r\n            return m[${i}];\r\n      `;\r\n    }\r\n    block += `\r\n        else\r\n            return m[${rank - 1}];\r\n        `;\r\n    const body = `\r\n      int getVecItem(int m[${rank}], int index) {\r\n        ${block}\r\n      }\r\n    `;\r\n    return {getVecItem: new GlslLibRoutine(body)};\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {InferenceHandler} from '../../backend';\r\nimport {Logger} from '../../instrument';\r\nimport {Tensor} from '../../tensor';\r\nimport {ShapeUtil} from '../../util';\r\n\r\nimport {createPackProgramInfoLoader} from './ops/pack';\r\nimport {createPackedReshape3DProgramInfoLoader, isReshapeCheap, processDims3D} from './ops/reshape-packed';\r\nimport {encodeAsUint8} from './ops/uint8-encode';\r\nimport {createUnpackProgramInfoLoader} from './ops/unpack';\r\nimport {WebGLSessionHandler} from './session-handler';\r\nimport {Encoder} from './texture-data-encoder';\r\nimport {calculateTextureWidthAndHeight, createTextureLayoutFromShape, createTextureLayoutFromTextureType} from './texture-layout';\r\nimport {Artifact, ProgramInfo, ProgramInfoLoader, TextureData, TextureLayout, TextureType} from './types';\r\n\r\nconst getProgramInfoUniqueKey =\r\n    (programInfo: ProgramInfo|ProgramInfoLoader, inputTextureDatas: TextureData[]): string => {\r\n      const inputs =\r\n          inputTextureDatas.map(texture => `${texture.unpackedShape.join(',')};${texture.width}x${texture.height}`)\r\n              .join('_');\r\n      let key = programInfo.name;\r\n      if (programInfo.cacheHint) {\r\n        key += '[' + programInfo.cacheHint + ']';\r\n      }\r\n      key += ':' + inputs;\r\n      return key;\r\n    };\r\n\r\nexport class WebGLInferenceHandler implements InferenceHandler {\r\n  private packedTextureDataCache: Map<Tensor.Id, TextureData>;\r\n  private unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\r\n  constructor(public session: WebGLSessionHandler) {\r\n    this.packedTextureDataCache = new Map();\r\n    this.unpackedTextureDataCache = new Map();\r\n  }\r\n\r\n  /**\r\n   * @returns [width, height]\r\n   */\r\n  calculateTextureWidthAndHeight(shape: readonly number[], textureType: TextureType): [number, number] {\r\n    return calculateTextureWidthAndHeight(this.session.layoutStrategy, shape, textureType);\r\n  }\r\n\r\n  executeProgram(program: ProgramInfo|ProgramInfoLoader, inputs: readonly Tensor[]): TextureData {\r\n    if (inputs.length < program.inputNames.length) {\r\n      throw new Error(`Input size mustn't be less than ${program.inputNames.length}.`);\r\n    }\r\n    if (program.inputNames.length !== program.inputTypes.length) {\r\n      throw new Error('input names size does not match input types');\r\n    }\r\n\r\n    // create texture info for input\r\n    const inputTextureDatas: TextureData[] = [];\r\n    for (let i = 0; i < program.inputNames.length; ++i) {\r\n      inputTextureDatas[i] = this.getOrCreateTextureData(inputs[i], program.inputTypes[i]);\r\n    }\r\n\r\n    const key = getProgramInfoUniqueKey(program, inputTextureDatas);\r\n    let artifact = this.session.programManager.getArtifact(key);\r\n    const programInfo = artifact ?\r\n        artifact.programInfo :\r\n        (typeof (program as ProgramInfoLoader).get === 'function' ? (program as ProgramInfoLoader).get() :\r\n                                                                    (program as ProgramInfo));\r\n\r\n    // create texture info for output\r\n    const outputTextureLayout = createTextureLayoutFromTextureType(\r\n        this.session.layoutStrategy, programInfo.output.dims, programInfo.output.textureType);\r\n    const outputTextureData = this.createTextureData(outputTextureLayout, programInfo.output.type);\r\n\r\n    if (!artifact) {\r\n      artifact = this.session.programManager.build(programInfo, inputTextureDatas, outputTextureData);\r\n      this.session.programManager.setArtifact(key, artifact);\r\n    }\r\n\r\n    this.runProgram(artifact, inputTextureDatas, outputTextureData);\r\n    return outputTextureData;\r\n  }\r\n\r\n  run(program: ProgramInfoLoader, inputs: readonly Tensor[]): Tensor {\r\n    const outputTextureData = this.executeProgram(program, inputs);\r\n    return outputTextureData.tensor;\r\n  }\r\n\r\n  private runProgram(artifact: Artifact, inputs: TextureData[], output: TextureData): void {\r\n    // input should match\r\n    for (let i = 0; i < inputs.length; ++i) {\r\n      if (!!inputs[i].isPacked !== (artifact.programInfo.inputTypes[i] === TextureType.packed)) {\r\n        throw new Error(`input[${i}] property packed inconsistent`);\r\n      }\r\n    }\r\n\r\n    // output should match\r\n    if (!!output.isPacked !== (artifact.programInfo.output.textureType === TextureType.packed)) {\r\n      throw new Error('output property packed inconsistent');\r\n    }\r\n\r\n    this.session.programManager.run(artifact, inputs, output);\r\n  }\r\n\r\n  /**\r\n   * Create a TextureData object from a tensor.\r\n   * Usage = Encoder.Usage.UploadOnly.\r\n   * If a related texture data is found in cache, returns it;\r\n   * Otherwise:\r\n   *   Creates a new texture layout if not provided;\r\n   *   Creates WebGLTexture with the layout;\r\n   *   Upload tensor data to the texture;\r\n   *   Creates a texture data object associated with the given tensor.\r\n   * @param tensor the tensor with data to upload\r\n   */\r\n  private getOrCreateTextureData(tensor: Tensor, textureType: TextureType) {\r\n    let td = this.getTextureData(tensor.dataId, textureType === TextureType.packed);\r\n\r\n    if (!td) {\r\n      // check if we have texture data in different type\r\n      td = this.getTextureData(tensor.dataId, textureType !== TextureType.packed);\r\n      if (td) {\r\n        if (textureType === TextureType.packed) {\r\n          return this.pack(td);\r\n        } else {\r\n          return this.unpack(td);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!td) {\r\n      const layout = createTextureLayoutFromTextureType(this.session.layoutStrategy, tensor.dims, textureType);\r\n\r\n      if (textureType === TextureType.packedLastDimension) {\r\n        const group = 1;\r\n        const channels = 4;\r\n        const shape = tensor.dims;\r\n        if (shape.length === 4) {\r\n          // pre-processing for kernel data of Conv.\r\n          //\r\n          // TODO: currently this is a hacking to overwrite Conv's weight. The correct way to do this should be:\r\n          // 1. implement texture based const-folding\r\n          // 2. create a WebGL program \"preprocessConvWeight\" to do the same work as below\r\n          // 3. run the program before dotProduct.\r\n          //\r\n          const adjustedKernelShape = [shape[0], Math.ceil((shape[1] * shape[2] * shape[3]) / channels)];\r\n          const adjustedLayout =\r\n              createTextureLayoutFromTextureType(this.session.layoutStrategy, adjustedKernelShape, textureType);\r\n          let buffer = tensor.numberData;\r\n          if (shape[1] * shape[2] * shape[3] % channels !== 0) {\r\n            const numFeatureMaps = shape[0];\r\n            const oldRowSize = shape[1] * shape[2] * shape[3];\r\n            const newRowSize = Math.ceil(oldRowSize * group / channels) * channels;\r\n            const newSize = numFeatureMaps * newRowSize;\r\n            buffer = new Float32Array(newSize);\r\n            for (let f = 0; f < numFeatureMaps; ++f) {\r\n              const oldOffset = f * oldRowSize;\r\n              const newOffset = f * newRowSize + f % group * oldRowSize;\r\n              buffer.set(tensor.numberData.subarray(oldOffset, oldOffset + oldRowSize), newOffset);\r\n            }\r\n          }\r\n          return this.createTextureData(adjustedLayout, tensor.type, buffer, tensor, Encoder.Usage.UploadOnly);\r\n        }\r\n      }\r\n\r\n      if (textureType === TextureType.packed) {\r\n        const unpackedTextureLayout =\r\n            createTextureLayoutFromShape(this.session.layoutStrategy, tensor.dims, 1, [], {reverseWH: true});\r\n        const unpackedTextureData = this.createTextureData(\r\n            unpackedTextureLayout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\r\n        td = this.pack(unpackedTextureData);\r\n      } else {\r\n        td = this.createTextureData(layout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\r\n      }\r\n    }\r\n    return td;\r\n  }\r\n\r\n  /**\r\n   * Create a TextureData object using the given data and bind to the given tensor.\r\n   * Usage = Encoder.Usage.UploadOnly.\r\n   * NOTE: this function is a hack for Conv implementation. should remove this function, after rewriting Conv\r\n   * implementation by Graph.Transformer\r\n   * @param dataType the tensor data type\r\n   * @param data the actual data to upload\r\n   * @param tensor the tensor to bind. tensor's data is ignored.\r\n   */\r\n  createTextureDataFromLayoutBindTensor(\r\n      layout: TextureLayout, dataType: Tensor.DataType, data: Tensor.NumberType, tensor: Tensor): TextureData {\r\n    return this.createTextureData(layout, dataType, data, tensor, Encoder.Usage.UploadOnly);\r\n  }\r\n\r\n  private createTextureData(\r\n      layout: TextureLayout, dataType: Tensor.DataType, data?: Tensor.NumberType, tensor?: Tensor,\r\n      usage?: Encoder.Usage): TextureData {\r\n    Logger.verbose('InferenceHandler', `Creating TextureData: layout:[${JSON.stringify(layout)}]`);\r\n    const texture = this.session.textureManager.createTextureFromLayout(dataType, layout, data, usage);\r\n    return this.createTextureDataFromTexture(layout, dataType, texture, tensor);\r\n  }\r\n\r\n  reshapeUnpacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\r\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\r\n    const newTextureLayout: TextureLayout = {\r\n      channels: inputTD.channels,\r\n      height: inputTD.height,\r\n      width: inputTD.width,\r\n      // handle reshaping into scalar Tensors\r\n      shape: reshapedDims.length !== 0 ? reshapedDims : [1],\r\n      strides: ShapeUtil.computeStrides(reshapedDims),\r\n      unpackedShape: reshapedDims,\r\n    };\r\n    const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\r\n    return newTextureData.tensor;\r\n  }\r\n\r\n  reshapePacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\r\n    const inputTD = this.getOrCreateTextureData(input, TextureType.packed);\r\n\r\n    // check if the reshape is 'cheap'\r\n    if (isReshapeCheap(input.dims, reshapedDims)) {\r\n      const newTextureLayout: TextureLayout = {\r\n        channels: inputTD.channels,\r\n        height: inputTD.height,\r\n        width: inputTD.width,\r\n        // handle reshaping into scalar Tensors\r\n        shape: reshapedDims.length !== 0 ? reshapedDims : [1],\r\n        strides: ShapeUtil.computeStrides(reshapedDims),\r\n        unpackedShape: reshapedDims,\r\n        isPacked: true\r\n      };\r\n      const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\r\n      return newTextureData.tensor;\r\n    }\r\n\r\n    const squeezedInputShape = processDims3D(input.dims);\r\n    const squeezedOutputShape = processDims3D(reshapedDims);\r\n\r\n    const squeezedInputTensor = this.reshapePacked(input, squeezedInputShape);\r\n    const squeezedOutputTensor = this.run(\r\n        createPackedReshape3DProgramInfoLoader(this, squeezedInputTensor, squeezedOutputShape), [squeezedInputTensor]);\r\n    const outputTensor = this.reshapePacked(squeezedOutputTensor, reshapedDims);\r\n    return outputTensor;\r\n  }\r\n\r\n  cast(input: Tensor, type: Tensor.DataType): Tensor {\r\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\r\n    const newTextureData = this.createTextureDataFromTexture(inputTD as TextureLayout, type, inputTD.texture);\r\n    return newTextureData.tensor;\r\n  }\r\n\r\n  private createTextureDataFromTexture(\r\n      layout: TextureLayout, dataType: Tensor.DataType, texture: WebGLTexture, tensor?: Tensor, tensorId?: Tensor.Id) {\r\n    const textureData: TextureData = {\r\n      ...layout,\r\n      tensor: tensor ||\r\n          new Tensor(\r\n                  layout.unpackedShape, dataType, (_id: Tensor.Id) => this.readTexture(textureData),\r\n                  async (_id: Tensor.Id) => this.readTextureAsync(textureData), undefined, tensorId),\r\n      texture\r\n    };\r\n    this.setTextureData(textureData.tensor.dataId, textureData, layout.isPacked);\r\n    return textureData;\r\n  }\r\n\r\n  private getTextureData(tensorId: Tensor.Id, isPacked = false): TextureData|undefined {\r\n    return this.session.isInitializer(tensorId) ? this.session.getTextureData(tensorId, isPacked) :\r\n        isPacked                                ? this.packedTextureDataCache.get(tensorId) :\r\n                                                  this.unpackedTextureDataCache.get(tensorId);\r\n  }\r\n  setTextureData(tensorId: Tensor.Id, td: TextureData, isPacked = false): void {\r\n    if (this.session.isInitializer(tensorId)) {\r\n      this.session.setTextureData(tensorId, td, isPacked);\r\n    } else {\r\n      (isPacked ? this.packedTextureDataCache : this.unpackedTextureDataCache).set(tensorId, td);\r\n    }\r\n  }\r\n  isTextureLayoutCached(tensor: Tensor, isPacked = false): boolean {\r\n    return !!this.getTextureData(tensor.dataId, isPacked);\r\n  }\r\n\r\n  dispose(): void {\r\n    this.session.textureManager.clearActiveTextures();\r\n    this.packedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\r\n    this.packedTextureDataCache = new Map();\r\n    this.unpackedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\r\n    this.unpackedTextureDataCache = new Map();\r\n  }\r\n\r\n  readTexture(textureData: TextureData): Tensor.NumberType {\r\n    if (textureData.isPacked) {\r\n      return this.readTexture(this.unpack(textureData));\r\n    }\r\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\r\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\r\n    }\r\n    return this.session.textureManager.readTexture(textureData, textureData.tensor.type, textureData.channels);\r\n  }\r\n\r\n  async readTextureAsync(textureData: TextureData): Promise<Tensor.NumberType> {\r\n    if (textureData.isPacked) {\r\n      return this.readTextureAsync(this.unpack(textureData));\r\n    }\r\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\r\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\r\n    }\r\n    return this.session.textureManager.readTextureAsync(textureData, textureData.tensor.type, textureData.channels);\r\n  }\r\n\r\n  pack(input: TextureData): TextureData {\r\n    const outputTextureData = this.executeProgram(createPackProgramInfoLoader(this, input.tensor), [input.tensor]);\r\n    return outputTextureData;\r\n  }\r\n\r\n  unpack(input: TextureData): TextureData {\r\n    const outputTextureData = this.executeProgram(createUnpackProgramInfoLoader(this, input.tensor), [input.tensor]);\r\n    return outputTextureData;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {OpSet} from '../../opset';\r\n\r\nimport {batchNormalization, parseBatchNormalizationAttributes} from './ops/batch-normalization';\r\nimport * as binaryOps from './ops/binary-op';\r\nimport {cast, parseCastAttributes} from './ops/cast';\r\nimport {concat, parseConcatAttributes} from './ops/concat';\r\nimport {conv, parseConvAttributes} from './ops/conv';\r\nimport {convTranspose, parseConvTransposeAttributes} from './ops/conv-transpose';\r\nimport {depthToSpace, parseDepthToSpaceAttributes} from './ops/depth-to-space';\r\nimport {flatten, parseFlattenAttributes} from './ops/flatten';\r\nimport {gather, parseGatherAttributes} from './ops/gather';\r\nimport {gemm, parseGemmAttributesV11, parseGemmAttributesV7} from './ops/gemm';\r\nimport {imageScaler, parseImageScalerAttributes} from './ops/image-scaler';\r\nimport {instanceNormalization, parseInstanceNormalizationAttributes} from './ops/instance-normalization';\r\nimport {lrn, parseLrnAttributes} from './ops/lrn';\r\nimport {matMul, parseMatMulAttributes} from './ops/matmul';\r\nimport {padV11, padV2, parsePadAttributesV11, parsePadAttributesV2} from './ops/pad';\r\nimport {averagePool, globalAveragePool, globalMaxPool, maxPool, parseAveragePoolAttributes, parseGlobalAveragePoolAttributes, parseMaxPoolAttributes} from './ops/pool';\r\nimport {parseReduceAttributes, reduceLogSum, reduceLogSumSquare, reduceMax, reduceMean, reduceMin, reduceProd, reduceSum} from './ops/reduce';\r\nimport {reshape} from './ops/reshape';\r\nimport {parseResizeAttributesV10, parseResizeAttributesV11, resize} from './ops/resize-packed';\r\nimport {shape} from './ops/shape';\r\nimport {parseSliceAttributes, slice, sliceV10} from './ops/slice';\r\nimport {parseSoftmaxAttributes, parseSoftmaxAttributesV13, softmax, softmaxV13} from './ops/softmax';\r\nimport {parseSplitAttributes, split} from './ops/split';\r\nimport {parseSqueezeAttributes, squeeze, squeezeV13} from './ops/squeeze';\r\nimport {sum} from './ops/sum';\r\nimport {tile} from './ops/tile';\r\nimport {parseTransposeAttributes, transpose} from './ops/transpose';\r\nimport * as unaryOps from './ops/unary-op';\r\nimport {parseUnsqueezeAttributes, unsqueeze, unsqueezeV13} from './ops/unsqueeze';\r\nimport {parseUpsampleAttributesV7, parseUpsampleAttributesV9, upsample} from './ops/upsample';\r\n\r\nexport const WEBGL_OP_RESOLVE_RULES: readonly OpSet.ResolveRule[] = [\r\n  ['Abs', '', '6+', unaryOps.abs],\r\n  ['Acos', '', '7+', unaryOps.acos],\r\n  ['Add', '', '7+', binaryOps.add],\r\n  ['And', '', '7+', binaryOps.and],\r\n  ['Asin', '', '7+', unaryOps.asin],\r\n  ['Atan', '', '7+', unaryOps.atan],\r\n  // TODO: support new attributes for AveragePool-10\r\n  ['AveragePool', '', '7+', averagePool, parseAveragePoolAttributes],\r\n  ['BatchNormalization', '', '7+', batchNormalization, parseBatchNormalizationAttributes],\r\n  ['Cast', '', '6+', cast, parseCastAttributes],\r\n  ['Ceil', '', '6+', unaryOps.ceil],\r\n  ['Clip', '', '6-10', unaryOps.clip, unaryOps.parseClipAttributes],\r\n  ['Clip', '', '11+', unaryOps.clipV11],\r\n  ['Concat', '', '4+', concat, parseConcatAttributes],\r\n  ['Conv', '', '1+', conv, parseConvAttributes],\r\n  ['ConvTranspose', '', '1+', convTranspose, parseConvTransposeAttributes],\r\n  ['Cos', '', '7+', unaryOps.cos],\r\n  ['Div', '', '7+', binaryOps.div],\r\n  ['Dropout', '', '7+', unaryOps.identity],\r\n  ['DepthToSpace', '', '1+', depthToSpace, parseDepthToSpaceAttributes],\r\n  ['Equal', '', '7+', binaryOps.equal],\r\n  ['Elu', '', '6+', unaryOps.elu, unaryOps.parseEluAttributes],\r\n  ['Exp', '', '6+', unaryOps.exp],\r\n  ['Flatten', '', '1+', flatten, parseFlattenAttributes],\r\n  ['Floor', '', '6+', unaryOps.floor],\r\n  ['FusedConv', 'com.microsoft', '1+', conv, parseConvAttributes],\r\n  ['Gather', '', '1+', gather, parseGatherAttributes],\r\n  ['Gemm', '', '7-10', gemm, parseGemmAttributesV7],\r\n  ['Gemm', '', '11+', gemm, parseGemmAttributesV11],\r\n  ['GlobalAveragePool', '', '1+', globalAveragePool, parseGlobalAveragePoolAttributes],\r\n  ['GlobalMaxPool', '', '1+', globalMaxPool],\r\n  ['Greater', '', '7+', binaryOps.greater],\r\n  ['Identity', '', '1+', unaryOps.identity],\r\n  ['ImageScaler', '', '1+', imageScaler, parseImageScalerAttributes],\r\n  ['InstanceNormalization', '', '6+', instanceNormalization, parseInstanceNormalizationAttributes],\r\n  ['LeakyRelu', '', '6+', unaryOps.leakyRelu, unaryOps.parseLeakyReluAttributes],\r\n  ['Less', '', '7+', binaryOps.less],\r\n  ['LRN', '', '1+', lrn, parseLrnAttributes],\r\n  ['Log', '', '6+', unaryOps.log],\r\n  ['MatMul', '', '1+', matMul, parseMatMulAttributes],\r\n  // TODO: support new attributes for MaxPool-8 and MaxPool-10\r\n  ['MaxPool', '', '1+', maxPool, parseMaxPoolAttributes],\r\n  ['Mul', '', '7+', binaryOps.mul],\r\n  ['Neg', '', '6+', unaryOps.neg],\r\n  ['Not', '', '1+', unaryOps.not],\r\n  ['Or', '', '7+', binaryOps.or],\r\n  ['Pad', '', '2-10', padV2, parsePadAttributesV2],\r\n  ['Pad', '', '11+', padV11, parsePadAttributesV11],\r\n  ['Pow', '', '7+', binaryOps.pow],\r\n  ['PRelu', '', '7+', binaryOps.pRelu],\r\n  ['ReduceLogSum', '', '1+', reduceLogSum, parseReduceAttributes],\r\n  ['ReduceMax', '', '1+', reduceMax, parseReduceAttributes],\r\n  ['ReduceMean', '', '1+', reduceMean, parseReduceAttributes],\r\n  ['ReduceMin', '', '1+', reduceMin, parseReduceAttributes],\r\n  ['ReduceProd', '', '1+', reduceProd, parseReduceAttributes],\r\n  ['ReduceSum', '', '1-12', reduceSum, parseReduceAttributes],\r\n  ['ReduceSumSquare', '', '1+', reduceLogSumSquare, parseReduceAttributes],\r\n  ['Relu', '', '6+', unaryOps.relu],\r\n  ['Reshape', '', '5+', reshape],\r\n  ['Resize', '', '10', resize, parseResizeAttributesV10],\r\n  ['Resize', '', '11+', resize, parseResizeAttributesV11],\r\n  ['Shape', '', '1+', shape],\r\n  ['Sigmoid', '', '6+', unaryOps.sigmoid],\r\n  ['Sin', '', '7+', unaryOps.sin],\r\n  ['Slice', '', '10+', sliceV10],  // TODO: support 'steps' for Slice-10\r\n  ['Slice', '', '1-9', slice, parseSliceAttributes],\r\n  // The \"semantic\" meaning of axis has changed in opset-13.\r\n  ['Softmax', '', '1-12', softmax, parseSoftmaxAttributes],\r\n  ['Softmax', '', '13+', softmaxV13, parseSoftmaxAttributesV13],\r\n  // 'Split' operator has an optional attribute 'split'\r\n  // this attribute determines how the specified axis of input data is split.\r\n  // When the attribute is missing, we need the count of number of outputs\r\n  // so that we can determine the 'split' attribute from the runtime input to the Operator\r\n  ['Split', '', '2-12', split, parseSplitAttributes],\r\n  ['Sqrt', '', '6+', unaryOps.sqrt],\r\n  ['Squeeze', '', '1-12', squeeze, parseSqueezeAttributes],\r\n  ['Squeeze', '', '13+', squeezeV13],\r\n  ['Sub', '', '7+', binaryOps.sub],\r\n  ['Sum', '', '6+', sum],\r\n  ['Tan', '', '7+', unaryOps.tan],\r\n  ['Tanh', '', '6+', unaryOps.tanh],\r\n  ['Tile', '', '6+', tile],\r\n  ['Transpose', '', '1+', transpose, parseTransposeAttributes],\r\n  ['Upsample', '', '7-8', upsample, parseUpsampleAttributesV7],\r\n  ['Upsample', '', '9', upsample, parseUpsampleAttributesV9],\r\n  ['Unsqueeze', '', '1-12', unsqueeze, parseUnsqueezeAttributes],\r\n  ['Unsqueeze', '', '13+', unsqueezeV13],\r\n  ['Xor', '', '7+', binaryOps.xor],\r\n];\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, TextureType} from '../types';\r\n\r\nexport interface BatchNormalizationAttributes extends AttributeWithCacheKey {\r\n  epsilon: number;\r\n  momentum: number;\r\n  spatial: number;\r\n}\r\n\r\nconst batchNormalizationProgramMetadata = {\r\n  name: 'BatchNormalization',\r\n  inputNames: ['A', 'Scale', 'B', 'Mean', 'Variance'],\r\n  inputTypes:\r\n      [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked]\r\n};\r\n\r\nexport const batchNormalization: OperatorImplementation<BatchNormalizationAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const output = inferenceHandler.run(\r\n          {\r\n            ...batchNormalizationProgramMetadata,\r\n            cacheHint: attributes.cacheKey,\r\n            get: () => createBatchNormalizationProgramInfo(inferenceHandler, inputs, attributes)\r\n          },\r\n          inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseBatchNormalizationAttributes: OperatorInitialization<BatchNormalizationAttributes> =\r\n    (node: Graph.Node): BatchNormalizationAttributes => {\r\n      const epsilon = node.attributes.getFloat('epsilon', 1e-5);\r\n      const momentum = node.attributes.getFloat('momentum', 0.9);\r\n      const spatial = node.attributes.getInt('spatial', 1);\r\n      return createAttributeWithCacheKey({epsilon, momentum, spatial});\r\n    };\r\n\r\nconst createBatchNormalizationProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes):\r\n        ProgramInfo => {\r\n          const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n          const rank = inputs[0].dims.length;\r\n          const [scaleWidth, scaleHeight] =\r\n              inferenceHandler.calculateTextureWidthAndHeight(inputs[1].dims, TextureType.unpacked);\r\n          const shaderSource = `\r\n  float process(int[${rank}] indices) {\r\n    vec2 position = offsetToCoords(indices[1], ${scaleWidth}, ${scaleHeight});\r\n    float scale = getColorAsFloat(${glsl.texture2D}(Scale, position));\r\n    float mean = getColorAsFloat(${glsl.texture2D}(Mean, position));\r\n    float variance = getColorAsFloat(${glsl.texture2D}(Variance, position));\r\n    float b = getColorAsFloat(${glsl.texture2D}(B, position));\r\n\r\n    return scale * ( (_A(indices) - mean) / sqrt(variance + float(${attributes.epsilon})) ) + b;\r\n  }`;\r\n          return {\r\n            ...batchNormalizationProgramMetadata,\r\n            output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\r\n            shaderSource\r\n          };\r\n        };\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 5) {\r\n    throw new Error('BatchNormalization requires 5 inputs.');\r\n  }\r\n\r\n  const X = inputs[0];\r\n  const scale = inputs[1];\r\n  const B = inputs[2];\r\n  const mean = inputs[3];\r\n  const var_ = inputs[4];\r\n\r\n  // input should atleast have three dimensions - N,C,dim1,...,dimn\r\n  // other inputs can have only one dimensions\r\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1 || mean.dims.length !== 1 ||\r\n      var_.dims.length !== 1) {\r\n    throw new Error('invalid input shape.');\r\n  }\r\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1] || mean.dims[0] !== X.dims[1] ||\r\n      var_.dims[0] !== X.dims[1]) {\r\n    throw new Error('invalid input shape.');\r\n  }\r\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\r\n      (B.type !== 'float32' && B.type !== 'float64') || (mean.type !== 'float32' && mean.type !== 'float64') ||\r\n      (var_.type !== 'float32' && var_.type !== 'float64')) {\r\n    throw new Error('invalid input tensor types.');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\r\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\r\n\r\nexport function glslAdd(): GlslValueFunction {\r\n  const name = 'add_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return a + b;\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return v1 + v2;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslDiv(): GlslValueFunction {\r\n  const name = 'div_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return a / b;\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return v1 / v2;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslMul(): GlslValueFunction {\r\n  const name = 'mul_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return a * b;\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return v1 * v2;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslSub(): GlslValueFunction {\r\n  const name = 'sub_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return a - b;\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return v1 - v2;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslEqual(): GlslValueFunction {\r\n  const name = 'equal_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float(a == b);\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return vec4(equal(v1, v2));\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslGreater(): GlslValueFunction {\r\n  const name = 'greater_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float(a > b);\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return vec4( v1.r > v2.r ,\r\n      v1.g > v2.g,\r\n      v1.b > v2.b,\r\n      v1.a > v2.a );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslLess(): GlslValueFunction {\r\n  const name = 'less_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float(a < b);\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return vec4( v1.r < v2.r ,\r\n                v1.g < v2.g,\r\n                v1.b < v2.b,\r\n                v1.a < v2.a );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslAnd(): GlslValueFunction {\r\n  const name = 'and_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float( bool(a) && bool(b) );\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    bvec4 b1 = bvec4(v1);\r\n    bvec4 b2 = bvec4(v2);\r\n    return vec4( b1.r && b2.r ,\r\n                b1.g && b2.g,\r\n                b1.b && b2.b,\r\n                b1.a && b2.a );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslOr(): GlslValueFunction {\r\n  const name = 'or_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float( bool(a) || bool(b) );\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    bvec4 b1 = bvec4(v1);\r\n    bvec4 b2 = bvec4(v2);\r\n    return vec4( b1.r || b2.r ,\r\n                b1.g || b2.g,\r\n                b1.b || b2.b,\r\n                b1.a || b2.a );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslXor(): GlslValueFunction {\r\n  const name = 'xor_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float( bool(a) ^^ bool(b) );\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    bvec4 b1 = bvec4(v1);\r\n    bvec4 b2 = bvec4(v2);\r\n    return vec4( b1.r ^^ b2.r ,\r\n                b1.g ^^ b2.g,\r\n                b1.b ^^ b2.b,\r\n                b1.a ^^ b2.a );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslPow(): GlslValueFunction {\r\n  return glslBuiltinBinary('pow');\r\n}\r\nexport function glslPRelu(): GlslValueFunction {\r\n  const name = 'prelu_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return a < 0.0 ? a * b: a;\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return vec4(\r\n      v1.r < 0.0 ? v1.r * v2.r: v1.r,\r\n      v1.g < 0.0 ? v1.g * v2.g: v1.g,\r\n      v1.b < 0.0 ? v1.b * v2.b: v1.b,\r\n      v1.a < 0.0 ? v1.a * v2.a: v1.a\r\n      );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\n\r\nfunction glslBuiltinBinary(fname: string): GlslValueFunction {\r\n  const name = `${fname}_`;\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return ${fname}(a, b);\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return ${fname}(v1, v2);\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\n\r\nconst createBinaryProgramInfoLoader =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\r\n     outputTensorType: Tensor.DataType = inputs[0].type, cacheKey?: string): ProgramInfoLoader => {\r\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\r\n      return {\r\n        name: glslFunc.name,\r\n        inputNames: ['A', 'B'],\r\n        inputTypes: [textureType, textureType],\r\n        cacheHint: cacheKey,\r\n        get: () => createBinaryProgramInfo(handler, inputs, glslFunc, outputTensorType)\r\n      };\r\n    };\r\n\r\nconst createBinaryProgramInfo =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\r\n     outputTensorType: Tensor.DataType = inputs[0].type): ProgramInfo => {\r\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\r\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\r\n      let outputShape = inputs[0].dims;\r\n\r\n      const usePackedTexture = handler.session.pack;\r\n\r\n      if (isBroadcast) {\r\n        const calculatedShape = BroadcastUtil.calcShape(inputs[0].dims, inputs[1].dims, false);\r\n        if (!calculatedShape) {\r\n          throw new Error('Can\\'t perform binary op on the given tensors');\r\n        }\r\n        outputShape = calculatedShape;\r\n        const outputRank = outputShape.length;\r\n        const aRank = inputs[0].dims.length !== 0 ? inputs[0].dims.length : 1;\r\n        const bRank = inputs[1].dims.length !== 0 ? inputs[1].dims.length : 1;\r\n        const aBcast = inputs[0].dims.length !== 0 ? 'bcastIndices_A(indices, aindices);' : 'aindices[0] = 0;';\r\n        const bBcast = inputs[1].dims.length !== 0 ? 'bcastIndices_B(indices, bindices);' : 'bindices[0] = 0;';\r\n\r\n        const glsl = getGlsl(handler.session.backend.glContext.version);\r\n        const shaderSource = usePackedTexture ? `\r\n      ${glslFunc.body}\r\n      void main() {\r\n        vec4 a = getAAtOutCoords();\r\n        vec4 b = getBAtOutCoords();\r\n        vec4 result = ${glslFunc.name}(a, b);\r\n        ${glsl.output} = result;\r\n      }` :\r\n                                                `\r\n      ${glslFunc.body}\r\n      float process(int indices[${outputRank}]) {\r\n        int aindices[${aRank}];\r\n        int bindices[${bRank}];\r\n        ${aBcast}\r\n        ${bBcast}\r\n        return ${glslFunc.name}(_A(aindices), _B(bindices));\r\n      }`;\r\n\r\n        return {\r\n          name: glslFunc.name,\r\n          inputNames: ['A', 'B'],\r\n          inputTypes: [textureType, textureType],\r\n          output: {dims: outputShape, type: outputTensorType, textureType},\r\n          shaderSource,\r\n          hasMain: usePackedTexture\r\n        };\r\n      }\r\n      const glsl = getGlsl(handler.session.backend.glContext.version);\r\n      const shaderSource = `\r\n    ${glslFunc.body}\r\n    void main() {\r\n      vec4 v1 = ${glsl.texture2D}(A, TexCoords);\r\n      vec4 v2 = ${glsl.texture2D}(B, TexCoords);\r\n      vec4 result = ${glslFunc.name}(v1, v2);\r\n      ${glsl.output} = result;\r\n    }\r\n    `;\r\n\r\n      return {\r\n        name: glslFunc.name,\r\n        inputNames: ['A', 'B'],\r\n        inputTypes: [textureType, textureType],\r\n        output: {dims: inputs[0].dims, type: outputTensorType, textureType},\r\n        shaderSource,\r\n        hasMain: true\r\n      };\r\n    };\r\n\r\nexport const add = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAdd()), inputs)];\r\n\r\nexport const and = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAnd(), 'bool'), inputs)];\r\n\r\nexport const div = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslDiv()), inputs)];\r\n\r\nexport const equal = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslEqual(), 'bool'), inputs)];\r\n\r\nexport const greater = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslGreater(), 'bool'), inputs)];\r\n\r\nexport const less = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslLess(), 'bool'), inputs)];\r\n\r\nexport const mul = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslMul()), inputs)];\r\n\r\nexport const or = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslOr(), 'bool'), inputs)];\r\n\r\nexport const pow = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPow()), inputs)];\r\n\r\nexport const pRelu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPRelu()), inputs)];\r\n\r\nexport const sub = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslSub()), inputs)];\r\n\r\nexport const xor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslXor(), 'bool'), inputs)];\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ProtoUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nexport const cast: OperatorImplementation<Tensor.DataType> =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], to: Tensor.DataType): Tensor[] => {\r\n      validateInputs(inputs);\r\n      return [handler.cast(inputs[0], to)];\r\n    };\r\n\r\nexport const parseCastAttributes: OperatorInitialization<Tensor.DataType> = (node: Graph.Node): Tensor.DataType =>\r\n    ProtoUtil.tensorDataTypeFromProto(node.attributes.getInt('to'));\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Cast requires 1 input.');\r\n  }\r\n\r\n  if (inputs[0].type === 'string') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\nimport {getCoordsDataType, getGlChannels} from '../utils';\r\n\r\nimport {ConcatAttributes} from './concat';\r\nimport {getChannels, unpackFromChannel} from './packing-utils';\r\n\r\nconst createPackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\r\n  name: 'Concat (packed)',\r\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\r\n  inputTypes: Array(inputCount).fill(TextureType.packed),\r\n  cacheHint\r\n});\r\n\r\nconst createPackedConcatProgramInfo =\r\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\r\n      const inputShape = inputs[0].dims.slice();\r\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\r\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\r\n      }\r\n      if (axis < 0) {\r\n        axis = inputShape.length + axis;\r\n      }\r\n      // ensure all of the non-concatenated axes match each other\r\n      // calculate the shape of the output tensor while we do that\r\n      const outputShape = inputShape.slice(0);\r\n      for (let i = 1; i < inputs.length; i++) {\r\n        const dataNShape = inputs[i].dims.slice();\r\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\r\n          // add to the placeholder for computing output shape\r\n          if (axisIndex === axis) {\r\n            outputShape[axis] += dataNShape[axisIndex];\r\n          }\r\n          // ensure all non-cancatenated axes match each other\r\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\r\n            throw new Error('non concat dimensions must match');\r\n          }\r\n        }\r\n      }\r\n\r\n      const rank = outputShape.length;\r\n      const coords = getChannels('coords', rank);\r\n      const dtype = getCoordsDataType(rank);\r\n      const unpackChannel = unpackFromChannel();\r\n\r\n      const shapes = inputs.map(i => i.dims);\r\n      const channels = getGlChannels(rank);\r\n      const offsets: number[] = new Array(shapes.length - 1);\r\n\r\n      offsets[0] = shapes[0][axis];\r\n      for (let i = 1; i < offsets.length; i++) {\r\n        offsets[i] = offsets[i - 1] + shapes[i][axis];\r\n      }\r\n\r\n      const channel = channels[axis];\r\n      const lastChannels = channels.slice(-2);\r\n      const allChannels = channels.join();\r\n\r\n      let getValueSnippet = `if (${channel} < ${offsets[0]}) {\r\n        return getChannel(\r\n            getX0(${allChannels}), vec2(${lastChannels.join()}));\r\n        }`;\r\n      for (let i = 1; i < offsets.length; i++) {\r\n        const shift = offsets[i - 1];\r\n        getValueSnippet += `\r\n            if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\r\n              return getChannel(\r\n                getX${i}(${getShiftedChannelsSnippet(channels, channel, shift)}),\r\n                vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));\r\n            }`;\r\n      }\r\n      const lastIndex = offsets.length;\r\n      const shift = offsets[offsets.length - 1];\r\n      getValueSnippet += `\r\n            return getChannel(\r\n              getX${lastIndex}(${getShiftedChannelsSnippet(channels, channel, shift)}),\r\n              vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));`;\r\n\r\n      const glsl = getGlsl(handler.session.backend.glContext.version);\r\n\r\n      const shaderSource = `\r\n          ${unpackChannel}\r\n          float getValue(${channels.map(x => 'int ' + x)}) {\r\n            ${getValueSnippet}\r\n          }\r\n\r\n          void main() {\r\n            ${dtype} coords = getOutputCoords();\r\n            int lastDim = coords.${channels[rank - 1]};\r\n            coords.${channels[rank - 1]} = coords.${channels[rank - 2]};\r\n            coords.${channels[rank - 2]} = lastDim;\r\n\r\n            vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\r\n\r\n            ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\r\n            if (${coords[rank - 1]} < ${outputShape[rank - 1]}) {\r\n              result.g = getValue(${coords});\r\n            }\r\n\r\n            ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\r\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]}) {\r\n              result.a = getValue(${coords});\r\n            }\r\n\r\n            ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\r\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]} &&\r\n                ${coords[rank - 1]} < ${outputShape[rank - 1]}) {\r\n              result.b = getValue(${coords});\r\n            }\r\n            ${glsl.output} = result;\r\n          }\r\n        `;\r\n\r\n      return {\r\n        ...metadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\r\n        shaderSource,\r\n        hasMain: true,\r\n      };\r\n    };\r\n\r\nexport const createPackedConcatProgramInfoLoader =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\r\n      const metadata = createPackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\r\n      return {...metadata, get: () => createPackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\r\n    };\r\n\r\nconst getShiftedChannelsSnippet = (channels: string[], channel: string, shift: number): string => {\r\n  const channelIdx = channels.indexOf(channel);\r\n  const res = channels.map((c, idx) => {\r\n    if (idx === channelIdx) {\r\n      return `${c} - ${shift}`;\r\n    } else {\r\n      return c;\r\n    }\r\n  });\r\n  return res.join();\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\nimport {createPackedConcatProgramInfoLoader} from './concat-packed';\r\n\r\nexport interface ConcatAttributes extends AttributeWithCacheKey {\r\n  readonly axis: number;\r\n}\r\n\r\nexport const concat: OperatorImplementation<ConcatAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n      if (inferenceHandler.session.pack && inputs[0].dims.length > 1) {\r\n        const output =\r\n            inferenceHandler.run(createPackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\r\n        return [output];\r\n      } else {\r\n        const output =\r\n            inferenceHandler.run(createUnpackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\r\n        return [output];\r\n      }\r\n    };\r\n\r\nconst createUnpackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\r\n  name: 'Concat',\r\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\r\n  inputTypes: Array(inputCount).fill(TextureType.unpacked),\r\n  cacheHint\r\n});\r\n\r\nconst createUnpackedConcatProgramInfo =\r\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\r\n      const inputShape = inputs[0].dims.slice();\r\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\r\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\r\n      }\r\n      if (axis < 0) {\r\n        axis = inputShape.length + axis;\r\n      }\r\n      // ensure all of the non-concatenated axes match each other\r\n      // calculate the shape of the output tensor while we do that\r\n      const outputShape = inputShape.slice(0);\r\n      for (let i = 1; i < inputs.length; i++) {\r\n        const dataNShape = inputs[i].dims.slice();\r\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\r\n          // add to the placeholder for computing output shape\r\n          if (axisIndex === axis) {\r\n            outputShape[axis] += dataNShape[axisIndex];\r\n          }\r\n          // ensure all non-cancatenated axes match each other\r\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\r\n            throw new Error('non concat dimensions must match');\r\n          }\r\n        }\r\n      }\r\n\r\n      const rank = outputShape.length;\r\n\r\n      const sizeInConcatAxis = new Array<number>(inputs.length);\r\n      let previousSum = 0;\r\n      for (let i = 0; i < sizeInConcatAxis.length; ++i) {\r\n        previousSum += inputs[i].dims[axis];\r\n        sizeInConcatAxis[i] = previousSum;\r\n      }\r\n\r\n      let getTextureIndexWhereDataResidesMethod = '';\r\n      // in most cases linear search is sufficient, as in most scenarios, only 2 tensors are concatenated\r\n      if (inputs.length < 5) {\r\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\r\n      } else {\r\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesBinarySearch(sizeInConcatAxis);\r\n      }\r\n\r\n      const fetchDataFromCorrectTextureMethod = getFetchDataFromCorrectTextureMethod(inputs.length, rank);\r\n      const getSizeInConcatAxisValueFromIndexMethod = getGetSizeInConcatAxisValueFromIndexMethod(sizeInConcatAxis);\r\n      const shaderSource = `\r\n        ${fetchDataFromCorrectTextureMethod}\r\n        ${getSizeInConcatAxisValueFromIndexMethod}\r\n        ${getTextureIndexWhereDataResidesMethod}\r\n        float process(int indices[${rank}]) {\r\n          int textureIndex = getTextureWhereDataResides (indices[${axis}]);\r\n\r\n          if(textureIndex != 0) {\r\n            indices[${axis}] = indices[${axis}] - int(getSizeInConcatAxisValueFromIndex(textureIndex-int(1)));\r\n          }\r\n\r\n          return fetchDataFromCorrectTexture(textureIndex, indices);\r\n        }`;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        shaderSource,\r\n      };\r\n    };\r\n\r\nconst createUnpackedConcatProgramInfoLoader =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\r\n      const metadata = createUnpackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\r\n      return {...metadata, get: () => createUnpackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\r\n    };\r\n\r\nconst getTextureIndexWhereDataResidesLinearSearch = (sizeInConcatAxis: number[]): string => {\r\n  const searchAxis = sizeInConcatAxis.map((size, i) => `if(index<${size}) {return ${i};}\r\n`);\r\n  return `int getTextureWhereDataResides(int index) {\r\n      ${searchAxis.join('')}\r\n    }`;\r\n};\r\n\r\n// TODO: Implement BinarySearch in GLSL\r\nconst getTextureIndexWhereDataResidesBinarySearch = (sizeInConcatAxis: number[]): string =>\r\n    getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\r\n\r\nconst getFetchDataFromCorrectTextureMethod = (numberOfTensors: number, tensorRank: number) => {\r\n  const codeLines: string[] = [`float fetchDataFromCorrectTexture(int textureIndex, int indices[${tensorRank}]) {`];\r\n  for (let i = 0; i < numberOfTensors; ++i) {\r\n    if (i === 0) {\r\n      codeLines.push(\r\n          '\\t' +\r\n          `if (textureIndex == ${i}) { return _X${i}(indices); }`);\r\n    } else if (i === numberOfTensors - 1) {\r\n      codeLines.push(\r\n          '\\t' +\r\n          `else { return _X${i}(indices); }`);\r\n    } else {\r\n      codeLines.push(\r\n          '\\t' +\r\n          `else if (textureIndex == ${i}) { return _X${i}(indices); }`);\r\n    }\r\n  }\r\n  codeLines.push(\r\n      '\\t' +\r\n      '}');\r\n  return codeLines.join('\\n');\r\n};\r\n\r\nconst getGetSizeInConcatAxisValueFromIndexMethod = (sizeInConcatAxis: number[]): string => {\r\n  const codeLines: string[] = ['int getSizeInConcatAxisValueFromIndex(int index) {'];\r\n  for (let i = 0; i < sizeInConcatAxis.length; ++i) {\r\n    if (i === 0) {\r\n      codeLines.push(\r\n          '\\t' +\r\n          `if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\r\n    } else if (i === sizeInConcatAxis.length - 1) {\r\n      codeLines.push(\r\n          '\\t' +\r\n          `else { return ${sizeInConcatAxis[i]}; }`);\r\n    } else {\r\n      codeLines.push(\r\n          '\\t' +\r\n          `else if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\r\n    }\r\n  }\r\n  codeLines.push(\r\n      '\\t' +\r\n      '}');\r\n\r\n  return codeLines.join('\\n');\r\n};\r\n\r\nexport const parseConcatAttributes: OperatorInitialization<ConcatAttributes> = (node: Graph.Node): ConcatAttributes =>\r\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis')});\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length < 1) {\r\n    throw new Error('too few inputs');\r\n  }\r\n\r\n  const inputType = inputs[0].type;\r\n  const inputDimensionality = inputs[0].dims.length;\r\n\r\n  // TODO: Support string concat\r\n  if (inputType === 'string') {\r\n    throw new Error('string tensor is not supported yet');\r\n  }\r\n\r\n  for (const input of inputs) {\r\n    // make sure types of all inputs match\r\n    if (input.type !== inputType) {\r\n      throw new Error('input tensors should be one type');\r\n    }\r\n\r\n    // make sure the dimensionality of all inputs are the same\r\n    if (input.dims.length !== inputDimensionality) {\r\n      throw new Error('input tensors should have the same shape');\r\n    }\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Logger} from '../../../instrument';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\nimport {calculateOutputShape, ConvAttributes} from './conv';\r\nimport {getActivationSnippet} from './fuse-utils';\r\n\r\nconst createUnpackedGroupedConvProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\r\n  name: 'GroupedConv',\r\n  inputNames: hasBias ? ['X', 'W', 'Bias'] : ['X', 'W'],\r\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\r\n                        [TextureType.unpacked, TextureType.unpacked],\r\n  cacheHint\r\n});\r\n\r\nconst createUnpackedGroupedConvProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\r\n     attributes: ConvAttributes): ProgramInfo => {\r\n      const hasBias = inputs.length > 2;\r\n      const processBias = hasBias ? 'value += getBias(output_channel);' : '';\r\n      const xShape = inputs[0].dims.slice();\r\n      const wShape = inputs[1].dims.slice();\r\n      const outputChannelsPerGroup = wShape[0] / attributes.group;\r\n      Logger.verbose(\r\n          'GroupedConv',\r\n          `autpPad:${attributes.autoPad}, dilations:${attributes.dilations}, group:${attributes.group}, kernelShape:${\r\n              attributes.kernelShape}, pads:${attributes.pads}, strides:${attributes.strides}`);\r\n      const outputShape =\r\n          calculateOutputShape(xShape, wShape, attributes.dilations, attributes.pads, attributes.strides);\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\r\n\r\n      const shaderSource = `\r\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\r\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\r\n  ${activationFunction}\r\n  void main() {\r\n    ivec4 coords = getOutputCoords();\r\n    int batch = coords.x;\r\n    int output_channel = coords.y;\r\n    ivec2 xRCCorner = coords.zw * strides - pads;\r\n    int group_id = output_channel / ${outputChannelsPerGroup};\r\n\r\n    float value = 0.0;\r\n    for (int wInChannel = 0; wInChannel < ${wShape[1]}; wInChannel++) {\r\n      int input_channel = group_id * ${wShape[1]} + wInChannel;\r\n      for (int wHeight = 0; wHeight < ${wShape[2]}; wHeight++) {\r\n        int xHeight = xRCCorner.x + wHeight * ${attributes.dilations[0]};\r\n\r\n        if (xHeight < 0 || xHeight >= ${xShape[2]}) {\r\n          continue;\r\n        }\r\n\r\n        for (int wWidth = 0; wWidth < ${wShape[3]}; wWidth++) {\r\n          int xWidth = xRCCorner.y + wWidth * ${attributes.dilations[1]};\r\n          if (xWidth < 0 || xWidth >= ${xShape[3]}) {\r\n            continue;\r\n          }\r\n\r\n          float xVal = getX(batch, input_channel, xWidth, xHeight);\r\n          float wVal = getW(output_channel, wInChannel, wWidth, wHeight);\r\n          value += xVal*wVal;\r\n        }\r\n      }\r\n    }\r\n    ${processBias}\r\n    ${applyActivation}\r\n    ${glsl.output} = vec4(value, .0, .0, .0);\r\n  }\r\n`;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        shaderSource,\r\n        hasMain: true,\r\n      };\r\n    };\r\n\r\nexport const createUnpackedGroupedConvProgramInfoLoader =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes):\r\n        ProgramInfoLoader => {\r\n          const metadata = createUnpackedGroupedConvProgramMetadata(inputs.length > 2, attributes.cacheKey);\r\n          return {\r\n            ...metadata,\r\n            get: () => createUnpackedGroupedConvProgramInfo(inferenceHandler, inputs, metadata, attributes)\r\n          };\r\n        };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nimport {calculateOutputShape, ConvAttributes} from './conv';\r\nimport {createPackedIm2ColProgramInfoLoader} from './im2col-pack';\r\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\r\n\r\nexport const conv2DPackedPointwise =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\r\n      const xshape = inputs[0].dims;\r\n      const kshape = inputs[1].dims;\r\n      const outputShape =\r\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\r\n      const reshapedX = inferenceHandler.reshapePacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\r\n      const reshapedK = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1]]);\r\n\r\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\r\n      const matmulOutput = inferenceHandler.run(\r\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\r\n      return inferenceHandler.reshapePacked(matmulOutput, outputShape);\r\n    };\r\n\r\nexport const conv2DPacked =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\r\n      const xshape = inputs[0].dims;\r\n      const kshape = inputs[1].dims;\r\n      const outputShape =\r\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\r\n\r\n      // run im2col\r\n      const im2colOutput = inferenceHandler.run(\r\n          createPackedIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes),\r\n          [inputs[0]]);\r\n\r\n      // reshape kernel\r\n      const kernelReshaped = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1] * kshape[2] * kshape[3]]);\r\n\r\n      // run matmul\r\n      const matmulInputs =\r\n          (inputs.length === 3) ? [kernelReshaped, im2colOutput, inputs[2]] : [kernelReshaped, im2colOutput];\r\n      const matmulOutput = inferenceHandler.run(\r\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\r\n\r\n      // reshape output\r\n      const outputReshaped = inferenceHandler.reshapePacked(matmulOutput, outputShape);\r\n      return outputReshaped;\r\n    };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {InferenceHandler} from '../../../backend';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\nimport {ConvAttributes} from './conv';\r\nimport {getActivationSnippet, parseInternalActivationAttributes} from './fuse-utils';\r\n\r\nconst computeTotalPad =\r\n    (inDim: number, stride: number, adj: number, kernel: number, dilation: number, outSize: number) =>\r\n        (inDim - 1) * stride + adj + (kernel - 1) * dilation + 1 - outSize;\r\n\r\nconst distributePadding = (totalPad: number, autoPad: string, pads: number[], head: number, tail: number) => {\r\n  const smallPad = Math.floor(totalPad / 2);\r\n  if (autoPad === 'SAME_UPPER') {\r\n    pads[head] = smallPad;\r\n    pads[tail] = totalPad - smallPad;\r\n  } else if (autoPad === 'SAME_LOWER') {\r\n    pads[head] = totalPad - smallPad;\r\n    pads[tail] = smallPad;\r\n  }\r\n};\r\n\r\nconst calculateOutputShapeAndPads =\r\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[], autoPad: string,\r\n     pads: number[], strides: readonly number[], outputPadding: readonly number[], outputShape: number[]) => {\r\n      const spatialRank = inputShape.length - 2;\r\n      const updateShape = outputShape.length === 0;\r\n      for (let i = 0; i < spatialRank; ++i) {\r\n        const outSize = updateShape ? inputShape[i + 2] * strides[i] : outputShape[i];\r\n        const totalPad = computeTotalPad(inputShape[i + 2], strides[i], pads[i], kernelShape[i], dilations[i], outSize);\r\n        distributePadding(totalPad, autoPad, pads, i, i + spatialRank);\r\n        if (updateShape) {\r\n          outputShape.push(\r\n              strides[i] * (inputShape[i + 2] - 1) + outputPadding[i] + (kernelShape[i] - 1) * dilations[i] + 1 -\r\n              pads[i] - pads[i + spatialRank]);\r\n        }\r\n      }\r\n    };\r\n\r\nexport interface ConvTransposeAttributes extends ConvAttributes {\r\n  readonly outputPadding: readonly number[];\r\n  readonly outputShape: readonly number[];\r\n}\r\n\r\nexport const convTranspose: OperatorImplementation<ConvTransposeAttributes> =\r\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\r\n      validateInputs(inputs, attributes);  // currently will fail if not convTranspose2D\r\n      return convTranspose2d(inferenceHandler, inputs, attributes);\r\n    };\r\n\r\nconst convTranspose2d: OperatorImplementation<ConvTransposeAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\r\n      const adjustedAttributes = getAdjustedConvTransposeAttributes(attributes, inputs);\r\n      return [convTranspose2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\r\n    };\r\n\r\nconst createConvTransposeProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\r\n  name: 'ConvTranspose',\r\n  inputNames: hasBias ? ['X', 'W', 'B'] : ['X', 'W'],\r\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\r\n                        [TextureType.unpacked, TextureType.unpacked],\r\n  cacheHint\r\n});\r\n\r\nconst createUnpackedConvTransposeProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\r\n     attributes: ConvTransposeAttributes): ProgramInfo => {\r\n      const hasBias = inputs.length > 2;\r\n      const valueInit = hasBias ? 'getB(output_channel)' : '0.0';\r\n      const xShape = inputs[0].dims;\r\n      const wShape = inputs[1].dims;\r\n      const outputChannelsPerGroup = wShape[1];\r\n      const inputChannelsPerGroup = wShape[0] / attributes.group;\r\n      const outputShape = [inputs[0].dims[0], inputs[1].dims[1] * attributes.group, ...attributes.outputShape];\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\r\n\r\n      const shaderSource = `\r\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\r\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\r\n  ${activationFunction}\r\n  void main() {\r\n    ivec4 coords = getOutputCoords();\r\n    int batch = coords.x;\r\n    int output_channel = coords.y;\r\n\r\n    ivec2 loc = coords.zw + pads;\r\n\r\n    int group_id = output_channel / ${outputChannelsPerGroup};\r\n    int wOutChannel = output_channel - group_id * ${outputChannelsPerGroup};\r\n\r\n    float value = ${valueInit};\r\n    for (int inChannelOffset = 0; inChannelOffset < ${inputChannelsPerGroup}; inChannelOffset++) {\r\n      int input_channel = group_id * ${inputChannelsPerGroup} + inChannelOffset;\r\n      for (int wWOff = 0; wWOff < ${wShape[2]}; wWOff++) {\r\n        for (int wHOff = 0; wHOff < ${wShape[3]}; wHOff++) {\r\n          ivec2 wOff = ivec2(wWOff * ${attributes.dilations[0]}, wHOff * ${attributes.dilations[1]});\r\n          ivec2 wLoc = loc - wOff;\r\n          ivec2 wLocIn = wLoc / strides;\r\n          if (\r\n            wLocIn * strides == wLoc &&\r\n            wLocIn.x >= 0 && wLocIn.x < ${xShape[2]} &&\r\n            wLocIn.y >= 0 && wLocIn.y < ${xShape[3]}\r\n          ) {\r\n            float xVal = getX(batch, input_channel, wLocIn.y, wLocIn.x);\r\n            float wVal = getW(input_channel, wOutChannel, wHOff, wWOff);\r\n            value += xVal * wVal;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    ${applyActivation}\r\n    ${glsl.output} = vec4(value, .0, .0, .0);\r\n  }\r\n`;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        shaderSource,\r\n        hasMain: true,\r\n      };\r\n    };\r\n\r\nconst createUnpackedConvTransposeProgramInfoLoader =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\r\n        ProgramInfoLoader => {\r\n          const metadata = createConvTransposeProgramMetadata(inputs.length > 2, attributes.cacheKey);\r\n          return {\r\n            ...metadata,\r\n            get: () => createUnpackedConvTransposeProgramInfo(inferenceHandler, inputs, metadata, attributes)\r\n          };\r\n        };\r\n\r\n\r\nconst convTranspose2DUnpacked =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\r\n        Tensor => {\r\n          const result = inferenceHandler.run(\r\n              createUnpackedConvTransposeProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\r\n          return result;\r\n        };\r\n\r\nconst getAdjustedConvTransposeAttributes = <T extends ConvTransposeAttributes>(attributes: T, inputs: Tensor[]): T => {\r\n  const kernelShape = attributes.kernelShape.slice();\r\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\r\n  if (attributes.kernelShape.length === 0) {\r\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\r\n      kernelShape.push(inputs[1].dims[i]);\r\n    }\r\n  }\r\n\r\n  const pads = attributes.pads.slice();\r\n  const outputShape = attributes.outputShape.slice();\r\n  const inputShape = inputs[0].dims;\r\n  // If outputShape is not specified in the attributes of this op, infer it from the parameters\r\n  // Similarly, automatically infer pads if not specified\r\n  calculateOutputShapeAndPads(\r\n      inputShape, kernelShape, attributes.dilations, attributes.autoPad, pads, attributes.strides,\r\n      attributes.outputPadding, outputShape);\r\n\r\n  // always return a new object so does not modify the original attributes\r\n  const newAttributes: T = Object.assign({}, attributes);\r\n  Object.assign(newAttributes, {kernelShape, pads, outputShape, cacheKey: attributes.cacheKey});\r\n  return newAttributes;\r\n};\r\n\r\nexport const parseConvTransposeAttributes: OperatorInitialization<ConvTransposeAttributes> =\r\n    (node: Graph.Node): ConvTransposeAttributes => {\r\n      const attributes = node.attributes;\r\n      const activationAttributes = parseInternalActivationAttributes(attributes);\r\n      // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\r\n      const autoPad = attributes.getString('auto_pad', 'NOTSET');\r\n      const dilations = attributes.getInts('dilations', [1, 1]);\r\n      const group = attributes.getInt('group', 1);\r\n      const kernelShape = attributes.getInts('kernel_shape', []);\r\n      const outputPadding = attributes.getInts('output_padding', [0, 0]);\r\n      const outputShape = attributes.getInts('output_shape', []);\r\n      const pads = attributes.getInts('pads', [0, 0, 0, 0]);\r\n      const strides = attributes.getInts('strides', [1, 1]);\r\n\r\n      return createAttributeWithCacheKey(\r\n          {autoPad, dilations, group, kernelShape, outputPadding, outputShape, pads, strides, ...activationAttributes});\r\n    };\r\n\r\nconst validateInputs = (inputs: Tensor[], attributes: ConvTransposeAttributes): void => {\r\n  // Refer to the below link for all input checks\r\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\r\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\r\n    throw new Error('Conv requires 2 or 3 inputs');\r\n  }\r\n\r\n  // TODO : Need to add support for multi-dimensional conv\r\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\r\n    throw new Error('currently only support 2-dimensional conv');\r\n  }\r\n\r\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\r\n  const dataChannel = inputs[0].dims[1];\r\n  const filterInChannel = inputs[1].dims[0];\r\n  if (dataChannel !== filterInChannel) {\r\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\r\n  }\r\n\r\n  const featureMaps = inputs[1].dims[1] * attributes.group;\r\n\r\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\r\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[2].dims[0] !== featureMaps)) {\r\n    throw new Error('invalid bias');\r\n  }\r\n\r\n  const spatialRank = inputs[0].dims.length - 2;\r\n  // wrong dilations dimension\r\n  if (attributes.dilations.length !== spatialRank) {\r\n    throw new Error(`dilations should be ${spatialRank}D`);\r\n  }\r\n\r\n  // Wrong strides dimension\r\n  if (attributes.strides.length !== spatialRank) {\r\n    throw new Error(`strides should be ${spatialRank}D`);\r\n  }\r\n\r\n  // Wrong pads dimension\r\n  if (attributes.pads.length !== spatialRank * 2) {\r\n    throw new Error(`pads should be ${spatialRank * 2}D`);\r\n  }\r\n\r\n  // Wrong output padding dimension\r\n  if (attributes.outputPadding.length !== spatialRank) {\r\n    throw new Error(`output_padding should be ${spatialRank}D`);\r\n  }\r\n\r\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\r\n  // (the first 2 dims are batch_size and channels)\r\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\r\n    throw new Error('invalid kernel shape');\r\n  }\r\n\r\n  // as with kernelShape, must have same number of spatial dims as input\r\n  if (attributes.outputShape.length !== 0 && attributes.outputShape.length !== inputs[0].dims.length - 2) {\r\n    throw new Error('invalid output shape');\r\n  }\r\n\r\n  // TODO : Need to add support for float64\r\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\r\n    throw new Error('ConvTranspose input(X,W) should be float tensor');\r\n  }\r\n\r\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\r\n    throw new Error('ConvTranspose input(bias) should be float tensor');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {InferenceHandler} from '../../../backend';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {PoolConvUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nimport {createUnpackedGroupedConvProgramInfoLoader} from './conv-grouped';\r\nimport {conv2DPacked} from './conv-pack';\r\nimport {createDotProductProgramInfoLoader} from './dot-product';\r\nimport {InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\r\nimport {createIm2ColProgramInfoLoader} from './im2col';\r\nimport {createMatmulProgramInfoLoader} from './matmul';\r\n\r\n\r\nexport const calculateOutputShape =\r\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[],\r\n     adjustPads: readonly number[], strides: readonly number[]): number[] => {\r\n      const batchSize = inputShape[0];\r\n      const inputSpatialShape = inputShape.slice(2);\r\n      const spatialRank = inputSpatialShape.length;\r\n      const outChannels = kernelShape[0];\r\n      const kernelSpatialShape = kernelShape.slice(2);\r\n      const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\r\n      const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\r\n      const outputSpatialShape =\r\n          inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\r\n      const outputShape = [batchSize, outChannels].concat(...outputSpatialShape);\r\n      return outputShape;\r\n    };\r\n\r\nexport interface ConvAttributes extends InternalActivationAttributes, AttributeWithCacheKey {\r\n  readonly autoPad: string;\r\n  readonly dilations: readonly number[];\r\n  readonly group: number;\r\n  readonly kernelShape: readonly number[];\r\n  readonly pads: readonly number[];\r\n  readonly strides: readonly number[];\r\n}\r\n\r\nexport const conv: OperatorImplementation<ConvAttributes> =\r\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\r\n      validateInputs(inputs, attributes);  // currently will fail if not conv2D\r\n      return conv2d(inferenceHandler, inputs, attributes);\r\n    };\r\n\r\nconst conv2d: OperatorImplementation<ConvAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\r\n      const adjustedAttributes = getAdjustedConvAttributes(attributes, inputs);\r\n      const packMode = inferenceHandler.session.pack;\r\n      const isPointwise = adjustedAttributes.kernelShape[0] === 1 && adjustedAttributes.kernelShape[1] === 1;\r\n      if (adjustedAttributes.group > 1) {\r\n        const result = inferenceHandler.run(\r\n            createUnpackedGroupedConvProgramInfoLoader(inferenceHandler, inputs, adjustedAttributes), inputs);\r\n        return [result];\r\n      } else if (isPointwise && packMode) {\r\n        return [conv2DUnpackedPointwise(inferenceHandler, inputs, adjustedAttributes)];\r\n      } else if (packMode && inputs[0].dims.length === 4 && inputs[0].dims[0] === 1 && !isPointwise) {\r\n        return [conv2DPacked(inferenceHandler, inputs, adjustedAttributes)];\r\n      } else {\r\n        return [conv2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\r\n      }\r\n    };\r\n\r\nconst conv2DUnpackedPointwise =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\r\n      const xshape = inputs[0].dims;\r\n      const kshape = inputs[1].dims;\r\n      const outputShape =\r\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\r\n      const reshapedX = inferenceHandler.reshapeUnpacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\r\n      const reshapedK = inferenceHandler.reshapeUnpacked(inputs[1], [kshape[0], kshape[1]]);\r\n\r\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\r\n      const matmulOutput = inferenceHandler.run(createMatmulProgramInfoLoader(matmulInputs, attributes), matmulInputs);\r\n      return inferenceHandler.reshapeUnpacked(matmulOutput, outputShape);\r\n    };\r\n\r\nconst conv2DUnpacked =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\r\n      const xshape = inputs[0].dims;\r\n      const kshape = inputs[1].dims;\r\n      const outputShape =\r\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\r\n      const xIm2Col = inferenceHandler.run(\r\n          createIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes), [inputs[0]]);\r\n\r\n      const dotProductInputs = inputs.length === 3 ? [xIm2Col, inputs[1], inputs[2]] : [xIm2Col, inputs[1]];\r\n      const output = inferenceHandler.run(\r\n          createDotProductProgramInfoLoader(inferenceHandler, inputs, outputShape, attributes), dotProductInputs);\r\n      return output;\r\n    };\r\n\r\nconst getAdjustedConvAttributes = <T extends ConvAttributes>(attributes: T, inputs: Tensor[]): T => {\r\n  const kernelShape = attributes.kernelShape.slice();\r\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\r\n  if (attributes.kernelShape.length === 0) {\r\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\r\n      kernelShape.push(inputs[1].dims[i]);\r\n    }\r\n  }\r\n  const pads = attributes.pads.slice();\r\n  PoolConvUtil.adjustPadsBasedOnAutoPad(\r\n      inputs[0].dims, attributes.strides, attributes.dilations, kernelShape, pads, attributes.autoPad);\r\n\r\n  // always return a new object so does not modify the original attributes\r\n  const newAttributes: T = Object.assign({}, attributes);\r\n  Object.assign(newAttributes, {kernelShape, pads, cacheKey: attributes.cacheKey});\r\n  return newAttributes;\r\n};\r\n\r\nexport const parseConvAttributes: OperatorInitialization<ConvAttributes> = (node: Graph.Node): ConvAttributes => {\r\n  const attributes = node.attributes;\r\n  const activationAttributes = parseInternalActivationAttributes(attributes);\r\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\r\n  const autoPad = attributes.getString('auto_pad', 'NOTSET');\r\n  const dilations = attributes.getInts('dilations', [1, 1]);\r\n  const group = attributes.getInt('group', 1);\r\n  const kernelShape = attributes.getInts('kernel_shape', []);\r\n  const pads = attributes.getInts('pads', [0, 0, 0, 0]);\r\n  const strides = attributes.getInts('strides', [1, 1]);\r\n\r\n  return createAttributeWithCacheKey({autoPad, dilations, group, kernelShape, pads, strides, ...activationAttributes});\r\n};\r\n\r\nconst validateInputs = (inputs: Tensor[], attributes: ConvAttributes): void => {\r\n  // Refer to the below link for all input checks\r\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\r\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\r\n    throw new Error('Conv requires 2 or 3 inputs');\r\n  }\r\n\r\n  // TODO : Need to add support for multi-dimensional conv\r\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\r\n    throw new Error('currently only support 2-dimensional conv');\r\n  }\r\n\r\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\r\n  const dataChannel = inputs[0].dims[1];\r\n  const filterInChannel = inputs[1].dims[1] * attributes.group;\r\n  if (dataChannel !== filterInChannel) {\r\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\r\n  }\r\n\r\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\r\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\r\n    throw new Error('invalid bias');\r\n  }\r\n\r\n  const spatialRank = inputs[0].dims.length - 2;\r\n  // wrong dilations dimension\r\n  if (attributes.dilations.length !== spatialRank) {\r\n    throw new Error(`dilations should be ${spatialRank}D`);\r\n  }\r\n\r\n  // Wrong strides dimension\r\n  if (attributes.strides.length !== spatialRank) {\r\n    throw new Error(`strides should be ${spatialRank}D`);\r\n  }\r\n\r\n  // Wrong pads dimension\r\n  if (attributes.pads.length !== spatialRank * 2) {\r\n    throw new Error(`pads should be ${spatialRank * 2}D`);\r\n  }\r\n\r\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\r\n  // (the first 2 dims are batch_size and channels)\r\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\r\n    throw new Error('invalid kernel shape');\r\n  }\r\n\r\n  // TODO : Need to add support for float64\r\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\r\n    throw new Error('Conv input(X,W) should be float tensor');\r\n  }\r\n\r\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\r\n    throw new Error('Conv input(bias) should be float tensor');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nimport {transpose, TransposeAttributes} from './transpose';\r\n\r\nexport interface DepthToSpaceAttributes {\r\n  mode: 'DCR'|'CRD';\r\n  blocksize: number;\r\n}\r\n\r\nexport const depthToSpace: OperatorImplementation<DepthToSpaceAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: DepthToSpaceAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const blocksize = attributes.blocksize;\r\n      const blocksizeSqr = blocksize * blocksize;\r\n      const transposePerm = attributes.mode === 'DCR' ? [0, 3, 4, 1, 5, 2] : [0, 1, 4, 2, 5, 3];\r\n      const firstReshapeShape = attributes.mode === 'DCR' ?\r\n          [\r\n            inputs[0].dims[0], blocksize, blocksize, inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2],\r\n            inputs[0].dims[3]\r\n          ] :\r\n          [\r\n            inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, blocksize, blocksize, inputs[0].dims[2],\r\n            inputs[0].dims[3]\r\n          ];\r\n\r\n      // const transpose = new WebGLTranspose();\r\n      // const attributes = new Attribute(undefined);\r\n      // attributes.set('perm', 'ints', transposePerm);\r\n      // transpose.initialize(attributes);\r\n\r\n      // First reshape\r\n      const firstReshapedTensor = inferenceHandler.reshapeUnpacked(inputs[0], firstReshapeShape);\r\n\r\n      // transpose\r\n      const transposeAttributes: TransposeAttributes = {perm: transposePerm, cacheKey: `${transposePerm}`};\r\n      const [transposeOutput] = transpose(inferenceHandler, [firstReshapedTensor], transposeAttributes);\r\n\r\n      // Second reshape\r\n      const secondReshapeShape = [\r\n        inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2] * blocksize,\r\n        inputs[0].dims[3] * blocksize\r\n      ];\r\n      const result = inferenceHandler.reshapeUnpacked(transposeOutput, secondReshapeShape);\r\n      return [result];\r\n    };\r\n\r\nexport const parseDepthToSpaceAttributes: OperatorInitialization<DepthToSpaceAttributes> =\r\n    (node: Graph.Node): DepthToSpaceAttributes => {\r\n      // processing node attributes\r\n      const blocksize = node.attributes.getInt('blocksize');\r\n      if (blocksize < 1) {\r\n        throw new Error(`blocksize must be >= 1, but got : ${blocksize} for DepthToSpace`);\r\n      }\r\n      const mode = node.attributes.getString('mode', 'DCR');\r\n      if (mode !== 'DCR' && mode !== 'CRD') {\r\n        throw new Error(`unrecognized mode: ${mode} for DepthToSpace`);\r\n      }\r\n      return {mode, blocksize};\r\n    };\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (inputs.length !== 1) {\r\n    throw new Error(`DepthToSpace expect 1 inputs, but got ${inputs.length}`);\r\n  }\r\n\r\n  // Input has to be a 4-D tensor\r\n  // TODO: Support string depth-to-space.\r\n  if (inputs[0].type === 'string' || inputs[0].dims.length !== 4) {\r\n    throw new TypeError('DepthToSpace input should be a 4-D numeric tensor');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\r\nimport {calculateIm2ColDims} from './im2col';\r\n\r\nconst createDotProductProgramMetadata = (hasBias: boolean, attributes: InternalActivationAttributes) => ({\r\n  name: 'ConvDotProduct',\r\n  inputNames: hasBias ? ['Im2Col', 'K', 'B'] : ['Im2Col', 'K'],\r\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked] :\r\n                        [TextureType.unpacked, TextureType.packedLastDimension],\r\n  cacheKey: attributes.activationCacheKey\r\n});\r\n\r\nconst createDotProductProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: readonly Tensor[],\r\n     outputShape: number[], attributes: InternalActivationAttributes): ProgramInfo => {\r\n      const xshape = inputs[0].dims;\r\n      const kshape = inputs[1].dims;\r\n      const adjustedKernelShape = [kshape[0], Math.ceil((xshape[1] * kshape[2] * kshape[3]) / 4)];\r\n      const im2colShape = calculateIm2ColDims(xshape, kshape, outputShape);\r\n      const [kWidth, kHeight] =\r\n          inferenceHandler.calculateTextureWidthAndHeight(adjustedKernelShape, TextureType.packedLastDimension);\r\n\r\n      const im2colStrides = ShapeUtil.computeStrides(im2colShape);\r\n      const [im2colWidth, im2colHeight] =\r\n          inferenceHandler.calculateTextureWidthAndHeight(im2colShape, TextureType.packedLastDimension);\r\n      const rank = outputShape.length;\r\n\r\n      const initValue = (inputs.length < 3) ? '0.0' : '_B(b)';\r\n      const sharedDim = Math.ceil(xshape[1] * kshape[2] * kshape[3] / 4);\r\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const shaderSource = `\r\n${activationFunction}\r\nfloat process(int indices[${rank}]) {\r\n  int b[1];\r\n  b[0] = indices[1];\r\n  int im2col[4];\r\n  im2col[0] = indices[0];\r\n  im2col[1] = indices[2];\r\n  im2col[2] = indices[3];\r\n  int im2colOffset = im2col[0] * ${im2colStrides[0]} + im2col[1] * ${im2colStrides[1]} + im2col[2] * ${\r\n          im2colStrides[2]};\r\n  int kernelOffset = indices[1] * ${adjustedKernelShape[1]};\r\n  float value = ${initValue};\r\n  for (int i = 0; i < ${sharedDim}; ++i) {\r\n    vec2 im2colCoords = offsetToCoords(im2colOffset, ${im2colWidth}, ${im2colHeight});\r\n    vec2 kernelCoords = offsetToCoords(kernelOffset, ${kWidth}, ${kHeight});\r\n    value += dot(${glsl.texture2D}(Im2Col, im2colCoords), ${glsl.texture2D}(K, kernelCoords));\r\n    ++im2colOffset;\r\n    ++kernelOffset;\r\n  }\r\n  ${applyActivation}\r\n  return value;\r\n}`;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nexport const createDotProductProgramInfoLoader =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], outputShape: number[],\r\n     attributes: InternalActivationAttributes): ProgramInfoLoader => {\r\n      const metadata = createDotProductProgramMetadata(inputs.length > 2, attributes);\r\n      return {\r\n        ...metadata,\r\n        get: () => createDotProductProgramInfo(inferenceHandler, metadata, inputs, outputShape, attributes)\r\n      };\r\n    };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nexport const flatten: OperatorImplementation<number> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number): Tensor[] => {\r\n      validateInputs(inputs, axis);\r\n\r\n      const outputDims = ShapeUtil.flattenShape(inputs[0].dims, axis);\r\n      return [inferenceHandler.reshapeUnpacked(inputs[0], outputDims)];\r\n    };\r\n\r\nexport const parseFlattenAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\r\n    node.attributes.getInt('axis', 1);  // default axis is 1\r\n\r\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Flatten requires 1 input.');\r\n  }\r\n\r\n  const r = inputs[0].dims.length;\r\n  if (r === 0) {\r\n    throw new Error('scalar tensor is not supported.');\r\n  }\r\n\r\n  if (axis < -r || axis > r) {\r\n    throw new Error('Invalid axis');\r\n  }\r\n\r\n  // TODO: Support string type\r\n  if (inputs[0].type === 'string') {\r\n    throw new Error('string tensor is not supported.');\r\n  }\r\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../../../attribute';\r\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\r\nimport {GlslValueFunction} from '../glsl-definitions';\r\n\r\nimport {glslClip, glslRelu, glslSigmoid} from './unary-op';\r\n\r\nexport interface InternalActivationAttributes {\r\n  readonly activation: string;\r\n  readonly clipMin?: number;\r\n  readonly clipMax?: number;\r\n  readonly activationCacheKey: string;\r\n}\r\n\r\nexport function getActivationSnippet(attributes: InternalActivationAttributes) {\r\n  let func: GlslValueFunction;\r\n  switch (attributes.activation) {\r\n    case 'Relu':\r\n      func = glslRelu();\r\n      break;\r\n    case 'Sigmoid':\r\n      func = glslSigmoid();\r\n      break;\r\n    case 'Clip':\r\n      func = glslClip(attributes.clipMin!, attributes.clipMax!);\r\n      break;\r\n    // TODO: adding other activations that can be fused.\r\n    default:\r\n      return {activationFunction: '', applyActivation: ''};\r\n  }\r\n\r\n  const activationName = func.name;\r\n  const activationFunction = func.body;\r\n  const applyActivation = `value = ${activationName}_(value);`;\r\n  return {activationFunction, applyActivation};\r\n}\r\n\r\nexport const parseInternalActivationAttributes = (attributes: Attribute): InternalActivationAttributes => {\r\n  const activation = attributes.getString('activation', '');\r\n\r\n  if (activation === 'Clip') {\r\n    const [clipMin, clipMax] = attributes.getFloats('activation_params', [MIN_CLIP, MAX_CLIP]);\r\n    return {activation, clipMax, clipMin, activationCacheKey: `${activation}:${clipMin},${clipMax}`};\r\n  }\r\n  return {activation, activationCacheKey: activation};\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\ninterface GatherAttributes extends AttributeWithCacheKey {\r\n  readonly axis: number;\r\n}\r\n\r\nexport const gather: OperatorImplementation<GatherAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): Tensor[] => {\r\n      validateInputs(inputs, attributes.axis);\r\n      const output = inferenceHandler.run(createGatherProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseGatherAttributes: OperatorInitialization<GatherAttributes> = (node: Graph.Node): GatherAttributes =>\r\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 0)});\r\n\r\nconst gatherProgramMetadata = {\r\n  name: 'Gather',\r\n  inputNames: ['A', 'B'],\r\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\r\n};\r\n\r\nconst createGatherProgramInfo =\r\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\r\n      const inputShape = inputs[0].dims.slice();\r\n      const indexDataShape = inputs[1].dims.slice();\r\n      const outputShape = new Array(inputShape.length + indexDataShape.length - 1);\r\n\r\n      axis = ShapeUtil.normalizeAxis(axis, inputShape.length);\r\n      const indexCopyOps: string[] = [];\r\n      for (let i = 0; i < outputShape.length; i++) {\r\n        // outputShape is divided into three parts: A, B, C\r\n        // |0        axis|  axis + indexDataShape.length |          end|\r\n        // |     A       |             B                 |      C      |\r\n        //\r\n        // inputIdx: [A, inputs[1][B], C]\r\n        if (i < axis) {  // A\r\n          outputShape[i] = inputShape[i];\r\n          indexCopyOps.push(`inputIdx[${i}] = outputIdx[${i}];`);\r\n        } else {\r\n          if (i < axis + indexDataShape.length) {  // B\r\n            outputShape[i] = indexDataShape[i - axis];\r\n            indexCopyOps.push(`indexDataIdx[${i - axis}] = outputIdx[${i}];`);\r\n          } else {                                                       // C\r\n            outputShape[i] = inputShape[i - indexDataShape.length + 1];  // skip 1 for axis\r\n            indexCopyOps.push(`inputIdx[${i - indexDataShape.length + 1}] = outputIdx[${i}];`);\r\n          }\r\n        }\r\n      }\r\n\r\n      const orank = outputShape.length || 1;\r\n      const irank = inputShape.length;\r\n      const iDrank = indexDataShape.length || 1;\r\n      const shaderSource = `\r\n      float process(int outputIdx[${orank}]) {\r\n        int inputIdx[${irank}];\r\n        int indexDataIdx[${iDrank}];\r\n        indexDataIdx[0] = 0;\r\n        ${indexCopyOps.join('\\n        ')}\r\n        int idx = int(_B(indexDataIdx));\r\n        inputIdx[${axis}] = idx < 0 ? idx + ${inputShape[axis]} : idx;\r\n        return _A(inputIdx);\r\n      }`;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst createGatherProgramInfoLoader =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): ProgramInfoLoader => {\r\n      const metadata = {...gatherProgramMetadata, cacheHint: attributes.cacheKey};\r\n      return {...metadata, get: () => createGatherProgramInfo(handler, metadata, inputs, attributes.axis)};\r\n    };\r\n\r\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\r\n  if (!inputs || inputs.length !== 2) {\r\n    throw new Error('Gather requires 2 inputs.');\r\n  }\r\n  const tensorRank = inputs[0].dims.length;\r\n  if (tensorRank < 1) {\r\n    throw new Error('Invalid input shape.');\r\n  }\r\n  if (axis < -tensorRank || axis > tensorRank - 1) {\r\n    throw new Error('Invalid axis.');\r\n  }\r\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\r\n    throw new Error('Invaid input type.');\r\n  }\r\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\r\n    throw new Error('Invaid input type.');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {GemmUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\nexport interface GemmAttributes extends AttributeWithCacheKey {\r\n  transA: boolean;\r\n  transB: boolean;\r\n  alpha: number;\r\n  beta: number;\r\n  isOptionalC: boolean;  // in opset 11, C becomes optional\r\n}\r\n\r\nexport const gemm: OperatorImplementation<GemmAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GemmAttributes): Tensor[] => {\r\n      validateInputs(inputs, attributes);\r\n      const output = inferenceHandler.run(createGemmProgramInfoLoader(inputs, attributes), inputs);\r\n      return [output];\r\n    };\r\n\r\nconst parseGemmAttributes = (node: Graph.Node, isOptionalC: boolean): GemmAttributes => {\r\n  const transA = node.attributes.getInt('transA', 0) !== 0;\r\n  const transB = node.attributes.getInt('transB', 0) !== 0;\r\n  const alpha = node.attributes.getFloat('alpha', 1.0);\r\n  const beta = node.attributes.getFloat('beta', 1.0);\r\n  return createAttributeWithCacheKey({transA, transB, alpha, beta, isOptionalC});\r\n};\r\n\r\nexport const parseGemmAttributesV7: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\r\n    parseGemmAttributes(node, false);\r\n\r\nexport const parseGemmAttributesV11: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\r\n    parseGemmAttributes(node, true);\r\n\r\nconst createGemmProgramInfoLoader = (inputs: Tensor[], attributes: GemmAttributes): ProgramInfoLoader => {\r\n  const metadata = {\r\n    name: 'Gemm',\r\n    inputNames: inputs.length === 3 ? ['A', 'B', 'C'] : ['A', 'B'],\r\n    inputTypes: inputs.length === 3 ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\r\n                                      [TextureType.unpacked, TextureType.unpacked],\r\n    key: attributes.cacheKey\r\n  };\r\n\r\n  return {...metadata, get: () => createGemmProgramInfo(metadata, inputs, attributes)};\r\n};\r\n\r\nconst createGemmProgramInfo =\r\n    (metadata: ProgramMetadata, inputs: Tensor[], attributes: GemmAttributes): ProgramInfo => {\r\n      const aShape = inputs[0].dims.slice();\r\n      const bShape = inputs[1].dims.slice();\r\n      const [M, N] = GemmUtil.getShapeOfGemmResult(\r\n          aShape, attributes.transA, bShape, attributes.transB, inputs.length === 3 ? inputs[2].dims : undefined);\r\n      const outputShape = [M, N];\r\n      if (!outputShape) {\r\n        throw new Error('Can\\'t use gemm on the given tensors');\r\n      }\r\n      let sharedDim = aShape[aShape.length - 1];\r\n      let line = '';\r\n      if (attributes.transA) {\r\n        sharedDim = aShape[0];\r\n      }\r\n      if (attributes.transA && attributes.transB) {\r\n        line = 'value += _A_T(a) * _B_T(b);';\r\n      } else if (attributes.transA && !attributes.transB) {\r\n        line = 'value += _A_T(a) * _B(b);';\r\n      } else if (!attributes.transA && attributes.transB) {\r\n        line = 'value += _A(a) * _B_T(b);';\r\n      } else if (!attributes.transA && !attributes.transB) {\r\n        line = 'value += _A(a) * _B(b);';\r\n      }\r\n      const rank = outputShape.length;\r\n      const declareC = inputs.length === 3 ? `int c[${inputs[2].dims.length}];` : '';\r\n      const broadcastC = inputs.length === 3 ? 'bcastIndices_C(indices, c);' : '';\r\n      const calculateC = inputs.length === 3 ? 'value += beta * _C(c);' : '';\r\n      const shaderSource = `\r\n      float process(int indices[${rank}]) {\r\n          int a[${rank}];\r\n          int b[${rank}];\r\n          ${declareC}\r\n\r\n          copyVec(indices, a);\r\n          copyVec(indices, b);\r\n          ${broadcastC}\r\n\r\n          float value = 0.0;\r\n          for (int k=0; k<${sharedDim}; ++k) {\r\n              a[${rank - 1}] = k;\r\n              b[${rank - 2}] = k;\r\n              ${line}\r\n          }\r\n\r\n          value = value * alpha;\r\n          ${calculateC}\r\n          return value;\r\n      }`;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        variables: [\r\n          {name: 'alpha', type: 'float', data: attributes.alpha}, {name: 'beta', type: 'float', data: attributes.beta}\r\n        ],\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst validateInputs = (inputs: Tensor[], attributes: GemmAttributes): void => {\r\n  if (!inputs) {\r\n    throw new Error('Input is missing');\r\n  }\r\n  if (attributes.isOptionalC && (inputs.length < 2 || inputs.length > 3)) {\r\n    throw new Error('Invaid input shape.');\r\n  }\r\n  if (!attributes.isOptionalC && inputs.length !== 3) {\r\n    throw new Error('Gemm requires 3 inputs');\r\n  }\r\n\r\n  // 'C' can be of dimensionality 1 or 2 only\r\n  if (inputs.length === 3 && inputs[2].dims.length !== 1 && inputs[2].dims.length !== 2) {\r\n    throw new Error('Invalid input shape of C');\r\n  }\r\n\r\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\r\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') ||\r\n      (inputs.length === 3 && inputs[2].type !== 'float32' && inputs[2].type !== 'float64')) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n\r\n  if ((inputs[0].type !== inputs[1].type) || (inputs.length === 3 && inputs[0].type !== inputs[2].type)) {\r\n    throw new Error('Input types are mismatched');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\nimport {ConvAttributes} from './conv';\r\nimport {unpackFromChannel} from './packing-utils';\r\n\r\nconst createPackedIm2ColProgramMetadata = (cacheHint: string) => ({\r\n  name: 'Im2Col (packed)',\r\n  inputNames: ['A'],\r\n  inputTypes: [TextureType.packed],\r\n  cacheHint,\r\n});\r\n\r\nconst createPackedIm2ColProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\r\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\r\n      const xshape = x.dims;\r\n      const wshape = w.dims;\r\n      const rowDim = 2;\r\n      const colDim = 3;\r\n      const rank = outputShape.length;\r\n      const im2colShape = [wshape[1] * wshape[2] * wshape[3], outputShape[2] * outputShape[3]];\r\n      const kernelSize = wshape[2] * wshape[3];\r\n      const unpackChannel = unpackFromChannel();\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      let unrolled = '';\r\n\r\n      for (let row = 0; row <= 1; row++) {\r\n        for (let col = 0; col <= 1; col++) {\r\n          unrolled += `\r\n            blockIndex = rc.x + ${col};\r\n            pos = rc.y + ${row};\r\n\r\n            if(blockIndex < ${im2colShape[1]} && pos < ${im2colShape[0]}) {\r\n              offsetY = int(blockIndex / (${outputShape[rank - 1]})) * ${attributes.strides[0]} -\r\n                ${attributes.pads[0]};\r\n              d0 = offsetY + ${attributes.dilations[0]} * (imod(pos, ${kernelSize}) / ${wshape[2]});\r\n\r\n              if(d0 < ${xshape[rowDim]} && d0 >= 0) {\r\n                offsetX = imod(blockIndex, ${outputShape[rank - 1]}) * ${attributes.strides[1]} -\r\n                  ${attributes.pads[1]};\r\n                d1 = offsetX + ${attributes.dilations[1]} * imod(imod(pos, ${kernelSize}), ${wshape[2]});\r\n\r\n                if(d1 < ${xshape[colDim]} && d1 >= 0) {\r\n\r\n                  ch = int(float(pos)/ ${kernelSize}.);\r\n                    innerDims = vec2(d0, d1);\r\n                    result[${row * 2 + col}] = getChannel(\r\n                      getA(0, ch, int(innerDims.x),\r\n                      int(innerDims.y)), innerDims);\r\n                }\r\n              }\r\n            }\r\n\r\n          `;\r\n        }\r\n      }\r\n\r\n      const shaderSource = `\r\n      ${unpackChannel}\r\n\r\n      void main() {\r\n        ivec2 rc = getOutputCoords();\r\n          vec4 result = vec4(0.0);\r\n          int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\r\n          vec2 innerDims;\r\n          ${unrolled}\r\n          ${glsl.output} = result;\r\n      }\r\n            `;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: im2colShape, type: x.type, textureType: TextureType.packed},\r\n        shaderSource,\r\n        hasMain: true\r\n      };\r\n    };\r\n\r\nexport const createPackedIm2ColProgramInfoLoader =\r\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\r\n     attributes: ConvAttributes): ProgramInfoLoader => {\r\n      const metadata = createPackedIm2ColProgramMetadata(attributes.cacheKey);\r\n      return {\r\n        ...metadata,\r\n        get: () => createPackedIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\r\n      };\r\n    };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\nimport {ConvAttributes} from './conv';\r\n\r\nconst createIm2ColProgramMetadata = (cacheHint: string) => ({\r\n  name: 'Im2Col',\r\n  inputNames: ['X'],\r\n  inputTypes: [TextureType.unpacked],\r\n  cacheHint,\r\n});\r\n\r\nconst createIm2ColProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\r\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\r\n      const xshape = x.dims;\r\n      const wshape = w.dims;\r\n\r\n      const rank = outputShape.length;\r\n      const im2colDims = calculateIm2ColDims(xshape, wshape, outputShape, 4);\r\n\r\n      const shaderSource = `\r\n        const int XC = ${xshape[1]};\r\n        const int XH = ${xshape[2]};\r\n        const int XW = ${xshape[3]};\r\n        const int KH = ${attributes.kernelShape[0]};\r\n        const int KW = ${attributes.kernelShape[1]};\r\n        const int dilationH = ${attributes.dilations[0]};\r\n        const int dilationW = ${attributes.dilations[1]};\r\n        const int strideH = ${attributes.strides[0]};\r\n        const int strideW = ${attributes.strides[1]};\r\n        const int padH = ${attributes.pads[0]};\r\n        const int padW = ${attributes.pads[1]};\r\n        const int KHKW = KH*KW;\r\n        const int XCKHKW = XC * KHKW;\r\n        const int outputChannels = 4;\r\n        vec4 process(int indices[${rank}]) {\r\n          int b  = indices[0]; // batch size\r\n          int oh = indices[1] * strideH - padH; //output height\r\n          int ow = indices[2] * strideW - padW; //output width\r\n          int p = indices[3] * outputChannels; //patch\r\n          vec4 value = vec4(0.0);\r\n          for(int i=0; i < outputChannels; ++i) {\r\n            if(p < XCKHKW) {\r\n              int patchC = p / KHKW;\r\n              int patchH = (p - patchC*KHKW) / KW;\r\n              int patchW = (p - patchC*KHKW) - patchH * KW;\r\n              int xh2 = oh + patchH * dilationH;\r\n              int xw2 = ow + patchW * dilationW;\r\n              int x[${xshape.length}];\r\n              x[0] = b;\r\n              x[1] = patchC;\r\n              x[2] = xh2;\r\n              x[3] = xw2;\r\n              if(xh2 >= 0 &&\r\n                  xh2 < XH &&\r\n                  xw2 >= 0 &&\r\n                  xw2 < XW) {\r\n                value[i] = _X(x);\r\n              }\r\n            }\r\n            ++p;\r\n          }\r\n          return value;\r\n        }\r\n        `;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: im2colDims, type: x.type, textureType: TextureType.packedLastDimension},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nexport const createIm2ColProgramInfoLoader =\r\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\r\n     attributes: ConvAttributes): ProgramInfoLoader => {\r\n      const metadata = createIm2ColProgramMetadata(attributes.cacheKey);\r\n      return {\r\n        ...metadata,\r\n        get: () => createIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\r\n      };\r\n    };\r\n\r\n\r\nexport const calculateIm2ColDims =\r\n    (inputShape: readonly number[], kernelShape: readonly number[], outputShape: readonly number[], channels = 4):\r\n        number[] =>\r\n            [outputShape[0], outputShape[2], outputShape[3],\r\n             Math.ceil(inputShape[1] * kernelShape[2] * kernelShape[3] / channels)];\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\nexport interface ImageScalerAttributes extends AttributeWithCacheKey {\r\n  scale: number;\r\n  bias: number[];\r\n}\r\n\r\nexport const imageScaler: OperatorImplementation<ImageScalerAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const output =\r\n          inferenceHandler.run(createImageScalerProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseImageScalerAttributes: OperatorInitialization<ImageScalerAttributes> =\r\n    (node: Graph.Node): ImageScalerAttributes => {\r\n      const scale = node.attributes.getFloat('scale');\r\n      const bias = node.attributes.getFloats('bias');\r\n      return createAttributeWithCacheKey({scale, bias});\r\n    };\r\n\r\nconst imageScalerProgramMetadata = {\r\n  name: 'ImageScaler',\r\n  inputNames: ['X'],\r\n  inputTypes: [TextureType.unpacked],\r\n};\r\n\r\nconst createImageScalerProgramInfo =\r\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], attributes: ImageScalerAttributes):\r\n        ProgramInfo => {\r\n          const outputShape = inputs[0].dims.slice();\r\n          const rank = outputShape.length;\r\n          const getBiasMethod = createGetBiasMethod(attributes.bias.length);\r\n          const shaderSource = `\r\n      ${getBiasMethod}\r\n      float process(int indices[${rank}]) {\r\n        return _X(indices) * scale + getBias(bias, indices[1]);\r\n      }`;\r\n          return {\r\n            ...metadata,\r\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n            variables: [\r\n              {name: 'bias', type: 'float', arrayLength: attributes.bias.length, data: attributes.bias},\r\n              {name: 'scale', type: 'float', data: attributes.scale}\r\n            ],\r\n            shaderSource\r\n          };\r\n        };\r\n\r\nconst createImageScalerProgramInfoLoader =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): ProgramInfoLoader => {\r\n      const metadata = {...imageScalerProgramMetadata, cacheHint: attributes.cacheKey};\r\n      return {...metadata, get: () => createImageScalerProgramInfo(handler, metadata, inputs, attributes)};\r\n    };\r\n\r\nconst createGetBiasMethod = (numChannels: number): string => {\r\n  const codeLines: string[] = [`float getBias(float bias[${numChannels}], int channel) {`];\r\n  for (let i = 0; i < numChannels; ++i) {\r\n    if (i === 0) {\r\n      codeLines.push(\r\n          '\\t' +\r\n          `if (channel == ${i}) { return bias[${i}]; }`);\r\n    } else if (i === numChannels - 1) {\r\n      codeLines.push(\r\n          '\\t' +\r\n          `else { return bias[${i}]; }`);\r\n    } else {\r\n      codeLines.push(\r\n          '\\t' +\r\n          `else if (channel == ${i}) { return bias[${i}]; }`);\r\n    }\r\n  }\r\n  codeLines.push(\r\n      '\\t' +\r\n      '}');\r\n  return codeLines.join('\\n');\r\n};\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('ImageScaler requires 1 input.');\r\n  }\r\n  if (inputs[0].dims.length !== 4) {\r\n    throw new Error('Invalid input shape.');\r\n  }\r\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\nexport const instanceNormalization: OperatorImplementation<number> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], epsilon: number): Tensor[] => {\r\n      validateInputs(inputs);\r\n\r\n      const meanAndVariance = inferenceHandler.run(createMeanAndVarianceProgramInfoLoader(inputs[0]), inputs);\r\n      const output = inferenceHandler.run(\r\n          createComputeOutputProgramInfoLoader(inferenceHandler, inputs[0], epsilon, meanAndVariance.dims),\r\n          [inputs[0], meanAndVariance, inputs[1], inputs[2]]);\r\n      return [output];\r\n    };\r\n\r\nexport const parseInstanceNormalizationAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\r\n    node.attributes.getFloat('epsilon', 1e-5);\r\n\r\nconst meanAndVarianceProgramMetadata = {\r\n  name: 'InstanceNormalization_MeanAndVariance',\r\n  inputNames: ['X'],\r\n  inputTypes: [TextureType.unpacked],\r\n};\r\n\r\nconst createMeanAndVarianceProgramInfo = (metadata: ProgramMetadata, input: Tensor): ProgramInfo => {\r\n  const xDims = input.dims.slice();\r\n  const channel = xDims[1];\r\n  const channelSize = xDims[2] * xDims[3];\r\n  const outputShape = [xDims[0], channel];\r\n\r\n  const shaderSource = `\r\n      vec4 process(int[2] indices) {\r\n        vec4 v = vec4(0.0);\r\n        int a[4];\r\n        a[0] = indices[0];\r\n        a[1] = indices[1];\r\n        float temp = 0.0;\r\n        for(int a2=0; a2<${xDims[2]}; a2++) {\r\n          a[2] = a2;\r\n          for(int a3=0; a3<${xDims[3]}; a3++) {\r\n            a[3] = a3;\r\n            float x = _X(a);\r\n            temp += x;\r\n          }\r\n        }\r\n        float mean = temp / float(${channelSize});\r\n        temp = 0.0;\r\n        for(int a2=0; a2<${xDims[2]}; a2++) {\r\n          a[2] = a2;\r\n          for(int a3=0; a3<${xDims[3]}; a3++) {\r\n            a[3] = a3;\r\n            float x = _X(a);\r\n            temp += (x - mean) * (x - mean);\r\n          }\r\n        }\r\n        v.r = mean;\r\n        v.g = temp / float(${channelSize});\r\n\r\n        return v;\r\n      }`;\r\n  return {\r\n    ...metadata,\r\n    output: {dims: outputShape, type: input.type, textureType: TextureType.packedLastDimension},\r\n    shaderSource\r\n  };\r\n};\r\n\r\nconst createMeanAndVarianceProgramInfoLoader = (input: Tensor): ProgramInfoLoader => ({\r\n  ...meanAndVarianceProgramMetadata,\r\n  get: () => createMeanAndVarianceProgramInfo(meanAndVarianceProgramMetadata, input)\r\n});\r\n\r\nconst computeOutputProgramMetadata = {\r\n  name: 'InstanceNormalization_ComputeOutput',\r\n  inputNames: ['X', 'MeanAndVariance', 'Scale', 'B'],\r\n  inputTypes: [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked, TextureType.unpacked],\r\n};\r\n\r\nconst createComputeOutputProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, epsilon: number,\r\n     meanAndVarianceShape: readonly number[]): ProgramInfo => {\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const [textureWidth, textureHeight] =\r\n          inferenceHandler.calculateTextureWidthAndHeight(meanAndVarianceShape, TextureType.packedLastDimension);\r\n      const [meanAndVarianceWidth, meanAndVarianceHeight] = [textureWidth / 4, textureHeight];\r\n      const shaderSource = `\r\n      vec4 get_MeanAndVariance(int[2] mv) {\r\n        int offset = indicesToOffset_MeanAndVariance(mv);\r\n        vec2 coords = offsetToCoords(offset, ${meanAndVarianceWidth}, ${meanAndVarianceHeight});\r\n        return ${glsl.texture2D}(MeanAndVariance, coords);\r\n      }\r\n\r\n      float process(int[4] indices) {\r\n        int mv[2];\r\n        mv[0] = indices[0];\r\n        mv[1] = indices[1];\r\n        vec4 mean_and_variance = get_MeanAndVariance(mv);\r\n        float mean = mean_and_variance.r;\r\n        float variance = mean_and_variance.g;\r\n\r\n        int sb[1];\r\n        sb[0] = indices[1];\r\n        float scale = _Scale(sb);\r\n        float b = _B(sb);\r\n\r\n        return scale * (_X(indices) - mean) / sqrt(variance + epsilon) + b;\r\n      }`;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\r\n        variables: [{name: 'epsilon', type: 'float', data: epsilon}],\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst createComputeOutputProgramInfoLoader =\r\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, epsilon: number, meanAndVarianceShape: readonly number[]):\r\n        ProgramInfoLoader => {\r\n          const metadata = {...computeOutputProgramMetadata, cacheHint: `${epsilon}`};\r\n          return {\r\n            ...metadata,\r\n            get: () => createComputeOutputProgramInfo(inferenceHandler, metadata, input, epsilon, meanAndVarianceShape)\r\n          };\r\n        };\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 3) {\r\n    throw new Error('InstanceNormalization requires 3 inputs.');\r\n  }\r\n\r\n  const X = inputs[0];\r\n  const scale = inputs[1];\r\n  const B = inputs[2];\r\n\r\n  // input should at least have three dimensions - N,C,dim1,...,dimn\r\n  // other inputs can have only one dimensions\r\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1) {\r\n    throw new Error('Invalid input shape.');\r\n  }\r\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1]) {\r\n    throw new Error('Input shapes are mismatched.');\r\n  }\r\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\r\n      (B.type !== 'float32' && B.type !== 'float64')) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n  if (inputs[0].dims.length !== 4) {\r\n    throw new Error('Only support 4-D input shape.');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\r\n\r\nexport interface LrnAttributes extends AttributeWithCacheKey {\r\n  alpha: number;\r\n  beta: number;\r\n  bias: number;\r\n  size: number;\r\n}\r\n\r\nexport const lrn: OperatorImplementation<LrnAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: LrnAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n\r\n      // if (inferenceHandler.session.pack) {\r\n      //   return [inferenceHandler.run(createPackedLrnProgramInfoLoader(inferenceHandler, inputs, attributes),\r\n      //   inputs)];\r\n      // } else {\r\n      return [inferenceHandler.run(createLrnProgramInfoLoader(inputs, attributes), inputs)];\r\n      //}\r\n    };\r\n\r\nexport const parseLrnAttributes: OperatorInitialization<LrnAttributes> = (node: Graph.Node): LrnAttributes => {\r\n  const alpha = node.attributes.getFloat('alpha', 0.0001);\r\n  const beta = node.attributes.getFloat('beta', 0.75);\r\n  const bias = node.attributes.getFloat('bias', 1.0);\r\n  const size = node.attributes.getInt('size');\r\n\r\n  return createAttributeWithCacheKey({alpha, beta, bias, size});\r\n};\r\n\r\nconst lrnProgramMetadata = {\r\n  name: 'LRN',\r\n  inputNames: ['X'],\r\n  inputTypes: [TextureType.unpacked]\r\n};\r\n\r\nfunction createLrnProgramInfo(inputs: Tensor[], attributes: LrnAttributes): ProgramInfo {\r\n  const C = inputs[0].dims[1];\r\n  const rank = inputs[0].dims.length;\r\n  const from = -Math.floor((attributes.size - 1) / 2);\r\n  const to = Math.ceil((attributes.size - 1) / 2);\r\n  const alpha = `float(${attributes.alpha}) / float(${attributes.size})`;\r\n  const bias = `float(${attributes.bias})`;\r\n  const beta = `float(${attributes.beta})`;\r\n\r\n  const shaderSource = `\r\n    float process(int indices[${rank}]) {\r\n        int c = indices[1];\r\n        float x = _X(indices);\r\n        float square_sum = 0.0;\r\n\r\n        for (int i = ${from}; i <= ${to}; i++) {\r\n          int idx = c + i;\r\n          if (c >= 0 && c < ${C}) {\r\n            indices[1] = idx;\r\n            float j = _X(indices);\r\n            square_sum += j * j;\r\n          }\r\n        }\r\n        return x / pow(${bias} + ${alpha} * square_sum, ${beta});\r\n    }`;\r\n  return {\r\n    ...lrnProgramMetadata,\r\n    cacheHint: attributes.cacheKey,\r\n    output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\r\n    shaderSource,\r\n  };\r\n}\r\n\r\nexport function createLrnProgramInfoLoader(inputs: Tensor[], attributes: LrnAttributes): ProgramInfoLoader {\r\n  return {...lrnProgramMetadata, cacheHint: attributes.cacheKey, get: () => createLrnProgramInfo(inputs, attributes)};\r\n}\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('LRN requires 1 input.');\r\n  }\r\n  if (inputs[0].dims.length !== 4) {\r\n    throw new Error('currently only support LRN for input with \"NCHW\" format');\r\n  }\r\n  if (inputs[0].type !== 'float32') {\r\n    throw new Error('input should be float type');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\nimport {getCoordsDataType, getGlChannels} from '../utils';\r\n\r\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\r\nimport {getBiasForMatmul} from './matmul';\r\n\r\nconst createPackedMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\r\n  name: 'MatMul (packed)',\r\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\r\n  inputTypes: hasBias ? [TextureType.packed, TextureType.packed, TextureType.packed] :\r\n                        [TextureType.packed, TextureType.packed],\r\n  cacheHint\r\n});\r\n\r\nconst createPackedMatmulProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[],\r\n     activationAttributes: InternalActivationAttributes): ProgramInfo => {\r\n      const hasBias = inputs.length > 2;\r\n      const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\r\n      const aShape = inputs[0].dims;\r\n      const bShape = inputs[1].dims;\r\n      const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\r\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\r\n\r\n      if (!outputShape) {\r\n        throw new Error('Can\\'t use matmul on the given tensors');\r\n      }\r\n      const sharedDim = aShape[aShape.length - 1];\r\n      const sharedDimIndex = Math.ceil(sharedDim / 2);\r\n      const aRank = aShape.length;\r\n      const bRank = bShape.length;\r\n\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const coordsDataType = getCoordsDataType(outputShape.length);\r\n      const outRank = outputShape.length;\r\n      const allGlChannels = getGlChannels();\r\n      const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\r\n\r\n      const getBiasForMatmulSnippet =\r\n          hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, true)}` : '';\r\n\r\n      const getBcastedSamplerForMatmulSnippet =\r\n          isBroadcast ? `${getBcastSamplerForMatmul(coordsDataType, allGlChannels, inputs, outputShape)}` : '';\r\n\r\n      const getSamplerAInLoopSnippet = isBroadcast ? 'getAAtOutCoordsMatmul(i)' : `getA(${getA(allGlChannels, aRank)})`;\r\n      const getSamplerBInLoopSnippet = isBroadcast ? 'getBAtOutCoordsMatmul(i)' : `getB(${getB(allGlChannels, bRank)})`;\r\n      const getOutputCoordsSnippet = isBroadcast ? '' : `${coordsDataType} rc =\r\n          getOutputCoords(); int lastDim = rc.${allGlChannels[outRank - 1]}; rc.${allGlChannels[outRank - 1]} =\r\n          rc.${allGlChannels[outRank - 2]}; rc.${allGlChannels[outRank - 2]} = lastDim;\r\n      `;\r\n      const shaderSource = `\r\n            ${getBcastedSamplerForMatmulSnippet}\r\n            ${getBiasForMatmulSnippet}\r\n            ${activationFunction}\r\n            void main() {\r\n              ${getOutputCoordsSnippet}\r\n\r\n              vec4 value = vec4(0);\r\n              for (int i = 0; i < ${sharedDimIndex}; i++) {\r\n                vec4 a = ${getSamplerAInLoopSnippet};\r\n                vec4 b = ${getSamplerBInLoopSnippet};\r\n\r\n                value += (a.rrbb * b.rgrg);\r\n                value += (a.ggaa * b.baba);\r\n              }\r\n              ${processBias}\r\n              ${applyActivation}\r\n              ${glsl.output} = value;\r\n            }`;\r\n      return {\r\n        ...metadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\r\n        shaderSource,\r\n        hasMain: true\r\n      };\r\n    };\r\n\r\nexport const createPackedMatmulProgramInfoLoader =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[],\r\n     activationAttributes: InternalActivationAttributes): ProgramInfoLoader => {\r\n      const metadata = createPackedMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\r\n      return {\r\n        ...metadata,\r\n        get: () => createPackedMatmulProgramInfo(inferenceHandler, metadata, inputs, activationAttributes)\r\n      };\r\n    };\r\n\r\nfunction getBcastSamplerForMatmul(\r\n    coordsDataType: string, allGlChannels: readonly string[], inputs: Tensor[], outShape: readonly number[]): string {\r\n  let unpackedACoordsSnippet = [];\r\n  let unpackedBCoordsSnippet = [];\r\n\r\n  const inAShape = inputs[0].dims;\r\n  const inBShape = inputs[1].dims;\r\n\r\n  const inARank = inAShape.length;\r\n  const inBRank = inBShape.length;\r\n\r\n  const outRank = outShape.length;\r\n  const rankADiff = outRank - inARank;\r\n  const rankBDiff = outRank - inBRank;\r\n\r\n  unpackedACoordsSnippet = inAShape.map((s, i) => `coords.${allGlChannels[i + rankADiff]}`);\r\n  unpackedACoordsSnippet[inARank - 1] = 'i*2';\r\n  unpackedACoordsSnippet.join(', ');\r\n  unpackedBCoordsSnippet = inBShape.map((s, i) => `coords.${allGlChannels[i + rankBDiff]}`);\r\n  unpackedBCoordsSnippet[inBRank - 2] = 'i*2';\r\n  unpackedBCoordsSnippet.join(', ');\r\n\r\n  const broadcastADims = BroadcastUtil.getBroadcastDims(inAShape, outShape);\r\n  const broadcastBDims = BroadcastUtil.getBroadcastDims(inBShape, outShape);\r\n\r\n  const coordsASnippet = broadcastADims.map(d => `coords.${allGlChannels[d + rankADiff]} = 0;`).join('\\n');\r\n  const coordsBSnippet = broadcastBDims.map(d => `coords.${allGlChannels[d + rankBDiff]} = 0;`).join('\\n');\r\n  const swapDimSnippet = `int lastDim = coords.${allGlChannels[outRank - 1]};\r\n  coords.${allGlChannels[outRank - 1]} = coords.${allGlChannels[outRank - 2]};\r\n  coords.${allGlChannels[outRank - 2]} = lastDim;`;\r\n\r\n  const getBcastSamplerMatmulSource = `\r\nvec4 getAAtOutCoordsMatmul(int i) {\r\n  ${coordsDataType} coords = getOutputCoords();\r\n  ${swapDimSnippet}\r\n  ${coordsASnippet}\r\n  vec4 outputValue = getA(${unpackedACoordsSnippet});\r\n  return outputValue;\r\n}\r\n\r\nvec4 getBAtOutCoordsMatmul(int i) {\r\n  ${coordsDataType} coords = getOutputCoords();\r\n  ${swapDimSnippet}\r\n  ${coordsBSnippet}\r\n  vec4 outputValue = getB(${unpackedBCoordsSnippet});\r\n  return outputValue;\r\n}`;\r\n\r\n  return getBcastSamplerMatmulSource;\r\n}\r\n\r\nfunction getA(allGlChannels: string[], rank: number): string {\r\n  let res = '';\r\n  for (let i = 0; i < rank - 2; i++) {\r\n    res += `rc.${allGlChannels[i]}, `;\r\n  }\r\n  res += `rc.${allGlChannels[rank - 2]}, ` +\r\n      'i*2';\r\n  return res;\r\n}\r\n\r\nfunction getB(allGlChannels: string[], rank: number): string {\r\n  let res = '';\r\n  for (let i = 0; i < rank - 2; i++) {\r\n    res += `rc.${allGlChannels[i]}, `;\r\n  }\r\n  res += 'i*2, ' +\r\n      `rc.${allGlChannels[rank - 1]}`;\r\n  return res;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\nimport {getCoordsDataType, getGlChannels} from '../utils';\r\n\r\nimport {getActivationSnippet, InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\r\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\r\n\r\nexport const matMul: OperatorImplementation<InternalActivationAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: InternalActivationAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n\r\n      if (inferenceHandler.session.pack) {\r\n        return [inferenceHandler.run(\r\n            createPackedMatmulProgramInfoLoader(inferenceHandler, inputs, attributes), inputs)];\r\n      } else {\r\n        return [inferenceHandler.run(createMatmulProgramInfoLoader(inputs, attributes), inputs)];\r\n      }\r\n    };\r\n\r\nexport const parseMatMulAttributes: OperatorInitialization<InternalActivationAttributes> =\r\n    (node: Graph.Node): InternalActivationAttributes => parseInternalActivationAttributes(node.attributes);\r\n\r\nconst createMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\r\n  name: 'MatMul',\r\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\r\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\r\n                        [TextureType.unpacked, TextureType.unpacked],\r\n  cacheHint\r\n});\r\n\r\nfunction createMatmulProgramInfo(\r\n    metadata: ProgramMetadata, inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfo {\r\n  const aShape = inputs[0].dims;\r\n  const bShape = inputs[1].dims;\r\n  const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\r\n  if (!outputShape) {\r\n    throw new Error('Can\\'t use matmul on the given tensors');\r\n  }\r\n  const coordsDataType = getCoordsDataType(outputShape.length);\r\n  const allGlChannels = getGlChannels();\r\n  const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\r\n\r\n  const hasBias = inputs.length > 2;\r\n  const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\r\n  const getBiasForMatmulSnippet =\r\n      hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, false)}` : '';\r\n\r\n  const rank = outputShape.length;\r\n  const arank = aShape.length;\r\n  const brank = bShape.length;\r\n  const sharedDim = aShape[aShape.length - 1];\r\n  const shaderSource = `\r\n    ${activationFunction}\r\n    ${getBiasForMatmulSnippet}\r\n    float process(int indices[${rank}]) {\r\n        int a[${arank}];\r\n        int b[${brank}];\r\n        bcastMatmulIndices_A(indices, a);\r\n        bcastMatmulIndices_B(indices, b);\r\n\r\n        float value;\r\n        for (int k=0; k<${sharedDim}; ++k) {\r\n            a[${arank - 1}] = k;\r\n            b[${brank - 2}] = k;\r\n            value += _A(a) * _B(b);\r\n        }\r\n        ${processBias}\r\n        ${applyActivation}\r\n        return value;\r\n    }`;\r\n  return {\r\n    ...metadata,\r\n    output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n    shaderSource,\r\n  };\r\n}\r\n\r\nexport function createMatmulProgramInfoLoader(\r\n    inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfoLoader {\r\n  const metadata = createMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\r\n  return {...metadata, get: () => createMatmulProgramInfo(metadata, inputs, activationAttributes)};\r\n}\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 2) {\r\n    throw new Error('MatMul requires 2 inputs.');\r\n  }\r\n\r\n  if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\r\n    throw new Error('shared dimension does not match.');\r\n  }\r\n\r\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\r\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64')) {\r\n    throw new Error('inputs should be float type');\r\n  }\r\n\r\n  if (inputs[0].type !== inputs[1].type) {\r\n    throw new Error('inputs types should match');\r\n  }\r\n};\r\n\r\nexport function getBiasForMatmul(\r\n    coordsDataType: string, allGlChannels: readonly string[], inShape: readonly number[], outShape: readonly number[],\r\n    isPacked: boolean): string {\r\n  let unpackedCoordsSnippet = '';\r\n  const inRank = inShape.length;\r\n  const outRank = outShape.length;\r\n  const rankDiff = outRank - inRank;\r\n  if (outRank < 2 && inRank > 0) {\r\n    unpackedCoordsSnippet = 'coords';\r\n  } else {\r\n    unpackedCoordsSnippet = inShape.map((s, i) => `coords.${allGlChannels[i + rankDiff]}`).join(', ');\r\n  }\r\n  const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\r\n  const coordsSnippet = broadcastDims.map(d => `coords.${allGlChannels[d + rankDiff]} = 0;`).join('\\n');\r\n  const inSize = ShapeUtil.size(inShape);\r\n  const isInputScalar = inSize === 1;\r\n  let output = 'vec4(outputValue.xx, outputValue.yy)';\r\n  if (isInputScalar) {\r\n    output = 'vec4(outputValue.x)';\r\n  }\r\n  const getBiasForMatmulSource = isPacked ? `\r\nvec4 getBiasForMatmul() {\r\n  ${coordsDataType} coords = getOutputCoords();\r\n  ${coordsSnippet}\r\n  vec4 outputValue = getBias(${unpackedCoordsSnippet});\r\n  return ${output};\r\n}` :\r\n                                            `\r\nfloat getBiasForMatmul() {\r\n  ${coordsDataType} coords = getOutputCoords();\r\n  ${coordsSnippet}\r\n  return getBias(coords.x);\r\n}`;\r\n\r\n  return getBiasForMatmulSource;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\r\nimport {getCoordsDataType} from '../utils';\r\n\r\nimport {getChannels} from './packing-utils';\r\n\r\nconst packProgramMetadata = {\r\n  name: 'pack',\r\n  inputNames: ['A'],\r\n  inputTypes: [TextureType.unpackedReversed]\r\n};\r\n\r\nconst createPackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\r\n  const glsl = getGlsl(handler.session.backend.glContext.version);\r\n  const inputShape = input.dims;\r\n\r\n  const inputRank = inputShape.length;\r\n  // createTextureLayoutFromShape won't change output rank. Need to verify by running tests\r\n  const outputRank = input.dims.length;\r\n\r\n  const coordsDataType = getCoordsDataType(outputRank);\r\n  const channels = getChannels('rc', outputRank);\r\n  const setup = getSetup(outputRank, channels, inputShape[inputShape.length - 2], inputShape[inputShape.length - 1]);\r\n\r\n  let reversedInputWH;\r\n  if (inputRank === 0) {\r\n    reversedInputWH = [1, 1];\r\n  } else if (inputRank === 1) {\r\n    reversedInputWH = [inputShape[0], 1];\r\n  } else {\r\n    reversedInputWH = [inputShape[outputRank - 1], inputShape[outputRank - 2]];\r\n  }\r\n  const outOfBoundsCondition = getOutOfBoundsCondition(outputRank, reversedInputWH, channels);\r\n  const output = getOutput(inputShape, channels);\r\n\r\n  const shaderSource = `\r\n        void main() {\r\n          ${coordsDataType} rc = getOutputCoords();\r\n\r\n          if(${outOfBoundsCondition}) {\r\n            ${glsl.output} = vec4(0);\r\n          } else {\r\n            ${setup}\r\n\r\n            ${glsl.output} = vec4(${output});\r\n          }\r\n        }\r\n      `;\r\n  return {\r\n    ...packProgramMetadata,\r\n    hasMain: true,\r\n    output: {dims: input.dims, type: input.type, textureType: TextureType.packed},\r\n    shaderSource\r\n  };\r\n};\r\n\r\nexport const createPackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\r\n    ({...packProgramMetadata, get: () => createPackProgramInfo(handler, input)});\r\n\r\n/**\r\n * check output coordinate location and return false if it is outside input's width/height boundary\r\n */\r\nfunction getOutOfBoundsCondition(rank: number, shape: readonly number[], dims: string[]): string {\r\n  if (rank === 0) {\r\n    return 'false';\r\n  }\r\n  if (rank === 1) {\r\n    return `rc > ${shape[0]}`;\r\n  }\r\n\r\n  let cond = '';\r\n  for (let i = rank - 2; i < rank; i++) {\r\n    cond += `${dims[i]} >= ${shape[i - rank + 2]}`;\r\n    if (i < rank - 1) {\r\n      cond += '||';\r\n    }\r\n  }\r\n\r\n  return cond;\r\n}\r\n\r\n/**\r\n * code snippet to sample input texture with output coordiantes\r\n */\r\nfunction getOutput(shape: readonly number[], dims: string[]): string {\r\n  const rank = shape.length;\r\n\r\n  if (rank === 0) {\r\n    return 'getA(), 0, 0, 0';\r\n  }\r\n\r\n  if (rank === 1) {\r\n    return `getA(rc),\r\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\r\n            0, 0`;\r\n  }\r\n\r\n  const coord00 = 'r, c';\r\n  const coord01 = 'r, cp1';\r\n  const coord10 = 'rp1, c';\r\n  const coord11 = 'rp1, cp1';\r\n  let D = '';\r\n  if (rank > 2) {\r\n    for (let i = 0; i < rank - 2; ++i) {\r\n      D = D + `${dims[i]},`;\r\n    }\r\n  }\r\n  return `getA(${D}${coord00}),\r\n          rEdge ? 0. : getA(${D}${coord10}),\r\n          cEdge ? 0. : getA(${D}${coord01}),\r\n          rEdge || cEdge ? 0. : getA(${D}${coord11})`;\r\n}\r\n\r\n/**\r\n * code snippet to setup 4 coordinates and edge conditions\r\n */\r\nfunction getSetup(rank: number, dims: string[], rows: number, cols: number): string {\r\n  if (rank === 0 || rank === 1) {\r\n    return '';\r\n  }\r\n  // rank >= 2 for width+height pack.\r\n  else {\r\n    const setup = `\r\n    int r = ${dims[rank - 2]};\r\n    int c = ${dims[rank - 1]};\r\n    int rp1 = ${dims[rank - 2]} + 1;\r\n    int cp1 = ${dims[rank - 1]} + 1;\r\n    bool rEdge = rp1 >= ${cols};\r\n    bool cEdge = cp1 >= ${rows};\r\n    `;\r\n    return setup;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {getGlChannels} from '../utils';\r\n\r\nexport function getVecChannels(name: string, rank: number): string[] {\r\n  return getGlChannels(rank).map(d => `${name}.${d}`);\r\n}\r\n\r\nexport function getChannels(name: string, rank: number): string[] {\r\n  if (rank === 1) {\r\n    return [name];\r\n  }\r\n  return getVecChannels(name, rank);\r\n}\r\n\r\nexport function unpackFromChannel(): string {\r\n  return `\r\n    float getChannel(vec4 frag, int dim) {\r\n      int modCoord = imod(dim, 2);\r\n      return modCoord == 0 ? frag.r : frag.g;\r\n    }\r\n\r\n    float getChannel(vec4 frag, vec2 innerDims) {\r\n      vec2 modCoord = mod(innerDims, 2.);\r\n      return modCoord.x == 0. ?\r\n        (modCoord.y == 0. ? frag.r : frag.g) :\r\n        (modCoord.y == 0. ? frag.b : frag.a);\r\n    }\r\n  `;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {getGlsl, Glsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, TextureType} from '../types';\r\n\r\nexport interface PadAttributes extends AttributeWithCacheKey {\r\n  readonly mode: string;\r\n  readonly pads: number[];\r\n  readonly value: number;\r\n}\r\n\r\nconst padProgramMetadata = {\r\n  name: 'Pad',\r\n  inputNames: ['A'],\r\n  inputTypes: [TextureType.unpacked],\r\n};\r\n\r\nexport const padV2: OperatorImplementation<PadAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: PadAttributes): Tensor[] => {\r\n      validateInputsV2(inputs);\r\n      const output = inferenceHandler.run(\r\n          {\r\n            ...padProgramMetadata,\r\n            cacheHint: attributes.cacheKey,\r\n            get: () => createPadProgramInfo(inferenceHandler, inputs[0], attributes)\r\n          },\r\n          inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parsePadAttributesV2: OperatorInitialization<PadAttributes> = (node: Graph.Node): PadAttributes => {\r\n  const mode = node.attributes.getString('mode', 'constant');\r\n  const value = node.attributes.getFloat('value', 0.0);\r\n  const pads = node.attributes.getInts('pads');\r\n  return createAttributeWithCacheKey({mode, value, pads});\r\n};\r\n\r\nexport const padV11: OperatorImplementation<string> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): Tensor[] => {\r\n      validateInputsV11(inputs);\r\n      const attrubutes = generatePadAttributesFromInputs(inferenceHandler, inputs, mode);\r\n      return padV2(inferenceHandler, [inputs[0]], attrubutes);\r\n    };\r\n\r\nexport const parsePadAttributesV11: OperatorInitialization<string> = (node: Graph.Node): string =>\r\n    node.attributes.getString('mode', 'constant');\r\n\r\nconst generatePadAttributesFromInputs =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): PadAttributes => {\r\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\r\n          (inputs.length >= 3 && !inferenceHandler.session.isInitializer(inputs[2].dataId))) {\r\n        throw new Error('dynamic pad attributes are not allowed');\r\n      }\r\n\r\n      const pads = Array.from(inputs[1].integerData);\r\n      const value = (inputs.length >= 3) ? inputs[2].floatData[0] : 0.0;\r\n\r\n      return createAttributeWithCacheKey({mode, pads, value});\r\n    };\r\n\r\nconst createPadProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): ProgramInfo => {\r\n      const outputShape = ShapeUtil.padShape(input.dims.slice(), attributes.pads);\r\n      const rank = outputShape.length;\r\n      const padFunction = getPadFunction(inferenceHandler, input, attributes);\r\n      const shaderSource = `\r\n      ${padFunction}\r\n      float process(int[${rank}] indices) {\r\n          return padA(indices);\r\n      }`;\r\n      return {\r\n        name: 'Pad',\r\n        inputNames: ['A'],\r\n        inputTypes: [TextureType.unpacked],\r\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst validateInputsV2 = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Pad requires 1 input');\r\n  }\r\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n\r\nconst validateInputsV11 = (inputs: Tensor[]): void => {\r\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\r\n    throw new Error('Pad requires 2 or 3 inputs');\r\n  }\r\n  if (inputs[1].type !== 'int32') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n  if (inputs.length >= 3 && inputs[2].type === 'string') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n\r\nconst getPadFunction = (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): string => {\r\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n  const [width, height] = inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\r\n  const strides = ShapeUtil.computeStrides(input.dims);\r\n\r\n  switch (attributes.mode) {\r\n    case 'constant':\r\n      return getPadConstant(glsl, input.dims, strides, width, height, attributes.pads, attributes.value);\r\n    case 'reflect':\r\n      return getPadReflect(glsl, input.dims, strides, width, height, attributes.pads);\r\n    case 'edge':\r\n      return getPadEdge(glsl, input.dims, strides, width, height, attributes.pads);\r\n    default:\r\n      throw new Error('Invalid mode');\r\n  }\r\n};\r\n\r\nconst getPadConstant =\r\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[],\r\n     value: number): string => {\r\n      const rank = shape.length;\r\n      let block = '';\r\n      for (let i = rank - 1; i >= 0; --i) {\r\n        block += `\r\n        k = m[${i}] - ${pads[i]};\r\n        if (k < 0)  return constant;\r\n        if (k >= ${shape[i]}) return constant;\r\n        offset += k * ${strides[i]};\r\n        `;\r\n      }\r\n      return `\r\n      float padA(int m[${rank}]) {\r\n        const float constant = float(${value});\r\n        int offset = 0;\r\n        int k = 0;\r\n        ${block}\r\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\r\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\r\n        return value;\r\n      }\r\n      `;\r\n    };\r\n\r\nconst getPadReflect =\r\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\r\n        string => {\r\n          const rank = shape.length;\r\n\r\n          let block = '';\r\n          for (let i = rank - 1; i >= 0; --i) {\r\n            block += `\r\n        k = m[${i}] - ${pads[i]};\r\n        if (k < 0) { k = -k; }\r\n        {\r\n          const int _2n_1 = ${2 * (shape[i] - 1)};\r\n          k = int( mod( float(k), float(_2n_1) ) ) ;\r\n          if(k >= ${shape[i]}) { k = _2n_1 - k; }\r\n        }\r\n        offset += k * ${strides[i]};\r\n        `;\r\n          }\r\n          return `\r\n      float padA(int m[${rank}]) {\r\n        int offset = 0;\r\n        int k = 0;\r\n        ${block}\r\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\r\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\r\n        return value;\r\n      }\r\n      `;\r\n        };\r\n\r\nconst getPadEdge =\r\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\r\n        string => {\r\n          const rank = shape.length;\r\n\r\n          let block = '';\r\n          for (let i = rank - 1; i >= 0; --i) {\r\n            block += `\r\n        k = m[${i}] - ${pads[i]};\r\n        if (k < 0)  k = 0;\r\n        if (k >= ${shape[i]}) k = ${shape[i] - 1};\r\n        offset += k * ${strides[i]};\r\n      `;\r\n          }\r\n          return `\r\n      float padA(int m[${rank}]) {\r\n        int offset = 0;\r\n        int k = 0;\r\n        ${block}\r\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\r\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\r\n        return value;\r\n      }\r\n      `;\r\n        };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\r\n\r\nexport interface AveragePoolAttributes extends AttributeWithCacheKey {\r\n  readonly autoPad: string;\r\n  readonly ceilMode: number;\r\n  readonly countIncludePad: boolean;\r\n  readonly kernelShape: readonly number[];\r\n  readonly strides: readonly number[];\r\n  readonly pads: readonly number[];\r\n}\r\n\r\nexport const averagePool: OperatorImplementation<AveragePoolAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const metadata =\r\n          {name: 'AveragePool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\r\n      const output = inferenceHandler.run(\r\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\r\n    (node: Graph.Node): AveragePoolAttributes => {\r\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\r\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\r\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\r\n      const kernelShape = node.attributes.getInts('kernel_shape');\r\n      const strides = node.attributes.getInts('strides', []);\r\n      const pads = node.attributes.getInts('pads', []);\r\n\r\n      // TODO: support attribute 'ceil_mode'\r\n      if (ceilMode !== 0) {\r\n        throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\r\n      }\r\n\r\n      return createAttributeWithCacheKey({autoPad, ceilMode, countIncludePad, kernelShape, strides, pads});\r\n    };\r\n\r\nconst createAveragePoolProgramInfo =\r\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: AveragePoolAttributes):\r\n        ProgramInfo => {\r\n          const [adjustedAttributes, outputShape] =\r\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\r\n          const kernelSize = ShapeUtil.size(adjustedAttributes.kernelShape);\r\n          const op1 = 'value += _X(x);';\r\n          let op2 = '';\r\n          if (adjustedAttributes.countIncludePad) {\r\n            op2 += `value /= float(${kernelSize});`;\r\n          } else {\r\n            op2 += `value /= float(${kernelSize} - pad);`;\r\n          }\r\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '0.0');\r\n          const shaderSource = `\r\n        ${poolingCode}\r\n      `;\r\n          return {\r\n            ...metadata,\r\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n            shaderSource\r\n          };\r\n        };\r\n\r\nexport const globalAveragePool: OperatorImplementation<AveragePoolAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const metadata = {\r\n        name: 'GlobalAveragePool',\r\n        inputNames: ['X'],\r\n        inputTypes: [TextureType.unpacked],\r\n        cacheHint: `${attributes.countIncludePad}`\r\n      };\r\n      const output = inferenceHandler.run(\r\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, true, attributes)}, inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseGlobalAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\r\n    (node: Graph.Node): AveragePoolAttributes => {\r\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\r\n      return createAttributeWithCacheKey(\r\n          {autoPad: '', ceilMode: 0, countIncludePad, kernelShape: [], strides: [], pads: []});\r\n    };\r\n\r\nexport interface MaxPoolAttributes extends AveragePoolAttributes {\r\n  readonly storageOrder: number;\r\n  readonly dilations: number[];\r\n}\r\n\r\nexport const maxPool: OperatorImplementation<MaxPoolAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: MaxPoolAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const metadata =\r\n          {name: 'MaxPool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\r\n      const output = inferenceHandler.run(\r\n          {...metadata, get: () => createMaxPoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseMaxPoolAttributes: OperatorInitialization<MaxPoolAttributes> =\r\n    (node: Graph.Node): MaxPoolAttributes => {\r\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\r\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\r\n      const kernelShape = node.attributes.getInts('kernel_shape');\r\n      const strides = node.attributes.getInts('strides', []);\r\n      const pads = node.attributes.getInts('pads', []);\r\n      const storageOrder = node.attributes.getInt('storage_order', 0);\r\n      const dilations = node.attributes.getInts('dilations', []);\r\n\r\n      // TODO: support attribute 'ceil_mode' and 'storage_order'\r\n      if (storageOrder !== 0) {\r\n        throw new Error('column major storage order is not yet supported for MaxPool');\r\n      }\r\n      if (ceilMode !== 0) {\r\n        throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\r\n      }\r\n\r\n      return createAttributeWithCacheKey(\r\n          {autoPad, ceilMode, countIncludePad: false, kernelShape, strides, pads, storageOrder, dilations});\r\n    };\r\n\r\nconst createMaxPoolProgramInfo =\r\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: MaxPoolAttributes):\r\n        ProgramInfo => {\r\n          const [adjustedAttributes, outputShape] =\r\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\r\n          const op1 = `\r\n      value = max(_X(x), value);\r\n    `;\r\n          const op2 = '';\r\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '-1e5');\r\n          const shaderSource = `\r\n      ${poolingCode}\r\n    `;\r\n          return {\r\n            ...metadata,\r\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n            shaderSource\r\n          };\r\n        };\r\n\r\nconst getAdjustedPoolAttributesAndOutputShape =\r\n    (inputs: Tensor[], attributes: AveragePoolAttributes|MaxPoolAttributes, isGlobalOperator: boolean):\r\n        [AveragePoolAttributes|MaxPoolAttributes, number[]] => {\r\n          const inputShape = inputs[0].dims.slice();\r\n          const hasDilations = Object.hasOwnProperty.call(attributes, 'dilations');\r\n          const kernelShape = attributes.kernelShape.slice();\r\n          const strides = attributes.strides.slice();\r\n          const dilations: number[] = hasDilations ? (attributes as MaxPoolAttributes).dilations.slice() : [];\r\n          const pads = attributes.pads.slice();\r\n          PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, dilations, pads);\r\n\r\n          const outputShape = PoolConvUtil.computePoolOutputShape(\r\n              isGlobalOperator, inputShape, strides, dilations, kernelShape, pads, attributes.autoPad);\r\n\r\n          const newAttributes = Object.assign({}, attributes);\r\n          if (hasDilations) {\r\n            Object.assign(newAttributes, {kernelShape, strides, pads, dilations, cacheKey: attributes.cacheKey});\r\n          } else {\r\n            Object.assign(newAttributes, {kernelShape, strides, pads, cacheKey: attributes.cacheKey});\r\n          }\r\n          return [newAttributes, outputShape];\r\n        };\r\n\r\nconst globalMaxPoolAttributes = {\r\n  autoPad: '',\r\n  ceilMode: 0,\r\n  countIncludePad: false,\r\n  kernelShape: [],\r\n  strides: [],\r\n  pads: [],\r\n  storageOrder: 0,\r\n  dilations: [],\r\n  cacheKey: ''\r\n};\r\n\r\nconst globalMaxPoolMetadata = {\r\n  name: 'GlobalMaxPool',\r\n  inputNames: ['X'],\r\n  inputTypes: [TextureType.unpacked]\r\n};\r\n\r\nexport const globalMaxPool = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\r\n  validateInputs(inputs);\r\n  const output = inferenceHandler.run(\r\n      {\r\n        ...globalMaxPoolMetadata,\r\n        get: () => createMaxPoolProgramInfo(inputs, globalMaxPoolMetadata, true, globalMaxPoolAttributes)\r\n      },\r\n      inputs);\r\n  return [output];\r\n};\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Pool ops requires 1 input.');\r\n  }\r\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n\r\nconst generatePoolingCode =\r\n    (inputDims: readonly number[], attributes: AveragePoolAttributes, op1: string, op2: string, start: string):\r\n        string => {\r\n          const rank = inputDims.length;\r\n          if (attributes.kernelShape.length <= 2) {\r\n            const kw = attributes.kernelShape[attributes.kernelShape.length - 1];\r\n            const sw = attributes.strides[attributes.strides.length - 1];\r\n            const pwStart = attributes.pads[attributes.pads.length / 2 - 1];\r\n            const pwEnd = attributes.pads[attributes.pads.length - 1];\r\n            const dimW = inputDims[rank - 1];\r\n            let codeW = '';\r\n            let codeH = '';\r\n            let codeHEnd = '';\r\n            if (pwStart + pwEnd !== 0) {\r\n              codeW = `\r\n          for (int i = 0; i < ${kw}; i++) {\r\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\r\n            if (x[${rank} - 1] < 0 || x[${rank} - 1] >= ${dimW}) {\r\n              pad++;\r\n              continue;\r\n            }\r\n            ${op1}\r\n          }`;\r\n            } else {\r\n              codeW = `\r\n          for (int i = 0; i < ${kw}; i++) {\r\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\r\n            ${op1}\r\n          }`;\r\n            }\r\n\r\n            if (attributes.kernelShape.length === 2) {\r\n              const kh = attributes.kernelShape[attributes.kernelShape.length - 2];\r\n              const sh = attributes.strides[attributes.strides.length - 2];\r\n              const phStart = attributes.pads[attributes.pads.length / 2 - 2];\r\n              const phEnd = attributes.pads[attributes.pads.length - 2];\r\n              const dimH = inputDims[rank - 2];\r\n              if (phStart + phEnd !== 0) {\r\n                codeH = `\r\n            for (int j = 0; j < ${kh}; j++) {\r\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\r\n              if (x[${rank} - 2] < 0 || x[${rank} - 2] >= ${dimH}) {\r\n                pad+= ${kw};\r\n                continue;\r\n              }\r\n          `;\r\n              } else {\r\n                codeH = `\r\n            for (int j = 0; j < ${kh}; j++) {\r\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\r\n            `;\r\n              }\r\n              codeHEnd = `\r\n          }\r\n        `;\r\n            }\r\n\r\n            const poolingCode = `\r\n        float process(int indices[${rank}]) {\r\n          int x[${rank}];\r\n          copyVec(indices, x);\r\n\r\n          float value = ${start};\r\n          int pad = 0;\r\n          ${codeH}\r\n          ${codeW}\r\n          ${codeHEnd}\r\n          ${op2}\r\n          return value;\r\n        }\r\n      `;\r\n            return poolingCode;\r\n          } else {\r\n            const kernelSize = ShapeUtil.size(attributes.kernelShape);\r\n            const kernelStrides = ShapeUtil.computeStrides(attributes.kernelShape);\r\n            const stridesRank = kernelStrides.length;\r\n            const padsRank = attributes.pads.length;\r\n            const offsetToIndicesFunction = offsetToIndices(stridesRank);\r\n            const copyInputDims = copyArray(inputDims, 'inputDims');\r\n            const copyPads = copyArray(attributes.pads, 'pads');\r\n            const copyKernelStrides = copyArray(kernelStrides, 'kernelStrides');\r\n            const copyStrides = copyArray(attributes.strides, 'strides');\r\n            const hasPads = attributes.pads.reduce((sum, cur) => sum + cur);\r\n            let padCode = '';\r\n            if (hasPads) {\r\n              padCode = `\r\n            if (x[j] >= inputDims[j] || x[j] < 0) {\r\n              pad++;\r\n              isPad = true;\r\n              break;\r\n            }\r\n          }\r\n          if (!isPad) {\r\n            ${op1}\r\n          }`;\r\n            } else {\r\n              padCode = `\r\n          }\r\n          ${op1}\r\n        `;\r\n            }\r\n            const poolingCode = `\r\n        ${offsetToIndicesFunction}\r\n        float process(int indices[${rank}]) {\r\n          int x[${rank}];\r\n          copyVec(indices, x);\r\n          int offset[${stridesRank}];\r\n          int pads[${padsRank}];\r\n          int inputDims[${rank}];\r\n          int kernelStrides[${stridesRank}];\r\n          int strides[${stridesRank}];\r\n          ${copyPads}\r\n          ${copyInputDims}\r\n          ${copyStrides}\r\n          ${copyKernelStrides}\r\n\r\n          float value = ${start};\r\n          int pad = 0;\r\n          bool isPad = false;\r\n          for (int i = 0; i < ${kernelSize}; i++) {\r\n            offsetToIndices(i, kernelStrides, offset);\r\n            isPad = false;\r\n            for (int j = ${rank} - ${stridesRank}; j < ${rank}; j++) {\r\n              x[j] = indices[j] * strides[j - ${rank} + ${stridesRank}]\r\n                + offset[j - ${rank} + ${stridesRank}] - pads[j - 2];\r\n              ${padCode}\r\n          }\r\n          ${op2}\r\n\r\n          return value;\r\n        }\r\n      `;\r\n            return poolingCode;\r\n          }\r\n        };\r\n\r\nconst copyArray = (array: readonly number[], arrayName: string): string => {\r\n  let block = '';\r\n  for (let i = 0; i < array.length; i++) {\r\n    block += `\r\n      ${arrayName}[${i}] = ${array[i]};\r\n    `;\r\n  }\r\n  return block;\r\n};\r\n\r\nconst offsetToIndices = (rank: number): string => `\r\n  void offsetToIndices(int offset, int[${rank}] strides, out int[${rank}] indices) {\r\n    if (${rank} == 0) {\r\n      return;\r\n    }\r\n    for (int i = 0; i < ${rank} - 1; ++i) {\r\n      indices[i] = offset / strides[i];\r\n      offset -= indices[i] * strides[i];\r\n    }\r\n    indices[${rank} - 1] = offset;\r\n  }`;\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\r\n\r\nexport interface ReduceAttributes extends AttributeWithCacheKey {\r\n  readonly axes: number[];\r\n  readonly keepDims: boolean;\r\n}\r\n\r\n// return [init ops, reduce ops, final ops]\r\ntype ReduceOp = (inputs: Tensor[], axes: number[]) => string[];\r\n\r\nconst reduce =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string,\r\n     reduceOp: ReduceOp): Tensor[] => {\r\n      validateInputs(inputs);\r\n\r\n      const reduceProgramMetadata = {\r\n        name,\r\n        inputNames: ['A'],\r\n        inputTypes: [TextureType.unpacked],\r\n      };\r\n\r\n      const output = inferenceHandler.run(\r\n          {\r\n            ...reduceProgramMetadata,\r\n            cacheHint: attributes.cacheKey,\r\n            get: () =>\r\n                createReduceProgramInfo(inferenceHandler, inputs, attributes, name, reduceOp, reduceProgramMetadata)\r\n          },\r\n          inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseReduceAttributes: OperatorInitialization<ReduceAttributes> = (node: Graph.Node): ReduceAttributes => {\r\n  const axes = node.attributes.getInts('axes', []);\r\n  const keepDims = node.attributes.getInt('keepdims', 1) === 1;\r\n  return createAttributeWithCacheKey({axes, keepDims});\r\n};\r\n\r\nconst createReduceProgramInfo =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string, reduceOp: ReduceOp,\r\n     reduceProgramMetadata: ProgramMetadata): ProgramInfo => {\r\n      const outputShape: number[] = [];\r\n      const iRank = inputs[0].dims.length || 1;\r\n\r\n      const idxCopy = [];  // copy output indexes to input indexes\r\n\r\n      const axes = ShapeUtil.normalizeAxes(attributes.axes, inputs[0].dims.length);\r\n      const ops = reduceOp(inputs, axes);\r\n      let reduceOps = ops[1];\r\n\r\n      for (let k = 0; k < inputs[0].dims.length; k++) {\r\n        // if this axis is reduced\r\n        if (axes.indexOf(k) >= 0 || axes.length === 0) {\r\n          if (attributes.keepDims) {\r\n            outputShape.push(1);\r\n          }  // else { remove the axis from outputShape; }\r\n\r\n          // loop over the d-th axis\r\n          reduceOps = `\r\n          for(int j${k} = 0; j${k} < ${inputs[0].dims[k]}; j${k}++) {\r\n            inputIdx[${k}] = j${k};\r\n            ${reduceOps}\r\n          }`;\r\n        } else {\r\n          idxCopy.push(`inputIdx[${k}] = outputIdx[${outputShape.length}];`);\r\n\r\n          outputShape.push(inputs[0].dims[k]);\r\n        }\r\n      }\r\n\r\n      const oRank = outputShape.length || 1;\r\n\r\n      const shaderSource = `\r\n      float process(int outputIdx[${oRank}]) {\r\n        float value;                 // final result\r\n        int inputIdx[${iRank}];      // addressing input data\r\n        ${idxCopy.join('\\n')}\r\n        ${ops[0]}       // init ops for reduce max/min\r\n        ${reduceOps}\r\n        ${ops[2]}       // final computation for reduce mean\r\n        return value;\r\n      }`;\r\n\r\n      return {\r\n        ...reduceProgramMetadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  // TODO: support Reduce* operators with 2 inputs.\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Reduce op requires 1 input.');\r\n  }\r\n\r\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n\r\nexport const reduceSum: OperatorImplementation<ReduceAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\r\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', ''];\r\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceSum', reduceOp);\r\n    };\r\n\r\nexport const reduceMean: OperatorImplementation<ReduceAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\r\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\r\n        let size = 1.0;\r\n        for (let k = 0; k < inputs[0].dims.length; k++) {\r\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\r\n            size *= inputs[0].dims[k];\r\n          }\r\n        }\r\n\r\n        return ['value = 0.0;', 'value += _A(inputIdx);', `value /= ${size}.;`];  // ensure real number with `.`\r\n      };\r\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMean', reduceOp);\r\n    };\r\n\r\nexport const reduceMax: OperatorImplementation<ReduceAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\r\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\r\n        const idxZero = [];\r\n        for (let k = 0; k < inputs[0].dims.length; k++) {\r\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\r\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\r\n          }\r\n        }\r\n\r\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = max(value, _A(inputIdx));', ''];\r\n      };\r\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMax', reduceOp);\r\n    };\r\n\r\nexport const reduceMin: OperatorImplementation<ReduceAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\r\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\r\n        const idxZero = [];\r\n        for (let k = 0; k < inputs[0].dims.length; k++) {\r\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\r\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\r\n          }\r\n        }\r\n\r\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = min(value, _A(inputIdx));', ''];\r\n      };\r\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMin', reduceOp);\r\n    };\r\n\r\nexport const reduceProd: OperatorImplementation<ReduceAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\r\n      const reduceOp: ReduceOp = (): string[] => ['value = 1.0;', 'value *= _A(inputIdx);', ''];\r\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceProd', reduceOp);\r\n    };\r\n\r\nexport const reduceLogSum: OperatorImplementation<ReduceAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\r\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', 'value = log(value);'];\r\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSum', reduceOp);\r\n    };\r\n\r\nexport const reduceLogSumSquare: OperatorImplementation<ReduceAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\r\n      const reduceOp: ReduceOp = (): string[] => ['float t; value = 0.0;', 't = _A(inputIdx); value += t * t;', ''];\r\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSumSquare', reduceOp);\r\n    };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\nimport {unpackFromChannel} from './packing-utils';\r\n\r\nconst createPackedReshape3DProgramMetadata = (outputShape3D: readonly number[]) =>\r\n    ({name: 'Reshape (packed)', inputTypes: [TextureType.packed], inputNames: ['A'], cacheHint: `${outputShape3D}`});\r\n\r\nconst createPackedReshape3DProgramInfo =\r\n    (handler: WebGLInferenceHandler, input3D: Tensor, metadata: ProgramMetadata, outputShape3D: readonly number[]):\r\n        ProgramInfo => {\r\n          const inputShape3D = input3D.dims as [number, number, number];\r\n          const squeezedOutputShape = outputShape3D as [number, number, number];\r\n\r\n          let mainLoop = '';\r\n          for (let i = 0; i < 4; i++) {\r\n            let outputCoords = '';\r\n            switch (i) {\r\n              case 0:\r\n                outputCoords = 'outputCoords = rc;';\r\n                break;\r\n              case 1:\r\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z);';\r\n                break;\r\n              case 2:\r\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y, rc.z+1);';\r\n                break;\r\n              case 3:\r\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z+1);';\r\n                break;\r\n              default:\r\n                throw new Error();\r\n            }\r\n\r\n            mainLoop += `\r\n        ${outputCoords}\r\n        ${i > 0 ? 'if(outputCoords.y < rows && outputCoords.z < cols){' : ''}\r\n          int flattenedIndex = getFlattenedIndex(outputCoords);\r\n\r\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flattenedIndex);\r\n          vec2 innerDims = vec2(float(inputRC.y),float(inputRC.z));\r\n\r\n          result[${i}] = getChannel(getA(inputRC.x, inputRC.y, inputRC.z), innerDims);\r\n\r\n        ${i > 0 ? '}' : ''}\r\n      `;\r\n          }\r\n          const glsl = getGlsl(handler.session.backend.glContext.version);\r\n\r\n          const shaderSource = `\r\n      ${getReshapedInputCoords(inputShape3D)}\r\n      ${getFlattenedIndexFrom3D(squeezedOutputShape)}\r\n      ${unpackFromChannel()}\r\n\r\n      void main() {\r\n        ivec3 rc = getOutputCoords();\r\n\r\n        vec4 result = vec4(0.0);\r\n\r\n        ivec3 outputCoords;\r\n        int rows = ${squeezedOutputShape[2]};\r\n        int cols = ${squeezedOutputShape[1]};\r\n\r\n        ${mainLoop}\r\n        ${glsl.output} = result;\r\n      }\r\n    `;\r\n\r\n          return {\r\n            ...metadata,\r\n            output: {dims: squeezedOutputShape, type: input3D.type, textureType: TextureType.packed},\r\n            shaderSource,\r\n            hasMain: true\r\n          };\r\n        };\r\n\r\nexport const createPackedReshape3DProgramInfoLoader =\r\n    (handler: WebGLInferenceHandler, input3D: Tensor, outputShape3D: readonly number[]): ProgramInfoLoader => {\r\n      const metadata = createPackedReshape3DProgramMetadata(outputShape3D);\r\n      return {...metadata, get: () => createPackedReshape3DProgramInfo(handler, input3D, metadata, outputShape3D)};\r\n    };\r\n\r\nexport function processDims3D(shape: ArrayLike<number>): [number, number, number] {\r\n  if (shape.length === 0) {\r\n    return [1, 1, 1];\r\n  }\r\n  // TODO: squeeze other shapes to 2D case\r\n  let batch = 1;\r\n  for (let i = 0; i < shape.length - 2; ++i) {\r\n    batch *= shape[i];\r\n  }\r\n  return [batch, shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\r\n}\r\n\r\n// For packed reshape, we need to re-arrange texel data for output shape.\r\n// Our pack is designed to pack a 2x2 tile in last h and w dimension, so\r\n// for the reshaped new tensor, we just need to re-arrange the last h and\r\n// w dimension. For any shape that is not in 3D, i.e. [batch, W, H], we\r\n// first convert it to 3D by collapsing other dimension to batch dim, then\r\n// process with the last two dimensions.\r\n// Note: we only need the shape tensor to calculate output shape, so the\r\n// content in shape tensor is never uploaded to GPU. It is always kept in CPU.\r\n// TODO: optimize the algorithm -- in some cases, if the last two dims are\r\n// the same between input shape and output shape, the packed reshape can be\r\n// treated as no-op.\r\nexport function isReshapeCheap(dims: readonly number[], reshapedDims: readonly number[]) {\r\n  let isCheapReshape = false;\r\n  if (dims.length === 0 || reshapedDims.length === 0) {  // scalar\r\n    isCheapReshape = true;\r\n  } else if (dims.length < 2 || reshapedDims.length < 2) {  // 1D\r\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1];\r\n  } else {  // 2D +\r\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1] &&\r\n        dims[dims.length - 2] === reshapedDims[reshapedDims.length - 2];\r\n  }\r\n\r\n  return isCheapReshape;\r\n}\r\n\r\nfunction getReshapedInputCoords(shape: [number, number, number]): string {\r\n  const strides = ShapeUtil.computeStrides(shape);\r\n  const coords = ['b', 'r', 'c'];\r\n  const index = 'index';\r\n  const coordsFromIndexSnippet = strides\r\n                                     .map((stride, i) => {\r\n                                       const line1 = `int ${coords[i]} = ${index} / ${stride}`;\r\n                                       const line2 = i === strides.length - 1 ?\r\n                                           `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\r\n                                           `index -= ${coords[i]} * ${stride}`;\r\n                                       return `${line1}; ${line2};`;\r\n                                     })\r\n                                     .join('');\r\n\r\n  return `\r\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\r\n      ${coordsFromIndexSnippet}\r\n      return ivec3(b, r, c);\r\n    }\r\n  `;\r\n}\r\n\r\nfunction getFlattenedIndexFrom3D(shape: [number, number, number]): string {\r\n  const strides = ShapeUtil.computeStrides(shape);\r\n\r\n  return `\r\n  int getFlattenedIndex(ivec3 coords) {\r\n    // reverse y, z order\r\n    return coords.x * ${strides[0]} + coords.z * ${strides[1]} + coords.y;\r\n  }\r\n`;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nexport const reshape = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\r\n  const reshapedDims = ShapeUtil.calculateReshapedDims(inputs[0].dims, inputs[1].integerData);\r\n  if (handler.session.pack) {\r\n    return [handler.reshapePacked(inputs[0], reshapedDims)];\r\n  } else {\r\n    return [handler.reshapeUnpacked(inputs[0], reshapedDims)];\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, TextureType} from '../types';\r\nimport {getCoordsDataType} from '../utils';\r\n\r\nimport {unpackFromChannel} from './packing-utils';\r\nimport {parseUpsampleAttributes, scalesValidation, UpsampleAttributes, validateInputs} from './upsample';\r\n\r\nconst resizeProgramMetadata = {\r\n  name: 'Resize',\r\n  inputNames: ['A'],\r\n  inputTypes: [TextureType.packed]\r\n};\r\n\r\nexport const resize: OperatorImplementation<UpsampleAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\r\n      validateInputs(inputs, attributes);\r\n      const output = inferenceHandler.run(\r\n          {\r\n            ...resizeProgramMetadata,\r\n            cacheHint: attributes.cacheKey,\r\n            get: () => createPackedResizeProgramInfo(inferenceHandler, inputs, attributes)\r\n          },\r\n          inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseResizeAttributesV10: OperatorInitialization<UpsampleAttributes> =\r\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 10);\r\n\r\nexport const parseResizeAttributesV11: OperatorInitialization<UpsampleAttributes> =\r\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 11);\r\n\r\nconst createPackedResizeProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const [scales, outputShape] = prepareInputs(inputs, attributes);\r\n\r\n      const isSame =\r\n          scales.every((s: number) => s === 1) && attributes.coordinateTransformMode !== 'tf_crop_and_resize';\r\n      if (isSame) {\r\n        return {\r\n          ...resizeProgramMetadata,\r\n          output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\r\n          hasMain: true,\r\n          shaderSource: `void main() {\r\n                    vec4 v = ${glsl.texture2D}(X, TexCoords);\r\n                    ${glsl.output} = v;\r\n                }`\r\n        };\r\n      }\r\n\r\n      const dim = outputShape.length;\r\n      if (dim < 2) {\r\n        throw new Error(`output dimension should be at least 2, but got ${dim}`);\r\n      }\r\n\r\n      const outputHeight = outputShape[dim - 2];\r\n      const outputWidth = outputShape[dim - 1];\r\n\r\n      const inputShape = inputs[0].dims;\r\n      if (dim !== inputShape.length) {\r\n        throw new Error(`output dimension should match input ${inputShape.length}, but got ${dim}`);\r\n      }\r\n      const inputHeight = inputShape[dim - 2];\r\n      const inputWidth = inputShape[dim - 1];\r\n\r\n      const scalesHeight = scales[dim - 2];\r\n      const scalesWidth = scales[dim - 1];\r\n\r\n      let getSourceFracIndex = '';\r\n\r\n      if (attributes.mode !== 'linear') {\r\n        // TODO: support other modes\r\n        throw new Error(`resize (packed) does not support mode: '${attributes.mode}'`);\r\n      }\r\n      switch (attributes.coordinateTransformMode) {\r\n        case 'asymmetric':\r\n          getSourceFracIndex = `\r\n                    vec4 getSourceFracIndex(ivec4 coords) {\r\n                        return vec4(coords) / scaleWHWH;\r\n                    }\r\n                `;\r\n          break;\r\n        case 'half_pixel':\r\n          getSourceFracIndex = `\r\n                    vec4 getSourceFracIndex(ivec4 coords) {\r\n                        return (vec4(coords) + 0.5) / scaleWHWH - 0.5;\r\n                    }\r\n                `;\r\n          break;\r\n        case 'pytorch_half_pixel':\r\n          getSourceFracIndex = `\r\n                    vec4 getSourceFracIndex(ivec4 coords) {\r\n                        vec4 fcoords = vec4(coords);\r\n                        return vec4(\r\n                            ${outputWidth}.0 > 1.0 ? (fcoords.x + 0.5) / scaleWHWH.x - 0.5 : 0.0,\r\n                            ${outputHeight}.0 > 1.0 ? (fcoords.y + 0.5) / scaleWHWH.y - 0.5 : 0.0,\r\n                            ${outputWidth}.0 > 1.0 ? (fcoords.z + 0.5) / scaleWHWH.z - 0.5 : 0.0,\r\n                            ${outputHeight}.0 > 1.0 ? (fcoords.w + 0.5) / scaleWHWH.w - 0.5 : 0.0\r\n                          );\r\n                    }\r\n                `;\r\n          break;\r\n        case 'align_corners':\r\n          getSourceFracIndex = `\r\n                    vec4 getSourceFracIndex(ivec4 coords) {\r\n                        vec4 resized = vec4(${outputWidth}.0 - 1.0, ${outputHeight}.0 - 1.0, ${outputWidth}.0 - 1.0,\r\n                            ${outputHeight}.0 - 1.0);\r\n                        vec4 original = vec4(${inputWidth}.0 - 1.0, ${inputHeight}.0 - 1.0, ${inputWidth}.0 - 1.0,\r\n                            ${inputHeight}.0 - 1.0);\r\n                        vec4 new_scale = original / resized;\r\n                        return vec4(coords) * new_scale;\r\n                    }\r\n                `;\r\n          break;\r\n        default:\r\n          // TODO:supporting other coordinateTransformModes\r\n          throw new Error(`resize (packed) does not support coordinateTransformMode: \\\r\n                                '${attributes.coordinateTransformMode}'`);\r\n      }\r\n\r\n      const coordsDataType = getCoordsDataType(dim);\r\n      const unpackChannel = unpackFromChannel();\r\n      const shaderSource = `\r\n            const vec2 inputWH = vec2(${inputHeight}.0, ${inputWidth}.0);\r\n            const vec4 scaleWHWH = vec4(float(${scalesHeight}), float(${scalesWidth}), float(${scalesHeight}), float(${\r\n          scalesWidth}));\r\n            ${unpackChannel}\r\n            ${getSourceFracIndex}\r\n            float getAValue(int x10, int r, int c, int d) {\r\n                return getChannel(getA(x10, r, c, d), vec2(c, d));\r\n            }\r\n            void main() {\r\n                ${coordsDataType} rc = getOutputCoords();\r\n\r\n                int batch = rc[0];\r\n                int depth = rc[1];\r\n\r\n                // retrieve the 4 coordinates that is used in the 4 packed output values.\r\n                ivec4 coords = ivec4(rc.wz, rc.w + 1, rc.z + 1);\r\n\r\n                // calculate the source index in fraction\r\n                vec4 sourceFrac = getSourceFracIndex(coords);\r\n\r\n                // get the lower and upper bound of the 4 values that will be packed into one texel.\r\n                ivec4 x00 = ivec4(max(sourceFrac.xy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xy)));\r\n                ivec4 x01 = ivec4(max(sourceFrac.xw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xw)));\r\n                ivec4 x10 = ivec4(max(sourceFrac.zy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zy)));\r\n                ivec4 x11 = ivec4(max(sourceFrac.zw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zw)));\r\n\r\n                bool hasNextRow = rc.w < ${outputHeight - 1};\r\n                bool hasNextCol = rc.z < ${outputWidth - 1};\r\n\r\n                // pack x00, x01, x10, x11's top-left corner into one vec4 structure\r\n                vec4 topLeft = vec4(\r\n                    getAValue(batch, depth, x00.x, x00.y),\r\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.y) : 0.0,\r\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.y) : 0.0,\r\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.y) : 0.0);\r\n\r\n                // pack x00, x01, x10, x11's top-right corner into one vec4 structure\r\n                vec4 topRight = vec4(\r\n                    getAValue(batch, depth, x00.x, x00.w),\r\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.w) : 0.0,\r\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.w) : 0.0,\r\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.w) : 0.0);\r\n\r\n                // pack x00, x01, x10, x11's bottom-left corner into one vec4 structure\r\n                vec4 bottomLeft = vec4(\r\n                    getAValue(batch, depth, x00.z, x00.y),\r\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.y) : 0.0,\r\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.y) : 0.0,\r\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.y) : 0.0);\r\n\r\n                // pack x00, x01, x10, x11's bottom-right corner into one vec4 structure\r\n                vec4 bottomRight = vec4(\r\n                    getAValue(batch, depth, x00.z, x00.w),\r\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.w) : 0.0,\r\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.w) : 0.0,\r\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.w) : 0.0);\r\n\r\n                // calculate the interpolation fraction on u and v direction\r\n                vec4 frac = vec4(sourceFrac) - floor(sourceFrac);\r\n                vec4 clampFrac = clamp(frac, vec4(0.0), vec4(1.0));\r\n\r\n                vec4 top = mix(topLeft, topRight, clampFrac.ywyw);\r\n                vec4 bottom = mix(bottomLeft, bottomRight, clampFrac.ywyw);\r\n                vec4 newValue = mix(top, bottom, clampFrac.xxzz);\r\n\r\n                ${glsl.output} = vec4(newValue);\r\n            }\r\n        `;\r\n      return {\r\n        ...resizeProgramMetadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\r\n        hasMain: true,\r\n        shaderSource\r\n      };\r\n    };\r\n\r\n\r\nconst prepareInputs = (inputs: Tensor[], attributes: UpsampleAttributes): [readonly number[], readonly number[]] => {\r\n  const x = inputs[0];\r\n  const xDims = x.dims;\r\n\r\n  let scales = attributes.scales;\r\n  let outputSizes: number[]|undefined;\r\n  if (scales.length === 0) {\r\n    const scalesTensor = inputs[attributes.scalesInputIdx];\r\n    if (scalesTensor && scalesTensor.size !== 0) {\r\n      if (inputs[attributes.sizesInputIdx]) {\r\n        throw new Error('Only one of scales or sizes must be provided as input.');\r\n      }\r\n      scales = parseScalesData(scalesTensor, attributes.mode, attributes.isResize);\r\n    } else {\r\n      const sizesTensor = inputs[attributes.sizesInputIdx];\r\n      if (!sizesTensor || sizesTensor.size === 0) {\r\n        throw new Error('Either scales or sizes MUST be provided as input.');\r\n      }\r\n\r\n      outputSizes = Array.from(sizesTensor.integerData);\r\n      scales = parseScalesDataFromOutputSize(outputSizes, xDims, attributes.mode, attributes.isResize);\r\n    }\r\n  } else {\r\n    if (inputs[attributes.sizesInputIdx]) {\r\n      throw new Error('Only one of scales or sizes must be provided as input.');\r\n    }\r\n  }\r\n\r\n  const yDims = outputSizes || (xDims.map((dim, i) => Math.floor(dim * scales[i])));\r\n\r\n  return [scales, yDims];\r\n};\r\n\r\nconst parseScalesData = (scale: Tensor, mode: string, isResize: boolean): number[] => {\r\n  const scales = Array.from(scale.floatData);\r\n  scalesValidation(scales, mode, isResize);\r\n  return scales;\r\n};\r\n\r\nconst parseScalesDataFromOutputSize =\r\n    (yDims: readonly number[], xDims: readonly number[], mode: string, isResize: boolean): number[] => {\r\n      const length = xDims.length;\r\n      const scales = new Array<number>(length);\r\n\r\n      for (let i = 0, end = length; i < end; i++) {\r\n        if (xDims[i] === 0) {\r\n          if (yDims[i] !== 0) {\r\n            throw new Error('Input dim is zero but required output dim is non-zero.');\r\n          }\r\n          scales[i] = 1;\r\n        } else {\r\n          scales[i] = yDims[i] / xDims[i];\r\n        }\r\n      }\r\n      scalesValidation(scales, mode, isResize);\r\n      return scales;\r\n    };\r\n\r\n// roi data is not used yet. but leave here for future usage.\r\n// const getRoi = (inputs: Tensor[], attributes: UpsampleAttributes) : number[] => {\r\n//     let roi: number[] = [];\r\n//     if (attributes.needRoiInput) {\r\n//         if (attributes.roiInputIdx <= 0) {\r\n//             throw new Error('Invalid roi input index.');\r\n//         }\r\n//         const roiTensor = inputs[attributes.roiInputIdx];\r\n//         roi = roiTensor.size > 0 ? Array.from(roiTensor.floatData) : [];\r\n//     } else {\r\n//         roi = new Array(inputs[0].dims.length * 2).fill(0);\r\n//     }\r\n//     return roi;\r\n// };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nexport const shape = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\r\n  validateInputs(inputs);\r\n  return [new Tensor([inputs[0].dims.length], 'int32', undefined, undefined, new Int32Array(inputs[0].dims))];\r\n};\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Shape requires 1 input.');\r\n  }\r\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, TextureType} from '../types';\r\n\r\nexport interface SliceAttributes extends AttributeWithCacheKey {\r\n  readonly axes: number[];\r\n  readonly ends: number[];\r\n  readonly starts: number[];\r\n}\r\n\r\nconst sliceProgramMetadata = {\r\n  name: 'Slice',\r\n  inputNames: ['A'],\r\n  inputTypes: [TextureType.unpacked]\r\n};\r\n\r\nexport const slice: OperatorImplementation<SliceAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SliceAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const output = inferenceHandler.run(\r\n          {\r\n            ...sliceProgramMetadata,\r\n            cacheHint: attributes.cacheKey,\r\n            get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\r\n          },\r\n          inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseSliceAttributes: OperatorInitialization<SliceAttributes> = (node: Graph.Node): SliceAttributes => {\r\n  const starts = node.attributes.getInts('starts');\r\n  const ends = node.attributes.getInts('ends');\r\n  const axes = node.attributes.getInts('axes', []);\r\n  return createAttributeWithCacheKey({starts, ends, axes});\r\n};\r\n\r\nconst createSliceProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SliceAttributes): ProgramInfo => {\r\n      const axes = (attributes.axes.length === 0) ? input.dims.slice(0).map((val, i) => i) : attributes.axes;\r\n      const normalizedAxes = ShapeUtil.normalizeAxes(axes, input.dims.length);\r\n      const starts = attributes.starts.map((start, i) => {\r\n        if (start > input.dims[normalizedAxes[i]] - 1) {\r\n          return input.dims[normalizedAxes[i]];\r\n        }\r\n        return ShapeUtil.normalizeAxis(start, input.dims[normalizedAxes[i]]);\r\n      });\r\n      const ends = attributes.ends.map((end, i) => {\r\n        if (end > input.dims[normalizedAxes[i]] - 1) {\r\n          return input.dims[normalizedAxes[i]];\r\n        }\r\n        return ShapeUtil.normalizeAxis(end, input.dims[normalizedAxes[i]]);\r\n      });\r\n\r\n      const outputShape = input.dims.slice();\r\n\r\n      const sliceOps: string[] = [];\r\n      for (let i = 0; i < normalizedAxes.length; i++) {\r\n        outputShape[normalizedAxes[i]] = ends[i] - starts[i];\r\n        if (starts[i] > 0) {\r\n          sliceOps.push(`outputIdx[${normalizedAxes[i]}] += ${starts[i]};`);\r\n        }  // else { sliceOps.push(`outputIdx[${normalizedAxes[i]}] += 0;`); }\r\n      }\r\n\r\n      const rank = outputShape.length;\r\n      const shaderSource = `\r\n      float process(int outputIdx[${rank}]) {\r\n        ${sliceOps.join('\\n      ')}\r\n        return _A(outputIdx);\r\n      }`;\r\n      return {\r\n        ...sliceProgramMetadata,\r\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Slice requires 1 input.');\r\n  }\r\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n\r\nexport const sliceV10 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\r\n  validateInputsV10(inputs);\r\n  const attributes = generateSliceAttributesFromInputs(inferenceHandler, inputs);\r\n  const output = inferenceHandler.run(\r\n      {\r\n        ...sliceProgramMetadata,\r\n        cacheHint: attributes.cacheKey,\r\n        get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\r\n      },\r\n      [inputs[0]]);\r\n  return [output];\r\n};\r\n\r\nconst generateSliceAttributesFromInputs =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): SliceAttributes => {\r\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\r\n          !inferenceHandler.session.isInitializer(inputs[2].dataId) ||\r\n          (inputs.length >= 4 && !inferenceHandler.session.isInitializer(inputs[3].dataId)) ||\r\n          (inputs.length >= 5 && !inferenceHandler.session.isInitializer(inputs[4].dataId))) {\r\n        throw new Error('dynamic slice attributes are not allowed');\r\n      }\r\n\r\n      if (inputs.length >= 5 && inputs[4].integerData.some((i: number) => i !== 1)) {\r\n        throw new Error('currently non-1 steps is not supported for Slice');\r\n      }\r\n\r\n      const starts = Array.from(inputs[1].integerData);\r\n      const ends = Array.from(inputs[2].integerData);\r\n      const axes = inputs.length >= 4 ? Array.from(inputs[3].integerData) : [];\r\n      const cacheKey = `${axes};${starts};${ends}`;\r\n      return {starts, ends, axes, cacheKey};\r\n    };\r\n\r\nconst validateInputsV10 = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length < 3 || inputs.length > 5) {\r\n    throw new Error('Invalid input number.');\r\n  }\r\n  if (inputs[1].type !== 'int32' || inputs[1].dims.length !== 1) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n  if (inputs[2].type !== 'int32' || inputs[2].dims.length !== 1) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n  if (inputs.length >= 4 && (inputs[3].type !== 'int32' || inputs[3].dims.length !== 1)) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n  if (inputs.length >= 5 && (inputs[4].type !== 'int32' || inputs[4].dims.length !== 1)) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, TextureType} from '../types';\r\n\r\nimport {transpose, TransposeAttributes} from './transpose';\r\n\r\nexport interface SoftmaxAttributes extends AttributeWithCacheKey {\r\n  readonly axis: number;\r\n}\r\n\r\nconst softmaxComputeMaxProgramMetadata = {\r\n  name: 'SoftmaxComputeMax',\r\n  inputNames: ['A'],\r\n  inputTypes: [TextureType.unpacked],\r\n};\r\n\r\nconst softmaxComputeScaleProgramMetadata = {\r\n  name: 'SoftmaxComputeScale',\r\n  inputNames: ['A', 'Max'],\r\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\r\n};\r\n\r\nconst softmaxProgramMetadata = {\r\n  name: 'SoftMax',\r\n  inputNames: ['A', 'Max', 'Norm'],\r\n  inputTypes: [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked],\r\n};\r\n\r\nexport const softmax: OperatorImplementation<SoftmaxAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n\r\n      const inputShape = inputs[0].dims.slice();\r\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\r\n      const logicalRowCount = ShapeUtil.sizeToDimension(inputShape, axis);\r\n      const featureCount = ShapeUtil.sizeFromDimension(inputShape, axis);\r\n\r\n      const output = computeSoftmax(inferenceHandler, inputs, attributes, logicalRowCount, featureCount);\r\n      return output;\r\n    };\r\n\r\nexport const parseSoftmaxAttributes: OperatorInitialization<SoftmaxAttributes> =\r\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 1)});\r\n\r\nexport const parseSoftmaxAttributesV13: OperatorInitialization<SoftmaxAttributes> =\r\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', -1)});\r\n\r\n// The \"semantic\" meaning of axis has changed in opset-13.\r\n// Please compare: https://github.com/onnx/onnx/blob/main/docs/Operators.md#Softmax\r\n// with https://github.com/onnx/onnx/blob/main/docs/Changelog.md#Softmax-11 for detailed explanations\r\n// To account for the opset-13 behavior, our plan will be to transpose the \"axis\" dim to the innermost dim\r\n// and perform softmax and then reverse the transpose. We can skip the transposing aspect if the axis is already\r\n// the innermost dim\r\nexport const softmaxV13: OperatorImplementation<SoftmaxAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n\r\n      const inputShape = inputs[0].dims.slice();\r\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\r\n      const rank = inputShape.length;\r\n\r\n      const isTransposeRequired = (axis !== rank - 1) ? true : false;\r\n      const transposedInputShape: number[] = [];\r\n      let perm: number[] = [];\r\n      let transposedInputs: Tensor[] = [];\r\n      let transposeAttribute: TransposeAttributes;\r\n\r\n      if (isTransposeRequired) {\r\n        perm = Array.from({length: rank}).map((_, i) => i);\r\n\r\n        // swap the innermost dim with the dim corresponding to axis\r\n        perm[axis] = rank - 1;\r\n        perm[rank - 1] = axis;\r\n\r\n        perm.map(p => transposedInputShape.push(inputShape[p]));\r\n\r\n        transposeAttribute = createAttributeWithCacheKey({perm});\r\n        transposedInputs = transpose(inferenceHandler, inputs, transposeAttribute);\r\n      }\r\n\r\n      const logicalRowCount = isTransposeRequired ? ShapeUtil.sizeToDimension(transposedInputShape, rank - 1) :\r\n                                                    ShapeUtil.sizeToDimension(inputShape, rank - 1);\r\n      const featureCount = isTransposeRequired ? ShapeUtil.sizeFromDimension(transposedInputShape, rank - 1) :\r\n                                                 ShapeUtil.sizeFromDimension(inputShape, rank - 1);\r\n\r\n      const output = computeSoftmax(\r\n          inferenceHandler, isTransposeRequired ? transposedInputs : inputs, attributes, logicalRowCount, featureCount);\r\n\r\n      if (isTransposeRequired) {\r\n        const reversedOutput = transpose(inferenceHandler, output, transposeAttribute!);\r\n        return reversedOutput;\r\n      } else {\r\n        return output;\r\n      }\r\n    };\r\n\r\nconst computeSoftmax =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes, logicalRowCount: number,\r\n     featureCount: number): Tensor[] => {\r\n      const computeMaxProgramInfo =\r\n          createComputeMaxProgramInfo(inferenceHandler, inputs[0], logicalRowCount, featureCount, [logicalRowCount]);\r\n      const max = inferenceHandler.run(\r\n          {...softmaxComputeMaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeMaxProgramInfo},\r\n          inputs);\r\n\r\n      const computeScaleProgramInfo = createComputScaleProgramInfo(\r\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\r\n          [logicalRowCount]);\r\n      const scale = inferenceHandler.run(\r\n          {...softmaxComputeScaleProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeScaleProgramInfo},\r\n          [inputs[0], max]);\r\n\r\n      const softMaxProgramInfo = createSoftMaxProgramInfo(\r\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\r\n          computeScaleProgramInfo.output.dims);\r\n      const output = inferenceHandler.run(\r\n          {...softmaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => softMaxProgramInfo},\r\n          [inputs[0], max, scale]);\r\n      return [output];\r\n    };\r\n\r\n/**\r\n * Create a texture that contains the maximum value of each of the 'N' rows\r\n */\r\nconst createComputeMaxProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\r\n     outputShape: number[]): ProgramInfo => {\r\n      const [textureWidth, textureHeight] =\r\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\r\n      const rank = outputShape.length;\r\n\r\n      if (logicalRowCount < 1 || featureCount < 1) {\r\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\r\n      }\r\n\r\n      if (outputShape.length !== 1) {\r\n        throw new Error('Dimensionality of the output should be 1');\r\n      }\r\n\r\n      if (outputShape[0] !== logicalRowCount) {\r\n        throw new Error('Shape of the output should be equal to logical row count');\r\n      }\r\n\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const shaderSource = `\r\n      float process(int[${rank}] indices) {\r\n        int logical_row_start_offset = indices[0] * ${featureCount};\r\n\r\n        float max = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset, ${textureWidth},\r\n        ${textureHeight} )));\r\n        for(int i=1; i<${featureCount}; ++i)\r\n        {\r\n          float current = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\r\n            ${textureWidth}, ${textureHeight})));\r\n          if(current > max)\r\n          max = current;\r\n        }\r\n\r\n        return max;\r\n      }`;\r\n      return {\r\n        ...softmaxComputeMaxProgramMetadata,\r\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\n/**\r\n * Create a texture that contains the normalization factor for each of the 'N' rows\r\n */\r\nconst createComputScaleProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\r\n     maxElementPerLogicalRow: readonly number[], outputShape: number[]): ProgramInfo => {\r\n      const [textureWidth, textureHeight] =\r\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\r\n      const rank = outputShape.length;\r\n\r\n      if (logicalRowCount < 1 || featureCount < 1) {\r\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\r\n      }\r\n\r\n      if (outputShape.length !== 1) {\r\n        throw new Error('Dimensionality of the output should be 1');\r\n      }\r\n\r\n      if (outputShape[0] !== logicalRowCount) {\r\n        throw new Error('Shape of the output should be equal to logical row count');\r\n      }\r\n\r\n      if (maxElementPerLogicalRow.length !== 1) {\r\n        throw new Error('Dimensionality of the intermediate results should be 1');\r\n      }\r\n\r\n      if (maxElementPerLogicalRow[0] !== logicalRowCount) {\r\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\r\n      }\r\n\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const shaderSource = `\r\n      float process(int[${rank}] indices) {\r\n        int logical_row_start_offset = indices[0] * ${featureCount};\r\n\r\n        float norm_factor = 0.0;\r\n        float max = _Max(indices);\r\n        for(int i=0; i<${featureCount}; ++i)\r\n        {\r\n          norm_factor += exp(getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\r\n            ${textureWidth}, ${textureHeight}))) - max);\r\n        }\r\n\r\n        return norm_factor;\r\n      }`;\r\n      return {\r\n        ...softmaxComputeScaleProgramMetadata,\r\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst createSoftMaxProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\r\n     maxElementPerLogicalRow: readonly number[], normalizationPerLogicalRow: readonly number[]): ProgramInfo => {\r\n      const [textureWidth, textureHeight] =\r\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\r\n      const rank = input.dims.length;\r\n\r\n      if (logicalRowCount < 1 || featureCount < 1) {\r\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\r\n      }\r\n\r\n      if (maxElementPerLogicalRow.length !== 1 || normalizationPerLogicalRow.length !== 1) {\r\n        throw new Error('Dimensionality of the intermediate results should be 1');\r\n      }\r\n\r\n      if (maxElementPerLogicalRow[0] !== logicalRowCount || normalizationPerLogicalRow[0] !== logicalRowCount) {\r\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\r\n      }\r\n\r\n      const shaderSource = `\r\n      float process(int[${rank}] indices) {\r\n\r\n      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)\r\n      int offset = coordsToOffset(TexCoords, ${textureWidth}, ${textureHeight});\r\n\r\n      //determine the logical row for this index\r\n      int logical_row_index[1];\r\n      logical_row_index[0] = offset / ${featureCount};\r\n\r\n      float norm_factor = _Norm(logical_row_index);\r\n\r\n      // avoid possible division by 0\r\n      // if norm_facor is 0, all elements are zero\r\n      // if so, return 0\r\n      if(norm_factor == 0.0)\r\n        return 0.0;\r\n\r\n      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;\r\n    }`;\r\n      return {\r\n        ...softmaxProgramMetadata,\r\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Softmax requires 1 input.');\r\n  }\r\n\r\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n    throw new Error('Invalid input type');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil, SplitUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, TextureType} from '../types';\r\n\r\nexport interface SplitAttributes extends AttributeWithCacheKey {\r\n  readonly axis: number;\r\n  readonly split: number[];\r\n  readonly numOutputs: number;\r\n}\r\n\r\nconst splitProgramMetadata = {\r\n  name: 'Split',\r\n  inputNames: ['A'],\r\n  inputTypes: [TextureType.unpacked],\r\n};\r\n\r\nexport const split: OperatorImplementation<SplitAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SplitAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n\r\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputs[0].dims.length);\r\n      const count = getProgramCount(inferenceHandler, inputs, axis, attributes);\r\n      const output: Tensor[] = [];\r\n      for (let i = 0; i < count; ++i) {\r\n        output.push(inferenceHandler.run(\r\n            {\r\n              ...splitProgramMetadata,\r\n              cacheHint: `${attributes.cacheKey};${i}`,\r\n              get: () => createSplitProgramInfo(inferenceHandler, inputs[0], attributes, axis, i)\r\n            },\r\n            inputs));\r\n      }\r\n\r\n      return output;\r\n    };\r\n\r\nexport const parseSplitAttributes: OperatorInitialization<SplitAttributes> = (node: Graph.Node): SplitAttributes => {\r\n  const axis = node.attributes.getInt('axis', 0);\r\n  const split = node.attributes.getInts('split', []);\r\n  const numOutputs = node.outputs.length;\r\n  return createAttributeWithCacheKey({axis, split, numOutputs});\r\n};\r\n\r\nconst getProgramCount =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number, attributes: SplitAttributes): number => {\r\n      const [, offsets] = SplitUtil.splitShape(inputs[0].dims, axis, attributes.split, attributes.numOutputs);\r\n      return offsets.length;\r\n    };\r\n\r\nconst createSplitProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SplitAttributes, axis: number, index: number):\r\n        ProgramInfo => {\r\n          const [shapes, offsets] = SplitUtil.splitShape(input.dims, axis, attributes.split, attributes.numOutputs);\r\n          const offset = offsets[index];\r\n          const outputShape = shapes[index];\r\n          const rank = outputShape.length;\r\n          const shaderSource = `\r\n      float process(int indices[${rank}]) {\r\n        indices[${axis}] += ${offset};\r\n        return _A(indices);\r\n      }\r\n    `;\r\n          return {\r\n            ...splitProgramMetadata,\r\n            cacheHint: `${attributes.cacheKey}:${index}`,\r\n            output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\r\n            shaderSource\r\n          };\r\n        };\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Split requires one input.');\r\n  }\r\n\r\n  if (inputs[0].type !== 'int8' && inputs[0].type !== 'uint8' && inputs[0].type !== 'int16' &&\r\n      inputs[0].type !== 'uint16' && inputs[0].type !== 'int32' && inputs[0].type !== 'uint32' &&\r\n      inputs[0].type !== 'float32' && inputs[0].type !== 'float64' && inputs[0].type !== 'bool') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nexport const squeeze: OperatorImplementation<number[]> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const outputShape = ShapeUtil.squeezeShape(inputs[0].dims, axes);\r\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\r\n      return [output];\r\n    };\r\n\r\nexport const squeezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\r\n  validateInputsV13(inputs);\r\n  return squeeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\r\n};\r\n\r\nexport const parseSqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\r\n    node.attributes.getInts('axes');\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Squeeze requires 1 input.');\r\n  }\r\n\r\n  if (inputs[0].type === 'string') {\r\n    throw new Error('invalid input tensor types.');\r\n  }\r\n};\r\n\r\nconst validateInputsV13 = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 2) {\r\n    throw new Error('Squeeze requires 2 inputs.');\r\n  }\r\n\r\n  if (inputs[1].type !== 'int32') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\r\n\r\nexport const sum = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\r\n  validateInputs(inputs);\r\n\r\n  const sumProgramMetadata = {\r\n    name: 'Sum',\r\n    inputNames: inputs.map((v, i) => `X${i}`),\r\n    inputTypes: new Array(inputs.length).fill(TextureType.unpacked)\r\n  };\r\n\r\n  const output = inferenceHandler.run(\r\n      {...sumProgramMetadata, get: () => createSumProgramInfo(inferenceHandler, inputs, sumProgramMetadata)}, inputs);\r\n  return [output];\r\n};\r\n\r\nconst createSumProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], sumProgramMetadata: ProgramMetadata): ProgramInfo => {\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const outputShape = inputs[0].dims.slice();\r\n      const sumLine = inputs.map((v, i) => `${glsl.texture2D}(X${i},TexCoords)`).join(' + ');\r\n      const shaderSource = `\r\n      void main() {\r\n        vec4 result = ${sumLine};\r\n        ${glsl.output} = result;\r\n      }\r\n    `;\r\n      return {\r\n        ...sumProgramMetadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        hasMain: true,\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length === 0) {\r\n    throw new Error('Sum requires inputs.');\r\n  }\r\n\r\n  const length = inputs[0].dims.length;\r\n  for (let i = 1; i < inputs.length; i++) {\r\n    if (length !== inputs[i].dims.length) {\r\n      throw new Error('Input shapes are mismatched.');\r\n    }\r\n\r\n    for (let j = 0; j < length; j++) {\r\n      if (inputs[0].dims[j] !== inputs[i].dims[j]) {\r\n        throw new Error('Input shapes are not matched.');\r\n      }\r\n    }\r\n  }\r\n\r\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n  for (let i = 1; i < inputs.length; i++) {\r\n    if (inputs[0].type !== inputs[i].type) {\r\n      throw new Error('Input types are not matched.');\r\n    }\r\n  }\r\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {NUMBER_TYPES} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\r\n\r\nexport const tile = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\r\n  validateInputs(inputs);\r\n\r\n  const tileProgramMetadata = {\r\n    name: 'Tile',\r\n    inputNames: ['A'],\r\n    inputTypes: [TextureType.unpacked],\r\n  };\r\n\r\n  const output = inferenceHandler.run(\r\n      {...tileProgramMetadata, get: () => createTileProgramInfo(inferenceHandler, inputs, tileProgramMetadata)},\r\n      inputs);\r\n  return [output];\r\n};\r\n\r\nconst createTileProgramInfo =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], tileProgramMetadata: ProgramMetadata): ProgramInfo => {\r\n      const inputShape = inputs[0].dims.slice();\r\n      const outputShape = new Array(inputShape.length);\r\n\r\n      const tileOps: string[] = [];\r\n      for (let i = 0; i < inputShape.length; i++) {\r\n        outputShape[i] = inputShape[i] * inputs[1].numberData[i];\r\n        tileOps.push(`inputIdx[${i}] = int(mod(float(outputIdx[${i}]), ${inputShape[i]}.));`);\r\n      }\r\n\r\n      const rank = outputShape.length;\r\n      const shaderSource = `\r\n      float process(int outputIdx[${rank}]) {\r\n        int inputIdx[${rank}];\r\n        ${tileOps.join('\\n')}\r\n        return _A(inputIdx);\r\n      }\r\n    `;\r\n      return {\r\n        ...tileProgramMetadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 2) {\r\n    throw new Error('Tile requires 2 input.');\r\n  }\r\n  if (inputs[1].dims.length !== 1) {\r\n    throw new Error('The second input shape must 1 dimension.');\r\n  }\r\n  if (inputs[1].dims[0] !== inputs[0].dims.length) {\r\n    throw new Error('Invalid input shape.');\r\n  }\r\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\r\n    throw new Error('Invalid repeat type.');\r\n  }\r\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, TextureType} from '../types';\r\n\r\nexport interface TransposeAttributes extends AttributeWithCacheKey {\r\n  readonly perm: number[];\r\n}\r\n\r\nconst transposeProgramMetadata = {\r\n  name: 'Transpose',\r\n  inputNames: ['A'],\r\n  inputTypes: [TextureType.unpacked]\r\n};\r\n\r\nexport const transpose: OperatorImplementation<TransposeAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: TransposeAttributes): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const output = inferenceHandler.run(\r\n          {\r\n            ...transposeProgramMetadata,\r\n            cacheHint: attributes.cacheKey,\r\n            get: () => createTransposeProgramInfo(inferenceHandler, inputs[0], attributes.perm)\r\n          },\r\n          inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseTransposeAttributes: OperatorInitialization<TransposeAttributes> =\r\n    (node: Graph.Node): TransposeAttributes => createAttributeWithCacheKey({perm: node.attributes.getInts('perm', [])});\r\n\r\nconst createTransposeProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, perm: number[]): ProgramInfo => {\r\n      const inputShape = input.dims;\r\n      perm = getAdjustedPerm(inputShape, perm);\r\n      const unpackedOutputShape = getOutputShape(inputShape, perm);\r\n      const rank = inputShape.length;\r\n      // A dims=[${inputs[0].dims.toString()}]\r\n      // out Dims=[${unpackedOutputShape.toString()}]\r\n      // based on perm=[${perm.toString()}]\r\n      const shaderSource = `\r\n      ${getPermFunctionBody('perm', perm, rank)}\r\n      float process(int indices[${rank}]) {\r\n        int a[${rank}];\r\n        perm(a, indices);\r\n        return _A(a);\r\n      }`;\r\n      return {\r\n        ...transposeProgramMetadata,\r\n        output: {dims: unpackedOutputShape, type: input.type, textureType: TextureType.unpacked},\r\n        shaderSource\r\n      };\r\n    };\r\n\r\nconst getAdjustedPerm = (inputShape: readonly number[], perm: number[]): number[] => {\r\n  if (perm && perm.length !== inputShape.length) {\r\n    perm = [...(inputShape.keys())].reverse();\r\n  }\r\n  return perm;\r\n};\r\n\r\nconst getOutputShape = (inputShape: readonly number[], perm: number[]): readonly number[] => {\r\n  perm = getAdjustedPerm(inputShape, perm);\r\n  return ShapeUtil.sortBasedOnPerm(inputShape, perm);\r\n};\r\n\r\nconst getPermFunctionBody = (name: string, perm: number[], rank: number): string => {\r\n  const reverseFunc = [];\r\n  reverseFunc.push(`void ${name}(out int a[${rank}], int src[${rank}]) {`);\r\n  for (let i = 0; i < rank; ++i) {\r\n    reverseFunc.push(`\\ta[${perm[i]}]=src[${i}];`);\r\n  }\r\n  reverseFunc.push('\\t}');\r\n  return reverseFunc.join('\\n');\r\n};\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Transpose requires 1 input.');\r\n  }\r\n\r\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n    throw new Error('input should be float tensor');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {TextureData, TextureType} from '../types';\r\n\r\nexport const encodeAsUint8 = (inferenceHandler: WebGLInferenceHandler, input: TextureData): TextureData => {\r\n  const outputShape = input.shape;\r\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n  /**\r\n   * https://github.com/tensorflow/tfjs-core/blob/master/src/kernels/webgl/encode_float_gpu.ts\r\n   */\r\n  const shaderSource = `\r\n    const float FLOAT_MAX = 1.70141184e38;\r\n    const float FLOAT_MIN = 1.17549435e-38;\r\n\r\n    bool isNaN(float val) {\r\n      return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;\r\n    }\r\n\r\n    highp vec4 encodeAsUint8(highp float v) {\r\n      if (isNaN(v)) {\r\n        return vec4(255, 255, 255, 255);\r\n      }\r\n\r\n      highp float av = abs(v);\r\n\r\n      if(av < FLOAT_MIN) {\r\n        return vec4(0.0, 0.0, 0.0, 0.0);\r\n      } else if(v > FLOAT_MAX) {\r\n        return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\r\n      } else if(v < -FLOAT_MAX) {\r\n        return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\r\n      }\r\n\r\n      highp vec4 c = vec4(0,0,0,0);\r\n\r\n      highp float e = floor(log2(av));\r\n      highp float m = exp2(fract(log2(av))) - 1.0;\r\n\r\n      c[2] = floor(128.0 * m);\r\n      m -= c[2] / 128.0;\r\n      c[1] = floor(32768.0 * m);\r\n      m -= c[1] / 32768.0;\r\n      c[0] = floor(8388608.0 * m);\r\n\r\n      highp float ebias = e + 127.0;\r\n      c[3] = floor(ebias / 2.0);\r\n      ebias -= c[3] * 2.0;\r\n      c[2] += floor(ebias) * 128.0;\r\n\r\n      c[3] += 128.0 * step(0.0, -v);\r\n\r\n      return c / 255.0;\r\n    }\r\n\r\n    void main() {\r\n      float value = ${glsl.texture2D}(X,TexCoords).r;\r\n      ${glsl.output} = encodeAsUint8(value);\r\n    }`;\r\n  const programInfo = {\r\n    name: 'Uint8Encode',\r\n    inputTypes: [TextureType.unpacked],\r\n    inputNames: ['X'],\r\n    output: {dims: outputShape, type: input.tensor.type, textureType: TextureType.downloadUint8AsFloat},\r\n    shaderSource,\r\n    hasMain: true\r\n  };\r\n  return inferenceHandler.executeProgram(programInfo, [input.tensor]);\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {Tensor} from '../../../tensor';\r\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\r\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\r\n\r\nexport function glslAbs(): GlslValueFunction {\r\n  return glslBuiltinUnary('abs');\r\n}\r\nexport function glslAcos(): GlslValueFunction {\r\n  return glslBuiltinUnary('acos');\r\n}\r\nexport function glslAsin(): GlslValueFunction {\r\n  return glslBuiltinUnary('asin');\r\n}\r\nexport function glslAtan(): GlslValueFunction {\r\n  return glslBuiltinUnary('atan');\r\n}\r\nexport function glslCeil(): GlslValueFunction {\r\n  return glslBuiltinUnary('ceil');\r\n}\r\nexport function glslCos(): GlslValueFunction {\r\n  return glslBuiltinUnary('cos');\r\n}\r\nexport function glslElu(alpha: number): GlslValueFunction {\r\n  const name = 'elu';\r\n  const body = `\r\n  const float alpha = float(${alpha});\r\n\r\n  float ${name}_(float a) {\r\n    return a >= 0.0 ? a: (exp(a) - 1.0) * alpha;\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslExp(): GlslValueFunction {\r\n  return glslBuiltinUnary('exp');\r\n}\r\nexport function glslFloor(): GlslValueFunction {\r\n  return glslBuiltinUnary('floor');\r\n}\r\nexport function glslClip(min: number, max: number): GlslValueFunction {\r\n  const name = 'clip';\r\n  const body = `\r\n  const float min = float(${min});\r\n  const float max = float(${max});\r\n\r\n  float ${name}_(float a) {\r\n    return clamp(a, min, max);\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    return clamp(v, min, max);\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslIdentity(): GlslValueFunction {\r\n  const name = 'indentity';\r\n  const body = `\r\n  float ${name}_(float a) {\r\n    return a;\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    return v;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslLeakyRelu(alpha: number): GlslValueFunction {\r\n  const name = 'leakyRelu';\r\n  const body = `\r\n  const float alpha = float(${alpha});\r\n\r\n  float ${name}_(float a) {\r\n    return a < 0.0 ? a * alpha : a;\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslLog(): GlslValueFunction {\r\n  return glslBuiltinUnary('log');\r\n}\r\nexport function glslNeg(): GlslValueFunction {\r\n  const name = 'neg';\r\n  const body = `\r\n  float ${name}_(float a) {\r\n    return -a;\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    return -v;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslNot(): GlslValueFunction {\r\n  const name = 'not';\r\n  const body = `\r\n  float ${name}_(float a) {\r\n    return float( ! bool(a) );\r\n  }\r\n  bool ${name}_(bool a) {\r\n    return !a;\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));\r\n  }\r\n  bvec4 ${name}_(bvec4 v) {\r\n    return bvec4(!v.x, !v.y, !v.z, !v.w);\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslSin(): GlslValueFunction {\r\n  return glslBuiltinUnary('sin');\r\n}\r\nexport function glslRelu(): GlslValueFunction {\r\n  const name = 'relu';\r\n  const body = `\r\n  float ${name}_(float a) {\r\n    return max( a, 0.0 );\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    return max( v, 0.0 );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslSigmoid(): GlslValueFunction {\r\n  const name = 'sigmoid';\r\n  const body = `\r\n  float ${name}_(float a) {\r\n    return 1.0 / (1.0 + exp(-a));\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    return 1.0 / (1.0 + exp(-v));\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslSqrt(): GlslValueFunction {\r\n  return glslBuiltinUnary('sqrt');\r\n}\r\nexport function glslTan(): GlslValueFunction {\r\n  return glslBuiltinUnary('tan');\r\n}\r\nexport function glslTanh(): GlslValueFunction {\r\n  const name = 'tanh';\r\n  const body = `\r\n  float ${name}_(float a) {\r\n    a = clamp(a, -10., 10.);\r\n    a = exp(2.*a);\r\n    return (a - 1.) / (a + 1.);\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    v = clamp(v, -10., 10.);\r\n    v = exp(2.*v);\r\n    return (v - 1.) / (v + 1.);\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nfunction glslBuiltinUnary(name: string): GlslValueFunction {\r\n  const body = `\r\n  float ${name}_(float a) {\r\n    return ${name}(a);\r\n  }\r\n  vec4 ${name}_(vec4 v) {\r\n    return ${name}(v);\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\n\r\n/////\r\n/////\r\n/////\r\n\r\nconst createElementwiseProgramInfo =\r\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, glslFunc: GlslValueFunction):\r\n        ProgramInfo => {\r\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\r\n          const glsl = getGlsl(handler.session.backend.glContext.version);\r\n          return {\r\n            ...metadata,\r\n            output: {dims: input.dims, type: input.type, textureType},\r\n            shaderSource: `\r\n     ${glslFunc.body}\r\n     void main() {\r\n       vec4 v = ${glsl.texture2D}(A, TexCoords);\r\n       v = ${glslFunc.name}_(v);\r\n       ${glsl.output} = v;\r\n     }\r\n     `,\r\n            hasMain: true\r\n          };\r\n        };\r\n\r\nconst createElementwiseProgramInfoLoader =\r\n    (handler: WebGLInferenceHandler, input: Tensor, glslFunc: GlslValueFunction, cacheKey?: string):\r\n        ProgramInfoLoader => {\r\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\r\n          const metadata = {name: glslFunc.name, inputTypes: [textureType], inputNames: ['A'], cacheHint: cacheKey};\r\n          return {...metadata, get: () => createElementwiseProgramInfo(handler, metadata, input, glslFunc)};\r\n        };\r\n\r\nexport const abs = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAbs()), inputs)];\r\n\r\nexport const acos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAcos()), inputs)];\r\n\r\nexport const asin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAsin()), inputs)];\r\n\r\nexport const atan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAtan()), inputs)];\r\n\r\nexport interface ClipAttributes extends AttributeWithCacheKey {\r\n  readonly min: number;\r\n  readonly max: number;\r\n}\r\n\r\nexport const clip =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ClipAttributes): Tensor[] => [handler.run(\r\n        createElementwiseProgramInfoLoader(\r\n            handler, inputs[0], glslClip(attributes.min, attributes.max), attributes.cacheKey),\r\n        inputs)];\r\n\r\nexport const parseClipAttributes = (node: Graph.Node): ClipAttributes => createAttributeWithCacheKey(\r\n    {min: node.attributes.getFloat('min', MIN_CLIP), max: node.attributes.getFloat('max', MAX_CLIP)});\r\n\r\nexport const clipV11 = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\r\n  const attributes = generateClipAttributesFromInputs(handler, inputs);\r\n  return clip(handler, [inputs[0]], attributes);\r\n};\r\n\r\nconst generateClipAttributesFromInputs = (handler: WebGLInferenceHandler, inputs: Tensor[]): ClipAttributes => {\r\n  if (inputs.length >= 3 &&\r\n      (!handler.session.isInitializer(inputs[1].dataId) || !handler.session.isInitializer(inputs[2].dataId))) {\r\n    throw new Error('dynamic clip attributes are not allowed');\r\n  }\r\n\r\n  const min = (inputs.length >= 3) ? inputs[1].numberData[0] : MIN_CLIP;\r\n  const max = (inputs.length >= 3) ? inputs[2].numberData[0] : MAX_CLIP;\r\n  return createAttributeWithCacheKey({min, max});\r\n};\r\n\r\nexport const ceil = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCeil()), inputs)];\r\n\r\nexport const cos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCos()), inputs)];\r\n\r\nexport interface EluAttributes extends AttributeWithCacheKey {\r\n  readonly alpha: number;\r\n}\r\n\r\nexport const elu =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: EluAttributes): Tensor[] => [handler.run(\r\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslElu(attributes.alpha), attributes.cacheKey),\r\n        inputs)];\r\n\r\nexport const parseEluAttributes = (node: Graph.Node): EluAttributes =>\r\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 1.0)});\r\n\r\nexport const exp = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslExp()), inputs)];\r\n\r\nexport const floor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslFloor()), inputs)];\r\n\r\nexport const identity = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslIdentity()), inputs)];\r\n\r\nexport interface LeakyReluAttributes extends AttributeWithCacheKey {\r\n  readonly alpha: number;\r\n}\r\n\r\nexport const leakyRelu =\r\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: LeakyReluAttributes): Tensor[] => [handler.run(\r\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslLeakyRelu(attributes.alpha), attributes.cacheKey),\r\n        inputs)];\r\n\r\nexport const parseLeakyReluAttributes = (node: Graph.Node): LeakyReluAttributes =>\r\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 0.01)});\r\n\r\nexport const log = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslLog()), inputs)];\r\n\r\nexport const neg = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNeg()), inputs)];\r\n\r\nexport const not = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNot()), inputs)];\r\n\r\nexport const relu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslRelu()), inputs)];\r\n\r\nexport const sigmoid = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSigmoid()), inputs)];\r\n\r\nexport const sin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSin()), inputs)];\r\n\r\nexport const sqrt = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSqrt()), inputs)];\r\n\r\nexport const tan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTan()), inputs)];\r\n\r\nexport const tanh = (handler: WebGLInferenceHandler, inputs: Tensor[]):\r\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTanh()), inputs)];\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\r\nimport {getCoordsDataType} from '../utils';\r\n\r\nimport {getChannels, unpackFromChannel} from './packing-utils';\r\n\r\nconst unpackProgramMetadata = {\r\n  name: 'unpack',\r\n  inputNames: ['A'],\r\n  inputTypes: [TextureType.packed]\r\n};\r\n\r\nexport const createUnpackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\r\n  const rank = input.dims.length;\r\n\r\n  const channels = getChannels('rc', rank);\r\n  const innerDims = channels.slice(-2);\r\n  const coordsDataType = getCoordsDataType(rank);\r\n  const unpackChannel = unpackFromChannel();\r\n  const isScalar = (input.dims.length === 0);\r\n  const sourceCoords = isScalar ? '' : getSourceCoords(rank, channels);\r\n  const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\r\n  const glsl = getGlsl(handler.session.backend.glContext.version);\r\n  const shaderSource = `\r\n    ${unpackChannel}\r\n    void main() {\r\n      ${coordsDataType} rc = getOutputCoords();\r\n\r\n       // Sample the texture with the coords to get the rgba channel value.\r\n       vec4 packedInput = getA(${sourceCoords});\r\n\r\n       ${glsl.output} = vec4(getChannel(packedInput, ${coords}), 0, 0, 0);\r\n     }\r\n   `;\r\n\r\n  return {\r\n    ...unpackProgramMetadata,\r\n    hasMain: true,\r\n    output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\r\n    shaderSource\r\n  };\r\n};\r\n\r\nexport const createUnpackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\r\n    ({...unpackProgramMetadata, get: () => createUnpackProgramInfo(handler, input)});\r\n\r\nfunction getSourceCoords(rank: number, dims: string[]): string {\r\n  if (rank === 1) {\r\n    return 'rc';\r\n  }\r\n\r\n  let coords = '';\r\n  for (let i = 0; i < rank; i++) {\r\n    coords += dims[i];\r\n    if (i < rank - 1) {\r\n      coords += ',';\r\n    }\r\n  }\r\n  return coords;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nexport const unsqueeze: OperatorImplementation<number[]> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\r\n      validateInputs(inputs);\r\n      const outputShape = ShapeUtil.unsqueezeShape(inputs[0].dims, axes);\r\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\r\n      return [output];\r\n    };\r\n\r\nexport const unsqueezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\r\n  validateInputsV13(inputs);\r\n  return unsqueeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\r\n};\r\n\r\nexport const parseUnsqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\r\n    node.attributes.getInts('axes');\r\n\r\nconst validateInputs = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 1) {\r\n    throw new Error('Unsqueeze requires 1 input.');\r\n  }\r\n\r\n  if (inputs[0].type === 'string') {\r\n    throw new Error('invalid input tensor types.');\r\n  }\r\n};\r\n\r\nconst validateInputsV13 = (inputs: Tensor[]): void => {\r\n  if (!inputs || inputs.length !== 2) {\r\n    throw new Error('Unsqueeze requires 2 inputs.');\r\n  }\r\n\r\n  if (inputs[1].type !== 'int32') {\r\n    throw new Error('Invalid input type.');\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\r\nimport {Graph} from '../../../graph';\r\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, TextureType} from '../types';\r\n\r\nexport interface UpsampleAttributes extends AttributeWithCacheKey {\r\n  readonly opset: number;\r\n  readonly isResize: boolean;\r\n  readonly mode: string;\r\n  readonly scales: number[];\r\n  readonly extrapolationValue: number;\r\n  readonly coordinateTransformMode: string;\r\n  readonly useExtrapolation: boolean;\r\n  readonly needRoiInput: boolean;\r\n  readonly nearestMode: string;\r\n  readonly cubicCoefficientA: number;\r\n  readonly excludeOutside: boolean;\r\n  readonly useNearest2xOptimization: boolean;\r\n  readonly roiInputIdx: number;\r\n  readonly scalesInputIdx: number;\r\n  readonly sizesInputIdx: number;\r\n}\r\n\r\nconst upsampleProgramMetadata = {\r\n  name: 'Upsample',\r\n  inputNames: ['X'],\r\n  inputTypes: [TextureType.unpacked],\r\n};\r\n\r\nexport const upsample: OperatorImplementation<UpsampleAttributes> =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\r\n      validateInputs(inputs, attributes);\r\n      const output = inferenceHandler.run(\r\n          {\r\n            ...upsampleProgramMetadata,\r\n            cacheHint: attributes.cacheKey,\r\n            get: () => createUpsampleProgramInfo(inferenceHandler, inputs, attributes)\r\n          },\r\n          inputs);\r\n      return [output];\r\n    };\r\n\r\nexport const parseUpsampleAttributesV7: OperatorInitialization<UpsampleAttributes> =\r\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 7);\r\n\r\nexport const parseUpsampleAttributesV9: OperatorInitialization<UpsampleAttributes> =\r\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 9);\r\n\r\nexport const parseUpsampleAttributes = (node: Graph.Node, opset: number): UpsampleAttributes => {\r\n  const isResize = (opset >= 10);\r\n\r\n  // processing node attributes\r\n  const mode = node.attributes.getString('mode', 'nearest');\r\n  if (mode !== 'nearest' && mode !== 'linear' && (opset < 11 || mode !== 'cubic')) {\r\n    throw new Error(`unrecognized mode: ${mode}`);\r\n  }\r\n\r\n  let scales: number[] = [];\r\n  if (opset < 9) {\r\n    scales = node.attributes.getFloats('scales');\r\n    scalesValidation(scales, mode, isResize);\r\n  }\r\n\r\n  const extrapolationValue = node.attributes.getFloat('extrapolation_value', 0.0);\r\n\r\n  const coordinateTransformMode =\r\n      opset > 10 ? node.attributes.getString('coordinate_transformation_mode', 'half_pixel') : 'asymmetric';\r\n  if ([\r\n        'asymmetric', 'pytorch_half_pixel', 'tf_half_pixel_for_nn', 'align_corners', 'tf_crop_and_resize', 'half_pixel'\r\n      ].indexOf(coordinateTransformMode) === -1) {\r\n    throw new Error(`coordinate_transform_mode '${coordinateTransformMode}' is not supported`);\r\n  }\r\n  const needRoiInput = (coordinateTransformMode === 'tf_crop_and_resize');\r\n  const useExtrapolation = needRoiInput;\r\n\r\n  const nearestMode =\r\n      (mode === 'nearest' && opset >= 11) ? node.attributes.getString('nearest_mode', 'round_prefer_floor') : '';\r\n  if (['round_prefer_floor', 'round_prefer_ceil', 'floor', 'ceil', ''].indexOf(nearestMode) === -1) {\r\n    throw new Error(`nearest_mode '${nearestMode}' is not supported`);\r\n  }\r\n\r\n  const cubicCoefficientA = node.attributes.getFloat('cubic_coeff_a', -0.75);\r\n  const excludeOutside = node.attributes.getInt('exclude_outside', 0) !== 0;\r\n  if (excludeOutside && mode !== 'cubic') {\r\n    throw new Error('exclude_outside can be set to 1 only when mode is CUBIC.');\r\n  }\r\n\r\n  const useNearest2xOptimization =\r\n      (opset < 11) ? true : (mode === 'nearest' && coordinateTransformMode === 'asymmetric' && nearestMode === 'floor');\r\n\r\n  let roiInputIdx = 0;\r\n  let scalesInputIdx = 0;\r\n  let sizesInputIdx = 0;\r\n\r\n  if (opset > 10) {\r\n    // handle when roiInput is not given\r\n    if (node.inputs.length > 2) {\r\n      roiInputIdx = 1;\r\n      scalesInputIdx = 2;\r\n      sizesInputIdx = 3;\r\n    } else {\r\n      scalesInputIdx = 1;\r\n      sizesInputIdx = 2;\r\n    }\r\n  } else if (opset === 9) {\r\n    scalesInputIdx = 1;\r\n  }\r\n\r\n  return createAttributeWithCacheKey({\r\n    opset,\r\n    isResize,\r\n    mode,\r\n    scales,\r\n    extrapolationValue,\r\n    coordinateTransformMode,\r\n    useExtrapolation,\r\n    needRoiInput,\r\n    nearestMode,\r\n    cubicCoefficientA,\r\n    excludeOutside,\r\n    useNearest2xOptimization,\r\n    roiInputIdx,\r\n    scalesInputIdx,\r\n    sizesInputIdx\r\n  });\r\n};\r\n\r\nconst createUpsampleProgramInfo =\r\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\r\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n      const [inputWidth, inputHeight] =\r\n          inferenceHandler.calculateTextureWidthAndHeight(inputs[0].dims, TextureType.unpacked);\r\n\r\n      const outputShape = inputs[0].dims.map((dim, i) => Math.floor(dim * attributes.scales[i]));\r\n      const [outputWidth, outputHeight] =\r\n          inferenceHandler.calculateTextureWidthAndHeight(outputShape, TextureType.unpacked);\r\n      const dim = outputShape.length;\r\n\r\n      const outputPitches = new Array<number>(dim);\r\n      const inputPitches = new Array<number>(dim);\r\n      let precalculatedPitches = `\r\n      int output_pitches[${dim}];\r\n      int input_pitches[${dim}];\r\n      `;\r\n      for (let d = dim - 1; d >= 0; d--) {\r\n        outputPitches[d] = (d === dim - 1) ? 1 : outputPitches[d + 1] * outputShape[d + 1];\r\n        inputPitches[d] = (d === dim - 1) ? 1 : inputPitches[d + 1] * inputs[0].dims[d + 1];\r\n\r\n        precalculatedPitches += `\r\n        output_pitches[${d}] = ${outputPitches[d]};\r\n        input_pitches[${d}] = ${inputPitches[d]};\r\n        `;\r\n      }\r\n      const getInputFloatFunction = `\r\n      float getInputFloat(int index) {\r\n        vec2 coords = offsetToCoords(index, ${inputWidth}, ${inputHeight});\r\n        float value = getColorAsFloat(${glsl.texture2D}(X, coords));\r\n        return value;\r\n      }\r\n      `;\r\n\r\n      const shaderSource = attributes.mode === 'nearest' ?\r\n          // nearest\r\n          `\r\n    ${getInputFloatFunction}\r\n    float process(int indices[${dim}]) {\r\n      int input_index = 0;\r\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\r\n\r\n      ${precalculatedPitches}\r\n\r\n      int d, m;\r\n      for (int dim = 0; dim < ${dim}; ++dim) {\r\n        d = output_index / output_pitches[dim];\r\n        m = output_index - d * output_pitches[dim];\r\n        output_index = m;\r\n\r\n        if (scales[dim] != 1 && d > 0) {\r\n          int d2 = d / scales[dim];\r\n          m = d - d2 * scales[dim];\r\n          d = d2;\r\n        }\r\n        input_index += input_pitches[dim] * d;\r\n      }\r\n\r\n      return getInputFloat(input_index);\r\n    }` :\r\n          dim === 4 ?\r\n          // bilinear 4D\r\n              `\r\n    ${getInputFloatFunction}\r\n    float process(int indices[4]) {\r\n      int input_index = 0;\r\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\r\n\r\n      ${precalculatedPitches}\r\n\r\n      int m;\r\n      int index_of_dim0, index_of_dim1, index_of_dim2, index_of_dim3;\r\n      index_of_dim0 = output_index / output_pitches[0];\r\n      m = output_index - index_of_dim0 * output_pitches[0];\r\n      index_of_dim1 = m / output_pitches[1];\r\n      m = m - index_of_dim1 * output_pitches[1];\r\n      index_of_dim2 = m / output_pitches[2];\r\n      m = m - index_of_dim2 * output_pitches[2];\r\n      index_of_dim3 = m;\r\n\r\n      int index_of_input_dim2, index_of_input_dim3, x_offset, y_offset;\r\n      index_of_input_dim2 = index_of_dim2 / scales[2];\r\n      y_offset = index_of_dim2 - index_of_input_dim2 * scales[2];\r\n      index_of_input_dim3 = index_of_dim3 / scales[3];\r\n      x_offset = index_of_dim3 - index_of_input_dim3 * scales[3];\r\n\r\n      input_index = index_of_dim0 * input_pitches[0] +\r\n            index_of_dim1 * input_pitches[1] +\r\n            index_of_input_dim2 * input_pitches[2] +\r\n            index_of_input_dim3;\r\n\r\n      float x00 = getInputFloat(input_index);\r\n      float x10, x01, x11;\r\n\r\n      bool end_of_dim2 = false;\r\n      if (index_of_input_dim2 == (${inputs[0].dims[2]} - 1)) {\r\n        // It's the end in dimension 2\r\n        x01 = x00;\r\n        end_of_dim2 = true;\r\n      } else {\r\n        x01 = getInputFloat(input_index + input_pitches[2]);\r\n      }\r\n\r\n      if (index_of_input_dim3 == (input_pitches[2] - 1)) {\r\n        // It's the end in dimension 3\r\n        x10 = x00;\r\n        x11 = x01;\r\n      }\r\n      else {\r\n        x10 = getInputFloat(input_index + 1);\r\n        x11 = end_of_dim2 ? x10 : getInputFloat(input_index + input_pitches[2] + 1);\r\n      }\r\n\r\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[2]);\r\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[2]);\r\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[3]);\r\n    }` :\r\n              // bilinear 2D\r\n              `\r\n    ${getInputFloatFunction}\r\n    float process(int indices[2]) {\r\n      int input_index = 0;\r\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\r\n\r\n      ${precalculatedPitches}\r\n\r\n      int m;\r\n      int index_of_dim0, index_of_dim1;\r\n      index_of_dim0 = output_index / output_pitches[0];\r\n      m = output_index - index_of_dim0 * output_pitches[0];\r\n      index_of_dim1 = m;\r\n\r\n      int index_of_input_dim0, index_of_input_dim1, x_offset, y_offset;\r\n      index_of_input_dim0 = index_of_dim0 / scales[0];\r\n      y_offset = index_of_dim0 - index_of_input_dim0 * scales[0];\r\n      index_of_input_dim1 = index_of_dim1 / scales[1];\r\n      x_offset = index_of_dim1 - index_of_input_dim1 * scales[1];\r\n\r\n      input_index = index_of_input_dim0 * input_pitches[0] + index_of_input_dim1;\r\n\r\n      float x00 = getInputFloat(input_index);\r\n      float x10, x01, x11;\r\n\r\n      bool end_of_dim0 = false;\r\n      if (index_of_input_dim0 == (${inputs[0].dims[0]} - 1)) {\r\n        // It's the end in dimension 0\r\n        x01 = x00;\r\n        end_of_dim0 = true;\r\n      } else {\r\n        x01 = getInputFloat(input_index + input_pitches[0]);\r\n      }\r\n\r\n      if (index_of_input_dim1 == (input_pitches[0] - 1)) {\r\n        // It's the end in dimension 1\r\n        x10 = x00;\r\n        x11 = x01;\r\n      }\r\n      else {\r\n        x10 = getInputFloat(input_index + 1);\r\n        x11 = end_of_dim0 ? x10 : getInputFloat(input_index + input_pitches[0] + 1);\r\n      }\r\n\r\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[0]);\r\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[0]);\r\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[1]);\r\n    }`;\r\n      return {\r\n        ...upsampleProgramMetadata,\r\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\r\n        shaderSource,\r\n        variables: [{\r\n          name: 'scales',\r\n          type: 'int',\r\n          arrayLength: attributes.scales.length,\r\n          data: attributes.scales.map(x => Math.ceil(x))\r\n        }]\r\n      };\r\n    };\r\n\r\nexport const validateInputs = (inputs: Tensor[], attribute: UpsampleAttributes): void => {\r\n  if (!inputs || (attribute.opset < 9 && inputs.length !== 1) ||\r\n      (attribute.opset >= 9 && attribute.opset < 11 && inputs.length !== 2) ||\r\n      (attribute.opset >= 11 && inputs.length < 2)) {\r\n    throw new Error('invalid inputs.');\r\n  }\r\n\r\n  if (attribute.scales.length > 0 && inputs[0].dims.length !== attribute.scales.length) {\r\n    throw new Error('Invalid input shape.');\r\n  }\r\n\r\n  if (inputs[0].type === 'string') {\r\n    throw new Error('Invalid input tensor types.');\r\n  }\r\n};\r\n\r\nexport const scalesValidation = (scales: number[], mode: string, isResize: boolean): void => {\r\n  if (!isResize) {\r\n    for (const scale of scales) {\r\n      if (scale < 1) {\r\n        throw new Error('Scale value should be greater than or equal to 1.');\r\n      }\r\n    }\r\n  } else {\r\n    for (const scale of scales) {\r\n      if (scale <= 0) {\r\n        throw new Error('Scale value should be greater than 0.');\r\n      }\r\n    }\r\n  }\r\n  if (mode === 'linear' || mode === 'cubic') {\r\n    if (scales.length !== 2 && (scales.length !== 4 || scales[0] !== 1 || scales[1] !== 1)) {\r\n      throw new Error(`'Linear' mode and 'Cubic' mode only support 2-D inputs ('Bilinear', 'Bicubic') \\\r\n        or 4-D inputs with the corresponding outermost 2 scale values being 1 \\\r\n        in the ${isResize ? 'Resize' : 'Upsample'} opeartor.`);\r\n    }\r\n  }\r\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {env} from 'onnxruntime-common';\r\n\r\nimport {Logger, Profiler} from '../../instrument';\r\n\r\nimport {GlslPreprocessor} from './glsl-preprocessor';\r\nimport {getVertexShaderSource} from './glsl-source';\r\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\r\nimport {Artifact, ProgramInfo, ProgramVariable, TextureData, TextureLayout, VariableInfo} from './types';\r\nimport {WebGLContext} from './webgl-context';\r\n\r\n/**\r\n * ProgramManager is the main class behind running computations\r\n * It builds ProgramInfo's into Artifacts\r\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\r\n * Uses the artifact to run the computation by calling Draw on\r\n * the WebGL drawing buffer\r\n * ProgramManager automatically maps (binds) input variables to their\r\n * corresponding Location's in the binary program\r\n */\r\nexport class ProgramManager {\r\n  repo: Map<unknown, Artifact>;  // this should be per-session object\r\n  vertexShader: WebGLShader;\r\n  attributesBound: boolean;\r\n\r\n  constructor(\r\n      public profiler: Readonly<Profiler>, public glContext: WebGLContext,\r\n      public textureLayoutStrategy: TextureLayoutStrategy) {\r\n    this.repo = new Map();\r\n    this.attributesBound = false;\r\n  }\r\n  getArtifact(key: unknown): Artifact|undefined {\r\n    return this.repo.get(key);\r\n  }\r\n  setArtifact(key: unknown, artifact: Artifact): void {\r\n    this.repo.set(key, artifact);\r\n  }\r\n  run(buildArtifact: Artifact, inputs: TextureData[], output: TextureData): void {\r\n    this.profiler.event('op', `ProgramManager.run ${buildArtifact.programInfo.name ?? 'unknown kernel'}`, () => {\r\n      const gl = this.glContext.gl;\r\n      const program = buildArtifact.program;\r\n      gl.useProgram(program);\r\n      try {\r\n        this.bindOutput(output);\r\n        if (!this.attributesBound) {\r\n          this.bindAttributes(buildArtifact.attribLocations);\r\n        }\r\n        this.bindUniforms(buildArtifact.uniformLocations, buildArtifact.programInfo.variables ?? [], inputs);\r\n      } catch (err) {\r\n        Logger.error('ProgramManager', buildArtifact.programInfo.shaderSource);\r\n        throw err;\r\n      }\r\n      this.profiler.event('backend', 'GlContext.draw()', () => {\r\n        this.glContext.draw();\r\n      });\r\n    }, this.glContext);\r\n  }\r\n  dispose(): void {\r\n    if (this.vertexShader) {\r\n      this.glContext.deleteShader(this.vertexShader);\r\n    }\r\n    this.repo.forEach(a => this.glContext.deleteProgram(a.program));\r\n  }\r\n  build(programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[], outputTextureLayout: TextureLayout): Artifact {\r\n    return this.profiler.event('backend', 'ProgramManager.build', () => {\r\n      const preprocessor = new GlslPreprocessor(this.glContext, programInfo, inputTextureLayouts, outputTextureLayout);\r\n      const fragScript = preprocessor.preprocess();\r\n      const program = this.compile(fragScript);\r\n      const artifact = {\r\n        programInfo,\r\n        program,\r\n        uniformLocations: this.getUniformLocations(\r\n            program, preprocessor.context.programInfo.inputNames, preprocessor.context.programInfo.variables),\r\n        attribLocations: this.getAttribLocations(program)\r\n      };\r\n      return artifact;\r\n    });\r\n  }\r\n  protected compile(fragShaderScript: string): WebGLProgram {\r\n    if (!this.vertexShader) {\r\n      Logger.verbose('ProrgramManager', 'Compiling and caching Vertex shader for the first time');\r\n      const vertexShaderScript = getVertexShaderSource(this.glContext.version);\r\n      this.vertexShader = this.glContext.compileShader(vertexShaderScript, this.glContext.gl.VERTEX_SHADER);\r\n    }\r\n    if (env.debug) {\r\n      Logger.verbose('ProrgramManager', `FragShader:\r\n${fragShaderScript}\r\n`);\r\n    }\r\n    const fragShader = this.glContext.compileShader(fragShaderScript, this.glContext.gl.FRAGMENT_SHADER);\r\n    const program = this.glContext.createProgram(this.vertexShader, fragShader);\r\n    this.glContext.deleteShader(fragShader);\r\n    return program;\r\n  }\r\n  bindOutput(td: TextureData): void {\r\n    const width = td.width;\r\n    const height = td.height;\r\n    Logger.verbose(\r\n        'ProrgramManager',\r\n        `Binding output texture to Framebuffer: w/h=${width}/${height}, shape=${td.shape}, type=${td.tensor.type}`);\r\n    this.glContext.attachFramebuffer(td.texture, width, height);\r\n  }\r\n  bindAttributes(attribLocations: Artifact.AttribLocations): void {\r\n    const positionHandle = attribLocations.position;\r\n    const textureCoordHandle = attribLocations.textureCoord;\r\n    this.glContext.setVertexAttributes(positionHandle, textureCoordHandle);\r\n    this.attributesBound = true;\r\n  }\r\n  bindUniforms(uniformLocations: Artifact.UniformLocations, variables: ProgramVariable[], textures: TextureData[]):\r\n      void {\r\n    const gl = this.glContext.gl;\r\n    let texturePosition = 0;\r\n    for (const {name, type, location, arrayLength} of uniformLocations) {\r\n      const value = variables.find(v => v.name === name)?.data;\r\n      if (type !== 'sampler2D' && !value) {\r\n        throw new Error(`variable '${name}' does not have data defined in program info`);\r\n      }\r\n      switch (type) {\r\n        case 'sampler2D':\r\n          this.bindTexture(textures[texturePosition], location, texturePosition);\r\n          texturePosition++;\r\n          break;\r\n        case 'float':\r\n          if (arrayLength) {\r\n            gl.uniform1fv(location, value as number[]);\r\n          } else {\r\n            gl.uniform1f(location, value as number);\r\n          }\r\n          break;\r\n        case 'int':\r\n          if (arrayLength) {\r\n            gl.uniform1iv(location, value as number[]);\r\n          } else {\r\n            gl.uniform1i(location, value as number);\r\n          }\r\n          break;\r\n        default:\r\n          throw new Error(`Uniform not implemented: ${type}`);\r\n      }\r\n    }\r\n  }\r\n  bindTexture(td: TextureData, uniformHandle: WebGLUniformLocation, position: number): void {\r\n    this.glContext.bindTextureToUniform(td.texture, position, uniformHandle);\r\n  }\r\n  getAttribLocations(program: WebGLProgram): Artifact.AttribLocations {\r\n    return {\r\n      position: this.getAttribLocation(program, 'position'),\r\n      textureCoord: this.getAttribLocation(program, 'textureCoord')\r\n    };\r\n  }\r\n  getUniformLocations(program: WebGLProgram, samplers?: string[], variables?: VariableInfo[]):\r\n      Artifact.UniformLocations {\r\n    const uniformLocations: Artifact.UniformLocations = [];\r\n    if (samplers) {\r\n      for (const sampler of samplers) {\r\n        uniformLocations.push({name: sampler, type: 'sampler2D', location: this.getUniformLocation(program, sampler)});\r\n      }\r\n    }\r\n    if (variables) {\r\n      for (const variable of variables) {\r\n        uniformLocations.push({...variable, location: this.getUniformLocation(program, variable.name)});\r\n      }\r\n    }\r\n    return uniformLocations;\r\n  }\r\n  getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation {\r\n    const gl = this.glContext.gl;\r\n    const reference = gl.getUniformLocation(program, name);\r\n    if (reference === null) {\r\n      throw new Error(`Uniform ${name} not found.`);\r\n    }\r\n    return reference;\r\n  }\r\n  getAttribLocation(program: WebGLProgram, name: string): number {\r\n    const gl = this.glContext.gl;\r\n    const attributeLocation: number = gl.getAttribLocation(program, name);\r\n    return attributeLocation;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {SessionHandler} from '../../backend';\r\nimport {Graph} from '../../graph';\r\nimport {Logger} from '../../instrument';\r\nimport {Operator} from '../../operators';\r\nimport {OpSet, resolveOperator} from '../../opset';\r\nimport {Session} from '../../session';\r\nimport {Tensor} from '../../tensor';\r\nimport {WebGLBackend} from '../backend-webgl';\r\n\r\nimport {WebGLInferenceHandler} from './inference-handler';\r\nimport {WEBGL_OP_RESOLVE_RULES} from './op-resolve-rules';\r\nimport {ProgramManager} from './program-manager';\r\nimport {PreferLogicalStrategy, TextureLayoutStrategy} from './texture-layout-strategy';\r\nimport {TextureManager} from './texture-manager';\r\nimport {TextureData} from './types';\r\n\r\nexport class WebGLSessionHandler implements SessionHandler {\r\n  programManager: ProgramManager;\r\n  textureManager: TextureManager;\r\n  layoutStrategy: TextureLayoutStrategy;\r\n  packedTextureDataCache: Map<Tensor.Id, TextureData>;\r\n  unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\r\n  pack2unpackMap: Map<Tensor.Id, Tensor.Id>;\r\n  unpack2packMap: Map<Tensor.Id, Tensor.Id>;\r\n  initializers: Set<Tensor.Id>;\r\n  pack?: boolean;\r\n\r\n  constructor(public readonly backend: WebGLBackend, public readonly context: Session.Context) {\r\n    this.layoutStrategy = new PreferLogicalStrategy(backend.glContext.maxTextureSize);\r\n    this.programManager = new ProgramManager(this.context.profiler, backend.glContext, this.layoutStrategy);\r\n    this.textureManager = new TextureManager(\r\n        backend.glContext, this.layoutStrategy, this.context.profiler,\r\n        {reuseTextures: backend.textureCacheMode === 'full'});\r\n    this.packedTextureDataCache = new Map();\r\n    this.unpackedTextureDataCache = new Map();\r\n    this.pack = backend.pack;\r\n    this.pack2unpackMap = new Map();\r\n    this.unpack2packMap = new Map();\r\n  }\r\n\r\n  createInferenceHandler() {\r\n    return new WebGLInferenceHandler(this);\r\n  }\r\n  onGraphInitialized(graph: Graph): void {\r\n    const initializers = graph.getValues().filter(v => v.from === -1 && v.tensor).map(v => v.tensor!.dataId);\r\n    this.initializers = new Set(initializers);\r\n  }\r\n  isInitializer(tensorId: Tensor.Id): boolean {\r\n    return this.initializers ? this.initializers.has(tensorId) : false;\r\n  }\r\n  addInitializer(tensorId: Tensor.Id): void {\r\n    this.initializers.add(tensorId);\r\n  }\r\n  getTextureData(tensorId: Tensor.Id, isPacked: boolean): TextureData|undefined {\r\n    if (isPacked) {\r\n      return this.packedTextureDataCache.get(tensorId);\r\n    } else {\r\n      return this.unpackedTextureDataCache.get(tensorId);\r\n    }\r\n  }\r\n  setTextureData(tensorId: Tensor.Id, textureData: TextureData, isPacked = false): void {\r\n    Logger.verbose('WebGLSessionHandler', 'Storing Texture data in cache');\r\n    if (isPacked) {\r\n      this.packedTextureDataCache.set(tensorId, textureData);\r\n    } else {\r\n      this.unpackedTextureDataCache.set(tensorId, textureData);\r\n    }\r\n  }\r\n  dispose(): void {\r\n    this.programManager.dispose();\r\n    this.textureManager.clearActiveTextures();\r\n    this.packedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\r\n    this.packedTextureDataCache = new Map();\r\n    this.unpackedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\r\n    this.unpackedTextureDataCache = new Map();\r\n  }\r\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator {\r\n    const op = resolveOperator(node, opsets, WEBGL_OP_RESOLVE_RULES);\r\n    return {impl: op.opImpl, context: op.opInit ? op.opInit(node, graph) : node};\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Logger} from '../../instrument';\r\n\r\nexport declare namespace Encoder {\r\n  export interface DataTypeMap {\r\n    float: Float32Array;\r\n    byte: Uint8Array;\r\n    int: Uint32Array;\r\n  }\r\n  export type DataType = keyof DataTypeMap;\r\n  type DataArrayType = DataTypeMap[DataType];\r\n\r\n  /* eslint-disable @typescript-eslint/naming-convention */\r\n  export const enum Usage {\r\n    Default = 0,\r\n    UploadOnly,\r\n    Download4BytesAsFloat32,\r\n  }\r\n}\r\n\r\n/**\r\n * Abstraction for mapping data types to texture texlets\r\n * Encoding means how a Float32 is mapped to 1 or 4 channels for each texlet\r\n * Decoding means how a texlet's channels are mapped to a resulting Float32\r\n */\r\nexport interface DataEncoder {\r\n  internalFormat: number;\r\n  format: number;\r\n  textureType: number;\r\n  channelSize: number;\r\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType;\r\n  allocate(size: number): Encoder.DataArrayType;\r\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Encoder.DataArrayType;\r\n}\r\n/**\r\n * WebGL2 data encoder\r\n * Uses R32F as the format for texlet\r\n */\r\nexport class RedFloat32DataEncoder implements DataEncoder {\r\n  internalFormat: number;\r\n  format: number;\r\n  textureType: number;\r\n  channelSize: number;\r\n  constructor(gl: WebGL2RenderingContext, channels = 1) {\r\n    if (channels === 1) {\r\n      this.internalFormat = gl.R32F;\r\n      this.format = gl.RED;\r\n      this.textureType = gl.FLOAT;\r\n      this.channelSize = channels;\r\n    } else if (channels === 4) {\r\n      this.internalFormat = gl.RGBA32F;\r\n      this.format = gl.RGBA;\r\n      this.textureType = gl.FLOAT;\r\n      this.channelSize = channels;\r\n    } else {\r\n      throw new Error(`Invalid number of channels: ${channels}`);\r\n    }\r\n  }\r\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType {\r\n    let result: Float32Array;\r\n    let source: Float32Array;\r\n    if (src.constructor !== Float32Array) {\r\n      Logger.warning('Encoder', 'data was not of type Float32; creating new Float32Array');\r\n      source = new Float32Array(src);\r\n    }\r\n    if (textureSize * this.channelSize > src.length) {\r\n      Logger.warning('Encoder', 'Source data too small. Allocating larger array');\r\n      source = src as Float32Array;\r\n      result = this.allocate(textureSize * this.channelSize) as Float32Array;\r\n      source.forEach((v, i) => result[i] = v);\r\n    } else {\r\n      source = src as Float32Array;\r\n      result = source;\r\n    }\r\n    return result;\r\n  }\r\n  allocate(size: number): Encoder.DataArrayType {\r\n    return new Float32Array(size * 4);\r\n  }\r\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\r\n    if (this.channelSize === 1) {\r\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\r\n      return filteredData;\r\n    }\r\n    return buffer.subarray(0, dataSize) as Float32Array;\r\n  }\r\n}\r\n/**\r\n * Data encoder for WebGL 1 with support for floating point texture\r\n */\r\nexport class RGBAFloatDataEncoder implements DataEncoder {\r\n  internalFormat: number;\r\n  format: number;\r\n  textureType: number;\r\n  channelSize: number;\r\n  constructor(gl: WebGLRenderingContext, channels = 1, textureType?: number) {\r\n    if (channels !== 1 && channels !== 4) {\r\n      throw new Error(`Invalid number of channels: ${channels}`);\r\n    }\r\n    this.internalFormat = gl.RGBA;\r\n    this.format = gl.RGBA;\r\n    this.channelSize = channels;\r\n    this.textureType = textureType || gl.FLOAT;\r\n  }\r\n  encode(src: Float32Array, textureSize: number): Encoder.DataArrayType {\r\n    let dest = src;\r\n    if (this.channelSize === 1) {\r\n      Logger.verbose('Encoder', 'Exploding into a larger array');\r\n      dest = this.allocate(textureSize) as Float32Array;\r\n      src.forEach((v, i) => dest[i * 4] = v);\r\n    }\r\n    return dest;\r\n  }\r\n  allocate(size: number): Encoder.DataArrayType {\r\n    return new Float32Array(size * 4);\r\n  }\r\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\r\n    if (this.channelSize === 1) {\r\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\r\n      return filteredData;\r\n    }\r\n    return buffer.subarray(0, dataSize) as Float32Array;\r\n  }\r\n}\r\n\r\nexport class Uint8DataEncoder implements DataEncoder {\r\n  internalFormat: number;\r\n  format: number;\r\n  textureType: number;\r\n  channelSize = 4;\r\n  constructor(gl: WebGLRenderingContext, channels = 1) {\r\n    if (channels === 1) {\r\n      this.internalFormat = gl.ALPHA;\r\n      this.format = gl.ALPHA;  // not tested\r\n      this.textureType = gl.UNSIGNED_BYTE;\r\n      this.channelSize = channels;\r\n    } else if (channels === 4) {\r\n      this.internalFormat = gl.RGBA;\r\n      this.format = gl.RGBA;\r\n      this.textureType = gl.UNSIGNED_BYTE;\r\n      this.channelSize = channels;\r\n    } else {\r\n      throw new Error(`Invalid number of channels: ${channels}`);\r\n    }\r\n  }\r\n  encode(src: Uint8Array, _textureSize: number): Encoder.DataArrayType {\r\n    return new Uint8Array(src.buffer, src.byteOffset, src.byteLength);\r\n  }\r\n  allocate(size: number): Encoder.DataArrayType {\r\n    return new Uint8Array(size * this.channelSize);\r\n  }\r\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Uint8Array {\r\n    if (buffer instanceof Uint8Array) {\r\n      return buffer.subarray(0, dataSize);\r\n    }\r\n    throw new Error(`Invalid array type: ${buffer.constructor}`);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Logger} from '../../instrument';\r\nimport {assert} from '../../util';\r\n\r\n/** Layout preferences */\r\nexport interface WidthHeightPrefs {\r\n  breakAxis?: number;\r\n  isPacked?: boolean;\r\n  reverseWH?: boolean;\r\n}\r\n/**\r\n * TextureLayoutStrategy is an abstraction for different plans\r\n * for mapping n-dimensional arrays to 2D textures (and back)\r\n */\r\nexport interface TextureLayoutStrategy {\r\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number];\r\n}\r\n\r\n/**\r\n * This strategy try to find the minimal max(W,H) that fulfills (W * H == totalSize)\r\n */\r\nexport class AlwaysKeepOriginalSizeStrategy implements TextureLayoutStrategy {\r\n  constructor(public maxTextureSize: number) {}\r\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\r\n    // scalar tensor\r\n    if (shape.length === 0) {\r\n      return [1, 1];\r\n    }\r\n    const maxTextureSize = this.maxTextureSize;\r\n    if (prefs && prefs.breakAxis !== undefined) {\r\n      // check to see if dims fit\r\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\r\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\r\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\r\n        // ignore preferences\r\n        // continue with default layout\r\n        Logger.verbose(\r\n            'TextureLayout',\r\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\r\n      } else {\r\n        return [wsize, hsize];\r\n      }\r\n    }\r\n    const totalSize = shape.reduce((a, b) => a * b);\r\n\r\n    let width = Math.floor(Math.sqrt(totalSize));\r\n\r\n    for (; width < maxTextureSize && width < totalSize; width++) {\r\n      if (totalSize % width === 0) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (width >= maxTextureSize || totalSize % width !== 0) {\r\n      throw new Error(`The given dimensions are outside this GPU's boundaries: ${shape}`);\r\n    }\r\n    return [width, totalSize / width];\r\n  }\r\n}\r\n\r\nexport class PreferLogicalStrategy implements TextureLayoutStrategy {\r\n  constructor(public maxTextureSize: number) {}\r\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\r\n    const wh = this.computeTexture(shape, prefs);\r\n    if (prefs && prefs.isPacked) {\r\n      wh[0] /= 2;\r\n      wh[1] /= 2;\r\n    }\r\n    if (prefs && prefs.reverseWH) {\r\n      return [wh[1], wh[0]];\r\n    }\r\n    return wh;\r\n  }\r\n\r\n  computeTexture(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\r\n    const isPacked = prefs && prefs.isPacked;\r\n    // scalar tensor\r\n    if (shape.length === 0) {\r\n      return isPacked ? [2, 2] : [1, 1];\r\n    }\r\n    let maxTextureSize = this.maxTextureSize;\r\n    if (prefs && prefs.breakAxis !== undefined) {\r\n      // check to see if dims fit\r\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\r\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\r\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\r\n        // ignore preferences\r\n        // continue with default layout\r\n        Logger.verbose(\r\n            'TextureLayout',\r\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\r\n      } else {\r\n        return [wsize, hsize];\r\n      }\r\n    }\r\n    let logShape = shape.slice(0);\r\n    if (isPacked) {\r\n      maxTextureSize = maxTextureSize * 2;\r\n\r\n      // This logic ensures we accurately count the number of packed texels needed\r\n      // to accommodate the tensor. We can only pack values in the same texel if\r\n      // they are from adjacent pairs of rows/cols within the same batch. So if a\r\n      // tensor has 3 rows, we pretend it has 4 rows in order to account for the\r\n      // fact that the texels containing the third row are half empty.\r\n      logShape = logShape.map(\r\n          (d, i) => i >= logShape.length - 2 ? (logShape[i] % 2 === 0 ? logShape[i] : logShape[i] + 1) : logShape[i]);\r\n\r\n      // Packed texture height is at least 2 (the channel height of a single\r\n      // texel).\r\n      if (logShape.length === 1) {\r\n        logShape = [2, logShape[0]];\r\n      }\r\n    }\r\n\r\n    // If logical shape is 2, we don't squeeze, since we want to match physical.\r\n    if (logShape.length !== 2) {\r\n      const squeezeResult = squeezeShape(logShape);\r\n      logShape = squeezeResult.newShape;\r\n    }\r\n\r\n    const size = sizeFromShape(logShape);\r\n    if (logShape.length <= 1 && size <= maxTextureSize) {\r\n      return [1, size];\r\n    } else if (logShape.length === 2 && logShape[0] <= maxTextureSize && logShape[1] <= maxTextureSize) {\r\n      return logShape as [number, number];\r\n    } else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTextureSize && logShape[2] <= maxTextureSize) {\r\n      return [logShape[0] * logShape[1], logShape[2]];\r\n    } else if (logShape.length === 3 && logShape[0] <= maxTextureSize && logShape[1] * logShape[2] <= maxTextureSize) {\r\n      return [logShape[0], logShape[1] * logShape[2]];\r\n    } else if (\r\n        logShape.length === 4 && logShape[0] * logShape[1] * logShape[2] <= maxTextureSize &&\r\n        logShape[3] <= maxTextureSize) {\r\n      return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\r\n    } else if (\r\n        logShape.length === 4 && logShape[0] <= maxTextureSize &&\r\n        logShape[1] * logShape[2] * logShape[3] <= maxTextureSize) {\r\n      return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\r\n    } else {\r\n      if (isPacked) {\r\n        // For packed textures size equals the number of channels required to\r\n        // accommodate the texture data. However in order to squarify such that\r\n        // inner dimensions stay even, we rewrite size to equal the number of\r\n        // texels. Then in the return statement we rehydrate the squarified\r\n        // dimensions to channel units.\r\n        return sizeToSquarishShape(size / 4).map(d => d * 2) as [number, number];\r\n      }\r\n      return sizeToSquarishShape(size);\r\n    }\r\n  }\r\n}\r\n\r\nexport function squeezeShape(shape: number[], axis?: number[]): {newShape: number[]; keptDims: number[]} {\r\n  const newShape: number[] = [];\r\n  const keptDims: number[] = [];\r\n  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\r\n  const axes = (axis == null || isEmptyArray) ? null : parseAxisParam(axis, shape).sort();\r\n  let j = 0;\r\n  for (let i = 0; i < shape.length; ++i) {\r\n    if (axes != null) {\r\n      if (axes[j] === i && shape[i] !== 1) {\r\n        throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\r\n      }\r\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\r\n        newShape.push(shape[i]);\r\n        keptDims.push(i);\r\n      }\r\n      if (axes[j] <= i) {\r\n        j++;\r\n      }\r\n    }\r\n    if (shape[i] !== 1) {\r\n      newShape.push(shape[i]);\r\n      keptDims.push(i);\r\n    }\r\n  }\r\n  return {newShape, keptDims};\r\n}\r\n\r\nexport function parseAxisParam(axis: number|number[], shape: number[]): number[] {\r\n  const rank = shape.length;\r\n\r\n  // Normalize input\r\n  axis = axis == null ? shape.map((s, i) => i) : ([] as number[]).concat(axis);\r\n\r\n  // Check for valid range\r\n  assert(\r\n      axis.every(ax => ax >= -rank && ax < rank),\r\n      () => `All values in axis param must be in range [-${rank}, ${rank}) but ` +\r\n          `got axis ${axis}`);\r\n\r\n  // Check for only integers\r\n  assert(\r\n      axis.every(isInt),\r\n      () => 'All values in axis param must be integers but ' +\r\n          `got axis ${axis}`);\r\n\r\n  // Handle negative axis.\r\n  return axis.map(a => a < 0 ? rank + a : a);\r\n}\r\nexport function isInt(a: number): boolean {\r\n  return a % 1 === 0;\r\n}\r\nexport function sizeFromShape(shape: number[]): number {\r\n  if (shape.length === 0) {\r\n    // Scalar.\r\n    return 1;\r\n  }\r\n  let size = shape[0];\r\n  for (let i = 1; i < shape.length; i++) {\r\n    size *= shape[i];\r\n  }\r\n  return size;\r\n}\r\nexport function getRowsCols(shape: number[]): [number, number] {\r\n  if (shape.length === 0) {\r\n    throw Error('Cannot get rows and columns of an empty shape array.');\r\n  }\r\n\r\n  return [shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\r\n}\r\nexport function sizeToSquarishShape(size: number): [number, number] {\r\n  const width = Math.ceil(Math.sqrt(size));\r\n  return [width, Math.ceil(size / width)];\r\n}\r\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\r\n  return sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {ShapeUtil} from '../../util';\r\n\r\nimport {TextureLayoutStrategy, WidthHeightPrefs} from './texture-layout-strategy';\r\nimport {TextureLayout, TextureType} from './types';\r\n\r\nexport const createTextureLayoutFromTextureType =\r\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[],\r\n     textureType: TextureType): TextureLayout => {\r\n      const channel = (textureType === TextureType.unpacked || textureType === TextureType.unpackedReversed) ? 1 : 4;\r\n      const isPacked = textureType === TextureType.packed;\r\n      const reverseWH = (textureType === TextureType.unpackedReversed || textureType === TextureType.packed);\r\n      const breakAxis = textureType === TextureType.packedLastDimension ? shape.length - 1 : undefined;\r\n      const unpackedShape = textureType === TextureType.packedLastDimension ?\r\n          shape.map((d, i) => i === shape.length - 1 ? d * 4 : d) :\r\n          undefined;\r\n      return createTextureLayoutFromShape(\r\n          textureLayoutStrategy, shape, channel, unpackedShape, {isPacked, reverseWH, breakAxis});\r\n    };\r\n\r\nexport const calculateTextureWidthAndHeight =\r\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], textureType: TextureType):\r\n        [number, number] => {\r\n          const layout = createTextureLayoutFromTextureType(textureLayoutStrategy, shape, textureType);\r\n          return [layout.width, layout.height];\r\n        };\r\n\r\n/**\r\n * Create a TextureLayout object from shape.\r\n */\r\nexport const createTextureLayoutFromShape =\r\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], channels: 1|4 = 1,\r\n     unpackedShape?: readonly number[], prefs?: WidthHeightPrefs): TextureLayout => {\r\n      const isPacked = !!(prefs && prefs.isPacked);\r\n      const [width, height] = textureLayoutStrategy.computeTextureWH(isPacked ? unpackedShape || shape : shape, prefs);\r\n      const rank = shape.length;\r\n      let inferredDims = shape.slice(0);\r\n      if (rank === 0) {\r\n        inferredDims = [1];\r\n      }\r\n      if (channels === 1) {\r\n        // unpackedShape will take `shape` and not `inferredDims` so as to create a scalar Tensor if need be\r\n        unpackedShape = shape;\r\n      } else if (isPacked) {\r\n        if (channels !== 4) {\r\n          throw new Error('a packed texture must be 4-channel');\r\n        }\r\n        unpackedShape = shape;\r\n        if (rank > 0) {\r\n          inferredDims[rank - 1] = Math.ceil(inferredDims[rank - 1] / 2);\r\n        }\r\n        if (rank > 1) {\r\n          inferredDims[rank - 2] = Math.ceil(inferredDims[rank - 2] / 2);\r\n        }\r\n      } else if (!unpackedShape) {\r\n        throw new Error('Unpacked shape is needed when using channels > 1');\r\n      }\r\n      return {\r\n        width,\r\n        height,\r\n        channels,\r\n        isPacked,\r\n        shape: inferredDims,\r\n        strides: ShapeUtil.computeStrides(inferredDims),\r\n        unpackedShape,\r\n        reversedWH: (prefs && prefs.reverseWH)\r\n      };\r\n    };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Logger, Profiler} from '../../instrument';\r\nimport {Tensor} from '../../tensor';\r\n\r\nimport {Encoder} from './texture-data-encoder';\r\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\r\nimport {TextureData, TextureLayout} from './types';\r\nimport {WebGLContext} from './webgl-context';\r\n\r\nexport interface TextureManagerConfig {\r\n  reuseTextures?: boolean;\r\n}\r\n\r\n/**\r\n * TextureManager is the mainly responsible for caching Textures\r\n * Textures are cached in 2 levels:\r\n *   1. the texures which are associated with a dataId (from Tensor)\r\n *    Caching these is crucial to performance. These are In-use Textures\r\n *   2. textures which are not in use by any current ProgramInfo/Tensor\r\n *     These are called Free Textures\r\n * TextureManager is also used to help creating textures. For this it\r\n * uses WebGLContext and TextureLayoutStrategy\r\n */\r\nexport class TextureManager {\r\n  private readonly inUseTextures: Map<string, WebGLTexture[]>;\r\n  private readonly idleTextures: Map<string, WebGLTexture[]>;\r\n  private readonly textureLookup: Map<WebGLTexture, string>;\r\n  private readonly pendingRead: Map<Tensor.Id, Array<(arr: Tensor.NumberType) => void>> = new Map();\r\n\r\n  constructor(\r\n      public glContext: WebGLContext, public layoutStrategy: TextureLayoutStrategy, public profiler: Readonly<Profiler>,\r\n      private config: TextureManagerConfig) {\r\n    if (config.reuseTextures) {\r\n      this.inUseTextures = new Map();\r\n      this.idleTextures = new Map();\r\n      this.textureLookup = new Map();\r\n    }\r\n  }\r\n  createTextureFromLayout(\r\n      dataType: Tensor.DataType, layout: TextureLayout, data?: Tensor.NumberType, usage?: Encoder.Usage) {\r\n    const textureDataType = this.toEncoderType(dataType);\r\n\r\n    const encoder = this.glContext.getEncoder(textureDataType, layout.channels || 1, usage);\r\n    if (layout.isPacked && usage === Encoder.Usage.UploadOnly) {\r\n      throw new Error('not implemented');\r\n    }\r\n    const width = layout.width;\r\n    const height = layout.height;\r\n\r\n    let key: string|undefined;\r\n    let inUseTextures: WebGLTexture[]|undefined;\r\n    if (this.config.reuseTextures) {\r\n      key = `${width}x${height}_${encoder.format}_${encoder.internalFormat}_${encoder.textureType}`;\r\n      inUseTextures = this.inUseTextures.get(key);\r\n      if (!inUseTextures) {\r\n        inUseTextures = [];\r\n        this.inUseTextures.set(key, inUseTextures);\r\n      }\r\n\r\n      const idleTextures = this.idleTextures.get(key);\r\n      if (idleTextures && idleTextures.length > 0) {\r\n        const texture = idleTextures.pop()!;\r\n        inUseTextures.push(texture);\r\n        if (usage === Encoder.Usage.UploadOnly) {\r\n          this.glContext.updateTexture(texture, width, height, encoder, this.toTextureData(dataType, data)!);\r\n        }\r\n        return texture;\r\n      }\r\n    }\r\n\r\n    Logger.verbose('TextureManager', `Creating new texture of size ${layout.width}x${layout.height}`);\r\n    const texture = this.glContext.allocateTexture(width, height, encoder, this.toTextureData(dataType, data));\r\n\r\n    if (this.config.reuseTextures) {\r\n      inUseTextures!.push(texture);\r\n      this.textureLookup.set(texture, key!);\r\n    }\r\n    return texture;\r\n  }\r\n  readTexture(td: TextureData, dataType: Tensor.DataType, channels?: number): Tensor.NumberType {\r\n    if (!channels) {\r\n      channels = 1;\r\n    }\r\n    return this.profiler.event('backend', 'TextureManager.readTexture', () => {\r\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\r\n      const data = this.glContext.readTexture(\r\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\r\n      return this.toTensorData(dataType, data);\r\n    });\r\n  }\r\n  async readTextureAsync(td: TextureData, dataType: Tensor.DataType, channels?: number): Promise<Tensor.NumberType> {\r\n    const dataId = td.tensor.dataId;\r\n    if (!channels) {\r\n      channels = 1;\r\n    }\r\n    if (this.pendingRead.has(dataId)) {\r\n      const subscribers = this.pendingRead.get(dataId);\r\n      return new Promise<Tensor.NumberType>(resolve => subscribers?.push(resolve));\r\n    }\r\n    return this.profiler.event('backend', 'TextureManager.readTextureAsync', async () => {\r\n      this.pendingRead.set(dataId, []);\r\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\r\n      // add a fence waiting for the data to be ready\r\n      await this.glContext.createAndWaitForFence();\r\n      const data = this.glContext.readTexture(\r\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\r\n      const tensorData = this.toTensorData(dataType, data);\r\n      const subscribers = this.pendingRead.get(dataId);\r\n      this.pendingRead.delete(dataId);\r\n      subscribers?.forEach(resolve => resolve(tensorData));\r\n      return tensorData;\r\n    });\r\n  }\r\n  readUint8TextureAsFloat(td: TextureData): Float32Array {\r\n    return this.profiler.event('backend', 'TextureManager.readUint8TextureAsFloat', () => {\r\n      const dataSize = td.shape.reduce((a, b) => a * b);\r\n      const data = this.glContext.readTexture(td.texture, td.width, td.height, dataSize * 4, 'byte', 4);\r\n      return new Float32Array(data.buffer, data.byteOffset, dataSize);\r\n    });\r\n  }\r\n  releaseTexture(textureData: TextureData, deleteTexture?: boolean): void {\r\n    let key: string|undefined;\r\n    if (this.config.reuseTextures) {\r\n      key = this.textureLookup.get(textureData.texture);\r\n      if (key) {\r\n        if (deleteTexture) {\r\n          this.textureLookup.delete(key);\r\n        }\r\n        const inUseTextures = this.inUseTextures.get(key);\r\n        if (inUseTextures) {\r\n          const index = inUseTextures.indexOf(textureData.texture);\r\n          if (index !== -1) {\r\n            inUseTextures.splice(index, 1);\r\n            let idleTextures = this.idleTextures.get(key);\r\n            if (!idleTextures) {\r\n              idleTextures = [];\r\n              this.idleTextures.set(key, idleTextures);\r\n            }\r\n            idleTextures.push(textureData.texture);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!key || deleteTexture) {\r\n      Logger.verbose('TextureManager', `Deleting texture of size ${textureData.width}x${textureData.height}`);\r\n      this.glContext.deleteTexture(textureData.texture);\r\n    }\r\n  }\r\n  toTensorData(dataType: Tensor.DataType, data: Encoder.DataArrayType): Tensor.NumberType {\r\n    switch (dataType) {\r\n      case 'int16':\r\n        return data instanceof Int16Array ? data : Int16Array.from(data);\r\n      case 'int32':\r\n        return data instanceof Int32Array ? data : Int32Array.from(data);\r\n      case 'int8':\r\n        return data instanceof Int8Array ? data : Int8Array.from(data);\r\n      case 'uint16':\r\n        return data instanceof Uint16Array ? data : Uint16Array.from(data);\r\n      case 'uint32':\r\n        return data instanceof Uint32Array ? data : Uint32Array.from(data);\r\n      case 'uint8':\r\n      case 'bool':\r\n        return data instanceof Uint8Array ? data : Uint8Array.from(data);\r\n      case 'float32':\r\n        return data instanceof Float32Array ? data : Float32Array.from(data);\r\n      case 'float64':\r\n        return data instanceof Float64Array ? data : Float64Array.from(data);\r\n      default:\r\n        throw new Error(`TensorData type ${dataType} is not supported`);\r\n    }\r\n  }\r\n  toTextureData(dataType: Tensor.DataType, data: Tensor.NumberType|undefined): Encoder.DataArrayType|undefined {\r\n    if (!data) {\r\n      return undefined;\r\n    }\r\n    return (data instanceof Float32Array) ? data : new Float32Array(data);\r\n    /*\r\n    switch (dataType) {\r\n      case 'int16':\r\n      case 'int32':\r\n      case 'uint16':\r\n      case 'uint32':\r\n        return (data.constructor === Uint32Array) ? data as Uint32Array : new Uint32Array(data);\r\n      case 'int8':\r\n      case 'uint8':\r\n      case 'bool':\r\n        return (data.constructor === Uint8Array) ? data as Uint8Array : new Uint8Array(data);\r\n      case 'float32':\r\n      case 'float64':\r\n        return (data.constructor === Float32Array) ? data as Float32Array : new Float32Array(data);\r\n      default:\r\n        throw new Error(`TensorData type ${dataType} is not supported`);\r\n    }\r\n    */\r\n  }\r\n  toEncoderType(_dataType: Tensor.DataType): Encoder.DataType {\r\n    return 'float';\r\n    // switch (dataType) {\r\n    //   case 'int16':\r\n    //   case 'int32':\r\n    //   case 'uint16':\r\n    //   case 'uint32':\r\n    //     return 'int';\r\n    //   case 'uint8':\r\n    //   case 'bool':\r\n    //     return 'byte';\r\n    //   case 'float32':\r\n    //   case 'float64':\r\n    //     return 'float';\r\n    //   default:\r\n    //     throw new Error(`TensorData type ${dataType} is not supported`);\r\n    // }\r\n  }\r\n  clearActiveTextures(): void {\r\n    this.glContext.clearActiveTextures();\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../tensor';\r\n\r\n/**\r\n * Layout info is used for mapping n-dimensional array to 2D textures\r\n * The layout is created by the TextureLayoutStrategy based on\r\n * the Tensor's dimensions and strides\r\n */\r\nexport interface TextureLayout {\r\n  width: number;\r\n  height: number;\r\n  /**\r\n   * specify the number of value that encoded in a single pixel\r\n   */\r\n  channels: 1|2|3|4;\r\n  /**\r\n   * whether in packed mode or not\r\n   */\r\n  isPacked?: boolean;\r\n  /**\r\n   * the normalized shape\r\n   */\r\n  shape: readonly number[];\r\n  /**\r\n   * the stride of each dimensions, calculated according to shape\r\n   */\r\n  strides: readonly number[];\r\n  /**\r\n   * the original shape(dims) of the corresponding tensor\r\n   */\r\n  unpackedShape: readonly number[];\r\n\r\n  reversedWH?: boolean;\r\n}\r\nexport interface TextureData extends TextureLayout {\r\n  tensor: Tensor;\r\n  texture: WebGLTexture;\r\n}\r\n\r\nexport enum TextureType {\r\n  unpacked,              // <-- normal unpacked texture\r\n  unpackedReversed,      // <-- unpacked texture used in old ONNX.js implementation (deprecated)\r\n  packed,                // <-- normal packed texture\r\n  downloadUint8AsFloat,  // <-- ONLY used in texture downloading for iOS devices\r\n  packedLastDimension    // <-- ONLY used in old ONNX.js Conv implementation for input W (deprecated)\r\n}\r\n\r\nexport interface TensorInfo {\r\n  id?: Tensor.Id;\r\n  dims: readonly number[];\r\n  type: Tensor.DataType;\r\n  textureType: TextureType;\r\n}\r\n\r\nexport interface ProgramVariable {\r\n  type: 'float'|'int';\r\n  name: string;\r\n  arrayLength?: number;\r\n  data: number|number[];\r\n}\r\n\r\n/**\r\n * A set of metadata of a shader program.\r\n */\r\nexport interface ProgramMetadata {\r\n  /**\r\n   * the name of the program. used for debugging and profiling\r\n   */\r\n  name: string;\r\n  /**\r\n   * texture types for each input\r\n   */\r\n  inputTypes: TextureType[];\r\n  /**\r\n   * names of each input\r\n   */\r\n  inputNames: string[];\r\n  /**\r\n   * an optional string as a cache hint in the artifact cache\r\n   */\r\n  cacheHint?: string;\r\n}\r\n\r\n/**\r\n * A ProgramInfoLoader allows\r\n */\r\nexport interface ProgramInfoLoader extends ProgramMetadata {\r\n  /**\r\n   * a function to get the program info\r\n   */\r\n  get(): ProgramInfo;\r\n}\r\n\r\n/**\r\n * A set of data that represent a shader program\r\n */\r\nexport interface ProgramInfo extends ProgramMetadata {\r\n  /**\r\n   * information of uniform variables\r\n   */\r\n  variables?: ProgramVariable[];\r\n  /**\r\n   * tensor info for output\r\n   */\r\n  output: TensorInfo;\r\n  /**\r\n   * the shader's processing source code\r\n   */\r\n  shaderSource: string;\r\n  /**\r\n   * whether the shader source contains a customized main function implementation\r\n   */\r\n  hasMain?: boolean;\r\n}\r\n\r\nexport interface VariableInfo {\r\n  type: 'float'|'int';\r\n  name: string;\r\n  arrayLength?: number;\r\n}\r\n\r\nexport interface ProgramVariable {\r\n  type: 'float'|'int';\r\n  name: string;\r\n  arrayLength?: number;\r\n  data: number|number[];\r\n}\r\n\r\n/**\r\n * Information of uniforms that shader uses\r\n */\r\nexport interface UniformInfo {\r\n  type: 'sampler2D'|VariableInfo['type'];\r\n  name: string;\r\n  arrayLength?: number;\r\n}\r\n\r\nexport interface UniformLocation extends UniformInfo {\r\n  location: WebGLUniformLocation;\r\n}\r\n\r\n/**\r\n * Artifact is the result of compilation\r\n * It does not contain input of output data\r\n * However anything that could be run as a \"program\"\r\n */\r\nexport interface Artifact {\r\n  programInfo: ProgramInfo;\r\n  program: WebGLProgram;\r\n  uniformLocations: UniformLocation[];\r\n  attribLocations: {position: number; textureCoord: number};\r\n}\r\nexport declare namespace Artifact {\r\n  type UniformLocations = Artifact['uniformLocations'];\r\n  type AttribLocations = Artifact['attribLocations'];\r\n}\r\n\r\nexport interface UniformData {\r\n  [name: string]: number|number[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {assert} from '../../util';\r\n/**\r\n * Given a non RGBA shape calculate the R version\r\n * It is assumed that the dimensions are multiples of given channels\r\n * NOTE: it is always the last dim that gets packed.\r\n * @param unpackedShape original shape to create a packed version from\r\n */\r\nexport function getPackedShape(unpackedShape: readonly number[]): readonly number[] {\r\n  const len = unpackedShape.length;\r\n  return unpackedShape.slice(0, len - 1).concat(unpackedShape[len - 1] / 4);\r\n}\r\n\r\nexport async function repeatedTry(\r\n    checkFn: () => boolean, delayFn = (_counter: number) => 0, maxCounter?: number): Promise<void> {\r\n  return new Promise<void>((resolve, reject) => {\r\n    let tryCount = 0;\r\n\r\n    const tryFn = () => {\r\n      if (checkFn()) {\r\n        resolve();\r\n        return;\r\n      }\r\n\r\n      tryCount++;\r\n\r\n      const nextBackoff = delayFn(tryCount);\r\n\r\n      if (maxCounter != null && tryCount >= maxCounter) {\r\n        reject();\r\n        return;\r\n      }\r\n      setTimeout(tryFn, nextBackoff);\r\n    };\r\n\r\n    tryFn();\r\n  });\r\n}\r\n\r\n/**\r\n * Generates the function name from an input sampler name.\r\n * @param samplerName Name of the sampler.\r\n */\r\nexport function generateShaderFuncNameFromInputSamplerName(samplerName: string): string {\r\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\r\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1);\r\n}\r\n\r\n/**\r\n * Generates the function name from an input sampler name at output coordinates.\r\n * @param samplerName Name of the sampler.\r\n */\r\nexport function generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName: string): string {\r\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\r\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1) + 'AtOutCoords';\r\n}\r\n\r\n/** Returns a new input shape (a copy) that has a squeezed logical shape. */\r\nexport function squeezeInputShape(inputShape: readonly number[], squeezedShape: number[]): number[] {\r\n  // Deep copy.\r\n  let newInputShape: number[] = JSON.parse(JSON.stringify(inputShape));\r\n  newInputShape = squeezedShape;\r\n  return newInputShape;\r\n}\r\n\r\n/** Returns a list of squeezed parameters for shader functions */\r\nexport function getSqueezedParams(params: string[], keptDims: number[]): string {\r\n  return keptDims.map(d => params[d]).join(', ');\r\n}\r\n\r\n/** Returns the data type for different ranks. */\r\nexport function getCoordsDataType(rank: number): string {\r\n  if (rank <= 1) {\r\n    return 'int';\r\n  } else if (rank === 2) {\r\n    return 'ivec2';\r\n  } else if (rank === 3) {\r\n    return 'ivec3';\r\n  } else if (rank === 4) {\r\n    return 'ivec4';\r\n  } else if (rank === 5) {\r\n    return 'ivec5';\r\n  } else if (rank === 6) {\r\n    return 'ivec6';\r\n  } else {\r\n    throw Error(`GPU for rank ${rank} is not yet supported`);\r\n  }\r\n}\r\n\r\nexport function getGlChannels(rank = 6): string[] {\r\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Logger} from '../../instrument';\r\n\r\nimport {WebGLContext} from './webgl-context';\r\n\r\nconst cache: {[contextId: string]: WebGLContext} = {};\r\n\r\n/**\r\n * This factory function creates proper WebGLRenderingContext based on\r\n * the current browsers capabilities\r\n * The order is from higher/most recent versions to most basic\r\n */\r\nexport function createWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\r\n  let context: WebGLContext|undefined;\r\n  if ((!contextId || contextId === 'webgl2') && 'webgl2' in cache) {\r\n    context = cache.webgl2;\r\n  } else if ((!contextId || contextId === 'webgl') && 'webgl' in cache) {\r\n    context = cache.webgl;\r\n  }\r\n\r\n  if (!context) {\r\n    try {\r\n      // try to create webgl context from an offscreen canvas\r\n      const offscreenCanvas = createOffscreenCanvas();\r\n      context = createNewWebGLContext(offscreenCanvas, contextId);\r\n    } catch (e) {\r\n      // if failed, fallback to try to use a normal canvas element\r\n      const canvas = createCanvas();\r\n      context = createNewWebGLContext(canvas, contextId);\r\n    }\r\n  }\r\n\r\n  contextId = contextId || context.version === 1 ? 'webgl' : 'webgl2';\r\n  const gl = context.gl;\r\n\r\n  cache[contextId] = context;\r\n\r\n  if (gl.isContextLost()) {\r\n    delete cache[contextId];\r\n    return createWebGLContext(contextId);\r\n  }\r\n\r\n  gl.disable(gl.DEPTH_TEST);\r\n  gl.disable(gl.STENCIL_TEST);\r\n  gl.disable(gl.BLEND);\r\n  gl.disable(gl.DITHER);\r\n  gl.disable(gl.POLYGON_OFFSET_FILL);\r\n  gl.disable(gl.SAMPLE_COVERAGE);\r\n  gl.enable(gl.SCISSOR_TEST);\r\n  gl.enable(gl.CULL_FACE);\r\n  gl.cullFace(gl.BACK);\r\n\r\n  return context;\r\n}\r\n\r\nexport function createNewWebGLContext(canvas: HTMLCanvasElement, contextId?: 'webgl'|'webgl2'): WebGLContext {\r\n  const contextAttributes: WebGLContextAttributes = {\r\n    alpha: false,\r\n    depth: false,\r\n    antialias: false,\r\n    stencil: false,\r\n    preserveDrawingBuffer: false,\r\n    premultipliedAlpha: false,\r\n    failIfMajorPerformanceCaveat: false\r\n  };\r\n  let gl: WebGLRenderingContext|null;\r\n  const ca = contextAttributes;\r\n  if (!contextId || contextId === 'webgl2') {\r\n    gl = canvas.getContext('webgl2', ca);\r\n    if (gl) {\r\n      try {\r\n        return new WebGLContext(gl, 2);\r\n      } catch (err) {\r\n        Logger.warning('GlContextFactory', `failed to create WebGLContext using contextId 'webgl2'. Error: ${err}`);\r\n      }\r\n    }\r\n  }\r\n  if (!contextId || contextId === 'webgl') {\r\n    gl = canvas.getContext('webgl', ca) || canvas.getContext('experimental-webgl', ca) as WebGLRenderingContext;\r\n    if (gl) {\r\n      try {\r\n        return new WebGLContext(gl, 1);\r\n      } catch (err) {\r\n        Logger.warning(\r\n            'GlContextFactory',\r\n            `failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: ${err}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  throw new Error('WebGL is not supported');\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\ndeclare let OffscreenCanvas: {new (width: number, height: number): HTMLCanvasElement};\r\n\r\nfunction createCanvas(): HTMLCanvasElement {\r\n  if (typeof document === 'undefined') {\r\n    throw new TypeError('failed to create canvas: document is not supported');\r\n  }\r\n  const canvas: HTMLCanvasElement = document.createElement('canvas');\r\n  canvas.width = 1;\r\n  canvas.height = 1;\r\n  return canvas;\r\n}\r\n\r\nfunction createOffscreenCanvas(): HTMLCanvasElement {\r\n  if (typeof OffscreenCanvas === 'undefined') {\r\n    throw new TypeError('failed to create offscreen canvas: OffscreenCanvas is not supported');\r\n  }\r\n  return new OffscreenCanvas(1, 1);\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {env} from 'onnxruntime-common';\r\n\r\nimport * as DataEncoders from './texture-data-encoder';\r\nimport {DataEncoder, Encoder} from './texture-data-encoder';\r\nimport {repeatedTry} from './utils';\r\n\r\nexport interface FenceContext {\r\n  query: WebGLSync|null;\r\n  isFencePassed(): boolean;\r\n}\r\n\r\ntype PollItem = {\r\n  isDoneFn: () => boolean; resolveFn: () => void;\r\n};\r\n\r\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\r\n  let i = 0;\r\n  for (; i < arr.length; ++i) {\r\n    const isDone = arr[i]();\r\n    if (!isDone) {\r\n      break;\r\n    }\r\n  }\r\n  return i - 1;\r\n}\r\n\r\n/**\r\n * Abstraction and wrapper around WebGLRenderingContext and its operations\r\n */\r\nexport class WebGLContext {\r\n  gl: WebGLRenderingContext;\r\n  version: 1|2;\r\n\r\n  private vertexbuffer: WebGLBuffer;\r\n  private framebuffer: WebGLFramebuffer;\r\n\r\n  // WebGL flags and vital parameters\r\n  private isFloatTextureAttachableToFrameBuffer: boolean;\r\n  isFloat32DownloadSupported: boolean;\r\n  isRenderFloat32Supported: boolean;\r\n  isBlendSupported: boolean;\r\n  maxTextureSize: number;\r\n  // private maxCombinedTextureImageUnits: number;\r\n  private maxTextureImageUnits: number;\r\n  // private maxCubeMapTextureSize: number;\r\n  // private shadingLanguageVersion: string;\r\n  // private webglVendor: string;\r\n  // private webglVersion: string;\r\n\r\n  // WebGL2 flags and vital parameters\r\n  // private max3DTextureSize: number;\r\n  // private maxArrayTextureLayers: number;\r\n  // private maxColorAttachments: number;\r\n  // private maxDrawBuffers: number;\r\n\r\n  // WebGL extensions\r\n  // eslint-disable-next-line camelcase\r\n  textureFloatExtension: OES_texture_float|null;\r\n  // eslint-disable-next-line camelcase\r\n  textureHalfFloatExtension: OES_texture_half_float|null;\r\n\r\n  // WebGL2 extensions\r\n  colorBufferFloatExtension: unknown|null;\r\n  // eslint-disable-next-line @typescript-eslint/naming-convention\r\n  disjointTimerQueryWebgl2Extension: {TIME_ELAPSED_EXT: GLenum; GPU_DISJOINT_EXT: GLenum}|null;\r\n\r\n  private disposed: boolean;\r\n  private frameBufferBound = false;\r\n\r\n  constructor(gl: WebGLRenderingContext, version: 1|2) {\r\n    this.gl = gl;\r\n    this.version = version;\r\n\r\n    this.getExtensions();\r\n    this.vertexbuffer = this.createVertexbuffer();\r\n    this.framebuffer = this.createFramebuffer();\r\n    this.queryVitalParameters();\r\n  }\r\n\r\n  allocateTexture(width: number, height: number, encoder: DataEncoder, data?: Encoder.DataArrayType): WebGLTexture {\r\n    const gl = this.gl;\r\n    // create the texture\r\n    const texture = gl.createTexture();\r\n    // bind the texture so the following methods effect this texture.\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n    const buffer = data ? encoder.encode(data, width * height) : null;\r\n    gl.texImage2D(\r\n        gl.TEXTURE_2D,\r\n        0,  // Level of detail.\r\n        encoder.internalFormat, width, height,\r\n        0,  // Always 0 in OpenGL ES.\r\n        encoder.format, encoder.textureType, buffer);\r\n    this.checkError();\r\n    return texture as WebGLTexture;\r\n  }\r\n  updateTexture(\r\n      texture: WebGLTexture, width: number, height: number, encoder: DataEncoder, data: Encoder.DataArrayType): void {\r\n    const gl = this.gl;\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    const buffer = encoder.encode(data, width * height);\r\n    gl.texSubImage2D(\r\n        gl.TEXTURE_2D,\r\n        0,  // level\r\n        0,  // xoffset\r\n        0,  // yoffset\r\n        width, height, encoder.format, encoder.textureType, buffer);\r\n    this.checkError();\r\n  }\r\n  attachFramebuffer(texture: WebGLTexture, width: number, height: number): void {\r\n    const gl = this.gl;\r\n    // Make it the target for framebuffer operations - including rendering.\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\r\n    gl.framebufferTexture2D(\r\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\r\n        0);  // 0, we aren't using MIPMAPs\r\n    this.checkError();\r\n    gl.viewport(0, 0, width, height);\r\n    gl.scissor(0, 0, width, height);\r\n  }\r\n  readTexture(\r\n      texture: WebGLTexture, width: number, height: number, dataSize: number, dataType: Encoder.DataType,\r\n      channels: number): Encoder.DataArrayType {\r\n    const gl = this.gl;\r\n    if (!channels) {\r\n      channels = 1;\r\n    }\r\n    if (!this.frameBufferBound) {\r\n      this.attachFramebuffer(texture, width, height);\r\n    }\r\n    const encoder = this.getEncoder(dataType, channels);\r\n    const buffer = encoder.allocate(width * height);\r\n    // bind texture to framebuffer\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.framebufferTexture2D(\r\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\r\n        0);  // 0, we aren't using MIPMAPs\r\n    // TODO: Check if framebuffer is ready\r\n    gl.readPixels(0, 0, width, height, gl.RGBA, encoder.textureType, buffer);\r\n    this.checkError();\r\n    // unbind FB\r\n    return encoder.decode(buffer, dataSize);\r\n  }\r\n\r\n  isFramebufferReady(): boolean {\r\n    // TODO: Implement logic to check if the framebuffer is ready\r\n    return true;\r\n  }\r\n  getActiveTexture(): string {\r\n    const gl = this.gl;\r\n    const n = gl.getParameter(this.gl.ACTIVE_TEXTURE);\r\n    return `TEXTURE${(n - gl.TEXTURE0)}`;\r\n  }\r\n  getTextureBinding(): WebGLTexture {\r\n    return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);\r\n  }\r\n  getFramebufferBinding(): WebGLFramebuffer {\r\n    return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);\r\n  }\r\n  setVertexAttributes(positionHandle: number, textureCoordHandle: number): void {\r\n    const gl = this.gl;\r\n    gl.vertexAttribPointer(positionHandle, 3, gl.FLOAT, false, 20, 0);\r\n    gl.enableVertexAttribArray(positionHandle);\r\n    if (textureCoordHandle !== -1) {\r\n      gl.vertexAttribPointer(textureCoordHandle, 2, gl.FLOAT, false, 20, 12);\r\n      gl.enableVertexAttribArray(textureCoordHandle);\r\n    }\r\n    this.checkError();\r\n  }\r\n  createProgram(\r\n      vertexShader: WebGLShader,\r\n      fragShader: WebGLShader,\r\n      ): WebGLProgram {\r\n    const gl = this.gl;\r\n    const program = gl.createProgram()!;\r\n\r\n    // the program consists of our shaders\r\n    gl.attachShader(program, vertexShader);\r\n    gl.attachShader(program, fragShader);\r\n    gl.linkProgram(program);\r\n    return program;\r\n  }\r\n  compileShader(shaderSource: string, shaderType: number): WebGLShader {\r\n    const gl = this.gl;\r\n    const shader = gl.createShader(shaderType);\r\n    if (!shader) {\r\n      throw new Error(`createShader() returned null with type ${shaderType}`);\r\n    }\r\n\r\n    gl.shaderSource(shader, shaderSource);\r\n    gl.compileShader(shader);\r\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\r\n      throw new Error(`Failed to compile shader: ${gl.getShaderInfoLog(shader)}\r\nShader source:\r\n${shaderSource}`);\r\n    }\r\n    return shader;\r\n  }\r\n  deleteShader(shader: WebGLShader): void {\r\n    this.gl.deleteShader(shader);\r\n  }\r\n  bindTextureToUniform(texture: WebGLTexture, position: number, uniformHandle: WebGLUniformLocation): void {\r\n    const gl = this.gl;\r\n    gl.activeTexture(gl.TEXTURE0 + position);\r\n    this.checkError();\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    this.checkError();\r\n    gl.uniform1i(uniformHandle, position);\r\n    this.checkError();\r\n  }\r\n  draw(): void {\r\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\r\n    this.checkError();\r\n  }\r\n  checkError(): void {\r\n    if (env.debug) {\r\n      const gl = this.gl;\r\n      const error = gl.getError();\r\n      let label = '';\r\n      switch (error) {\r\n        case (gl.NO_ERROR):\r\n          return;\r\n        case (gl.INVALID_ENUM):\r\n          label = 'INVALID_ENUM';\r\n          break;\r\n        case (gl.INVALID_VALUE):\r\n          label = 'INVALID_VALUE';\r\n          break;\r\n        case (gl.INVALID_OPERATION):\r\n          label = 'INVALID_OPERATION';\r\n          break;\r\n        case (gl.INVALID_FRAMEBUFFER_OPERATION):\r\n          label = 'INVALID_FRAMEBUFFER_OPERATION';\r\n          break;\r\n        case (gl.OUT_OF_MEMORY):\r\n          label = 'OUT_OF_MEMORY';\r\n          break;\r\n        case (gl.CONTEXT_LOST_WEBGL):\r\n          label = 'CONTEXT_LOST_WEBGL';\r\n          break;\r\n        default:\r\n          label = `Unknown WebGL Error: ${error.toString(16)}`;\r\n      }\r\n      throw new Error(label);\r\n    }\r\n  }\r\n  deleteTexture(texture: WebGLTexture): void {\r\n    this.gl.deleteTexture(texture);\r\n  }\r\n  deleteProgram(program: WebGLProgram): void {\r\n    this.gl.deleteProgram(program);\r\n  }\r\n  getEncoder(dataType: Encoder.DataType, channels: number, usage: Encoder.Usage = Encoder.Usage.Default): DataEncoder {\r\n    if (this.version === 2) {\r\n      return new DataEncoders.RedFloat32DataEncoder(this.gl as WebGL2RenderingContext, channels);\r\n    }\r\n\r\n    switch (dataType) {\r\n      case 'float':\r\n        if (usage === Encoder.Usage.UploadOnly || this.isRenderFloat32Supported) {\r\n          return new DataEncoders.RGBAFloatDataEncoder(this.gl, channels);\r\n        } else {\r\n          return new DataEncoders.RGBAFloatDataEncoder(\r\n              this.gl, channels, this.textureHalfFloatExtension!.HALF_FLOAT_OES);\r\n        }\r\n      case 'int':\r\n        throw new Error('not implemented');\r\n      case 'byte':\r\n        return new DataEncoders.Uint8DataEncoder(this.gl, channels);\r\n      default:\r\n        throw new Error(`Invalid dataType: ${dataType}`);\r\n    }\r\n  }\r\n  clearActiveTextures(): void {\r\n    const gl = this.gl;\r\n    for (let unit = 0; unit < this.maxTextureImageUnits; ++unit) {\r\n      gl.activeTexture(gl.TEXTURE0 + unit);\r\n      gl.bindTexture(gl.TEXTURE_2D, null);\r\n    }\r\n  }\r\n  dispose(): void {\r\n    if (this.disposed) {\r\n      return;\r\n    }\r\n    const gl = this.gl;\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    gl.deleteFramebuffer(this.framebuffer);\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n    gl.deleteBuffer(this.vertexbuffer);\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n    gl.finish();\r\n    this.disposed = true;\r\n  }\r\n\r\n  private createDefaultGeometry(): Float32Array {\r\n    // Sets of x,y,z(=0),s,t coordinates.\r\n    return new Float32Array([\r\n      -1.0, 1.0,  0.0, 0.0, 1.0,  // upper left\r\n      -1.0, -1.0, 0.0, 0.0, 0.0,  // lower left\r\n      1.0,  1.0,  0.0, 1.0, 1.0,  // upper right\r\n      1.0,  -1.0, 0.0, 1.0, 0.0   // lower right\r\n    ]);\r\n  }\r\n  private createVertexbuffer(): WebGLBuffer {\r\n    const gl = this.gl;\r\n    const buffer = gl.createBuffer();\r\n    if (!buffer) {\r\n      throw new Error('createBuffer() returned null');\r\n    }\r\n    const geometry = this.createDefaultGeometry();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, geometry, gl.STATIC_DRAW);\r\n    this.checkError();\r\n    return buffer;\r\n  }\r\n  private createFramebuffer(): WebGLFramebuffer {\r\n    const fb = this.gl.createFramebuffer();\r\n    if (!fb) {\r\n      throw new Error('createFramebuffer returned null');\r\n    }\r\n    return fb;\r\n  }\r\n\r\n  private queryVitalParameters(): void {\r\n    const gl = this.gl;\r\n\r\n    this.isFloatTextureAttachableToFrameBuffer = this.checkFloatTextureAttachableToFrameBuffer();\r\n    this.isRenderFloat32Supported = this.checkRenderFloat32();\r\n    this.isFloat32DownloadSupported = this.checkFloat32Download();\r\n\r\n    if (this.version === 1 && !this.textureHalfFloatExtension && !this.isRenderFloat32Supported) {\r\n      throw new Error('both float32 and float16 TextureType are not supported');\r\n    }\r\n\r\n    this.isBlendSupported = !this.isRenderFloat32Supported || this.checkFloat32Blend();\r\n\r\n    // this.maxCombinedTextureImageUnits = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\r\n    this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\r\n    this.maxTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\r\n    // this.maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\r\n    // this.shadingLanguageVersion = gl.getParameter(gl.SHADING_LANGUAGE_VERSION);\r\n    // this.webglVendor = gl.getParameter(gl.VENDOR);\r\n    // this.webglVersion = gl.getParameter(gl.VERSION);\r\n\r\n    if (this.version === 2) {\r\n      // this.max3DTextureSize = gl.getParameter(WebGL2RenderingContext.MAX_3D_TEXTURE_SIZE);\r\n      // this.maxArrayTextureLayers = gl.getParameter(WebGL2RenderingContext.MAX_ARRAY_TEXTURE_LAYERS);\r\n      // this.maxColorAttachments = gl.getParameter(WebGL2RenderingContext.MAX_COLOR_ATTACHMENTS);\r\n      // this.maxDrawBuffers = gl.getParameter(WebGL2RenderingContext.MAX_DRAW_BUFFERS);\r\n    }\r\n  }\r\n  private getExtensions(): void {\r\n    if (this.version === 2) {\r\n      this.colorBufferFloatExtension = this.gl.getExtension('EXT_color_buffer_float');\r\n      this.disjointTimerQueryWebgl2Extension = this.gl.getExtension('EXT_disjoint_timer_query_webgl2');\r\n    } else {\r\n      this.textureFloatExtension = this.gl.getExtension('OES_texture_float');\r\n      this.textureHalfFloatExtension = this.gl.getExtension('OES_texture_half_float');\r\n    }\r\n  }\r\n\r\n  private checkFloatTextureAttachableToFrameBuffer(): boolean {\r\n    // test whether Float32 texture is supported:\r\n    // STEP.1 create a float texture\r\n    const gl = this.gl;\r\n    const texture = gl.createTexture();\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\r\n    // STEP.2 bind a frame buffer\r\n    const frameBuffer = gl.createFramebuffer();\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\r\n    // STEP.3 attach texture to framebuffer\r\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\r\n    // STEP.4 test whether framebuffer is complete\r\n    const isComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\r\n    gl.bindTexture(gl.TEXTURE_2D, null);\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    gl.deleteTexture(texture);\r\n    gl.deleteFramebuffer(frameBuffer);\r\n    return isComplete;\r\n  }\r\n\r\n  private checkRenderFloat32(): boolean {\r\n    if (this.version === 2) {\r\n      if (!this.colorBufferFloatExtension) {\r\n        return false;\r\n      }\r\n    } else {\r\n      if (!this.textureFloatExtension) {\r\n        return false;\r\n      }\r\n    }\r\n    return this.isFloatTextureAttachableToFrameBuffer;\r\n  }\r\n\r\n  private checkFloat32Download(): boolean {\r\n    if (this.version === 2) {\r\n      if (!this.colorBufferFloatExtension) {\r\n        return false;\r\n      }\r\n    } else {\r\n      if (!this.textureFloatExtension) {\r\n        return false;\r\n      }\r\n      if (!this.gl.getExtension('WEBGL_color_buffer_float')) {\r\n        return false;\r\n      }\r\n    }\r\n    return this.isFloatTextureAttachableToFrameBuffer;\r\n  }\r\n\r\n  /**\r\n   * Check whether GL_BLEND is supported\r\n   */\r\n  private checkFloat32Blend(): boolean {\r\n    // it looks like currently (2019-05-08) there is no easy way to detect whether BLEND is supported\r\n    // https://github.com/microsoft/onnxjs/issues/145\r\n\r\n    const gl = this.gl;\r\n\r\n    let texture: WebGLTexture|null|undefined;\r\n    let frameBuffer: WebGLFramebuffer|null|undefined;\r\n    let vertexShader: WebGLShader|null|undefined;\r\n    let fragmentShader: WebGLShader|null|undefined;\r\n    let program: WebGLProgram|null|undefined;\r\n\r\n    try {\r\n      texture = gl.createTexture();\r\n      frameBuffer = gl.createFramebuffer();\r\n      gl.bindTexture(gl.TEXTURE_2D, texture);\r\n\r\n      // eslint-disable-next-line @typescript-eslint/naming-convention\r\n      const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\r\n      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\r\n\r\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\r\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\r\n\r\n      gl.enable(gl.BLEND);\r\n\r\n      vertexShader = gl.createShader(gl.VERTEX_SHADER);\r\n      if (!vertexShader) {\r\n        return false;\r\n      }\r\n      gl.shaderSource(vertexShader, 'void main(){}');\r\n      gl.compileShader(vertexShader);\r\n\r\n      fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\r\n      if (!fragmentShader) {\r\n        return false;\r\n      }\r\n      gl.shaderSource(fragmentShader, 'precision highp float;void main(){gl_FragColor=vec4(0.5);}');\r\n      gl.compileShader(fragmentShader);\r\n\r\n      program = gl.createProgram();\r\n      if (!program) {\r\n        return false;\r\n      }\r\n      gl.attachShader(program, vertexShader);\r\n      gl.attachShader(program, fragmentShader);\r\n      gl.linkProgram(program);\r\n      gl.useProgram(program);\r\n\r\n      gl.drawArrays(gl.POINTS, 0, 1);\r\n      return gl.getError() === gl.NO_ERROR;\r\n\r\n    } finally {\r\n      gl.disable(gl.BLEND);\r\n\r\n      if (program) {\r\n        gl.deleteProgram(program);\r\n      }\r\n      if (vertexShader) {\r\n        gl.deleteShader(vertexShader);\r\n      }\r\n      if (fragmentShader) {\r\n        gl.deleteShader(fragmentShader);\r\n      }\r\n      if (frameBuffer) {\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n        gl.deleteFramebuffer(frameBuffer);\r\n      }\r\n      if (texture) {\r\n        gl.bindTexture(gl.TEXTURE_2D, null);\r\n        gl.deleteTexture(texture);\r\n      }\r\n    }\r\n  }\r\n\r\n  beginTimer(): WebGLQuery {\r\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\r\n      const gl2 = this.gl as WebGL2RenderingContext;\r\n      const ext = this.disjointTimerQueryWebgl2Extension;\r\n\r\n      const query = gl2.createQuery() as WebGLQuery;\r\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\r\n      return query;\r\n    } else {\r\n      // TODO: add webgl 1 handling.\r\n      throw new Error('WebGL1 profiling currently not supported.');\r\n    }\r\n  }\r\n\r\n  endTimer() {\r\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\r\n      const gl2 = this.gl as WebGL2RenderingContext;\r\n      const ext = this.disjointTimerQueryWebgl2Extension;\r\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\r\n      return;\r\n    } else {\r\n      // TODO: add webgl 1 handling.\r\n      throw new Error('WebGL1 profiling currently not supported');\r\n    }\r\n  }\r\n\r\n  isTimerResultAvailable(query: WebGLQuery): boolean {\r\n    let available = false, disjoint = false;\r\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\r\n      const gl2 = this.gl as WebGL2RenderingContext;\r\n      const ext = this.disjointTimerQueryWebgl2Extension;\r\n\r\n      available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\r\n      disjoint = gl2.getParameter(ext.GPU_DISJOINT_EXT);\r\n    } else {\r\n      // TODO: add webgl 1 handling.\r\n      throw new Error('WebGL1 profiling currently not supported');\r\n    }\r\n\r\n    return available && !disjoint;\r\n  }\r\n\r\n  getTimerResult(query: WebGLQuery): number {\r\n    let timeElapsed = 0;\r\n    if (this.version === 2) {\r\n      const gl2 = this.gl as WebGL2RenderingContext;\r\n      timeElapsed = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\r\n      gl2.deleteQuery(query);\r\n    } else {\r\n      // TODO: add webgl 1 handling.\r\n      throw new Error('WebGL1 profiling currently not supported');\r\n    }\r\n    // return miliseconds\r\n    return timeElapsed / 1000000;\r\n  }\r\n\r\n  async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\r\n    await repeatedTry(() => this.isTimerResultAvailable(query));\r\n    return this.getTimerResult(query);\r\n  }\r\n\r\n  public async createAndWaitForFence(): Promise<void> {\r\n    const fenceContext = this.createFence(this.gl);\r\n    return this.pollFence(fenceContext);\r\n  }\r\n\r\n  private createFence(gl: WebGLRenderingContext): FenceContext {\r\n    let isFencePassed: () => boolean;\r\n    const gl2 = gl as WebGL2RenderingContext;\r\n    const query = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\r\n    gl.flush();\r\n    if (query === null) {\r\n      isFencePassed = () => true;\r\n    } else {\r\n      isFencePassed = () => {\r\n        const status = gl2.clientWaitSync(query, 0, 0);\r\n        return status === gl2.ALREADY_SIGNALED || status === gl2.CONDITION_SATISFIED;\r\n      };\r\n    }\r\n    return {query, isFencePassed};\r\n  }\r\n\r\n  async pollFence(fenceContext: FenceContext) {\r\n    return new Promise<void>(resolve => {\r\n      void this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\r\n    });\r\n  }\r\n\r\n  private itemsToPoll: PollItem[] = [];\r\n\r\n  pollItems(): void {\r\n    // Find the last query that has finished.\r\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\r\n    for (let i = 0; i <= index; ++i) {\r\n      const {resolveFn} = this.itemsToPoll[i];\r\n      resolveFn();\r\n    }\r\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\r\n  }\r\n\r\n  private async addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\r\n    this.itemsToPoll.push({isDoneFn, resolveFn});\r\n    if (this.itemsToPoll.length > 1) {\r\n      // We already have a running loop that polls.\r\n      return;\r\n    }\r\n    // Start a new loop that polls.\r\n    await repeatedTry(() => {\r\n      this.pollItems();\r\n      // End the loop if no more items to poll.\r\n      return this.itemsToPoll.length === 0;\r\n    });\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {SessionHandler} from './backend';\r\nimport {Graph} from './graph';\r\nimport {Logger, Profiler} from './instrument';\r\nimport {Operator} from './operators';\r\nimport {Tensor} from './tensor';\r\n\r\nclass KernelOp {\r\n  constructor(public op: Operator, public node: Graph.Node) {}\r\n}\r\n\r\nexport class ExecutionPlan {\r\n  constructor(private graph: Graph, ops: Operator[], private profiler: Readonly<Profiler>) {\r\n    this.initialize(ops);\r\n  }\r\n\r\n  initialize(ops: Operator[]) {\r\n    this.profiler.event('session', 'ExecutionPlan.initialize', () => {\r\n      const graphNodes = this.graph.getNodes();\r\n      if (graphNodes.length !== ops.length) {\r\n        throw new Error('The size of nodes and OPs do not match.');\r\n      }\r\n\r\n      this._ops = ops.map((op, i) => new KernelOp(op, graphNodes[i]));\r\n      this.reset();\r\n\r\n      // look for starter node(s)\r\n      this._starter = [];\r\n      this._ops.forEach((op, i) => {\r\n        let resolved = true;\r\n        for (const input of op.node.inputs) {\r\n          if (\r\n              !this._values[input]                                   // not an initialized input\r\n              && this.graph.getInputIndices().indexOf(input) === -1  // not model input\r\n          ) {\r\n            resolved = false;\r\n            break;\r\n          }\r\n        }\r\n        if (resolved) {\r\n          this._starter.push(i);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  reset() {\r\n    this._values = this.graph.getValues().map(i => i.tensor);\r\n  }\r\n\r\n  async execute(sessionHandler: SessionHandler, modelInputs: Tensor[]): Promise<Tensor[]> {\r\n    return this.profiler.event('session', 'ExecutionPlan.execute', async () => {\r\n      // reset mediem result\r\n      this.reset();\r\n\r\n      // create inference handler\r\n      const inferenceHandler = sessionHandler.createInferenceHandler();\r\n\r\n      // populate inputs value\r\n      const graphInputs = this.graph.getInputIndices();\r\n      if (modelInputs.length !== graphInputs.length) {\r\n        throw new Error(`number of input tensors don't match the number of inputs to the model: actual: ${\r\n            modelInputs.length} expected: ${graphInputs.length}`);\r\n      }\r\n\r\n      modelInputs.forEach((input, i) => {\r\n        const index = graphInputs[i];\r\n        this._values[index] = input;\r\n      });\r\n\r\n      // prepare running sequence\r\n      const sequence: number[] = this._starter.slice(0);\r\n\r\n      // execution iterations\r\n      const graphValues = this.graph.getValues();\r\n      const graphNodes = this.graph.getNodes();\r\n\r\n      let rear = 0;\r\n      while (rear < sequence.length) {\r\n        const thisOpIndex = sequence[rear++];\r\n        const thisOp = this._ops[thisOpIndex];\r\n\r\n        // check input\r\n        const inputList = thisOp.node.inputs.map(i => this._values[i]);\r\n        if (inputList.indexOf(undefined) !== -1) {\r\n          throw new Error(`unresolved input detected: op: ${thisOp.node}`);\r\n        }\r\n\r\n        // run\r\n        const inputTensors = inputList as Tensor[];\r\n        Logger.verbose(\r\n            'ExecPlan',\r\n            `Runing op:${thisOp.node.name} (${\r\n                inputTensors.map((t, i) => `'${thisOp.node.inputs[i]}': ${t.type}[${t.dims.join(',')}]`).join(', ')})`);\r\n\r\n        const outputList = await this.profiler.event(\r\n            'node', thisOp.node.name, async () => thisOp.op.impl(inferenceHandler, inputTensors, thisOp.op.context));\r\n\r\n        // check output\r\n        if (outputList.length !== thisOp.node.outputs.length) {\r\n          throw new Error('the size of output does not match model definition.');\r\n        }\r\n\r\n        // fill value\r\n        outputList.forEach((output, i) => {\r\n          const j = thisOp.node.outputs[i];\r\n          if (this._values[j]) {\r\n            throw new Error(`output [${j}] already has value: op:${thisOp.node.name}`);\r\n          }\r\n          this._values[j] = output;\r\n        });\r\n\r\n        // resolve downstream nodes\r\n        const downstreamNodes = new Set<number>();\r\n        outputList.forEach((output, i) => {\r\n          const j = thisOp.node.outputs[i];\r\n          for (const currentDownstreamNodeIndex of graphValues[j].to) {\r\n            const currentDownstreamNode = graphNodes[currentDownstreamNodeIndex];\r\n            let resolved = true;\r\n            for (const k of currentDownstreamNode.inputs) {\r\n              if (!this._values[k]) {\r\n                resolved = false;\r\n                break;\r\n              }\r\n            }\r\n            if (resolved) {\r\n              downstreamNodes.add(currentDownstreamNodeIndex);\r\n            }\r\n          }\r\n        });\r\n        sequence.push(...downstreamNodes);\r\n      }\r\n\r\n      const output: Tensor[] = [];\r\n      for (let i = 0; i < this.graph.getOutputIndices().length; i++) {\r\n        const outputIndex = this.graph.getOutputIndices()[i];\r\n        const outputTensor = this._values[outputIndex];\r\n        if (outputTensor === undefined) {\r\n          throw new Error(`required output [${outputIndex}] does not have value`);\r\n        }\r\n        if (outputIndex === 0) {\r\n          await outputTensor.getData();\r\n        } else {\r\n          // eslint-disable-next-line no-unused-expressions\r\n          outputTensor.data;\r\n        }\r\n        output.push(outputTensor);\r\n      }\r\n      Logger.verbose('ExecPlan', 'disposing of inferenceHandler');\r\n      inferenceHandler.dispose();\r\n      return output;\r\n    });\r\n  }\r\n\r\n  _values: Array<Tensor|undefined>;\r\n  _ops: KernelOp[];\r\n  _starter: number[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from './attribute';\r\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\r\nimport {onnx} from './ort-schema/protobuf/onnx';\r\nimport {Tensor} from './tensor';\r\nimport {LongUtil, MAX_CLIP, MIN_CLIP, ProtoUtil} from './util';\r\n\r\nimport ortFbs = onnxruntime.experimental.fbs;\r\n\r\nexport declare namespace Graph {\r\n  export interface Shape {\r\n    readonly dims: readonly number[];\r\n  }\r\n  export interface ValueType {\r\n    readonly tensorType: Tensor.DataType;\r\n    readonly shape: Shape;\r\n  }\r\n  export interface Value {\r\n    // the tensor data. empty for non-initialized inputs\r\n    readonly tensor?: Tensor;\r\n\r\n    // index to the Node where the value comes from. -1 for initializer.\r\n    readonly from: number;\r\n\r\n    // indices to the Nodes where the values go to.\r\n    readonly to: readonly number[];\r\n\r\n    // value type specification. empty for non-input values.\r\n    readonly type?: ValueType;\r\n  }\r\n  export interface Node {\r\n    // name of the node\r\n    readonly name: string;\r\n\r\n    // the operator type\r\n    readonly opType: string;\r\n\r\n    // indices to the Values where the inputs come from.\r\n    readonly inputs: readonly number[];\r\n\r\n    // indices to the Values where the outpus go to.\r\n    readonly outputs: readonly number[];\r\n\r\n    // the attributes that used by the operator\r\n    readonly attributes: Attribute;\r\n  }\r\n\r\n  /**\r\n   * a Transformer is an instance that allows all possible transformation operations that applied to a graph\r\n   */\r\n  export interface Transformer {\r\n    removeAllIdentityNodes(): void;\r\n    removeAllDropoutNodes(): void;\r\n    fuseConvActivationNodes(): void;\r\n    // TODO: add generic functions to manipulate the graph\r\n  }\r\n\r\n  // an initializer can use transformer to transform the graph\r\n  export interface Initializer {\r\n    transformGraph(transformer: Transformer): void;\r\n  }\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-redeclare\r\nexport interface Graph {\r\n  getInputIndices(): readonly number[];\r\n  getInputNames(): readonly string[];\r\n  getOutputIndices(): readonly number[];\r\n  getOutputNames(): readonly string[];\r\n  getValues(): readonly Graph.Value[];\r\n  getNodes(): readonly Graph.Node[];\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-redeclare\r\nexport const Graph = {\r\n  /**\r\n   * construct a graph from a graph protobuf type\r\n   */\r\n  from: (graphProto: onnx.IGraphProto|ortFbs.Graph, initializer?: Graph.Initializer) =>\r\n      new GraphImpl(graphProto, initializer),\r\n};\r\n\r\nclass Value implements Graph.Value {\r\n  constructor(valueInfo?: onnx.IValueInfoProto) {\r\n    this._from = undefined;\r\n    this._to = [];\r\n    this.tensor = undefined;\r\n    this.type = undefined;\r\n\r\n    if (valueInfo) {\r\n      this.type = ProtoUtil.tensorValueTypeFromProto(valueInfo.type!.tensorType!);\r\n    }\r\n  }\r\n\r\n  _from?: number;  // -1 represent from initializer\r\n  get from() {\r\n    return this._from!;\r\n  }\r\n  _to: number[];\r\n  get to() {\r\n    return this._to;\r\n  }\r\n  type?: Graph.ValueType;\r\n  tensor?: Tensor;\r\n}\r\n\r\nclass Node implements Graph.Node {\r\n  constructor(_nodeProto: onnx.INodeProto|ortFbs.Node, name?: string) {\r\n    if (_nodeProto instanceof onnx.NodeProto) {\r\n      this.name = _nodeProto.name;\r\n      this.opType = _nodeProto.opType;\r\n      this.attributes = new Attribute(_nodeProto.attribute);\r\n    } else if (_nodeProto instanceof ortFbs.Node) {\r\n      this.name = name ?? _nodeProto.name()!;\r\n      this.opType = _nodeProto.opType()!;\r\n      this.attributes = new Attribute(ProtoUtil.tensorAttributesFromORTFormat(_nodeProto));\r\n    }\r\n\r\n    this.inputs = [];\r\n    this.outputs = [];\r\n    this.executeNode = true;\r\n  }\r\n\r\n  name: string;\r\n  opType: string;\r\n  inputs: number[];\r\n  outputs: number[];\r\n  attributes: Attribute;\r\n  executeNode: boolean;\r\n}\r\n\r\nclass GraphImpl implements Graph, Graph.Transformer {\r\n  private _allData: Value[];\r\n\r\n  private _allInputIndices: number[];\r\n  private _allInputNames: string[];\r\n\r\n  private _allOutputIndices: number[];\r\n  private _allOutputNames: string[];\r\n\r\n  private _nodes: Node[];\r\n\r\n  constructor(graph: onnx.IGraphProto|ortFbs.Graph, graphInitializer?: Graph.Initializer) {\r\n    if (!graph) {\r\n      throw new TypeError('graph is empty');\r\n    }\r\n\r\n    // build the graph - will throw exceptions if something fatal is detected\r\n    this.buildGraph(graph);\r\n\r\n    // execute any transformation logic for the graph (if applicable)\r\n    this.transformGraph(graphInitializer);\r\n\r\n    // check for cycles and other inconsistencies - will throw exceptions if something fatal is detected\r\n    this.checkIsAcyclic();\r\n  }\r\n\r\n  getInputIndices(): readonly number[] {\r\n    return this._allInputIndices;\r\n  }\r\n\r\n  getInputNames(): readonly string[] {\r\n    return this._allInputNames;\r\n  }\r\n\r\n  getOutputIndices(): readonly number[] {\r\n    return this._allOutputIndices;\r\n  }\r\n\r\n  getOutputNames(): readonly string[] {\r\n    return this._allOutputNames;\r\n  }\r\n\r\n  getValues(): readonly Graph.Value[] {\r\n    return this._allData;\r\n  }\r\n\r\n  getNodes(): readonly Graph.Node[] {\r\n    return this._nodes;\r\n  }\r\n\r\n  private buildGraph(graph: onnx.IGraphProto|ortFbs.Graph) {\r\n    // build the graph - will throw exceptions if something fatal is detected\r\n    if (graph instanceof onnx.GraphProto) {\r\n      this.buildGraphFromOnnxFormat(graph);\r\n    } else if (graph instanceof ortFbs.Graph) {\r\n      this.buildGraphFromOrtFormat(graph);\r\n    } else {\r\n      throw new TypeError('Graph type is not supported.');\r\n    }\r\n  }\r\n  private buildGraphFromOnnxFormat(graph: onnx.IGraphProto) {\r\n    const dataIndices = new Map<string, number>();\r\n    this._allData = [];\r\n\r\n    this._allInputIndices = [];\r\n    this._allInputNames = [];\r\n\r\n    this._allOutputIndices = [];\r\n    this._allOutputNames = [];\r\n\r\n    this._nodes = [];\r\n\r\n    const nodesIndices = new Map<string, number>();\r\n\r\n    // scan all inputs\r\n    if (!graph.input) {\r\n      throw new Error('missing information in graph: input');\r\n    }\r\n    const inputValueNames = [];\r\n    for (const i of graph.input) {\r\n      if (dataIndices.has(i.name!)) {\r\n        throw new Error(`duplicated input name: ${i.name}`);\r\n      }\r\n      const currentIndex = this._allData.push(new Value(i)) - 1;\r\n      dataIndices.set(i.name!, currentIndex);\r\n      inputValueNames.push(i.name!);\r\n    }\r\n\r\n    // scan all initializers\r\n    if (!graph.initializer) {\r\n      throw new Error('missing information in graph: initializer');\r\n    }\r\n    for (const i of graph.initializer) {\r\n      let index = dataIndices.get(i.name!);\r\n      if (index === undefined) {\r\n        const value = new Value();\r\n        value.type = {\r\n          shape: {dims: ProtoUtil.tensorDimsFromProto(i.dims!)},\r\n          tensorType: ProtoUtil.tensorDataTypeFromProto(i.dataType!)\r\n        };\r\n        index = this._allData.push(value) - 1;\r\n        dataIndices.set(i.name!, index);\r\n      }\r\n      this._allData[index]._from = -1;\r\n      this._allData[index].tensor = Tensor.fromProto(i);\r\n    }\r\n\r\n    // filter out input indices\r\n    for (let i = 0; i < this._allData.length; i++) {\r\n      if (!this._allData[i].tensor) {\r\n        this._allInputIndices.push(i);\r\n        this._allInputNames.push(inputValueNames[i]);\r\n      }\r\n    }\r\n\r\n    // scan all outputs\r\n    if (!graph.output) {\r\n      throw new Error('missing information in graph: output');\r\n    }\r\n    for (const i of graph.output) {\r\n      if (dataIndices.has(i.name!)) {\r\n        throw new Error(`duplicated output name: ${i.name}`);\r\n      }\r\n      const currentIndex = this._allData.push(new Value(i)) - 1;\r\n      dataIndices.set(i.name!, currentIndex);\r\n      this._allOutputIndices.push(currentIndex);\r\n      this._allOutputNames.push(i.name!);\r\n    }\r\n\r\n    // scan all nodes\r\n    if (!graph.node) {\r\n      throw new Error('missing information in graph: node');\r\n    }\r\n    for (const nodeProto of graph.node) {\r\n      if (!nodeProto.name) {\r\n        // assign a name to the node if it doesn't have one\r\n        for (let pick = 0;; pick++) {\r\n          const name = `unnamed_${nodeProto.opType}_${pick}`;\r\n          if (!nodesIndices.has(name)) {\r\n            nodeProto.name = name;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (nodesIndices.has(nodeProto.name)) {\r\n        throw new Error(`duplicated node name: ${nodeProto.name}`);\r\n      }\r\n      const currentIndex = this._nodes.push(new Node(nodeProto)) - 1;\r\n      nodesIndices.set(nodeProto.name, currentIndex);\r\n    }\r\n\r\n    // scan node's outputs\r\n    for (let i = 0; i < this._nodes.length; i++) {\r\n      const node = this._nodes[i];\r\n      const nodeProto = graph.node[i];\r\n      if (!nodeProto.output) {\r\n        throw new Error(`missing output for node: ${nodeProto.name}`);\r\n      }\r\n      for (const output of nodeProto.output) {\r\n        let dataIndex = dataIndices.get(output);\r\n        if (typeof dataIndex === 'undefined') {\r\n          dataIndex = this._allData.push(new Value()) - 1;\r\n          dataIndices.set(output, dataIndex);\r\n        }\r\n        node.outputs.push(dataIndex);\r\n\r\n        if (this._allData[dataIndex]._from !== undefined) {\r\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\r\n        }\r\n        this._allData[dataIndex]._from = i;\r\n\r\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\r\n        // operator and ignore the node from the graph\r\n        if (nodeProto.opType === 'Constant') {\r\n          if (!nodeProto.attribute || nodeProto.attribute.length !== 1 || !nodeProto.attribute[0].t) {\r\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\r\n          }\r\n          if (!nodeProto.output || nodeProto.output.length !== 1) {\r\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\r\n          }\r\n          node.outputs.pop();\r\n          node.executeNode = false;\r\n\r\n          this._allData[dataIndex]._from = -1;\r\n          this._allData[dataIndex].tensor = Tensor.fromProto(nodeProto.attribute[0].t);\r\n        }\r\n      }\r\n    }\r\n\r\n    // scan node's inputs\r\n    for (let i = 0; i < this._nodes.length; i++) {\r\n      const node = this._nodes[i];\r\n      const nodeProto = graph.node[i];\r\n\r\n      if (!nodeProto.input) {\r\n        throw new Error(`missing input for node: ${nodeProto.name}`);\r\n      }\r\n      for (const input of nodeProto.input) {\r\n        const dataIndex = dataIndices.get(input);\r\n        if (typeof dataIndex === 'undefined') {\r\n          // handle exception when opset > 9 and roi / scales not given\r\n          if (input === '' && (nodeProto.input.length === 3 || nodeProto.input.length === 4) &&\r\n              nodeProto.opType === 'Resize') {\r\n            continue;\r\n          }\r\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto.name}`);\r\n        }\r\n        node.inputs.push(dataIndex);\r\n\r\n        this._allData[dataIndex]._to.push(i);\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  private buildGraphFromOrtFormat(graph: ortFbs.Graph) {\r\n    const dataIndices = new Map<string, number>();\r\n    this._allData = [];\r\n\r\n    this._allInputIndices = [];\r\n    this._allInputNames = [];\r\n\r\n    this._allOutputIndices = [];\r\n    this._allOutputNames = [];\r\n\r\n    this._nodes = [];\r\n\r\n    const nodesIndices = new Map<string, number>();\r\n\r\n    // scan all inputs\r\n    const inputValueNames = [];\r\n    for (let i = 0; i < graph.inputsLength(); i++) {\r\n      const inputName = graph.inputs(i);\r\n      if (dataIndices.has(inputName)) {\r\n        throw new Error(`duplicated input name: ${inputName}`);\r\n      }\r\n      // Find the input typeInfo from nodeargs\r\n      for (let j = 0; j < graph.nodeArgsLength(); j++) {\r\n        if (graph.nodeArgs(j)?.name() === inputName) {\r\n          const value = new Value();\r\n          const valueType = graph.nodeArgs(j)?.type()?.valueType();\r\n          if (valueType !== ortFbs.TypeInfoValue.tensor_type) {\r\n            throw new Error('Unexpected value type for the nodeArg.');\r\n          }\r\n          const valueInfo = graph.nodeArgs(j)!.type()!.value(new ortFbs.TensorTypeAndShape())!;\r\n          const type = ProtoUtil.tensorDataTypeFromProto(valueInfo.elemType());\r\n          const shape = valueInfo.shape()!;\r\n          const dims = [];\r\n          for (let k = 0; k < shape.dimLength()!; k++) {\r\n            dims.push(LongUtil.longToNumber(shape.dim(k)!.value()!.dimValue()!));\r\n          }\r\n          value.type = {shape: {dims}, tensorType: type};\r\n          const currentIndex = this._allData.push(value) - 1;\r\n          dataIndices.set(inputName, currentIndex);\r\n          inputValueNames.push(inputName);\r\n        }\r\n      }\r\n    }\r\n    // check initializers\r\n    for (let i = 0; i < graph.initializersLength(); i++) {\r\n      const initializer = graph.initializers(i)!;\r\n      let index = dataIndices.get(initializer.name()!);\r\n      if (index === undefined) {\r\n        const value = new Value();\r\n        const dims = ProtoUtil.tensorDimsFromORTFormat(initializer);\r\n        const type = ProtoUtil.tensorDataTypeFromProto(initializer.dataType());\r\n        value.type = {shape: {dims}, tensorType: type};\r\n        index = this._allData.push(value) - 1;\r\n        dataIndices.set(initializer.name()!, index);\r\n      }\r\n      this._allData[index]._from = -1;\r\n      this._allData[index].tensor = Tensor.fromOrtTensor(initializer);\r\n    }\r\n\r\n    // filter out input indices\r\n    for (let i = 0; i < this._allData.length; i++) {\r\n      if (!this._allData[i].tensor) {\r\n        this._allInputIndices.push(i);\r\n        this._allInputNames.push(inputValueNames[i]);\r\n      }\r\n    }\r\n\r\n    // scan all outputs\r\n    for (let i = 0; i < graph.outputsLength(); i++) {\r\n      const outputName = graph.outputs(i);\r\n      if (dataIndices.has(outputName)) {\r\n        throw new Error(`duplicated output name: ${outputName}`);\r\n      }\r\n      const currentIndex = this._allData.push(new Value()) - 1;\r\n      dataIndices.set(outputName, currentIndex);\r\n      this._allOutputIndices.push(currentIndex);\r\n      this._allOutputNames.push(outputName);\r\n    }\r\n\r\n    // scan all nodes\r\n    if (!graph.nodes) {\r\n      throw new Error('missing information in graph: node');\r\n    }\r\n    for (let i = 0; i < graph.nodesLength(); i++) {\r\n      const nodeProto = graph.nodes(i);\r\n      let name = nodeProto!.name();\r\n      if (!name) {\r\n        // assign a name to the node if it doesn't have one\r\n        for (let pick = 0;; pick++) {\r\n          name = `unnamed_${nodeProto!.opType()}_${pick}`;\r\n          if (!nodesIndices.has(name)) {\r\n            // an unique name is found. break.\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (nodesIndices.has(name)) {\r\n        throw new Error(`duplicated node name: ${name}`);\r\n      }\r\n      const currentIndex = this._nodes.push(new Node(nodeProto!, name)) - 1;\r\n      nodesIndices.set(name, currentIndex);\r\n    }\r\n\r\n    // scan node's outputs\r\n    for (let i = 0; i < this._nodes.length; i++) {\r\n      const node = this._nodes[i];\r\n      const nodeProto = graph.nodes(i);\r\n      if (nodeProto == null) {\r\n        throw new Error(`No node exists at index ${i}`);\r\n      }\r\n      if (nodeProto?.outputsLength() === 0) {\r\n        throw new Error(`missing output for node: ${nodeProto.name}`);\r\n      }\r\n      for (let j = 0; j < nodeProto?.outputsLength(); j++) {\r\n        const output = nodeProto?.outputs(j);\r\n        let dataIndex = dataIndices.get(output);\r\n        if (typeof dataIndex === 'undefined') {\r\n          dataIndex = this._allData.push(new Value()) - 1;\r\n          dataIndices.set(output, dataIndex);\r\n        }\r\n        node.outputs.push(dataIndex);\r\n\r\n        if (this._allData[dataIndex]._from !== undefined) {\r\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\r\n        }\r\n        this._allData[dataIndex]._from = i;\r\n\r\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\r\n        // operator and ignore the node from the graph\r\n        if (nodeProto.opType() === 'Constant') {\r\n          if (nodeProto.attributesLength() !== 1 || !nodeProto.attributes(0)!.t()) {\r\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\r\n          }\r\n          if (nodeProto.outputsLength() !== 1) {\r\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\r\n          }\r\n          node.outputs.pop();\r\n          node.executeNode = false;\r\n\r\n          this._allData[dataIndex]._from = -1;\r\n          this._allData[dataIndex].tensor = Tensor.fromOrtTensor(nodeProto.attributes(0)!.t()!);\r\n        }\r\n      }\r\n    }\r\n\r\n    // scan node's inputs\r\n    for (let i = 0; i < this._nodes.length; i++) {\r\n      const node = this._nodes[i];\r\n      const nodeProto = graph.nodes(i)!;\r\n\r\n      if (nodeProto.inputsLength() === 0) {\r\n        throw new Error(`missing input for node: ${nodeProto.name}`);\r\n      }\r\n      for (let j = 0; j < nodeProto.inputsLength()!; j++) {\r\n        const input = nodeProto.inputs(j)!;\r\n        const dataIndex = dataIndices.get(input);\r\n        if (typeof dataIndex === 'undefined') {\r\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto!.name()}`);\r\n        }\r\n        node.inputs.push(dataIndex);\r\n\r\n        this._allData[dataIndex]._to.push(i);\r\n      }\r\n    }\r\n  }\r\n\r\n  private checkIsAcyclic() {\r\n    // go through the graph and check for cycles or other fatal inconsistencies\r\n    const starters: Set<number> = new Set<number>();\r\n    this._allInputIndices.forEach(i => {\r\n      const data = this._allData[i];\r\n      data._to.forEach(j => {\r\n        starters.add(j);\r\n      });\r\n    });\r\n\r\n    // Iterative DFS to check for cycles\r\n    const nodesStack = Array.from(starters);\r\n    const nodesState = new Array<string>(this._nodes.length).fill('white');\r\n\r\n    while (nodesStack.length > 0) {\r\n      const nodeIndex = nodesStack.pop()!;\r\n      // this node has now been processed completely. Mark this node 'black' to denote this.\r\n      if (nodesState[nodeIndex] === 'gray') {\r\n        nodesState[nodeIndex] = 'black';\r\n      } else {\r\n        // this node is under processing stage. mark this node 'gray' to denote this.\r\n        nodesStack.push(nodeIndex);\r\n        nodesState[nodeIndex] = 'gray';\r\n\r\n        this._nodes[nodeIndex].outputs.forEach((outgoingEdgeIndex) => {\r\n          const data = this._allData[outgoingEdgeIndex];\r\n          if (typeof data.tensor !== 'undefined') {\r\n            throw new Error('node outputs should not be initialized');\r\n          }\r\n          if (data._from !== nodeIndex) {\r\n            throw new Error('from property of the Value object doesn\\'t match index of Node being processed');\r\n          }\r\n          data._to.forEach((downstreamNodeIndex) => {\r\n            // back edge found - cyclic\r\n            if (nodesState[downstreamNodeIndex] === 'gray') {\r\n              throw new Error('model graph is cyclic');\r\n            }\r\n            // tree edge found - continue processing by adding it to stack\r\n            else if (nodesState[downstreamNodeIndex] === 'white') {\r\n              nodesStack.push(downstreamNodeIndex);\r\n            }\r\n          });\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  private transformGraph(graphInitializer?: Graph.Initializer): void {\r\n    // apply common transform\r\n    this.removeAllIdentityNodes();\r\n    this.removeAllDropoutNodes();\r\n    this.fuseConvActivationNodes();\r\n    // apply initializer specific transform\r\n    if (graphInitializer) {\r\n      graphInitializer.transformGraph(this);\r\n    }\r\n\r\n    // finalize graph\r\n    this.finalizeGraph();\r\n  }\r\n\r\n  /**\r\n   * finalize the graph.\r\n   *\r\n   * this function should be called after all the transformation completed.\r\n   * this function removes all unnecessary nodes and values from the graph\r\n   */\r\n  finalizeGraph() {\r\n    let offset = 0;\r\n    // delete all nodes that are not being executed\r\n    // The graph is represented using these two arrays\r\n    // this._nodes - Array holding the kernels to execute - each entry is a kernel pointing to this._allData\r\n    // this._allData - hold 2 fields - to [] & from - these feileds hold the graph map for inputs and outputs per node\r\n    // newIndices - remapping the graph after reading the flag 'executeNode'\r\n    const newIndices = new Array<number>(this._nodes.length, 0);\r\n    let nodePossition = 0;\r\n\r\n    for (let i = 0; i < this._nodes.length; i++) {\r\n      // giving new indexes to the nodes based on execution flag\r\n      newIndices[i] = nodePossition;\r\n      if (this._nodes[i].executeNode) {\r\n        if (nodePossition !== i) {\r\n          this._nodes[nodePossition] = this._nodes[i];\r\n        }\r\n        nodePossition++;\r\n\r\n      } else {\r\n        // delete all output values\r\n        this._nodes[i].outputs.forEach(ind => {\r\n          this._allData[ind]._from = -2;\r\n        });\r\n      }\r\n    }\r\n\r\n    // removing the unused nodes\r\n    this._nodes.splice(nodePossition, this._nodes.length - nodePossition);\r\n\r\n    // Updating this._allData according to the new this._nodes\r\n    for (let i = 0; i < this._allData.length; i++) {\r\n      const currentData = this._allData[i];\r\n      if (currentData._from !== undefined && currentData._from !== -1 && currentData._from !== -2) {\r\n        currentData._from = newIndices[currentData._from];\r\n      }\r\n\r\n      for (let j = 0; j < currentData._to.length; j++) {\r\n        if (currentData._to[j] >= 0) {\r\n          currentData._to[j] = newIndices[currentData._to[j]];\r\n        } else {\r\n          throw new Error('Trying to update a removed node');\r\n        }\r\n      }\r\n    }\r\n\r\n    offset = 0;\r\n    // delete all values that are not being referenced\r\n    for (let i = 0; i < this._allData.length; i++) {\r\n      // if current value is neither linked to next node, nor an output value, remove it.\r\n      if (this._allData[i].from === -2 && this._allOutputIndices.indexOf(i + offset) === -1) {\r\n        offset++;\r\n        this._allData.splice(i, 1);\r\n        i--;\r\n        continue;\r\n      }\r\n      if (offset > 0) {\r\n        let ind = -1;\r\n        // if current value is neither an input value nor an initializer, find the node it's\r\n        // coming from and update the corresponding node output\r\n        if (this._allData[i].from !== undefined && this._allData[i].from !== -1) {\r\n          ind = this._nodes[this._allData[i].from].outputs.indexOf(i + offset);\r\n          if (ind !== -1) {\r\n            this._nodes[this._allData[i].from].outputs[ind] = i;\r\n          }\r\n        } else {\r\n          // if current value is an input value, update its reference in inputIndices\r\n          ind = this._allInputIndices.indexOf(i + offset);\r\n          if (ind !== -1) {\r\n            this._allInputIndices[ind] = i;\r\n          }\r\n        }\r\n\r\n        // find the node that the current value is linking to and update its input reference\r\n        this._allData[i].to.forEach(node => {\r\n          ind = this._nodes[node].inputs.indexOf(i + offset);\r\n          if (ind !== -1) {\r\n            this._nodes[node].inputs[ind] = i;\r\n          }\r\n        });\r\n        if (this._allData[i].to.length === 0) {\r\n          // if current value is a graph output, update its reference in outputIndices\r\n          ind = this._allOutputIndices.indexOf(i + offset);\r\n          if (ind !== -1) {\r\n            this._allOutputIndices[ind] = i;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete the specifed node. Assume the node has one incoming input and the first output connected to other nodes.\r\n   * An input validation must be done before calling this function.\r\n   * @param nodeIndex The index of node to be deleted\r\n   */\r\n  private deleteNode(nodeIndex: number) {\r\n    const node = this._nodes[nodeIndex];\r\n    if (node.outputs.length > 1) {\r\n      for (let i = 1; i < node.outputs.length; i++) {\r\n        if (this._allData[node.outputs[i]].to.length > 0) {\r\n          throw new Error('Node deletion with more than one output connected to other nodes is not supported. ');\r\n        }\r\n      }\r\n    }\r\n\r\n    // this node wil not be executed\r\n    node.executeNode = false;\r\n    const inputValueIndex = node.inputs[0];\r\n    const outputValueIndex = node.outputs[0];\r\n    const nodesConsumingOutput = this._allData[outputValueIndex].to;\r\n\r\n    // remove this node from the to property of the input Value\r\n    for (let i = 0; i < node.inputs.length; i++) {\r\n      const delIndex = this._allData[node.inputs[i]].to.indexOf(nodeIndex);\r\n      // should not happen\r\n      if (delIndex === -1) {\r\n        throw new Error('The Value object doesn\\'t have the current Node in it\\'s \\'to\\' property ');\r\n      }\r\n      this._allData[node.inputs[i]].to.splice(delIndex, 1);\r\n    }\r\n\r\n    // clear node indices consuming this output Value\r\n    this._allData[outputValueIndex]._to = [];\r\n\r\n    // if the output of this node is a graph output, adjust the index appropriately\r\n    const index = this._allOutputIndices.indexOf(outputValueIndex);\r\n    if (index !== -1) {\r\n      this._allOutputIndices[index] = inputValueIndex;\r\n    }\r\n\r\n    // override the inputs for nodes consuming this node's output with the input to this node\r\n    if (nodesConsumingOutput && nodesConsumingOutput.length > 0) {\r\n      for (const nodeIndex of nodesConsumingOutput) {\r\n        const replaceIndex = this._nodes[nodeIndex].inputs.indexOf(outputValueIndex);\r\n        // should not happen\r\n        if (replaceIndex === -1) {\r\n          throw new Error('The Node object doesn\\'t have the output Value in it\\'s \\'inputs\\' property ');\r\n        }\r\n        this._nodes[nodeIndex].inputs[replaceIndex] = inputValueIndex;\r\n        this._allData[inputValueIndex].to.push(nodeIndex);\r\n      }\r\n    }\r\n  }\r\n\r\n  removeAllDropoutNodes() {\r\n    let nodeIndex = 0;\r\n    for (const node of this._nodes) {\r\n      // weed out 'Dropout' nodes so that no time is wasted in execution\r\n      if (node.opType === 'Dropout') {\r\n        // the node should have exactly 1 input and 1 or 2 outputs\r\n        if (node.inputs.length !== 1) {\r\n          throw new Error('Dropout nodes should only contain one input. ');\r\n        }\r\n        if (node.outputs.length !== 1 && node.outputs.length !== 2) {\r\n          throw new Error('Dropout nodes should contain either 1 or 2 output(s)');\r\n        }\r\n        // the second output should not be referenced by any other node\r\n        if (node.outputs.length === 2 && this._allData[node.outputs[1]]._to.length !== 0) {\r\n          throw new Error('Dropout nodes\\'s second output should not be referenced by other nodes');\r\n        }\r\n        this.deleteNode(nodeIndex);\r\n      }\r\n      nodeIndex++;\r\n    }\r\n  }\r\n\r\n  removeAllIdentityNodes() {\r\n    let nodeIndex = 0;\r\n    for (const node of this._nodes) {\r\n      // weed out 'Identity' nodes so that no time is wasted in execution\r\n      if (node.opType === 'Identity') {\r\n        this.deleteNode(nodeIndex);\r\n      }\r\n      nodeIndex++;\r\n    }\r\n  }\r\n\r\n  isActivation(n: Node): boolean {\r\n    switch (n.opType) {\r\n      // TODO: add other activation methods\r\n      case 'Relu':\r\n      case 'Sigmoid':\r\n      case 'Clip':\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  fuseConvActivationNodes() {\r\n    for (const node of this._nodes) {\r\n      if (node.opType === 'Conv') {\r\n        const next = this._allData[node.outputs[0]]._to;\r\n        if (next.length === 1 && this.isActivation(this._nodes[next[0]])) {\r\n          const child = this._nodes[next[0]];\r\n          if (child.opType === 'Clip') {\r\n            if (child.inputs.length === 1) {\r\n              try {\r\n                node.attributes.set(\r\n                    'activation_params', 'floats',\r\n                    [child.attributes.getFloat('min'), child.attributes.getFloat('max')]);\r\n              } catch (e) {\r\n                node.attributes.set('activation_params', 'floats', [MIN_CLIP, MAX_CLIP]);\r\n              }\r\n            } else if (\r\n                child.inputs.length >= 3 && this._allData[child.inputs[1]].tensor !== undefined &&\r\n                this._allData[child.inputs[2]].tensor !== undefined) {\r\n              node.attributes.set('activation_params', 'floats', [\r\n                this._allData[child.inputs[1]].tensor!.floatData[0], this._allData[child.inputs[2]].tensor!.floatData[0]\r\n              ]);\r\n            } else {\r\n              // Skip fusion with clip node since clip min and clip max are not coming from initializer\r\n              continue;\r\n            }\r\n          }\r\n          node.attributes.set('activation', 'string', (child.opType));\r\n          this.deleteNode(next[0]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Env} from 'onnxruntime-common';\r\n\r\nimport {WebGLContext} from './backends/webgl/webgl-context';\r\n\r\nexport declare namespace Logger {\r\n  export interface SeverityTypeMap {\r\n    verbose: 'v';\r\n    info: 'i';\r\n    warning: 'w';\r\n    error: 'e';\r\n    fatal: 'f';\r\n  }\r\n\r\n  export type Severity = keyof SeverityTypeMap;\r\n\r\n  export type Provider = 'none'|'console';\r\n\r\n  /**\r\n   * Logging config that used to control the behavior of logger\r\n   */\r\n  export interface Config {\r\n    /**\r\n     * Specify the logging provider. 'console' by default\r\n     */\r\n    provider?: Provider;\r\n    /**\r\n     * Specify the minimal logger serverity. 'warning' by default\r\n     */\r\n    minimalSeverity?: Logger.Severity;\r\n    /**\r\n     * Whether to output date time in log. true by default\r\n     */\r\n    logDateTime?: boolean;\r\n    /**\r\n     * Whether to output source information (Not yet supported). false by default\r\n     */\r\n    logSourceLocation?: boolean;\r\n  }\r\n\r\n  export interface CategorizedLogger {\r\n    verbose(content: string): void;\r\n    info(content: string): void;\r\n    warning(content: string): void;\r\n    error(content: string): void;\r\n    fatal(content: string): void;\r\n  }\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-redeclare\r\nexport interface Logger {\r\n  (category: string): Logger.CategorizedLogger;\r\n\r\n  verbose(content: string): void;\r\n  verbose(category: string, content: string): void;\r\n  info(content: string): void;\r\n  info(category: string, content: string): void;\r\n  warning(content: string): void;\r\n  warning(category: string, content: string): void;\r\n  error(content: string): void;\r\n  error(category: string, content: string): void;\r\n  fatal(content: string): void;\r\n  fatal(category: string, content: string): void;\r\n\r\n  /**\r\n   * Reset the logger configuration.\r\n   * @param config specify an optional default config\r\n   */\r\n  reset(config?: Logger.Config): void;\r\n  /**\r\n   * Set the logger's behavior on the given category\r\n   * @param category specify a category string. If '*' is specified, all previous configuration will be overwritten. If\r\n   * '' is specified, the default behavior will be updated.\r\n   * @param config the config object to indicate the logger's behavior\r\n   */\r\n  set(category: string, config: Logger.Config): void;\r\n\r\n  /**\r\n   * Set the logger's behavior from ort-common env\r\n   * @param env the env used to set logger. Currently only setting loglevel is supported through Env.\r\n   */\r\n  setWithEnv(env: Env): void;\r\n}\r\n\r\ninterface LoggerProvider {\r\n  log(severity: Logger.Severity, content: string, category?: string): void;\r\n}\r\nclass NoOpLoggerProvider implements LoggerProvider {\r\n  log(_severity: Logger.Severity, _content: string, _category?: string) {\r\n    // do nothing\r\n  }\r\n}\r\nclass ConsoleLoggerProvider implements LoggerProvider {\r\n  log(severity: Logger.Severity, content: string, category?: string) {\r\n    // eslint-disable-next-line no-console\r\n    console.log(`${this.color(severity)} ${category ? '\\x1b[35m' + category + '\\x1b[0m ' : ''}${content}`);\r\n  }\r\n\r\n  private color(severity: Logger.Severity) {\r\n    switch (severity) {\r\n      case 'verbose':\r\n        return '\\x1b[34;40mv\\x1b[0m';\r\n      case 'info':\r\n        return '\\x1b[32mi\\x1b[0m';\r\n      case 'warning':\r\n        return '\\x1b[30;43mw\\x1b[0m';\r\n      case 'error':\r\n        return '\\x1b[31;40me\\x1b[0m';\r\n      case 'fatal':\r\n        return '\\x1b[101mf\\x1b[0m';\r\n      default:\r\n        throw new Error(`unsupported severity: ${severity}`);\r\n    }\r\n  }\r\n}\r\n\r\nconst SEVERITY_VALUE = {\r\n  verbose: 1000,\r\n  info: 2000,\r\n  warning: 4000,\r\n  error: 5000,\r\n  fatal: 6000\r\n};\r\n\r\nconst LOGGER_PROVIDER_MAP: {readonly [provider: string]: Readonly<LoggerProvider>} = {\r\n  ['none']: new NoOpLoggerProvider(),\r\n  ['console']: new ConsoleLoggerProvider()\r\n};\r\nconst LOGGER_DEFAULT_CONFIG = {\r\n  provider: 'console',\r\n  minimalSeverity: 'warning',\r\n  logDateTime: true,\r\n  logSourceLocation: false\r\n};\r\nlet LOGGER_CONFIG_MAP:\r\n    {[category: string]: Readonly<Required<Logger.Config>>} = {['']: LOGGER_DEFAULT_CONFIG as Required<Logger.Config>};\r\n\r\nfunction log(category: string): Logger.CategorizedLogger;\r\nfunction log(severity: Logger.Severity, content: string): void;\r\nfunction log(severity: Logger.Severity, category: string, content: string): void;\r\nfunction log(severity: Logger.Severity, arg1: string, arg2?: string): void;\r\nfunction log(\r\n    arg0: string|Logger.Severity, arg1?: string, arg2?: string|number, arg3?: number): Logger.CategorizedLogger|void {\r\n  if (arg1 === undefined) {\r\n    // log(category: string): Logger.CategorizedLogger;\r\n    return createCategorizedLogger(arg0);\r\n  } else if (arg2 === undefined) {\r\n    // log(severity, content);\r\n    logInternal(arg0 as Logger.Severity, arg1, 1);\r\n  } else if (typeof arg2 === 'number' && arg3 === undefined) {\r\n    // log(severity, content, stack)\r\n    logInternal(arg0 as Logger.Severity, arg1, arg2);\r\n  } else if (typeof arg2 === 'string' && arg3 === undefined) {\r\n    // log(severity, category, content)\r\n    logInternal(arg0 as Logger.Severity, arg2, 1, arg1);\r\n  } else if (typeof arg2 === 'string' && typeof arg3 === 'number') {\r\n    // log(severity, category, content, stack)\r\n    logInternal(arg0 as Logger.Severity, arg2, arg3, arg1);\r\n  } else {\r\n    throw new TypeError('input is valid');\r\n  }\r\n}\r\n\r\nfunction createCategorizedLogger(category: string): Logger.CategorizedLogger {\r\n  return {\r\n    verbose: log.verbose.bind(null, category),\r\n    info: log.info.bind(null, category),\r\n    warning: log.warning.bind(null, category),\r\n    error: log.error.bind(null, category),\r\n    fatal: log.fatal.bind(null, category)\r\n  };\r\n}\r\n\r\n// NOTE: argument 'category' is put the last parameter beacause typescript\r\n// doesn't allow optional argument put in front of required argument. This\r\n// order is different from a usual logging API.\r\nfunction logInternal(severity: Logger.Severity, content: string, stack: number, category?: string) {\r\n  const config = LOGGER_CONFIG_MAP[category || ''] || LOGGER_CONFIG_MAP[''];\r\n  if (SEVERITY_VALUE[severity] < SEVERITY_VALUE[config.minimalSeverity]) {\r\n    return;\r\n  }\r\n\r\n  if (config.logDateTime) {\r\n    content = `${new Date().toISOString()}|${content}`;\r\n  }\r\n\r\n  if (config.logSourceLocation) {\r\n    // TODO: calculate source location from 'stack'\r\n  }\r\n\r\n  LOGGER_PROVIDER_MAP[config.provider].log(severity, content, category);\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nnamespace log {\r\n  export function verbose(content: string): void;\r\n  export function verbose(category: string, content: string): void;\r\n  export function verbose(arg0: string, arg1?: string) {\r\n    log('verbose', arg0, arg1);\r\n  }\r\n  export function info(content: string): void;\r\n  export function info(category: string, content: string): void;\r\n  export function info(arg0: string, arg1?: string) {\r\n    log('info', arg0, arg1);\r\n  }\r\n  export function warning(content: string): void;\r\n  export function warning(category: string, content: string): void;\r\n  export function warning(arg0: string, arg1?: string) {\r\n    log('warning', arg0, arg1);\r\n  }\r\n  export function error(content: string): void;\r\n  export function error(category: string, content: string): void;\r\n  export function error(arg0: string, arg1?: string) {\r\n    log('error', arg0, arg1);\r\n  }\r\n  export function fatal(content: string): void;\r\n  export function fatal(category: string, content: string): void;\r\n  export function fatal(arg0: string, arg1?: string) {\r\n    log('fatal', arg0, arg1);\r\n  }\r\n\r\n  export function reset(config?: Logger.Config): void {\r\n    LOGGER_CONFIG_MAP = {};\r\n    set('', config || {});\r\n  }\r\n  export function set(category: string, config: Logger.Config): void {\r\n    if (category === '*') {\r\n      reset(config);\r\n    } else {\r\n      const previousConfig = LOGGER_CONFIG_MAP[category] || LOGGER_DEFAULT_CONFIG;\r\n      LOGGER_CONFIG_MAP[category] = {\r\n        provider: config.provider || previousConfig.provider,\r\n        minimalSeverity: config.minimalSeverity || previousConfig.minimalSeverity,\r\n        logDateTime: (config.logDateTime === undefined) ? previousConfig.logDateTime : config.logDateTime,\r\n        logSourceLocation: (config.logSourceLocation === undefined) ? previousConfig.logSourceLocation :\r\n                                                                      config.logSourceLocation\r\n      };\r\n    }\r\n\r\n    // TODO: we want to support wildcard or regex?\r\n  }\r\n\r\n  export function setWithEnv(env: Env): void {\r\n    const config: Logger.Config = {};\r\n    if (env.logLevel) {\r\n      config.minimalSeverity = env.logLevel as Logger.Severity;\r\n    }\r\n    set('', config);\r\n  }\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-redeclare, @typescript-eslint/naming-convention\r\nexport const Logger: Logger = log;\r\n\r\nexport declare namespace Profiler {\r\n  export interface Config {\r\n    maxNumberEvents?: number;\r\n    flushBatchSize?: number;\r\n    flushIntervalInMilliseconds?: number;\r\n  }\r\n\r\n  export type EventCategory = 'session'|'node'|'op'|'backend';\r\n\r\n  export interface Event {\r\n    end(): void|Promise<void>;\r\n  }\r\n}\r\n// TODO\r\n// class WebGLEvent implements Profiler.Event {}\r\n\r\nclass Event implements Profiler.Event {\r\n  constructor(\r\n      public category: Profiler.EventCategory, public name: string, public startTime: number,\r\n      private endCallback: (e: Event) => void|Promise<void>, public timer?: WebGLQuery, public ctx?: WebGLContext) {}\r\n\r\n  async end() {\r\n    return this.endCallback(this);\r\n  }\r\n\r\n  async checkTimer(): Promise<number> {\r\n    if (this.ctx === undefined || this.timer === undefined) {\r\n      throw new Error('No webgl timer found');\r\n    } else {\r\n      this.ctx.endTimer();\r\n      return this.ctx.waitForQueryAndGetTime(this.timer);\r\n    }\r\n  }\r\n}\r\n\r\nclass EventRecord {\r\n  constructor(\r\n      public category: Profiler.EventCategory, public name: string, public startTime: number, public endTime: number) {}\r\n}\r\n\r\nexport class Profiler {\r\n  static create(config?: Profiler.Config): Profiler {\r\n    if (config === undefined) {\r\n      return new this();\r\n    }\r\n    return new this(config.maxNumberEvents, config.flushBatchSize, config.flushIntervalInMilliseconds);\r\n  }\r\n\r\n  private constructor(maxNumberEvents?: number, flushBatchSize?: number, flushIntervalInMilliseconds?: number) {\r\n    this._started = false;\r\n    this._maxNumberEvents = maxNumberEvents === undefined ? 10000 : maxNumberEvents;\r\n    this._flushBatchSize = flushBatchSize === undefined ? 10 : flushBatchSize;\r\n    this._flushIntervalInMilliseconds = flushIntervalInMilliseconds === undefined ? 5000 : flushIntervalInMilliseconds;\r\n  }\r\n\r\n  // start profiling\r\n  start() {\r\n    this._started = true;\r\n    this._timingEvents = [];\r\n    this._flushTime = now();\r\n    this._flushPointer = 0;\r\n  }\r\n\r\n  // stop profiling\r\n  stop() {\r\n    this._started = false;\r\n    for (; this._flushPointer < this._timingEvents.length; this._flushPointer++) {\r\n      this.logOneEvent(this._timingEvents[this._flushPointer]);\r\n    }\r\n  }\r\n\r\n  // create an event scope for the specific function\r\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T, ctx?: WebGLContext): T;\r\n  event<T>(category: Profiler.EventCategory, name: string, func: () => Promise<T>, ctx?: WebGLContext): Promise<T>;\r\n\r\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T | Promise<T>, ctx?: WebGLContext): T\r\n      |Promise<T> {\r\n    const event = this._started ? this.begin(category, name, ctx) : undefined;\r\n    let isPromise = false;\r\n\r\n    const res = func();\r\n\r\n    // we consider a then-able object is a promise\r\n    if (res && typeof (res as Promise<T>).then === 'function') {\r\n      isPromise = true;\r\n      return new Promise<T>((resolve, reject) => {\r\n        (res as Promise<T>)\r\n            .then(\r\n                async value => {  // fulfilled\r\n                  if (event) {\r\n                    await event.end();\r\n                  }\r\n                  resolve(value);\r\n                },\r\n                async reason => {  // rejected\r\n                  if (event) {\r\n                    await event.end();\r\n                  }\r\n                  reject(reason);\r\n                });\r\n      });\r\n    }\r\n    if (!isPromise && event) {\r\n      const eventRes = event.end();\r\n      if (eventRes && typeof eventRes.then === 'function') {\r\n        return new Promise<T>((resolve, reject) => {\r\n          (eventRes).then(\r\n              () => {  // fulfilled\r\n                resolve(res);\r\n              },\r\n              (reason) => {  // rejected\r\n                reject(reason);\r\n              });\r\n        });\r\n      }\r\n    }\r\n    return res;\r\n  }\r\n\r\n  // begin an event\r\n  begin(category: Profiler.EventCategory, name: string, ctx?: WebGLContext): Event {\r\n    if (!this._started) {\r\n      throw new Error('profiler is not started yet');\r\n    }\r\n    if (ctx === undefined) {\r\n      const startTime = now();\r\n      this.flush(startTime);\r\n      return new Event(category, name, startTime, e => this.endSync(e));\r\n    } else {\r\n      const timer: WebGLQuery = ctx.beginTimer();\r\n      return new Event(category, name, 0, async e => this.end(e), timer, ctx);\r\n    }\r\n  }\r\n\r\n  // end the specific event\r\n  private async end(event: Event): Promise<void> {\r\n    const endTime: number = await event.checkTimer();\r\n    if (this._timingEvents.length < this._maxNumberEvents) {\r\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\r\n      this.flush(endTime);\r\n    }\r\n  }\r\n\r\n  private endSync(event: Event): void {\r\n    const endTime: number = now();\r\n    if (this._timingEvents.length < this._maxNumberEvents) {\r\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\r\n      this.flush(endTime);\r\n    }\r\n  }\r\n\r\n  private logOneEvent(event: EventRecord) {\r\n    Logger.verbose(\r\n        `Profiler.${event.category}`,\r\n        `${(event.endTime - event.startTime).toFixed(2)}ms on event '${event.name}' at ${event.endTime.toFixed(2)}`);\r\n  }\r\n\r\n  private flush(currentTime: number) {\r\n    if (this._timingEvents.length - this._flushPointer >= this._flushBatchSize ||\r\n        currentTime - this._flushTime >= this._flushIntervalInMilliseconds) {\r\n      // should flush when either batch size accumlated or interval elepsed\r\n\r\n      for (const previousPointer = this._flushPointer; this._flushPointer < previousPointer + this._flushBatchSize &&\r\n           this._flushPointer < this._timingEvents.length;\r\n           this._flushPointer++) {\r\n        this.logOneEvent(this._timingEvents[this._flushPointer]);\r\n      }\r\n\r\n      this._flushTime = now();\r\n    }\r\n  }\r\n\r\n  get started() {\r\n    return this._started;\r\n  }\r\n  private _started = false;\r\n  private _timingEvents: EventRecord[];\r\n\r\n  private readonly _maxNumberEvents: number;\r\n\r\n  private readonly _flushBatchSize: number;\r\n  private readonly _flushIntervalInMilliseconds: number;\r\n\r\n  private _flushTime: number;\r\n  private _flushPointer = 0;\r\n}\r\n\r\n/**\r\n * returns a number to represent the current timestamp in a resolution as high as possible.\r\n */\r\nexport const now = (typeof performance !== 'undefined' && performance.now) ? () => performance.now() : Date.now;\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {flatbuffers} from 'flatbuffers';\r\n\r\nimport {Graph} from './graph';\r\nimport {OpSet} from './opset';\r\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\r\nimport {onnx} from './ort-schema/protobuf/onnx';\r\nimport {LongUtil} from './util';\r\n\r\nimport ortFbs = onnxruntime.experimental.fbs;\r\n\r\nexport class Model {\r\n  // empty model\r\n  constructor() {}\r\n\r\n  load(buf: Uint8Array, graphInitializer?: Graph.Initializer, isOrtFormat?: boolean): void {\r\n    if (!isOrtFormat) {\r\n      // isOrtFormat === false || isOrtFormat === undefined\r\n      try {\r\n        this.loadFromOnnxFormat(buf, graphInitializer);\r\n        return;\r\n      } catch (e) {\r\n        if (isOrtFormat !== undefined) {\r\n          throw e;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.loadFromOrtFormat(buf, graphInitializer);\r\n  }\r\n\r\n  private loadFromOnnxFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\r\n    const modelProto = onnx.ModelProto.decode(buf);\r\n    const irVersion = LongUtil.longToNumber(modelProto.irVersion);\r\n    if (irVersion < 3) {\r\n      throw new Error('only support ONNX model with IR_VERSION>=3');\r\n    }\r\n\r\n    this._opsets =\r\n        modelProto.opsetImport.map(i => ({domain: i.domain as string, version: LongUtil.longToNumber(i.version!)}));\r\n\r\n    this._graph = Graph.from(modelProto.graph!, graphInitializer);\r\n  }\r\n\r\n  private loadFromOrtFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\r\n    const fb = new flatbuffers.ByteBuffer(buf);\r\n    const ortModel = ortFbs.InferenceSession.getRootAsInferenceSession(fb).model()!;\r\n    const irVersion = LongUtil.longToNumber(ortModel.irVersion());\r\n    if (irVersion < 3) {\r\n      throw new Error('only support ONNX model with IR_VERSION>=3');\r\n    }\r\n    this._opsets = [];\r\n    for (let i = 0; i < ortModel.opsetImportLength(); i++) {\r\n      const opsetId = ortModel.opsetImport(i)!;\r\n      this._opsets.push({domain: opsetId?.domain() as string, version: LongUtil.longToNumber(opsetId.version()!)});\r\n    }\r\n\r\n    this._graph = Graph.from(ortModel.graph()!, graphInitializer);\r\n  }\r\n\r\n  private _graph: Graph;\r\n  get graph(): Graph {\r\n    return this._graph;\r\n  }\r\n\r\n  private _opsets: OpSet[];\r\n  get opsets(): readonly OpSet[] {\r\n    return this._opsets;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {InferenceHandler} from './backend';\r\nimport {Graph} from './graph';\r\nimport {Tensor} from './tensor';\r\n\r\nexport type OperatorImplementation<T> = (inferenceHandler: InferenceHandler, inputs: Tensor[], context: T) => Tensor[];\r\nexport type OperatorInitialization<T> = (node: Graph.Node, graph: Graph) => T;\r\n\r\nexport interface Operator {\r\n  readonly impl: OperatorImplementation<unknown>;\r\n  readonly context: Graph.Node|unknown;\r\n}\r\n\r\nexport const NUMBER_TYPES: readonly Tensor.DataType[] =\r\n    ['float32', 'float64', 'int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\r\nexport const INT_TYPES: readonly Tensor.DataType[] = ['int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\r\nexport const FLOAT_TYPES: readonly Tensor.DataType[] = ['float32', 'float64'];\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from './graph';\r\nimport {OperatorImplementation, OperatorInitialization} from './operators';\r\n\r\nexport interface OpSet {\r\n  domain: string;\r\n  version: number;\r\n}\r\nexport declare namespace OpSet {\r\n  /**\r\n   * Domain of an opset, it can be an empty string(default value, represent for ai.onnx), or 'ai.onnx.ml'\r\n   */\r\n  type Domain = ''|'ai.onnx.ml'|'com.microsoft';\r\n  /**\r\n   * A resolve rule consists of 4 or 5 items: opType, opSetDomain, versionSelector, operatorImplementation and\r\n   * operatorInitialization (optional)\r\n   */\r\n  type ResolveRule = [\r\n    string, Domain, string, OperatorImplementation<Graph.Node>\r\n  ]|[string, Domain, string, OperatorImplementation<unknown>, OperatorInitialization<unknown>];\r\n}\r\n\r\nexport function resolveOperator(node: Graph.Node, opsets: readonly OpSet[], rules: readonly OpSet.ResolveRule[]) {\r\n  for (const rule of rules) {\r\n    const opType = rule[0];\r\n    const domain = rule[1];\r\n    const versionSelector = rule[2];\r\n    const opImpl = rule[3];\r\n    const opInit = rule[4];\r\n\r\n    if (node.opType === opType) {  // operator type matches\r\n      for (const opset of opsets) {\r\n        // opset '' and 'ai.onnx' are considered the same.\r\n        if (opset.domain === domain || (opset.domain === 'ai.onnx' && domain === '')) {  // opset domain found\r\n          if (matchSelector(opset.version, versionSelector)) {\r\n            return {opImpl, opInit};\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  throw new TypeError(`cannot resolve operator '${node.opType}' with opsets: ${\r\n      opsets.map(set => `${set.domain || 'ai.onnx'} v${set.version}`).join(', ')}`);\r\n}\r\n\r\nfunction matchSelector(version: number, selector: string): boolean {\r\n  if (selector.endsWith('+')) {\r\n    // minimum version match ('7+' expects version>=7)\r\n    const rangeStart = Number.parseInt(selector.substring(0, selector.length - 1), 10);\r\n    return !isNaN(rangeStart) && rangeStart <= version;\r\n  } else if (selector.split('-').length === 2) {\r\n    // range match ('6-8' expects 6<=version<=8)\r\n    const pair = selector.split('-');\r\n    const rangeStart = Number.parseInt(pair[0], 10);\r\n    const rangeEnd = Number.parseInt(pair[1], 10);\r\n    return !isNaN(rangeStart) && !isNaN(rangeEnd) && rangeStart <= version && version <= rangeEnd;\r\n  } else {\r\n    // exact match ('7' expects version===7)\r\n    return Number.parseInt(selector, 10) === version;\r\n  }\r\n}\r\n","// automatically generated by the FlatBuffers compiler, do not modify\r\n/* eslint-disable */\r\n\r\nimport {flatbuffers} from 'flatbuffers';\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export enum AttributeType {\r\n    UNDEFINED = 0,\r\n    FLOAT = 1,\r\n    INT = 2,\r\n    STRING = 3,\r\n    TENSOR = 4,\r\n    GRAPH = 5,\r\n    FLOATS = 6,\r\n    INTS = 7,\r\n    STRINGS = 8,\r\n    TENSORS = 9,\r\n    GRAPHS = 10,\r\n    SPARSE_TENSOR = 11,\r\n    SPARSE_TENSORS = 12\r\n  }\r\n}\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export enum DimensionValueType {UNKNOWN = 0, VALUE = 1, PARAM = 2}\r\n}\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export enum TensorDataType {\r\n    UNDEFINED = 0,\r\n    FLOAT = 1,\r\n    UINT8 = 2,\r\n    INT8 = 3,\r\n    UINT16 = 4,\r\n    INT16 = 5,\r\n    INT32 = 6,\r\n    INT64 = 7,\r\n    STRING = 8,\r\n    BOOL = 9,\r\n    FLOAT16 = 10,\r\n    DOUBLE = 11,\r\n    UINT32 = 12,\r\n    UINT64 = 13,\r\n    COMPLEX64 = 14,\r\n    COMPLEX128 = 15,\r\n    BFLOAT16 = 16,\r\n    FLOAT8E4M3FN = 17,\r\n    FLOAT8E4M3FNUZ = 18,\r\n    FLOAT8E5M2 = 19,\r\n    FLOAT8E5M2FNUZ = 20,\r\n  }\r\n}\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export enum NodeType {Primitive = 0, Fused = 1}\r\n}\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export enum TypeInfoValue {NONE = 0, tensor_type = 1, sequence_type = 2, map_type = 3}\r\n}\r\n\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Shape {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Shape\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Shape {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Shape= obj\r\n     * @returns Shape\r\n     */\r\n    static getRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\r\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Shape= obj\r\n     * @returns Shape\r\n     */\r\n    static getSizePrefixedRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.Dimension= obj\r\n     * @returns onnxruntime.experimental.fbs.Dimension\r\n     */\r\n    dim(index: number, obj?: onnxruntime.experimental.fbs.Dimension): onnxruntime.experimental.fbs.Dimension|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Dimension())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    dimLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startShape(builder: flatbuffers.Builder) {\r\n      builder.startObject(1);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset dimOffset\r\n     */\r\n    static addDim(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, dimOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createDimVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startDimVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endShape(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createShape(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Shape.startShape(builder);\r\n      Shape.addDim(builder, dimOffset);\r\n      return Shape.endShape(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Dimension {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Dimension\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Dimension {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Dimension= obj\r\n     * @returns Dimension\r\n     */\r\n    static getRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\r\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Dimension= obj\r\n     * @returns Dimension\r\n     */\r\n    static getSizePrefixedRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.DimensionValue= obj\r\n     * @returns onnxruntime.experimental.fbs.DimensionValue|null\r\n     */\r\n    value(obj?: onnxruntime.experimental.fbs.DimensionValue): onnxruntime.experimental.fbs.DimensionValue|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.DimensionValue())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    denotation(): string|null;\r\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startDimension(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset valueOffset\r\n     */\r\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, valueOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset denotationOffset\r\n     */\r\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, denotationOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endDimension(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createDimension(\r\n        builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset,\r\n        denotationOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Dimension.startDimension(builder);\r\n      Dimension.addValue(builder, valueOffset);\r\n      Dimension.addDenotation(builder, denotationOffset);\r\n      return Dimension.endDimension(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class DimensionValue {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns DimensionValue\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): DimensionValue {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param DimensionValue= obj\r\n     * @returns DimensionValue\r\n     */\r\n    static getRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\r\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param DimensionValue= obj\r\n     * @returns DimensionValue\r\n     */\r\n    static getSizePrefixedRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.DimensionValueType\r\n     */\r\n    dimType(): onnxruntime.experimental.fbs.DimensionValueType {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN;\r\n    }\r\n\r\n    /**\r\n     * @returns flatbuffers.Long\r\n     */\r\n    dimValue(): flatbuffers.Long {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    dimParam(): string|null;\r\n    dimParam(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    dimParam(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startDimensionValue(builder: flatbuffers.Builder) {\r\n      builder.startObject(3);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.DimensionValueType dimType\r\n     */\r\n    static addDimType(builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType) {\r\n      builder.addFieldInt8(0, dimType, onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Long dimValue\r\n     */\r\n    static addDimValue(builder: flatbuffers.Builder, dimValue: flatbuffers.Long) {\r\n      builder.addFieldInt64(1, dimValue, builder.createLong(0, 0));\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset dimParamOffset\r\n     */\r\n    static addDimParam(builder: flatbuffers.Builder, dimParamOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, dimParamOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endDimensionValue(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createDimensionValue(\r\n        builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType,\r\n        dimValue: flatbuffers.Long, dimParamOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      DimensionValue.startDimensionValue(builder);\r\n      DimensionValue.addDimType(builder, dimType);\r\n      DimensionValue.addDimValue(builder, dimValue);\r\n      DimensionValue.addDimParam(builder, dimParamOffset);\r\n      return DimensionValue.endDimensionValue(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class TensorTypeAndShape {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns TensorTypeAndShape\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): TensorTypeAndShape {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param TensorTypeAndShape= obj\r\n     * @returns TensorTypeAndShape\r\n     */\r\n    static getRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape): TensorTypeAndShape {\r\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param TensorTypeAndShape= obj\r\n     * @returns TensorTypeAndShape\r\n     */\r\n    static getSizePrefixedRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape):\r\n        TensorTypeAndShape {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.TensorDataType\r\n     */\r\n    elemType(): onnxruntime.experimental.fbs.TensorDataType {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Shape= obj\r\n     * @returns onnxruntime.experimental.fbs.Shape|null\r\n     */\r\n    shape(obj?: onnxruntime.experimental.fbs.Shape): onnxruntime.experimental.fbs.Shape|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Shape())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startTensorTypeAndShape(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.TensorDataType elemType\r\n     */\r\n    static addElemType(builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType) {\r\n      builder.addFieldInt32(0, elemType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset shapeOffset\r\n     */\r\n    static addShape(builder: flatbuffers.Builder, shapeOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, shapeOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endTensorTypeAndShape(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createTensorTypeAndShape(\r\n        builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType,\r\n        shapeOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      TensorTypeAndShape.startTensorTypeAndShape(builder);\r\n      TensorTypeAndShape.addElemType(builder, elemType);\r\n      TensorTypeAndShape.addShape(builder, shapeOffset);\r\n      return TensorTypeAndShape.endTensorTypeAndShape(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class MapType {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns MapType\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): MapType {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param MapType= obj\r\n     * @returns MapType\r\n     */\r\n    static getRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\r\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param MapType= obj\r\n     * @returns MapType\r\n     */\r\n    static getSizePrefixedRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.TensorDataType\r\n     */\r\n    keyType(): onnxruntime.experimental.fbs.TensorDataType {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\r\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\r\n     */\r\n    valueType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startMapType(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.TensorDataType keyType\r\n     */\r\n    static addKeyType(builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType) {\r\n      builder.addFieldInt32(0, keyType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset valueTypeOffset\r\n     */\r\n    static addValueType(builder: flatbuffers.Builder, valueTypeOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, valueTypeOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endMapType(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createMapType(\r\n        builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType,\r\n        valueTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      MapType.startMapType(builder);\r\n      MapType.addKeyType(builder, keyType);\r\n      MapType.addValueType(builder, valueTypeOffset);\r\n      return MapType.endMapType(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class SequenceType {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns SequenceType\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): SequenceType {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SequenceType= obj\r\n     * @returns SequenceType\r\n     */\r\n    static getRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\r\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SequenceType= obj\r\n     * @returns SequenceType\r\n     */\r\n    static getSizePrefixedRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\r\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\r\n     */\r\n    elemType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startSequenceType(builder: flatbuffers.Builder) {\r\n      builder.startObject(1);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset elemTypeOffset\r\n     */\r\n    static addElemType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, elemTypeOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endSequenceType(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createSequenceType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      SequenceType.startSequenceType(builder);\r\n      SequenceType.addElemType(builder, elemTypeOffset);\r\n      return SequenceType.endSequenceType(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class EdgeEnd {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns EdgeEnd\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): EdgeEnd {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    nodeIndex(): number {\r\n      return this.bb!.readUint32(this.bb_pos);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    srcArgIndex(): number {\r\n      return this.bb!.readInt32(this.bb_pos + 4);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    dstArgIndex(): number {\r\n      return this.bb!.readInt32(this.bb_pos + 8);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number node_index\r\n     * @param number src_arg_index\r\n     * @param number dst_arg_index\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createEdgeEnd(\r\n        builder: flatbuffers.Builder, node_index: number, src_arg_index: number,\r\n        dst_arg_index: number): flatbuffers.Offset {\r\n      builder.prep(4, 12);\r\n      builder.writeInt32(dst_arg_index);\r\n      builder.writeInt32(src_arg_index);\r\n      builder.writeInt32(node_index);\r\n      return builder.offset();\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class NodeEdge {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns NodeEdge\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): NodeEdge {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param NodeEdge= obj\r\n     * @returns NodeEdge\r\n     */\r\n    static getRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\r\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param NodeEdge= obj\r\n     * @returns NodeEdge\r\n     */\r\n    static getSizePrefixedRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    nodeIndex(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\r\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\r\n     */\r\n    inputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\r\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    inputEdgesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\r\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\r\n     */\r\n    outputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\r\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    outputEdgesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startNodeEdge(builder: flatbuffers.Builder) {\r\n      builder.startObject(3);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number nodeIndex\r\n     */\r\n    static addNodeIndex(builder: flatbuffers.Builder, nodeIndex: number) {\r\n      builder.addFieldInt32(0, nodeIndex, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset inputEdgesOffset\r\n     */\r\n    static addInputEdges(builder: flatbuffers.Builder, inputEdgesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, inputEdgesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startInputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(12, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset outputEdgesOffset\r\n     */\r\n    static addOutputEdges(builder: flatbuffers.Builder, outputEdgesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, outputEdgesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startOutputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(12, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endNodeEdge(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createNodeEdge(\r\n        builder: flatbuffers.Builder, nodeIndex: number, inputEdgesOffset: flatbuffers.Offset,\r\n        outputEdgesOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      NodeEdge.startNodeEdge(builder);\r\n      NodeEdge.addNodeIndex(builder, nodeIndex);\r\n      NodeEdge.addInputEdges(builder, inputEdgesOffset);\r\n      NodeEdge.addOutputEdges(builder, outputEdgesOffset);\r\n      return NodeEdge.endNodeEdge(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Node {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Node\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Node {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Node= obj\r\n     * @returns Node\r\n     */\r\n    static getRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\r\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Node= obj\r\n     * @returns Node\r\n     */\r\n    static getSizePrefixedRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    name(): string|null;\r\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    name(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    docString(): string|null;\r\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    docString(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    domain(): string|null;\r\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    domain(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    sinceVersion(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 10);\r\n      return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    index(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    opType(): string|null;\r\n    opType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    opType(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.NodeType\r\n     */\r\n    type(): onnxruntime.experimental.fbs.NodeType {\r\n      let offset = this.bb!.__offset(this.bb_pos, 16);\r\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.NodeType.Primitive;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    executionProviderType(): string|null;\r\n    executionProviderType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    executionProviderType(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 18);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    inputs(index: number): string;\r\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 20);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    inputsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 20);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    outputs(index: number): string;\r\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 22);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    outputsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 22);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.Attribute= obj\r\n     * @returns onnxruntime.experimental.fbs.Attribute\r\n     */\r\n    attributes(index: number, obj?: onnxruntime.experimental.fbs.Attribute): onnxruntime.experimental.fbs.Attribute\r\n        |null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 24);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Attribute())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    attributesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 24);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns number\r\n     */\r\n    inputArgCounts(index: number): number|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 26);\r\n      return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    inputArgCountsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 26);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns Int32Array\r\n     */\r\n    inputArgCountsArray(): Int32Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 26);\r\n      return offset ?\r\n          new Int32Array(\r\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\r\n              this.bb!.__vector_len(this.bb_pos + offset)) :\r\n          null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    implicitInputs(index: number): string;\r\n    implicitInputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    implicitInputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 28);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    implicitInputsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 28);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startNode(builder: flatbuffers.Builder) {\r\n      builder.startObject(13);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nameOffset\r\n     */\r\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, nameOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset docStringOffset\r\n     */\r\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, docStringOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset domainOffset\r\n     */\r\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, domainOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number sinceVersion\r\n     */\r\n    static addSinceVersion(builder: flatbuffers.Builder, sinceVersion: number) {\r\n      builder.addFieldInt32(3, sinceVersion, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number index\r\n     */\r\n    static addIndex(builder: flatbuffers.Builder, index: number) {\r\n      builder.addFieldInt32(4, index, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset opTypeOffset\r\n     */\r\n    static addOpType(builder: flatbuffers.Builder, opTypeOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(5, opTypeOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.NodeType type\r\n     */\r\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.NodeType) {\r\n      builder.addFieldInt32(6, type, onnxruntime.experimental.fbs.NodeType.Primitive);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset executionProviderTypeOffset\r\n     */\r\n    static addExecutionProviderType(builder: flatbuffers.Builder, executionProviderTypeOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(7, executionProviderTypeOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset inputsOffset\r\n     */\r\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(8, inputsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset outputsOffset\r\n     */\r\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(9, outputsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset attributesOffset\r\n     */\r\n    static addAttributes(builder: flatbuffers.Builder, attributesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(10, attributesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createAttributesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startAttributesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset inputArgCountsOffset\r\n     */\r\n    static addInputArgCounts(builder: flatbuffers.Builder, inputArgCountsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(11, inputArgCountsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<number> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createInputArgCountsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt32(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startInputArgCountsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset implicitInputsOffset\r\n     */\r\n    static addImplicitInputs(builder: flatbuffers.Builder, implicitInputsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(12, implicitInputsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createImplicitInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startImplicitInputsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endNode(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createNode(\r\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\r\n        domainOffset: flatbuffers.Offset, sinceVersion: number, index: number, opTypeOffset: flatbuffers.Offset,\r\n        type: onnxruntime.experimental.fbs.NodeType, executionProviderTypeOffset: flatbuffers.Offset,\r\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset, attributesOffset: flatbuffers.Offset,\r\n        inputArgCountsOffset: flatbuffers.Offset, implicitInputsOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Node.startNode(builder);\r\n      Node.addName(builder, nameOffset);\r\n      Node.addDocString(builder, docStringOffset);\r\n      Node.addDomain(builder, domainOffset);\r\n      Node.addSinceVersion(builder, sinceVersion);\r\n      Node.addIndex(builder, index);\r\n      Node.addOpType(builder, opTypeOffset);\r\n      Node.addType(builder, type);\r\n      Node.addExecutionProviderType(builder, executionProviderTypeOffset);\r\n      Node.addInputs(builder, inputsOffset);\r\n      Node.addOutputs(builder, outputsOffset);\r\n      Node.addAttributes(builder, attributesOffset);\r\n      Node.addInputArgCounts(builder, inputArgCountsOffset);\r\n      Node.addImplicitInputs(builder, implicitInputsOffset);\r\n      return Node.endNode(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class ValueInfo {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns ValueInfo\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): ValueInfo {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param ValueInfo= obj\r\n     * @returns ValueInfo\r\n     */\r\n    static getRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\r\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param ValueInfo= obj\r\n     * @returns ValueInfo\r\n     */\r\n    static getSizePrefixedRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    name(): string|null;\r\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    name(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    docString(): string|null;\r\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    docString(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\r\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\r\n     */\r\n    type(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startValueInfo(builder: flatbuffers.Builder) {\r\n      builder.startObject(3);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nameOffset\r\n     */\r\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, nameOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset docStringOffset\r\n     */\r\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, docStringOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset typeOffset\r\n     */\r\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, typeOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endValueInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createValueInfo(\r\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\r\n        typeOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      ValueInfo.startValueInfo(builder);\r\n      ValueInfo.addName(builder, nameOffset);\r\n      ValueInfo.addDocString(builder, docStringOffset);\r\n      ValueInfo.addType(builder, typeOffset);\r\n      return ValueInfo.endValueInfo(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class TypeInfo {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns TypeInfo\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): TypeInfo {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param TypeInfo= obj\r\n     * @returns TypeInfo\r\n     */\r\n    static getRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\r\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param TypeInfo= obj\r\n     * @returns TypeInfo\r\n     */\r\n    static getSizePrefixedRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    denotation(): string|null;\r\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.TypeInfoValue\r\n     */\r\n    valueType(): onnxruntime.experimental.fbs.TypeInfoValue {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.TypeInfoValue.NONE;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Table obj\r\n     * @returns ?flatbuffers.Table\r\n     */\r\n    value<T extends flatbuffers.Table>(obj: T): T|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startTypeInfo(builder: flatbuffers.Builder) {\r\n      builder.startObject(3);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset denotationOffset\r\n     */\r\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, denotationOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.TypeInfoValue valueType\r\n     */\r\n    static addValueType(builder: flatbuffers.Builder, valueType: onnxruntime.experimental.fbs.TypeInfoValue) {\r\n      builder.addFieldInt8(1, valueType, onnxruntime.experimental.fbs.TypeInfoValue.NONE);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset valueOffset\r\n     */\r\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, valueOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endTypeInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createTypeInfo(\r\n        builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset,\r\n        valueType: onnxruntime.experimental.fbs.TypeInfoValue, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      TypeInfo.startTypeInfo(builder);\r\n      TypeInfo.addDenotation(builder, denotationOffset);\r\n      TypeInfo.addValueType(builder, valueType);\r\n      TypeInfo.addValue(builder, valueOffset);\r\n      return TypeInfo.endTypeInfo(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class OperatorSetId {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns OperatorSetId\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): OperatorSetId {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param OperatorSetId= obj\r\n     * @returns OperatorSetId\r\n     */\r\n    static getRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\r\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param OperatorSetId= obj\r\n     * @returns OperatorSetId\r\n     */\r\n    static getSizePrefixedRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    domain(): string|null;\r\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    domain(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns flatbuffers.Long\r\n     */\r\n    version(): flatbuffers.Long {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startOperatorSetId(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset domainOffset\r\n     */\r\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, domainOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Long version\r\n     */\r\n    static addVersion(builder: flatbuffers.Builder, version: flatbuffers.Long) {\r\n      builder.addFieldInt64(1, version, builder.createLong(0, 0));\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endOperatorSetId(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createOperatorSetId(\r\n        builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset, version: flatbuffers.Long): flatbuffers.Offset {\r\n      OperatorSetId.startOperatorSetId(builder);\r\n      OperatorSetId.addDomain(builder, domainOffset);\r\n      OperatorSetId.addVersion(builder, version);\r\n      return OperatorSetId.endOperatorSetId(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Tensor {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Tensor\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Tensor {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Tensor= obj\r\n     * @returns Tensor\r\n     */\r\n    static getRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\r\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Tensor= obj\r\n     * @returns Tensor\r\n     */\r\n    static getSizePrefixedRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    name(): string|null;\r\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    name(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    docString(): string|null;\r\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    docString(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns flatbuffers.Long\r\n     */\r\n    dims(index: number): flatbuffers.Long|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\r\n                      this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    dimsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.TensorDataType\r\n     */\r\n    dataType(): onnxruntime.experimental.fbs.TensorDataType {\r\n      let offset = this.bb!.__offset(this.bb_pos, 10);\r\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns number\r\n     */\r\n    rawData(index: number): number|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    rawDataLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns Uint8Array\r\n     */\r\n    rawDataArray(): Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ?\r\n          new Uint8Array(\r\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\r\n              this.bb!.__vector_len(this.bb_pos + offset)) :\r\n          null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    stringData(index: number): string;\r\n    stringData(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    stringData(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    stringDataLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startTensor(builder: flatbuffers.Builder) {\r\n      builder.startObject(6);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nameOffset\r\n     */\r\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, nameOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset docStringOffset\r\n     */\r\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, docStringOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset dimsOffset\r\n     */\r\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, dimsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Long> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\r\n      builder.startVector(8, data.length, 8);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt64(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(8, numElems, 8);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.TensorDataType dataType\r\n     */\r\n    static addDataType(builder: flatbuffers.Builder, dataType: onnxruntime.experimental.fbs.TensorDataType) {\r\n      builder.addFieldInt32(3, dataType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset rawDataOffset\r\n     */\r\n    static addRawData(builder: flatbuffers.Builder, rawDataOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(4, rawDataOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<number> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createRawDataVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\r\n      builder.startVector(1, data.length, 1);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt8(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startRawDataVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(1, numElems, 1);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset stringDataOffset\r\n     */\r\n    static addStringData(builder: flatbuffers.Builder, stringDataOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(5, stringDataOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createStringDataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startStringDataVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createTensor(\r\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\r\n        dimsOffset: flatbuffers.Offset, dataType: onnxruntime.experimental.fbs.TensorDataType,\r\n        rawDataOffset: flatbuffers.Offset, stringDataOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Tensor.startTensor(builder);\r\n      Tensor.addName(builder, nameOffset);\r\n      Tensor.addDocString(builder, docStringOffset);\r\n      Tensor.addDims(builder, dimsOffset);\r\n      Tensor.addDataType(builder, dataType);\r\n      Tensor.addRawData(builder, rawDataOffset);\r\n      Tensor.addStringData(builder, stringDataOffset);\r\n      return Tensor.endTensor(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class SparseTensor {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns SparseTensor\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): SparseTensor {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SparseTensor= obj\r\n     * @returns SparseTensor\r\n     */\r\n    static getRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\r\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SparseTensor= obj\r\n     * @returns SparseTensor\r\n     */\r\n    static getSizePrefixedRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Tensor= obj\r\n     * @returns onnxruntime.experimental.fbs.Tensor|null\r\n     */\r\n    values(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Tensor= obj\r\n     * @returns onnxruntime.experimental.fbs.Tensor|null\r\n     */\r\n    indices(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns flatbuffers.Long\r\n     */\r\n    dims(index: number): flatbuffers.Long|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\r\n                      this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    dimsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startSparseTensor(builder: flatbuffers.Builder) {\r\n      builder.startObject(3);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset valuesOffset\r\n     */\r\n    static addValues(builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, valuesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset indicesOffset\r\n     */\r\n    static addIndices(builder: flatbuffers.Builder, indicesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, indicesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset dimsOffset\r\n     */\r\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, dimsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Long> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\r\n      builder.startVector(8, data.length, 8);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt64(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(8, numElems, 8);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endSparseTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createSparseTensor(\r\n        builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset, indicesOffset: flatbuffers.Offset,\r\n        dimsOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      SparseTensor.startSparseTensor(builder);\r\n      SparseTensor.addValues(builder, valuesOffset);\r\n      SparseTensor.addIndices(builder, indicesOffset);\r\n      SparseTensor.addDims(builder, dimsOffset);\r\n      return SparseTensor.endSparseTensor(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Attribute {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Attribute\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Attribute {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Attribute= obj\r\n     * @returns Attribute\r\n     */\r\n    static getRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\r\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Attribute= obj\r\n     * @returns Attribute\r\n     */\r\n    static getSizePrefixedRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    name(): string|null;\r\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    name(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    docString(): string|null;\r\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    docString(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.AttributeType\r\n     */\r\n    type(): onnxruntime.experimental.fbs.AttributeType {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.AttributeType.UNDEFINED;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    f(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 10);\r\n      return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;\r\n    }\r\n\r\n    /**\r\n     * @returns flatbuffers.Long\r\n     */\r\n    i(): flatbuffers.Long {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    s(): string|null;\r\n    s(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    s(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Tensor= obj\r\n     * @returns onnxruntime.experimental.fbs.Tensor|null\r\n     */\r\n    t(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 16);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Graph= obj\r\n     * @returns onnxruntime.experimental.fbs.Graph|null\r\n     */\r\n    g(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 18);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns number\r\n     */\r\n    floats(index: number): number|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 20);\r\n      return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    floatsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 20);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns Float32Array\r\n     */\r\n    floatsArray(): Float32Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 20);\r\n      return offset ?\r\n          new Float32Array(\r\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\r\n              this.bb!.__vector_len(this.bb_pos + offset)) :\r\n          null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns flatbuffers.Long\r\n     */\r\n    ints(index: number): flatbuffers.Long|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 22);\r\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\r\n                      this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    intsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 22);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    strings(index: number): string;\r\n    strings(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    strings(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 24);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    stringsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 24);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.Tensor= obj\r\n     * @returns onnxruntime.experimental.fbs.Tensor\r\n     */\r\n    tensors(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 26);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    tensorsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 26);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.Graph= obj\r\n     * @returns onnxruntime.experimental.fbs.Graph\r\n     */\r\n    graphs(index: number, obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 28);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    graphsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 28);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startAttribute(builder: flatbuffers.Builder) {\r\n      builder.startObject(13);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nameOffset\r\n     */\r\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, nameOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset docStringOffset\r\n     */\r\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, docStringOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.AttributeType type\r\n     */\r\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.AttributeType) {\r\n      builder.addFieldInt32(2, type, onnxruntime.experimental.fbs.AttributeType.UNDEFINED);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number f\r\n     */\r\n    static addF(builder: flatbuffers.Builder, f: number) {\r\n      builder.addFieldFloat32(3, f, 0.0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Long i\r\n     */\r\n    static addI(builder: flatbuffers.Builder, i: flatbuffers.Long) {\r\n      builder.addFieldInt64(4, i, builder.createLong(0, 0));\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset sOffset\r\n     */\r\n    static addS(builder: flatbuffers.Builder, sOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(5, sOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset tOffset\r\n     */\r\n    static addT(builder: flatbuffers.Builder, tOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(6, tOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset gOffset\r\n     */\r\n    static addG(builder: flatbuffers.Builder, gOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(7, gOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset floatsOffset\r\n     */\r\n    static addFloats(builder: flatbuffers.Builder, floatsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(8, floatsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<number> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createFloatsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addFloat32(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startFloatsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset intsOffset\r\n     */\r\n    static addInts(builder: flatbuffers.Builder, intsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(9, intsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Long> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createIntsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\r\n      builder.startVector(8, data.length, 8);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt64(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startIntsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(8, numElems, 8);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset stringsOffset\r\n     */\r\n    static addStrings(builder: flatbuffers.Builder, stringsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(10, stringsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createStringsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startStringsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset tensorsOffset\r\n     */\r\n    static addTensors(builder: flatbuffers.Builder, tensorsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(11, tensorsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createTensorsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startTensorsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset graphsOffset\r\n     */\r\n    static addGraphs(builder: flatbuffers.Builder, graphsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(12, graphsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createGraphsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startGraphsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endAttribute(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createAttribute(\r\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\r\n        type: onnxruntime.experimental.fbs.AttributeType, f: number, i: flatbuffers.Long, sOffset: flatbuffers.Offset,\r\n        tOffset: flatbuffers.Offset, gOffset: flatbuffers.Offset, floatsOffset: flatbuffers.Offset,\r\n        intsOffset: flatbuffers.Offset, stringsOffset: flatbuffers.Offset, tensorsOffset: flatbuffers.Offset,\r\n        graphsOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Attribute.startAttribute(builder);\r\n      Attribute.addName(builder, nameOffset);\r\n      Attribute.addDocString(builder, docStringOffset);\r\n      Attribute.addType(builder, type);\r\n      Attribute.addF(builder, f);\r\n      Attribute.addI(builder, i);\r\n      Attribute.addS(builder, sOffset);\r\n      Attribute.addT(builder, tOffset);\r\n      Attribute.addG(builder, gOffset);\r\n      Attribute.addFloats(builder, floatsOffset);\r\n      Attribute.addInts(builder, intsOffset);\r\n      Attribute.addStrings(builder, stringsOffset);\r\n      Attribute.addTensors(builder, tensorsOffset);\r\n      Attribute.addGraphs(builder, graphsOffset);\r\n      return Attribute.endAttribute(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Graph {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Graph\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Graph {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Graph= obj\r\n     * @returns Graph\r\n     */\r\n    static getRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\r\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Graph= obj\r\n     * @returns Graph\r\n     */\r\n    static getSizePrefixedRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.Tensor= obj\r\n     * @returns onnxruntime.experimental.fbs.Tensor\r\n     */\r\n    initializers(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    initializersLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.ValueInfo= obj\r\n     * @returns onnxruntime.experimental.fbs.ValueInfo\r\n     */\r\n    nodeArgs(index: number, obj?: onnxruntime.experimental.fbs.ValueInfo): onnxruntime.experimental.fbs.ValueInfo|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.ValueInfo())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    nodeArgsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.Node= obj\r\n     * @returns onnxruntime.experimental.fbs.Node\r\n     */\r\n    nodes(index: number, obj?: onnxruntime.experimental.fbs.Node): onnxruntime.experimental.fbs.Node|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Node())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    nodesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    maxNodeIndex(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 10);\r\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.NodeEdge= obj\r\n     * @returns onnxruntime.experimental.fbs.NodeEdge\r\n     */\r\n    nodeEdges(index: number, obj?: onnxruntime.experimental.fbs.NodeEdge): onnxruntime.experimental.fbs.NodeEdge|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.NodeEdge())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    nodeEdgesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    inputs(index: number): string;\r\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    inputsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    outputs(index: number): string;\r\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 16);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    outputsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 16);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.SparseTensor= obj\r\n     * @returns onnxruntime.experimental.fbs.SparseTensor\r\n     */\r\n    sparseInitializers(index: number, obj?: onnxruntime.experimental.fbs.SparseTensor):\r\n        onnxruntime.experimental.fbs.SparseTensor|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 18);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.SparseTensor())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    sparseInitializersLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 18);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startGraph(builder: flatbuffers.Builder) {\r\n      builder.startObject(8);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset initializersOffset\r\n     */\r\n    static addInitializers(builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, initializersOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startInitializersVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nodeArgsOffset\r\n     */\r\n    static addNodeArgs(builder: flatbuffers.Builder, nodeArgsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, nodeArgsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createNodeArgsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startNodeArgsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nodesOffset\r\n     */\r\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, nodesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createNodesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number maxNodeIndex\r\n     */\r\n    static addMaxNodeIndex(builder: flatbuffers.Builder, maxNodeIndex: number) {\r\n      builder.addFieldInt32(3, maxNodeIndex, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nodeEdgesOffset\r\n     */\r\n    static addNodeEdges(builder: flatbuffers.Builder, nodeEdgesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(4, nodeEdgesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createNodeEdgesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startNodeEdgesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset inputsOffset\r\n     */\r\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(5, inputsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset outputsOffset\r\n     */\r\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(6, outputsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset sparseInitializersOffset\r\n     */\r\n    static addSparseInitializers(builder: flatbuffers.Builder, sparseInitializersOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(7, sparseInitializersOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createSparseInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\r\n        flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startSparseInitializersVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endGraph(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createGraph(\r\n        builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset, nodeArgsOffset: flatbuffers.Offset,\r\n        nodesOffset: flatbuffers.Offset, maxNodeIndex: number, nodeEdgesOffset: flatbuffers.Offset,\r\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset,\r\n        sparseInitializersOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Graph.startGraph(builder);\r\n      Graph.addInitializers(builder, initializersOffset);\r\n      Graph.addNodeArgs(builder, nodeArgsOffset);\r\n      Graph.addNodes(builder, nodesOffset);\r\n      Graph.addMaxNodeIndex(builder, maxNodeIndex);\r\n      Graph.addNodeEdges(builder, nodeEdgesOffset);\r\n      Graph.addInputs(builder, inputsOffset);\r\n      Graph.addOutputs(builder, outputsOffset);\r\n      Graph.addSparseInitializers(builder, sparseInitializersOffset);\r\n      return Graph.endGraph(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Model {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Model\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Model {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Model= obj\r\n     * @returns Model\r\n     */\r\n    static getRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\r\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Model= obj\r\n     * @returns Model\r\n     */\r\n    static getSizePrefixedRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @returns flatbuffers.Long\r\n     */\r\n    irVersion(): flatbuffers.Long {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.OperatorSetId= obj\r\n     * @returns onnxruntime.experimental.fbs.OperatorSetId\r\n     */\r\n    opsetImport(index: number, obj?: onnxruntime.experimental.fbs.OperatorSetId):\r\n        onnxruntime.experimental.fbs.OperatorSetId|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.OperatorSetId())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    opsetImportLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    producerName(): string|null;\r\n    producerName(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    producerName(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    producerVersion(): string|null;\r\n    producerVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    producerVersion(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 10);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    domain(): string|null;\r\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    domain(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns flatbuffers.Long\r\n     */\r\n    modelVersion(): flatbuffers.Long {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    docString(): string|null;\r\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    docString(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 16);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Graph= obj\r\n     * @returns onnxruntime.experimental.fbs.Graph|null\r\n     */\r\n    graph(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 18);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    graphDocString(): string|null;\r\n    graphDocString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    graphDocString(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 20);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startModel(builder: flatbuffers.Builder) {\r\n      builder.startObject(9);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Long irVersion\r\n     */\r\n    static addIrVersion(builder: flatbuffers.Builder, irVersion: flatbuffers.Long) {\r\n      builder.addFieldInt64(0, irVersion, builder.createLong(0, 0));\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset opsetImportOffset\r\n     */\r\n    static addOpsetImport(builder: flatbuffers.Builder, opsetImportOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, opsetImportOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createOpsetImportVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startOpsetImportVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset producerNameOffset\r\n     */\r\n    static addProducerName(builder: flatbuffers.Builder, producerNameOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, producerNameOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset producerVersionOffset\r\n     */\r\n    static addProducerVersion(builder: flatbuffers.Builder, producerVersionOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(3, producerVersionOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset domainOffset\r\n     */\r\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(4, domainOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Long modelVersion\r\n     */\r\n    static addModelVersion(builder: flatbuffers.Builder, modelVersion: flatbuffers.Long) {\r\n      builder.addFieldInt64(5, modelVersion, builder.createLong(0, 0));\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset docStringOffset\r\n     */\r\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(6, docStringOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset graphOffset\r\n     */\r\n    static addGraph(builder: flatbuffers.Builder, graphOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(7, graphOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset graphDocStringOffset\r\n     */\r\n    static addGraphDocString(builder: flatbuffers.Builder, graphDocStringOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(8, graphDocStringOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endModel(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createModel(\r\n        builder: flatbuffers.Builder, irVersion: flatbuffers.Long, opsetImportOffset: flatbuffers.Offset,\r\n        producerNameOffset: flatbuffers.Offset, producerVersionOffset: flatbuffers.Offset,\r\n        domainOffset: flatbuffers.Offset, modelVersion: flatbuffers.Long, docStringOffset: flatbuffers.Offset,\r\n        graphOffset: flatbuffers.Offset, graphDocStringOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Model.startModel(builder);\r\n      Model.addIrVersion(builder, irVersion);\r\n      Model.addOpsetImport(builder, opsetImportOffset);\r\n      Model.addProducerName(builder, producerNameOffset);\r\n      Model.addProducerVersion(builder, producerVersionOffset);\r\n      Model.addDomain(builder, domainOffset);\r\n      Model.addModelVersion(builder, modelVersion);\r\n      Model.addDocString(builder, docStringOffset);\r\n      Model.addGraph(builder, graphOffset);\r\n      Model.addGraphDocString(builder, graphDocStringOffset);\r\n      return Model.endModel(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class KernelCreateInfos {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns KernelCreateInfos\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): KernelCreateInfos {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param KernelCreateInfos= obj\r\n     * @returns KernelCreateInfos\r\n     */\r\n    static getRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos): KernelCreateInfos {\r\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param KernelCreateInfos= obj\r\n     * @returns KernelCreateInfos\r\n     */\r\n    static getSizePrefixedRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos):\r\n        KernelCreateInfos {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns number\r\n     */\r\n    nodeIndices(index: number): number|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    nodeIndicesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns Uint32Array\r\n     */\r\n    nodeIndicesArray(): Uint32Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ?\r\n          new Uint32Array(\r\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\r\n              this.bb!.__vector_len(this.bb_pos + offset)) :\r\n          null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns flatbuffers.Long\r\n     */\r\n    kernelDefHashes(index: number): flatbuffers.Long|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.readUint64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\r\n                      this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    kernelDefHashesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startKernelCreateInfos(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nodeIndicesOffset\r\n     */\r\n    static addNodeIndices(builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, nodeIndicesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<number> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createNodeIndicesVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt32(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startNodeIndicesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset kernelDefHashesOffset\r\n     */\r\n    static addKernelDefHashes(builder: flatbuffers.Builder, kernelDefHashesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, kernelDefHashesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Long> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createKernelDefHashesVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\r\n      builder.startVector(8, data.length, 8);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt64(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startKernelDefHashesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(8, numElems, 8);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endKernelCreateInfos(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createKernelCreateInfos(\r\n        builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset,\r\n        kernelDefHashesOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      KernelCreateInfos.startKernelCreateInfos(builder);\r\n      KernelCreateInfos.addNodeIndices(builder, nodeIndicesOffset);\r\n      KernelCreateInfos.addKernelDefHashes(builder, kernelDefHashesOffset);\r\n      return KernelCreateInfos.endKernelCreateInfos(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class SubGraphSessionState {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns SubGraphSessionState\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): SubGraphSessionState {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SubGraphSessionState= obj\r\n     * @returns SubGraphSessionState\r\n     */\r\n    static getRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState): SubGraphSessionState {\r\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SubGraphSessionState= obj\r\n     * @returns SubGraphSessionState\r\n     */\r\n    static getSizePrefixedRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState):\r\n        SubGraphSessionState {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    graphId(): string|null;\r\n    graphId(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    graphId(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.SessionState= obj\r\n     * @returns onnxruntime.experimental.fbs.SessionState|null\r\n     */\r\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startSubGraphSessionState(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset graphIdOffset\r\n     */\r\n    static addGraphId(builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, graphIdOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset sessionStateOffset\r\n     */\r\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, sessionStateOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endSubGraphSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      builder.requiredField(offset, 4);  // graph_id\r\n      return offset;\r\n    }\r\n\r\n    static createSubGraphSessionState(\r\n        builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset,\r\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      SubGraphSessionState.startSubGraphSessionState(builder);\r\n      SubGraphSessionState.addGraphId(builder, graphIdOffset);\r\n      SubGraphSessionState.addSessionState(builder, sessionStateOffset);\r\n      return SubGraphSessionState.endSubGraphSessionState(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class SessionState {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns SessionState\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): SessionState {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SessionState= obj\r\n     * @returns SessionState\r\n     */\r\n    static getRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\r\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SessionState= obj\r\n     * @returns SessionState\r\n     */\r\n    static getSizePrefixedRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.KernelCreateInfos= obj\r\n     * @returns onnxruntime.experimental.fbs.KernelCreateInfos|null\r\n     */\r\n    kernels(obj?: onnxruntime.experimental.fbs.KernelCreateInfos): onnxruntime.experimental.fbs.KernelCreateInfos|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.KernelCreateInfos())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.SubGraphSessionState= obj\r\n     * @returns onnxruntime.experimental.fbs.SubGraphSessionState\r\n     */\r\n    subGraphSessionStates(index: number, obj?: onnxruntime.experimental.fbs.SubGraphSessionState):\r\n        onnxruntime.experimental.fbs.SubGraphSessionState|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.SubGraphSessionState())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    subGraphSessionStatesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startSessionState(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset kernelsOffset\r\n     */\r\n    static addKernels(builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, kernelsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset subGraphSessionStatesOffset\r\n     */\r\n    static addSubGraphSessionStates(builder: flatbuffers.Builder, subGraphSessionStatesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, subGraphSessionStatesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createSubGraphSessionStatesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\r\n        flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startSubGraphSessionStatesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createSessionState(\r\n        builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset,\r\n        subGraphSessionStatesOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      SessionState.startSessionState(builder);\r\n      SessionState.addKernels(builder, kernelsOffset);\r\n      SessionState.addSubGraphSessionStates(builder, subGraphSessionStatesOffset);\r\n      return SessionState.endSessionState(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class InferenceSession {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns InferenceSession\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): InferenceSession {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param InferenceSession= obj\r\n     * @returns InferenceSession\r\n     */\r\n    static getRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\r\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param InferenceSession= obj\r\n     * @returns InferenceSession\r\n     */\r\n    static getSizePrefixedRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns boolean\r\n     */\r\n    static bufferHasIdentifier(bb: flatbuffers.ByteBuffer): boolean {\r\n      return bb.__has_identifier('ORTM');\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    ortVersion(): string|null;\r\n    ortVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    ortVersion(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Model= obj\r\n     * @returns onnxruntime.experimental.fbs.Model|null\r\n     */\r\n    model(obj?: onnxruntime.experimental.fbs.Model): onnxruntime.experimental.fbs.Model|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Model())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.SessionState= obj\r\n     * @returns onnxruntime.experimental.fbs.SessionState|null\r\n     */\r\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startInferenceSession(builder: flatbuffers.Builder) {\r\n      builder.startObject(3);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset ortVersionOffset\r\n     */\r\n    static addOrtVersion(builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, ortVersionOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset modelOffset\r\n     */\r\n    static addModel(builder: flatbuffers.Builder, modelOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, modelOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset sessionStateOffset\r\n     */\r\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, sessionStateOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endInferenceSession(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset offset\r\n     */\r\n    static finishInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\r\n      builder.finish(offset, 'ORTM');\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset offset\r\n     */\r\n    static finishSizePrefixedInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\r\n      builder.finish(offset, 'ORTM', true);\r\n    }\r\n\r\n    static createInferenceSession(\r\n        builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset, modelOffset: flatbuffers.Offset,\r\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      InferenceSession.startInferenceSession(builder);\r\n      InferenceSession.addOrtVersion(builder, ortVersionOffset);\r\n      InferenceSession.addModel(builder, modelOffset);\r\n      InferenceSession.addSessionState(builder, sessionStateOffset);\r\n      return InferenceSession.endInferenceSession(builder);\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\r\n\r\nimport {Session} from './session';\r\nimport {Tensor as OnnxjsTensor} from './tensor';\r\n\r\nexport class OnnxjsSessionHandler implements SessionHandler {\r\n  constructor(private session: Session) {\r\n    this.inputNames = this.session.inputNames;\r\n    this.outputNames = this.session.outputNames;\r\n  }\r\n\r\n  async dispose(): Promise<void> {}\r\n  inputNames: readonly string[];\r\n  outputNames: readonly string[];\r\n  async run(\r\n      feeds: SessionHandler.FeedsType, _fetches: SessionHandler.FetchesType,\r\n      _options: InferenceSession.RunOptions): Promise<SessionHandler.ReturnType> {\r\n    const inputMap = new Map<string, OnnxjsTensor>();\r\n    for (const name in feeds) {\r\n      if (Object.hasOwnProperty.call(feeds, name)) {\r\n        const feed = feeds[name];\r\n        inputMap.set(\r\n            name,\r\n            new OnnxjsTensor(\r\n                feed.dims, feed.type as OnnxjsTensor.DataType, undefined, undefined,\r\n                feed.data as OnnxjsTensor.NumberType));\r\n      }\r\n    }\r\n    const outputMap = await this.session.run(inputMap);\r\n    const output: SessionHandler.ReturnType = {};\r\n    outputMap.forEach((tensor, name) => {\r\n      output[name] = new Tensor(tensor.type, tensor.data, tensor.dims);\r\n    });\r\n    return output;\r\n  }\r\n  startProfiling(): void {\r\n    this.session.startProfiling();\r\n  }\r\n  endProfiling(): void {\r\n    this.session.endProfiling();\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {readFile} from 'fs';\r\nimport {promisify} from 'util';\r\n\r\nimport {resolveBackend, SessionHandlerType} from './backend';\r\nimport {ExecutionPlan} from './execution-plan';\r\nimport {Graph} from './graph';\r\nimport {Profiler} from './instrument';\r\nimport {Model} from './model';\r\nimport {Operator} from './operators';\r\nimport {Tensor} from './tensor';\r\n\r\nexport declare namespace Session {\r\n  export interface Config {\r\n    backendHint?: string;\r\n    profiler?: Profiler.Config;\r\n  }\r\n\r\n  export interface Context {\r\n    profiler: Readonly<Profiler>;\r\n    graphInputTypes?: Tensor.DataType[];\r\n    graphInputDims?: Array<readonly number[]>;\r\n  }\r\n}\r\n\r\nexport class Session {\r\n  constructor(config: Session.Config = {}) {\r\n    this._initialized = false;\r\n    this.backendHint = config.backendHint;\r\n    this.profiler = Profiler.create(config.profiler);\r\n    this.context = {profiler: this.profiler, graphInputTypes: [], graphInputDims: []};\r\n  }\r\n\r\n  get inputNames(): readonly string[] {\r\n    return this._model.graph.getInputNames();\r\n  }\r\n  get outputNames(): readonly string[] {\r\n    return this._model.graph.getOutputNames();\r\n  }\r\n\r\n  startProfiling() {\r\n    this.profiler.start();\r\n  }\r\n\r\n  endProfiling() {\r\n    this.profiler.stop();\r\n  }\r\n\r\n  async loadModel(uri: string): Promise<void>;\r\n  async loadModel(buffer: ArrayBuffer, byteOffset?: number, length?: number): Promise<void>;\r\n  async loadModel(buffer: Uint8Array): Promise<void>;\r\n  async loadModel(arg: string|ArrayBuffer|Uint8Array, byteOffset?: number, length?: number): Promise<void> {\r\n    await this.profiler.event('session', 'Session.loadModel', async () => {\r\n      // resolve backend and session handler\r\n      const backend = await resolveBackend(this.backendHint);\r\n      this.sessionHandler = backend.createSessionHandler(this.context);\r\n\r\n      this._model = new Model();\r\n      if (typeof arg === 'string') {\r\n        const isOrtFormat = arg.endsWith('.ort');\r\n        if (typeof process !== 'undefined' && process.versions && process.versions.node) {\r\n          // node\r\n          const buf = await promisify(readFile)(arg);\r\n          this.initialize(buf, isOrtFormat);\r\n        } else {\r\n          // browser\r\n          const response = await fetch(arg);\r\n          const buf = await response.arrayBuffer();\r\n          this.initialize(new Uint8Array(buf), isOrtFormat);\r\n        }\r\n      } else if (!ArrayBuffer.isView(arg)) {\r\n        // load model from ArrayBuffer\r\n        const arr = new Uint8Array(arg, byteOffset || 0, length || arg.byteLength);\r\n        this.initialize(arr);\r\n      } else {\r\n        // load model from Uint8array\r\n        this.initialize(arg);\r\n      }\r\n    });\r\n  }\r\n\r\n  private initialize(modelProtoBlob: Uint8Array, isOrtFormat?: boolean): void {\r\n    if (this._initialized) {\r\n      throw new Error('already initialized');\r\n    }\r\n\r\n    this.profiler.event('session', 'Session.initialize', () => {\r\n      // load graph\r\n      const graphInitializer =\r\n          this.sessionHandler.transformGraph ? this.sessionHandler as Graph.Initializer : undefined;\r\n      this._model.load(modelProtoBlob, graphInitializer, isOrtFormat);\r\n\r\n      // graph is completely initialzied at this stage , let the interested handlers know\r\n      if (this.sessionHandler.onGraphInitialized) {\r\n        this.sessionHandler.onGraphInitialized(this._model.graph);\r\n      }\r\n      // initialize each operator in the graph\r\n      this.initializeOps(this._model.graph);\r\n\r\n      // instantiate an ExecutionPlan object to be used by the Session object\r\n      this._executionPlan = new ExecutionPlan(this._model.graph, this._ops, this.profiler);\r\n    });\r\n\r\n    this._initialized = true;\r\n  }\r\n\r\n  async run(inputs: Map<string, Tensor>|Tensor[]): Promise<Map<string, Tensor>> {\r\n    if (!this._initialized) {\r\n      throw new Error('session not initialized yet');\r\n    }\r\n\r\n    return this.profiler.event('session', 'Session.run', async () => {\r\n      const inputTensors = this.normalizeAndValidateInputs(inputs);\r\n\r\n      const outputTensors = await this._executionPlan.execute(this.sessionHandler, inputTensors);\r\n\r\n      return this.createOutput(outputTensors);\r\n    });\r\n  }\r\n\r\n  private normalizeAndValidateInputs(inputs: Map<string, Tensor>|Tensor[]): Tensor[] {\r\n    const modelInputNames = this._model.graph.getInputNames();\r\n\r\n    // normalize inputs\r\n    // inputs: Tensor[]\r\n    if (Array.isArray(inputs)) {\r\n      if (inputs.length !== modelInputNames.length) {\r\n        throw new Error(`incorrect input array length: expected ${modelInputNames.length} but got ${inputs.length}`);\r\n      }\r\n    }\r\n    // convert map to array\r\n    // inputs: Map<string, Tensor>\r\n    else {\r\n      if (inputs.size !== modelInputNames.length) {\r\n        throw new Error(`incorrect input map size: expected ${modelInputNames.length} but got ${inputs.size}`);\r\n      }\r\n\r\n      const sortedInputs = new Array<Tensor>(inputs.size);\r\n      let sortedInputsIndex = 0;\r\n      for (let i = 0; i < modelInputNames.length; ++i) {\r\n        const tensor = inputs.get(modelInputNames[i]);\r\n        if (!tensor) {\r\n          throw new Error(`missing input tensor for: '${name}'`);\r\n        }\r\n        sortedInputs[sortedInputsIndex++] = tensor;\r\n      }\r\n\r\n      inputs = sortedInputs;\r\n    }\r\n\r\n    // validate dims requirements\r\n    // First session run - graph input data is not cached for the session\r\n    if (!this.context.graphInputTypes || this.context.graphInputTypes.length === 0 || !this.context.graphInputDims ||\r\n        this.context.graphInputDims.length === 0) {\r\n      const modelInputIndices = this._model.graph.getInputIndices();\r\n      const modelValues = this._model.graph.getValues();\r\n\r\n      const graphInputDims = new Array<readonly number[]>(modelInputIndices.length);\r\n\r\n      for (let i = 0; i < modelInputIndices.length; ++i) {\r\n        const graphInput = modelValues[modelInputIndices[i]];\r\n        graphInputDims[i] = graphInput.type!.shape.dims;\r\n\r\n        // cached for second and subsequent runs.\r\n        // Some parts of the framework works on the assumption that the graph and types and shapes are static\r\n        this.context.graphInputTypes!.push(graphInput.type!.tensorType);\r\n        this.context.graphInputDims!.push(inputs[i].dims);\r\n      }\r\n\r\n      this.validateInputTensorDims(graphInputDims, inputs, true);\r\n    }\r\n\r\n    // Second and subsequent session runs - graph input data is cached for the session\r\n    else {\r\n      this.validateInputTensorDims(this.context.graphInputDims, inputs, false);\r\n    }\r\n\r\n    // validate types requirement\r\n    this.validateInputTensorTypes(this.context.graphInputTypes!, inputs);\r\n\r\n    return inputs;\r\n  }\r\n\r\n  private validateInputTensorTypes(graphInputTypes: Tensor.DataType[], givenInputs: Tensor[]) {\r\n    for (let i = 0; i < givenInputs.length; i++) {\r\n      const expectedType = graphInputTypes[i];\r\n      const actualType = givenInputs[i].type;\r\n      if (expectedType !== actualType) {\r\n        throw new Error(`input tensor[${i}] check failed: expected type '${expectedType}' but got ${actualType}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  private validateInputTensorDims(\r\n      graphInputDims: Array<readonly number[]>, givenInputs: Tensor[], noneDimSupported: boolean) {\r\n    for (let i = 0; i < givenInputs.length; i++) {\r\n      const expectedDims = graphInputDims[i];\r\n      const actualDims = givenInputs[i].dims;\r\n      if (!this.compareTensorDims(expectedDims, actualDims, noneDimSupported)) {\r\n        throw new Error(`input tensor[${i}] check failed: expected shape '[${expectedDims.join(',')}]' but got [${\r\n            actualDims.join(',')}]`);\r\n      }\r\n    }\r\n  }\r\n\r\n  private compareTensorDims(expectedDims: readonly number[], actualDims: readonly number[], noneDimSupported: boolean):\r\n      boolean {\r\n    if (expectedDims.length !== actualDims.length) {\r\n      return false;\r\n    }\r\n\r\n    for (let i = 0; i < expectedDims.length; ++i) {\r\n      if (expectedDims[i] !== actualDims[i] && (!noneDimSupported || expectedDims[i] !== 0)) {\r\n        // data shape mis-match AND not a 'None' dimension.\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  private createOutput(outputTensors: Tensor[]): Map<string, Tensor> {\r\n    const modelOutputNames = this._model.graph.getOutputNames();\r\n    if (outputTensors.length !== modelOutputNames.length) {\r\n      throw new Error('expected number of outputs do not match number of generated outputs');\r\n    }\r\n\r\n    const output = new Map<string, Tensor>();\r\n    for (let i = 0; i < modelOutputNames.length; ++i) {\r\n      output.set(modelOutputNames[i], outputTensors[i]);\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  private initializeOps(graph: Graph): void {\r\n    const nodes = graph.getNodes();\r\n    this._ops = new Array(nodes.length);\r\n\r\n    for (let i = 0; i < nodes.length; i++) {\r\n      this._ops[i] = this.sessionHandler.resolve(nodes[i], this._model.opsets, graph);\r\n    }\r\n  }\r\n\r\n  private _model: Model;\r\n  private _initialized: boolean;\r\n\r\n  private _ops: Operator[];\r\n  private _executionPlan: ExecutionPlan;\r\n\r\n  private backendHint?: string;\r\n\r\n  private sessionHandler: SessionHandlerType;\r\n  private context: Session.Context;\r\n  private profiler: Readonly<Profiler>;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Guid} from 'guid-typescript';\r\nimport Long from 'long';\r\n\r\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\r\nimport {onnx} from './ort-schema/protobuf/onnx';\r\nimport {decodeUtf8String, ProtoUtil, ShapeUtil} from './util';\r\n\r\nimport ortFbs = onnxruntime.experimental.fbs;\r\n\r\nexport declare namespace Tensor {\r\n  export interface DataTypeMap {\r\n    bool: Uint8Array;\r\n    float32: Float32Array;\r\n    float64: Float64Array;\r\n    string: string[];\r\n    int8: Int8Array;\r\n    uint8: Uint8Array;\r\n    int16: Int16Array;\r\n    uint16: Uint16Array;\r\n    int32: Int32Array;\r\n    uint32: Uint32Array;\r\n    int64: BigInt64Array;\r\n  }\r\n\r\n  export type DataType = keyof DataTypeMap;\r\n\r\n  export type StringType = Tensor.DataTypeMap['string'];\r\n  export type BooleanType = Tensor.DataTypeMap['bool'];\r\n  export type IntegerType = Tensor.DataTypeMap['int8']|Tensor.DataTypeMap['uint8']|Tensor.DataTypeMap['int16']|\r\n                            Tensor.DataTypeMap['uint16']|Tensor.DataTypeMap['int32']|Tensor.DataTypeMap['uint32'];\r\n  export type FloatType = Tensor.DataTypeMap['float32']|Tensor.DataTypeMap['float64'];\r\n  export type NumberType = BooleanType|IntegerType|FloatType;\r\n\r\n  export type Id = Guid;\r\n}\r\n\r\ntype TensorData = Tensor.DataTypeMap[Tensor.DataType];\r\n\r\ntype DataProvider = (id: Tensor.Id) => TensorData;\r\ntype AsyncDataProvider = (id: Tensor.Id) => Promise<TensorData>;\r\n\r\nexport class Tensor {\r\n  /**\r\n   * get the underlying tensor data\r\n   */\r\n  get data(): TensorData {\r\n    if (this.cache === undefined) {\r\n      const data = this.dataProvider!(this.dataId);\r\n      if (data.length !== this.size) {\r\n        throw new Error('Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.');\r\n      }\r\n      this.cache = data;\r\n    }\r\n    return this.cache;\r\n  }\r\n\r\n  /**\r\n   * get the underlying string tensor data. Should only use when type is STRING\r\n   */\r\n  get stringData() {\r\n    if (this.type !== 'string') {\r\n      throw new TypeError('data type is not string');\r\n    }\r\n\r\n    return this.data as Tensor.StringType;\r\n  }\r\n\r\n  /**\r\n   * get the underlying integer tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\r\n   * INT16, INT32, UINT32, BOOL)\r\n   */\r\n  get integerData() {\r\n    switch (this.type) {\r\n      case 'uint8':\r\n      case 'int8':\r\n      case 'uint16':\r\n      case 'int16':\r\n      case 'int32':\r\n      case 'uint32':\r\n      case 'bool':\r\n        return this.data as Tensor.IntegerType;\r\n\r\n      default:\r\n        throw new TypeError('data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * get the underlying float tensor data. Should only use when type is one of the following: (FLOAT, DOUBLE)\r\n   */\r\n  get floatData() {\r\n    switch (this.type) {\r\n      case 'float32':\r\n      case 'float64':\r\n        return this.data as Tensor.FloatType;\r\n\r\n      default:\r\n        throw new TypeError('data type is not float (float32, float64)');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * get the underlying number tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\r\n   * INT16, INT32, UINT32, BOOL, FLOAT, DOUBLE)\r\n   */\r\n  get numberData() {\r\n    if (this.type !== 'string') {\r\n      return this.data as Tensor.NumberType;\r\n    }\r\n    throw new TypeError('type cannot be non-number (string)');\r\n  }\r\n\r\n  /**\r\n   * get value of an element at the given indices\r\n   */\r\n  get(indices: readonly number[]): Tensor.DataTypeMap[Tensor.DataType][number] {\r\n    return this.data[ShapeUtil.indicesToOffset(indices, this.strides)];\r\n  }\r\n\r\n  /**\r\n   * set value of an element at the given indices\r\n   */\r\n  set(indices: readonly number[], value: Tensor.DataTypeMap[Tensor.DataType][number]) {\r\n    this.data[ShapeUtil.indicesToOffset(indices, this.strides)] = value;\r\n  }\r\n\r\n  /**\r\n   * get the underlying tensor data asynchronously\r\n   */\r\n  async getData(): Promise<TensorData> {\r\n    if (this.cache === undefined) {\r\n      this.cache = await this.asyncDataProvider!(this.dataId);\r\n    }\r\n    return this.cache;\r\n  }\r\n\r\n  /**\r\n   * get the number of elements in the tensor\r\n   */\r\n  public readonly size: number;\r\n\r\n  private _strides: readonly number[];\r\n  /**\r\n   * get the strides for each dimension\r\n   */\r\n  get strides(): readonly number[] {\r\n    if (!this._strides) {\r\n      this._strides = ShapeUtil.computeStrides(this.dims);\r\n    }\r\n    return this._strides;\r\n  }\r\n\r\n  constructor(\r\n      /**\r\n       * get the dimensions of the tensor\r\n       */\r\n      public readonly dims: readonly number[],\r\n      /**\r\n       * get the type of the tensor\r\n       */\r\n      public readonly type: Tensor.DataType, private dataProvider?: DataProvider,\r\n      private asyncDataProvider?: AsyncDataProvider, private cache?: TensorData,\r\n      /**\r\n       * get the data ID that used to map to a tensor data\r\n       */\r\n      public readonly dataId: Guid = Guid.create()) {\r\n    this.size = ShapeUtil.validateDimsAndCalcSize(dims);\r\n    const size = this.size;\r\n    const empty = (dataProvider === undefined && asyncDataProvider === undefined && cache === undefined);\r\n\r\n    if (cache !== undefined) {\r\n      if (cache.length !== size) {\r\n        throw new RangeError('Input dims doesn\\'t match data length.');\r\n      }\r\n    }\r\n\r\n    if (type === 'string') {\r\n      if (cache !== undefined && (!Array.isArray(cache) || !cache.every(i => typeof i === 'string'))) {\r\n        throw new TypeError('cache should be a string array');\r\n      }\r\n\r\n      if (empty) {\r\n        this.cache = new Array<string>(size);\r\n      }\r\n    } else {\r\n      if (cache !== undefined) {\r\n        const constructor = dataviewConstructor(type);\r\n        if (!(cache instanceof constructor)) {\r\n          throw new TypeError(`cache should be type ${constructor.name}`);\r\n        }\r\n      }\r\n\r\n      if (empty) {\r\n        const buf = new ArrayBuffer(size * sizeof(type));\r\n        this.cache = createView(buf, type);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Construct new Tensor from a ONNX Tensor object\r\n   * @param tensorProto the ONNX Tensor\r\n   */\r\n  static fromProto(tensorProto: onnx.ITensorProto): Tensor {\r\n    if (!tensorProto) {\r\n      throw new Error('cannot construct Value from an empty tensor');\r\n    }\r\n    const type = ProtoUtil.tensorDataTypeFromProto(tensorProto.dataType!);\r\n    const dims = ProtoUtil.tensorDimsFromProto(tensorProto.dims!);\r\n\r\n    const value = new Tensor(dims, type);\r\n\r\n    if (type === 'string') {\r\n      // When it's STRING type, the value should always be stored in field\r\n      // 'stringData'\r\n      tensorProto.stringData!.forEach((str, i) => {\r\n        value.data[i] = decodeUtf8String(str);\r\n      });\r\n\r\n    } else if (\r\n        tensorProto.rawData && typeof tensorProto.rawData.byteLength === 'number' &&\r\n        tensorProto.rawData.byteLength > 0) {\r\n      // NOT considering segment for now (IMPORTANT)\r\n\r\n      // populate value from rawData\r\n      const dataDest = value.data;\r\n      const dataSource =\r\n          new DataView(tensorProto.rawData.buffer, tensorProto.rawData.byteOffset, tensorProto.rawData.byteLength);\r\n      const elementSize = sizeofProto(tensorProto.dataType!);\r\n      const length = tensorProto.rawData.byteLength / elementSize;\r\n\r\n      if (tensorProto.rawData.byteLength % elementSize !== 0) {\r\n        throw new Error('invalid buffer length');\r\n      }\r\n      if (dataDest.length !== length) {\r\n        throw new Error('buffer length mismatch');\r\n      }\r\n\r\n      for (let i = 0; i < length; i++) {\r\n        const n = readProto(dataSource, tensorProto.dataType!, i * elementSize);\r\n        dataDest[i] = n;\r\n      }\r\n    } else {\r\n      // populate value from array\r\n      let array: Array<number|Long>;\r\n      switch (tensorProto.dataType) {\r\n        case onnx.TensorProto.DataType.FLOAT:\r\n          array = tensorProto.floatData!;\r\n          break;\r\n        case onnx.TensorProto.DataType.INT32:\r\n        case onnx.TensorProto.DataType.INT16:\r\n        case onnx.TensorProto.DataType.UINT16:\r\n        case onnx.TensorProto.DataType.INT8:\r\n        case onnx.TensorProto.DataType.UINT8:\r\n        case onnx.TensorProto.DataType.BOOL:\r\n          array = tensorProto.int32Data!;\r\n          break;\r\n        case onnx.TensorProto.DataType.INT64:\r\n          array = tensorProto.int64Data!;\r\n          break;\r\n        case onnx.TensorProto.DataType.DOUBLE:\r\n          array = tensorProto.doubleData!;\r\n          break;\r\n        case onnx.TensorProto.DataType.UINT32:\r\n        case onnx.TensorProto.DataType.UINT64:\r\n          array = tensorProto.uint64Data!;\r\n          break;\r\n        default:\r\n          // should never run here\r\n          throw new Error('unspecific error');\r\n      }\r\n\r\n      if (array === null || array === undefined) {\r\n        throw new Error('failed to populate data from a tensorproto value');\r\n      }\r\n\r\n      const data = value.data;\r\n      if (data.length !== array.length) {\r\n        throw new Error('array length mismatch');\r\n      }\r\n\r\n      for (let i = 0; i < array.length; i++) {\r\n        const element = array[i];\r\n        if (Long.isLong(element)) {\r\n          data[i] = longToNumber(element, tensorProto.dataType);\r\n        } else {\r\n          data[i] = element;\r\n        }\r\n      }\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * Construct new Tensor from raw data\r\n   * @param data the raw data object. Should be a string array for 'string' tensor, and the corresponding typed array\r\n   * for other types of tensor.\r\n   * @param dims the dimensions of the tensor\r\n   * @param type the type of the tensor\r\n   */\r\n  static fromData(data: Tensor.DataTypeMap[Tensor.DataType], dims: readonly number[], type: Tensor.DataType) {\r\n    return new Tensor(dims, type, undefined, undefined, data);\r\n  }\r\n\r\n  static fromOrtTensor(ortTensor: ortFbs.Tensor) {\r\n    if (!ortTensor) {\r\n      throw new Error('cannot construct Value from an empty tensor');\r\n    }\r\n    const dims = ProtoUtil.tensorDimsFromORTFormat(ortTensor);\r\n    const type = ProtoUtil.tensorDataTypeFromProto(ortTensor.dataType());\r\n\r\n    const value = new Tensor(dims, type);\r\n\r\n    if (type === 'string') {\r\n      // When it's STRING type, the value should always be stored in field\r\n      // 'stringData'\r\n      for (let i = 0; i < ortTensor.stringDataLength(); i++) {\r\n        value.data[i] = ortTensor.stringData(i);\r\n      }\r\n\r\n    } else if (\r\n        ortTensor.rawDataArray() && typeof ortTensor.rawDataLength() === 'number' && ortTensor.rawDataLength() > 0) {\r\n      // NOT considering segment for now (IMPORTANT)\r\n\r\n      // populate value from rawData\r\n      const dataDest = value.data;\r\n      const dataSource = new DataView(\r\n          ortTensor.rawDataArray()!.buffer, ortTensor.rawDataArray()!.byteOffset, ortTensor.rawDataLength());\r\n      const elementSize = sizeofProto(ortTensor.dataType());\r\n      const length = ortTensor.rawDataLength() / elementSize;\r\n\r\n      if (ortTensor.rawDataLength() % elementSize !== 0) {\r\n        throw new Error('invalid buffer length');\r\n      }\r\n      if (dataDest.length !== length) {\r\n        throw new Error('buffer length mismatch');\r\n      }\r\n\r\n      for (let i = 0; i < length; i++) {\r\n        const n = readProto(dataSource, ortTensor.dataType(), i * elementSize);\r\n        dataDest[i] = n;\r\n      }\r\n    }\r\n    return value;\r\n  }\r\n}\r\n\r\nfunction sizeof(type: Tensor.DataType): number {\r\n  switch (type) {\r\n    case 'bool':\r\n    case 'int8':\r\n    case 'uint8':\r\n      return 1;\r\n    case 'int16':\r\n    case 'uint16':\r\n      return 2;\r\n    case 'int32':\r\n    case 'uint32':\r\n    case 'float32':\r\n      return 4;\r\n    case 'float64':\r\n      return 8;\r\n    default:\r\n      throw new Error(`cannot calculate sizeof() on type ${type}`);\r\n  }\r\n}\r\n\r\nfunction sizeofProto(type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\r\n  switch (type) {\r\n    case onnx.TensorProto.DataType.UINT8:\r\n    case onnx.TensorProto.DataType.INT8:\r\n    case onnx.TensorProto.DataType.BOOL:\r\n      return 1;\r\n    case onnx.TensorProto.DataType.UINT16:\r\n    case onnx.TensorProto.DataType.INT16:\r\n      return 2;\r\n    case onnx.TensorProto.DataType.FLOAT:\r\n    case onnx.TensorProto.DataType.INT32:\r\n    case onnx.TensorProto.DataType.UINT32:\r\n      return 4;\r\n    case onnx.TensorProto.DataType.INT64:\r\n    case onnx.TensorProto.DataType.DOUBLE:\r\n    case onnx.TensorProto.DataType.UINT64:\r\n      return 8;\r\n    default:\r\n      throw new Error(`cannot calculate sizeof() on type ${onnx.TensorProto.DataType[type]}`);\r\n  }\r\n}\r\n\r\nfunction createView(dataBuffer: ArrayBuffer, type: Tensor.DataType) {\r\n  return new (dataviewConstructor(type))(dataBuffer);\r\n}\r\n\r\nfunction dataviewConstructor(type: Tensor.DataType) {\r\n  switch (type) {\r\n    case 'bool':\r\n    case 'uint8':\r\n      return Uint8Array;\r\n    case 'int8':\r\n      return Int8Array;\r\n    case 'int16':\r\n      return Int16Array;\r\n    case 'uint16':\r\n      return Uint16Array;\r\n    case 'int32':\r\n      return Int32Array;\r\n    case 'uint32':\r\n      return Uint32Array;\r\n    case 'int64':\r\n      return BigInt64Array;\r\n    case 'float32':\r\n      return Float32Array;\r\n    case 'float64':\r\n      return Float64Array;\r\n    default:\r\n      // should never run to here\r\n      throw new Error('unspecified error');\r\n  }\r\n}\r\n\r\n// convert a long number to a 32-bit integer (cast-down)\r\nfunction longToNumber(i: Long, type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\r\n  // INT64, UINT32, UINT64\r\n  if (type === onnx.TensorProto.DataType.INT64 || type === ortFbs.TensorDataType.INT64) {\r\n    if (i.greaterThanOrEqual(2147483648) || i.lessThan(-2147483648)) {\r\n      throw new TypeError('int64 is not supported');\r\n    }\r\n  } else if (\r\n      type === onnx.TensorProto.DataType.UINT32 || type === ortFbs.TensorDataType.UINT32 ||\r\n      type === onnx.TensorProto.DataType.UINT64 || type === ortFbs.TensorDataType.UINT64) {\r\n    if (i.greaterThanOrEqual(4294967296) || i.lessThan(0)) {\r\n      throw new TypeError('uint64 is not supported');\r\n    }\r\n  } else {\r\n    throw new TypeError(`not a LONG type: ${onnx.TensorProto.DataType[type]}`);\r\n  }\r\n\r\n  return i.toNumber();\r\n}\r\n\r\n// read one value from TensorProto\r\nfunction readProto(view: DataView, type: onnx.TensorProto.DataType|ortFbs.TensorDataType, byteOffset: number): number {\r\n  switch (type) {\r\n    case onnx.TensorProto.DataType.BOOL:\r\n    case onnx.TensorProto.DataType.UINT8:\r\n      return view.getUint8(byteOffset);\r\n    case onnx.TensorProto.DataType.INT8:\r\n      return view.getInt8(byteOffset);\r\n    case onnx.TensorProto.DataType.UINT16:\r\n      return view.getUint16(byteOffset, true);\r\n    case onnx.TensorProto.DataType.INT16:\r\n      return view.getInt16(byteOffset, true);\r\n    case onnx.TensorProto.DataType.FLOAT:\r\n      return view.getFloat32(byteOffset, true);\r\n    case onnx.TensorProto.DataType.INT32:\r\n      return view.getInt32(byteOffset, true);\r\n    case onnx.TensorProto.DataType.UINT32:\r\n      return view.getUint32(byteOffset, true);\r\n    case onnx.TensorProto.DataType.INT64:\r\n      return longToNumber(\r\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), false), type);\r\n    case onnx.TensorProto.DataType.DOUBLE:\r\n      return view.getFloat64(byteOffset, true);\r\n    case onnx.TensorProto.DataType.UINT64:\r\n      return longToNumber(\r\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), true), type);\r\n    default:\r\n      throw new Error(`cannot read from DataView for type ${onnx.TensorProto.DataType[type]}`);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {flatbuffers} from 'flatbuffers';\r\nimport Long from 'long';\r\n\r\nimport {Graph} from './graph';\r\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\r\nimport {onnx} from './ort-schema/protobuf/onnx';\r\nimport {Tensor} from './tensor';\r\n\r\n// check the inputs shape before running an OP.\r\n// return true when the inputs pass the check\r\n// return false when the inputs do not fit the requirement\r\n// throw exception when fatal error or not implemented\r\nexport function checkInputsShape(inputs: Tensor[], ...expectedDimensions: number[]): boolean {\r\n  if (!inputs || inputs.length !== expectedDimensions.length) {\r\n    return false;\r\n  }\r\n  for (let i = 0; i < inputs.length; i++) {\r\n    if (!inputs[i].dims || inputs[i].dims.length !== expectedDimensions[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n// Evaluates the given expression and asserts error message if condition is unmet.\r\nexport function assert(expr: boolean, msg: () => string) {\r\n  if (!expr) {\r\n    throw new Error(typeof msg === 'string' ? msg : msg());\r\n  }\r\n}\r\n\r\nexport class ArrayUtil {\r\n  /**\r\n   * Verifies if 2 input arrays contain the same elements.\r\n   * @param n1 Array 1\r\n   * @param n2 Array 2\r\n   * @returns Whether these 2 are equal\r\n   */\r\n  static arraysEqual(\r\n      n1: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\r\n      Float32Array|Float64Array,\r\n      n2: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\r\n      Float32Array|Float64Array) {\r\n    if (n1.length !== n2.length) {\r\n      return false;\r\n    }\r\n    for (let i = 0; i < n1.length; i++) {\r\n      if (n1[i] !== n2[i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\nexport class MatMulUtil {\r\n  /**\r\n   * Fix the input shapes for MatMul operation if they need fixing\r\n   * @param dimsA The shape of tensor A. Should be an array of positive integers\r\n   * @param dimsB The shape of tensor B. Should be an array of positive integers\r\n   * @returns A tuple containing the preprocessed input shapes as required by ONNX specifications\r\n   */\r\n  static preprocessInputShapes(dimsA: readonly number[], dimsB: readonly number[]):\r\n      [readonly number[], readonly number[]] {\r\n    // If the first argument is 1-D, it is promoted to a matrix by prepending\r\n    // a 1 to its dimensions. After matrix multiplication the prepended 1 is\r\n    // removed.\r\n    const a = (dimsA.length === 1) ? [1, dimsA[0]] : dimsA;\r\n\r\n    // If the second argument is 1-D, it is promoted to a matrix by appending\r\n    // a 1 to its dimensions. After matrix multiplication the appended 1 is\r\n    // removed.\r\n    const b = (dimsB.length === 1) ? [dimsB[0], 1] : dimsB;\r\n\r\n    return [a, b];\r\n  }\r\n\r\n  /**\r\n   * Fix the output shape computed for MatMul operation if it needs fixing\r\n   * @param outputShape The computed outputShape. Should be an array (atleast of length 2) of positive integers.\r\n   * This will be mutated.\r\n   * @param aRank The rank of tensor A.\r\n   * @param bRank The rank of tensor B.\r\n   */\r\n  static postprocessOutputShape(outputShape: number[], aRank: number, bRank: number) {\r\n    // Remove prepended dimension if first input is 1d\r\n    if (aRank === 1) {\r\n      // outputShape = outputShape.slice(0, outputShape.length - 2).concat(outputShape.slice(outputShape.length - 1));\r\n      outputShape.splice(outputShape.length - 2, 1);\r\n    }\r\n    // Remove appended dimension if second input is 1d\r\n    if (bRank === 1) {\r\n      outputShape.pop();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate the expected shape when matrix multiplication\r\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\r\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\r\n   * @returns The expected shape of the result, or undefined if N/A\r\n   */\r\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\r\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\r\n  }\r\n}\r\n\r\nexport class BroadcastUtil {\r\n  /**\r\n   * Calculate the expected shape when broadcasting 2 tensors\r\n   * @param a The shape of tensor A. Should be an array of positive integers\r\n   * @param b The shape of tensor B. Should be an array of positive integers\r\n   * @param isMatMul Whether the operation is MatMul\r\n   * @returns The expected shape of the result, or undefined if N/A\r\n   */\r\n  static calcShape(adims: readonly number[], bdims: readonly number[], isMatMul = false): readonly number[]|undefined {\r\n    const arank = adims.length;\r\n    const brank = bdims.length;\r\n    if (arank === 0) {\r\n      return bdims;\r\n    }\r\n    if (brank === 0) {\r\n      return adims;\r\n    }\r\n    const crank = Math.max(adims.length, bdims.length);\r\n    const cdims = new Array<number>(crank);\r\n\r\n    // calculate the last 2 dimension if it is MatMul\r\n    if (isMatMul) {\r\n      if (arank < 2 || brank < 2) {\r\n        return undefined;\r\n      }\r\n      const cShapeMatMul =\r\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\r\n      if (cShapeMatMul === undefined) {\r\n        return undefined;\r\n      }\r\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\r\n    }\r\n\r\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\r\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\r\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\r\n\r\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\r\n        return undefined;\r\n      }\r\n      cdims[crank - i] = Math.max(aLen, bLen);\r\n    }\r\n\r\n    return cdims;\r\n  }\r\n\r\n  /**\r\n   * Given the indices of a broadcasted tensor, calculate the original indices\r\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\r\n   * @param originalShape The original shape of the tensor before broadcas\r\n   * @returns The calculated indices that maps to the original tensor.\r\n   */\r\n  static index(broadcastedIndices: readonly number[], originalShape: readonly number[]): number[] {\r\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same\r\n    // length as the broadcasted shape, and for each dimension the index should\r\n    // not be out of range.\r\n    const originalIndices = new Array(originalShape.length);\r\n    BroadcastUtil.fillIndex(broadcastedIndices, originalShape, originalIndices);\r\n    return originalIndices;\r\n  }\r\n\r\n  /**\r\n   * Given the indices of a broadcasted tensor, calculate the original indices\r\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\r\n   * @param originalShape The original shape of the tensor before broadcast\r\n   * @param originalIndices The mapping of broadcastedIndices to the originalIndices (output parameter - will be\r\n   *     mutated).\r\n   */\r\n  static fillIndex(broadcastedIndices: readonly number[], originalShape: readonly number[], originalIndices: number[]) {\r\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same length as the\r\n    // broadcasted shape, and for each dimension the index should not be out of range.\r\n    // NOTE 2: we assume the parameter originalIndices has the same length as the originalShape\r\n    const dimOffset = broadcastedIndices.length - originalShape.length;\r\n    for (let i = 0; i < originalShape.length; i++) {\r\n      originalIndices[i] = broadcastedIndices[dimOffset + i] % originalShape[i];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform the broadcasting operation on the specific operator\r\n   * @param a The input tensor A\r\n   * @param b The input tensor B\r\n   * @param op The operator lambda function\r\n   * @param inplace Whether to write the result back to A.\r\n   * @returns The result tensor, or undefined if input not broadcastable.\r\n   */\r\n  static calc(\r\n      a: Tensor, b: Tensor, op: (a: string|number, b: string|number) => (string | number), inplace: boolean,\r\n      resultType?: Tensor.DataType): Tensor|undefined {\r\n    const outputShape = BroadcastUtil.calcShape(a.dims, b.dims);\r\n\r\n    if (outputShape) {\r\n      if (inplace && !ShapeUtil.areEqual(outputShape, a.dims)) {\r\n        // B is not broadcastable to A, failed to calculate inplace.\r\n        return undefined;\r\n      }\r\n\r\n      const size = ShapeUtil.size(outputShape);\r\n      const c = inplace ? a : new Tensor(outputShape, resultType || a.type);\r\n\r\n      // both inputs are scalars\r\n      if (outputShape.length === 0) {\r\n        c.set([], op(a.get([]) as number, b.get([]) as number));\r\n      }\r\n\r\n      // atleast one input is a non-scalar\r\n      else {\r\n        const outputIndices = new Array<number>(outputShape.length);\r\n        const originalIndicesA = new Array(a.dims.length);\r\n        const originalIndicesB = new Array(b.dims.length);\r\n        let valA: string|number = 0;\r\n        let valB: string|number = 0;\r\n        let isAScalar = false;\r\n        let isBScalar = false;\r\n        if (a.dims.length === 0) {\r\n          valA = a.get([]) as number;\r\n          isAScalar = true;\r\n        }\r\n        if (b.dims.length === 0) {\r\n          valB = b.get([]) as number;\r\n          isBScalar = true;\r\n        }\r\n        let rest: number;\r\n        for (let i = 0; i < size; i++) {\r\n          // traversal indices\r\n          rest = i;\r\n          for (let j = outputShape.length - 1; j >= 0; j--) {\r\n            outputIndices[j] = rest % outputShape[j];\r\n            rest = Math.floor(rest / outputShape[j]);\r\n          }\r\n\r\n          if (!isAScalar) {\r\n            // map outputIndices (which is actually broadcasted) to the originalIndices\r\n            BroadcastUtil.fillIndex(outputIndices, a.dims, originalIndicesA);\r\n            valA = a.get(originalIndicesA) as number;\r\n          }\r\n          if (!isBScalar) {\r\n            BroadcastUtil.fillIndex(outputIndices, b.dims, originalIndicesB);\r\n            valB = b.get(originalIndicesB) as number;\r\n          }\r\n\r\n          c.set(outputIndices, op(valA, valB));\r\n        }\r\n      }\r\n\r\n      return c;\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Determine if a shape is unidirectional broadcastable to another shape\r\n   * @param shape The input shape\r\n   * @param finalShape The desired shape after broadcasting\r\n   */\r\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\r\n    // align shape to the right\r\n    const inputRank = shape.length;\r\n    const finalRank = finalShape.length;\r\n    if (inputRank > finalRank) {\r\n      return false;\r\n    }\r\n    for (let i = 1; i <= inputRank; i++) {\r\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Determine the broadcasted dims in input shape based on the given output shape.\r\n   * Note that this function only returns the broadcasted dims.\r\n   * @param inputShape The input shape\r\n   * @param outputShape The output shape\r\n   * @returns The broadcasted dims in input shape.\r\n   */\r\n  static getBroadcastDims(inputShape: readonly number[], outputShape: readonly number[]): number[] {\r\n    const inRank = inputShape.length;\r\n    const dims: number[] = [];\r\n    for (let i = 0; i < inRank; i++) {\r\n      const dim = inRank - 1 - i;\r\n      const a = inputShape[dim] || 1;\r\n      const b = outputShape[outputShape.length - 1 - i] || 1;\r\n      if (b > 1 && a === 1) {\r\n        dims.unshift(dim);\r\n      }\r\n    }\r\n    return dims;\r\n  }\r\n}\r\n\r\n// copy array helper\r\n// mimics memcpy as much as possible\r\nexport function arrayCopyHelper(\r\n    target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\r\n    blockSize: number) {\r\n  if (sourceIndex < 0 || sourceIndex >= source.length) {\r\n    throw new Error('sourceIndex out of bounds');\r\n  }\r\n  if (targetIndex < 0 || targetIndex >= target.length) {\r\n    throw new Error('targetIndex out of bounds');\r\n  }\r\n  if (sourceIndex + blockSize > source.length) {\r\n    throw new Error('source indices to be copied are outside bounds');\r\n  }\r\n  if (targetIndex + blockSize > target.length) {\r\n    throw new Error('target array is too small to hold result');\r\n  }\r\n\r\n  for (let offset = 0; offset < blockSize; offset++) {\r\n    target[targetIndex + offset] = source[sourceIndex + offset];\r\n  }\r\n}\r\n\r\nexport class GemmUtil {\r\n  // will make sure input shapes are compatible for this op\r\n  // and return back the shape of the output in the form of a tuple\r\n  // will throw exception if the input shapes are not compatible\r\n  static getShapeOfGemmResult(\r\n      leftShape: readonly number[], transLeft: boolean, rightShape: readonly number[], transRight: boolean,\r\n      biasShape?: readonly number[]): readonly number[] {\r\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\r\n      throw new Error('shape need to be of size 2');\r\n    }\r\n\r\n    let M: number;\r\n    let K: number;\r\n    let N: number;\r\n\r\n    if (transLeft) {\r\n      M = leftShape[1];\r\n      K = leftShape[0];\r\n    } else {\r\n      M = leftShape[0];\r\n      K = leftShape[1];\r\n    }\r\n\r\n    let kDim = -1;\r\n\r\n    if (transRight) {\r\n      N = rightShape[0];\r\n      kDim = 1;\r\n    } else {\r\n      N = rightShape[1];\r\n      kDim = 0;\r\n    }\r\n\r\n    if (rightShape[kDim] !== K) {\r\n      throw new Error('dimension mismatch');\r\n    }\r\n\r\n    if (M <= 0 || N <= 0 || K <= 0) {\r\n      throw new Error('invalid shape specified');\r\n    }\r\n\r\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\r\n      throw new Error('gemm: invalid bias shape for broadcast');\r\n    }\r\n\r\n    return [M, N, K];\r\n  }\r\n}\r\n\r\nexport class ProtoUtil {\r\n  static tensorDataTypeFromProto(typeProto: onnx.TensorProto.DataType|\r\n                                 onnxruntime.experimental.fbs.TensorDataType): Tensor.DataType {\r\n    switch (typeProto) {\r\n      case onnx.TensorProto.DataType.INT8:\r\n        return 'int8';\r\n      case onnx.TensorProto.DataType.UINT8:\r\n        return 'uint8';\r\n      case onnx.TensorProto.DataType.BOOL:\r\n        return 'bool';\r\n      case onnx.TensorProto.DataType.INT16:\r\n        return 'int16';\r\n      case onnx.TensorProto.DataType.UINT16:\r\n        return 'uint16';\r\n      case onnx.TensorProto.DataType.INT32:\r\n        return 'int32';\r\n      case onnx.TensorProto.DataType.UINT32:\r\n        return 'uint32';\r\n      case onnx.TensorProto.DataType.FLOAT:\r\n        return 'float32';\r\n      case onnx.TensorProto.DataType.DOUBLE:\r\n        return 'float64';\r\n      case onnx.TensorProto.DataType.STRING:\r\n        return 'string';\r\n\r\n      // For INT64/UINT64, reduce their value to 32-bits.\r\n      // Should throw exception when overflow\r\n      case onnx.TensorProto.DataType.INT64:\r\n        return 'int32';\r\n      case onnx.TensorProto.DataType.UINT64:\r\n        return 'uint32';\r\n\r\n      default:\r\n        throw new Error(`unsupported data type: ${onnx.TensorProto.DataType[typeProto]}`);\r\n    }\r\n  }\r\n\r\n  static tensorDataTypeStringToEnum(type: string): onnx.TensorProto.DataType {\r\n    switch (type) {\r\n      case 'int8':\r\n        return onnx.TensorProto.DataType.INT8;\r\n      case 'uint8':\r\n        return onnx.TensorProto.DataType.UINT8;\r\n      case 'bool':\r\n        return onnx.TensorProto.DataType.BOOL;\r\n      case 'int16':\r\n        return onnx.TensorProto.DataType.INT16;\r\n      case 'uint16':\r\n        return onnx.TensorProto.DataType.UINT16;\r\n      case 'int32':\r\n        return onnx.TensorProto.DataType.INT32;\r\n      case 'uint32':\r\n        return onnx.TensorProto.DataType.UINT32;\r\n      case 'float32':\r\n        return onnx.TensorProto.DataType.FLOAT;\r\n      case 'float64':\r\n        return onnx.TensorProto.DataType.DOUBLE;\r\n      case 'string':\r\n        return onnx.TensorProto.DataType.STRING;\r\n      case 'int64':\r\n        return onnx.TensorProto.DataType.INT64;\r\n      case 'uint64':\r\n        return onnx.TensorProto.DataType.UINT64;\r\n\r\n      default:\r\n        throw new Error(`unsupported data type: ${type}`);\r\n    }\r\n  }\r\n\r\n  static tensorDimsFromProto(dims: Array<number|Long>): number[] {\r\n    // get rid of Long type for dims\r\n    return dims.map(d => Long.isLong(d) ? d.toNumber() : d);\r\n  }\r\n\r\n  static tensorValueTypeFromProto(valueType: onnx.TypeProto.ITensor): Graph.ValueType {\r\n    return {\r\n      tensorType: ProtoUtil.tensorDataTypeFromProto(valueType.elemType!),\r\n      shape: {dims: ProtoUtil.tensorDimsFromProto(valueType.shape!.dim!.map(d => d.dimValue!))}\r\n    };\r\n  }\r\n\r\n  static tensorDimsFromORTFormat(tensor: onnxruntime.experimental.fbs.Tensor) {\r\n    const dims = [];\r\n    for (let i = 0; i < tensor.dimsLength(); i++) {\r\n      dims.push(LongUtil.longToNumber(tensor.dims(i)!));\r\n    }\r\n    return dims;\r\n  }\r\n\r\n  static tensorAttributesFromORTFormat(node: onnxruntime.experimental.fbs.Node) {\r\n    const attributes = [];\r\n    for (let i = 0; i < node.attributesLength(); i++) {\r\n      attributes.push(node.attributes(i)!);\r\n    }\r\n    return attributes;\r\n  }\r\n}\r\n\r\nexport class LongUtil {\r\n  // This function is called to get a number from long type of data for attribute, dim, and ir version,\r\n  // which values are signed integers.\r\n  // To make it more generic, add an optional paramter to convert to a unsigned number.\r\n  static longToNumber(n: Long|flatbuffers.Long|number, unsigned?: boolean) {\r\n    if (Long.isLong(n)) {\r\n      return n.toNumber();\r\n    } else if (n instanceof flatbuffers.Long) {\r\n      return Long.fromValue({low: n.low, high: n.high, unsigned: unsigned ?? false}).toNumber();\r\n    }\r\n    return n;\r\n  }\r\n  static isLong(n: unknown) {\r\n    return Long.isLong(n) || n instanceof flatbuffers.Long;\r\n  }\r\n}\r\n\r\nexport class ShapeUtil {\r\n  static size(dims: readonly number[]): number {\r\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\r\n  }\r\n\r\n  // `axis` inclusive\r\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\r\n    if (axis < 0 || axis > dims.length) {\r\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\r\n    }\r\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\r\n  }\r\n\r\n  // `axis` exclusive\r\n  static sizeToDimension(dims: readonly number[], axis: number): number {\r\n    if (axis < 0 || axis > dims.length) {\r\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\r\n    }\r\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\r\n  }\r\n\r\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\r\n    let size = 1;\r\n    for (let i = start; i < end; i++) {\r\n      // safety check as this method is called by multiple other methods requiring size.\r\n      // size cannot be 0 or negative.\r\n      if (dims[i] <= 0) {\r\n        throw new Error(\r\n            // eslint-disable-next-line max-len\r\n            'cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.');\r\n      }\r\n      size *= dims[i];\r\n    }\r\n    return size;\r\n  }\r\n\r\n  static computeStrides(dims: readonly number[]): readonly number[] {\r\n    const rank = dims.length;\r\n    if (rank === 0) {\r\n      return [];\r\n    } else if (rank === 1) {\r\n      return [1];\r\n    }\r\n    const strides = new Array(rank);\r\n    strides[rank - 1] = 1;\r\n    strides[rank - 2] = dims[rank - 1];\r\n    for (let i = rank - 3; i >= 0; --i) {\r\n      strides[i] = strides[i + 1] * dims[i + 1];\r\n    }\r\n    return strides;\r\n  }\r\n\r\n  static transpose(dims: readonly number[]): readonly number[] {\r\n    const copy = dims.slice();\r\n    return copy.reverse();\r\n  }\r\n\r\n  static indicesToOffset(indices: readonly number[], strides: readonly number[], axis?: number): number {\r\n    if (axis === undefined) {\r\n      axis = indices.length;\r\n    }\r\n    let offset = 0;\r\n    for (let i = 0; i < axis; ++i) {\r\n      offset += strides[i] * indices[i];\r\n    }\r\n    return offset;\r\n  }\r\n\r\n  static offsetToIndices(offset: number, strides: readonly number[]): readonly number[] {\r\n    const rank = strides.length;\r\n    if (rank === 0) {\r\n      return [];\r\n    } else if (rank === 1) {\r\n      return [offset * strides[0]];\r\n    }\r\n    const indices: number[] = new Array(strides.length);\r\n    for (let i = 0; i < indices.length - 1; ++i) {\r\n      indices[i] = Math.floor(offset / strides[i]);\r\n      offset -= indices[i] * strides[i];\r\n    }\r\n    indices[indices.length - 1] = offset;\r\n    return indices;\r\n  }\r\n\r\n  /**\r\n   * normailze axis of range [-r, r) into [0, r).\r\n   */\r\n  static normalizeAxis(axis: number, tensorRank: number): number {\r\n    if (axis < -tensorRank && axis >= tensorRank) {\r\n      throw new Error('unsupported axis for this operation.');\r\n    }\r\n    return axis < 0 ? axis + tensorRank : axis;\r\n  }\r\n\r\n  static normalizeAxes(axes: readonly number[], tensorRank: number): number[] {\r\n    return axes.map(x => this.normalizeAxis(x, tensorRank));\r\n  }\r\n\r\n  // Increment an index into a tensor (in lexicographic\r\n  // ordering), wrapping around the specified upper_bound.\r\n  /**\r\n   * Increment an index into a tensor (in lexicographic ordering), wrapping around the specified upper_bound.\r\n   * @param index Given index to increment (Will be mutated)\r\n   * @param dims The dimensions of the tensor for which the given index corresponds to\r\n   * @param axisToIncrementOn The 1-indexed axis to increment on. If undefined, axisToIncrementOn == rank\r\n   */\r\n  static incrementIndex(index: number[], dims: readonly number[], axisToIncrementOn?: number) {\r\n    if (dims.length === 0 || index.length === 0) {\r\n      throw new Error('Index incrementing unsupported for scalar Tensor');\r\n    }\r\n    if (axisToIncrementOn === undefined) {\r\n      axisToIncrementOn = dims.length;\r\n    } else {\r\n      if (axisToIncrementOn <= 0 || axisToIncrementOn > dims.length) {\r\n        throw new Error('Incorrect axis to increment on');\r\n      }\r\n    }\r\n\r\n    for (let k = axisToIncrementOn - 1; k >= 0; --k) {\r\n      index[k]++;\r\n      if (index[k] < dims[k]) {\r\n        break;\r\n      }\r\n      index[k] = 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Produces a new dimensions array based on the values in the 'originalDimensions' and 'shape' array\r\n   * Used in Reshape\r\n   * @param originalDims Original Shape array\r\n   * @param shapeHints array containing values to compute the new dimensions\r\n   * For example:\r\n   * originalDims = [2,2] and shapeHints = [0,-1] will return [2,2]\r\n   * originalDims = [2,2] and shapeHints = [4] will return [4]\r\n   * originalDims = [2,2] and shapeHints = [5] will throw an exception\r\n   * https://github.com/onnx/onnx/blob/main/docs/Operators.md#Reshape\r\n   */\r\n\r\n  static calculateReshapedDims(originalDims: readonly number[], shapeHints: ArrayLike<number>): number[] {\r\n    // reshape to a Scalar Tensor\r\n    if (shapeHints.length === 0) {\r\n      if (originalDims.length === 0 || ShapeUtil.size(originalDims) === 1) {\r\n        return [];\r\n      } else {\r\n        throw new Error('cannot reshape to a scalar Tensor');\r\n      }\r\n    }\r\n\r\n    const nDims = shapeHints.length;\r\n    const reshapedDims = new Array<number>(nDims);\r\n    let unknownDimension = -1;\r\n    let newTensorSize = 1;\r\n    for (let i = 0; i < nDims; i++) {\r\n      if (shapeHints[i] < -1) {\r\n        throw new Error('a dimension in shape hints cannot be less than -1');\r\n      }\r\n      if (shapeHints[i] === -1) {\r\n        if (unknownDimension !== -1) {\r\n          throw new Error('at most one dimension in shape hints can be -1');\r\n        }\r\n        unknownDimension = i;\r\n      } else {\r\n        if (shapeHints[i] === 0) {\r\n          if (i >= originalDims.length) {\r\n            throw new Error('the dimension with value zero exceeds the dimension size of the input tensor');\r\n          }\r\n          reshapedDims[i] = originalDims[i];\r\n        } else {\r\n          reshapedDims[i] = shapeHints[i];\r\n        }\r\n        newTensorSize *= reshapedDims[i];\r\n      }\r\n    }\r\n\r\n    const oldTensorSize = ShapeUtil.size(originalDims);\r\n    if (unknownDimension !== -1) {\r\n      if (oldTensorSize % newTensorSize !== 0) {\r\n        throw new Error(`the input tensor cannot be reshaped to the requested shape. Input shape: [${\r\n            originalDims}] Output shape: [${shapeHints}]`);\r\n      }\r\n      reshapedDims[unknownDimension] = oldTensorSize / newTensorSize;\r\n    }\r\n    // validate sizes from originalDims and reshapedDims match\r\n    else {\r\n      if (newTensorSize !== oldTensorSize) {\r\n        throw new Error('reshapedDims and originalDims don\\'t have matching sizes');\r\n      }\r\n    }\r\n    return reshapedDims;\r\n  }\r\n\r\n  /**\r\n   * Sorts a given array based on the indices in the Perm array\r\n   * Used in Transpose\r\n   * @param a Array to be sorted such as dims or strides\r\n   * @param perm Perm given; if null a will be reversed\r\n   */\r\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\r\n    if (perm) {\r\n      return perm.map((v) => a[v]);\r\n    } else {\r\n      return a.slice().reverse();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Pads a given shape according to the padding values\r\n   * @param dims shape of the Tensor to be padded\r\n   * @param pad pad values\r\n   */\r\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\r\n    const rank = dims.length;\r\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\r\n  }\r\n\r\n  /**\r\n   * Determines if the two shapes are identical\r\n   * @param shape1\r\n   * @param shape2\r\n   */\r\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\r\n    if (shape1.length !== shape2.length) {\r\n      return false;\r\n    }\r\n    return shape1.every((v, i) => v === shape2[i]);\r\n  }\r\n\r\n  /**\r\n   * Validates if the given `dims` or `shape` is valid in ONNX.js context and returns data size\r\n   * @param dims - input `dims` that needs to be checked\r\n   */\r\n  static validateDimsAndCalcSize(dims: readonly number[]): number {\r\n    if (dims.length > 6) {\r\n      throw new TypeError('Only rank 0 to 6 is supported for tensor shape.');\r\n    }\r\n    let size = 1;\r\n    for (const n of dims) {\r\n      if (!Number.isInteger(n)) {\r\n        throw new TypeError(`Invalid shape: ${n} is not an integer`);\r\n      }\r\n      if (n < 0 || n > 2147483647) {\r\n        throw new TypeError(`Invalid shape: length ${n} is not allowed`);\r\n      }\r\n      size *= n;\r\n    }\r\n    return size;\r\n  }\r\n\r\n  /**\r\n   * Determines the shape of output tensor y = flatten(x, axis)\r\n   * @param dims - shape of input tensor\r\n   * @param axis - flatten axis, in the range [-r, r]\r\n   */\r\n  static flattenShape(dims: readonly number[], axis: number): readonly number[] {\r\n    if (axis < 0) {\r\n      axis += dims.length;\r\n    }\r\n    const total = dims.reduce((x, y) => x * y, 1);\r\n    const right = dims.slice(axis).reduce((x, y) => x * y, 1);\r\n    const outputDims = [total / right, right];\r\n\r\n    return outputDims;\r\n  }\r\n\r\n  /**\r\n   * Determines the shape of output tensor y = squeeze(x, axes)\r\n   * @param dims - shape of input tensor\r\n   * @param axes - squeeze axes\r\n   */\r\n  static squeezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\r\n    const outputDims = new Array<number>();\r\n\r\n    // sanity check\r\n    axes = ShapeUtil.normalizeAxes(axes, dims.length);\r\n\r\n    for (let i = 0; i < dims.length; i++) {\r\n      const inSqueezeList = axes.indexOf(i) >= 0;\r\n      if (inSqueezeList && dims[i] !== 1) {\r\n        throw new Error('squeeze an axis of size different than 1');\r\n      }\r\n\r\n      if ((axes.length === 0 && dims[i] > 1) || (axes.length > 0 && !inSqueezeList)) {\r\n        outputDims.push(dims[i]);\r\n      }\r\n    }\r\n\r\n    return outputDims;\r\n  }\r\n\r\n  /**\r\n   * Determines the shape of output tensor y = unsqueeze(x, axes)\r\n   * @param dims - shape of input tensor\r\n   * @param axes - unsqueeze axes\r\n   */\r\n  static unsqueezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\r\n    const outputDims = new Array<number>(dims.length + axes.length);\r\n\r\n    // initialize the array elements to 0\r\n    outputDims.fill(0);\r\n\r\n    // set all axes indices to 1 in outputDims and check for duplicates\r\n    for (let i = 0; i < axes.length; i++) {\r\n      const axis = ShapeUtil.normalizeAxis(axes[i], outputDims.length);\r\n      if (axis >= outputDims.length) {\r\n        throw new Error('\\'axes\\' has an out of range axis');\r\n      }\r\n      if (outputDims[axis] !== 0) {\r\n        throw new Error('\\'axes\\' has a duplicate axis');\r\n      }\r\n\r\n      outputDims[axis] = 1;\r\n    }\r\n\r\n    // fill in the zero entries of outputDims with the input tensor's shape\r\n    let inputDimsIterator = 0;\r\n    for (let i = 0; i < outputDims.length; i++) {\r\n      if (outputDims[i] === 0) {\r\n        outputDims[i] = dims[inputDimsIterator++];\r\n      }\r\n    }\r\n\r\n    // sanity check assertion. 'inputDimsIterator'\r\n    // should be equal to the length of 'dims'\r\n    if (inputDimsIterator !== dims.length) {\r\n      throw new Error('the unsqueezed dimension could not be established');\r\n    }\r\n\r\n    return outputDims;\r\n  }\r\n}\r\n\r\n// bunch of helper methods that do a variety of math operations\r\nexport class MathUtil {\r\n  // y = (x*x) + y\r\n  static sqr(\r\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\r\n      blockSize: number) {\r\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\r\n      throw new Error('sourceIndex out of bounds');\r\n    }\r\n    if (targetIndex < 0 || targetIndex >= target.length) {\r\n      throw new Error('targetIndex out of bounds');\r\n    }\r\n    if (sourceIndex + blockSize > source.length) {\r\n      throw new Error('source indices to be copied are outside bounds');\r\n    }\r\n    if (targetIndex + blockSize > target.length) {\r\n      throw new Error('target array is too small to hold result');\r\n    }\r\n\r\n    for (let offset = 0; offset < blockSize; offset++) {\r\n      target[targetIndex + offset] += Math.pow(source[sourceIndex + offset], 2);\r\n    }\r\n  }\r\n\r\n  // y = ax + y\r\n  static axpy(\r\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\r\n      blockSize: number, alpha: number) {\r\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\r\n      throw new Error('sourceIndex out of bounds');\r\n    }\r\n    if (targetIndex < 0 || targetIndex >= target.length) {\r\n      throw new Error('targetIndex out of bounds');\r\n    }\r\n    if (sourceIndex + blockSize > source.length) {\r\n      throw new Error('source indices to be copied are outside bounds');\r\n    }\r\n    if (targetIndex + blockSize > target.length) {\r\n      throw new Error('target array is too small to hold result');\r\n    }\r\n\r\n    for (let offset = 0; offset < blockSize; offset++) {\r\n      target[targetIndex + offset] += (alpha * source[sourceIndex + offset]);\r\n    }\r\n  }\r\n\r\n  // y = pow(x, b)\r\n  static powx(\r\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\r\n      blockSize: number, b: number) {\r\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\r\n      throw new Error('sourceIndex out of bounds');\r\n    }\r\n    if (targetIndex < 0 || targetIndex >= target.length) {\r\n      throw new Error('targetIndex out of bounds');\r\n    }\r\n    if (sourceIndex + blockSize > source.length) {\r\n      throw new Error('source indices to be copied are outside bounds');\r\n    }\r\n    if (targetIndex + blockSize > target.length) {\r\n      throw new Error('target array is too small to hold result');\r\n    }\r\n\r\n    for (let offset = 0; offset < blockSize; offset++) {\r\n      target[targetIndex + offset] = Math.pow(source[sourceIndex + offset], b);\r\n    }\r\n  }\r\n\r\n  // y = x * y\r\n  static mul(\r\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\r\n      blockSize: number) {\r\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\r\n      throw new Error('sourceIndex out of bounds');\r\n    }\r\n    if (targetIndex < 0 || targetIndex >= target.length) {\r\n      throw new Error('targetIndex out of bounds');\r\n    }\r\n    if (sourceIndex + blockSize > source.length) {\r\n      throw new Error('source indices to be copied are outside bounds');\r\n    }\r\n    if (targetIndex + blockSize > target.length) {\r\n      throw new Error('target array is too small to hold result');\r\n    }\r\n\r\n    for (let offset = 0; offset < blockSize; offset++) {\r\n      target[targetIndex + offset] = (source[sourceIndex + offset] * target[targetIndex + offset]);\r\n    }\r\n  }\r\n}\r\n\r\nexport class SplitUtil {\r\n  /**\r\n   * Calculates new Shapes from existing one and the splits given along the axis provides\r\n   * @param dims Shape of the Tensor to be splitted into two or more Shapes\r\n   * @param axis The dimension along which the Tensor will be split\r\n   * @param splits Offsets for the start of each split\r\n   */\r\n  static splitShape(dims: readonly number[], axis: number, split: number[], numOutputs?: number):\r\n      [number[][], number[]] {\r\n    if (split.length === 0) {\r\n      if (!numOutputs) {\r\n        throw new Error('need to know number of outputs when the \\'split\\' attribute is not specified');\r\n      }\r\n      SplitUtil.determineSplit(dims[axis], numOutputs, split);\r\n    }\r\n\r\n    const shapes: number[][] = [];\r\n    const offsets = [0];\r\n    for (let i = 0; i < split.length; ++i) {\r\n      if (i !== 0) {\r\n        offsets.push(offsets[i - 1] + split[i - 1]);\r\n      }\r\n      const shape = dims.slice();\r\n      shape[axis] = split[i];\r\n      shapes.push(shape);\r\n    }\r\n    return [shapes, offsets];\r\n  }\r\n\r\n  static determineSplit(numElementsAlongAxis: number, numOutputs: number, split: number[]) {\r\n    // If 'split' is not specified by the user, we need to partition the number of elements equally among the outputs\r\n    if (numElementsAlongAxis % numOutputs !== 0) {\r\n      throw new Error('cannot split tensor to equal sized parts');\r\n    }\r\n    for (let i = 0; i < numOutputs; ++i) {\r\n      split.push(numElementsAlongAxis / numOutputs);\r\n    }\r\n  }\r\n}\r\n\r\nexport class ReduceUtil {\r\n  /**\r\n   * Perform reduce operations on the specific operator\r\n   * @param a Input tensor data\r\n   * @param axes The dimensions along which the Tensor will be reduced\r\n   * @param keepdims If set to true, the axes which are reduced are left in the\r\n   *    result as dimensions with size one.\r\n   * @param op1 The operation to be performed on each element in the tensor\r\n   * @param op2 The operation to be performed between elements in the tensor\r\n   */\r\n  static calcReduce(\r\n      a: Tensor, axes: number[], keepdims: boolean, op1: (b: number) => number,\r\n      op2: (a: number, b: number) => number): Tensor {\r\n    const dims = a.dims.slice(0);\r\n    // if axes is not set, perform reduce on all axes\r\n    if (axes.length === 0) {\r\n      dims.forEach((d, ind) => axes.push(ind));\r\n    }\r\n    // get a temporary broadcastable output shape\r\n    const outputDims = ReduceUtil.calcReduceShape(dims, axes, true);\r\n\r\n    // loop through the output and calculate result one by one\r\n    const size = ShapeUtil.size(outputDims);\r\n    const y = new Tensor(outputDims, a.type);\r\n    const strides = ShapeUtil.computeStrides(outputDims);\r\n    const inputStrides = ShapeUtil.computeStrides(dims);\r\n    const indicesY = new Array(dims.length);\r\n    for (let i = 0; i < size; i++) {\r\n      const indices = ShapeUtil.offsetToIndices(i, strides);\r\n      // map index\r\n      BroadcastUtil.fillIndex(indices, dims, indicesY);\r\n      y.set(\r\n          indices,\r\n          ReduceUtil.calcReduceByAxis(\r\n              a.numberData, axes, dims, 0, ShapeUtil.indicesToOffset(indicesY, inputStrides), op1, op2));\r\n    }\r\n\r\n    if (keepdims) {\r\n      return y;\r\n    } else {\r\n      // keepdims == 0, calculate the expected shape\r\n      return new Tensor(\r\n          ReduceUtil.calcReduceShape(dims, axes, keepdims), y.type, undefined, undefined, y.data, y.dataId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform reduce operations on the specific operator on specific axes\r\n   * @param a Input tensor data\r\n   * @param axes The dimensions along which the Tensor will be reduced\r\n   * @param dims The input dimension.\r\n   * @param curAxisInd Index in axes specifying the current dimension along\r\n   *      which the tensor will be reduced\r\n   * @param pos The current index of element to perform operation\r\n   * @param op1 The operation to be performed on each element in the tensor\r\n   * @param op2 The operation to be performed between elements in the tensor\r\n   */\r\n  static calcReduceByAxis(\r\n      input: Tensor.NumberType, axes: number[], dims: number[], curAxisInd: number, pos: number,\r\n      op1: (b: number) => number, op2: (a: number, b: number) => number): number {\r\n    let res = 0;\r\n    if (curAxisInd >= axes.length) {\r\n      return op1(input[pos]);\r\n    }\r\n    const axis = axes[curAxisInd];\r\n    const step = axis >= dims.length ? 1 : ShapeUtil.size(dims.slice(axis + 1));\r\n    for (let i = 0; i < dims[axis]; i++) {\r\n      res = i === 0 ? ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2) :\r\n                      op2(res, ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2));\r\n      pos += step;\r\n    }\r\n    return res;\r\n  }\r\n\r\n  /**\r\n   * Calculate the expected shape of a reduce operation\r\n   * @param dims The input tensor dimension\r\n   * @param axes The dimensions along which the Tensor will be reduced\r\n   * @param keepdims If set to true, the axes which are reduced are left in the\r\n   *    result as dimensions with size one.\r\n   */\r\n  static calcReduceShape(dims: readonly number[], axes: readonly number[], keepDims: boolean): number[] {\r\n    const outputDims = dims.slice();\r\n    for (let i = 0; i < axes.length; i++) {\r\n      if (keepDims) {\r\n        outputDims[axes[i]] = 1;\r\n      } else {\r\n        outputDims[axes[i]] = 0;\r\n      }\r\n    }\r\n    return outputDims.filter(dim => dim !== 0);\r\n  }\r\n}\r\n\r\nexport class PoolConvUtil {\r\n  /**\r\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\r\n   * @param isGlobalOperator If true, perform global pooling.\r\n   * @param inputDims The input tensor dimension.\r\n   * @param kernelShape The size of the kernel along each axis.\r\n   * @param strides Stride along each axis.\r\n   * @param dilations Dilation along each axis.\r\n   * @param pads Padding for the beginning and ending along each axis.\r\n   */\r\n  static adjustPoolAttributes(\r\n      isGlobalOperator: boolean, inputDims: readonly number[], kernelShape: number[], strides: number[],\r\n      dilations: number[], pads: number[]) {\r\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\r\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\r\n    }\r\n\r\n    if (isGlobalOperator) {\r\n      // adjust kernel shape to cover the input dims\r\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\r\n        if (dim >= kernelShape.length) {\r\n          kernelShape.push(inputDims[dim + 2]);\r\n        } else {\r\n          kernelShape[dim] = inputDims[dim + 2];\r\n        }\r\n      }\r\n    }\r\n\r\n    // adjust strides length to match kernel shape length\r\n    for (let dim = 0; dim < kernelShape.length; dim++) {\r\n      if (dim < strides.length) {\r\n        if (strides[dim] < 0) {\r\n          throw new Error('strides should be greater than or equal to 1');\r\n        }\r\n      } else {\r\n        strides.push(1);\r\n      }\r\n    }\r\n\r\n    // adjust dilation value\r\n    for (let dim = 0; dim < kernelShape.length; dim++) {\r\n      if (dim < dilations.length) {\r\n        if (dilations[dim] < 0) {\r\n          throw new Error('dilations should be greater than or equal to 1');\r\n        }\r\n      } else {\r\n        dilations.push(1);\r\n      }\r\n    }\r\n\r\n    // adjust pads length to match 2 * kernel shape length\r\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\r\n      if (dim < pads.length) {\r\n        if (pads[dim] < 0) {\r\n          throw new Error('pad should be greater than or equal to 1');\r\n        }\r\n      } else {\r\n        pads.push(0);\r\n      }\r\n    }\r\n\r\n    // sanity checks for values in kernel shapes and pads\r\n    for (let dim = 0; dim < kernelShape.length; dim++) {\r\n      if (kernelShape[dim] <= 0) {\r\n        throw new Error('kernel shapes need to be greater than 0');\r\n      }\r\n\r\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\r\n        throw new Error('pads should be smaller than kernel');\r\n      }\r\n    }\r\n  }\r\n\r\n  // adjust pad values based on 'autoPad' attribute\r\n  static adjustPadsBasedOnAutoPad(\r\n      inputDims: readonly number[], strides: readonly number[], dilations: readonly number[],\r\n      kernelShape: readonly number[], pads: number[], autoPad?: string) {\r\n    if (!autoPad) {\r\n      return;\r\n    }\r\n\r\n    if (pads.length !== 2 * (inputDims.length - 2)) {\r\n      throw new Error('length of pads should be twice the length of data dimensions');\r\n    }\r\n\r\n    if (strides.length !== (inputDims.length - 2)) {\r\n      throw new Error('length of strides should be the length of data dimensions');\r\n    }\r\n\r\n    if (kernelShape.length !== (inputDims.length - 2)) {\r\n      throw new Error('length of kernel shapes should be the length of data dimensions');\r\n    }\r\n\r\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\r\n      PoolConvUtil.adjustPadAndReturnShape(\r\n          inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\r\n          autoPad);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\r\n   * @param isGlobalOperator If true, perform global pooling.\r\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\r\n   * @param strides Stride along each axis.\r\n   * @param dilations Dilation along each axis.\r\n   * @param kernelShape The size of the kernel along each axis.\r\n   * @param pads Padding for the beginning and ending along each axis.\r\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\r\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\r\n   */\r\n  static computePoolOutputShape(\r\n      isGlobalOperator: boolean, inputDims: readonly number[], strides: number[], dilations: number[],\r\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\r\n    if (inputDims.length <= 0) {\r\n      throw new Error('input shape must be of size greater than 0');\r\n    }\r\n\r\n    // Add batch size and number of channels of output\r\n    const outputDims = [inputDims[0], inputDims[1]];\r\n\r\n    PoolConvUtil.computeShapeHelper(\r\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\r\n    return outputDims;\r\n  }\r\n\r\n  /**\r\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\r\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\r\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\r\n   * @param strides Stride along each axis.\r\n   * @param kernelShape The size of the kernel along each axis.\r\n   * @param pads Padding for the beginning and ending along each axis.\r\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\r\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\r\n   */\r\n  static computeConvOutputShape(\r\n      inputDims: readonly number[], filterDims: readonly number[], strides: number[], dilations: number[],\r\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\r\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\r\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\r\n    }\r\n\r\n    // Add batch size and number of channels of output\r\n    const outputDims = [inputDims[0], filterDims[0]];\r\n\r\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\r\n    return outputDims;\r\n  }\r\n\r\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\r\n  // called by computePoolOutputShape() and computeConvOutputShape()\r\n  // adjust pads based on 'autoPad' attribute prior to shape computation\r\n  private static computeShapeHelper(\r\n      isGlobalOperator: boolean, inputDims: readonly number[], outputDims: number[], strides: readonly number[],\r\n      dilations: readonly number[], kernelShape: readonly number[], pads: number[], autoPad?: string) {\r\n    if (isGlobalOperator) {\r\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\r\n        outputDims.push(1);\r\n      }\r\n    } else {\r\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\r\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\r\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\r\n            autoPad));\r\n      }\r\n    }\r\n  }\r\n\r\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\r\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\r\n  private static adjustPadAndReturnShape(\r\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\r\n      padTailIndex: number, autoPad?: string): number {\r\n    const dkernel = dilation * (kernel - 1) + 1;\r\n    if (autoPad && autoPad !== 'NOTSET') {\r\n      switch (autoPad) {\r\n        case 'VALID':\r\n          pads[padHeadIndex] = 0;\r\n          pads[padTailIndex] = 0;\r\n          return Math.floor(((inSize - dkernel) / stride) + 1);\r\n        case 'SAME_LOWER':\r\n        case 'SAME_UPPER':\r\n          if (dilation !== 1) {\r\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\r\n          } else {\r\n            const legacyTargetSize = (inSize + stride - 1) / stride;\r\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\r\n            pads[padHeadIndex] =\r\n                (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\r\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\r\n            return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\r\n          }\r\n        default:\r\n          throw new Error('Unsupported AutoPad type');\r\n      }\r\n    } else {\r\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\r\n    }\r\n  }\r\n}\r\n\r\nexport const MIN_CLIP = -3.4028234663852886e+38;\r\nexport const MAX_CLIP = 3.4028234663852886e+38;\r\n\r\nexport function decodeUtf8String(buffer: Uint8Array): string {\r\n  return new TextDecoder().decode(buffer);\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n// This file is generated by /js/scripts/update-version.ts\r\n// Do not modify file content manually.\r\n\r\nexport const version = '1.16.0';\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Env, env, InferenceSession} from 'onnxruntime-common';\r\n\r\nimport {OrtWasmMessage, SerializableModeldata, SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\r\nimport * as core from './wasm-core-impl';\r\nimport {initializeWebAssembly} from './wasm-factory';\r\n\r\nconst isProxy = (): boolean => !!env.wasm.proxy && typeof document !== 'undefined';\r\nlet proxyWorker: Worker|undefined;\r\nlet initializing = false;\r\nlet initialized = false;\r\nlet aborted = false;\r\n\r\n// resolve; reject\r\ntype PromiseCallbacks<T = void> = [(result: T) => void, (reason: unknown) => void];\r\n\r\nlet initWasmCallbacks: PromiseCallbacks;\r\nlet initOrtCallbacks: PromiseCallbacks;\r\nconst createSessionAllocateCallbacks: Array<PromiseCallbacks<SerializableModeldata>> = [];\r\nconst createSessionFinalizeCallbacks: Array<PromiseCallbacks<SerializableSessionMetadata>> = [];\r\nconst createSessionCallbacks: Array<PromiseCallbacks<SerializableSessionMetadata>> = [];\r\nconst releaseSessionCallbacks: Array<PromiseCallbacks<void>> = [];\r\nconst runCallbacks: Array<PromiseCallbacks<SerializableTensor[]>> = [];\r\nconst endProfilingCallbacks: Array<PromiseCallbacks<void>> = [];\r\n\r\nconst ensureWorker = (): void => {\r\n  if (initializing || !initialized || aborted || !proxyWorker) {\r\n    throw new Error('worker not ready');\r\n  }\r\n};\r\n\r\nconst onProxyWorkerMessage = (ev: MessageEvent<OrtWasmMessage>): void => {\r\n  switch (ev.data.type) {\r\n    case 'init-wasm':\r\n      initializing = false;\r\n      if (ev.data.err) {\r\n        aborted = true;\r\n        initWasmCallbacks[1](ev.data.err);\r\n      } else {\r\n        initialized = true;\r\n        initWasmCallbacks[0]();\r\n      }\r\n      break;\r\n    case 'init-ort':\r\n      if (ev.data.err) {\r\n        initOrtCallbacks[1](ev.data.err);\r\n      } else {\r\n        initOrtCallbacks[0]();\r\n      }\r\n      break;\r\n    case 'create_allocate':\r\n      if (ev.data.err) {\r\n        createSessionAllocateCallbacks.shift()![1](ev.data.err);\r\n      } else {\r\n        createSessionAllocateCallbacks.shift()![0](ev.data.out!);\r\n      }\r\n      break;\r\n    case 'create_finalize':\r\n      if (ev.data.err) {\r\n        createSessionFinalizeCallbacks.shift()![1](ev.data.err);\r\n      } else {\r\n        createSessionFinalizeCallbacks.shift()![0](ev.data.out!);\r\n      }\r\n      break;\r\n    case 'create':\r\n      if (ev.data.err) {\r\n        createSessionCallbacks.shift()![1](ev.data.err);\r\n      } else {\r\n        createSessionCallbacks.shift()![0](ev.data.out!);\r\n      }\r\n      break;\r\n    case 'release':\r\n      if (ev.data.err) {\r\n        releaseSessionCallbacks.shift()![1](ev.data.err);\r\n      } else {\r\n        releaseSessionCallbacks.shift()![0]();\r\n      }\r\n      break;\r\n    case 'run':\r\n      if (ev.data.err) {\r\n        runCallbacks.shift()![1](ev.data.err);\r\n      } else {\r\n        runCallbacks.shift()![0](ev.data.out!);\r\n      }\r\n      break;\r\n    case 'end-profiling':\r\n      if (ev.data.err) {\r\n        endProfilingCallbacks.shift()![1](ev.data.err);\r\n      } else {\r\n        endProfilingCallbacks.shift()![0]();\r\n      }\r\n      break;\r\n    default:\r\n  }\r\n};\r\n\r\nconst scriptSrc = typeof document !== 'undefined' ? (document?.currentScript as HTMLScriptElement)?.src : undefined;\r\n\r\nexport const initializeWebAssemblyInstance = async(): Promise<void> => {\r\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\r\n    if (initialized) {\r\n      return;\r\n    }\r\n    if (initializing) {\r\n      throw new Error('multiple calls to \\'initWasm()\\' detected.');\r\n    }\r\n    if (aborted) {\r\n      throw new Error('previous call to \\'initWasm()\\' failed.');\r\n    }\r\n\r\n    initializing = true;\r\n\r\n    // overwrite wasm filepaths\r\n    if (env.wasm.wasmPaths === undefined) {\r\n      if (scriptSrc && scriptSrc.indexOf('blob:') !== 0) {\r\n        env.wasm.wasmPaths = scriptSrc.substr(0, +(scriptSrc).lastIndexOf('/') + 1);\r\n      }\r\n    }\r\n\r\n    return new Promise<void>((resolve, reject) => {\r\n      proxyWorker?.terminate();\r\n      // eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports\r\n      proxyWorker = require('worker-loader?inline=no-fallback!./proxy-worker/main').default() as Worker;\r\n      proxyWorker.onmessage = onProxyWorkerMessage;\r\n      initWasmCallbacks = [resolve, reject];\r\n      const message: OrtWasmMessage = {type: 'init-wasm', in : env.wasm};\r\n      proxyWorker.postMessage(message);\r\n    });\r\n\r\n  } else {\r\n    return initializeWebAssembly(env.wasm);\r\n  }\r\n};\r\n\r\nexport const initializeRuntime = async(env: Env): Promise<void> => {\r\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\r\n    ensureWorker();\r\n    return new Promise<void>((resolve, reject) => {\r\n      initOrtCallbacks = [resolve, reject];\r\n      const message: OrtWasmMessage = {type: 'init-ort', in : env};\r\n      proxyWorker!.postMessage(message);\r\n    });\r\n  } else {\r\n    await core.initRuntime(env);\r\n  }\r\n};\r\n\r\nexport const createSessionAllocate = async(model: Uint8Array): Promise<SerializableModeldata> => {\r\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\r\n    ensureWorker();\r\n    return new Promise<SerializableModeldata>((resolve, reject) => {\r\n      createSessionAllocateCallbacks.push([resolve, reject]);\r\n      const message: OrtWasmMessage = {type: 'create_allocate', in : {model}};\r\n      proxyWorker!.postMessage(message, [model.buffer]);\r\n    });\r\n  } else {\r\n    return core.createSessionAllocate(model);\r\n  }\r\n};\r\n\r\nexport const createSessionFinalize = async(modeldata: SerializableModeldata, options?: InferenceSession.SessionOptions):\r\n    Promise<SerializableSessionMetadata> => {\r\n      if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\r\n        ensureWorker();\r\n        return new Promise<SerializableSessionMetadata>((resolve, reject) => {\r\n          createSessionFinalizeCallbacks.push([resolve, reject]);\r\n          const message: OrtWasmMessage = {type: 'create_finalize', in : {modeldata, options}};\r\n          proxyWorker!.postMessage(message);\r\n        });\r\n      } else {\r\n        return core.createSessionFinalize(modeldata, options);\r\n      }\r\n    };\r\n\r\nexport const createSession =\r\n    async(model: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SerializableSessionMetadata> => {\r\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\r\n    ensureWorker();\r\n    return new Promise<SerializableSessionMetadata>((resolve, reject) => {\r\n      createSessionCallbacks.push([resolve, reject]);\r\n      const message: OrtWasmMessage = {type: 'create', in : {model, options}};\r\n      proxyWorker!.postMessage(message, [model.buffer]);\r\n    });\r\n  } else {\r\n    return core.createSession(model, options);\r\n  }\r\n};\r\n\r\nexport const releaseSession = async(sessionId: number): Promise<void> => {\r\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\r\n    ensureWorker();\r\n    return new Promise<void>((resolve, reject) => {\r\n      releaseSessionCallbacks.push([resolve, reject]);\r\n      const message: OrtWasmMessage = {type: 'release', in : sessionId};\r\n      proxyWorker!.postMessage(message);\r\n    });\r\n  } else {\r\n    core.releaseSession(sessionId);\r\n  }\r\n};\r\n\r\nexport const run = async(\r\n    sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\r\n    options: InferenceSession.RunOptions): Promise<SerializableTensor[]> => {\r\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\r\n    ensureWorker();\r\n    return new Promise<SerializableTensor[]>((resolve, reject) => {\r\n      runCallbacks.push([resolve, reject]);\r\n      const message: OrtWasmMessage = {type: 'run', in : {sessionId, inputIndices, inputs, outputIndices, options}};\r\n      proxyWorker!.postMessage(message, core.extractTransferableBuffers(inputs));\r\n    });\r\n  } else {\r\n    return core.run(sessionId, inputIndices, inputs, outputIndices, options);\r\n  }\r\n};\r\n\r\nexport const endProfiling = async(sessionId: number): Promise<void> => {\r\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\r\n    ensureWorker();\r\n    return new Promise<void>((resolve, reject) => {\r\n      endProfilingCallbacks.push([resolve, reject]);\r\n      const message: OrtWasmMessage = {type: 'end-profiling', in : sessionId};\r\n      proxyWorker!.postMessage(message);\r\n    });\r\n  } else {\r\n    core.endProfiling(sessionId);\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {InferenceSession} from 'onnxruntime-common';\r\n\r\nimport {getInstance} from './wasm-factory';\r\nimport {allocWasmString, checkLastError, iterateExtraOptions} from './wasm-utils';\r\n\r\nexport const setRunOptions = (options: InferenceSession.RunOptions): [number, number[]] => {\r\n  const wasm = getInstance();\r\n  let runOptionsHandle = 0;\r\n  const allocs: number[] = [];\r\n\r\n  const runOptions: InferenceSession.RunOptions = options || {};\r\n\r\n  try {\r\n    if (options?.logSeverityLevel === undefined) {\r\n      runOptions.logSeverityLevel = 2;  // Default to warning\r\n    } else if (\r\n        typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\r\n        options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\r\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\r\n    }\r\n\r\n    if (options?.logVerbosityLevel === undefined) {\r\n      runOptions.logVerbosityLevel = 0;  // Default to 0\r\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\r\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\r\n    }\r\n\r\n    if (options?.terminate === undefined) {\r\n      runOptions.terminate = false;\r\n    }\r\n\r\n    let tagDataOffset = 0;\r\n    if (options?.tag !== undefined) {\r\n      tagDataOffset = allocWasmString(options.tag, allocs);\r\n    }\r\n\r\n    runOptionsHandle = wasm._OrtCreateRunOptions(\r\n        runOptions.logSeverityLevel!, runOptions.logVerbosityLevel!, !!runOptions.terminate!, tagDataOffset);\r\n    if (runOptionsHandle === 0) {\r\n      checkLastError('Can\\'t create run options.');\r\n    }\r\n\r\n    if (options?.extra !== undefined) {\r\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\r\n        const keyDataOffset = allocWasmString(key, allocs);\r\n        const valueDataOffset = allocWasmString(value, allocs);\r\n\r\n        if (wasm._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\r\n          checkLastError(`Can't set a run config entry: ${key} - ${value}.`);\r\n        }\r\n      });\r\n    }\r\n\r\n    return [runOptionsHandle, allocs];\r\n  } catch (e) {\r\n    if (runOptionsHandle !== 0) {\r\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\r\n    }\r\n    allocs.forEach(alloc => wasm._free(alloc));\r\n    throw e;\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {readFile} from 'fs';\r\nimport {env, InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\r\nimport {promisify} from 'util';\r\n\r\nimport {SerializableModeldata} from './proxy-messages';\r\nimport {createSession, createSessionAllocate, createSessionFinalize, endProfiling, initializeRuntime, releaseSession, run} from './proxy-wrapper';\r\n\r\nlet runtimeInitialized: boolean;\r\n\r\nexport class OnnxruntimeWebAssemblySessionHandler implements SessionHandler {\r\n  private sessionId: number;\r\n\r\n  inputNames: string[];\r\n  outputNames: string[];\r\n\r\n  async createSessionAllocate(path: string): Promise<SerializableModeldata> {\r\n    // fetch model from url and move to wasm heap. The arraybufffer that held the http\r\n    // response is freed once we return\r\n    const response = await fetch(path);\r\n    if (response.status !== 200) {\r\n      throw new Error(`failed to load model: ${path}`);\r\n    }\r\n    const arrayBuffer = await response.arrayBuffer();\r\n    return createSessionAllocate(new Uint8Array(arrayBuffer));\r\n  }\r\n\r\n  async loadModel(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions): Promise<void> {\r\n    if (!runtimeInitialized) {\r\n      await initializeRuntime(env);\r\n      runtimeInitialized = true;\r\n    }\r\n\r\n    if (typeof pathOrBuffer === 'string') {\r\n      if (typeof process !== 'undefined' && process.versions && process.versions.node) {\r\n        // node\r\n        const model = await promisify(readFile)(pathOrBuffer);\r\n        [this.sessionId, this.inputNames, this.outputNames] = await createSession(model, options);\r\n      } else {\r\n        // browser\r\n        // fetch model and move to wasm heap.\r\n        const modelData: SerializableModeldata = await this.createSessionAllocate(pathOrBuffer);\r\n        // create the session\r\n        [this.sessionId, this.inputNames, this.outputNames] = await createSessionFinalize(modelData, options);\r\n      }\r\n    } else {\r\n      [this.sessionId, this.inputNames, this.outputNames] = await createSession(pathOrBuffer, options);\r\n    }\r\n  }\r\n\r\n  async dispose(): Promise<void> {\r\n    return releaseSession(this.sessionId);\r\n  }\r\n\r\n  async run(feeds: SessionHandler.FeedsType, fetches: SessionHandler.FetchesType, options: InferenceSession.RunOptions):\r\n      Promise<SessionHandler.ReturnType> {\r\n    const inputArray: Tensor[] = [];\r\n    const inputIndices: number[] = [];\r\n    Object.entries(feeds).forEach(kvp => {\r\n      const name = kvp[0];\r\n      const tensor = kvp[1];\r\n      const index = this.inputNames.indexOf(name);\r\n      if (index === -1) {\r\n        throw new Error(`invalid input '${name}'`);\r\n      }\r\n      inputArray.push(tensor);\r\n      inputIndices.push(index);\r\n    });\r\n\r\n    const outputIndices: number[] = [];\r\n    Object.entries(fetches).forEach(kvp => {\r\n      const name = kvp[0];\r\n      // TODO: support pre-allocated output\r\n      const index = this.outputNames.indexOf(name);\r\n      if (index === -1) {\r\n        throw new Error(`invalid output '${name}'`);\r\n      }\r\n      outputIndices.push(index);\r\n    });\r\n\r\n    const outputs =\r\n        await run(this.sessionId, inputIndices, inputArray.map(t => [t.type, t.dims, t.data]), outputIndices, options);\r\n\r\n    const result: SessionHandler.ReturnType = {};\r\n    for (let i = 0; i < outputs.length; i++) {\r\n      result[this.outputNames[outputIndices[i]]] = new Tensor(outputs[i][0], outputs[i][2], outputs[i][1]);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  startProfiling(): void {\r\n    // TODO: implement profiling\r\n  }\r\n\r\n  endProfiling(): void {\r\n    void endProfiling(this.sessionId);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {InferenceSession} from 'onnxruntime-common';\r\n\r\nimport {getInstance} from './wasm-factory';\r\nimport {allocWasmString, checkLastError, iterateExtraOptions} from './wasm-utils';\r\n\r\nconst getGraphOptimzationLevel = (graphOptimizationLevel: string|unknown): number => {\r\n  switch (graphOptimizationLevel) {\r\n    case 'disabled':\r\n      return 0;\r\n    case 'basic':\r\n      return 1;\r\n    case 'extended':\r\n      return 2;\r\n    case 'all':\r\n      return 99;\r\n    default:\r\n      throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);\r\n  }\r\n};\r\n\r\nconst getExecutionMode = (executionMode: 'sequential'|'parallel'): number => {\r\n  switch (executionMode) {\r\n    case 'sequential':\r\n      return 0;\r\n    case 'parallel':\r\n      return 1;\r\n    default:\r\n      throw new Error(`unsupported execution mode: ${executionMode}`);\r\n  }\r\n};\r\n\r\nconst appendDefaultOptions = (options: InferenceSession.SessionOptions): void => {\r\n  if (!options.extra) {\r\n    options.extra = {};\r\n  }\r\n  if (!options.extra.session) {\r\n    options.extra.session = {};\r\n  }\r\n  const session = options.extra.session as Record<string, string>;\r\n  if (!session.use_ort_model_bytes_directly) {\r\n    // eslint-disable-next-line camelcase\r\n    session.use_ort_model_bytes_directly = '1';\r\n  }\r\n\r\n  // if using JSEP with WebGPU, always disable memory pattern\r\n  if (options.executionProviders &&\r\n      options.executionProviders.some(ep => (typeof ep === 'string' ? ep : ep.name) === 'webgpu')) {\r\n    options.enableMemPattern = false;\r\n  }\r\n};\r\n\r\nconst setExecutionProviders =\r\n    (sessionOptionsHandle: number, executionProviders: readonly InferenceSession.ExecutionProviderConfig[],\r\n     allocs: number[]): void => {\r\n      for (const ep of executionProviders) {\r\n        let epName = typeof ep === 'string' ? ep : ep.name;\r\n\r\n        // check EP name\r\n        switch (epName) {\r\n          case 'xnnpack':\r\n            epName = 'XNNPACK';\r\n            break;\r\n          case 'webnn':\r\n            epName = 'WEBNN';\r\n            if (typeof ep !== 'string') {\r\n              const webnnOptions = ep as InferenceSession.WebNNExecutionProviderOption;\r\n              if (webnnOptions?.deviceType) {\r\n                const keyDataOffset = allocWasmString('deviceType', allocs);\r\n                const valueDataOffset = allocWasmString(webnnOptions.deviceType, allocs);\r\n                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !==\r\n                    0) {\r\n                  checkLastError(`Can't set a session config entry: 'deviceType' - ${webnnOptions.deviceType}.`);\r\n                }\r\n              }\r\n              if (webnnOptions?.powerPreference) {\r\n                const keyDataOffset = allocWasmString('powerPreference', allocs);\r\n                const valueDataOffset = allocWasmString(webnnOptions.powerPreference, allocs);\r\n                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !==\r\n                    0) {\r\n                  checkLastError(\r\n                      `Can't set a session config entry: 'powerPreference' - ${webnnOptions.powerPreference}.`);\r\n                }\r\n              }\r\n            }\r\n            break;\r\n          case 'webgpu':\r\n            epName = 'JS';\r\n            break;\r\n          case 'wasm':\r\n          case 'cpu':\r\n            continue;\r\n          default:\r\n            throw new Error(`not supported execution provider: ${epName}`);\r\n        }\r\n\r\n        const epNameDataOffset = allocWasmString(epName, allocs);\r\n        if (getInstance()._OrtAppendExecutionProvider(sessionOptionsHandle, epNameDataOffset) !== 0) {\r\n          checkLastError(`Can't append execution provider: ${epName}.`);\r\n        }\r\n      }\r\n    };\r\n\r\nexport const setSessionOptions = (options?: InferenceSession.SessionOptions): [number, number[]] => {\r\n  const wasm = getInstance();\r\n  let sessionOptionsHandle = 0;\r\n  const allocs: number[] = [];\r\n\r\n  const sessionOptions: InferenceSession.SessionOptions = options || {};\r\n  appendDefaultOptions(sessionOptions);\r\n\r\n  try {\r\n    const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel ?? 'all');\r\n    const executionMode = getExecutionMode(sessionOptions.executionMode ?? 'sequential');\r\n    const logIdDataOffset =\r\n        typeof sessionOptions.logId === 'string' ? allocWasmString(sessionOptions.logId, allocs) : 0;\r\n\r\n    const logSeverityLevel = sessionOptions.logSeverityLevel ?? 2;  // Default to 2 - warning\r\n    if (!Number.isInteger(logSeverityLevel) || logSeverityLevel < 0 || logSeverityLevel > 4) {\r\n      throw new Error(`log serverity level is not valid: ${logSeverityLevel}`);\r\n    }\r\n\r\n    const logVerbosityLevel = sessionOptions.logVerbosityLevel ?? 0;  // Default to 0 - verbose\r\n    if (!Number.isInteger(logVerbosityLevel) || logVerbosityLevel < 0 || logVerbosityLevel > 4) {\r\n      throw new Error(`log verbosity level is not valid: ${logVerbosityLevel}`);\r\n    }\r\n\r\n    const optimizedModelFilePathOffset = typeof sessionOptions.optimizedModelFilePath === 'string' ?\r\n        allocWasmString(sessionOptions.optimizedModelFilePath, allocs) :\r\n        0;\r\n\r\n    sessionOptionsHandle = wasm._OrtCreateSessionOptions(\r\n        graphOptimizationLevel, !!sessionOptions.enableCpuMemArena, !!sessionOptions.enableMemPattern, executionMode,\r\n        !!sessionOptions.enableProfiling, 0, logIdDataOffset, logSeverityLevel, logVerbosityLevel,\r\n        optimizedModelFilePathOffset);\r\n    if (sessionOptionsHandle === 0) {\r\n      checkLastError('Can\\'t create session options.');\r\n    }\r\n\r\n    if (sessionOptions.executionProviders) {\r\n      setExecutionProviders(sessionOptionsHandle, sessionOptions.executionProviders, allocs);\r\n    }\r\n\r\n    if (sessionOptions.extra !== undefined) {\r\n      iterateExtraOptions(sessionOptions.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\r\n        const keyDataOffset = allocWasmString(key, allocs);\r\n        const valueDataOffset = allocWasmString(value, allocs);\r\n\r\n        if (wasm._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\r\n          checkLastError(`Can't set a session config entry: ${key} - ${value}.`);\r\n        }\r\n      });\r\n    }\r\n\r\n    return [sessionOptionsHandle, allocs];\r\n  } catch (e) {\r\n    if (sessionOptionsHandle !== 0) {\r\n      wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\r\n    }\r\n    allocs.forEach(alloc => wasm._free(alloc));\r\n    throw e;\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from 'onnxruntime-common';\r\n\r\n// This file includes common definitions. They do NOT have dependency on the WebAssembly instance.\r\n\r\n/**\r\n * Copied from ONNX definition. Use this to drop dependency 'onnx_proto' to decrease compiled .js file size.\r\n */\r\nexport const enum DataType {\r\n  undefined = 0,\r\n  float = 1,\r\n  uint8 = 2,\r\n  int8 = 3,\r\n  uint16 = 4,\r\n  int16 = 5,\r\n  int32 = 6,\r\n  int64 = 7,\r\n  string = 8,\r\n  bool = 9,\r\n  float16 = 10,\r\n  double = 11,\r\n  uint32 = 12,\r\n  uint64 = 13,\r\n  complex64 = 14,\r\n  complex128 = 15,\r\n  bfloat16 = 16\r\n}\r\n\r\n/**\r\n * Map string tensor data to enum value\r\n */\r\nexport const tensorDataTypeStringToEnum = (type: string): DataType => {\r\n  switch (type) {\r\n    case 'int8':\r\n      return DataType.int8;\r\n    case 'uint8':\r\n      return DataType.uint8;\r\n    case 'bool':\r\n      return DataType.bool;\r\n    case 'int16':\r\n      return DataType.int16;\r\n    case 'uint16':\r\n      return DataType.uint16;\r\n    case 'int32':\r\n      return DataType.int32;\r\n    case 'uint32':\r\n      return DataType.uint32;\r\n    case 'float16':\r\n      return DataType.float16;\r\n    case 'float32':\r\n      return DataType.float;\r\n    case 'float64':\r\n      return DataType.double;\r\n    case 'string':\r\n      return DataType.string;\r\n    case 'int64':\r\n      return DataType.int64;\r\n    case 'uint64':\r\n      return DataType.uint64;\r\n\r\n    default:\r\n      throw new Error(`unsupported data type: ${type}`);\r\n  }\r\n};\r\n\r\n/**\r\n * Map enum value to string tensor data\r\n */\r\nexport const tensorDataTypeEnumToString = (typeProto: DataType): Tensor.Type => {\r\n  switch (typeProto) {\r\n    case DataType.int8:\r\n      return 'int8';\r\n    case DataType.uint8:\r\n      return 'uint8';\r\n    case DataType.bool:\r\n      return 'bool';\r\n    case DataType.int16:\r\n      return 'int16';\r\n    case DataType.uint16:\r\n      return 'uint16';\r\n    case DataType.int32:\r\n      return 'int32';\r\n    case DataType.uint32:\r\n      return 'uint32';\r\n    case DataType.float16:\r\n      return 'float16';\r\n    case DataType.float:\r\n      return 'float32';\r\n    case DataType.double:\r\n      return 'float64';\r\n    case DataType.string:\r\n      return 'string';\r\n    case DataType.int64:\r\n      return 'int64';\r\n    case DataType.uint64:\r\n      return 'uint64';\r\n\r\n    default:\r\n      throw new Error(`unsupported data type: ${typeProto}`);\r\n  }\r\n};\r\n\r\n/**\r\n * get tensor element size in bytes by the given data type\r\n * @returns size in integer or undefined if the data type is not supported\r\n */\r\nexport const getTensorElementSize = (dateType: number): number|\r\n    undefined => [undefined, 4, 1, 1, 2, 2, 4, 8, undefined, 1, 2, 8, 4, 8, undefined, undefined, undefined][dateType];\r\n\r\n/**\r\n * get typed array constructor by the given tensor type\r\n */\r\nexport const tensorTypeToTypedArrayConstructor = (type: Tensor.Type): Float32ArrayConstructor|Uint8ArrayConstructor|\r\n    Int8ArrayConstructor|Uint16ArrayConstructor|Int16ArrayConstructor|Int32ArrayConstructor|BigInt64ArrayConstructor|\r\n    Uint8ArrayConstructor|Float64ArrayConstructor|Uint32ArrayConstructor|BigUint64ArrayConstructor => {\r\n      switch (type) {\r\n        case 'float16':\r\n          return Uint16Array;\r\n        case 'float32':\r\n          return Float32Array;\r\n        case 'uint8':\r\n          return Uint8Array;\r\n        case 'int8':\r\n          return Int8Array;\r\n        case 'uint16':\r\n          return Uint16Array;\r\n        case 'int16':\r\n          return Int16Array;\r\n        case 'int32':\r\n          return Int32Array;\r\n        case 'bool':\r\n          return Uint8Array;\r\n        case 'float64':\r\n          return Float64Array;\r\n        case 'uint32':\r\n          return Uint32Array;\r\n        case 'int64':\r\n          return BigInt64Array;\r\n        case 'uint64':\r\n          return BigUint64Array;\r\n        default:\r\n          throw new Error(`unsupported type: ${type}`);\r\n      }\r\n    };\r\n\r\n/**\r\n * Map string log level to integer value\r\n */\r\nexport const logLevelStringToEnum = (logLevel?: 'verbose'|'info'|'warning'|'error'|'fatal'): number => {\r\n  switch (logLevel) {\r\n    case 'verbose':\r\n      return 0;\r\n    case 'info':\r\n      return 1;\r\n    case 'warning':\r\n      return 2;\r\n    case 'error':\r\n      return 3;\r\n    case 'fatal':\r\n      return 4;\r\n    default:\r\n      throw new Error(`unsupported logging level: ${logLevel}`);\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Env, InferenceSession, Tensor} from 'onnxruntime-common';\r\n\r\nimport {SerializableModeldata, SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\r\nimport {setRunOptions} from './run-options';\r\nimport {setSessionOptions} from './session-options';\r\nimport {logLevelStringToEnum, tensorDataTypeEnumToString, tensorDataTypeStringToEnum, tensorTypeToTypedArrayConstructor} from './wasm-common';\r\nimport {getInstance} from './wasm-factory';\r\nimport {allocWasmString, checkLastError} from './wasm-utils';\r\n\r\n/**\r\n * get the input/output count of the session.\r\n * @param sessionHandle the handle representing the session. should be non-zero.\r\n * @returns a tuple including 2 numbers, representing the input count and output count.\r\n */\r\nconst getSessionInputOutputCount = (sessionHandle: number): [number, number] => {\r\n  const wasm = getInstance();\r\n  const stack = wasm.stackSave();\r\n  try {\r\n    const dataOffset = wasm.stackAlloc(8);\r\n    const errorCode = wasm._OrtGetInputOutputCount(sessionHandle, dataOffset, dataOffset + 4);\r\n    if (errorCode !== 0) {\r\n      checkLastError('Can\\'t get session input/output count.');\r\n    }\r\n    return [wasm.HEAP32[dataOffset / 4], wasm.HEAP32[dataOffset / 4 + 1]];\r\n  } finally {\r\n    wasm.stackRestore(stack);\r\n  }\r\n};\r\n\r\n/**\r\n * initialize ORT environment.\r\n * @param numThreads SetGlobalIntraOpNumThreads(numThreads)\r\n * @param loggingLevel CreateEnv(static_cast<OrtLoggingLevel>(logging_level))\r\n */\r\nconst initOrt = (numThreads: number, loggingLevel: number): void => {\r\n  const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);\r\n  if (errorCode !== 0) {\r\n    checkLastError('Can\\'t initialize onnxruntime.');\r\n  }\r\n};\r\n\r\n/**\r\n * intialize runtime environment.\r\n * @param env passed in the environment config object.\r\n */\r\nexport const initRuntime = async(env: Env): Promise<void> => {\r\n  // init ORT\r\n  initOrt(env.wasm.numThreads!, logLevelStringToEnum(env.logLevel));\r\n\r\n  if (!BUILD_DEFS.DISABLE_WEBGPU) {\r\n    // init JSEP if available\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-require-imports, @typescript-eslint/no-var-requires\r\n    const initJsep = require('./jsep/init').init;\r\n    await initJsep(getInstance(), env);\r\n  }\r\n};\r\n\r\n/**\r\n *  tuple elements are: InferenceSession ID; inputNamesUTF8Encoded; outputNamesUTF8Encoded\r\n */\r\ntype SessionMetadata = [number, number[], number[]];\r\n\r\nconst activeSessions = new Map<number, SessionMetadata>();\r\n\r\n/**\r\n * allocate the memory and memcpy the model bytes, preparing for creating an instance of InferenceSession.\r\n * @returns a 2-elements tuple - the pointer and size of the allocated buffer\r\n */\r\nexport const createSessionAllocate = (model: Uint8Array): [number, number] => {\r\n  const wasm = getInstance();\r\n  const modelDataOffset = wasm._malloc(model.byteLength);\r\n  if (modelDataOffset === 0) {\r\n    throw new Error(`Can't create a session. failed to allocate a buffer of size ${model.byteLength}.`);\r\n  }\r\n  wasm.HEAPU8.set(model, modelDataOffset);\r\n  return [modelDataOffset, model.byteLength];\r\n};\r\n\r\n/**\r\n * create an inference session using the prepared buffer containing the model data.\r\n * @param modelData a 2-elements tuple containing the pointer and size of the model data buffer.\r\n * @param options an optional session options object.\r\n * @returns a 3-elements tuple containing [session handle, input names, output names]\r\n */\r\nexport const createSessionFinalize =\r\n    (modelData: SerializableModeldata, options?: InferenceSession.SessionOptions): SerializableSessionMetadata => {\r\n      const wasm = getInstance();\r\n\r\n      let sessionHandle = 0;\r\n      let sessionOptionsHandle = 0;\r\n      let allocs: number[] = [];\r\n      const inputNamesUTF8Encoded = [];\r\n      const outputNamesUTF8Encoded = [];\r\n\r\n      try {\r\n        [sessionOptionsHandle, allocs] = setSessionOptions(options);\r\n\r\n        sessionHandle = wasm._OrtCreateSession(modelData[0], modelData[1], sessionOptionsHandle);\r\n        if (sessionHandle === 0) {\r\n          checkLastError('Can\\'t create a session.');\r\n        }\r\n\r\n        const [inputCount, outputCount] = getSessionInputOutputCount(sessionHandle);\r\n\r\n        const inputNames = [];\r\n        const outputNames = [];\r\n        for (let i = 0; i < inputCount; i++) {\r\n          const name = wasm._OrtGetInputName(sessionHandle, i);\r\n          if (name === 0) {\r\n            checkLastError('Can\\'t get an input name.');\r\n          }\r\n          inputNamesUTF8Encoded.push(name);\r\n          inputNames.push(wasm.UTF8ToString(name));\r\n        }\r\n        for (let i = 0; i < outputCount; i++) {\r\n          const name = wasm._OrtGetOutputName(sessionHandle, i);\r\n          if (name === 0) {\r\n            checkLastError('Can\\'t get an output name.');\r\n          }\r\n          outputNamesUTF8Encoded.push(name);\r\n          outputNames.push(wasm.UTF8ToString(name));\r\n        }\r\n\r\n        activeSessions.set(sessionHandle, [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded]);\r\n        return [sessionHandle, inputNames, outputNames];\r\n      } catch (e) {\r\n        inputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\r\n        outputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\r\n\r\n        if (sessionHandle !== 0) {\r\n          wasm._OrtReleaseSession(sessionHandle);\r\n        }\r\n        throw e;\r\n      } finally {\r\n        wasm._free(modelData[0]);\r\n        if (sessionOptionsHandle !== 0) {\r\n          wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\r\n        }\r\n        allocs.forEach(alloc => wasm._free(alloc));\r\n      }\r\n    };\r\n\r\n\r\n/**\r\n * create an instance of InferenceSession.\r\n * @returns the metadata of InferenceSession. 0-value handle for failure.\r\n */\r\nexport const createSession =\r\n    (model: Uint8Array, options?: InferenceSession.SessionOptions): SerializableSessionMetadata => {\r\n      const modelData: SerializableModeldata = createSessionAllocate(model);\r\n      return createSessionFinalize(modelData, options);\r\n    };\r\n\r\nexport const releaseSession = (sessionId: number): void => {\r\n  const wasm = getInstance();\r\n  const session = activeSessions.get(sessionId);\r\n  if (!session) {\r\n    throw new Error(`cannot release session. invalid session id: ${sessionId}`);\r\n  }\r\n  const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded] = session;\r\n\r\n  inputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\r\n  outputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\r\n  wasm._OrtReleaseSession(sessionHandle);\r\n  activeSessions.delete(sessionId);\r\n};\r\n\r\n/**\r\n * perform inference run\r\n */\r\nexport const run = async(\r\n    sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\r\n    options: InferenceSession.RunOptions): Promise<SerializableTensor[]> => {\r\n  const wasm = getInstance();\r\n  const session = activeSessions.get(sessionId);\r\n  if (!session) {\r\n    throw new Error(`cannot run inference. invalid session id: ${sessionId}`);\r\n  }\r\n  const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded] = session;\r\n\r\n  const inputCount = inputIndices.length;\r\n  const outputCount = outputIndices.length;\r\n\r\n  let runOptionsHandle = 0;\r\n  let runOptionsAllocs: number[] = [];\r\n\r\n  const inputValues: number[] = [];\r\n  const inputAllocs: number[] = [];\r\n\r\n  try {\r\n    [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);\r\n\r\n    // create input tensors\r\n    for (let i = 0; i < inputCount; i++) {\r\n      const dataType = inputs[i][0];\r\n      const dims = inputs[i][1];\r\n      const data = inputs[i][2];\r\n\r\n      let dataOffset: number;\r\n      let dataByteLength: number;\r\n\r\n      if (Array.isArray(data)) {\r\n        // string tensor\r\n        dataByteLength = 4 * data.length;\r\n        dataOffset = wasm._malloc(dataByteLength);\r\n        inputAllocs.push(dataOffset);\r\n        let dataIndex = dataOffset / 4;\r\n        for (let i = 0; i < data.length; i++) {\r\n          if (typeof data[i] !== 'string') {\r\n            throw new TypeError(`tensor data at index ${i} is not a string`);\r\n          }\r\n          wasm.HEAPU32[dataIndex++] = allocWasmString(data[i], inputAllocs);\r\n        }\r\n      } else {\r\n        dataByteLength = data.byteLength;\r\n        dataOffset = wasm._malloc(dataByteLength);\r\n        inputAllocs.push(dataOffset);\r\n        wasm.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), dataOffset);\r\n      }\r\n\r\n      const stack = wasm.stackSave();\r\n      const dimsOffset = wasm.stackAlloc(4 * dims.length);\r\n      try {\r\n        let dimIndex = dimsOffset / 4;\r\n        dims.forEach(d => wasm.HEAP32[dimIndex++] = d);\r\n        const tensor = wasm._OrtCreateTensor(\r\n            tensorDataTypeStringToEnum(dataType), dataOffset, dataByteLength, dimsOffset, dims.length);\r\n        if (tensor === 0) {\r\n          checkLastError(`Can't create tensor for input[${i}].`);\r\n        }\r\n        inputValues.push(tensor);\r\n      } finally {\r\n        wasm.stackRestore(stack);\r\n      }\r\n    }\r\n\r\n    const beforeRunStack = wasm.stackSave();\r\n    const inputValuesOffset = wasm.stackAlloc(inputCount * 4);\r\n    const inputNamesOffset = wasm.stackAlloc(inputCount * 4);\r\n    const outputValuesOffset = wasm.stackAlloc(outputCount * 4);\r\n    const outputNamesOffset = wasm.stackAlloc(outputCount * 4);\r\n\r\n    try {\r\n      let inputValuesIndex = inputValuesOffset / 4;\r\n      let inputNamesIndex = inputNamesOffset / 4;\r\n      let outputValuesIndex = outputValuesOffset / 4;\r\n      let outputNamesIndex = outputNamesOffset / 4;\r\n      for (let i = 0; i < inputCount; i++) {\r\n        wasm.HEAPU32[inputValuesIndex++] = inputValues[i];\r\n        wasm.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];\r\n      }\r\n      for (let i = 0; i < outputCount; i++) {\r\n        wasm.HEAPU32[outputValuesIndex++] = 0;\r\n        wasm.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];\r\n      }\r\n\r\n      // support RunOptions\r\n      let errorCode = wasm._OrtRun(\r\n          sessionHandle, inputNamesOffset, inputValuesOffset, inputCount, outputNamesOffset, outputCount,\r\n          outputValuesOffset, runOptionsHandle);\r\n\r\n      // eslint-disable-next-line @typescript-eslint/naming-convention\r\n      const runPromise = wasm.jsepRunPromise;\r\n      if (runPromise && typeof runPromise.then !== 'undefined') {\r\n        errorCode = await runPromise;\r\n      }\r\n\r\n      const output: SerializableTensor[] = [];\r\n\r\n      if (errorCode !== 0) {\r\n        checkLastError('failed to call OrtRun().');\r\n      }\r\n\r\n      for (let i = 0; i < outputCount; i++) {\r\n        const tensor = wasm.HEAPU32[outputValuesOffset / 4 + i];\r\n\r\n        const beforeGetTensorDataStack = wasm.stackSave();\r\n        // stack allocate 4 pointer value\r\n        const tensorDataOffset = wasm.stackAlloc(4 * 4);\r\n\r\n        let type: Tensor.Type|undefined, dataOffset = 0;\r\n        try {\r\n          errorCode = wasm._OrtGetTensorData(\r\n              tensor, tensorDataOffset, tensorDataOffset + 4, tensorDataOffset + 8, tensorDataOffset + 12);\r\n          if (errorCode !== 0) {\r\n            checkLastError(`Can't access output tensor data on index ${i}.`);\r\n          }\r\n          let tensorDataIndex = tensorDataOffset / 4;\r\n          const dataType = wasm.HEAPU32[tensorDataIndex++];\r\n          dataOffset = wasm.HEAPU32[tensorDataIndex++];\r\n          const dimsOffset = wasm.HEAPU32[tensorDataIndex++];\r\n          const dimsLength = wasm.HEAPU32[tensorDataIndex++];\r\n          const dims = [];\r\n          for (let i = 0; i < dimsLength; i++) {\r\n            dims.push(wasm.HEAPU32[dimsOffset / 4 + i]);\r\n          }\r\n          wasm._OrtFree(dimsOffset);\r\n\r\n          const size = dims.length === 0 ? 1 : dims.reduce((a, b) => a * b);\r\n          type = tensorDataTypeEnumToString(dataType);\r\n          if (type === 'string') {\r\n            const stringData: string[] = [];\r\n            let dataIndex = dataOffset / 4;\r\n            for (let i = 0; i < size; i++) {\r\n              const offset = wasm.HEAPU32[dataIndex++];\r\n              const maxBytesToRead = i === size - 1 ? undefined : wasm.HEAPU32[dataIndex] - offset;\r\n              stringData.push(wasm.UTF8ToString(offset, maxBytesToRead));\r\n            }\r\n            output.push([type, dims, stringData]);\r\n          } else {\r\n            const typedArrayConstructor = tensorTypeToTypedArrayConstructor(type);\r\n            const data = new typedArrayConstructor(size);\r\n            new Uint8Array(data.buffer, data.byteOffset, data.byteLength)\r\n                .set(wasm.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));\r\n            output.push([type, dims, data]);\r\n          }\r\n        } finally {\r\n          wasm.stackRestore(beforeGetTensorDataStack);\r\n          if (type === 'string' && dataOffset) {\r\n            wasm._free(dataOffset);\r\n          }\r\n          wasm._OrtReleaseTensor(tensor);\r\n        }\r\n      }\r\n\r\n      return output;\r\n    } finally {\r\n      wasm.stackRestore(beforeRunStack);\r\n    }\r\n  } finally {\r\n    inputValues.forEach(v => wasm._OrtReleaseTensor(v));\r\n    inputAllocs.forEach(p => wasm._free(p));\r\n\r\n    if (runOptionsHandle !== 0) {\r\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\r\n    }\r\n    runOptionsAllocs.forEach(p => wasm._free(p));\r\n  }\r\n};\r\n\r\n/**\r\n * end profiling\r\n */\r\nexport const endProfiling = (sessionId: number): void => {\r\n  const wasm = getInstance();\r\n  const session = activeSessions.get(sessionId);\r\n  if (!session) {\r\n    throw new Error('invalid session id');\r\n  }\r\n  const sessionHandle = session[0];\r\n\r\n  // profile file name is not used yet, but it must be freed.\r\n  const profileFileName = wasm._OrtEndProfiling(sessionHandle);\r\n  if (profileFileName === 0) {\r\n    checkLastError('Can\\'t get an profile file name.');\r\n  }\r\n  wasm._OrtFree(profileFileName);\r\n};\r\n\r\nexport const extractTransferableBuffers = (tensors: readonly SerializableTensor[]): ArrayBufferLike[] => {\r\n  const buffers: ArrayBufferLike[] = [];\r\n  for (const tensor of tensors) {\r\n    const data = tensor[2];\r\n    if (!Array.isArray(data) && data.buffer) {\r\n      buffers.push(data.buffer);\r\n    }\r\n  }\r\n  return buffers;\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Env} from 'onnxruntime-common';\r\nimport * as path from 'path';\r\n\r\nimport {OrtWasmModule} from './binding/ort-wasm';\r\nimport {OrtWasmThreadedModule} from './binding/ort-wasm-threaded';\r\n\r\n/* eslint-disable @typescript-eslint/no-require-imports */\r\nconst ortWasmFactory: EmscriptenModuleFactory<OrtWasmModule> =\r\n    BUILD_DEFS.DISABLE_WEBGPU ? require('./binding/ort-wasm.js') : require('./binding/ort-wasm-simd.jsep.js');\r\n\r\nconst ortWasmFactoryThreaded: EmscriptenModuleFactory<OrtWasmModule> = !BUILD_DEFS.DISABLE_WASM_THREAD ?\r\n    (BUILD_DEFS.DISABLE_WEBGPU ? require('./binding/ort-wasm-threaded.js') :\r\n                                 require('./binding/ort-wasm-simd-threaded.jsep.js')) :\r\n    ortWasmFactory;\r\n/* eslint-enable @typescript-eslint/no-require-imports */\r\n\r\nlet wasm: OrtWasmModule|undefined;\r\nlet initialized = false;\r\nlet initializing = false;\r\nlet aborted = false;\r\n\r\nconst isMultiThreadSupported = (): boolean => {\r\n  try {\r\n    // If 'SharedArrayBuffer' is not available, WebAssembly threads will not work.\r\n    if (typeof SharedArrayBuffer === 'undefined') {\r\n      return false;\r\n    }\r\n\r\n    // Test for transferability of SABs (for browsers. needed for Firefox)\r\n    // https://groups.google.com/forum/#!msg/mozilla.dev.platform/IHkBZlHETpA/dwsMNchWEQAJ\r\n    if (typeof MessageChannel !== 'undefined') {\r\n      new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));\r\n    }\r\n\r\n    // Test for WebAssembly threads capability (for both browsers and Node.js)\r\n    // This typed array is a WebAssembly program containing threaded instructions.\r\n    return WebAssembly.validate(new Uint8Array([\r\n      0, 97, 115, 109, 1, 0,  0,  0, 1, 4, 1,  96, 0,   0,  3, 2, 1,  0, 5,\r\n      4, 1,  3,   1,   1, 10, 11, 1, 9, 0, 65, 0,  254, 16, 2, 0, 26, 11\r\n    ]));\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n};\r\n\r\nconst isSimdSupported = (): boolean => {\r\n  try {\r\n    // Test for WebAssembly SIMD capability (for both browsers and Node.js)\r\n    // This typed array is a WebAssembly program containing SIMD instructions.\r\n\r\n    // The binary data is generated from the following code by wat2wasm:\r\n    //\r\n    // (module\r\n    //   (type $t0 (func))\r\n    //   (func $f0 (type $t0)\r\n    //     (drop\r\n    //       (i32x4.dot_i16x8_s\r\n    //         (i8x16.splat\r\n    //           (i32.const 0))\r\n    //         (v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000)))))\r\n\r\n    return WebAssembly.validate(new Uint8Array([\r\n      0,   97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 30, 1,   28,  0, 65, 0,\r\n      253, 15, 253, 12,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  253, 186, 1, 26, 11\r\n    ]));\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n};\r\n\r\nconst getWasmFileName = (useSimd: boolean, useThreads: boolean) => {\r\n  if (useThreads) {\r\n    return useSimd ? 'ort-wasm-simd-threaded.wasm' : 'ort-wasm-threaded.wasm';\r\n  } else {\r\n    return useSimd ? 'ort-wasm-simd.wasm' : 'ort-wasm.wasm';\r\n  }\r\n};\r\n\r\nexport const initializeWebAssembly = async(flags: Env.WebAssemblyFlags): Promise<void> => {\r\n  if (initialized) {\r\n    return Promise.resolve();\r\n  }\r\n  if (initializing) {\r\n    throw new Error('multiple calls to \\'initializeWebAssembly()\\' detected.');\r\n  }\r\n  if (aborted) {\r\n    throw new Error('previous call to \\'initializeWebAssembly()\\' failed.');\r\n  }\r\n\r\n  initializing = true;\r\n\r\n  // wasm flags are already initialized\r\n  const timeout = flags.initTimeout!;\r\n  const numThreads = flags.numThreads!;\r\n  const simd = flags.simd!;\r\n\r\n  const useThreads = numThreads > 1 && isMultiThreadSupported();\r\n  const useSimd = simd && isSimdSupported();\r\n\r\n  const wasmPaths = flags.wasmPaths;\r\n  const wasmPrefixOverride = typeof wasmPaths === 'string' ? wasmPaths : undefined;\r\n  const wasmFileName = getWasmFileName(useSimd, useThreads);\r\n  const wasmPathOverride = typeof wasmPaths === 'object' ? wasmPaths[wasmFileName] : undefined;\r\n\r\n  let isTimeout = false;\r\n\r\n  const tasks: Array<Promise<void>> = [];\r\n\r\n  // promise for timeout\r\n  if (timeout > 0) {\r\n    tasks.push(new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        isTimeout = true;\r\n        resolve();\r\n      }, timeout);\r\n    }));\r\n  }\r\n\r\n  // promise for module initialization\r\n  tasks.push(new Promise((resolve, reject) => {\r\n    const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;\r\n    const config: Partial<OrtWasmModule> = {\r\n      locateFile: (fileName: string, scriptDirectory: string) => {\r\n        if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads && fileName.endsWith('.worker.js') &&\r\n            typeof Blob !== 'undefined') {\r\n          return URL.createObjectURL(new Blob(\r\n              [\r\n                // This require() function is handled by webpack to load file content of the corresponding .worker.js\r\n                // eslint-disable-next-line @typescript-eslint/no-require-imports\r\n                require('./binding/ort-wasm-threaded.worker.js')\r\n              ],\r\n              {type: 'text/javascript'}));\r\n        }\r\n\r\n        if (fileName.endsWith('.wasm')) {\r\n          if (wasmPathOverride) {\r\n            return wasmPathOverride;\r\n          }\r\n\r\n          const prefix = wasmPrefixOverride ?? scriptDirectory;\r\n\r\n          if (!BUILD_DEFS.DISABLE_WEBGPU) {\r\n            if (wasmFileName === 'ort-wasm-simd.wasm') {\r\n              return prefix + 'ort-wasm-simd.jsep.wasm';\r\n            } else if (wasmFileName === 'ort-wasm-simd-threaded.wasm') {\r\n              return prefix + 'ort-wasm-simd-threaded.jsep.wasm';\r\n            }\r\n          }\r\n\r\n          return prefix + wasmFileName;\r\n        }\r\n\r\n        return scriptDirectory + fileName;\r\n      }\r\n    };\r\n\r\n    if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads) {\r\n      if (typeof Blob === 'undefined') {\r\n        config.mainScriptUrlOrBlob = path.join(__dirname, 'ort-wasm-threaded.js');\r\n      } else {\r\n        const scriptSourceCode = `var ortWasmThreaded=(function(){var _scriptDir;return ${factory.toString()}})();`;\r\n        config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], {type: 'text/javascript'});\r\n      }\r\n    }\r\n\r\n    factory(config).then(\r\n        // wasm module initialized successfully\r\n        module => {\r\n          initializing = false;\r\n          initialized = true;\r\n          wasm = module;\r\n          resolve();\r\n        },\r\n        // wasm module failed to initialize\r\n        (what) => {\r\n          initializing = false;\r\n          aborted = true;\r\n          reject(what);\r\n        });\r\n  }));\r\n\r\n  await Promise.race(tasks);\r\n\r\n  if (isTimeout) {\r\n    throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);\r\n  }\r\n};\r\n\r\nexport const getInstance = (): OrtWasmModule => {\r\n  if (initialized && wasm) {\r\n    return wasm;\r\n  }\r\n\r\n  throw new Error('WebAssembly is not initialized yet.');\r\n};\r\n\r\nexport const dispose = (): void => {\r\n  if (initialized && !initializing && !aborted) {\r\n    initializing = true;\r\n\r\n    (wasm as OrtWasmThreadedModule).PThread?.terminateAllThreads();\r\n    wasm = undefined;\r\n\r\n    initializing = false;\r\n    initialized = false;\r\n    aborted = true;\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {getInstance} from './wasm-factory';\r\n\r\nexport const allocWasmString = (data: string, allocs: number[]): number => {\r\n  const wasm = getInstance();\r\n\r\n  const dataLength = wasm.lengthBytesUTF8(data) + 1;\r\n  const dataOffset = wasm._malloc(dataLength);\r\n  wasm.stringToUTF8(data, dataOffset, dataLength);\r\n  allocs.push(dataOffset);\r\n\r\n  return dataOffset;\r\n};\r\n\r\ninterface ExtraOptionsHandler {\r\n  (name: string, value: string): void;\r\n}\r\n\r\nexport const iterateExtraOptions =\r\n    (options: Record<string, unknown>, prefix: string, seen: WeakSet<Record<string, unknown>>,\r\n     handler: ExtraOptionsHandler): void => {\r\n      if (typeof options == 'object' && options !== null) {\r\n        if (seen.has(options)) {\r\n          throw new Error('Circular reference in options');\r\n        } else {\r\n          seen.add(options);\r\n        }\r\n      }\r\n\r\n      Object.entries(options).forEach(([key, value]) => {\r\n        const name = (prefix) ? prefix + key : key;\r\n        if (typeof value === 'object') {\r\n          iterateExtraOptions(value as Record<string, unknown>, name + '.', seen, handler);\r\n        } else if (typeof value === 'string' || typeof value === 'number') {\r\n          handler(name, value.toString());\r\n        } else if (typeof value === 'boolean') {\r\n          handler(name, (value) ? '1' : '0');\r\n        } else {\r\n          throw new Error(`Can't handle extra config type: ${typeof value}`);\r\n        }\r\n      });\r\n    };\r\n\r\n/**\r\n * check web assembly API's last error and throw error if any error occurred.\r\n * @param message a message used when an error occurred.\r\n */\r\nexport const checkLastError = (message: string): void => {\r\n  const wasm = getInstance();\r\n\r\n  const stack = wasm.stackSave();\r\n  try {\r\n    const paramsOffset = wasm.stackAlloc(8);\r\n    wasm._OrtGetLastError(paramsOffset, paramsOffset + 4);\r\n    const errorCode = wasm.HEAP32[paramsOffset / 4];\r\n    const errorMessagePointer = wasm.HEAPU32[paramsOffset / 4 + 1];\r\n    const errorMessage = errorMessagePointer ? wasm.UTF8ToString(errorMessagePointer) : '';\r\n    throw new Error(`${message} ERROR_CODE: ${errorCode}, ERROR_MESSAGE: ${errorMessage}`);\r\n  } finally {\r\n    wasm.stackRestore(stack);\r\n  }\r\n};\r\n","\nimport worker from \"!!../../../../node_modules/worker-loader/dist/runtime/inline.js\";\n\nexport default function Worker_fn() {\n  return worker(\"/*!\\n* ONNX Runtime Web v1.16.0\\n* Copyright (c) Microsoft Corporation. All rights reserved.\\n* Licensed under the MIT License.\\n*/\\n(()=>{var e={918:(e,t,r)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.setRunOptions=void 0;const n=r(263),a=r(497);t.setRunOptions=e=>{const t=(0,n.getInstance)();let r=0;const o=[],i=e||{};try{if(void 0===(null==e?void 0:e.logSeverityLevel))i.logSeverityLevel=2;else if(\\\"number\\\"!=typeof e.logSeverityLevel||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(void 0===(null==e?void 0:e.logVerbosityLevel))i.logVerbosityLevel=0;else if(\\\"number\\\"!=typeof e.logVerbosityLevel||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);void 0===(null==e?void 0:e.terminate)&&(i.terminate=!1);let n=0;return void 0!==(null==e?void 0:e.tag)&&(n=(0,a.allocWasmString)(e.tag,o)),r=t._OrtCreateRunOptions(i.logSeverityLevel,i.logVerbosityLevel,!!i.terminate,n),0===r&&(0,a.checkLastError)(\\\"Can't create run options.\\\"),void 0!==(null==e?void 0:e.extra)&&(0,a.iterateExtraOptions)(e.extra,\\\"\\\",new WeakSet,((e,n)=>{const i=(0,a.allocWasmString)(e,o),s=(0,a.allocWasmString)(n,o);0!==t._OrtAddRunConfigEntry(r,i,s)&&(0,a.checkLastError)(`Can't set a run config entry: ${e} - ${n}.`)})),[r,o]}catch(e){throw 0!==r&&t._OrtReleaseRunOptions(r),o.forEach((e=>t._free(e))),e}}},622:(e,t,r)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.setSessionOptions=void 0;const n=r(263),a=r(497);t.setSessionOptions=e=>{var t,r,o,i;const s=(0,n.getInstance)();let u=0;const c=[],l=e||{};(e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});const t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly=\\\"1\\\"),e.executionProviders&&e.executionProviders.some((e=>\\\"webgpu\\\"===(\\\"string\\\"==typeof e?e:e.name)))&&(e.enableMemPattern=!1)})(l);try{const e=(e=>{switch(e){case\\\"disabled\\\":return 0;case\\\"basic\\\":return 1;case\\\"extended\\\":return 2;case\\\"all\\\":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}})(null!==(t=l.graphOptimizationLevel)&&void 0!==t?t:\\\"all\\\"),f=(e=>{switch(e){case\\\"sequential\\\":return 0;case\\\"parallel\\\":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}})(null!==(r=l.executionMode)&&void 0!==r?r:\\\"sequential\\\"),d=\\\"string\\\"==typeof l.logId?(0,a.allocWasmString)(l.logId,c):0,p=null!==(o=l.logSeverityLevel)&&void 0!==o?o:2;if(!Number.isInteger(p)||p<0||p>4)throw new Error(`log serverity level is not valid: ${p}`);const g=null!==(i=l.logVerbosityLevel)&&void 0!==i?i:0;if(!Number.isInteger(g)||g<0||g>4)throw new Error(`log verbosity level is not valid: ${g}`);const h=\\\"string\\\"==typeof l.optimizedModelFilePath?(0,a.allocWasmString)(l.optimizedModelFilePath,c):0;return u=s._OrtCreateSessionOptions(e,!!l.enableCpuMemArena,!!l.enableMemPattern,f,!!l.enableProfiling,0,d,p,g,h),0===u&&(0,a.checkLastError)(\\\"Can't create session options.\\\"),l.executionProviders&&((e,t,r)=>{for(const o of t){let t=\\\"string\\\"==typeof o?o:o.name;switch(t){case\\\"xnnpack\\\":t=\\\"XNNPACK\\\";break;case\\\"webnn\\\":if(t=\\\"WEBNN\\\",\\\"string\\\"!=typeof o){const t=o;if(null==t?void 0:t.deviceType){const o=(0,a.allocWasmString)(\\\"deviceType\\\",r),i=(0,a.allocWasmString)(t.deviceType,r);0!==(0,n.getInstance)()._OrtAddSessionConfigEntry(e,o,i)&&(0,a.checkLastError)(`Can't set a session config entry: 'deviceType' - ${t.deviceType}.`)}if(null==t?void 0:t.powerPreference){const o=(0,a.allocWasmString)(\\\"powerPreference\\\",r),i=(0,a.allocWasmString)(t.powerPreference,r);0!==(0,n.getInstance)()._OrtAddSessionConfigEntry(e,o,i)&&(0,a.checkLastError)(`Can't set a session config entry: 'powerPreference' - ${t.powerPreference}.`)}}break;case\\\"webgpu\\\":t=\\\"JS\\\";break;case\\\"wasm\\\":case\\\"cpu\\\":continue;default:throw new Error(`not supported execution provider: ${t}`)}const i=(0,a.allocWasmString)(t,r);0!==(0,n.getInstance)()._OrtAppendExecutionProvider(e,i)&&(0,a.checkLastError)(`Can't append execution provider: ${t}.`)}})(u,l.executionProviders,c),void 0!==l.extra&&(0,a.iterateExtraOptions)(l.extra,\\\"\\\",new WeakSet,((e,t)=>{const r=(0,a.allocWasmString)(e,c),n=(0,a.allocWasmString)(t,c);0!==s._OrtAddSessionConfigEntry(u,r,n)&&(0,a.checkLastError)(`Can't set a session config entry: ${e} - ${t}.`)})),[u,c]}catch(e){throw 0!==u&&s._OrtReleaseSessionOptions(u),c.forEach((e=>s._free(e))),e}}},917:(e,t)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.logLevelStringToEnum=t.tensorTypeToTypedArrayConstructor=t.getTensorElementSize=t.tensorDataTypeEnumToString=t.tensorDataTypeStringToEnum=void 0,t.tensorDataTypeStringToEnum=e=>{switch(e){case\\\"int8\\\":return 3;case\\\"uint8\\\":return 2;case\\\"bool\\\":return 9;case\\\"int16\\\":return 5;case\\\"uint16\\\":return 4;case\\\"int32\\\":return 6;case\\\"uint32\\\":return 12;case\\\"float16\\\":return 10;case\\\"float32\\\":return 1;case\\\"float64\\\":return 11;case\\\"string\\\":return 8;case\\\"int64\\\":return 7;case\\\"uint64\\\":return 13;default:throw new Error(`unsupported data type: ${e}`)}},t.tensorDataTypeEnumToString=e=>{switch(e){case 3:return\\\"int8\\\";case 2:return\\\"uint8\\\";case 9:return\\\"bool\\\";case 5:return\\\"int16\\\";case 4:return\\\"uint16\\\";case 6:return\\\"int32\\\";case 12:return\\\"uint32\\\";case 10:return\\\"float16\\\";case 1:return\\\"float32\\\";case 11:return\\\"float64\\\";case 8:return\\\"string\\\";case 7:return\\\"int64\\\";case 13:return\\\"uint64\\\";default:throw new Error(`unsupported data type: ${e}`)}},t.getTensorElementSize=e=>[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][e],t.tensorTypeToTypedArrayConstructor=e=>{switch(e){case\\\"float16\\\":case\\\"uint16\\\":return Uint16Array;case\\\"float32\\\":return Float32Array;case\\\"uint8\\\":case\\\"bool\\\":return Uint8Array;case\\\"int8\\\":return Int8Array;case\\\"int16\\\":return Int16Array;case\\\"int32\\\":return Int32Array;case\\\"float64\\\":return Float64Array;case\\\"uint32\\\":return Uint32Array;case\\\"int64\\\":return BigInt64Array;case\\\"uint64\\\":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},t.logLevelStringToEnum=e=>{switch(e){case\\\"verbose\\\":return 0;case\\\"info\\\":return 1;case\\\"warning\\\":return 2;case\\\"error\\\":return 3;case\\\"fatal\\\":return 4;default:throw new Error(`unsupported logging level: ${e}`)}}},259:function(e,t,r){\\\"use strict\\\";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(a,o){function i(e){try{u(n.next(e))}catch(e){o(e)}}function s(e){try{u(n.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(i,s)}u((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.extractTransferableBuffers=t.endProfiling=t.run=t.releaseSession=t.createSession=t.createSessionFinalize=t.createSessionAllocate=t.initRuntime=void 0;const a=r(918),o=r(622),i=r(917),s=r(263),u=r(497);t.initRuntime=e=>n(void 0,void 0,void 0,(function*(){var t,r;t=e.wasm.numThreads,r=(0,i.logLevelStringToEnum)(e.logLevel),0!==(0,s.getInstance)()._OrtInit(t,r)&&(0,u.checkLastError)(\\\"Can't initialize onnxruntime.\\\")}));const c=new Map;t.createSessionAllocate=e=>{const t=(0,s.getInstance)(),r=t._malloc(e.byteLength);if(0===r)throw new Error(`Can't create a session. failed to allocate a buffer of size ${e.byteLength}.`);return t.HEAPU8.set(e,r),[r,e.byteLength]},t.createSessionFinalize=(e,t)=>{const r=(0,s.getInstance)();let n=0,a=0,i=[];const l=[],f=[];try{[a,i]=(0,o.setSessionOptions)(t),n=r._OrtCreateSession(e[0],e[1],a),0===n&&(0,u.checkLastError)(\\\"Can't create a session.\\\");const[d,p]=(e=>{const t=(0,s.getInstance)(),r=t.stackSave();try{const r=t.stackAlloc(8);return 0!==t._OrtGetInputOutputCount(e,r,r+4)&&(0,u.checkLastError)(\\\"Can't get session input/output count.\\\"),[t.HEAP32[r/4],t.HEAP32[r/4+1]]}finally{t.stackRestore(r)}})(n),g=[],h=[];for(let e=0;e<d;e++){const t=r._OrtGetInputName(n,e);0===t&&(0,u.checkLastError)(\\\"Can't get an input name.\\\"),l.push(t),g.push(r.UTF8ToString(t))}for(let e=0;e<p;e++){const t=r._OrtGetOutputName(n,e);0===t&&(0,u.checkLastError)(\\\"Can't get an output name.\\\"),f.push(t),h.push(r.UTF8ToString(t))}return c.set(n,[n,l,f]),[n,g,h]}catch(e){throw l.forEach((e=>r._OrtFree(e))),f.forEach((e=>r._OrtFree(e))),0!==n&&r._OrtReleaseSession(n),e}finally{r._free(e[0]),0!==a&&r._OrtReleaseSessionOptions(a),i.forEach((e=>r._free(e)))}},t.createSession=(e,r)=>{const n=(0,t.createSessionAllocate)(e);return(0,t.createSessionFinalize)(n,r)},t.releaseSession=e=>{const t=(0,s.getInstance)(),r=c.get(e);if(!r)throw new Error(`cannot release session. invalid session id: ${e}`);const[n,a,o]=r;a.forEach((e=>t._OrtFree(e))),o.forEach((e=>t._OrtFree(e))),t._OrtReleaseSession(n),c.delete(e)},t.run=(e,t,r,o,l)=>n(void 0,void 0,void 0,(function*(){const n=(0,s.getInstance)(),f=c.get(e);if(!f)throw new Error(`cannot run inference. invalid session id: ${e}`);const[d,p,g]=f,h=t.length,m=o.length;let y=0,v=[];const b=[],w=[];try{[y,v]=(0,a.setRunOptions)(l);for(let e=0;e<h;e++){const t=r[e][0],a=r[e][1],o=r[e][2];let s,c;if(Array.isArray(o)){c=4*o.length,s=n._malloc(c),w.push(s);let e=s/4;for(let t=0;t<o.length;t++){if(\\\"string\\\"!=typeof o[t])throw new TypeError(`tensor data at index ${t} is not a string`);n.HEAPU32[e++]=(0,u.allocWasmString)(o[t],w)}}else c=o.byteLength,s=n._malloc(c),w.push(s),n.HEAPU8.set(new Uint8Array(o.buffer,o.byteOffset,c),s);const l=n.stackSave(),f=n.stackAlloc(4*a.length);try{let r=f/4;a.forEach((e=>n.HEAP32[r++]=e));const o=n._OrtCreateTensor((0,i.tensorDataTypeStringToEnum)(t),s,c,f,a.length);0===o&&(0,u.checkLastError)(`Can't create tensor for input[${e}].`),b.push(o)}finally{n.stackRestore(l)}}const e=n.stackSave(),s=n.stackAlloc(4*h),c=n.stackAlloc(4*h),f=n.stackAlloc(4*m),_=n.stackAlloc(4*m);try{let e=s/4,r=c/4,a=f/4,l=_/4;for(let a=0;a<h;a++)n.HEAPU32[e++]=b[a],n.HEAPU32[r++]=p[t[a]];for(let e=0;e<m;e++)n.HEAPU32[a++]=0,n.HEAPU32[l++]=g[o[e]];let v=n._OrtRun(d,c,s,h,_,m,f,y);const w=n.jsepRunPromise;w&&void 0!==w.then&&(v=yield w);const O=[];0!==v&&(0,u.checkLastError)(\\\"failed to call OrtRun().\\\");for(let e=0;e<m;e++){const t=n.HEAPU32[f/4+e],r=n.stackSave(),a=n.stackAlloc(16);let o,s=0;try{v=n._OrtGetTensorData(t,a,a+4,a+8,a+12),0!==v&&(0,u.checkLastError)(`Can't access output tensor data on index ${e}.`);let r=a/4;const c=n.HEAPU32[r++];s=n.HEAPU32[r++];const l=n.HEAPU32[r++],f=n.HEAPU32[r++],d=[];for(let e=0;e<f;e++)d.push(n.HEAPU32[l/4+e]);n._OrtFree(l);const p=0===d.length?1:d.reduce(((e,t)=>e*t));if(o=(0,i.tensorDataTypeEnumToString)(c),\\\"string\\\"===o){const e=[];let t=s/4;for(let r=0;r<p;r++){const a=n.HEAPU32[t++],o=r===p-1?void 0:n.HEAPU32[t]-a;e.push(n.UTF8ToString(a,o))}O.push([o,d,e])}else{const e=new((0,i.tensorTypeToTypedArrayConstructor)(o))(p);new Uint8Array(e.buffer,e.byteOffset,e.byteLength).set(n.HEAPU8.subarray(s,s+e.byteLength)),O.push([o,d,e])}}finally{n.stackRestore(r),\\\"string\\\"===o&&s&&n._free(s),n._OrtReleaseTensor(t)}}return O}finally{n.stackRestore(e)}}finally{b.forEach((e=>n._OrtReleaseTensor(e))),w.forEach((e=>n._free(e))),0!==y&&n._OrtReleaseRunOptions(y),v.forEach((e=>n._free(e)))}})),t.endProfiling=e=>{const t=(0,s.getInstance)(),r=c.get(e);if(!r)throw new Error(\\\"invalid session id\\\");const n=r[0],a=t._OrtEndProfiling(n);0===a&&(0,u.checkLastError)(\\\"Can't get an profile file name.\\\"),t._OrtFree(a)},t.extractTransferableBuffers=e=>{const t=[];for(const r of e){const e=r[2];!Array.isArray(e)&&e.buffer&&t.push(e.buffer)}return t}},263:function(e,t,r){\\\"use strict\\\";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var a=Object.getOwnPropertyDescriptor(t,r);a&&!(\\\"get\\\"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,a)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,\\\"default\\\",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)\\\"default\\\"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&n(t,e,r);return a(t,e),t},i=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(a,o){function i(e){try{u(n.next(e))}catch(e){o(e)}}function s(e){try{u(n.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(i,s)}u((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.dispose=t.getInstance=t.initializeWebAssembly=void 0;const s=o(r(449)),u=r(932),c=r(474);let l,f=!1,d=!1,p=!1;t.initializeWebAssembly=e=>i(void 0,void 0,void 0,(function*(){if(f)return Promise.resolve();if(d)throw new Error(\\\"multiple calls to 'initializeWebAssembly()' detected.\\\");if(p)throw new Error(\\\"previous call to 'initializeWebAssembly()' failed.\\\");d=!0;const t=e.initTimeout,n=e.numThreads,a=e.simd,o=n>1&&(()=>{try{return\\\"undefined\\\"!=typeof SharedArrayBuffer&&(\\\"undefined\\\"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])))}catch(e){return!1}})(),i=a&&(()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch(e){return!1}})(),g=e.wasmPaths,h=\\\"string\\\"==typeof g?g:void 0,m=((e,t)=>t?e?\\\"ort-wasm-simd-threaded.wasm\\\":\\\"ort-wasm-threaded.wasm\\\":e?\\\"ort-wasm-simd.wasm\\\":\\\"ort-wasm.wasm\\\")(i,o),y=\\\"object\\\"==typeof g?g[m]:void 0;let v=!1;const b=[];if(t>0&&b.push(new Promise((e=>{setTimeout((()=>{v=!0,e()}),t)}))),b.push(new Promise(((e,t)=>{const n=o?c:u,a={locateFile:(e,t)=>o&&e.endsWith(\\\".worker.js\\\")&&\\\"undefined\\\"!=typeof Blob?URL.createObjectURL(new Blob([r(154)],{type:\\\"text/javascript\\\"})):e.endsWith(\\\".wasm\\\")?y||(null!=h?h:t)+m:t+e};if(o)if(\\\"undefined\\\"==typeof Blob)a.mainScriptUrlOrBlob=s.join(__dirname,\\\"ort-wasm-threaded.js\\\");else{const e=`var ortWasmThreaded=(function(){var _scriptDir;return ${n.toString()}})();`;a.mainScriptUrlOrBlob=new Blob([e],{type:\\\"text/javascript\\\"})}n(a).then((t=>{d=!1,f=!0,l=t,e()}),(e=>{d=!1,p=!0,t(e)}))}))),yield Promise.race(b),v)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)})),t.getInstance=()=>{if(f&&l)return l;throw new Error(\\\"WebAssembly is not initialized yet.\\\")},t.dispose=()=>{var e;!f||d||p||(d=!0,null===(e=l.PThread)||void 0===e||e.terminateAllThreads(),l=void 0,d=!1,f=!1,p=!0)}},497:(e,t,r)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.checkLastError=t.iterateExtraOptions=t.allocWasmString=void 0;const n=r(263);t.allocWasmString=(e,t)=>{const r=(0,n.getInstance)(),a=r.lengthBytesUTF8(e)+1,o=r._malloc(a);return r.stringToUTF8(e,o,a),t.push(o),o},t.iterateExtraOptions=(e,r,n,a)=>{if(\\\"object\\\"==typeof e&&null!==e){if(n.has(e))throw new Error(\\\"Circular reference in options\\\");n.add(e)}Object.entries(e).forEach((([e,o])=>{const i=r?r+e:e;if(\\\"object\\\"==typeof o)(0,t.iterateExtraOptions)(o,i+\\\".\\\",n,a);else if(\\\"string\\\"==typeof o||\\\"number\\\"==typeof o)a(i,o.toString());else{if(\\\"boolean\\\"!=typeof o)throw new Error(\\\"Can't handle extra config type: \\\"+typeof o);a(i,o?\\\"1\\\":\\\"0\\\")}}))},t.checkLastError=e=>{const t=(0,n.getInstance)(),r=t.stackSave();try{const r=t.stackAlloc(8);t._OrtGetLastError(r,r+4);const n=t.HEAP32[r/4],a=t.HEAPU32[r/4+1],o=a?t.UTF8ToString(a):\\\"\\\";throw new Error(`${e} ERROR_CODE: ${n}, ERROR_MESSAGE: ${o}`)}finally{t.stackRestore(r)}}},474:(e,t,r)=>{var _scriptDir,n=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\\\"undefined\\\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(e={}){function t(){return k.buffer!=D.buffer&&Y(),D}function n(){return k.buffer!=D.buffer&&Y(),I}function a(){return k.buffer!=D.buffer&&Y(),U}function o(){return k.buffer!=D.buffer&&Y(),L}function i(){return k.buffer!=D.buffer&&Y(),W}var s,u,c=e;c.ready=new Promise(((e,t)=>{s=e,u=t}));var l,f,d,p=Object.assign({},c),g=\\\"./this.program\\\",h=(e,t)=>{throw t},m=\\\"object\\\"==typeof window,y=\\\"function\\\"==typeof importScripts,v=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,b=c.ENVIRONMENT_IS_PTHREAD||!1,w=\\\"\\\";function _(e){return c.locateFile?c.locateFile(e,w):w+e}if(v){var O=r(384),S=r(908);let t;w=y?S.dirname(w)+\\\"/\\\":__dirname+\\\"/\\\",l=(e,t)=>(e=e.startsWith(\\\"file://\\\")?new URL(e):S.normalize(e),O.readFileSync(e,t?void 0:\\\"utf8\\\")),d=e=>((e=l(e,!0)).buffer||(e=new Uint8Array(e)),e),f=(e,t,r,n=!0)=>{e=e.startsWith(\\\"file://\\\")?new URL(e):S.normalize(e),O.readFile(e,n?void 0:\\\"utf8\\\",((e,a)=>{e?r(e):t(n?a.buffer:a)}))},!c.thisProgram&&1<process.argv.length&&(g=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),h=(e,t)=>{throw process.exitCode=e,t},c.inspect=()=>\\\"[Emscripten Module object]\\\";try{t=r(925)}catch(e){throw console.error('The \\\"worker_threads\\\" module is not supported in this node.js build - perhaps a newer version is needed?'),e}global.Worker=t.Worker}else(m||y)&&(y?w=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(w=document.currentScript.src),_scriptDir&&(w=_scriptDir),w=0!==w.indexOf(\\\"blob:\\\")?w.substr(0,w.replace(/[?#].*/,\\\"\\\").lastIndexOf(\\\"/\\\")+1):\\\"\\\",v||(l=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.send(null),t.responseText},y&&(d=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.responseType=\\\"arraybuffer\\\",t.send(null),new Uint8Array(t.response)}),f=(e,t,r)=>{var n=new XMLHttpRequest;n.open(\\\"GET\\\",e,!0),n.responseType=\\\"arraybuffer\\\",n.onload=()=>{200==n.status||0==n.status&&n.response?t(n.response):r()},n.onerror=r,n.send(null)}));v&&\\\"undefined\\\"==typeof performance&&(global.performance=r(953).performance);var E=console.log.bind(console),A=console.error.bind(console);v&&(E=(...e)=>O.writeSync(1,e.join(\\\" \\\")+\\\"\\\\n\\\"),A=(...e)=>O.writeSync(2,e.join(\\\" \\\")+\\\"\\\\n\\\"));var T,M=c.print||E,R=c.printErr||A;Object.assign(c,p),p=null,c.thisProgram&&(g=c.thisProgram),c.quit&&(h=c.quit),c.wasmBinary&&(T=c.wasmBinary);var F=c.noExitRuntime||!0;\\\"object\\\"!=typeof WebAssembly&&te(\\\"no native wasm support detected\\\");var k,C,P,x,D,I,U,L,W,H=!1;function Y(){var e=k.buffer;c.HEAP8=D=new Int8Array(e),c.HEAP16=new Int16Array(e),c.HEAP32=U=new Int32Array(e),c.HEAPU8=I=new Uint8Array(e),c.HEAPU16=new Uint16Array(e),c.HEAPU32=L=new Uint32Array(e),c.HEAPF32=new Float32Array(e),c.HEAPF64=W=new Float64Array(e)}var j=c.INITIAL_MEMORY||16777216;if(5242880<=j||te(\\\"INITIAL_MEMORY should be larger than STACK_SIZE, was \\\"+j+\\\"! (STACK_SIZE=5242880)\\\"),b)k=c.wasmMemory;else if(c.wasmMemory)k=c.wasmMemory;else if(!((k=new WebAssembly.Memory({initial:j/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw R(\\\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\\\"),v&&R(\\\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)\\\"),Error(\\\"bad memory\\\");Y(),j=k.buffer.byteLength;var z,G=[],N=[],B=[],$=0;function q(){return F||0<$}var V,J,X=0,K=null,Z=null;function Q(){X++,c.monitorRunDependencies&&c.monitorRunDependencies(X)}function ee(){if(X--,c.monitorRunDependencies&&c.monitorRunDependencies(X),0==X&&(null!==K&&(clearInterval(K),K=null),Z)){var e=Z;Z=null,e()}}function te(e){throw c.onAbort&&c.onAbort(e),R(e=\\\"Aborted(\\\"+e+\\\")\\\"),H=!0,x=1,e=new WebAssembly.RuntimeError(e+\\\". Build with -sASSERTIONS for more info.\\\"),u(e),e}function re(e){return e.startsWith(\\\"data:application/octet-stream;base64,\\\")}function ne(e){if(e==V&&T)return new Uint8Array(T);if(d)return d(e);throw\\\"both async and sync fetching of the wasm failed\\\"}function ae(e,t,r){return function(e){if(!T&&(m||y)){if(\\\"function\\\"==typeof fetch&&!e.startsWith(\\\"file://\\\"))return fetch(e,{credentials:\\\"same-origin\\\"}).then((t=>{if(!t.ok)throw\\\"failed to load wasm binary file at '\\\"+e+\\\"'\\\";return t.arrayBuffer()})).catch((()=>ne(e)));if(f)return new Promise(((t,r)=>{f(e,(e=>t(new Uint8Array(e))),r)}))}return Promise.resolve().then((()=>ne(e)))}(e).then((e=>WebAssembly.instantiate(e,t))).then((e=>e)).then(r,(e=>{R(\\\"failed to asynchronously prepare wasm: \\\"+e),te(e)}))}function oe(e){this.name=\\\"ExitStatus\\\",this.message=`Program terminated with exit(${e})`,this.status=e}function ie(e){e.terminate(),e.onmessage=()=>{}}function se(e){(e=ge.Fa[e])||te(),ge.fb(e)}function ue(e){var t=ge.Za();if(!t)return 6;ge.Ia.push(t),ge.Fa[e.Ha]=t,t.Ha=e.Ha;var r={cmd:\\\"run\\\",start_routine:e.gb,arg:e.Ya,pthread_ptr:e.Ha};return v&&t.unref(),t.postMessage(r,e.mb),0}re(V=\\\"ort-wasm-threaded.wasm\\\")||(V=_(V));var ce=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf8\\\"):void 0,le=(e,t,r)=>{var n=(t>>>=0)+r;for(r=t;e[r]&&!(r>=n);)++r;if(16<r-t&&e.buffer&&ce)return ce.decode(e.buffer instanceof SharedArrayBuffer?e.slice(t,r):e.subarray(t,r));for(n=\\\"\\\";t<r;){var a=e[t++];if(128&a){var o=63&e[t++];if(192==(224&a))n+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[t++])?n+=String.fromCharCode(a):(a-=65536,n+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else n+=String.fromCharCode(a)}return n},fe=(e,t)=>(e>>>=0)?le(n(),e,t):\\\"\\\";function de(e){if(b)return qe(1,1,e);x=e,q()||(ge.hb(),c.onExit&&c.onExit(e),H=!0),h(e,new oe(e))}var pe=e=>{if(x=e,b)throw me(e),\\\"unwind\\\";de(e)},ge={La:[],Ia:[],Ta:[],Fa:{},Pa:function(){b?ge.ab():ge.$a()},$a:function(){G.unshift((()=>{Q(),ge.bb((()=>ee()))}))},ab:function(){ge.receiveObjectTransfer=ge.eb,ge.threadInitTLS=ge.Sa,ge.setExitStatus=ge.Ra,F=!1},Ra:function(e){x=e},rb:[\\\"$terminateWorker\\\"],hb:function(){for(var e of ge.Ia)ie(e);for(e of ge.La)ie(e);ge.La=[],ge.Ia=[],ge.Fa=[]},fb:function(e){var t=e.Ha;delete ge.Fa[t],ge.La.push(e),ge.Ia.splice(ge.Ia.indexOf(e),1),e.Ha=0,yt(t)},eb:function(){},Sa:function(){ge.Ta.forEach((e=>e()))},cb:e=>new Promise((t=>{e.onmessage=r=>{var n=(r=r.data).cmd;if(r.targetThread&&r.targetThread!=dt()){var a=ge.Fa[r.qb];a?a.postMessage(r,r.transferList):R('Internal error! Worker sent a message \\\"'+n+'\\\" to target pthread '+r.targetThread+\\\", but that thread no longer exists!\\\")}else\\\"checkMailbox\\\"===n?He():\\\"spawnThread\\\"===n?ue(r):\\\"cleanupThread\\\"===n?se(r.thread):\\\"killThread\\\"===n?(r=r.thread,n=ge.Fa[r],delete ge.Fa[r],ie(n),yt(r),ge.Ia.splice(ge.Ia.indexOf(n),1),n.Ha=0):\\\"cancelThread\\\"===n?ge.Fa[r.thread].postMessage({cmd:\\\"cancel\\\"}):\\\"loaded\\\"===n?(e.loaded=!0,t(e)):\\\"alert\\\"===n?alert(\\\"Thread \\\"+r.threadId+\\\": \\\"+r.text):\\\"setimmediate\\\"===r.target?e.postMessage(r):\\\"callHandler\\\"===n?c[r.handler](...r.args):n&&R(\\\"worker sent an unknown command \\\"+n)},e.onerror=e=>{throw R(\\\"worker sent an error! \\\"+e.filename+\\\":\\\"+e.lineno+\\\": \\\"+e.message),e},v&&(e.on(\\\"message\\\",(function(t){e.onmessage({data:t})})),e.on(\\\"error\\\",(function(t){e.onerror(t)})));var r,n=[];for(r of[\\\"onExit\\\",\\\"onAbort\\\",\\\"print\\\",\\\"printErr\\\"])c.hasOwnProperty(r)&&n.push(r);e.postMessage({cmd:\\\"load\\\",handlers:n,urlOrBlob:c.mainScriptUrlOrBlob||_scriptDir,wasmMemory:k,wasmModule:P})})),bb:function(e){e()},Xa:function(){var e=_(\\\"ort-wasm-threaded.worker.js\\\");e=new Worker(e),ge.La.push(e)},Za:function(){return 0==ge.La.length&&(ge.Xa(),ge.cb(ge.La[0])),ge.La.pop()}};c.PThread=ge;var he=e=>{for(;0<e.length;)e.shift()(c)};function me(e){if(b)return qe(2,0,e);pe(e)}c.establishStackSpace=function(){var e=dt(),t=a()[e+52>>2>>>0];e=a()[e+56>>2>>>0],_t(t,t-e),St(t)};var ye=[];function ve(e){this.Oa=e-24,this.Wa=function(e){o()[this.Oa+4>>2>>>0]=e},this.Va=function(e){o()[this.Oa+8>>2>>>0]=e},this.Pa=function(e,t){this.Ua(),this.Wa(e),this.Va(t)},this.Ua=function(){o()[this.Oa+16>>2>>>0]=0}}function be(e,t,r,n){return b?qe(3,1,e,t,r,n):we(e,t,r,n)}function we(e,t,r,n){if(e>>>=0,t>>>=0,r>>>=0,n>>>=0,\\\"undefined\\\"==typeof SharedArrayBuffer)return R(\\\"Current environment does not support SharedArrayBuffer, pthreads are not available!\\\"),6;var a=[];return b&&0===a.length?be(e,t,r,n):(e={gb:r,Ha:e,Ya:n,mb:a},b?(e.ob=\\\"spawnThread\\\",postMessage(e,a),0):ue(e))}function _e(e,t,r){return b?qe(4,1,e,t,r):0}function Oe(e,t){if(b)return qe(5,1,e,t)}c.invokeEntryPoint=function(e,t){var r=ye[e];r||(e>=ye.length&&(ye.length=e+1),ye[e]=r=z.get(e)),e=r(t),q()?ge.Ra(e):vt(e)};var Se=e=>{for(var t=0,r=0;r<e.length;++r){var n=e.charCodeAt(r);127>=n?t++:2047>=n?t+=2:55296<=n&&57343>=n?(t+=4,++r):t+=3}return t},Ee=(e,t,r,n)=>{if(!(0<n))return 0;var a=r>>>=0;n=r+n-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(r>=n)break;t[r++>>>0]=i}else{if(2047>=i){if(r+1>=n)break;t[r++>>>0]=192|i>>6}else{if(65535>=i){if(r+2>=n)break;t[r++>>>0]=224|i>>12}else{if(r+3>=n)break;t[r++>>>0]=240|i>>18,t[r++>>>0]=128|i>>12&63}t[r++>>>0]=128|i>>6&63}t[r++>>>0]=128|63&i}}return t[r>>>0]=0,r-a},Ae=(e,t,r)=>Ee(e,n(),t,r);function Te(e,t){if(b)return qe(6,1,e,t)}function Me(e,t,r){if(b)return qe(7,1,e,t,r)}function Re(e,t,r){return b?qe(8,1,e,t,r):0}function Fe(e,t){if(b)return qe(9,1,e,t)}function ke(e,t,r){if(b)return qe(10,1,e,t,r)}function Ce(e,t,r,n){if(b)return qe(11,1,e,t,r,n)}function Pe(e,t,r,n){if(b)return qe(12,1,e,t,r,n)}function xe(e,t,r,n){if(b)return qe(13,1,e,t,r,n)}function De(e){if(b)return qe(14,1,e)}function Ie(e,t){if(b)return qe(15,1,e,t)}function Ue(e,t,r){if(b)return qe(16,1,e,t,r)}var Le=e=>{if(!H)try{if(e(),!q())try{b?vt(x):pe(x)}catch(e){e instanceof oe||\\\"unwind\\\"==e||h(1,e)}}catch(e){e instanceof oe||\\\"unwind\\\"==e||h(1,e)}};function We(e){e>>>=0,\\\"function\\\"==typeof Atomics.nb&&(Atomics.nb(a(),e>>2,e).value.then(He),e+=128,Atomics.store(a(),e>>2,1))}function He(){var e=dt();e&&(We(e),Le((()=>bt())))}c.__emscripten_thread_mailbox_await=We,c.checkMailbox=He;var Ye=e=>0==e%4&&(0!=e%100||0==e%400),je=[0,31,60,91,121,152,182,213,244,274,305,335],ze=[0,31,59,90,120,151,181,212,243,273,304,334];function Ge(e,t,r,n,a,o,i,s){return b?qe(17,1,e,t,r,n,a,o,i,s):-52}function Ne(e,t,r,n,a,o,i){if(b)return qe(18,1,e,t,r,n,a,o,i)}var Be=e=>{var t=Se(e)+1,r=pt(t);return r&&Ae(e,r,t),r},$e=e=>{var t=Ot();return e=e(),St(t),e};function qe(e,t){var r=arguments.length-2,n=arguments;return $e((()=>{for(var a=Et(8*r),o=a>>3,s=0;s<r;s++){var u=n[2+s];i()[o+s>>>0]=u}return mt(e,r,a,t)}))}var Ve,Je=[],Xe={},Ke=()=>{if(!Ve){var e,t={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:g||\\\"./this.program\\\"};for(e in Xe)void 0===Xe[e]?delete t[e]:t[e]=Xe[e];var r=[];for(e in t)r.push(`${e}=${t[e]}`);Ve=r}return Ve};function Ze(e,r){if(b)return qe(19,1,e,r);e>>>=0,r>>>=0;var n=0;return Ke().forEach((function(a,i){var s=r+n;for(i=o()[e+4*i>>2>>>0]=s,s=0;s<a.length;++s)t()[i++>>0>>>0]=a.charCodeAt(s);t()[i>>0>>>0]=0,n+=a.length+1})),0}function Qe(e,t){if(b)return qe(20,1,e,t);e>>>=0,t>>>=0;var r=Ke();o()[e>>2>>>0]=r.length;var n=0;return r.forEach((function(e){n+=e.length+1})),o()[t>>2>>>0]=n,0}function et(e){return b?qe(21,1,e):52}function tt(e,t,r,n){return b?qe(22,1,e,t,r,n):52}function rt(e,t,r,n,a){return b?qe(23,1,e,t,r,n,a):70}var nt=[null,[],[]];function at(e,t,r,a){if(b)return qe(24,1,e,t,r,a);t>>>=0,r>>>=0,a>>>=0;for(var i=0,s=0;s<r;s++){var u=o()[t>>2>>>0],c=o()[t+4>>2>>>0];t+=8;for(var l=0;l<c;l++){var f=n()[u+l>>>0],d=nt[e];0===f||10===f?((1===e?M:R)(le(d,0)),d.length=0):d.push(f)}i+=c}return o()[a>>2>>>0]=i,0}var ot=e=>(ot=(()=>{if(\\\"object\\\"==typeof crypto&&\\\"function\\\"==typeof crypto.getRandomValues)return e=>(e.set(crypto.getRandomValues(new Uint8Array(e.byteLength))),e);if(v)try{var e=r(760);if(e.randomFillSync)return t=>e.randomFillSync(t);var t=e.randomBytes;return e=>(e.set(t(e.byteLength)),e)}catch(e){}te(\\\"initRandomDevice\\\")})())(e),it=[31,29,31,30,31,30,31,31,30,31,30,31],st=[31,28,31,30,31,30,31,31,30,31,30,31],ut=(e,r)=>{t().set(e,r>>>0)};function ct(e,t,r,n){function o(e,t,r){for(e=\\\"number\\\"==typeof e?e.toString():e||\\\"\\\";e.length<t;)e=r[0]+e;return e}function i(e,t){return o(e,t,\\\"0\\\")}function s(e,t){function r(e){return 0>e?-1:0<e?1:0}var n;return 0===(n=r(e.getFullYear()-t.getFullYear()))&&0===(n=r(e.getMonth()-t.getMonth()))&&(n=r(e.getDate()-t.getDate())),n}function u(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function c(e){var t=e.Ja;for(e=new Date(new Date(e.Ka+1900,0,1).getTime());0<t;){var r=e.getMonth(),n=(Ye(e.getFullYear())?it:st)[r];if(!(t>n-e.getDate())){e.setDate(e.getDate()+t);break}t-=n-e.getDate()+1,e.setDate(1),11>r?e.setMonth(r+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return r=new Date(e.getFullYear()+1,0,4),t=u(new Date(e.getFullYear(),0,4)),r=u(r),0>=s(t,e)?0>=s(r,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}e>>>=0,t>>>=0,r>>>=0,n>>>=0;var l=a()[n+40>>2>>>0];for(var f in n={kb:a()[n>>2>>>0],jb:a()[n+4>>2>>>0],Ma:a()[n+8>>2>>>0],Qa:a()[n+12>>2>>>0],Na:a()[n+16>>2>>>0],Ka:a()[n+20>>2>>>0],Ga:a()[n+24>>2>>>0],Ja:a()[n+28>>2>>>0],sb:a()[n+32>>2>>>0],ib:a()[n+36>>2>>>0],lb:l?fe(l):\\\"\\\"},r=fe(r),l={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})r=r.replace(new RegExp(f,\\\"g\\\"),l[f]);var d=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),p=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(f in l={\\\"%a\\\":e=>d[e.Ga].substring(0,3),\\\"%A\\\":e=>d[e.Ga],\\\"%b\\\":e=>p[e.Na].substring(0,3),\\\"%B\\\":e=>p[e.Na],\\\"%C\\\":e=>i((e.Ka+1900)/100|0,2),\\\"%d\\\":e=>i(e.Qa,2),\\\"%e\\\":e=>o(e.Qa,2,\\\" \\\"),\\\"%g\\\":e=>c(e).toString().substring(2),\\\"%G\\\":e=>c(e),\\\"%H\\\":e=>i(e.Ma,2),\\\"%I\\\":e=>(0==(e=e.Ma)?e=12:12<e&&(e-=12),i(e,2)),\\\"%j\\\":e=>{for(var t=0,r=0;r<=e.Na-1;t+=(Ye(e.Ka+1900)?it:st)[r++]);return i(e.Qa+t,3)},\\\"%m\\\":e=>i(e.Na+1,2),\\\"%M\\\":e=>i(e.jb,2),\\\"%n\\\":()=>\\\"\\\\n\\\",\\\"%p\\\":e=>0<=e.Ma&&12>e.Ma?\\\"AM\\\":\\\"PM\\\",\\\"%S\\\":e=>i(e.kb,2),\\\"%t\\\":()=>\\\"\\\\t\\\",\\\"%u\\\":e=>e.Ga||7,\\\"%U\\\":e=>i(Math.floor((e.Ja+7-e.Ga)/7),2),\\\"%V\\\":e=>{var t=Math.floor((e.Ja+7-(e.Ga+6)%7)/7);if(2>=(e.Ga+371-e.Ja-2)%7&&t++,t)53==t&&(4==(r=(e.Ga+371-e.Ja)%7)||3==r&&Ye(e.Ka)||(t=1));else{t=52;var r=(e.Ga+7-e.Ja-1)%7;(4==r||5==r&&Ye(e.Ka%400-1))&&t++}return i(t,2)},\\\"%w\\\":e=>e.Ga,\\\"%W\\\":e=>i(Math.floor((e.Ja+7-(e.Ga+6)%7)/7),2),\\\"%y\\\":e=>(e.Ka+1900).toString().substring(2),\\\"%Y\\\":e=>e.Ka+1900,\\\"%z\\\":e=>{var t=0<=(e=e.ib);return e=Math.abs(e)/60,(t?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(e/60*100+e%60)).slice(-4)},\\\"%Z\\\":e=>e.lb,\\\"%%\\\":()=>\\\"%\\\"},r=r.replace(/%%/g,\\\"\\\\0\\\\0\\\"),l)r.includes(f)&&(r=r.replace(new RegExp(f,\\\"g\\\"),l[f](n)));return f=function(e){var t=Array(Se(e)+1);return Ee(e,t,0,t.length),t}(r=r.replace(/\\\\0\\\\0/g,\\\"%\\\")),f.length>t?0:(ut(f,e),f.length-1)}ge.Pa();var lt=[null,de,me,be,_e,Oe,Te,Me,Re,Fe,ke,Ce,Pe,xe,De,Ie,Ue,Ge,Ne,Ze,Qe,et,tt,rt,at],ft={b:function(e,t,r){throw new ve(e>>>=0).Pa(t>>>0,r>>>0),e},N:function(e){gt(e>>>0,!y,1,!m,131072,!1),ge.Sa()},k:function(e){e>>>=0,b?postMessage({cmd:\\\"cleanupThread\\\",thread:e}):se(e)},I:we,h:_e,T:Oe,E:Te,G:Me,U:Re,R:Fe,J:ke,Q:Ce,o:Pe,F:xe,C:De,S:Ie,D:Ue,q:()=>!0,A:function(e,t){(e>>>=0)==t>>>0?setTimeout((()=>He())):b?postMessage({targetThread:e,cmd:\\\"checkMailbox\\\"}):(e=ge.Fa[e])&&e.postMessage({cmd:\\\"checkMailbox\\\"})},L:function(){return-1},M:We,p:function(e){v&&ge.Fa[e>>>0].ref()},t:function(e,t,r){e=t+2097152>>>0<4194305-!!e?(e>>>0)+4294967296*t:NaN,r>>>=0,e=new Date(1e3*e),a()[r>>2>>>0]=e.getUTCSeconds(),a()[r+4>>2>>>0]=e.getUTCMinutes(),a()[r+8>>2>>>0]=e.getUTCHours(),a()[r+12>>2>>>0]=e.getUTCDate(),a()[r+16>>2>>>0]=e.getUTCMonth(),a()[r+20>>2>>>0]=e.getUTCFullYear()-1900,a()[r+24>>2>>>0]=e.getUTCDay(),e=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,a()[r+28>>2>>>0]=e},u:function(e,t,r){e=t+2097152>>>0<4194305-!!e?(e>>>0)+4294967296*t:NaN,r>>>=0,e=new Date(1e3*e),a()[r>>2>>>0]=e.getSeconds(),a()[r+4>>2>>>0]=e.getMinutes(),a()[r+8>>2>>>0]=e.getHours(),a()[r+12>>2>>>0]=e.getDate(),a()[r+16>>2>>>0]=e.getMonth(),a()[r+20>>2>>>0]=e.getFullYear()-1900,a()[r+24>>2>>>0]=e.getDay(),t=(Ye(e.getFullYear())?je:ze)[e.getMonth()]+e.getDate()-1|0,a()[r+28>>2>>>0]=t,a()[r+36>>2>>>0]=-60*e.getTimezoneOffset(),t=new Date(e.getFullYear(),6,1).getTimezoneOffset();var n=new Date(e.getFullYear(),0,1).getTimezoneOffset();e=0|(t!=n&&e.getTimezoneOffset()==Math.min(n,t)),a()[r+32>>2>>>0]=e},v:function(e){e>>>=0;var t=new Date(a()[e+20>>2>>>0]+1900,a()[e+16>>2>>>0],a()[e+12>>2>>>0],a()[e+8>>2>>>0],a()[e+4>>2>>>0],a()[e>>2>>>0],0),r=a()[e+32>>2>>>0],n=t.getTimezoneOffset(),o=new Date(t.getFullYear(),6,1).getTimezoneOffset(),i=new Date(t.getFullYear(),0,1).getTimezoneOffset(),s=Math.min(i,o);return 0>r?a()[e+32>>2>>>0]=Number(o!=i&&s==n):0<r!=(s==n)&&(o=Math.max(i,o),t.setTime(t.getTime()+6e4*((0<r?s:o)-n))),a()[e+24>>2>>>0]=t.getDay(),r=(Ye(t.getFullYear())?je:ze)[t.getMonth()]+t.getDate()-1|0,a()[e+28>>2>>>0]=r,a()[e>>2>>>0]=t.getSeconds(),a()[e+4>>2>>>0]=t.getMinutes(),a()[e+8>>2>>>0]=t.getHours(),a()[e+12>>2>>>0]=t.getDate(),a()[e+16>>2>>>0]=t.getMonth(),a()[e+20>>2>>>0]=t.getYear(),e=t.getTime()/1e3,wt((J=e,1<=+Math.abs(J)?0<J?+Math.floor(J/4294967296)>>>0:~~+Math.ceil((J-+(~~J>>>0))/4294967296)>>>0:0)),e>>>0},r:Ge,s:Ne,z:function(e,t,r){function n(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\\\"GMT\\\"}e>>>=0,t>>>=0,r>>>=0;var i=(new Date).getFullYear(),s=new Date(i,0,1),u=new Date(i,6,1);i=s.getTimezoneOffset();var c=u.getTimezoneOffset(),l=Math.max(i,c);o()[e>>2>>>0]=60*l,a()[t>>2>>>0]=Number(i!=c),e=n(s),t=n(u),e=Be(e),t=Be(t),c<i?(o()[r>>2>>>0]=e,o()[r+4>>2>>>0]=t):(o()[r>>2>>>0]=t,o()[r+4>>2>>>0]=e)},c:()=>{te(\\\"\\\")},l:function(){},i:function(){return Date.now()},V:()=>{throw $+=1,\\\"unwind\\\"},B:function(){return 4294901760},e:()=>performance.timeOrigin+performance.now(),f:function(){return v?r(993).cpus().length:navigator.hardwareConcurrency},K:function(e,t,r,n){for(ge.pb=t>>>0,Je.length=r,t=n>>>0>>3,n=0;n<r;n++)Je[n]=i()[t+n>>>0];return lt[e].apply(null,Je)},y:function(e){e>>>=0;var t=n().length;if(e<=t||4294901760<e)return!1;for(var r=1;4>=r;r*=2){var a=t*(1+.2/r);a=Math.min(a,e+100663296);var o=Math;a=Math.max(e,a);e:{o=o.min.call(o,4294901760,a+(65536-a%65536)%65536)-k.buffer.byteLength+65535>>>16;try{k.grow(o),Y();var i=1;break e}catch(e){}i=void 0}if(i)return!0}return!1},O:Ze,P:Qe,j:pe,g:et,n:tt,w:rt,m:at,x:function(e,t){return e>>>=0,t>>>=0,ot(n().subarray(e>>>0,e+t>>>0)),0},a:k||c.wasmMemory,H:ct,d:function(e,t,r,n){return ct(e>>>0,t>>>0,r>>>0,n>>>0)}};!function(){function e(e,t){return e=e.exports,C=e=function(e){var t=e=>()=>e()>>>0,r=e=>t=>e(t)>>>0;return(e=Object.assign({},e)).__errno_location=t(e.__errno_location),e.pthread_self=t(e.pthread_self),e.malloc=r(e.malloc),e.stackSave=t(e.stackSave),e.stackAlloc=r(e.stackAlloc),e}(e),ge.Ta.push(C.sa),z=C.ta,N.unshift(C.W),P=t,ee(),e}var t={a:ft};if(Q(),c.instantiateWasm)try{return c.instantiateWasm(t,e)}catch(e){R(\\\"Module.instantiateWasm callback failed with error: \\\"+e),u(e)}(function(e,t){var r=V;return T||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||re(r)||r.startsWith(\\\"file://\\\")||v||\\\"function\\\"!=typeof fetch?ae(r,e,t):fetch(r,{credentials:\\\"same-origin\\\"}).then((n=>WebAssembly.instantiateStreaming(n,e).then(t,(function(n){return R(\\\"wasm streaming compile failed: \\\"+n),R(\\\"falling back to ArrayBuffer instantiation\\\"),ae(r,e,t)}))))})(t,(function(t){e(t.instance,t.module)})).catch(u)}(),c._OrtInit=(e,t)=>(c._OrtInit=C.X)(e,t),c._OrtGetLastError=(e,t)=>(c._OrtGetLastError=C.Y)(e,t),c._OrtCreateSessionOptions=(e,t,r,n,a,o,i,s,u,l)=>(c._OrtCreateSessionOptions=C.Z)(e,t,r,n,a,o,i,s,u,l),c._OrtAppendExecutionProvider=(e,t)=>(c._OrtAppendExecutionProvider=C._)(e,t),c._OrtAddSessionConfigEntry=(e,t,r)=>(c._OrtAddSessionConfigEntry=C.$)(e,t,r),c._OrtReleaseSessionOptions=e=>(c._OrtReleaseSessionOptions=C.aa)(e),c._OrtCreateSession=(e,t,r)=>(c._OrtCreateSession=C.ba)(e,t,r),c._OrtReleaseSession=e=>(c._OrtReleaseSession=C.ca)(e),c._OrtGetInputOutputCount=(e,t,r)=>(c._OrtGetInputOutputCount=C.da)(e,t,r),c._OrtGetInputName=(e,t)=>(c._OrtGetInputName=C.ea)(e,t),c._OrtGetOutputName=(e,t)=>(c._OrtGetOutputName=C.fa)(e,t),c._OrtFree=e=>(c._OrtFree=C.ga)(e),c._OrtCreateTensor=(e,t,r,n,a)=>(c._OrtCreateTensor=C.ha)(e,t,r,n,a),c._OrtGetTensorData=(e,t,r,n,a)=>(c._OrtGetTensorData=C.ia)(e,t,r,n,a),c._OrtReleaseTensor=e=>(c._OrtReleaseTensor=C.ja)(e),c._OrtCreateRunOptions=(e,t,r,n)=>(c._OrtCreateRunOptions=C.ka)(e,t,r,n),c._OrtAddRunConfigEntry=(e,t,r)=>(c._OrtAddRunConfigEntry=C.la)(e,t,r),c._OrtReleaseRunOptions=e=>(c._OrtReleaseRunOptions=C.ma)(e),c._OrtRun=(e,t,r,n,a,o,i,s)=>(c._OrtRun=C.na)(e,t,r,n,a,o,i,s),c._OrtEndProfiling=e=>(c._OrtEndProfiling=C.oa)(e);var dt=c._pthread_self=()=>(dt=c._pthread_self=C.pa)(),pt=c._malloc=e=>(pt=c._malloc=C.qa)(e);c._free=e=>(c._free=C.ra)(e),c.__emscripten_tls_init=()=>(c.__emscripten_tls_init=C.sa)();var gt=c.__emscripten_thread_init=(e,t,r,n,a,o)=>(gt=c.__emscripten_thread_init=C.ua)(e,t,r,n,a,o);c.__emscripten_thread_crashed=()=>(c.__emscripten_thread_crashed=C.va)();var ht,mt=(e,t,r,n)=>(mt=C.wa)(e,t,r,n),yt=e=>(yt=C.xa)(e),vt=c.__emscripten_thread_exit=e=>(vt=c.__emscripten_thread_exit=C.ya)(e),bt=c.__emscripten_check_mailbox=()=>(bt=c.__emscripten_check_mailbox=C.za)(),wt=e=>(wt=C.Aa)(e),_t=(e,t)=>(_t=C.Ba)(e,t),Ot=()=>(Ot=C.Ca)(),St=e=>(St=C.Da)(e),Et=e=>(Et=C.Ea)(e);function At(){function e(){if(!ht&&(ht=!0,c.calledRun=!0,!H)&&(b||he(N),s(c),c.onRuntimeInitialized&&c.onRuntimeInitialized(),!b)){if(c.postRun)for(\\\"function\\\"==typeof c.postRun&&(c.postRun=[c.postRun]);c.postRun.length;){var e=c.postRun.shift();B.unshift(e)}he(B)}}if(!(0<X))if(b)s(c),b||he(N),startWorker(c);else{if(c.preRun)for(\\\"function\\\"==typeof c.preRun&&(c.preRun=[c.preRun]);c.preRun.length;)G.unshift(c.preRun.shift());he(G),0<X||(c.setStatus?(c.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){c.setStatus(\\\"\\\")}),1),e()}),1)):e())}}if(c.keepRuntimeAlive=q,c.wasmMemory=k,c.stackAlloc=Et,c.stackSave=Ot,c.stackRestore=St,c.UTF8ToString=fe,c.stringToUTF8=Ae,c.lengthBytesUTF8=Se,c.ExitStatus=oe,c.PThread=ge,Z=function e(){ht||At(),ht||(Z=e)},c.preInit)for(\\\"function\\\"==typeof c.preInit&&(c.preInit=[c.preInit]);0<c.preInit.length;)c.preInit.pop()();return At(),e.ready});e.exports=n},932:(e,t,r)=>{var _scriptDir,n=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\\\"undefined\\\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(e={}){var t,n,a=e;a.ready=new Promise(((e,r)=>{t=e,n=r}));var o,i,s,u=Object.assign({},a),c=\\\"./this.program\\\",l=(e,t)=>{throw t},f=\\\"object\\\"==typeof window,d=\\\"function\\\"==typeof importScripts,p=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,g=\\\"\\\";if(p){var h=r(384),m=r(908);g=d?m.dirname(g)+\\\"/\\\":__dirname+\\\"/\\\",o=(e,t)=>(e=e.startsWith(\\\"file://\\\")?new URL(e):m.normalize(e),h.readFileSync(e,t?void 0:\\\"utf8\\\")),s=e=>((e=o(e,!0)).buffer||(e=new Uint8Array(e)),e),i=(e,t,r,n=!0)=>{e=e.startsWith(\\\"file://\\\")?new URL(e):m.normalize(e),h.readFile(e,n?void 0:\\\"utf8\\\",((e,a)=>{e?r(e):t(n?a.buffer:a)}))},!a.thisProgram&&1<process.argv.length&&(c=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),l=(e,t)=>{throw process.exitCode=e,t},a.inspect=()=>\\\"[Emscripten Module object]\\\"}else(f||d)&&(d?g=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(g=document.currentScript.src),_scriptDir&&(g=_scriptDir),g=0!==g.indexOf(\\\"blob:\\\")?g.substr(0,g.replace(/[?#].*/,\\\"\\\").lastIndexOf(\\\"/\\\")+1):\\\"\\\",o=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.send(null),t.responseText},d&&(s=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.responseType=\\\"arraybuffer\\\",t.send(null),new Uint8Array(t.response)}),i=(e,t,r)=>{var n=new XMLHttpRequest;n.open(\\\"GET\\\",e,!0),n.responseType=\\\"arraybuffer\\\",n.onload=()=>{200==n.status||0==n.status&&n.response?t(n.response):r()},n.onerror=r,n.send(null)});var y,v=a.print||console.log.bind(console),b=a.printErr||console.error.bind(console);Object.assign(a,u),u=null,a.thisProgram&&(c=a.thisProgram),a.quit&&(l=a.quit),a.wasmBinary&&(y=a.wasmBinary);var w=a.noExitRuntime||!0;\\\"object\\\"!=typeof WebAssembly&&W(\\\"no native wasm support detected\\\");var _,O,S,E,A,T,M=!1;function R(){var e=_.buffer;a.HEAP8=S=new Int8Array(e),a.HEAP16=new Int16Array(e),a.HEAP32=A=new Int32Array(e),a.HEAPU8=E=new Uint8Array(e),a.HEAPU16=new Uint16Array(e),a.HEAPU32=T=new Uint32Array(e),a.HEAPF32=new Float32Array(e),a.HEAPF64=new Float64Array(e)}var F=[],k=[],C=[];function P(){var e=a.preRun.shift();F.unshift(e)}var x,D,I=0,U=null,L=null;function W(e){throw a.onAbort&&a.onAbort(e),b(e=\\\"Aborted(\\\"+e+\\\")\\\"),M=!0,e=new WebAssembly.RuntimeError(e+\\\". Build with -sASSERTIONS for more info.\\\"),n(e),e}function H(e){return e.startsWith(\\\"data:application/octet-stream;base64,\\\")}if(!H(x=\\\"ort-wasm.wasm\\\")){var Y=x;x=a.locateFile?a.locateFile(Y,g):g+Y}function j(e){if(e==x&&y)return new Uint8Array(y);if(s)return s(e);throw\\\"both async and sync fetching of the wasm failed\\\"}function z(e,t,r){return function(e){if(!y&&(f||d)){if(\\\"function\\\"==typeof fetch&&!e.startsWith(\\\"file://\\\"))return fetch(e,{credentials:\\\"same-origin\\\"}).then((t=>{if(!t.ok)throw\\\"failed to load wasm binary file at '\\\"+e+\\\"'\\\";return t.arrayBuffer()})).catch((()=>j(e)));if(i)return new Promise(((t,r)=>{i(e,(e=>t(new Uint8Array(e))),r)}))}return Promise.resolve().then((()=>j(e)))}(e).then((e=>WebAssembly.instantiate(e,t))).then((e=>e)).then(r,(e=>{b(\\\"failed to asynchronously prepare wasm: \\\"+e),W(e)}))}function G(e){this.name=\\\"ExitStatus\\\",this.message=`Program terminated with exit(${e})`,this.status=e}var N=e=>{for(;0<e.length;)e.shift()(a)};function B(e){this.qa=e-24,this.va=function(e){T[this.qa+4>>2>>>0]=e},this.ua=function(e){T[this.qa+8>>2>>>0]=e},this.sa=function(e,t){this.ta(),this.va(e),this.ua(t)},this.ta=function(){T[this.qa+16>>2>>>0]=0}}var $,q=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf8\\\"):void 0,V=(e,t,r)=>{var n=(t>>>=0)+r;for(r=t;e[r]&&!(r>=n);)++r;if(16<r-t&&e.buffer&&q)return q.decode(e.subarray(t,r));for(n=\\\"\\\";t<r;){var a=e[t++];if(128&a){var o=63&e[t++];if(192==(224&a))n+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[t++])?n+=String.fromCharCode(a):(a-=65536,n+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else n+=String.fromCharCode(a)}return n},J=(e,t)=>(e>>>=0)?V(E,e,t):\\\"\\\",X=e=>{for(var t=0,r=0;r<e.length;++r){var n=e.charCodeAt(r);127>=n?t++:2047>=n?t+=2:55296<=n&&57343>=n?(t+=4,++r):t+=3}return t},K=(e,t,r,n)=>{if(!(0<n))return 0;var a=r>>>=0;n=r+n-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(r>=n)break;t[r++>>>0]=i}else{if(2047>=i){if(r+1>=n)break;t[r++>>>0]=192|i>>6}else{if(65535>=i){if(r+2>=n)break;t[r++>>>0]=224|i>>12}else{if(r+3>=n)break;t[r++>>>0]=240|i>>18,t[r++>>>0]=128|i>>12&63}t[r++>>>0]=128|i>>6&63}t[r++>>>0]=128|63&i}}return t[r>>>0]=0,r-a},Z=e=>0==e%4&&(0!=e%100||0==e%400),Q=[0,31,60,91,121,152,182,213,244,274,305,335],ee=[0,31,59,90,120,151,181,212,243,273,304,334],te=e=>{var t=X(e)+1,r=le(t);return r&&K(e,E,r,t),r},re={},ne=()=>{if(!$){var e,t={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:c||\\\"./this.program\\\"};for(e in re)void 0===re[e]?delete t[e]:t[e]=re[e];var r=[];for(e in t)r.push(`${e}=${t[e]}`);$=r}return $},ae=[null,[],[]],oe=e=>(oe=(()=>{if(\\\"object\\\"==typeof crypto&&\\\"function\\\"==typeof crypto.getRandomValues)return e=>crypto.getRandomValues(e);if(p)try{var e=r(760);if(e.randomFillSync)return t=>e.randomFillSync(t);var t=e.randomBytes;return e=>(e.set(t(e.byteLength)),e)}catch(e){}W(\\\"initRandomDevice\\\")})())(e),ie=[31,29,31,30,31,30,31,31,30,31,30,31],se=[31,28,31,30,31,30,31,31,30,31,30,31];function ue(e,t,r,n){function a(e,t,r){for(e=\\\"number\\\"==typeof e?e.toString():e||\\\"\\\";e.length<t;)e=r[0]+e;return e}function o(e,t){return a(e,t,\\\"0\\\")}function i(e,t){function r(e){return 0>e?-1:0<e?1:0}var n;return 0===(n=r(e.getFullYear()-t.getFullYear()))&&0===(n=r(e.getMonth()-t.getMonth()))&&(n=r(e.getDate()-t.getDate())),n}function s(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function u(e){var t=e.ma;for(e=new Date(new Date(e.na+1900,0,1).getTime());0<t;){var r=e.getMonth(),n=(Z(e.getFullYear())?ie:se)[r];if(!(t>n-e.getDate())){e.setDate(e.getDate()+t);break}t-=n-e.getDate()+1,e.setDate(1),11>r?e.setMonth(r+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return r=new Date(e.getFullYear()+1,0,4),t=s(new Date(e.getFullYear(),0,4)),r=s(r),0>=i(t,e)?0>=i(r,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}e>>>=0,t>>>=0,r>>>=0;var c=A[40+(n>>>=0)>>2>>>0];for(var l in n={ya:A[n>>2>>>0],xa:A[n+4>>2>>>0],oa:A[n+8>>2>>>0],ra:A[n+12>>2>>>0],pa:A[n+16>>2>>>0],na:A[n+20>>2>>>0],ha:A[n+24>>2>>>0],ma:A[n+28>>2>>>0],Aa:A[n+32>>2>>>0],wa:A[n+36>>2>>>0],za:c?J(c):\\\"\\\"},r=J(r),c={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})r=r.replace(new RegExp(l,\\\"g\\\"),c[l]);var f=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),d=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(l in c={\\\"%a\\\":e=>f[e.ha].substring(0,3),\\\"%A\\\":e=>f[e.ha],\\\"%b\\\":e=>d[e.pa].substring(0,3),\\\"%B\\\":e=>d[e.pa],\\\"%C\\\":e=>o((e.na+1900)/100|0,2),\\\"%d\\\":e=>o(e.ra,2),\\\"%e\\\":e=>a(e.ra,2,\\\" \\\"),\\\"%g\\\":e=>u(e).toString().substring(2),\\\"%G\\\":e=>u(e),\\\"%H\\\":e=>o(e.oa,2),\\\"%I\\\":e=>(0==(e=e.oa)?e=12:12<e&&(e-=12),o(e,2)),\\\"%j\\\":e=>{for(var t=0,r=0;r<=e.pa-1;t+=(Z(e.na+1900)?ie:se)[r++]);return o(e.ra+t,3)},\\\"%m\\\":e=>o(e.pa+1,2),\\\"%M\\\":e=>o(e.xa,2),\\\"%n\\\":()=>\\\"\\\\n\\\",\\\"%p\\\":e=>0<=e.oa&&12>e.oa?\\\"AM\\\":\\\"PM\\\",\\\"%S\\\":e=>o(e.ya,2),\\\"%t\\\":()=>\\\"\\\\t\\\",\\\"%u\\\":e=>e.ha||7,\\\"%U\\\":e=>o(Math.floor((e.ma+7-e.ha)/7),2),\\\"%V\\\":e=>{var t=Math.floor((e.ma+7-(e.ha+6)%7)/7);if(2>=(e.ha+371-e.ma-2)%7&&t++,t)53==t&&(4==(r=(e.ha+371-e.ma)%7)||3==r&&Z(e.na)||(t=1));else{t=52;var r=(e.ha+7-e.ma-1)%7;(4==r||5==r&&Z(e.na%400-1))&&t++}return o(t,2)},\\\"%w\\\":e=>e.ha,\\\"%W\\\":e=>o(Math.floor((e.ma+7-(e.ha+6)%7)/7),2),\\\"%y\\\":e=>(e.na+1900).toString().substring(2),\\\"%Y\\\":e=>e.na+1900,\\\"%z\\\":e=>{var t=0<=(e=e.wa);return e=Math.abs(e)/60,(t?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(e/60*100+e%60)).slice(-4)},\\\"%Z\\\":e=>e.za,\\\"%%\\\":()=>\\\"%\\\"},r=r.replace(/%%/g,\\\"\\\\0\\\\0\\\"),c)r.includes(l)&&(r=r.replace(new RegExp(l,\\\"g\\\"),c[l](n)));return l=function(e){var t=Array(X(e)+1);return K(e,t,0,t.length),t}(r=r.replace(/\\\\0\\\\0/g,\\\"%\\\")),l.length>t?0:(S.set(l,e>>>0),l.length-1)}var ce={a:function(e,t,r){throw new B(e>>>=0).sa(t>>>0,r>>>0),e},e:function(){return 0},I:function(){},y:function(){},A:function(){},K:function(){return 0},G:function(){},B:function(){},F:function(){},g:function(){},z:function(){},w:function(){},H:function(){},x:function(){},k:()=>!0,n:function(e,t,r){e=t+2097152>>>0<4194305-!!e?(e>>>0)+4294967296*t:NaN,r>>>=0,e=new Date(1e3*e),A[r>>2>>>0]=e.getUTCSeconds(),A[r+4>>2>>>0]=e.getUTCMinutes(),A[r+8>>2>>>0]=e.getUTCHours(),A[r+12>>2>>>0]=e.getUTCDate(),A[r+16>>2>>>0]=e.getUTCMonth(),A[r+20>>2>>>0]=e.getUTCFullYear()-1900,A[r+24>>2>>>0]=e.getUTCDay(),A[r+28>>2>>>0]=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},o:function(e,t,r){e=t+2097152>>>0<4194305-!!e?(e>>>0)+4294967296*t:NaN,r>>>=0,e=new Date(1e3*e),A[r>>2>>>0]=e.getSeconds(),A[r+4>>2>>>0]=e.getMinutes(),A[r+8>>2>>>0]=e.getHours(),A[r+12>>2>>>0]=e.getDate(),A[r+16>>2>>>0]=e.getMonth(),A[r+20>>2>>>0]=e.getFullYear()-1900,A[r+24>>2>>>0]=e.getDay(),A[r+28>>2>>>0]=(Z(e.getFullYear())?Q:ee)[e.getMonth()]+e.getDate()-1|0,A[r+36>>2>>>0]=-60*e.getTimezoneOffset(),t=new Date(e.getFullYear(),6,1).getTimezoneOffset();var n=new Date(e.getFullYear(),0,1).getTimezoneOffset();A[r+32>>2>>>0]=0|(t!=n&&e.getTimezoneOffset()==Math.min(n,t))},p:function(e){e>>>=0;var t=new Date(A[e+20>>2>>>0]+1900,A[e+16>>2>>>0],A[e+12>>2>>>0],A[e+8>>2>>>0],A[e+4>>2>>>0],A[e>>2>>>0],0),r=A[e+32>>2>>>0],n=t.getTimezoneOffset(),a=new Date(t.getFullYear(),6,1).getTimezoneOffset(),o=new Date(t.getFullYear(),0,1).getTimezoneOffset(),i=Math.min(o,a);return 0>r?A[e+32>>2>>>0]=Number(a!=o&&i==n):0<r!=(i==n)&&(a=Math.max(o,a),t.setTime(t.getTime()+6e4*((0<r?i:a)-n))),A[e+24>>2>>>0]=t.getDay(),A[e+28>>2>>>0]=(Z(t.getFullYear())?Q:ee)[t.getMonth()]+t.getDate()-1|0,A[e>>2>>>0]=t.getSeconds(),A[e+4>>2>>>0]=t.getMinutes(),A[e+8>>2>>>0]=t.getHours(),A[e+12>>2>>>0]=t.getDate(),A[e+16>>2>>>0]=t.getMonth(),A[e+20>>2>>>0]=t.getYear(),e=t.getTime()/1e3,de((D=e,1<=+Math.abs(D)?0<D?+Math.floor(D/4294967296)>>>0:~~+Math.ceil((D-+(~~D>>>0))/4294967296)>>>0:0)),e>>>0},l:function(){return-52},m:function(){},u:function(e,t,r){function n(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\\\"GMT\\\"}r>>>=0;var a=(new Date).getFullYear(),o=new Date(a,0,1),i=new Date(a,6,1);a=o.getTimezoneOffset();var s=i.getTimezoneOffset();T[e>>>0>>2>>>0]=60*Math.max(a,s),A[t>>>0>>2>>>0]=Number(a!=s),e=n(o),t=n(i),e=te(e),t=te(t),s<a?(T[r>>2>>>0]=e,T[r+4>>2>>>0]=t):(T[r>>2>>>0]=t,T[r+4>>2>>>0]=e)},d:()=>{W(\\\"\\\")},h:function(){return Date.now()},v:function(){return 4294901760},b:()=>performance.now(),J:function(e,t,r){return t>>>=0,E.copyWithin(e>>>0>>>0,t>>>0,t+(r>>>0)>>>0)},t:function(e){e>>>=0;var t=E.length;if(4294901760<e)return!1;for(var r=1;4>=r;r*=2){var n=t*(1+.2/r);n=Math.min(n,e+100663296);var a=Math;n=Math.max(e,n);e:{a=a.min.call(a,4294901760,n+(65536-n%65536)%65536)-_.buffer.byteLength+65535>>>16;try{_.grow(a),R();var o=1;break e}catch(e){}o=void 0}if(o)return!0}return!1},D:function(e,t){e>>>=0,t>>>=0;var r=0;return ne().forEach((function(n,a){var o=t+r;for(a=T[e+4*a>>2>>>0]=o,o=0;o<n.length;++o)S[a++>>0>>>0]=n.charCodeAt(o);S[a>>0>>>0]=0,r+=n.length+1})),0},E:function(e,t){e>>>=0,t>>>=0;var r=ne();T[e>>2>>>0]=r.length;var n=0;return r.forEach((function(e){n+=e.length+1})),T[t>>2>>>0]=n,0},s:e=>{w||(a.onExit&&a.onExit(e),M=!0),l(e,new G(e))},f:()=>52,j:function(){return 52},q:function(){return 70},i:function(e,t,r,n){t>>>=0,r>>>=0,n>>>=0;for(var a=0,o=0;o<r;o++){var i=T[t>>2>>>0],s=T[t+4>>2>>>0];t+=8;for(var u=0;u<s;u++){var c=E[i+u>>>0],l=ae[e];0===c||10===c?((1===e?v:b)(V(l,0)),l.length=0):l.push(c)}a+=s}return T[n>>2>>>0]=a,0},r:function(e,t){return e>>>=0,oe(E.subarray(e>>>0,e+(t>>>0)>>>0)),0},C:ue,c:function(e,t,r,n){return ue(e>>>0,t>>>0,r>>>0,n>>>0)}};!function(){function e(e){if(e=e.exports,O=e=function(e){var t=e=>()=>e()>>>0,r=e=>t=>e(t)>>>0;return(e=Object.assign({},e)).__errno_location=t(e.__errno_location),e.malloc=r(e.malloc),e.stackSave=t(e.stackSave),e.stackAlloc=r(e.stackAlloc),e}(e),_=O.L,R(),k.unshift(O.M),I--,a.monitorRunDependencies&&a.monitorRunDependencies(I),0==I&&(null!==U&&(clearInterval(U),U=null),L)){var t=L;L=null,t()}return e}var t={a:ce};if(I++,a.monitorRunDependencies&&a.monitorRunDependencies(I),a.instantiateWasm)try{return a.instantiateWasm(t,e)}catch(e){b(\\\"Module.instantiateWasm callback failed with error: \\\"+e),n(e)}(function(e,t){var r=x;return y||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||H(r)||r.startsWith(\\\"file://\\\")||p||\\\"function\\\"!=typeof fetch?z(r,e,t):fetch(r,{credentials:\\\"same-origin\\\"}).then((n=>WebAssembly.instantiateStreaming(n,e).then(t,(function(n){return b(\\\"wasm streaming compile failed: \\\"+n),b(\\\"falling back to ArrayBuffer instantiation\\\"),z(r,e,t)}))))})(t,(function(t){e(t.instance)})).catch(n)}(),a._OrtInit=(e,t)=>(a._OrtInit=O.N)(e,t),a._OrtGetLastError=(e,t)=>(a._OrtGetLastError=O.O)(e,t),a._OrtCreateSessionOptions=(e,t,r,n,o,i,s,u,c,l)=>(a._OrtCreateSessionOptions=O.P)(e,t,r,n,o,i,s,u,c,l),a._OrtAppendExecutionProvider=(e,t)=>(a._OrtAppendExecutionProvider=O.Q)(e,t),a._OrtAddSessionConfigEntry=(e,t,r)=>(a._OrtAddSessionConfigEntry=O.R)(e,t,r),a._OrtReleaseSessionOptions=e=>(a._OrtReleaseSessionOptions=O.S)(e),a._OrtCreateSession=(e,t,r)=>(a._OrtCreateSession=O.T)(e,t,r),a._OrtReleaseSession=e=>(a._OrtReleaseSession=O.U)(e),a._OrtGetInputOutputCount=(e,t,r)=>(a._OrtGetInputOutputCount=O.V)(e,t,r),a._OrtGetInputName=(e,t)=>(a._OrtGetInputName=O.W)(e,t),a._OrtGetOutputName=(e,t)=>(a._OrtGetOutputName=O.X)(e,t),a._OrtFree=e=>(a._OrtFree=O.Y)(e),a._OrtCreateTensor=(e,t,r,n,o)=>(a._OrtCreateTensor=O.Z)(e,t,r,n,o),a._OrtGetTensorData=(e,t,r,n,o)=>(a._OrtGetTensorData=O._)(e,t,r,n,o),a._OrtReleaseTensor=e=>(a._OrtReleaseTensor=O.$)(e),a._OrtCreateRunOptions=(e,t,r,n)=>(a._OrtCreateRunOptions=O.aa)(e,t,r,n),a._OrtAddRunConfigEntry=(e,t,r)=>(a._OrtAddRunConfigEntry=O.ba)(e,t,r),a._OrtReleaseRunOptions=e=>(a._OrtReleaseRunOptions=O.ca)(e),a._OrtRun=(e,t,r,n,o,i,s,u)=>(a._OrtRun=O.da)(e,t,r,n,o,i,s,u),a._OrtEndProfiling=e=>(a._OrtEndProfiling=O.ea)(e);var le=a._malloc=e=>(le=a._malloc=O.fa)(e);a._free=e=>(a._free=O.ga)(e);var fe,de=e=>(de=O.ia)(e),pe=()=>(pe=O.ja)(),ge=e=>(ge=O.ka)(e),he=e=>(he=O.la)(e);function me(){function e(){if(!fe&&(fe=!0,a.calledRun=!0,!M)){if(N(k),t(a),a.onRuntimeInitialized&&a.onRuntimeInitialized(),a.postRun)for(\\\"function\\\"==typeof a.postRun&&(a.postRun=[a.postRun]);a.postRun.length;){var e=a.postRun.shift();C.unshift(e)}N(C)}}if(!(0<I)){if(a.preRun)for(\\\"function\\\"==typeof a.preRun&&(a.preRun=[a.preRun]);a.preRun.length;)P();N(F),0<I||(a.setStatus?(a.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){a.setStatus(\\\"\\\")}),1),e()}),1)):e())}}if(a.stackAlloc=he,a.stackSave=pe,a.stackRestore=ge,a.UTF8ToString=J,a.stringToUTF8=(e,t,r)=>K(e,E,t,r),a.lengthBytesUTF8=X,L=function e(){fe||me(),fe||(L=e)},a.preInit)for(\\\"function\\\"==typeof a.preInit&&(a.preInit=[a.preInit]);0<a.preInit.length;)a.preInit.pop()();return me(),e.ready});e.exports=n},154:e=>{\\\"use strict\\\";e.exports='\\\"use strict\\\";var e={},a=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node;if(a){var r=require(\\\"worker_threads\\\"),t=r.parentPort;t.on(\\\"message\\\",(e=>onmessage({data:e})));var s=require(\\\"fs\\\");Object.assign(global,{self:global,require:require,Module:e,location:{href:__filename},Worker:r.Worker,importScripts:e=>(0,eval)(s.readFileSync(e,\\\"utf8\\\")+\\\"//# sourceURL=\\\"+e),postMessage:e=>t.postMessage(e),performance:global.performance||{now:Date.now}})}var o=!1,d=function(){var e=Array.prototype.slice.call(arguments).join(\\\" \\\");a?s.writeSync(2,e+\\\"\\\\\\\\n\\\"):console.error(e)};self.alert=function(){var a=Array.prototype.slice.call(arguments).join(\\\" \\\");postMessage({cmd:\\\"alert\\\",text:a,threadId:e._pthread_self()})},e.instantiateWasm=(a,r)=>{var t=e.wasmModule;return e.wasmModule=null,r(new WebAssembly.Instance(t,a))},self.onunhandledrejection=e=>{throw e.reason??e},self.onmessage=function a(r){try{if(\\\"load\\\"===r.data.cmd){let s=[];self.onmessage=e=>s.push(e),self.startWorker=r=>{e=r,postMessage({cmd:\\\"loaded\\\"});for(let e of s)a(e);self.onmessage=a},e.wasmModule=r.data.wasmModule;for(const a of r.data.handlers)e[a]=(...e)=>{postMessage({cmd:\\\"callHandler\\\",handler:a,args:e})};if(e.wasmMemory=r.data.wasmMemory,e.buffer=e.wasmMemory.buffer,e.ENVIRONMENT_IS_PTHREAD=!0,\\\"string\\\"==typeof r.data.urlOrBlob)importScripts(r.data.urlOrBlob);else{var t=URL.createObjectURL(r.data.urlOrBlob);importScripts(t),URL.revokeObjectURL(t)}ortWasmThreaded(e)}else if(\\\"run\\\"===r.data.cmd){e.__emscripten_thread_init(r.data.pthread_ptr,0,0,1),e.__emscripten_thread_mailbox_await(r.data.pthread_ptr),e.establishStackSpace(),e.PThread.receiveObjectTransfer(r.data),e.PThread.threadInitTLS(),o||(o=!0);try{e.invokeEntryPoint(r.data.start_routine,r.data.arg)}catch(e){if(\\\"unwind\\\"!=e)throw e}}else\\\"cancel\\\"===r.data.cmd?e._pthread_self()&&e.__emscripten_thread_exit(-1):\\\"setimmediate\\\"===r.data.target||(\\\"checkMailbox\\\"===r.data.cmd?o&&e.checkMailbox():r.data.cmd&&(d(\\\"worker.js received unknown command \\\"+r.data.cmd),d(r.data)))}catch(a){throw e.__emscripten_thread_crashed&&e.__emscripten_thread_crashed(),a}};\\\\n'},760:()=>{},384:()=>{},993:()=>{},908:()=>{},953:()=>{},925:()=>{},449:()=>{}},t={};function r(n){var a=t[n];if(void 0!==a)return a.exports;var o=t[n]={exports:{}};return e[n].call(o.exports,o,o.exports,r),o.exports}(()=>{\\\"use strict\\\";const e=r(259),t=r(263);self.onmessage=r=>{switch(r.data.type){case\\\"init-wasm\\\":try{(0,t.initializeWebAssembly)(r.data.in).then((()=>postMessage({type:\\\"init-wasm\\\"})),(e=>postMessage({type:\\\"init-wasm\\\",err:e})))}catch(e){postMessage({type:\\\"init-wasm\\\",err:e})}break;case\\\"init-ort\\\":try{(0,e.initRuntime)(r.data.in).then((()=>postMessage({type:\\\"init-ort\\\"})),(e=>postMessage({type:\\\"init-ort\\\",err:e}))),postMessage({type:\\\"init-ort\\\"})}catch(e){postMessage({type:\\\"init-ort\\\",err:e})}break;case\\\"create_allocate\\\":try{const{model:t}=r.data.in,n=(0,e.createSessionAllocate)(t);postMessage({type:\\\"create_allocate\\\",out:n})}catch(e){postMessage({type:\\\"create_allocate\\\",err:e})}break;case\\\"create_finalize\\\":try{const{modeldata:t,options:n}=r.data.in,a=(0,e.createSessionFinalize)(t,n);postMessage({type:\\\"create_finalize\\\",out:a})}catch(e){postMessage({type:\\\"create_finalize\\\",err:e})}break;case\\\"create\\\":try{const{model:t,options:n}=r.data.in,a=(0,e.createSession)(t,n);postMessage({type:\\\"create\\\",out:a})}catch(e){postMessage({type:\\\"create\\\",err:e})}break;case\\\"release\\\":try{const t=r.data.in;(0,e.releaseSession)(t),postMessage({type:\\\"release\\\"})}catch(e){postMessage({type:\\\"release\\\",err:e})}break;case\\\"run\\\":try{const{sessionId:t,inputIndices:n,inputs:a,outputIndices:o,options:i}=r.data.in;(0,e.run)(t,n,a,o,i).then((t=>{postMessage({type:\\\"run\\\",out:t},(0,e.extractTransferableBuffers)(t))}),(e=>{postMessage({type:\\\"run\\\",err:e})}))}catch(e){postMessage({type:\\\"run\\\",err:e})}break;case\\\"end-profiling\\\":try{const t=r.data.in;(0,e.endProfiling)(t),postMessage({type:\\\"end-profiling\\\"})}catch(e){postMessage({type:\\\"end-profiling\\\",err:e})}}}})()})();\\n\", \"Worker\", undefined, undefined);\n}\n","\"use strict\";\n\n/* eslint-env browser */\n\n/* eslint-disable no-undef, no-use-before-define, new-cap */\nmodule.exports = function (content, workerConstructor, workerOptions, url) {\n  var globalScope = self || window;\n\n  try {\n    try {\n      var blob;\n\n      try {\n        // New API\n        blob = new globalScope.Blob([content]);\n      } catch (e) {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = globalScope.BlobBuilder || globalScope.WebKitBlobBuilder || globalScope.MozBlobBuilder || globalScope.MSBlobBuilder;\n        blob = new BlobBuilder();\n        blob.append(content);\n        blob = blob.getBlob();\n      }\n\n      var URL = globalScope.URL || globalScope.webkitURL;\n      var objectURL = URL.createObjectURL(blob);\n      var worker = new globalScope[workerConstructor](objectURL, workerOptions);\n      URL.revokeObjectURL(objectURL);\n      return worker;\n    } catch (e) {\n      return new globalScope[workerConstructor](\"data:application/javascript,\".concat(encodeURIComponent(content)), workerOptions);\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error(\"Inline worker is not supported\");\n    }\n\n    return new globalScope[workerConstructor](url, workerOptions);\n  }\n};","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\r\n\"use strict\";\r\n\r\nvar $protobuf = require(\"protobufjs/minimal\");\r\n\r\n// Common aliases\r\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\r\n\r\n// Exported root namespace\r\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\r\n\r\n$root.onnx = (function() {\r\n\r\n    /**\r\n     * Namespace onnx.\r\n     * @exports onnx\r\n     * @namespace\r\n     */\r\n    var onnx = {};\r\n\r\n    /**\r\n     * Version enum.\r\n     * @name onnx.Version\r\n     * @enum {number}\r\n     * @property {number} _START_VERSION=0 _START_VERSION value\r\n     * @property {number} IR_VERSION_2017_10_10=1 IR_VERSION_2017_10_10 value\r\n     * @property {number} IR_VERSION_2017_10_30=2 IR_VERSION_2017_10_30 value\r\n     * @property {number} IR_VERSION_2017_11_3=3 IR_VERSION_2017_11_3 value\r\n     * @property {number} IR_VERSION_2019_1_22=4 IR_VERSION_2019_1_22 value\r\n     * @property {number} IR_VERSION_2019_3_18=5 IR_VERSION_2019_3_18 value\r\n     * @property {number} IR_VERSION_2019_9_19=6 IR_VERSION_2019_9_19 value\r\n     * @property {number} IR_VERSION_2020_5_8=7 IR_VERSION_2020_5_8 value\r\n     * @property {number} IR_VERSION_2021_7_30=8 IR_VERSION_2021_7_30 value\r\n     * @property {number} IR_VERSION=9 IR_VERSION value\r\n     */\r\n    onnx.Version = (function() {\r\n        var valuesById = {}, values = Object.create(valuesById);\r\n        values[valuesById[0] = \"_START_VERSION\"] = 0;\r\n        values[valuesById[1] = \"IR_VERSION_2017_10_10\"] = 1;\r\n        values[valuesById[2] = \"IR_VERSION_2017_10_30\"] = 2;\r\n        values[valuesById[3] = \"IR_VERSION_2017_11_3\"] = 3;\r\n        values[valuesById[4] = \"IR_VERSION_2019_1_22\"] = 4;\r\n        values[valuesById[5] = \"IR_VERSION_2019_3_18\"] = 5;\r\n        values[valuesById[6] = \"IR_VERSION_2019_9_19\"] = 6;\r\n        values[valuesById[7] = \"IR_VERSION_2020_5_8\"] = 7;\r\n        values[valuesById[8] = \"IR_VERSION_2021_7_30\"] = 8;\r\n        values[valuesById[9] = \"IR_VERSION\"] = 9;\r\n        return values;\r\n    })();\r\n\r\n    onnx.AttributeProto = (function() {\r\n\r\n        /**\r\n         * Properties of an AttributeProto.\r\n         * @memberof onnx\r\n         * @interface IAttributeProto\r\n         * @property {string|null} [name] AttributeProto name\r\n         * @property {string|null} [refAttrName] AttributeProto refAttrName\r\n         * @property {string|null} [docString] AttributeProto docString\r\n         * @property {onnx.AttributeProto.AttributeType|null} [type] AttributeProto type\r\n         * @property {number|null} [f] AttributeProto f\r\n         * @property {number|Long|null} [i] AttributeProto i\r\n         * @property {Uint8Array|null} [s] AttributeProto s\r\n         * @property {onnx.ITensorProto|null} [t] AttributeProto t\r\n         * @property {onnx.IGraphProto|null} [g] AttributeProto g\r\n         * @property {onnx.ISparseTensorProto|null} [sparseTensor] AttributeProto sparseTensor\r\n         * @property {onnx.ITypeProto|null} [tp] AttributeProto tp\r\n         * @property {Array.<number>|null} [floats] AttributeProto floats\r\n         * @property {Array.<number|Long>|null} [ints] AttributeProto ints\r\n         * @property {Array.<Uint8Array>|null} [strings] AttributeProto strings\r\n         * @property {Array.<onnx.ITensorProto>|null} [tensors] AttributeProto tensors\r\n         * @property {Array.<onnx.IGraphProto>|null} [graphs] AttributeProto graphs\r\n         * @property {Array.<onnx.ISparseTensorProto>|null} [sparseTensors] AttributeProto sparseTensors\r\n         * @property {Array.<onnx.ITypeProto>|null} [typeProtos] AttributeProto typeProtos\r\n         */\r\n\r\n        /**\r\n         * Constructs a new AttributeProto.\r\n         * @memberof onnx\r\n         * @classdesc Represents an AttributeProto.\r\n         * @implements IAttributeProto\r\n         * @constructor\r\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\r\n         */\r\n        function AttributeProto(properties) {\r\n            this.floats = [];\r\n            this.ints = [];\r\n            this.strings = [];\r\n            this.tensors = [];\r\n            this.graphs = [];\r\n            this.sparseTensors = [];\r\n            this.typeProtos = [];\r\n            if (properties)\r\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                    if (properties[keys[i]] != null)\r\n                        this[keys[i]] = properties[keys[i]];\r\n        }\r\n\r\n        /**\r\n         * AttributeProto name.\r\n         * @member {string} name\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         */\r\n        AttributeProto.prototype.name = \"\";\r\n\r\n        /**\r\n         * AttributeProto refAttrName.\r\n         * @member {string} refAttrName\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         */\r\n        AttributeProto.prototype.refAttrName = \"\";\r\n\r\n        /**\r\n         * AttributeProto docString.\r\n         * @member {string} docString\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         */\r\n        AttributeProto.prototype.docString = \"\";\r\n\r\n        /**\r\n         * AttributeProto type.\r\n         * @member {onnx.AttributeProto.AttributeType} type\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         */\r\n        AttributeProto.prototype.type = 0;\r\n\r\n        /**\r\n         * AttributeProto f.\r\n         * @member {number} f\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         */\r\n        AttributeProto.prototype.f = 0;\r\n\r\n        /**\r\n         * AttributeProto i.\r\n         * @member {number|Long} i\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         */\r\n        AttributeProto.prototype.i = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\r\n\r\n        /**\r\n         * AttributeProto s.\r\n         * @member {Uint8Array} s\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         */\r\n        AttributeProto.prototype.s = $util.newBuffer([]);\r\n\r\n        /**\r\n         * AttributeProto t.\r\n         * @member {onnx.ITensorProto|null|undefined} t\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         */\r\n        AttributeProto.prototype.t = null;\r\n\r\n        /**\r\n         * AttributeProto g.\r\n         * @member {onnx.IGraphProto|null|undefined} g\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         */\r\n        AttributeProto.prototype.g = null;\r\n\r\n        /**\r\n         * AttributeProto sparseTensor.\r\n         * @member {onnx.ISparseTensorProto|null|undefined} sparseTensor\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         */\r\n        AttributeProto.prototype.sparseTensor = null;\r\n\r\n        /**\r\n         * AttributeProto tp.\r\n         * @member {onnx.ITypeProto|null|undefined} tp\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         */\r\n        AttributeProto.prototype.tp = null;\r\n\r\n        /**\r\n         * AttributeProto floats.\r\n         * @member {Array.<number>} floats\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         */\r\n        AttributeProto.prototype.floats = $util.emptyArray;\r\n\r\n        /**\r\n         * AttributeProto ints.\r\n         * @member {Array.<number|Long>} ints\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         */\r\n        AttributeProto.prototype.ints = $util.emptyArray;\r\n\r\n        /**\r\n         * AttributeProto strings.\r\n         * @member {Array.<Uint8Array>} strings\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         */\r\n        AttributeProto.prototype.strings = $util.emptyArray;\r\n\r\n        /**\r\n         * AttributeProto tensors.\r\n         * @member {Array.<onnx.ITensorProto>} tensors\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         */\r\n        AttributeProto.prototype.tensors = $util.emptyArray;\r\n\r\n        /**\r\n         * AttributeProto graphs.\r\n         * @member {Array.<onnx.IGraphProto>} graphs\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         */\r\n        AttributeProto.prototype.graphs = $util.emptyArray;\r\n\r\n        /**\r\n         * AttributeProto sparseTensors.\r\n         * @member {Array.<onnx.ISparseTensorProto>} sparseTensors\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         */\r\n        AttributeProto.prototype.sparseTensors = $util.emptyArray;\r\n\r\n        /**\r\n         * AttributeProto typeProtos.\r\n         * @member {Array.<onnx.ITypeProto>} typeProtos\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         */\r\n        AttributeProto.prototype.typeProtos = $util.emptyArray;\r\n\r\n        /**\r\n         * Creates a new AttributeProto instance using the specified properties.\r\n         * @function create\r\n         * @memberof onnx.AttributeProto\r\n         * @static\r\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\r\n         * @returns {onnx.AttributeProto} AttributeProto instance\r\n         */\r\n        AttributeProto.create = function create(properties) {\r\n            return new AttributeProto(properties);\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified AttributeProto message. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\r\n         * @function encode\r\n         * @memberof onnx.AttributeProto\r\n         * @static\r\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        AttributeProto.encode = function encode(message, writer) {\r\n            if (!writer)\r\n                writer = $Writer.create();\r\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\r\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\r\n            if (message.f != null && Object.hasOwnProperty.call(message, \"f\"))\r\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.f);\r\n            if (message.i != null && Object.hasOwnProperty.call(message, \"i\"))\r\n                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.i);\r\n            if (message.s != null && Object.hasOwnProperty.call(message, \"s\"))\r\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.s);\r\n            if (message.t != null && Object.hasOwnProperty.call(message, \"t\"))\r\n                $root.onnx.TensorProto.encode(message.t, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\r\n            if (message.g != null && Object.hasOwnProperty.call(message, \"g\"))\r\n                $root.onnx.GraphProto.encode(message.g, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\r\n            if (message.floats != null && message.floats.length) {\r\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\r\n                for (var i = 0; i < message.floats.length; ++i)\r\n                    writer.float(message.floats[i]);\r\n                writer.ldelim();\r\n            }\r\n            if (message.ints != null && message.ints.length) {\r\n                writer.uint32(/* id 8, wireType 2 =*/66).fork();\r\n                for (var i = 0; i < message.ints.length; ++i)\r\n                    writer.int64(message.ints[i]);\r\n                writer.ldelim();\r\n            }\r\n            if (message.strings != null && message.strings.length)\r\n                for (var i = 0; i < message.strings.length; ++i)\r\n                    writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.strings[i]);\r\n            if (message.tensors != null && message.tensors.length)\r\n                for (var i = 0; i < message.tensors.length; ++i)\r\n                    $root.onnx.TensorProto.encode(message.tensors[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\r\n            if (message.graphs != null && message.graphs.length)\r\n                for (var i = 0; i < message.graphs.length; ++i)\r\n                    $root.onnx.GraphProto.encode(message.graphs[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\r\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\r\n                writer.uint32(/* id 13, wireType 2 =*/106).string(message.docString);\r\n            if (message.tp != null && Object.hasOwnProperty.call(message, \"tp\"))\r\n                $root.onnx.TypeProto.encode(message.tp, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\r\n            if (message.typeProtos != null && message.typeProtos.length)\r\n                for (var i = 0; i < message.typeProtos.length; ++i)\r\n                    $root.onnx.TypeProto.encode(message.typeProtos[i], writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();\r\n            if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\r\n                writer.uint32(/* id 20, wireType 0 =*/160).int32(message.type);\r\n            if (message.refAttrName != null && Object.hasOwnProperty.call(message, \"refAttrName\"))\r\n                writer.uint32(/* id 21, wireType 2 =*/170).string(message.refAttrName);\r\n            if (message.sparseTensor != null && Object.hasOwnProperty.call(message, \"sparseTensor\"))\r\n                $root.onnx.SparseTensorProto.encode(message.sparseTensor, writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();\r\n            if (message.sparseTensors != null && message.sparseTensors.length)\r\n                for (var i = 0; i < message.sparseTensors.length; ++i)\r\n                    $root.onnx.SparseTensorProto.encode(message.sparseTensors[i], writer.uint32(/* id 23, wireType 2 =*/186).fork()).ldelim();\r\n            return writer;\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified AttributeProto message, length delimited. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\r\n         * @function encodeDelimited\r\n         * @memberof onnx.AttributeProto\r\n         * @static\r\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        AttributeProto.encodeDelimited = function encodeDelimited(message, writer) {\r\n            return this.encode(message, writer).ldelim();\r\n        };\r\n\r\n        /**\r\n         * Decodes an AttributeProto message from the specified reader or buffer.\r\n         * @function decode\r\n         * @memberof onnx.AttributeProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @param {number} [length] Message length if known beforehand\r\n         * @returns {onnx.AttributeProto} AttributeProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        AttributeProto.decode = function decode(reader, length) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = $Reader.create(reader);\r\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.AttributeProto();\r\n            while (reader.pos < end) {\r\n                var tag = reader.uint32();\r\n                switch (tag >>> 3) {\r\n                case 1: {\r\n                        message.name = reader.string();\r\n                        break;\r\n                    }\r\n                case 21: {\r\n                        message.refAttrName = reader.string();\r\n                        break;\r\n                    }\r\n                case 13: {\r\n                        message.docString = reader.string();\r\n                        break;\r\n                    }\r\n                case 20: {\r\n                        message.type = reader.int32();\r\n                        break;\r\n                    }\r\n                case 2: {\r\n                        message.f = reader.float();\r\n                        break;\r\n                    }\r\n                case 3: {\r\n                        message.i = reader.int64();\r\n                        break;\r\n                    }\r\n                case 4: {\r\n                        message.s = reader.bytes();\r\n                        break;\r\n                    }\r\n                case 5: {\r\n                        message.t = $root.onnx.TensorProto.decode(reader, reader.uint32());\r\n                        break;\r\n                    }\r\n                case 6: {\r\n                        message.g = $root.onnx.GraphProto.decode(reader, reader.uint32());\r\n                        break;\r\n                    }\r\n                case 22: {\r\n                        message.sparseTensor = $root.onnx.SparseTensorProto.decode(reader, reader.uint32());\r\n                        break;\r\n                    }\r\n                case 14: {\r\n                        message.tp = $root.onnx.TypeProto.decode(reader, reader.uint32());\r\n                        break;\r\n                    }\r\n                case 7: {\r\n                        if (!(message.floats && message.floats.length))\r\n                            message.floats = [];\r\n                        if ((tag & 7) === 2) {\r\n                            var end2 = reader.uint32() + reader.pos;\r\n                            while (reader.pos < end2)\r\n                                message.floats.push(reader.float());\r\n                        } else\r\n                            message.floats.push(reader.float());\r\n                        break;\r\n                    }\r\n                case 8: {\r\n                        if (!(message.ints && message.ints.length))\r\n                            message.ints = [];\r\n                        if ((tag & 7) === 2) {\r\n                            var end2 = reader.uint32() + reader.pos;\r\n                            while (reader.pos < end2)\r\n                                message.ints.push(reader.int64());\r\n                        } else\r\n                            message.ints.push(reader.int64());\r\n                        break;\r\n                    }\r\n                case 9: {\r\n                        if (!(message.strings && message.strings.length))\r\n                            message.strings = [];\r\n                        message.strings.push(reader.bytes());\r\n                        break;\r\n                    }\r\n                case 10: {\r\n                        if (!(message.tensors && message.tensors.length))\r\n                            message.tensors = [];\r\n                        message.tensors.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                case 11: {\r\n                        if (!(message.graphs && message.graphs.length))\r\n                            message.graphs = [];\r\n                        message.graphs.push($root.onnx.GraphProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                case 23: {\r\n                        if (!(message.sparseTensors && message.sparseTensors.length))\r\n                            message.sparseTensors = [];\r\n                        message.sparseTensors.push($root.onnx.SparseTensorProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                case 15: {\r\n                        if (!(message.typeProtos && message.typeProtos.length))\r\n                            message.typeProtos = [];\r\n                        message.typeProtos.push($root.onnx.TypeProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                default:\r\n                    reader.skipType(tag & 7);\r\n                    break;\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Decodes an AttributeProto message from the specified reader or buffer, length delimited.\r\n         * @function decodeDelimited\r\n         * @memberof onnx.AttributeProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @returns {onnx.AttributeProto} AttributeProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        AttributeProto.decodeDelimited = function decodeDelimited(reader) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = new $Reader(reader);\r\n            return this.decode(reader, reader.uint32());\r\n        };\r\n\r\n        /**\r\n         * Verifies an AttributeProto message.\r\n         * @function verify\r\n         * @memberof onnx.AttributeProto\r\n         * @static\r\n         * @param {Object.<string,*>} message Plain object to verify\r\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n         */\r\n        AttributeProto.verify = function verify(message) {\r\n            if (typeof message !== \"object\" || message === null)\r\n                return \"object expected\";\r\n            if (message.name != null && message.hasOwnProperty(\"name\"))\r\n                if (!$util.isString(message.name))\r\n                    return \"name: string expected\";\r\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\r\n                if (!$util.isString(message.refAttrName))\r\n                    return \"refAttrName: string expected\";\r\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\r\n                if (!$util.isString(message.docString))\r\n                    return \"docString: string expected\";\r\n            if (message.type != null && message.hasOwnProperty(\"type\"))\r\n                switch (message.type) {\r\n                default:\r\n                    return \"type: enum value expected\";\r\n                case 0:\r\n                case 1:\r\n                case 2:\r\n                case 3:\r\n                case 4:\r\n                case 5:\r\n                case 11:\r\n                case 13:\r\n                case 6:\r\n                case 7:\r\n                case 8:\r\n                case 9:\r\n                case 10:\r\n                case 12:\r\n                case 14:\r\n                    break;\r\n                }\r\n            if (message.f != null && message.hasOwnProperty(\"f\"))\r\n                if (typeof message.f !== \"number\")\r\n                    return \"f: number expected\";\r\n            if (message.i != null && message.hasOwnProperty(\"i\"))\r\n                if (!$util.isInteger(message.i) && !(message.i && $util.isInteger(message.i.low) && $util.isInteger(message.i.high)))\r\n                    return \"i: integer|Long expected\";\r\n            if (message.s != null && message.hasOwnProperty(\"s\"))\r\n                if (!(message.s && typeof message.s.length === \"number\" || $util.isString(message.s)))\r\n                    return \"s: buffer expected\";\r\n            if (message.t != null && message.hasOwnProperty(\"t\")) {\r\n                var error = $root.onnx.TensorProto.verify(message.t);\r\n                if (error)\r\n                    return \"t.\" + error;\r\n            }\r\n            if (message.g != null && message.hasOwnProperty(\"g\")) {\r\n                var error = $root.onnx.GraphProto.verify(message.g);\r\n                if (error)\r\n                    return \"g.\" + error;\r\n            }\r\n            if (message.sparseTensor != null && message.hasOwnProperty(\"sparseTensor\")) {\r\n                var error = $root.onnx.SparseTensorProto.verify(message.sparseTensor);\r\n                if (error)\r\n                    return \"sparseTensor.\" + error;\r\n            }\r\n            if (message.tp != null && message.hasOwnProperty(\"tp\")) {\r\n                var error = $root.onnx.TypeProto.verify(message.tp);\r\n                if (error)\r\n                    return \"tp.\" + error;\r\n            }\r\n            if (message.floats != null && message.hasOwnProperty(\"floats\")) {\r\n                if (!Array.isArray(message.floats))\r\n                    return \"floats: array expected\";\r\n                for (var i = 0; i < message.floats.length; ++i)\r\n                    if (typeof message.floats[i] !== \"number\")\r\n                        return \"floats: number[] expected\";\r\n            }\r\n            if (message.ints != null && message.hasOwnProperty(\"ints\")) {\r\n                if (!Array.isArray(message.ints))\r\n                    return \"ints: array expected\";\r\n                for (var i = 0; i < message.ints.length; ++i)\r\n                    if (!$util.isInteger(message.ints[i]) && !(message.ints[i] && $util.isInteger(message.ints[i].low) && $util.isInteger(message.ints[i].high)))\r\n                        return \"ints: integer|Long[] expected\";\r\n            }\r\n            if (message.strings != null && message.hasOwnProperty(\"strings\")) {\r\n                if (!Array.isArray(message.strings))\r\n                    return \"strings: array expected\";\r\n                for (var i = 0; i < message.strings.length; ++i)\r\n                    if (!(message.strings[i] && typeof message.strings[i].length === \"number\" || $util.isString(message.strings[i])))\r\n                        return \"strings: buffer[] expected\";\r\n            }\r\n            if (message.tensors != null && message.hasOwnProperty(\"tensors\")) {\r\n                if (!Array.isArray(message.tensors))\r\n                    return \"tensors: array expected\";\r\n                for (var i = 0; i < message.tensors.length; ++i) {\r\n                    var error = $root.onnx.TensorProto.verify(message.tensors[i]);\r\n                    if (error)\r\n                        return \"tensors.\" + error;\r\n                }\r\n            }\r\n            if (message.graphs != null && message.hasOwnProperty(\"graphs\")) {\r\n                if (!Array.isArray(message.graphs))\r\n                    return \"graphs: array expected\";\r\n                for (var i = 0; i < message.graphs.length; ++i) {\r\n                    var error = $root.onnx.GraphProto.verify(message.graphs[i]);\r\n                    if (error)\r\n                        return \"graphs.\" + error;\r\n                }\r\n            }\r\n            if (message.sparseTensors != null && message.hasOwnProperty(\"sparseTensors\")) {\r\n                if (!Array.isArray(message.sparseTensors))\r\n                    return \"sparseTensors: array expected\";\r\n                for (var i = 0; i < message.sparseTensors.length; ++i) {\r\n                    var error = $root.onnx.SparseTensorProto.verify(message.sparseTensors[i]);\r\n                    if (error)\r\n                        return \"sparseTensors.\" + error;\r\n                }\r\n            }\r\n            if (message.typeProtos != null && message.hasOwnProperty(\"typeProtos\")) {\r\n                if (!Array.isArray(message.typeProtos))\r\n                    return \"typeProtos: array expected\";\r\n                for (var i = 0; i < message.typeProtos.length; ++i) {\r\n                    var error = $root.onnx.TypeProto.verify(message.typeProtos[i]);\r\n                    if (error)\r\n                        return \"typeProtos.\" + error;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Creates an AttributeProto message from a plain object. Also converts values to their respective internal types.\r\n         * @function fromObject\r\n         * @memberof onnx.AttributeProto\r\n         * @static\r\n         * @param {Object.<string,*>} object Plain object\r\n         * @returns {onnx.AttributeProto} AttributeProto\r\n         */\r\n        AttributeProto.fromObject = function fromObject(object) {\r\n            if (object instanceof $root.onnx.AttributeProto)\r\n                return object;\r\n            var message = new $root.onnx.AttributeProto();\r\n            if (object.name != null)\r\n                message.name = String(object.name);\r\n            if (object.refAttrName != null)\r\n                message.refAttrName = String(object.refAttrName);\r\n            if (object.docString != null)\r\n                message.docString = String(object.docString);\r\n            switch (object.type) {\r\n            default:\r\n                if (typeof object.type === \"number\") {\r\n                    message.type = object.type;\r\n                    break;\r\n                }\r\n                break;\r\n            case \"UNDEFINED\":\r\n            case 0:\r\n                message.type = 0;\r\n                break;\r\n            case \"FLOAT\":\r\n            case 1:\r\n                message.type = 1;\r\n                break;\r\n            case \"INT\":\r\n            case 2:\r\n                message.type = 2;\r\n                break;\r\n            case \"STRING\":\r\n            case 3:\r\n                message.type = 3;\r\n                break;\r\n            case \"TENSOR\":\r\n            case 4:\r\n                message.type = 4;\r\n                break;\r\n            case \"GRAPH\":\r\n            case 5:\r\n                message.type = 5;\r\n                break;\r\n            case \"SPARSE_TENSOR\":\r\n            case 11:\r\n                message.type = 11;\r\n                break;\r\n            case \"TYPE_PROTO\":\r\n            case 13:\r\n                message.type = 13;\r\n                break;\r\n            case \"FLOATS\":\r\n            case 6:\r\n                message.type = 6;\r\n                break;\r\n            case \"INTS\":\r\n            case 7:\r\n                message.type = 7;\r\n                break;\r\n            case \"STRINGS\":\r\n            case 8:\r\n                message.type = 8;\r\n                break;\r\n            case \"TENSORS\":\r\n            case 9:\r\n                message.type = 9;\r\n                break;\r\n            case \"GRAPHS\":\r\n            case 10:\r\n                message.type = 10;\r\n                break;\r\n            case \"SPARSE_TENSORS\":\r\n            case 12:\r\n                message.type = 12;\r\n                break;\r\n            case \"TYPE_PROTOS\":\r\n            case 14:\r\n                message.type = 14;\r\n                break;\r\n            }\r\n            if (object.f != null)\r\n                message.f = Number(object.f);\r\n            if (object.i != null)\r\n                if ($util.Long)\r\n                    (message.i = $util.Long.fromValue(object.i)).unsigned = false;\r\n                else if (typeof object.i === \"string\")\r\n                    message.i = parseInt(object.i, 10);\r\n                else if (typeof object.i === \"number\")\r\n                    message.i = object.i;\r\n                else if (typeof object.i === \"object\")\r\n                    message.i = new $util.LongBits(object.i.low >>> 0, object.i.high >>> 0).toNumber();\r\n            if (object.s != null)\r\n                if (typeof object.s === \"string\")\r\n                    $util.base64.decode(object.s, message.s = $util.newBuffer($util.base64.length(object.s)), 0);\r\n                else if (object.s.length >= 0)\r\n                    message.s = object.s;\r\n            if (object.t != null) {\r\n                if (typeof object.t !== \"object\")\r\n                    throw TypeError(\".onnx.AttributeProto.t: object expected\");\r\n                message.t = $root.onnx.TensorProto.fromObject(object.t);\r\n            }\r\n            if (object.g != null) {\r\n                if (typeof object.g !== \"object\")\r\n                    throw TypeError(\".onnx.AttributeProto.g: object expected\");\r\n                message.g = $root.onnx.GraphProto.fromObject(object.g);\r\n            }\r\n            if (object.sparseTensor != null) {\r\n                if (typeof object.sparseTensor !== \"object\")\r\n                    throw TypeError(\".onnx.AttributeProto.sparseTensor: object expected\");\r\n                message.sparseTensor = $root.onnx.SparseTensorProto.fromObject(object.sparseTensor);\r\n            }\r\n            if (object.tp != null) {\r\n                if (typeof object.tp !== \"object\")\r\n                    throw TypeError(\".onnx.AttributeProto.tp: object expected\");\r\n                message.tp = $root.onnx.TypeProto.fromObject(object.tp);\r\n            }\r\n            if (object.floats) {\r\n                if (!Array.isArray(object.floats))\r\n                    throw TypeError(\".onnx.AttributeProto.floats: array expected\");\r\n                message.floats = [];\r\n                for (var i = 0; i < object.floats.length; ++i)\r\n                    message.floats[i] = Number(object.floats[i]);\r\n            }\r\n            if (object.ints) {\r\n                if (!Array.isArray(object.ints))\r\n                    throw TypeError(\".onnx.AttributeProto.ints: array expected\");\r\n                message.ints = [];\r\n                for (var i = 0; i < object.ints.length; ++i)\r\n                    if ($util.Long)\r\n                        (message.ints[i] = $util.Long.fromValue(object.ints[i])).unsigned = false;\r\n                    else if (typeof object.ints[i] === \"string\")\r\n                        message.ints[i] = parseInt(object.ints[i], 10);\r\n                    else if (typeof object.ints[i] === \"number\")\r\n                        message.ints[i] = object.ints[i];\r\n                    else if (typeof object.ints[i] === \"object\")\r\n                        message.ints[i] = new $util.LongBits(object.ints[i].low >>> 0, object.ints[i].high >>> 0).toNumber();\r\n            }\r\n            if (object.strings) {\r\n                if (!Array.isArray(object.strings))\r\n                    throw TypeError(\".onnx.AttributeProto.strings: array expected\");\r\n                message.strings = [];\r\n                for (var i = 0; i < object.strings.length; ++i)\r\n                    if (typeof object.strings[i] === \"string\")\r\n                        $util.base64.decode(object.strings[i], message.strings[i] = $util.newBuffer($util.base64.length(object.strings[i])), 0);\r\n                    else if (object.strings[i].length >= 0)\r\n                        message.strings[i] = object.strings[i];\r\n            }\r\n            if (object.tensors) {\r\n                if (!Array.isArray(object.tensors))\r\n                    throw TypeError(\".onnx.AttributeProto.tensors: array expected\");\r\n                message.tensors = [];\r\n                for (var i = 0; i < object.tensors.length; ++i) {\r\n                    if (typeof object.tensors[i] !== \"object\")\r\n                        throw TypeError(\".onnx.AttributeProto.tensors: object expected\");\r\n                    message.tensors[i] = $root.onnx.TensorProto.fromObject(object.tensors[i]);\r\n                }\r\n            }\r\n            if (object.graphs) {\r\n                if (!Array.isArray(object.graphs))\r\n                    throw TypeError(\".onnx.AttributeProto.graphs: array expected\");\r\n                message.graphs = [];\r\n                for (var i = 0; i < object.graphs.length; ++i) {\r\n                    if (typeof object.graphs[i] !== \"object\")\r\n                        throw TypeError(\".onnx.AttributeProto.graphs: object expected\");\r\n                    message.graphs[i] = $root.onnx.GraphProto.fromObject(object.graphs[i]);\r\n                }\r\n            }\r\n            if (object.sparseTensors) {\r\n                if (!Array.isArray(object.sparseTensors))\r\n                    throw TypeError(\".onnx.AttributeProto.sparseTensors: array expected\");\r\n                message.sparseTensors = [];\r\n                for (var i = 0; i < object.sparseTensors.length; ++i) {\r\n                    if (typeof object.sparseTensors[i] !== \"object\")\r\n                        throw TypeError(\".onnx.AttributeProto.sparseTensors: object expected\");\r\n                    message.sparseTensors[i] = $root.onnx.SparseTensorProto.fromObject(object.sparseTensors[i]);\r\n                }\r\n            }\r\n            if (object.typeProtos) {\r\n                if (!Array.isArray(object.typeProtos))\r\n                    throw TypeError(\".onnx.AttributeProto.typeProtos: array expected\");\r\n                message.typeProtos = [];\r\n                for (var i = 0; i < object.typeProtos.length; ++i) {\r\n                    if (typeof object.typeProtos[i] !== \"object\")\r\n                        throw TypeError(\".onnx.AttributeProto.typeProtos: object expected\");\r\n                    message.typeProtos[i] = $root.onnx.TypeProto.fromObject(object.typeProtos[i]);\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Creates a plain object from an AttributeProto message. Also converts values to other types if specified.\r\n         * @function toObject\r\n         * @memberof onnx.AttributeProto\r\n         * @static\r\n         * @param {onnx.AttributeProto} message AttributeProto\r\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n         * @returns {Object.<string,*>} Plain object\r\n         */\r\n        AttributeProto.toObject = function toObject(message, options) {\r\n            if (!options)\r\n                options = {};\r\n            var object = {};\r\n            if (options.arrays || options.defaults) {\r\n                object.floats = [];\r\n                object.ints = [];\r\n                object.strings = [];\r\n                object.tensors = [];\r\n                object.graphs = [];\r\n                object.typeProtos = [];\r\n                object.sparseTensors = [];\r\n            }\r\n            if (options.defaults) {\r\n                object.name = \"\";\r\n                object.f = 0;\r\n                if ($util.Long) {\r\n                    var long = new $util.Long(0, 0, false);\r\n                    object.i = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\r\n                } else\r\n                    object.i = options.longs === String ? \"0\" : 0;\r\n                if (options.bytes === String)\r\n                    object.s = \"\";\r\n                else {\r\n                    object.s = [];\r\n                    if (options.bytes !== Array)\r\n                        object.s = $util.newBuffer(object.s);\r\n                }\r\n                object.t = null;\r\n                object.g = null;\r\n                object.docString = \"\";\r\n                object.tp = null;\r\n                object.type = options.enums === String ? \"UNDEFINED\" : 0;\r\n                object.refAttrName = \"\";\r\n                object.sparseTensor = null;\r\n            }\r\n            if (message.name != null && message.hasOwnProperty(\"name\"))\r\n                object.name = message.name;\r\n            if (message.f != null && message.hasOwnProperty(\"f\"))\r\n                object.f = options.json && !isFinite(message.f) ? String(message.f) : message.f;\r\n            if (message.i != null && message.hasOwnProperty(\"i\"))\r\n                if (typeof message.i === \"number\")\r\n                    object.i = options.longs === String ? String(message.i) : message.i;\r\n                else\r\n                    object.i = options.longs === String ? $util.Long.prototype.toString.call(message.i) : options.longs === Number ? new $util.LongBits(message.i.low >>> 0, message.i.high >>> 0).toNumber() : message.i;\r\n            if (message.s != null && message.hasOwnProperty(\"s\"))\r\n                object.s = options.bytes === String ? $util.base64.encode(message.s, 0, message.s.length) : options.bytes === Array ? Array.prototype.slice.call(message.s) : message.s;\r\n            if (message.t != null && message.hasOwnProperty(\"t\"))\r\n                object.t = $root.onnx.TensorProto.toObject(message.t, options);\r\n            if (message.g != null && message.hasOwnProperty(\"g\"))\r\n                object.g = $root.onnx.GraphProto.toObject(message.g, options);\r\n            if (message.floats && message.floats.length) {\r\n                object.floats = [];\r\n                for (var j = 0; j < message.floats.length; ++j)\r\n                    object.floats[j] = options.json && !isFinite(message.floats[j]) ? String(message.floats[j]) : message.floats[j];\r\n            }\r\n            if (message.ints && message.ints.length) {\r\n                object.ints = [];\r\n                for (var j = 0; j < message.ints.length; ++j)\r\n                    if (typeof message.ints[j] === \"number\")\r\n                        object.ints[j] = options.longs === String ? String(message.ints[j]) : message.ints[j];\r\n                    else\r\n                        object.ints[j] = options.longs === String ? $util.Long.prototype.toString.call(message.ints[j]) : options.longs === Number ? new $util.LongBits(message.ints[j].low >>> 0, message.ints[j].high >>> 0).toNumber() : message.ints[j];\r\n            }\r\n            if (message.strings && message.strings.length) {\r\n                object.strings = [];\r\n                for (var j = 0; j < message.strings.length; ++j)\r\n                    object.strings[j] = options.bytes === String ? $util.base64.encode(message.strings[j], 0, message.strings[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.strings[j]) : message.strings[j];\r\n            }\r\n            if (message.tensors && message.tensors.length) {\r\n                object.tensors = [];\r\n                for (var j = 0; j < message.tensors.length; ++j)\r\n                    object.tensors[j] = $root.onnx.TensorProto.toObject(message.tensors[j], options);\r\n            }\r\n            if (message.graphs && message.graphs.length) {\r\n                object.graphs = [];\r\n                for (var j = 0; j < message.graphs.length; ++j)\r\n                    object.graphs[j] = $root.onnx.GraphProto.toObject(message.graphs[j], options);\r\n            }\r\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\r\n                object.docString = message.docString;\r\n            if (message.tp != null && message.hasOwnProperty(\"tp\"))\r\n                object.tp = $root.onnx.TypeProto.toObject(message.tp, options);\r\n            if (message.typeProtos && message.typeProtos.length) {\r\n                object.typeProtos = [];\r\n                for (var j = 0; j < message.typeProtos.length; ++j)\r\n                    object.typeProtos[j] = $root.onnx.TypeProto.toObject(message.typeProtos[j], options);\r\n            }\r\n            if (message.type != null && message.hasOwnProperty(\"type\"))\r\n                object.type = options.enums === String ? $root.onnx.AttributeProto.AttributeType[message.type] === undefined ? message.type : $root.onnx.AttributeProto.AttributeType[message.type] : message.type;\r\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\r\n                object.refAttrName = message.refAttrName;\r\n            if (message.sparseTensor != null && message.hasOwnProperty(\"sparseTensor\"))\r\n                object.sparseTensor = $root.onnx.SparseTensorProto.toObject(message.sparseTensor, options);\r\n            if (message.sparseTensors && message.sparseTensors.length) {\r\n                object.sparseTensors = [];\r\n                for (var j = 0; j < message.sparseTensors.length; ++j)\r\n                    object.sparseTensors[j] = $root.onnx.SparseTensorProto.toObject(message.sparseTensors[j], options);\r\n            }\r\n            return object;\r\n        };\r\n\r\n        /**\r\n         * Converts this AttributeProto to JSON.\r\n         * @function toJSON\r\n         * @memberof onnx.AttributeProto\r\n         * @instance\r\n         * @returns {Object.<string,*>} JSON object\r\n         */\r\n        AttributeProto.prototype.toJSON = function toJSON() {\r\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n        };\r\n\r\n        /**\r\n         * Gets the default type url for AttributeProto\r\n         * @function getTypeUrl\r\n         * @memberof onnx.AttributeProto\r\n         * @static\r\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n         * @returns {string} The default type url\r\n         */\r\n        AttributeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n            if (typeUrlPrefix === undefined) {\r\n                typeUrlPrefix = \"type.googleapis.com\";\r\n            }\r\n            return typeUrlPrefix + \"/onnx.AttributeProto\";\r\n        };\r\n\r\n        /**\r\n         * AttributeType enum.\r\n         * @name onnx.AttributeProto.AttributeType\r\n         * @enum {number}\r\n         * @property {number} UNDEFINED=0 UNDEFINED value\r\n         * @property {number} FLOAT=1 FLOAT value\r\n         * @property {number} INT=2 INT value\r\n         * @property {number} STRING=3 STRING value\r\n         * @property {number} TENSOR=4 TENSOR value\r\n         * @property {number} GRAPH=5 GRAPH value\r\n         * @property {number} SPARSE_TENSOR=11 SPARSE_TENSOR value\r\n         * @property {number} TYPE_PROTO=13 TYPE_PROTO value\r\n         * @property {number} FLOATS=6 FLOATS value\r\n         * @property {number} INTS=7 INTS value\r\n         * @property {number} STRINGS=8 STRINGS value\r\n         * @property {number} TENSORS=9 TENSORS value\r\n         * @property {number} GRAPHS=10 GRAPHS value\r\n         * @property {number} SPARSE_TENSORS=12 SPARSE_TENSORS value\r\n         * @property {number} TYPE_PROTOS=14 TYPE_PROTOS value\r\n         */\r\n        AttributeProto.AttributeType = (function() {\r\n            var valuesById = {}, values = Object.create(valuesById);\r\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\r\n            values[valuesById[1] = \"FLOAT\"] = 1;\r\n            values[valuesById[2] = \"INT\"] = 2;\r\n            values[valuesById[3] = \"STRING\"] = 3;\r\n            values[valuesById[4] = \"TENSOR\"] = 4;\r\n            values[valuesById[5] = \"GRAPH\"] = 5;\r\n            values[valuesById[11] = \"SPARSE_TENSOR\"] = 11;\r\n            values[valuesById[13] = \"TYPE_PROTO\"] = 13;\r\n            values[valuesById[6] = \"FLOATS\"] = 6;\r\n            values[valuesById[7] = \"INTS\"] = 7;\r\n            values[valuesById[8] = \"STRINGS\"] = 8;\r\n            values[valuesById[9] = \"TENSORS\"] = 9;\r\n            values[valuesById[10] = \"GRAPHS\"] = 10;\r\n            values[valuesById[12] = \"SPARSE_TENSORS\"] = 12;\r\n            values[valuesById[14] = \"TYPE_PROTOS\"] = 14;\r\n            return values;\r\n        })();\r\n\r\n        return AttributeProto;\r\n    })();\r\n\r\n    onnx.ValueInfoProto = (function() {\r\n\r\n        /**\r\n         * Properties of a ValueInfoProto.\r\n         * @memberof onnx\r\n         * @interface IValueInfoProto\r\n         * @property {string|null} [name] ValueInfoProto name\r\n         * @property {onnx.ITypeProto|null} [type] ValueInfoProto type\r\n         * @property {string|null} [docString] ValueInfoProto docString\r\n         */\r\n\r\n        /**\r\n         * Constructs a new ValueInfoProto.\r\n         * @memberof onnx\r\n         * @classdesc Represents a ValueInfoProto.\r\n         * @implements IValueInfoProto\r\n         * @constructor\r\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\r\n         */\r\n        function ValueInfoProto(properties) {\r\n            if (properties)\r\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                    if (properties[keys[i]] != null)\r\n                        this[keys[i]] = properties[keys[i]];\r\n        }\r\n\r\n        /**\r\n         * ValueInfoProto name.\r\n         * @member {string} name\r\n         * @memberof onnx.ValueInfoProto\r\n         * @instance\r\n         */\r\n        ValueInfoProto.prototype.name = \"\";\r\n\r\n        /**\r\n         * ValueInfoProto type.\r\n         * @member {onnx.ITypeProto|null|undefined} type\r\n         * @memberof onnx.ValueInfoProto\r\n         * @instance\r\n         */\r\n        ValueInfoProto.prototype.type = null;\r\n\r\n        /**\r\n         * ValueInfoProto docString.\r\n         * @member {string} docString\r\n         * @memberof onnx.ValueInfoProto\r\n         * @instance\r\n         */\r\n        ValueInfoProto.prototype.docString = \"\";\r\n\r\n        /**\r\n         * Creates a new ValueInfoProto instance using the specified properties.\r\n         * @function create\r\n         * @memberof onnx.ValueInfoProto\r\n         * @static\r\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\r\n         * @returns {onnx.ValueInfoProto} ValueInfoProto instance\r\n         */\r\n        ValueInfoProto.create = function create(properties) {\r\n            return new ValueInfoProto(properties);\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified ValueInfoProto message. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\r\n         * @function encode\r\n         * @memberof onnx.ValueInfoProto\r\n         * @static\r\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        ValueInfoProto.encode = function encode(message, writer) {\r\n            if (!writer)\r\n                writer = $Writer.create();\r\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\r\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\r\n            if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\r\n                $root.onnx.TypeProto.encode(message.type, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\r\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\r\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.docString);\r\n            return writer;\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified ValueInfoProto message, length delimited. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\r\n         * @function encodeDelimited\r\n         * @memberof onnx.ValueInfoProto\r\n         * @static\r\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        ValueInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\r\n            return this.encode(message, writer).ldelim();\r\n        };\r\n\r\n        /**\r\n         * Decodes a ValueInfoProto message from the specified reader or buffer.\r\n         * @function decode\r\n         * @memberof onnx.ValueInfoProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @param {number} [length] Message length if known beforehand\r\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        ValueInfoProto.decode = function decode(reader, length) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = $Reader.create(reader);\r\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ValueInfoProto();\r\n            while (reader.pos < end) {\r\n                var tag = reader.uint32();\r\n                switch (tag >>> 3) {\r\n                case 1: {\r\n                        message.name = reader.string();\r\n                        break;\r\n                    }\r\n                case 2: {\r\n                        message.type = $root.onnx.TypeProto.decode(reader, reader.uint32());\r\n                        break;\r\n                    }\r\n                case 3: {\r\n                        message.docString = reader.string();\r\n                        break;\r\n                    }\r\n                default:\r\n                    reader.skipType(tag & 7);\r\n                    break;\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Decodes a ValueInfoProto message from the specified reader or buffer, length delimited.\r\n         * @function decodeDelimited\r\n         * @memberof onnx.ValueInfoProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        ValueInfoProto.decodeDelimited = function decodeDelimited(reader) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = new $Reader(reader);\r\n            return this.decode(reader, reader.uint32());\r\n        };\r\n\r\n        /**\r\n         * Verifies a ValueInfoProto message.\r\n         * @function verify\r\n         * @memberof onnx.ValueInfoProto\r\n         * @static\r\n         * @param {Object.<string,*>} message Plain object to verify\r\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n         */\r\n        ValueInfoProto.verify = function verify(message) {\r\n            if (typeof message !== \"object\" || message === null)\r\n                return \"object expected\";\r\n            if (message.name != null && message.hasOwnProperty(\"name\"))\r\n                if (!$util.isString(message.name))\r\n                    return \"name: string expected\";\r\n            if (message.type != null && message.hasOwnProperty(\"type\")) {\r\n                var error = $root.onnx.TypeProto.verify(message.type);\r\n                if (error)\r\n                    return \"type.\" + error;\r\n            }\r\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\r\n                if (!$util.isString(message.docString))\r\n                    return \"docString: string expected\";\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Creates a ValueInfoProto message from a plain object. Also converts values to their respective internal types.\r\n         * @function fromObject\r\n         * @memberof onnx.ValueInfoProto\r\n         * @static\r\n         * @param {Object.<string,*>} object Plain object\r\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\r\n         */\r\n        ValueInfoProto.fromObject = function fromObject(object) {\r\n            if (object instanceof $root.onnx.ValueInfoProto)\r\n                return object;\r\n            var message = new $root.onnx.ValueInfoProto();\r\n            if (object.name != null)\r\n                message.name = String(object.name);\r\n            if (object.type != null) {\r\n                if (typeof object.type !== \"object\")\r\n                    throw TypeError(\".onnx.ValueInfoProto.type: object expected\");\r\n                message.type = $root.onnx.TypeProto.fromObject(object.type);\r\n            }\r\n            if (object.docString != null)\r\n                message.docString = String(object.docString);\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Creates a plain object from a ValueInfoProto message. Also converts values to other types if specified.\r\n         * @function toObject\r\n         * @memberof onnx.ValueInfoProto\r\n         * @static\r\n         * @param {onnx.ValueInfoProto} message ValueInfoProto\r\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n         * @returns {Object.<string,*>} Plain object\r\n         */\r\n        ValueInfoProto.toObject = function toObject(message, options) {\r\n            if (!options)\r\n                options = {};\r\n            var object = {};\r\n            if (options.defaults) {\r\n                object.name = \"\";\r\n                object.type = null;\r\n                object.docString = \"\";\r\n            }\r\n            if (message.name != null && message.hasOwnProperty(\"name\"))\r\n                object.name = message.name;\r\n            if (message.type != null && message.hasOwnProperty(\"type\"))\r\n                object.type = $root.onnx.TypeProto.toObject(message.type, options);\r\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\r\n                object.docString = message.docString;\r\n            return object;\r\n        };\r\n\r\n        /**\r\n         * Converts this ValueInfoProto to JSON.\r\n         * @function toJSON\r\n         * @memberof onnx.ValueInfoProto\r\n         * @instance\r\n         * @returns {Object.<string,*>} JSON object\r\n         */\r\n        ValueInfoProto.prototype.toJSON = function toJSON() {\r\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n        };\r\n\r\n        /**\r\n         * Gets the default type url for ValueInfoProto\r\n         * @function getTypeUrl\r\n         * @memberof onnx.ValueInfoProto\r\n         * @static\r\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n         * @returns {string} The default type url\r\n         */\r\n        ValueInfoProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n            if (typeUrlPrefix === undefined) {\r\n                typeUrlPrefix = \"type.googleapis.com\";\r\n            }\r\n            return typeUrlPrefix + \"/onnx.ValueInfoProto\";\r\n        };\r\n\r\n        return ValueInfoProto;\r\n    })();\r\n\r\n    onnx.NodeProto = (function() {\r\n\r\n        /**\r\n         * Properties of a NodeProto.\r\n         * @memberof onnx\r\n         * @interface INodeProto\r\n         * @property {Array.<string>|null} [input] NodeProto input\r\n         * @property {Array.<string>|null} [output] NodeProto output\r\n         * @property {string|null} [name] NodeProto name\r\n         * @property {string|null} [opType] NodeProto opType\r\n         * @property {string|null} [domain] NodeProto domain\r\n         * @property {Array.<onnx.IAttributeProto>|null} [attribute] NodeProto attribute\r\n         * @property {string|null} [docString] NodeProto docString\r\n         */\r\n\r\n        /**\r\n         * Constructs a new NodeProto.\r\n         * @memberof onnx\r\n         * @classdesc Represents a NodeProto.\r\n         * @implements INodeProto\r\n         * @constructor\r\n         * @param {onnx.INodeProto=} [properties] Properties to set\r\n         */\r\n        function NodeProto(properties) {\r\n            this.input = [];\r\n            this.output = [];\r\n            this.attribute = [];\r\n            if (properties)\r\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                    if (properties[keys[i]] != null)\r\n                        this[keys[i]] = properties[keys[i]];\r\n        }\r\n\r\n        /**\r\n         * NodeProto input.\r\n         * @member {Array.<string>} input\r\n         * @memberof onnx.NodeProto\r\n         * @instance\r\n         */\r\n        NodeProto.prototype.input = $util.emptyArray;\r\n\r\n        /**\r\n         * NodeProto output.\r\n         * @member {Array.<string>} output\r\n         * @memberof onnx.NodeProto\r\n         * @instance\r\n         */\r\n        NodeProto.prototype.output = $util.emptyArray;\r\n\r\n        /**\r\n         * NodeProto name.\r\n         * @member {string} name\r\n         * @memberof onnx.NodeProto\r\n         * @instance\r\n         */\r\n        NodeProto.prototype.name = \"\";\r\n\r\n        /**\r\n         * NodeProto opType.\r\n         * @member {string} opType\r\n         * @memberof onnx.NodeProto\r\n         * @instance\r\n         */\r\n        NodeProto.prototype.opType = \"\";\r\n\r\n        /**\r\n         * NodeProto domain.\r\n         * @member {string} domain\r\n         * @memberof onnx.NodeProto\r\n         * @instance\r\n         */\r\n        NodeProto.prototype.domain = \"\";\r\n\r\n        /**\r\n         * NodeProto attribute.\r\n         * @member {Array.<onnx.IAttributeProto>} attribute\r\n         * @memberof onnx.NodeProto\r\n         * @instance\r\n         */\r\n        NodeProto.prototype.attribute = $util.emptyArray;\r\n\r\n        /**\r\n         * NodeProto docString.\r\n         * @member {string} docString\r\n         * @memberof onnx.NodeProto\r\n         * @instance\r\n         */\r\n        NodeProto.prototype.docString = \"\";\r\n\r\n        /**\r\n         * Creates a new NodeProto instance using the specified properties.\r\n         * @function create\r\n         * @memberof onnx.NodeProto\r\n         * @static\r\n         * @param {onnx.INodeProto=} [properties] Properties to set\r\n         * @returns {onnx.NodeProto} NodeProto instance\r\n         */\r\n        NodeProto.create = function create(properties) {\r\n            return new NodeProto(properties);\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified NodeProto message. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\r\n         * @function encode\r\n         * @memberof onnx.NodeProto\r\n         * @static\r\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        NodeProto.encode = function encode(message, writer) {\r\n            if (!writer)\r\n                writer = $Writer.create();\r\n            if (message.input != null && message.input.length)\r\n                for (var i = 0; i < message.input.length; ++i)\r\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.input[i]);\r\n            if (message.output != null && message.output.length)\r\n                for (var i = 0; i < message.output.length; ++i)\r\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.output[i]);\r\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\r\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);\r\n            if (message.opType != null && Object.hasOwnProperty.call(message, \"opType\"))\r\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.opType);\r\n            if (message.attribute != null && message.attribute.length)\r\n                for (var i = 0; i < message.attribute.length; ++i)\r\n                    $root.onnx.AttributeProto.encode(message.attribute[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\r\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\r\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\r\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\r\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.domain);\r\n            return writer;\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified NodeProto message, length delimited. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\r\n         * @function encodeDelimited\r\n         * @memberof onnx.NodeProto\r\n         * @static\r\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        NodeProto.encodeDelimited = function encodeDelimited(message, writer) {\r\n            return this.encode(message, writer).ldelim();\r\n        };\r\n\r\n        /**\r\n         * Decodes a NodeProto message from the specified reader or buffer.\r\n         * @function decode\r\n         * @memberof onnx.NodeProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @param {number} [length] Message length if known beforehand\r\n         * @returns {onnx.NodeProto} NodeProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        NodeProto.decode = function decode(reader, length) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = $Reader.create(reader);\r\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.NodeProto();\r\n            while (reader.pos < end) {\r\n                var tag = reader.uint32();\r\n                switch (tag >>> 3) {\r\n                case 1: {\r\n                        if (!(message.input && message.input.length))\r\n                            message.input = [];\r\n                        message.input.push(reader.string());\r\n                        break;\r\n                    }\r\n                case 2: {\r\n                        if (!(message.output && message.output.length))\r\n                            message.output = [];\r\n                        message.output.push(reader.string());\r\n                        break;\r\n                    }\r\n                case 3: {\r\n                        message.name = reader.string();\r\n                        break;\r\n                    }\r\n                case 4: {\r\n                        message.opType = reader.string();\r\n                        break;\r\n                    }\r\n                case 7: {\r\n                        message.domain = reader.string();\r\n                        break;\r\n                    }\r\n                case 5: {\r\n                        if (!(message.attribute && message.attribute.length))\r\n                            message.attribute = [];\r\n                        message.attribute.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                case 6: {\r\n                        message.docString = reader.string();\r\n                        break;\r\n                    }\r\n                default:\r\n                    reader.skipType(tag & 7);\r\n                    break;\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Decodes a NodeProto message from the specified reader or buffer, length delimited.\r\n         * @function decodeDelimited\r\n         * @memberof onnx.NodeProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @returns {onnx.NodeProto} NodeProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        NodeProto.decodeDelimited = function decodeDelimited(reader) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = new $Reader(reader);\r\n            return this.decode(reader, reader.uint32());\r\n        };\r\n\r\n        /**\r\n         * Verifies a NodeProto message.\r\n         * @function verify\r\n         * @memberof onnx.NodeProto\r\n         * @static\r\n         * @param {Object.<string,*>} message Plain object to verify\r\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n         */\r\n        NodeProto.verify = function verify(message) {\r\n            if (typeof message !== \"object\" || message === null)\r\n                return \"object expected\";\r\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\r\n                if (!Array.isArray(message.input))\r\n                    return \"input: array expected\";\r\n                for (var i = 0; i < message.input.length; ++i)\r\n                    if (!$util.isString(message.input[i]))\r\n                        return \"input: string[] expected\";\r\n            }\r\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\r\n                if (!Array.isArray(message.output))\r\n                    return \"output: array expected\";\r\n                for (var i = 0; i < message.output.length; ++i)\r\n                    if (!$util.isString(message.output[i]))\r\n                        return \"output: string[] expected\";\r\n            }\r\n            if (message.name != null && message.hasOwnProperty(\"name\"))\r\n                if (!$util.isString(message.name))\r\n                    return \"name: string expected\";\r\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\r\n                if (!$util.isString(message.opType))\r\n                    return \"opType: string expected\";\r\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\r\n                if (!$util.isString(message.domain))\r\n                    return \"domain: string expected\";\r\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\r\n                if (!Array.isArray(message.attribute))\r\n                    return \"attribute: array expected\";\r\n                for (var i = 0; i < message.attribute.length; ++i) {\r\n                    var error = $root.onnx.AttributeProto.verify(message.attribute[i]);\r\n                    if (error)\r\n                        return \"attribute.\" + error;\r\n                }\r\n            }\r\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\r\n                if (!$util.isString(message.docString))\r\n                    return \"docString: string expected\";\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Creates a NodeProto message from a plain object. Also converts values to their respective internal types.\r\n         * @function fromObject\r\n         * @memberof onnx.NodeProto\r\n         * @static\r\n         * @param {Object.<string,*>} object Plain object\r\n         * @returns {onnx.NodeProto} NodeProto\r\n         */\r\n        NodeProto.fromObject = function fromObject(object) {\r\n            if (object instanceof $root.onnx.NodeProto)\r\n                return object;\r\n            var message = new $root.onnx.NodeProto();\r\n            if (object.input) {\r\n                if (!Array.isArray(object.input))\r\n                    throw TypeError(\".onnx.NodeProto.input: array expected\");\r\n                message.input = [];\r\n                for (var i = 0; i < object.input.length; ++i)\r\n                    message.input[i] = String(object.input[i]);\r\n            }\r\n            if (object.output) {\r\n                if (!Array.isArray(object.output))\r\n                    throw TypeError(\".onnx.NodeProto.output: array expected\");\r\n                message.output = [];\r\n                for (var i = 0; i < object.output.length; ++i)\r\n                    message.output[i] = String(object.output[i]);\r\n            }\r\n            if (object.name != null)\r\n                message.name = String(object.name);\r\n            if (object.opType != null)\r\n                message.opType = String(object.opType);\r\n            if (object.domain != null)\r\n                message.domain = String(object.domain);\r\n            if (object.attribute) {\r\n                if (!Array.isArray(object.attribute))\r\n                    throw TypeError(\".onnx.NodeProto.attribute: array expected\");\r\n                message.attribute = [];\r\n                for (var i = 0; i < object.attribute.length; ++i) {\r\n                    if (typeof object.attribute[i] !== \"object\")\r\n                        throw TypeError(\".onnx.NodeProto.attribute: object expected\");\r\n                    message.attribute[i] = $root.onnx.AttributeProto.fromObject(object.attribute[i]);\r\n                }\r\n            }\r\n            if (object.docString != null)\r\n                message.docString = String(object.docString);\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Creates a plain object from a NodeProto message. Also converts values to other types if specified.\r\n         * @function toObject\r\n         * @memberof onnx.NodeProto\r\n         * @static\r\n         * @param {onnx.NodeProto} message NodeProto\r\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n         * @returns {Object.<string,*>} Plain object\r\n         */\r\n        NodeProto.toObject = function toObject(message, options) {\r\n            if (!options)\r\n                options = {};\r\n            var object = {};\r\n            if (options.arrays || options.defaults) {\r\n                object.input = [];\r\n                object.output = [];\r\n                object.attribute = [];\r\n            }\r\n            if (options.defaults) {\r\n                object.name = \"\";\r\n                object.opType = \"\";\r\n                object.docString = \"\";\r\n                object.domain = \"\";\r\n            }\r\n            if (message.input && message.input.length) {\r\n                object.input = [];\r\n                for (var j = 0; j < message.input.length; ++j)\r\n                    object.input[j] = message.input[j];\r\n            }\r\n            if (message.output && message.output.length) {\r\n                object.output = [];\r\n                for (var j = 0; j < message.output.length; ++j)\r\n                    object.output[j] = message.output[j];\r\n            }\r\n            if (message.name != null && message.hasOwnProperty(\"name\"))\r\n                object.name = message.name;\r\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\r\n                object.opType = message.opType;\r\n            if (message.attribute && message.attribute.length) {\r\n                object.attribute = [];\r\n                for (var j = 0; j < message.attribute.length; ++j)\r\n                    object.attribute[j] = $root.onnx.AttributeProto.toObject(message.attribute[j], options);\r\n            }\r\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\r\n                object.docString = message.docString;\r\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\r\n                object.domain = message.domain;\r\n            return object;\r\n        };\r\n\r\n        /**\r\n         * Converts this NodeProto to JSON.\r\n         * @function toJSON\r\n         * @memberof onnx.NodeProto\r\n         * @instance\r\n         * @returns {Object.<string,*>} JSON object\r\n         */\r\n        NodeProto.prototype.toJSON = function toJSON() {\r\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n        };\r\n\r\n        /**\r\n         * Gets the default type url for NodeProto\r\n         * @function getTypeUrl\r\n         * @memberof onnx.NodeProto\r\n         * @static\r\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n         * @returns {string} The default type url\r\n         */\r\n        NodeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n            if (typeUrlPrefix === undefined) {\r\n                typeUrlPrefix = \"type.googleapis.com\";\r\n            }\r\n            return typeUrlPrefix + \"/onnx.NodeProto\";\r\n        };\r\n\r\n        return NodeProto;\r\n    })();\r\n\r\n    onnx.TrainingInfoProto = (function() {\r\n\r\n        /**\r\n         * Properties of a TrainingInfoProto.\r\n         * @memberof onnx\r\n         * @interface ITrainingInfoProto\r\n         * @property {onnx.IGraphProto|null} [initialization] TrainingInfoProto initialization\r\n         * @property {onnx.IGraphProto|null} [algorithm] TrainingInfoProto algorithm\r\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [initializationBinding] TrainingInfoProto initializationBinding\r\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [updateBinding] TrainingInfoProto updateBinding\r\n         */\r\n\r\n        /**\r\n         * Constructs a new TrainingInfoProto.\r\n         * @memberof onnx\r\n         * @classdesc Represents a TrainingInfoProto.\r\n         * @implements ITrainingInfoProto\r\n         * @constructor\r\n         * @param {onnx.ITrainingInfoProto=} [properties] Properties to set\r\n         */\r\n        function TrainingInfoProto(properties) {\r\n            this.initializationBinding = [];\r\n            this.updateBinding = [];\r\n            if (properties)\r\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                    if (properties[keys[i]] != null)\r\n                        this[keys[i]] = properties[keys[i]];\r\n        }\r\n\r\n        /**\r\n         * TrainingInfoProto initialization.\r\n         * @member {onnx.IGraphProto|null|undefined} initialization\r\n         * @memberof onnx.TrainingInfoProto\r\n         * @instance\r\n         */\r\n        TrainingInfoProto.prototype.initialization = null;\r\n\r\n        /**\r\n         * TrainingInfoProto algorithm.\r\n         * @member {onnx.IGraphProto|null|undefined} algorithm\r\n         * @memberof onnx.TrainingInfoProto\r\n         * @instance\r\n         */\r\n        TrainingInfoProto.prototype.algorithm = null;\r\n\r\n        /**\r\n         * TrainingInfoProto initializationBinding.\r\n         * @member {Array.<onnx.IStringStringEntryProto>} initializationBinding\r\n         * @memberof onnx.TrainingInfoProto\r\n         * @instance\r\n         */\r\n        TrainingInfoProto.prototype.initializationBinding = $util.emptyArray;\r\n\r\n        /**\r\n         * TrainingInfoProto updateBinding.\r\n         * @member {Array.<onnx.IStringStringEntryProto>} updateBinding\r\n         * @memberof onnx.TrainingInfoProto\r\n         * @instance\r\n         */\r\n        TrainingInfoProto.prototype.updateBinding = $util.emptyArray;\r\n\r\n        /**\r\n         * Creates a new TrainingInfoProto instance using the specified properties.\r\n         * @function create\r\n         * @memberof onnx.TrainingInfoProto\r\n         * @static\r\n         * @param {onnx.ITrainingInfoProto=} [properties] Properties to set\r\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto instance\r\n         */\r\n        TrainingInfoProto.create = function create(properties) {\r\n            return new TrainingInfoProto(properties);\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified TrainingInfoProto message. Does not implicitly {@link onnx.TrainingInfoProto.verify|verify} messages.\r\n         * @function encode\r\n         * @memberof onnx.TrainingInfoProto\r\n         * @static\r\n         * @param {onnx.ITrainingInfoProto} message TrainingInfoProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        TrainingInfoProto.encode = function encode(message, writer) {\r\n            if (!writer)\r\n                writer = $Writer.create();\r\n            if (message.initialization != null && Object.hasOwnProperty.call(message, \"initialization\"))\r\n                $root.onnx.GraphProto.encode(message.initialization, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\r\n            if (message.algorithm != null && Object.hasOwnProperty.call(message, \"algorithm\"))\r\n                $root.onnx.GraphProto.encode(message.algorithm, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\r\n            if (message.initializationBinding != null && message.initializationBinding.length)\r\n                for (var i = 0; i < message.initializationBinding.length; ++i)\r\n                    $root.onnx.StringStringEntryProto.encode(message.initializationBinding[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\r\n            if (message.updateBinding != null && message.updateBinding.length)\r\n                for (var i = 0; i < message.updateBinding.length; ++i)\r\n                    $root.onnx.StringStringEntryProto.encode(message.updateBinding[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\r\n            return writer;\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified TrainingInfoProto message, length delimited. Does not implicitly {@link onnx.TrainingInfoProto.verify|verify} messages.\r\n         * @function encodeDelimited\r\n         * @memberof onnx.TrainingInfoProto\r\n         * @static\r\n         * @param {onnx.ITrainingInfoProto} message TrainingInfoProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        TrainingInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\r\n            return this.encode(message, writer).ldelim();\r\n        };\r\n\r\n        /**\r\n         * Decodes a TrainingInfoProto message from the specified reader or buffer.\r\n         * @function decode\r\n         * @memberof onnx.TrainingInfoProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @param {number} [length] Message length if known beforehand\r\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        TrainingInfoProto.decode = function decode(reader, length) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = $Reader.create(reader);\r\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TrainingInfoProto();\r\n            while (reader.pos < end) {\r\n                var tag = reader.uint32();\r\n                switch (tag >>> 3) {\r\n                case 1: {\r\n                        message.initialization = $root.onnx.GraphProto.decode(reader, reader.uint32());\r\n                        break;\r\n                    }\r\n                case 2: {\r\n                        message.algorithm = $root.onnx.GraphProto.decode(reader, reader.uint32());\r\n                        break;\r\n                    }\r\n                case 3: {\r\n                        if (!(message.initializationBinding && message.initializationBinding.length))\r\n                            message.initializationBinding = [];\r\n                        message.initializationBinding.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                case 4: {\r\n                        if (!(message.updateBinding && message.updateBinding.length))\r\n                            message.updateBinding = [];\r\n                        message.updateBinding.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                default:\r\n                    reader.skipType(tag & 7);\r\n                    break;\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Decodes a TrainingInfoProto message from the specified reader or buffer, length delimited.\r\n         * @function decodeDelimited\r\n         * @memberof onnx.TrainingInfoProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        TrainingInfoProto.decodeDelimited = function decodeDelimited(reader) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = new $Reader(reader);\r\n            return this.decode(reader, reader.uint32());\r\n        };\r\n\r\n        /**\r\n         * Verifies a TrainingInfoProto message.\r\n         * @function verify\r\n         * @memberof onnx.TrainingInfoProto\r\n         * @static\r\n         * @param {Object.<string,*>} message Plain object to verify\r\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n         */\r\n        TrainingInfoProto.verify = function verify(message) {\r\n            if (typeof message !== \"object\" || message === null)\r\n                return \"object expected\";\r\n            if (message.initialization != null && message.hasOwnProperty(\"initialization\")) {\r\n                var error = $root.onnx.GraphProto.verify(message.initialization);\r\n                if (error)\r\n                    return \"initialization.\" + error;\r\n            }\r\n            if (message.algorithm != null && message.hasOwnProperty(\"algorithm\")) {\r\n                var error = $root.onnx.GraphProto.verify(message.algorithm);\r\n                if (error)\r\n                    return \"algorithm.\" + error;\r\n            }\r\n            if (message.initializationBinding != null && message.hasOwnProperty(\"initializationBinding\")) {\r\n                if (!Array.isArray(message.initializationBinding))\r\n                    return \"initializationBinding: array expected\";\r\n                for (var i = 0; i < message.initializationBinding.length; ++i) {\r\n                    var error = $root.onnx.StringStringEntryProto.verify(message.initializationBinding[i]);\r\n                    if (error)\r\n                        return \"initializationBinding.\" + error;\r\n                }\r\n            }\r\n            if (message.updateBinding != null && message.hasOwnProperty(\"updateBinding\")) {\r\n                if (!Array.isArray(message.updateBinding))\r\n                    return \"updateBinding: array expected\";\r\n                for (var i = 0; i < message.updateBinding.length; ++i) {\r\n                    var error = $root.onnx.StringStringEntryProto.verify(message.updateBinding[i]);\r\n                    if (error)\r\n                        return \"updateBinding.\" + error;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Creates a TrainingInfoProto message from a plain object. Also converts values to their respective internal types.\r\n         * @function fromObject\r\n         * @memberof onnx.TrainingInfoProto\r\n         * @static\r\n         * @param {Object.<string,*>} object Plain object\r\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto\r\n         */\r\n        TrainingInfoProto.fromObject = function fromObject(object) {\r\n            if (object instanceof $root.onnx.TrainingInfoProto)\r\n                return object;\r\n            var message = new $root.onnx.TrainingInfoProto();\r\n            if (object.initialization != null) {\r\n                if (typeof object.initialization !== \"object\")\r\n                    throw TypeError(\".onnx.TrainingInfoProto.initialization: object expected\");\r\n                message.initialization = $root.onnx.GraphProto.fromObject(object.initialization);\r\n            }\r\n            if (object.algorithm != null) {\r\n                if (typeof object.algorithm !== \"object\")\r\n                    throw TypeError(\".onnx.TrainingInfoProto.algorithm: object expected\");\r\n                message.algorithm = $root.onnx.GraphProto.fromObject(object.algorithm);\r\n            }\r\n            if (object.initializationBinding) {\r\n                if (!Array.isArray(object.initializationBinding))\r\n                    throw TypeError(\".onnx.TrainingInfoProto.initializationBinding: array expected\");\r\n                message.initializationBinding = [];\r\n                for (var i = 0; i < object.initializationBinding.length; ++i) {\r\n                    if (typeof object.initializationBinding[i] !== \"object\")\r\n                        throw TypeError(\".onnx.TrainingInfoProto.initializationBinding: object expected\");\r\n                    message.initializationBinding[i] = $root.onnx.StringStringEntryProto.fromObject(object.initializationBinding[i]);\r\n                }\r\n            }\r\n            if (object.updateBinding) {\r\n                if (!Array.isArray(object.updateBinding))\r\n                    throw TypeError(\".onnx.TrainingInfoProto.updateBinding: array expected\");\r\n                message.updateBinding = [];\r\n                for (var i = 0; i < object.updateBinding.length; ++i) {\r\n                    if (typeof object.updateBinding[i] !== \"object\")\r\n                        throw TypeError(\".onnx.TrainingInfoProto.updateBinding: object expected\");\r\n                    message.updateBinding[i] = $root.onnx.StringStringEntryProto.fromObject(object.updateBinding[i]);\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Creates a plain object from a TrainingInfoProto message. Also converts values to other types if specified.\r\n         * @function toObject\r\n         * @memberof onnx.TrainingInfoProto\r\n         * @static\r\n         * @param {onnx.TrainingInfoProto} message TrainingInfoProto\r\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n         * @returns {Object.<string,*>} Plain object\r\n         */\r\n        TrainingInfoProto.toObject = function toObject(message, options) {\r\n            if (!options)\r\n                options = {};\r\n            var object = {};\r\n            if (options.arrays || options.defaults) {\r\n                object.initializationBinding = [];\r\n                object.updateBinding = [];\r\n            }\r\n            if (options.defaults) {\r\n                object.initialization = null;\r\n                object.algorithm = null;\r\n            }\r\n            if (message.initialization != null && message.hasOwnProperty(\"initialization\"))\r\n                object.initialization = $root.onnx.GraphProto.toObject(message.initialization, options);\r\n            if (message.algorithm != null && message.hasOwnProperty(\"algorithm\"))\r\n                object.algorithm = $root.onnx.GraphProto.toObject(message.algorithm, options);\r\n            if (message.initializationBinding && message.initializationBinding.length) {\r\n                object.initializationBinding = [];\r\n                for (var j = 0; j < message.initializationBinding.length; ++j)\r\n                    object.initializationBinding[j] = $root.onnx.StringStringEntryProto.toObject(message.initializationBinding[j], options);\r\n            }\r\n            if (message.updateBinding && message.updateBinding.length) {\r\n                object.updateBinding = [];\r\n                for (var j = 0; j < message.updateBinding.length; ++j)\r\n                    object.updateBinding[j] = $root.onnx.StringStringEntryProto.toObject(message.updateBinding[j], options);\r\n            }\r\n            return object;\r\n        };\r\n\r\n        /**\r\n         * Converts this TrainingInfoProto to JSON.\r\n         * @function toJSON\r\n         * @memberof onnx.TrainingInfoProto\r\n         * @instance\r\n         * @returns {Object.<string,*>} JSON object\r\n         */\r\n        TrainingInfoProto.prototype.toJSON = function toJSON() {\r\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n        };\r\n\r\n        /**\r\n         * Gets the default type url for TrainingInfoProto\r\n         * @function getTypeUrl\r\n         * @memberof onnx.TrainingInfoProto\r\n         * @static\r\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n         * @returns {string} The default type url\r\n         */\r\n        TrainingInfoProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n            if (typeUrlPrefix === undefined) {\r\n                typeUrlPrefix = \"type.googleapis.com\";\r\n            }\r\n            return typeUrlPrefix + \"/onnx.TrainingInfoProto\";\r\n        };\r\n\r\n        return TrainingInfoProto;\r\n    })();\r\n\r\n    onnx.ModelProto = (function() {\r\n\r\n        /**\r\n         * Properties of a ModelProto.\r\n         * @memberof onnx\r\n         * @interface IModelProto\r\n         * @property {number|Long|null} [irVersion] ModelProto irVersion\r\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] ModelProto opsetImport\r\n         * @property {string|null} [producerName] ModelProto producerName\r\n         * @property {string|null} [producerVersion] ModelProto producerVersion\r\n         * @property {string|null} [domain] ModelProto domain\r\n         * @property {number|Long|null} [modelVersion] ModelProto modelVersion\r\n         * @property {string|null} [docString] ModelProto docString\r\n         * @property {onnx.IGraphProto|null} [graph] ModelProto graph\r\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [metadataProps] ModelProto metadataProps\r\n         * @property {Array.<onnx.ITrainingInfoProto>|null} [trainingInfo] ModelProto trainingInfo\r\n         * @property {Array.<onnx.IFunctionProto>|null} [functions] ModelProto functions\r\n         */\r\n\r\n        /**\r\n         * Constructs a new ModelProto.\r\n         * @memberof onnx\r\n         * @classdesc Represents a ModelProto.\r\n         * @implements IModelProto\r\n         * @constructor\r\n         * @param {onnx.IModelProto=} [properties] Properties to set\r\n         */\r\n        function ModelProto(properties) {\r\n            this.opsetImport = [];\r\n            this.metadataProps = [];\r\n            this.trainingInfo = [];\r\n            this.functions = [];\r\n            if (properties)\r\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                    if (properties[keys[i]] != null)\r\n                        this[keys[i]] = properties[keys[i]];\r\n        }\r\n\r\n        /**\r\n         * ModelProto irVersion.\r\n         * @member {number|Long} irVersion\r\n         * @memberof onnx.ModelProto\r\n         * @instance\r\n         */\r\n        ModelProto.prototype.irVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\r\n\r\n        /**\r\n         * ModelProto opsetImport.\r\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\r\n         * @memberof onnx.ModelProto\r\n         * @instance\r\n         */\r\n        ModelProto.prototype.opsetImport = $util.emptyArray;\r\n\r\n        /**\r\n         * ModelProto producerName.\r\n         * @member {string} producerName\r\n         * @memberof onnx.ModelProto\r\n         * @instance\r\n         */\r\n        ModelProto.prototype.producerName = \"\";\r\n\r\n        /**\r\n         * ModelProto producerVersion.\r\n         * @member {string} producerVersion\r\n         * @memberof onnx.ModelProto\r\n         * @instance\r\n         */\r\n        ModelProto.prototype.producerVersion = \"\";\r\n\r\n        /**\r\n         * ModelProto domain.\r\n         * @member {string} domain\r\n         * @memberof onnx.ModelProto\r\n         * @instance\r\n         */\r\n        ModelProto.prototype.domain = \"\";\r\n\r\n        /**\r\n         * ModelProto modelVersion.\r\n         * @member {number|Long} modelVersion\r\n         * @memberof onnx.ModelProto\r\n         * @instance\r\n         */\r\n        ModelProto.prototype.modelVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\r\n\r\n        /**\r\n         * ModelProto docString.\r\n         * @member {string} docString\r\n         * @memberof onnx.ModelProto\r\n         * @instance\r\n         */\r\n        ModelProto.prototype.docString = \"\";\r\n\r\n        /**\r\n         * ModelProto graph.\r\n         * @member {onnx.IGraphProto|null|undefined} graph\r\n         * @memberof onnx.ModelProto\r\n         * @instance\r\n         */\r\n        ModelProto.prototype.graph = null;\r\n\r\n        /**\r\n         * ModelProto metadataProps.\r\n         * @member {Array.<onnx.IStringStringEntryProto>} metadataProps\r\n         * @memberof onnx.ModelProto\r\n         * @instance\r\n         */\r\n        ModelProto.prototype.metadataProps = $util.emptyArray;\r\n\r\n        /**\r\n         * ModelProto trainingInfo.\r\n         * @member {Array.<onnx.ITrainingInfoProto>} trainingInfo\r\n         * @memberof onnx.ModelProto\r\n         * @instance\r\n         */\r\n        ModelProto.prototype.trainingInfo = $util.emptyArray;\r\n\r\n        /**\r\n         * ModelProto functions.\r\n         * @member {Array.<onnx.IFunctionProto>} functions\r\n         * @memberof onnx.ModelProto\r\n         * @instance\r\n         */\r\n        ModelProto.prototype.functions = $util.emptyArray;\r\n\r\n        /**\r\n         * Creates a new ModelProto instance using the specified properties.\r\n         * @function create\r\n         * @memberof onnx.ModelProto\r\n         * @static\r\n         * @param {onnx.IModelProto=} [properties] Properties to set\r\n         * @returns {onnx.ModelProto} ModelProto instance\r\n         */\r\n        ModelProto.create = function create(properties) {\r\n            return new ModelProto(properties);\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified ModelProto message. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\r\n         * @function encode\r\n         * @memberof onnx.ModelProto\r\n         * @static\r\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        ModelProto.encode = function encode(message, writer) {\r\n            if (!writer)\r\n                writer = $Writer.create();\r\n            if (message.irVersion != null && Object.hasOwnProperty.call(message, \"irVersion\"))\r\n                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.irVersion);\r\n            if (message.producerName != null && Object.hasOwnProperty.call(message, \"producerName\"))\r\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.producerName);\r\n            if (message.producerVersion != null && Object.hasOwnProperty.call(message, \"producerVersion\"))\r\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.producerVersion);\r\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\r\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.domain);\r\n            if (message.modelVersion != null && Object.hasOwnProperty.call(message, \"modelVersion\"))\r\n                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.modelVersion);\r\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\r\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\r\n            if (message.graph != null && Object.hasOwnProperty.call(message, \"graph\"))\r\n                $root.onnx.GraphProto.encode(message.graph, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\r\n            if (message.opsetImport != null && message.opsetImport.length)\r\n                for (var i = 0; i < message.opsetImport.length; ++i)\r\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\r\n            if (message.metadataProps != null && message.metadataProps.length)\r\n                for (var i = 0; i < message.metadataProps.length; ++i)\r\n                    $root.onnx.StringStringEntryProto.encode(message.metadataProps[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\r\n            if (message.trainingInfo != null && message.trainingInfo.length)\r\n                for (var i = 0; i < message.trainingInfo.length; ++i)\r\n                    $root.onnx.TrainingInfoProto.encode(message.trainingInfo[i], writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();\r\n            if (message.functions != null && message.functions.length)\r\n                for (var i = 0; i < message.functions.length; ++i)\r\n                    $root.onnx.FunctionProto.encode(message.functions[i], writer.uint32(/* id 25, wireType 2 =*/202).fork()).ldelim();\r\n            return writer;\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified ModelProto message, length delimited. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\r\n         * @function encodeDelimited\r\n         * @memberof onnx.ModelProto\r\n         * @static\r\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        ModelProto.encodeDelimited = function encodeDelimited(message, writer) {\r\n            return this.encode(message, writer).ldelim();\r\n        };\r\n\r\n        /**\r\n         * Decodes a ModelProto message from the specified reader or buffer.\r\n         * @function decode\r\n         * @memberof onnx.ModelProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @param {number} [length] Message length if known beforehand\r\n         * @returns {onnx.ModelProto} ModelProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        ModelProto.decode = function decode(reader, length) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = $Reader.create(reader);\r\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ModelProto();\r\n            while (reader.pos < end) {\r\n                var tag = reader.uint32();\r\n                switch (tag >>> 3) {\r\n                case 1: {\r\n                        message.irVersion = reader.int64();\r\n                        break;\r\n                    }\r\n                case 8: {\r\n                        if (!(message.opsetImport && message.opsetImport.length))\r\n                            message.opsetImport = [];\r\n                        message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                case 2: {\r\n                        message.producerName = reader.string();\r\n                        break;\r\n                    }\r\n                case 3: {\r\n                        message.producerVersion = reader.string();\r\n                        break;\r\n                    }\r\n                case 4: {\r\n                        message.domain = reader.string();\r\n                        break;\r\n                    }\r\n                case 5: {\r\n                        message.modelVersion = reader.int64();\r\n                        break;\r\n                    }\r\n                case 6: {\r\n                        message.docString = reader.string();\r\n                        break;\r\n                    }\r\n                case 7: {\r\n                        message.graph = $root.onnx.GraphProto.decode(reader, reader.uint32());\r\n                        break;\r\n                    }\r\n                case 14: {\r\n                        if (!(message.metadataProps && message.metadataProps.length))\r\n                            message.metadataProps = [];\r\n                        message.metadataProps.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                case 20: {\r\n                        if (!(message.trainingInfo && message.trainingInfo.length))\r\n                            message.trainingInfo = [];\r\n                        message.trainingInfo.push($root.onnx.TrainingInfoProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                case 25: {\r\n                        if (!(message.functions && message.functions.length))\r\n                            message.functions = [];\r\n                        message.functions.push($root.onnx.FunctionProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                default:\r\n                    reader.skipType(tag & 7);\r\n                    break;\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Decodes a ModelProto message from the specified reader or buffer, length delimited.\r\n         * @function decodeDelimited\r\n         * @memberof onnx.ModelProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @returns {onnx.ModelProto} ModelProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        ModelProto.decodeDelimited = function decodeDelimited(reader) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = new $Reader(reader);\r\n            return this.decode(reader, reader.uint32());\r\n        };\r\n\r\n        /**\r\n         * Verifies a ModelProto message.\r\n         * @function verify\r\n         * @memberof onnx.ModelProto\r\n         * @static\r\n         * @param {Object.<string,*>} message Plain object to verify\r\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n         */\r\n        ModelProto.verify = function verify(message) {\r\n            if (typeof message !== \"object\" || message === null)\r\n                return \"object expected\";\r\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\r\n                if (!$util.isInteger(message.irVersion) && !(message.irVersion && $util.isInteger(message.irVersion.low) && $util.isInteger(message.irVersion.high)))\r\n                    return \"irVersion: integer|Long expected\";\r\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\r\n                if (!Array.isArray(message.opsetImport))\r\n                    return \"opsetImport: array expected\";\r\n                for (var i = 0; i < message.opsetImport.length; ++i) {\r\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\r\n                    if (error)\r\n                        return \"opsetImport.\" + error;\r\n                }\r\n            }\r\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\r\n                if (!$util.isString(message.producerName))\r\n                    return \"producerName: string expected\";\r\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\r\n                if (!$util.isString(message.producerVersion))\r\n                    return \"producerVersion: string expected\";\r\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\r\n                if (!$util.isString(message.domain))\r\n                    return \"domain: string expected\";\r\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\r\n                if (!$util.isInteger(message.modelVersion) && !(message.modelVersion && $util.isInteger(message.modelVersion.low) && $util.isInteger(message.modelVersion.high)))\r\n                    return \"modelVersion: integer|Long expected\";\r\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\r\n                if (!$util.isString(message.docString))\r\n                    return \"docString: string expected\";\r\n            if (message.graph != null && message.hasOwnProperty(\"graph\")) {\r\n                var error = $root.onnx.GraphProto.verify(message.graph);\r\n                if (error)\r\n                    return \"graph.\" + error;\r\n            }\r\n            if (message.metadataProps != null && message.hasOwnProperty(\"metadataProps\")) {\r\n                if (!Array.isArray(message.metadataProps))\r\n                    return \"metadataProps: array expected\";\r\n                for (var i = 0; i < message.metadataProps.length; ++i) {\r\n                    var error = $root.onnx.StringStringEntryProto.verify(message.metadataProps[i]);\r\n                    if (error)\r\n                        return \"metadataProps.\" + error;\r\n                }\r\n            }\r\n            if (message.trainingInfo != null && message.hasOwnProperty(\"trainingInfo\")) {\r\n                if (!Array.isArray(message.trainingInfo))\r\n                    return \"trainingInfo: array expected\";\r\n                for (var i = 0; i < message.trainingInfo.length; ++i) {\r\n                    var error = $root.onnx.TrainingInfoProto.verify(message.trainingInfo[i]);\r\n                    if (error)\r\n                        return \"trainingInfo.\" + error;\r\n                }\r\n            }\r\n            if (message.functions != null && message.hasOwnProperty(\"functions\")) {\r\n                if (!Array.isArray(message.functions))\r\n                    return \"functions: array expected\";\r\n                for (var i = 0; i < message.functions.length; ++i) {\r\n                    var error = $root.onnx.FunctionProto.verify(message.functions[i]);\r\n                    if (error)\r\n                        return \"functions.\" + error;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Creates a ModelProto message from a plain object. Also converts values to their respective internal types.\r\n         * @function fromObject\r\n         * @memberof onnx.ModelProto\r\n         * @static\r\n         * @param {Object.<string,*>} object Plain object\r\n         * @returns {onnx.ModelProto} ModelProto\r\n         */\r\n        ModelProto.fromObject = function fromObject(object) {\r\n            if (object instanceof $root.onnx.ModelProto)\r\n                return object;\r\n            var message = new $root.onnx.ModelProto();\r\n            if (object.irVersion != null)\r\n                if ($util.Long)\r\n                    (message.irVersion = $util.Long.fromValue(object.irVersion)).unsigned = false;\r\n                else if (typeof object.irVersion === \"string\")\r\n                    message.irVersion = parseInt(object.irVersion, 10);\r\n                else if (typeof object.irVersion === \"number\")\r\n                    message.irVersion = object.irVersion;\r\n                else if (typeof object.irVersion === \"object\")\r\n                    message.irVersion = new $util.LongBits(object.irVersion.low >>> 0, object.irVersion.high >>> 0).toNumber();\r\n            if (object.opsetImport) {\r\n                if (!Array.isArray(object.opsetImport))\r\n                    throw TypeError(\".onnx.ModelProto.opsetImport: array expected\");\r\n                message.opsetImport = [];\r\n                for (var i = 0; i < object.opsetImport.length; ++i) {\r\n                    if (typeof object.opsetImport[i] !== \"object\")\r\n                        throw TypeError(\".onnx.ModelProto.opsetImport: object expected\");\r\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\r\n                }\r\n            }\r\n            if (object.producerName != null)\r\n                message.producerName = String(object.producerName);\r\n            if (object.producerVersion != null)\r\n                message.producerVersion = String(object.producerVersion);\r\n            if (object.domain != null)\r\n                message.domain = String(object.domain);\r\n            if (object.modelVersion != null)\r\n                if ($util.Long)\r\n                    (message.modelVersion = $util.Long.fromValue(object.modelVersion)).unsigned = false;\r\n                else if (typeof object.modelVersion === \"string\")\r\n                    message.modelVersion = parseInt(object.modelVersion, 10);\r\n                else if (typeof object.modelVersion === \"number\")\r\n                    message.modelVersion = object.modelVersion;\r\n                else if (typeof object.modelVersion === \"object\")\r\n                    message.modelVersion = new $util.LongBits(object.modelVersion.low >>> 0, object.modelVersion.high >>> 0).toNumber();\r\n            if (object.docString != null)\r\n                message.docString = String(object.docString);\r\n            if (object.graph != null) {\r\n                if (typeof object.graph !== \"object\")\r\n                    throw TypeError(\".onnx.ModelProto.graph: object expected\");\r\n                message.graph = $root.onnx.GraphProto.fromObject(object.graph);\r\n            }\r\n            if (object.metadataProps) {\r\n                if (!Array.isArray(object.metadataProps))\r\n                    throw TypeError(\".onnx.ModelProto.metadataProps: array expected\");\r\n                message.metadataProps = [];\r\n                for (var i = 0; i < object.metadataProps.length; ++i) {\r\n                    if (typeof object.metadataProps[i] !== \"object\")\r\n                        throw TypeError(\".onnx.ModelProto.metadataProps: object expected\");\r\n                    message.metadataProps[i] = $root.onnx.StringStringEntryProto.fromObject(object.metadataProps[i]);\r\n                }\r\n            }\r\n            if (object.trainingInfo) {\r\n                if (!Array.isArray(object.trainingInfo))\r\n                    throw TypeError(\".onnx.ModelProto.trainingInfo: array expected\");\r\n                message.trainingInfo = [];\r\n                for (var i = 0; i < object.trainingInfo.length; ++i) {\r\n                    if (typeof object.trainingInfo[i] !== \"object\")\r\n                        throw TypeError(\".onnx.ModelProto.trainingInfo: object expected\");\r\n                    message.trainingInfo[i] = $root.onnx.TrainingInfoProto.fromObject(object.trainingInfo[i]);\r\n                }\r\n            }\r\n            if (object.functions) {\r\n                if (!Array.isArray(object.functions))\r\n                    throw TypeError(\".onnx.ModelProto.functions: array expected\");\r\n                message.functions = [];\r\n                for (var i = 0; i < object.functions.length; ++i) {\r\n                    if (typeof object.functions[i] !== \"object\")\r\n                        throw TypeError(\".onnx.ModelProto.functions: object expected\");\r\n                    message.functions[i] = $root.onnx.FunctionProto.fromObject(object.functions[i]);\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Creates a plain object from a ModelProto message. Also converts values to other types if specified.\r\n         * @function toObject\r\n         * @memberof onnx.ModelProto\r\n         * @static\r\n         * @param {onnx.ModelProto} message ModelProto\r\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n         * @returns {Object.<string,*>} Plain object\r\n         */\r\n        ModelProto.toObject = function toObject(message, options) {\r\n            if (!options)\r\n                options = {};\r\n            var object = {};\r\n            if (options.arrays || options.defaults) {\r\n                object.opsetImport = [];\r\n                object.metadataProps = [];\r\n                object.trainingInfo = [];\r\n                object.functions = [];\r\n            }\r\n            if (options.defaults) {\r\n                if ($util.Long) {\r\n                    var long = new $util.Long(0, 0, false);\r\n                    object.irVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\r\n                } else\r\n                    object.irVersion = options.longs === String ? \"0\" : 0;\r\n                object.producerName = \"\";\r\n                object.producerVersion = \"\";\r\n                object.domain = \"\";\r\n                if ($util.Long) {\r\n                    var long = new $util.Long(0, 0, false);\r\n                    object.modelVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\r\n                } else\r\n                    object.modelVersion = options.longs === String ? \"0\" : 0;\r\n                object.docString = \"\";\r\n                object.graph = null;\r\n            }\r\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\r\n                if (typeof message.irVersion === \"number\")\r\n                    object.irVersion = options.longs === String ? String(message.irVersion) : message.irVersion;\r\n                else\r\n                    object.irVersion = options.longs === String ? $util.Long.prototype.toString.call(message.irVersion) : options.longs === Number ? new $util.LongBits(message.irVersion.low >>> 0, message.irVersion.high >>> 0).toNumber() : message.irVersion;\r\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\r\n                object.producerName = message.producerName;\r\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\r\n                object.producerVersion = message.producerVersion;\r\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\r\n                object.domain = message.domain;\r\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\r\n                if (typeof message.modelVersion === \"number\")\r\n                    object.modelVersion = options.longs === String ? String(message.modelVersion) : message.modelVersion;\r\n                else\r\n                    object.modelVersion = options.longs === String ? $util.Long.prototype.toString.call(message.modelVersion) : options.longs === Number ? new $util.LongBits(message.modelVersion.low >>> 0, message.modelVersion.high >>> 0).toNumber() : message.modelVersion;\r\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\r\n                object.docString = message.docString;\r\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\r\n                object.graph = $root.onnx.GraphProto.toObject(message.graph, options);\r\n            if (message.opsetImport && message.opsetImport.length) {\r\n                object.opsetImport = [];\r\n                for (var j = 0; j < message.opsetImport.length; ++j)\r\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\r\n            }\r\n            if (message.metadataProps && message.metadataProps.length) {\r\n                object.metadataProps = [];\r\n                for (var j = 0; j < message.metadataProps.length; ++j)\r\n                    object.metadataProps[j] = $root.onnx.StringStringEntryProto.toObject(message.metadataProps[j], options);\r\n            }\r\n            if (message.trainingInfo && message.trainingInfo.length) {\r\n                object.trainingInfo = [];\r\n                for (var j = 0; j < message.trainingInfo.length; ++j)\r\n                    object.trainingInfo[j] = $root.onnx.TrainingInfoProto.toObject(message.trainingInfo[j], options);\r\n            }\r\n            if (message.functions && message.functions.length) {\r\n                object.functions = [];\r\n                for (var j = 0; j < message.functions.length; ++j)\r\n                    object.functions[j] = $root.onnx.FunctionProto.toObject(message.functions[j], options);\r\n            }\r\n            return object;\r\n        };\r\n\r\n        /**\r\n         * Converts this ModelProto to JSON.\r\n         * @function toJSON\r\n         * @memberof onnx.ModelProto\r\n         * @instance\r\n         * @returns {Object.<string,*>} JSON object\r\n         */\r\n        ModelProto.prototype.toJSON = function toJSON() {\r\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n        };\r\n\r\n        /**\r\n         * Gets the default type url for ModelProto\r\n         * @function getTypeUrl\r\n         * @memberof onnx.ModelProto\r\n         * @static\r\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n         * @returns {string} The default type url\r\n         */\r\n        ModelProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n            if (typeUrlPrefix === undefined) {\r\n                typeUrlPrefix = \"type.googleapis.com\";\r\n            }\r\n            return typeUrlPrefix + \"/onnx.ModelProto\";\r\n        };\r\n\r\n        return ModelProto;\r\n    })();\r\n\r\n    onnx.StringStringEntryProto = (function() {\r\n\r\n        /**\r\n         * Properties of a StringStringEntryProto.\r\n         * @memberof onnx\r\n         * @interface IStringStringEntryProto\r\n         * @property {string|null} [key] StringStringEntryProto key\r\n         * @property {string|null} [value] StringStringEntryProto value\r\n         */\r\n\r\n        /**\r\n         * Constructs a new StringStringEntryProto.\r\n         * @memberof onnx\r\n         * @classdesc Represents a StringStringEntryProto.\r\n         * @implements IStringStringEntryProto\r\n         * @constructor\r\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\r\n         */\r\n        function StringStringEntryProto(properties) {\r\n            if (properties)\r\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                    if (properties[keys[i]] != null)\r\n                        this[keys[i]] = properties[keys[i]];\r\n        }\r\n\r\n        /**\r\n         * StringStringEntryProto key.\r\n         * @member {string} key\r\n         * @memberof onnx.StringStringEntryProto\r\n         * @instance\r\n         */\r\n        StringStringEntryProto.prototype.key = \"\";\r\n\r\n        /**\r\n         * StringStringEntryProto value.\r\n         * @member {string} value\r\n         * @memberof onnx.StringStringEntryProto\r\n         * @instance\r\n         */\r\n        StringStringEntryProto.prototype.value = \"\";\r\n\r\n        /**\r\n         * Creates a new StringStringEntryProto instance using the specified properties.\r\n         * @function create\r\n         * @memberof onnx.StringStringEntryProto\r\n         * @static\r\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\r\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto instance\r\n         */\r\n        StringStringEntryProto.create = function create(properties) {\r\n            return new StringStringEntryProto(properties);\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified StringStringEntryProto message. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\r\n         * @function encode\r\n         * @memberof onnx.StringStringEntryProto\r\n         * @static\r\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        StringStringEntryProto.encode = function encode(message, writer) {\r\n            if (!writer)\r\n                writer = $Writer.create();\r\n            if (message.key != null && Object.hasOwnProperty.call(message, \"key\"))\r\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);\r\n            if (message.value != null && Object.hasOwnProperty.call(message, \"value\"))\r\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);\r\n            return writer;\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified StringStringEntryProto message, length delimited. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\r\n         * @function encodeDelimited\r\n         * @memberof onnx.StringStringEntryProto\r\n         * @static\r\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        StringStringEntryProto.encodeDelimited = function encodeDelimited(message, writer) {\r\n            return this.encode(message, writer).ldelim();\r\n        };\r\n\r\n        /**\r\n         * Decodes a StringStringEntryProto message from the specified reader or buffer.\r\n         * @function decode\r\n         * @memberof onnx.StringStringEntryProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @param {number} [length] Message length if known beforehand\r\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        StringStringEntryProto.decode = function decode(reader, length) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = $Reader.create(reader);\r\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.StringStringEntryProto();\r\n            while (reader.pos < end) {\r\n                var tag = reader.uint32();\r\n                switch (tag >>> 3) {\r\n                case 1: {\r\n                        message.key = reader.string();\r\n                        break;\r\n                    }\r\n                case 2: {\r\n                        message.value = reader.string();\r\n                        break;\r\n                    }\r\n                default:\r\n                    reader.skipType(tag & 7);\r\n                    break;\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Decodes a StringStringEntryProto message from the specified reader or buffer, length delimited.\r\n         * @function decodeDelimited\r\n         * @memberof onnx.StringStringEntryProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        StringStringEntryProto.decodeDelimited = function decodeDelimited(reader) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = new $Reader(reader);\r\n            return this.decode(reader, reader.uint32());\r\n        };\r\n\r\n        /**\r\n         * Verifies a StringStringEntryProto message.\r\n         * @function verify\r\n         * @memberof onnx.StringStringEntryProto\r\n         * @static\r\n         * @param {Object.<string,*>} message Plain object to verify\r\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n         */\r\n        StringStringEntryProto.verify = function verify(message) {\r\n            if (typeof message !== \"object\" || message === null)\r\n                return \"object expected\";\r\n            if (message.key != null && message.hasOwnProperty(\"key\"))\r\n                if (!$util.isString(message.key))\r\n                    return \"key: string expected\";\r\n            if (message.value != null && message.hasOwnProperty(\"value\"))\r\n                if (!$util.isString(message.value))\r\n                    return \"value: string expected\";\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Creates a StringStringEntryProto message from a plain object. Also converts values to their respective internal types.\r\n         * @function fromObject\r\n         * @memberof onnx.StringStringEntryProto\r\n         * @static\r\n         * @param {Object.<string,*>} object Plain object\r\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\r\n         */\r\n        StringStringEntryProto.fromObject = function fromObject(object) {\r\n            if (object instanceof $root.onnx.StringStringEntryProto)\r\n                return object;\r\n            var message = new $root.onnx.StringStringEntryProto();\r\n            if (object.key != null)\r\n                message.key = String(object.key);\r\n            if (object.value != null)\r\n                message.value = String(object.value);\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Creates a plain object from a StringStringEntryProto message. Also converts values to other types if specified.\r\n         * @function toObject\r\n         * @memberof onnx.StringStringEntryProto\r\n         * @static\r\n         * @param {onnx.StringStringEntryProto} message StringStringEntryProto\r\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n         * @returns {Object.<string,*>} Plain object\r\n         */\r\n        StringStringEntryProto.toObject = function toObject(message, options) {\r\n            if (!options)\r\n                options = {};\r\n            var object = {};\r\n            if (options.defaults) {\r\n                object.key = \"\";\r\n                object.value = \"\";\r\n            }\r\n            if (message.key != null && message.hasOwnProperty(\"key\"))\r\n                object.key = message.key;\r\n            if (message.value != null && message.hasOwnProperty(\"value\"))\r\n                object.value = message.value;\r\n            return object;\r\n        };\r\n\r\n        /**\r\n         * Converts this StringStringEntryProto to JSON.\r\n         * @function toJSON\r\n         * @memberof onnx.StringStringEntryProto\r\n         * @instance\r\n         * @returns {Object.<string,*>} JSON object\r\n         */\r\n        StringStringEntryProto.prototype.toJSON = function toJSON() {\r\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n        };\r\n\r\n        /**\r\n         * Gets the default type url for StringStringEntryProto\r\n         * @function getTypeUrl\r\n         * @memberof onnx.StringStringEntryProto\r\n         * @static\r\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n         * @returns {string} The default type url\r\n         */\r\n        StringStringEntryProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n            if (typeUrlPrefix === undefined) {\r\n                typeUrlPrefix = \"type.googleapis.com\";\r\n            }\r\n            return typeUrlPrefix + \"/onnx.StringStringEntryProto\";\r\n        };\r\n\r\n        return StringStringEntryProto;\r\n    })();\r\n\r\n    onnx.TensorAnnotation = (function() {\r\n\r\n        /**\r\n         * Properties of a TensorAnnotation.\r\n         * @memberof onnx\r\n         * @interface ITensorAnnotation\r\n         * @property {string|null} [tensorName] TensorAnnotation tensorName\r\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [quantParameterTensorNames] TensorAnnotation quantParameterTensorNames\r\n         */\r\n\r\n        /**\r\n         * Constructs a new TensorAnnotation.\r\n         * @memberof onnx\r\n         * @classdesc Represents a TensorAnnotation.\r\n         * @implements ITensorAnnotation\r\n         * @constructor\r\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\r\n         */\r\n        function TensorAnnotation(properties) {\r\n            this.quantParameterTensorNames = [];\r\n            if (properties)\r\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                    if (properties[keys[i]] != null)\r\n                        this[keys[i]] = properties[keys[i]];\r\n        }\r\n\r\n        /**\r\n         * TensorAnnotation tensorName.\r\n         * @member {string} tensorName\r\n         * @memberof onnx.TensorAnnotation\r\n         * @instance\r\n         */\r\n        TensorAnnotation.prototype.tensorName = \"\";\r\n\r\n        /**\r\n         * TensorAnnotation quantParameterTensorNames.\r\n         * @member {Array.<onnx.IStringStringEntryProto>} quantParameterTensorNames\r\n         * @memberof onnx.TensorAnnotation\r\n         * @instance\r\n         */\r\n        TensorAnnotation.prototype.quantParameterTensorNames = $util.emptyArray;\r\n\r\n        /**\r\n         * Creates a new TensorAnnotation instance using the specified properties.\r\n         * @function create\r\n         * @memberof onnx.TensorAnnotation\r\n         * @static\r\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\r\n         * @returns {onnx.TensorAnnotation} TensorAnnotation instance\r\n         */\r\n        TensorAnnotation.create = function create(properties) {\r\n            return new TensorAnnotation(properties);\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified TensorAnnotation message. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\r\n         * @function encode\r\n         * @memberof onnx.TensorAnnotation\r\n         * @static\r\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        TensorAnnotation.encode = function encode(message, writer) {\r\n            if (!writer)\r\n                writer = $Writer.create();\r\n            if (message.tensorName != null && Object.hasOwnProperty.call(message, \"tensorName\"))\r\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.tensorName);\r\n            if (message.quantParameterTensorNames != null && message.quantParameterTensorNames.length)\r\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i)\r\n                    $root.onnx.StringStringEntryProto.encode(message.quantParameterTensorNames[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\r\n            return writer;\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified TensorAnnotation message, length delimited. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\r\n         * @function encodeDelimited\r\n         * @memberof onnx.TensorAnnotation\r\n         * @static\r\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        TensorAnnotation.encodeDelimited = function encodeDelimited(message, writer) {\r\n            return this.encode(message, writer).ldelim();\r\n        };\r\n\r\n        /**\r\n         * Decodes a TensorAnnotation message from the specified reader or buffer.\r\n         * @function decode\r\n         * @memberof onnx.TensorAnnotation\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @param {number} [length] Message length if known beforehand\r\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        TensorAnnotation.decode = function decode(reader, length) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = $Reader.create(reader);\r\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorAnnotation();\r\n            while (reader.pos < end) {\r\n                var tag = reader.uint32();\r\n                switch (tag >>> 3) {\r\n                case 1: {\r\n                        message.tensorName = reader.string();\r\n                        break;\r\n                    }\r\n                case 2: {\r\n                        if (!(message.quantParameterTensorNames && message.quantParameterTensorNames.length))\r\n                            message.quantParameterTensorNames = [];\r\n                        message.quantParameterTensorNames.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                default:\r\n                    reader.skipType(tag & 7);\r\n                    break;\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Decodes a TensorAnnotation message from the specified reader or buffer, length delimited.\r\n         * @function decodeDelimited\r\n         * @memberof onnx.TensorAnnotation\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        TensorAnnotation.decodeDelimited = function decodeDelimited(reader) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = new $Reader(reader);\r\n            return this.decode(reader, reader.uint32());\r\n        };\r\n\r\n        /**\r\n         * Verifies a TensorAnnotation message.\r\n         * @function verify\r\n         * @memberof onnx.TensorAnnotation\r\n         * @static\r\n         * @param {Object.<string,*>} message Plain object to verify\r\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n         */\r\n        TensorAnnotation.verify = function verify(message) {\r\n            if (typeof message !== \"object\" || message === null)\r\n                return \"object expected\";\r\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\r\n                if (!$util.isString(message.tensorName))\r\n                    return \"tensorName: string expected\";\r\n            if (message.quantParameterTensorNames != null && message.hasOwnProperty(\"quantParameterTensorNames\")) {\r\n                if (!Array.isArray(message.quantParameterTensorNames))\r\n                    return \"quantParameterTensorNames: array expected\";\r\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i) {\r\n                    var error = $root.onnx.StringStringEntryProto.verify(message.quantParameterTensorNames[i]);\r\n                    if (error)\r\n                        return \"quantParameterTensorNames.\" + error;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Creates a TensorAnnotation message from a plain object. Also converts values to their respective internal types.\r\n         * @function fromObject\r\n         * @memberof onnx.TensorAnnotation\r\n         * @static\r\n         * @param {Object.<string,*>} object Plain object\r\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\r\n         */\r\n        TensorAnnotation.fromObject = function fromObject(object) {\r\n            if (object instanceof $root.onnx.TensorAnnotation)\r\n                return object;\r\n            var message = new $root.onnx.TensorAnnotation();\r\n            if (object.tensorName != null)\r\n                message.tensorName = String(object.tensorName);\r\n            if (object.quantParameterTensorNames) {\r\n                if (!Array.isArray(object.quantParameterTensorNames))\r\n                    throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: array expected\");\r\n                message.quantParameterTensorNames = [];\r\n                for (var i = 0; i < object.quantParameterTensorNames.length; ++i) {\r\n                    if (typeof object.quantParameterTensorNames[i] !== \"object\")\r\n                        throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: object expected\");\r\n                    message.quantParameterTensorNames[i] = $root.onnx.StringStringEntryProto.fromObject(object.quantParameterTensorNames[i]);\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Creates a plain object from a TensorAnnotation message. Also converts values to other types if specified.\r\n         * @function toObject\r\n         * @memberof onnx.TensorAnnotation\r\n         * @static\r\n         * @param {onnx.TensorAnnotation} message TensorAnnotation\r\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n         * @returns {Object.<string,*>} Plain object\r\n         */\r\n        TensorAnnotation.toObject = function toObject(message, options) {\r\n            if (!options)\r\n                options = {};\r\n            var object = {};\r\n            if (options.arrays || options.defaults)\r\n                object.quantParameterTensorNames = [];\r\n            if (options.defaults)\r\n                object.tensorName = \"\";\r\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\r\n                object.tensorName = message.tensorName;\r\n            if (message.quantParameterTensorNames && message.quantParameterTensorNames.length) {\r\n                object.quantParameterTensorNames = [];\r\n                for (var j = 0; j < message.quantParameterTensorNames.length; ++j)\r\n                    object.quantParameterTensorNames[j] = $root.onnx.StringStringEntryProto.toObject(message.quantParameterTensorNames[j], options);\r\n            }\r\n            return object;\r\n        };\r\n\r\n        /**\r\n         * Converts this TensorAnnotation to JSON.\r\n         * @function toJSON\r\n         * @memberof onnx.TensorAnnotation\r\n         * @instance\r\n         * @returns {Object.<string,*>} JSON object\r\n         */\r\n        TensorAnnotation.prototype.toJSON = function toJSON() {\r\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n        };\r\n\r\n        /**\r\n         * Gets the default type url for TensorAnnotation\r\n         * @function getTypeUrl\r\n         * @memberof onnx.TensorAnnotation\r\n         * @static\r\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n         * @returns {string} The default type url\r\n         */\r\n        TensorAnnotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n            if (typeUrlPrefix === undefined) {\r\n                typeUrlPrefix = \"type.googleapis.com\";\r\n            }\r\n            return typeUrlPrefix + \"/onnx.TensorAnnotation\";\r\n        };\r\n\r\n        return TensorAnnotation;\r\n    })();\r\n\r\n    onnx.GraphProto = (function() {\r\n\r\n        /**\r\n         * Properties of a GraphProto.\r\n         * @memberof onnx\r\n         * @interface IGraphProto\r\n         * @property {Array.<onnx.INodeProto>|null} [node] GraphProto node\r\n         * @property {string|null} [name] GraphProto name\r\n         * @property {Array.<onnx.ITensorProto>|null} [initializer] GraphProto initializer\r\n         * @property {Array.<onnx.ISparseTensorProto>|null} [sparseInitializer] GraphProto sparseInitializer\r\n         * @property {string|null} [docString] GraphProto docString\r\n         * @property {Array.<onnx.IValueInfoProto>|null} [input] GraphProto input\r\n         * @property {Array.<onnx.IValueInfoProto>|null} [output] GraphProto output\r\n         * @property {Array.<onnx.IValueInfoProto>|null} [valueInfo] GraphProto valueInfo\r\n         * @property {Array.<onnx.ITensorAnnotation>|null} [quantizationAnnotation] GraphProto quantizationAnnotation\r\n         */\r\n\r\n        /**\r\n         * Constructs a new GraphProto.\r\n         * @memberof onnx\r\n         * @classdesc Represents a GraphProto.\r\n         * @implements IGraphProto\r\n         * @constructor\r\n         * @param {onnx.IGraphProto=} [properties] Properties to set\r\n         */\r\n        function GraphProto(properties) {\r\n            this.node = [];\r\n            this.initializer = [];\r\n            this.sparseInitializer = [];\r\n            this.input = [];\r\n            this.output = [];\r\n            this.valueInfo = [];\r\n            this.quantizationAnnotation = [];\r\n            if (properties)\r\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                    if (properties[keys[i]] != null)\r\n                        this[keys[i]] = properties[keys[i]];\r\n        }\r\n\r\n        /**\r\n         * GraphProto node.\r\n         * @member {Array.<onnx.INodeProto>} node\r\n         * @memberof onnx.GraphProto\r\n         * @instance\r\n         */\r\n        GraphProto.prototype.node = $util.emptyArray;\r\n\r\n        /**\r\n         * GraphProto name.\r\n         * @member {string} name\r\n         * @memberof onnx.GraphProto\r\n         * @instance\r\n         */\r\n        GraphProto.prototype.name = \"\";\r\n\r\n        /**\r\n         * GraphProto initializer.\r\n         * @member {Array.<onnx.ITensorProto>} initializer\r\n         * @memberof onnx.GraphProto\r\n         * @instance\r\n         */\r\n        GraphProto.prototype.initializer = $util.emptyArray;\r\n\r\n        /**\r\n         * GraphProto sparseInitializer.\r\n         * @member {Array.<onnx.ISparseTensorProto>} sparseInitializer\r\n         * @memberof onnx.GraphProto\r\n         * @instance\r\n         */\r\n        GraphProto.prototype.sparseInitializer = $util.emptyArray;\r\n\r\n        /**\r\n         * GraphProto docString.\r\n         * @member {string} docString\r\n         * @memberof onnx.GraphProto\r\n         * @instance\r\n         */\r\n        GraphProto.prototype.docString = \"\";\r\n\r\n        /**\r\n         * GraphProto input.\r\n         * @member {Array.<onnx.IValueInfoProto>} input\r\n         * @memberof onnx.GraphProto\r\n         * @instance\r\n         */\r\n        GraphProto.prototype.input = $util.emptyArray;\r\n\r\n        /**\r\n         * GraphProto output.\r\n         * @member {Array.<onnx.IValueInfoProto>} output\r\n         * @memberof onnx.GraphProto\r\n         * @instance\r\n         */\r\n        GraphProto.prototype.output = $util.emptyArray;\r\n\r\n        /**\r\n         * GraphProto valueInfo.\r\n         * @member {Array.<onnx.IValueInfoProto>} valueInfo\r\n         * @memberof onnx.GraphProto\r\n         * @instance\r\n         */\r\n        GraphProto.prototype.valueInfo = $util.emptyArray;\r\n\r\n        /**\r\n         * GraphProto quantizationAnnotation.\r\n         * @member {Array.<onnx.ITensorAnnotation>} quantizationAnnotation\r\n         * @memberof onnx.GraphProto\r\n         * @instance\r\n         */\r\n        GraphProto.prototype.quantizationAnnotation = $util.emptyArray;\r\n\r\n        /**\r\n         * Creates a new GraphProto instance using the specified properties.\r\n         * @function create\r\n         * @memberof onnx.GraphProto\r\n         * @static\r\n         * @param {onnx.IGraphProto=} [properties] Properties to set\r\n         * @returns {onnx.GraphProto} GraphProto instance\r\n         */\r\n        GraphProto.create = function create(properties) {\r\n            return new GraphProto(properties);\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified GraphProto message. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\r\n         * @function encode\r\n         * @memberof onnx.GraphProto\r\n         * @static\r\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        GraphProto.encode = function encode(message, writer) {\r\n            if (!writer)\r\n                writer = $Writer.create();\r\n            if (message.node != null && message.node.length)\r\n                for (var i = 0; i < message.node.length; ++i)\r\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\r\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\r\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\r\n            if (message.initializer != null && message.initializer.length)\r\n                for (var i = 0; i < message.initializer.length; ++i)\r\n                    $root.onnx.TensorProto.encode(message.initializer[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\r\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\r\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.docString);\r\n            if (message.input != null && message.input.length)\r\n                for (var i = 0; i < message.input.length; ++i)\r\n                    $root.onnx.ValueInfoProto.encode(message.input[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\r\n            if (message.output != null && message.output.length)\r\n                for (var i = 0; i < message.output.length; ++i)\r\n                    $root.onnx.ValueInfoProto.encode(message.output[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\r\n            if (message.valueInfo != null && message.valueInfo.length)\r\n                for (var i = 0; i < message.valueInfo.length; ++i)\r\n                    $root.onnx.ValueInfoProto.encode(message.valueInfo[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\r\n            if (message.quantizationAnnotation != null && message.quantizationAnnotation.length)\r\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i)\r\n                    $root.onnx.TensorAnnotation.encode(message.quantizationAnnotation[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\r\n            if (message.sparseInitializer != null && message.sparseInitializer.length)\r\n                for (var i = 0; i < message.sparseInitializer.length; ++i)\r\n                    $root.onnx.SparseTensorProto.encode(message.sparseInitializer[i], writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();\r\n            return writer;\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified GraphProto message, length delimited. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\r\n         * @function encodeDelimited\r\n         * @memberof onnx.GraphProto\r\n         * @static\r\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        GraphProto.encodeDelimited = function encodeDelimited(message, writer) {\r\n            return this.encode(message, writer).ldelim();\r\n        };\r\n\r\n        /**\r\n         * Decodes a GraphProto message from the specified reader or buffer.\r\n         * @function decode\r\n         * @memberof onnx.GraphProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @param {number} [length] Message length if known beforehand\r\n         * @returns {onnx.GraphProto} GraphProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        GraphProto.decode = function decode(reader, length) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = $Reader.create(reader);\r\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.GraphProto();\r\n            while (reader.pos < end) {\r\n                var tag = reader.uint32();\r\n                switch (tag >>> 3) {\r\n                case 1: {\r\n                        if (!(message.node && message.node.length))\r\n                            message.node = [];\r\n                        message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                case 2: {\r\n                        message.name = reader.string();\r\n                        break;\r\n                    }\r\n                case 5: {\r\n                        if (!(message.initializer && message.initializer.length))\r\n                            message.initializer = [];\r\n                        message.initializer.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                case 15: {\r\n                        if (!(message.sparseInitializer && message.sparseInitializer.length))\r\n                            message.sparseInitializer = [];\r\n                        message.sparseInitializer.push($root.onnx.SparseTensorProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                case 10: {\r\n                        message.docString = reader.string();\r\n                        break;\r\n                    }\r\n                case 11: {\r\n                        if (!(message.input && message.input.length))\r\n                            message.input = [];\r\n                        message.input.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                case 12: {\r\n                        if (!(message.output && message.output.length))\r\n                            message.output = [];\r\n                        message.output.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                case 13: {\r\n                        if (!(message.valueInfo && message.valueInfo.length))\r\n                            message.valueInfo = [];\r\n                        message.valueInfo.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                case 14: {\r\n                        if (!(message.quantizationAnnotation && message.quantizationAnnotation.length))\r\n                            message.quantizationAnnotation = [];\r\n                        message.quantizationAnnotation.push($root.onnx.TensorAnnotation.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                default:\r\n                    reader.skipType(tag & 7);\r\n                    break;\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Decodes a GraphProto message from the specified reader or buffer, length delimited.\r\n         * @function decodeDelimited\r\n         * @memberof onnx.GraphProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @returns {onnx.GraphProto} GraphProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        GraphProto.decodeDelimited = function decodeDelimited(reader) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = new $Reader(reader);\r\n            return this.decode(reader, reader.uint32());\r\n        };\r\n\r\n        /**\r\n         * Verifies a GraphProto message.\r\n         * @function verify\r\n         * @memberof onnx.GraphProto\r\n         * @static\r\n         * @param {Object.<string,*>} message Plain object to verify\r\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n         */\r\n        GraphProto.verify = function verify(message) {\r\n            if (typeof message !== \"object\" || message === null)\r\n                return \"object expected\";\r\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\r\n                if (!Array.isArray(message.node))\r\n                    return \"node: array expected\";\r\n                for (var i = 0; i < message.node.length; ++i) {\r\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\r\n                    if (error)\r\n                        return \"node.\" + error;\r\n                }\r\n            }\r\n            if (message.name != null && message.hasOwnProperty(\"name\"))\r\n                if (!$util.isString(message.name))\r\n                    return \"name: string expected\";\r\n            if (message.initializer != null && message.hasOwnProperty(\"initializer\")) {\r\n                if (!Array.isArray(message.initializer))\r\n                    return \"initializer: array expected\";\r\n                for (var i = 0; i < message.initializer.length; ++i) {\r\n                    var error = $root.onnx.TensorProto.verify(message.initializer[i]);\r\n                    if (error)\r\n                        return \"initializer.\" + error;\r\n                }\r\n            }\r\n            if (message.sparseInitializer != null && message.hasOwnProperty(\"sparseInitializer\")) {\r\n                if (!Array.isArray(message.sparseInitializer))\r\n                    return \"sparseInitializer: array expected\";\r\n                for (var i = 0; i < message.sparseInitializer.length; ++i) {\r\n                    var error = $root.onnx.SparseTensorProto.verify(message.sparseInitializer[i]);\r\n                    if (error)\r\n                        return \"sparseInitializer.\" + error;\r\n                }\r\n            }\r\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\r\n                if (!$util.isString(message.docString))\r\n                    return \"docString: string expected\";\r\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\r\n                if (!Array.isArray(message.input))\r\n                    return \"input: array expected\";\r\n                for (var i = 0; i < message.input.length; ++i) {\r\n                    var error = $root.onnx.ValueInfoProto.verify(message.input[i]);\r\n                    if (error)\r\n                        return \"input.\" + error;\r\n                }\r\n            }\r\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\r\n                if (!Array.isArray(message.output))\r\n                    return \"output: array expected\";\r\n                for (var i = 0; i < message.output.length; ++i) {\r\n                    var error = $root.onnx.ValueInfoProto.verify(message.output[i]);\r\n                    if (error)\r\n                        return \"output.\" + error;\r\n                }\r\n            }\r\n            if (message.valueInfo != null && message.hasOwnProperty(\"valueInfo\")) {\r\n                if (!Array.isArray(message.valueInfo))\r\n                    return \"valueInfo: array expected\";\r\n                for (var i = 0; i < message.valueInfo.length; ++i) {\r\n                    var error = $root.onnx.ValueInfoProto.verify(message.valueInfo[i]);\r\n                    if (error)\r\n                        return \"valueInfo.\" + error;\r\n                }\r\n            }\r\n            if (message.quantizationAnnotation != null && message.hasOwnProperty(\"quantizationAnnotation\")) {\r\n                if (!Array.isArray(message.quantizationAnnotation))\r\n                    return \"quantizationAnnotation: array expected\";\r\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i) {\r\n                    var error = $root.onnx.TensorAnnotation.verify(message.quantizationAnnotation[i]);\r\n                    if (error)\r\n                        return \"quantizationAnnotation.\" + error;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Creates a GraphProto message from a plain object. Also converts values to their respective internal types.\r\n         * @function fromObject\r\n         * @memberof onnx.GraphProto\r\n         * @static\r\n         * @param {Object.<string,*>} object Plain object\r\n         * @returns {onnx.GraphProto} GraphProto\r\n         */\r\n        GraphProto.fromObject = function fromObject(object) {\r\n            if (object instanceof $root.onnx.GraphProto)\r\n                return object;\r\n            var message = new $root.onnx.GraphProto();\r\n            if (object.node) {\r\n                if (!Array.isArray(object.node))\r\n                    throw TypeError(\".onnx.GraphProto.node: array expected\");\r\n                message.node = [];\r\n                for (var i = 0; i < object.node.length; ++i) {\r\n                    if (typeof object.node[i] !== \"object\")\r\n                        throw TypeError(\".onnx.GraphProto.node: object expected\");\r\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\r\n                }\r\n            }\r\n            if (object.name != null)\r\n                message.name = String(object.name);\r\n            if (object.initializer) {\r\n                if (!Array.isArray(object.initializer))\r\n                    throw TypeError(\".onnx.GraphProto.initializer: array expected\");\r\n                message.initializer = [];\r\n                for (var i = 0; i < object.initializer.length; ++i) {\r\n                    if (typeof object.initializer[i] !== \"object\")\r\n                        throw TypeError(\".onnx.GraphProto.initializer: object expected\");\r\n                    message.initializer[i] = $root.onnx.TensorProto.fromObject(object.initializer[i]);\r\n                }\r\n            }\r\n            if (object.sparseInitializer) {\r\n                if (!Array.isArray(object.sparseInitializer))\r\n                    throw TypeError(\".onnx.GraphProto.sparseInitializer: array expected\");\r\n                message.sparseInitializer = [];\r\n                for (var i = 0; i < object.sparseInitializer.length; ++i) {\r\n                    if (typeof object.sparseInitializer[i] !== \"object\")\r\n                        throw TypeError(\".onnx.GraphProto.sparseInitializer: object expected\");\r\n                    message.sparseInitializer[i] = $root.onnx.SparseTensorProto.fromObject(object.sparseInitializer[i]);\r\n                }\r\n            }\r\n            if (object.docString != null)\r\n                message.docString = String(object.docString);\r\n            if (object.input) {\r\n                if (!Array.isArray(object.input))\r\n                    throw TypeError(\".onnx.GraphProto.input: array expected\");\r\n                message.input = [];\r\n                for (var i = 0; i < object.input.length; ++i) {\r\n                    if (typeof object.input[i] !== \"object\")\r\n                        throw TypeError(\".onnx.GraphProto.input: object expected\");\r\n                    message.input[i] = $root.onnx.ValueInfoProto.fromObject(object.input[i]);\r\n                }\r\n            }\r\n            if (object.output) {\r\n                if (!Array.isArray(object.output))\r\n                    throw TypeError(\".onnx.GraphProto.output: array expected\");\r\n                message.output = [];\r\n                for (var i = 0; i < object.output.length; ++i) {\r\n                    if (typeof object.output[i] !== \"object\")\r\n                        throw TypeError(\".onnx.GraphProto.output: object expected\");\r\n                    message.output[i] = $root.onnx.ValueInfoProto.fromObject(object.output[i]);\r\n                }\r\n            }\r\n            if (object.valueInfo) {\r\n                if (!Array.isArray(object.valueInfo))\r\n                    throw TypeError(\".onnx.GraphProto.valueInfo: array expected\");\r\n                message.valueInfo = [];\r\n                for (var i = 0; i < object.valueInfo.length; ++i) {\r\n                    if (typeof object.valueInfo[i] !== \"object\")\r\n                        throw TypeError(\".onnx.GraphProto.valueInfo: object expected\");\r\n                    message.valueInfo[i] = $root.onnx.ValueInfoProto.fromObject(object.valueInfo[i]);\r\n                }\r\n            }\r\n            if (object.quantizationAnnotation) {\r\n                if (!Array.isArray(object.quantizationAnnotation))\r\n                    throw TypeError(\".onnx.GraphProto.quantizationAnnotation: array expected\");\r\n                message.quantizationAnnotation = [];\r\n                for (var i = 0; i < object.quantizationAnnotation.length; ++i) {\r\n                    if (typeof object.quantizationAnnotation[i] !== \"object\")\r\n                        throw TypeError(\".onnx.GraphProto.quantizationAnnotation: object expected\");\r\n                    message.quantizationAnnotation[i] = $root.onnx.TensorAnnotation.fromObject(object.quantizationAnnotation[i]);\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Creates a plain object from a GraphProto message. Also converts values to other types if specified.\r\n         * @function toObject\r\n         * @memberof onnx.GraphProto\r\n         * @static\r\n         * @param {onnx.GraphProto} message GraphProto\r\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n         * @returns {Object.<string,*>} Plain object\r\n         */\r\n        GraphProto.toObject = function toObject(message, options) {\r\n            if (!options)\r\n                options = {};\r\n            var object = {};\r\n            if (options.arrays || options.defaults) {\r\n                object.node = [];\r\n                object.initializer = [];\r\n                object.input = [];\r\n                object.output = [];\r\n                object.valueInfo = [];\r\n                object.quantizationAnnotation = [];\r\n                object.sparseInitializer = [];\r\n            }\r\n            if (options.defaults) {\r\n                object.name = \"\";\r\n                object.docString = \"\";\r\n            }\r\n            if (message.node && message.node.length) {\r\n                object.node = [];\r\n                for (var j = 0; j < message.node.length; ++j)\r\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\r\n            }\r\n            if (message.name != null && message.hasOwnProperty(\"name\"))\r\n                object.name = message.name;\r\n            if (message.initializer && message.initializer.length) {\r\n                object.initializer = [];\r\n                for (var j = 0; j < message.initializer.length; ++j)\r\n                    object.initializer[j] = $root.onnx.TensorProto.toObject(message.initializer[j], options);\r\n            }\r\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\r\n                object.docString = message.docString;\r\n            if (message.input && message.input.length) {\r\n                object.input = [];\r\n                for (var j = 0; j < message.input.length; ++j)\r\n                    object.input[j] = $root.onnx.ValueInfoProto.toObject(message.input[j], options);\r\n            }\r\n            if (message.output && message.output.length) {\r\n                object.output = [];\r\n                for (var j = 0; j < message.output.length; ++j)\r\n                    object.output[j] = $root.onnx.ValueInfoProto.toObject(message.output[j], options);\r\n            }\r\n            if (message.valueInfo && message.valueInfo.length) {\r\n                object.valueInfo = [];\r\n                for (var j = 0; j < message.valueInfo.length; ++j)\r\n                    object.valueInfo[j] = $root.onnx.ValueInfoProto.toObject(message.valueInfo[j], options);\r\n            }\r\n            if (message.quantizationAnnotation && message.quantizationAnnotation.length) {\r\n                object.quantizationAnnotation = [];\r\n                for (var j = 0; j < message.quantizationAnnotation.length; ++j)\r\n                    object.quantizationAnnotation[j] = $root.onnx.TensorAnnotation.toObject(message.quantizationAnnotation[j], options);\r\n            }\r\n            if (message.sparseInitializer && message.sparseInitializer.length) {\r\n                object.sparseInitializer = [];\r\n                for (var j = 0; j < message.sparseInitializer.length; ++j)\r\n                    object.sparseInitializer[j] = $root.onnx.SparseTensorProto.toObject(message.sparseInitializer[j], options);\r\n            }\r\n            return object;\r\n        };\r\n\r\n        /**\r\n         * Converts this GraphProto to JSON.\r\n         * @function toJSON\r\n         * @memberof onnx.GraphProto\r\n         * @instance\r\n         * @returns {Object.<string,*>} JSON object\r\n         */\r\n        GraphProto.prototype.toJSON = function toJSON() {\r\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n        };\r\n\r\n        /**\r\n         * Gets the default type url for GraphProto\r\n         * @function getTypeUrl\r\n         * @memberof onnx.GraphProto\r\n         * @static\r\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n         * @returns {string} The default type url\r\n         */\r\n        GraphProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n            if (typeUrlPrefix === undefined) {\r\n                typeUrlPrefix = \"type.googleapis.com\";\r\n            }\r\n            return typeUrlPrefix + \"/onnx.GraphProto\";\r\n        };\r\n\r\n        return GraphProto;\r\n    })();\r\n\r\n    onnx.TensorProto = (function() {\r\n\r\n        /**\r\n         * Properties of a TensorProto.\r\n         * @memberof onnx\r\n         * @interface ITensorProto\r\n         * @property {Array.<number|Long>|null} [dims] TensorProto dims\r\n         * @property {number|null} [dataType] TensorProto dataType\r\n         * @property {onnx.TensorProto.ISegment|null} [segment] TensorProto segment\r\n         * @property {Array.<number>|null} [floatData] TensorProto floatData\r\n         * @property {Array.<number>|null} [int32Data] TensorProto int32Data\r\n         * @property {Array.<Uint8Array>|null} [stringData] TensorProto stringData\r\n         * @property {Array.<number|Long>|null} [int64Data] TensorProto int64Data\r\n         * @property {string|null} [name] TensorProto name\r\n         * @property {string|null} [docString] TensorProto docString\r\n         * @property {Uint8Array|null} [rawData] TensorProto rawData\r\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [externalData] TensorProto externalData\r\n         * @property {onnx.TensorProto.DataLocation|null} [dataLocation] TensorProto dataLocation\r\n         * @property {Array.<number>|null} [doubleData] TensorProto doubleData\r\n         * @property {Array.<number|Long>|null} [uint64Data] TensorProto uint64Data\r\n         */\r\n\r\n        /**\r\n         * Constructs a new TensorProto.\r\n         * @memberof onnx\r\n         * @classdesc Represents a TensorProto.\r\n         * @implements ITensorProto\r\n         * @constructor\r\n         * @param {onnx.ITensorProto=} [properties] Properties to set\r\n         */\r\n        function TensorProto(properties) {\r\n            this.dims = [];\r\n            this.floatData = [];\r\n            this.int32Data = [];\r\n            this.stringData = [];\r\n            this.int64Data = [];\r\n            this.externalData = [];\r\n            this.doubleData = [];\r\n            this.uint64Data = [];\r\n            if (properties)\r\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                    if (properties[keys[i]] != null)\r\n                        this[keys[i]] = properties[keys[i]];\r\n        }\r\n\r\n        /**\r\n         * TensorProto dims.\r\n         * @member {Array.<number|Long>} dims\r\n         * @memberof onnx.TensorProto\r\n         * @instance\r\n         */\r\n        TensorProto.prototype.dims = $util.emptyArray;\r\n\r\n        /**\r\n         * TensorProto dataType.\r\n         * @member {number} dataType\r\n         * @memberof onnx.TensorProto\r\n         * @instance\r\n         */\r\n        TensorProto.prototype.dataType = 0;\r\n\r\n        /**\r\n         * TensorProto segment.\r\n         * @member {onnx.TensorProto.ISegment|null|undefined} segment\r\n         * @memberof onnx.TensorProto\r\n         * @instance\r\n         */\r\n        TensorProto.prototype.segment = null;\r\n\r\n        /**\r\n         * TensorProto floatData.\r\n         * @member {Array.<number>} floatData\r\n         * @memberof onnx.TensorProto\r\n         * @instance\r\n         */\r\n        TensorProto.prototype.floatData = $util.emptyArray;\r\n\r\n        /**\r\n         * TensorProto int32Data.\r\n         * @member {Array.<number>} int32Data\r\n         * @memberof onnx.TensorProto\r\n         * @instance\r\n         */\r\n        TensorProto.prototype.int32Data = $util.emptyArray;\r\n\r\n        /**\r\n         * TensorProto stringData.\r\n         * @member {Array.<Uint8Array>} stringData\r\n         * @memberof onnx.TensorProto\r\n         * @instance\r\n         */\r\n        TensorProto.prototype.stringData = $util.emptyArray;\r\n\r\n        /**\r\n         * TensorProto int64Data.\r\n         * @member {Array.<number|Long>} int64Data\r\n         * @memberof onnx.TensorProto\r\n         * @instance\r\n         */\r\n        TensorProto.prototype.int64Data = $util.emptyArray;\r\n\r\n        /**\r\n         * TensorProto name.\r\n         * @member {string} name\r\n         * @memberof onnx.TensorProto\r\n         * @instance\r\n         */\r\n        TensorProto.prototype.name = \"\";\r\n\r\n        /**\r\n         * TensorProto docString.\r\n         * @member {string} docString\r\n         * @memberof onnx.TensorProto\r\n         * @instance\r\n         */\r\n        TensorProto.prototype.docString = \"\";\r\n\r\n        /**\r\n         * TensorProto rawData.\r\n         * @member {Uint8Array} rawData\r\n         * @memberof onnx.TensorProto\r\n         * @instance\r\n         */\r\n        TensorProto.prototype.rawData = $util.newBuffer([]);\r\n\r\n        /**\r\n         * TensorProto externalData.\r\n         * @member {Array.<onnx.IStringStringEntryProto>} externalData\r\n         * @memberof onnx.TensorProto\r\n         * @instance\r\n         */\r\n        TensorProto.prototype.externalData = $util.emptyArray;\r\n\r\n        /**\r\n         * TensorProto dataLocation.\r\n         * @member {onnx.TensorProto.DataLocation} dataLocation\r\n         * @memberof onnx.TensorProto\r\n         * @instance\r\n         */\r\n        TensorProto.prototype.dataLocation = 0;\r\n\r\n        /**\r\n         * TensorProto doubleData.\r\n         * @member {Array.<number>} doubleData\r\n         * @memberof onnx.TensorProto\r\n         * @instance\r\n         */\r\n        TensorProto.prototype.doubleData = $util.emptyArray;\r\n\r\n        /**\r\n         * TensorProto uint64Data.\r\n         * @member {Array.<number|Long>} uint64Data\r\n         * @memberof onnx.TensorProto\r\n         * @instance\r\n         */\r\n        TensorProto.prototype.uint64Data = $util.emptyArray;\r\n\r\n        /**\r\n         * Creates a new TensorProto instance using the specified properties.\r\n         * @function create\r\n         * @memberof onnx.TensorProto\r\n         * @static\r\n         * @param {onnx.ITensorProto=} [properties] Properties to set\r\n         * @returns {onnx.TensorProto} TensorProto instance\r\n         */\r\n        TensorProto.create = function create(properties) {\r\n            return new TensorProto(properties);\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified TensorProto message. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\r\n         * @function encode\r\n         * @memberof onnx.TensorProto\r\n         * @static\r\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        TensorProto.encode = function encode(message, writer) {\r\n            if (!writer)\r\n                writer = $Writer.create();\r\n            if (message.dims != null && message.dims.length) {\r\n                writer.uint32(/* id 1, wireType 2 =*/10).fork();\r\n                for (var i = 0; i < message.dims.length; ++i)\r\n                    writer.int64(message.dims[i]);\r\n                writer.ldelim();\r\n            }\r\n            if (message.dataType != null && Object.hasOwnProperty.call(message, \"dataType\"))\r\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.dataType);\r\n            if (message.segment != null && Object.hasOwnProperty.call(message, \"segment\"))\r\n                $root.onnx.TensorProto.Segment.encode(message.segment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\r\n            if (message.floatData != null && message.floatData.length) {\r\n                writer.uint32(/* id 4, wireType 2 =*/34).fork();\r\n                for (var i = 0; i < message.floatData.length; ++i)\r\n                    writer.float(message.floatData[i]);\r\n                writer.ldelim();\r\n            }\r\n            if (message.int32Data != null && message.int32Data.length) {\r\n                writer.uint32(/* id 5, wireType 2 =*/42).fork();\r\n                for (var i = 0; i < message.int32Data.length; ++i)\r\n                    writer.int32(message.int32Data[i]);\r\n                writer.ldelim();\r\n            }\r\n            if (message.stringData != null && message.stringData.length)\r\n                for (var i = 0; i < message.stringData.length; ++i)\r\n                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.stringData[i]);\r\n            if (message.int64Data != null && message.int64Data.length) {\r\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\r\n                for (var i = 0; i < message.int64Data.length; ++i)\r\n                    writer.int64(message.int64Data[i]);\r\n                writer.ldelim();\r\n            }\r\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\r\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.name);\r\n            if (message.rawData != null && Object.hasOwnProperty.call(message, \"rawData\"))\r\n                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.rawData);\r\n            if (message.doubleData != null && message.doubleData.length) {\r\n                writer.uint32(/* id 10, wireType 2 =*/82).fork();\r\n                for (var i = 0; i < message.doubleData.length; ++i)\r\n                    writer.double(message.doubleData[i]);\r\n                writer.ldelim();\r\n            }\r\n            if (message.uint64Data != null && message.uint64Data.length) {\r\n                writer.uint32(/* id 11, wireType 2 =*/90).fork();\r\n                for (var i = 0; i < message.uint64Data.length; ++i)\r\n                    writer.uint64(message.uint64Data[i]);\r\n                writer.ldelim();\r\n            }\r\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\r\n                writer.uint32(/* id 12, wireType 2 =*/98).string(message.docString);\r\n            if (message.externalData != null && message.externalData.length)\r\n                for (var i = 0; i < message.externalData.length; ++i)\r\n                    $root.onnx.StringStringEntryProto.encode(message.externalData[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\r\n            if (message.dataLocation != null && Object.hasOwnProperty.call(message, \"dataLocation\"))\r\n                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.dataLocation);\r\n            return writer;\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified TensorProto message, length delimited. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\r\n         * @function encodeDelimited\r\n         * @memberof onnx.TensorProto\r\n         * @static\r\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        TensorProto.encodeDelimited = function encodeDelimited(message, writer) {\r\n            return this.encode(message, writer).ldelim();\r\n        };\r\n\r\n        /**\r\n         * Decodes a TensorProto message from the specified reader or buffer.\r\n         * @function decode\r\n         * @memberof onnx.TensorProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @param {number} [length] Message length if known beforehand\r\n         * @returns {onnx.TensorProto} TensorProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        TensorProto.decode = function decode(reader, length) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = $Reader.create(reader);\r\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto();\r\n            while (reader.pos < end) {\r\n                var tag = reader.uint32();\r\n                switch (tag >>> 3) {\r\n                case 1: {\r\n                        if (!(message.dims && message.dims.length))\r\n                            message.dims = [];\r\n                        if ((tag & 7) === 2) {\r\n                            var end2 = reader.uint32() + reader.pos;\r\n                            while (reader.pos < end2)\r\n                                message.dims.push(reader.int64());\r\n                        } else\r\n                            message.dims.push(reader.int64());\r\n                        break;\r\n                    }\r\n                case 2: {\r\n                        message.dataType = reader.int32();\r\n                        break;\r\n                    }\r\n                case 3: {\r\n                        message.segment = $root.onnx.TensorProto.Segment.decode(reader, reader.uint32());\r\n                        break;\r\n                    }\r\n                case 4: {\r\n                        if (!(message.floatData && message.floatData.length))\r\n                            message.floatData = [];\r\n                        if ((tag & 7) === 2) {\r\n                            var end2 = reader.uint32() + reader.pos;\r\n                            while (reader.pos < end2)\r\n                                message.floatData.push(reader.float());\r\n                        } else\r\n                            message.floatData.push(reader.float());\r\n                        break;\r\n                    }\r\n                case 5: {\r\n                        if (!(message.int32Data && message.int32Data.length))\r\n                            message.int32Data = [];\r\n                        if ((tag & 7) === 2) {\r\n                            var end2 = reader.uint32() + reader.pos;\r\n                            while (reader.pos < end2)\r\n                                message.int32Data.push(reader.int32());\r\n                        } else\r\n                            message.int32Data.push(reader.int32());\r\n                        break;\r\n                    }\r\n                case 6: {\r\n                        if (!(message.stringData && message.stringData.length))\r\n                            message.stringData = [];\r\n                        message.stringData.push(reader.bytes());\r\n                        break;\r\n                    }\r\n                case 7: {\r\n                        if (!(message.int64Data && message.int64Data.length))\r\n                            message.int64Data = [];\r\n                        if ((tag & 7) === 2) {\r\n                            var end2 = reader.uint32() + reader.pos;\r\n                            while (reader.pos < end2)\r\n                                message.int64Data.push(reader.int64());\r\n                        } else\r\n                            message.int64Data.push(reader.int64());\r\n                        break;\r\n                    }\r\n                case 8: {\r\n                        message.name = reader.string();\r\n                        break;\r\n                    }\r\n                case 12: {\r\n                        message.docString = reader.string();\r\n                        break;\r\n                    }\r\n                case 9: {\r\n                        message.rawData = reader.bytes();\r\n                        break;\r\n                    }\r\n                case 13: {\r\n                        if (!(message.externalData && message.externalData.length))\r\n                            message.externalData = [];\r\n                        message.externalData.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                case 14: {\r\n                        message.dataLocation = reader.int32();\r\n                        break;\r\n                    }\r\n                case 10: {\r\n                        if (!(message.doubleData && message.doubleData.length))\r\n                            message.doubleData = [];\r\n                        if ((tag & 7) === 2) {\r\n                            var end2 = reader.uint32() + reader.pos;\r\n                            while (reader.pos < end2)\r\n                                message.doubleData.push(reader.double());\r\n                        } else\r\n                            message.doubleData.push(reader.double());\r\n                        break;\r\n                    }\r\n                case 11: {\r\n                        if (!(message.uint64Data && message.uint64Data.length))\r\n                            message.uint64Data = [];\r\n                        if ((tag & 7) === 2) {\r\n                            var end2 = reader.uint32() + reader.pos;\r\n                            while (reader.pos < end2)\r\n                                message.uint64Data.push(reader.uint64());\r\n                        } else\r\n                            message.uint64Data.push(reader.uint64());\r\n                        break;\r\n                    }\r\n                default:\r\n                    reader.skipType(tag & 7);\r\n                    break;\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Decodes a TensorProto message from the specified reader or buffer, length delimited.\r\n         * @function decodeDelimited\r\n         * @memberof onnx.TensorProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @returns {onnx.TensorProto} TensorProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        TensorProto.decodeDelimited = function decodeDelimited(reader) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = new $Reader(reader);\r\n            return this.decode(reader, reader.uint32());\r\n        };\r\n\r\n        /**\r\n         * Verifies a TensorProto message.\r\n         * @function verify\r\n         * @memberof onnx.TensorProto\r\n         * @static\r\n         * @param {Object.<string,*>} message Plain object to verify\r\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n         */\r\n        TensorProto.verify = function verify(message) {\r\n            if (typeof message !== \"object\" || message === null)\r\n                return \"object expected\";\r\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\r\n                if (!Array.isArray(message.dims))\r\n                    return \"dims: array expected\";\r\n                for (var i = 0; i < message.dims.length; ++i)\r\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\r\n                        return \"dims: integer|Long[] expected\";\r\n            }\r\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\r\n                if (!$util.isInteger(message.dataType))\r\n                    return \"dataType: integer expected\";\r\n            if (message.segment != null && message.hasOwnProperty(\"segment\")) {\r\n                var error = $root.onnx.TensorProto.Segment.verify(message.segment);\r\n                if (error)\r\n                    return \"segment.\" + error;\r\n            }\r\n            if (message.floatData != null && message.hasOwnProperty(\"floatData\")) {\r\n                if (!Array.isArray(message.floatData))\r\n                    return \"floatData: array expected\";\r\n                for (var i = 0; i < message.floatData.length; ++i)\r\n                    if (typeof message.floatData[i] !== \"number\")\r\n                        return \"floatData: number[] expected\";\r\n            }\r\n            if (message.int32Data != null && message.hasOwnProperty(\"int32Data\")) {\r\n                if (!Array.isArray(message.int32Data))\r\n                    return \"int32Data: array expected\";\r\n                for (var i = 0; i < message.int32Data.length; ++i)\r\n                    if (!$util.isInteger(message.int32Data[i]))\r\n                        return \"int32Data: integer[] expected\";\r\n            }\r\n            if (message.stringData != null && message.hasOwnProperty(\"stringData\")) {\r\n                if (!Array.isArray(message.stringData))\r\n                    return \"stringData: array expected\";\r\n                for (var i = 0; i < message.stringData.length; ++i)\r\n                    if (!(message.stringData[i] && typeof message.stringData[i].length === \"number\" || $util.isString(message.stringData[i])))\r\n                        return \"stringData: buffer[] expected\";\r\n            }\r\n            if (message.int64Data != null && message.hasOwnProperty(\"int64Data\")) {\r\n                if (!Array.isArray(message.int64Data))\r\n                    return \"int64Data: array expected\";\r\n                for (var i = 0; i < message.int64Data.length; ++i)\r\n                    if (!$util.isInteger(message.int64Data[i]) && !(message.int64Data[i] && $util.isInteger(message.int64Data[i].low) && $util.isInteger(message.int64Data[i].high)))\r\n                        return \"int64Data: integer|Long[] expected\";\r\n            }\r\n            if (message.name != null && message.hasOwnProperty(\"name\"))\r\n                if (!$util.isString(message.name))\r\n                    return \"name: string expected\";\r\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\r\n                if (!$util.isString(message.docString))\r\n                    return \"docString: string expected\";\r\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\r\n                if (!(message.rawData && typeof message.rawData.length === \"number\" || $util.isString(message.rawData)))\r\n                    return \"rawData: buffer expected\";\r\n            if (message.externalData != null && message.hasOwnProperty(\"externalData\")) {\r\n                if (!Array.isArray(message.externalData))\r\n                    return \"externalData: array expected\";\r\n                for (var i = 0; i < message.externalData.length; ++i) {\r\n                    var error = $root.onnx.StringStringEntryProto.verify(message.externalData[i]);\r\n                    if (error)\r\n                        return \"externalData.\" + error;\r\n                }\r\n            }\r\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\r\n                switch (message.dataLocation) {\r\n                default:\r\n                    return \"dataLocation: enum value expected\";\r\n                case 0:\r\n                case 1:\r\n                    break;\r\n                }\r\n            if (message.doubleData != null && message.hasOwnProperty(\"doubleData\")) {\r\n                if (!Array.isArray(message.doubleData))\r\n                    return \"doubleData: array expected\";\r\n                for (var i = 0; i < message.doubleData.length; ++i)\r\n                    if (typeof message.doubleData[i] !== \"number\")\r\n                        return \"doubleData: number[] expected\";\r\n            }\r\n            if (message.uint64Data != null && message.hasOwnProperty(\"uint64Data\")) {\r\n                if (!Array.isArray(message.uint64Data))\r\n                    return \"uint64Data: array expected\";\r\n                for (var i = 0; i < message.uint64Data.length; ++i)\r\n                    if (!$util.isInteger(message.uint64Data[i]) && !(message.uint64Data[i] && $util.isInteger(message.uint64Data[i].low) && $util.isInteger(message.uint64Data[i].high)))\r\n                        return \"uint64Data: integer|Long[] expected\";\r\n            }\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Creates a TensorProto message from a plain object. Also converts values to their respective internal types.\r\n         * @function fromObject\r\n         * @memberof onnx.TensorProto\r\n         * @static\r\n         * @param {Object.<string,*>} object Plain object\r\n         * @returns {onnx.TensorProto} TensorProto\r\n         */\r\n        TensorProto.fromObject = function fromObject(object) {\r\n            if (object instanceof $root.onnx.TensorProto)\r\n                return object;\r\n            var message = new $root.onnx.TensorProto();\r\n            if (object.dims) {\r\n                if (!Array.isArray(object.dims))\r\n                    throw TypeError(\".onnx.TensorProto.dims: array expected\");\r\n                message.dims = [];\r\n                for (var i = 0; i < object.dims.length; ++i)\r\n                    if ($util.Long)\r\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\r\n                    else if (typeof object.dims[i] === \"string\")\r\n                        message.dims[i] = parseInt(object.dims[i], 10);\r\n                    else if (typeof object.dims[i] === \"number\")\r\n                        message.dims[i] = object.dims[i];\r\n                    else if (typeof object.dims[i] === \"object\")\r\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\r\n            }\r\n            if (object.dataType != null)\r\n                message.dataType = object.dataType | 0;\r\n            if (object.segment != null) {\r\n                if (typeof object.segment !== \"object\")\r\n                    throw TypeError(\".onnx.TensorProto.segment: object expected\");\r\n                message.segment = $root.onnx.TensorProto.Segment.fromObject(object.segment);\r\n            }\r\n            if (object.floatData) {\r\n                if (!Array.isArray(object.floatData))\r\n                    throw TypeError(\".onnx.TensorProto.floatData: array expected\");\r\n                message.floatData = [];\r\n                for (var i = 0; i < object.floatData.length; ++i)\r\n                    message.floatData[i] = Number(object.floatData[i]);\r\n            }\r\n            if (object.int32Data) {\r\n                if (!Array.isArray(object.int32Data))\r\n                    throw TypeError(\".onnx.TensorProto.int32Data: array expected\");\r\n                message.int32Data = [];\r\n                for (var i = 0; i < object.int32Data.length; ++i)\r\n                    message.int32Data[i] = object.int32Data[i] | 0;\r\n            }\r\n            if (object.stringData) {\r\n                if (!Array.isArray(object.stringData))\r\n                    throw TypeError(\".onnx.TensorProto.stringData: array expected\");\r\n                message.stringData = [];\r\n                for (var i = 0; i < object.stringData.length; ++i)\r\n                    if (typeof object.stringData[i] === \"string\")\r\n                        $util.base64.decode(object.stringData[i], message.stringData[i] = $util.newBuffer($util.base64.length(object.stringData[i])), 0);\r\n                    else if (object.stringData[i].length >= 0)\r\n                        message.stringData[i] = object.stringData[i];\r\n            }\r\n            if (object.int64Data) {\r\n                if (!Array.isArray(object.int64Data))\r\n                    throw TypeError(\".onnx.TensorProto.int64Data: array expected\");\r\n                message.int64Data = [];\r\n                for (var i = 0; i < object.int64Data.length; ++i)\r\n                    if ($util.Long)\r\n                        (message.int64Data[i] = $util.Long.fromValue(object.int64Data[i])).unsigned = false;\r\n                    else if (typeof object.int64Data[i] === \"string\")\r\n                        message.int64Data[i] = parseInt(object.int64Data[i], 10);\r\n                    else if (typeof object.int64Data[i] === \"number\")\r\n                        message.int64Data[i] = object.int64Data[i];\r\n                    else if (typeof object.int64Data[i] === \"object\")\r\n                        message.int64Data[i] = new $util.LongBits(object.int64Data[i].low >>> 0, object.int64Data[i].high >>> 0).toNumber();\r\n            }\r\n            if (object.name != null)\r\n                message.name = String(object.name);\r\n            if (object.docString != null)\r\n                message.docString = String(object.docString);\r\n            if (object.rawData != null)\r\n                if (typeof object.rawData === \"string\")\r\n                    $util.base64.decode(object.rawData, message.rawData = $util.newBuffer($util.base64.length(object.rawData)), 0);\r\n                else if (object.rawData.length >= 0)\r\n                    message.rawData = object.rawData;\r\n            if (object.externalData) {\r\n                if (!Array.isArray(object.externalData))\r\n                    throw TypeError(\".onnx.TensorProto.externalData: array expected\");\r\n                message.externalData = [];\r\n                for (var i = 0; i < object.externalData.length; ++i) {\r\n                    if (typeof object.externalData[i] !== \"object\")\r\n                        throw TypeError(\".onnx.TensorProto.externalData: object expected\");\r\n                    message.externalData[i] = $root.onnx.StringStringEntryProto.fromObject(object.externalData[i]);\r\n                }\r\n            }\r\n            switch (object.dataLocation) {\r\n            default:\r\n                if (typeof object.dataLocation === \"number\") {\r\n                    message.dataLocation = object.dataLocation;\r\n                    break;\r\n                }\r\n                break;\r\n            case \"DEFAULT\":\r\n            case 0:\r\n                message.dataLocation = 0;\r\n                break;\r\n            case \"EXTERNAL\":\r\n            case 1:\r\n                message.dataLocation = 1;\r\n                break;\r\n            }\r\n            if (object.doubleData) {\r\n                if (!Array.isArray(object.doubleData))\r\n                    throw TypeError(\".onnx.TensorProto.doubleData: array expected\");\r\n                message.doubleData = [];\r\n                for (var i = 0; i < object.doubleData.length; ++i)\r\n                    message.doubleData[i] = Number(object.doubleData[i]);\r\n            }\r\n            if (object.uint64Data) {\r\n                if (!Array.isArray(object.uint64Data))\r\n                    throw TypeError(\".onnx.TensorProto.uint64Data: array expected\");\r\n                message.uint64Data = [];\r\n                for (var i = 0; i < object.uint64Data.length; ++i)\r\n                    if ($util.Long)\r\n                        (message.uint64Data[i] = $util.Long.fromValue(object.uint64Data[i])).unsigned = true;\r\n                    else if (typeof object.uint64Data[i] === \"string\")\r\n                        message.uint64Data[i] = parseInt(object.uint64Data[i], 10);\r\n                    else if (typeof object.uint64Data[i] === \"number\")\r\n                        message.uint64Data[i] = object.uint64Data[i];\r\n                    else if (typeof object.uint64Data[i] === \"object\")\r\n                        message.uint64Data[i] = new $util.LongBits(object.uint64Data[i].low >>> 0, object.uint64Data[i].high >>> 0).toNumber(true);\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Creates a plain object from a TensorProto message. Also converts values to other types if specified.\r\n         * @function toObject\r\n         * @memberof onnx.TensorProto\r\n         * @static\r\n         * @param {onnx.TensorProto} message TensorProto\r\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n         * @returns {Object.<string,*>} Plain object\r\n         */\r\n        TensorProto.toObject = function toObject(message, options) {\r\n            if (!options)\r\n                options = {};\r\n            var object = {};\r\n            if (options.arrays || options.defaults) {\r\n                object.dims = [];\r\n                object.floatData = [];\r\n                object.int32Data = [];\r\n                object.stringData = [];\r\n                object.int64Data = [];\r\n                object.doubleData = [];\r\n                object.uint64Data = [];\r\n                object.externalData = [];\r\n            }\r\n            if (options.defaults) {\r\n                object.dataType = 0;\r\n                object.segment = null;\r\n                object.name = \"\";\r\n                if (options.bytes === String)\r\n                    object.rawData = \"\";\r\n                else {\r\n                    object.rawData = [];\r\n                    if (options.bytes !== Array)\r\n                        object.rawData = $util.newBuffer(object.rawData);\r\n                }\r\n                object.docString = \"\";\r\n                object.dataLocation = options.enums === String ? \"DEFAULT\" : 0;\r\n            }\r\n            if (message.dims && message.dims.length) {\r\n                object.dims = [];\r\n                for (var j = 0; j < message.dims.length; ++j)\r\n                    if (typeof message.dims[j] === \"number\")\r\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\r\n                    else\r\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\r\n            }\r\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\r\n                object.dataType = message.dataType;\r\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\r\n                object.segment = $root.onnx.TensorProto.Segment.toObject(message.segment, options);\r\n            if (message.floatData && message.floatData.length) {\r\n                object.floatData = [];\r\n                for (var j = 0; j < message.floatData.length; ++j)\r\n                    object.floatData[j] = options.json && !isFinite(message.floatData[j]) ? String(message.floatData[j]) : message.floatData[j];\r\n            }\r\n            if (message.int32Data && message.int32Data.length) {\r\n                object.int32Data = [];\r\n                for (var j = 0; j < message.int32Data.length; ++j)\r\n                    object.int32Data[j] = message.int32Data[j];\r\n            }\r\n            if (message.stringData && message.stringData.length) {\r\n                object.stringData = [];\r\n                for (var j = 0; j < message.stringData.length; ++j)\r\n                    object.stringData[j] = options.bytes === String ? $util.base64.encode(message.stringData[j], 0, message.stringData[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.stringData[j]) : message.stringData[j];\r\n            }\r\n            if (message.int64Data && message.int64Data.length) {\r\n                object.int64Data = [];\r\n                for (var j = 0; j < message.int64Data.length; ++j)\r\n                    if (typeof message.int64Data[j] === \"number\")\r\n                        object.int64Data[j] = options.longs === String ? String(message.int64Data[j]) : message.int64Data[j];\r\n                    else\r\n                        object.int64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.int64Data[j]) : options.longs === Number ? new $util.LongBits(message.int64Data[j].low >>> 0, message.int64Data[j].high >>> 0).toNumber() : message.int64Data[j];\r\n            }\r\n            if (message.name != null && message.hasOwnProperty(\"name\"))\r\n                object.name = message.name;\r\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\r\n                object.rawData = options.bytes === String ? $util.base64.encode(message.rawData, 0, message.rawData.length) : options.bytes === Array ? Array.prototype.slice.call(message.rawData) : message.rawData;\r\n            if (message.doubleData && message.doubleData.length) {\r\n                object.doubleData = [];\r\n                for (var j = 0; j < message.doubleData.length; ++j)\r\n                    object.doubleData[j] = options.json && !isFinite(message.doubleData[j]) ? String(message.doubleData[j]) : message.doubleData[j];\r\n            }\r\n            if (message.uint64Data && message.uint64Data.length) {\r\n                object.uint64Data = [];\r\n                for (var j = 0; j < message.uint64Data.length; ++j)\r\n                    if (typeof message.uint64Data[j] === \"number\")\r\n                        object.uint64Data[j] = options.longs === String ? String(message.uint64Data[j]) : message.uint64Data[j];\r\n                    else\r\n                        object.uint64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.uint64Data[j]) : options.longs === Number ? new $util.LongBits(message.uint64Data[j].low >>> 0, message.uint64Data[j].high >>> 0).toNumber(true) : message.uint64Data[j];\r\n            }\r\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\r\n                object.docString = message.docString;\r\n            if (message.externalData && message.externalData.length) {\r\n                object.externalData = [];\r\n                for (var j = 0; j < message.externalData.length; ++j)\r\n                    object.externalData[j] = $root.onnx.StringStringEntryProto.toObject(message.externalData[j], options);\r\n            }\r\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\r\n                object.dataLocation = options.enums === String ? $root.onnx.TensorProto.DataLocation[message.dataLocation] === undefined ? message.dataLocation : $root.onnx.TensorProto.DataLocation[message.dataLocation] : message.dataLocation;\r\n            return object;\r\n        };\r\n\r\n        /**\r\n         * Converts this TensorProto to JSON.\r\n         * @function toJSON\r\n         * @memberof onnx.TensorProto\r\n         * @instance\r\n         * @returns {Object.<string,*>} JSON object\r\n         */\r\n        TensorProto.prototype.toJSON = function toJSON() {\r\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n        };\r\n\r\n        /**\r\n         * Gets the default type url for TensorProto\r\n         * @function getTypeUrl\r\n         * @memberof onnx.TensorProto\r\n         * @static\r\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n         * @returns {string} The default type url\r\n         */\r\n        TensorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n            if (typeUrlPrefix === undefined) {\r\n                typeUrlPrefix = \"type.googleapis.com\";\r\n            }\r\n            return typeUrlPrefix + \"/onnx.TensorProto\";\r\n        };\r\n\r\n        /**\r\n         * DataType enum.\r\n         * @name onnx.TensorProto.DataType\r\n         * @enum {number}\r\n         * @property {number} UNDEFINED=0 UNDEFINED value\r\n         * @property {number} FLOAT=1 FLOAT value\r\n         * @property {number} UINT8=2 UINT8 value\r\n         * @property {number} INT8=3 INT8 value\r\n         * @property {number} UINT16=4 UINT16 value\r\n         * @property {number} INT16=5 INT16 value\r\n         * @property {number} INT32=6 INT32 value\r\n         * @property {number} INT64=7 INT64 value\r\n         * @property {number} STRING=8 STRING value\r\n         * @property {number} BOOL=9 BOOL value\r\n         * @property {number} FLOAT16=10 FLOAT16 value\r\n         * @property {number} DOUBLE=11 DOUBLE value\r\n         * @property {number} UINT32=12 UINT32 value\r\n         * @property {number} UINT64=13 UINT64 value\r\n         * @property {number} COMPLEX64=14 COMPLEX64 value\r\n         * @property {number} COMPLEX128=15 COMPLEX128 value\r\n         * @property {number} BFLOAT16=16 BFLOAT16 value\r\n         * @property {number} FLOAT8E4M3FN=17 FLOAT8E4M3FN value\r\n         * @property {number} FLOAT8E4M3FNUZ=18 FLOAT8E4M3FNUZ value\r\n         * @property {number} FLOAT8E5M2=19 FLOAT8E5M2 value\r\n         * @property {number} FLOAT8E5M2FNUZ=20 FLOAT8E5M2FNUZ value\r\n         */\r\n        TensorProto.DataType = (function() {\r\n            var valuesById = {}, values = Object.create(valuesById);\r\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\r\n            values[valuesById[1] = \"FLOAT\"] = 1;\r\n            values[valuesById[2] = \"UINT8\"] = 2;\r\n            values[valuesById[3] = \"INT8\"] = 3;\r\n            values[valuesById[4] = \"UINT16\"] = 4;\r\n            values[valuesById[5] = \"INT16\"] = 5;\r\n            values[valuesById[6] = \"INT32\"] = 6;\r\n            values[valuesById[7] = \"INT64\"] = 7;\r\n            values[valuesById[8] = \"STRING\"] = 8;\r\n            values[valuesById[9] = \"BOOL\"] = 9;\r\n            values[valuesById[10] = \"FLOAT16\"] = 10;\r\n            values[valuesById[11] = \"DOUBLE\"] = 11;\r\n            values[valuesById[12] = \"UINT32\"] = 12;\r\n            values[valuesById[13] = \"UINT64\"] = 13;\r\n            values[valuesById[14] = \"COMPLEX64\"] = 14;\r\n            values[valuesById[15] = \"COMPLEX128\"] = 15;\r\n            values[valuesById[16] = \"BFLOAT16\"] = 16;\r\n            values[valuesById[17] = \"FLOAT8E4M3FN\"] = 17;\r\n            values[valuesById[18] = \"FLOAT8E4M3FNUZ\"] = 18;\r\n            values[valuesById[19] = \"FLOAT8E5M2\"] = 19;\r\n            values[valuesById[20] = \"FLOAT8E5M2FNUZ\"] = 20;\r\n            return values;\r\n        })();\r\n\r\n        TensorProto.Segment = (function() {\r\n\r\n            /**\r\n             * Properties of a Segment.\r\n             * @memberof onnx.TensorProto\r\n             * @interface ISegment\r\n             * @property {number|Long|null} [begin] Segment begin\r\n             * @property {number|Long|null} [end] Segment end\r\n             */\r\n\r\n            /**\r\n             * Constructs a new Segment.\r\n             * @memberof onnx.TensorProto\r\n             * @classdesc Represents a Segment.\r\n             * @implements ISegment\r\n             * @constructor\r\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\r\n             */\r\n            function Segment(properties) {\r\n                if (properties)\r\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                        if (properties[keys[i]] != null)\r\n                            this[keys[i]] = properties[keys[i]];\r\n            }\r\n\r\n            /**\r\n             * Segment begin.\r\n             * @member {number|Long} begin\r\n             * @memberof onnx.TensorProto.Segment\r\n             * @instance\r\n             */\r\n            Segment.prototype.begin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\r\n\r\n            /**\r\n             * Segment end.\r\n             * @member {number|Long} end\r\n             * @memberof onnx.TensorProto.Segment\r\n             * @instance\r\n             */\r\n            Segment.prototype.end = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\r\n\r\n            /**\r\n             * Creates a new Segment instance using the specified properties.\r\n             * @function create\r\n             * @memberof onnx.TensorProto.Segment\r\n             * @static\r\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\r\n             * @returns {onnx.TensorProto.Segment} Segment instance\r\n             */\r\n            Segment.create = function create(properties) {\r\n                return new Segment(properties);\r\n            };\r\n\r\n            /**\r\n             * Encodes the specified Segment message. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\r\n             * @function encode\r\n             * @memberof onnx.TensorProto.Segment\r\n             * @static\r\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            Segment.encode = function encode(message, writer) {\r\n                if (!writer)\r\n                    writer = $Writer.create();\r\n                if (message.begin != null && Object.hasOwnProperty.call(message, \"begin\"))\r\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.begin);\r\n                if (message.end != null && Object.hasOwnProperty.call(message, \"end\"))\r\n                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.end);\r\n                return writer;\r\n            };\r\n\r\n            /**\r\n             * Encodes the specified Segment message, length delimited. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\r\n             * @function encodeDelimited\r\n             * @memberof onnx.TensorProto.Segment\r\n             * @static\r\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            Segment.encodeDelimited = function encodeDelimited(message, writer) {\r\n                return this.encode(message, writer).ldelim();\r\n            };\r\n\r\n            /**\r\n             * Decodes a Segment message from the specified reader or buffer.\r\n             * @function decode\r\n             * @memberof onnx.TensorProto.Segment\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @param {number} [length] Message length if known beforehand\r\n             * @returns {onnx.TensorProto.Segment} Segment\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            Segment.decode = function decode(reader, length) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = $Reader.create(reader);\r\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto.Segment();\r\n                while (reader.pos < end) {\r\n                    var tag = reader.uint32();\r\n                    switch (tag >>> 3) {\r\n                    case 1: {\r\n                            message.begin = reader.int64();\r\n                            break;\r\n                        }\r\n                    case 2: {\r\n                            message.end = reader.int64();\r\n                            break;\r\n                        }\r\n                    default:\r\n                        reader.skipType(tag & 7);\r\n                        break;\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n\r\n            /**\r\n             * Decodes a Segment message from the specified reader or buffer, length delimited.\r\n             * @function decodeDelimited\r\n             * @memberof onnx.TensorProto.Segment\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @returns {onnx.TensorProto.Segment} Segment\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            Segment.decodeDelimited = function decodeDelimited(reader) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = new $Reader(reader);\r\n                return this.decode(reader, reader.uint32());\r\n            };\r\n\r\n            /**\r\n             * Verifies a Segment message.\r\n             * @function verify\r\n             * @memberof onnx.TensorProto.Segment\r\n             * @static\r\n             * @param {Object.<string,*>} message Plain object to verify\r\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            Segment.verify = function verify(message) {\r\n                if (typeof message !== \"object\" || message === null)\r\n                    return \"object expected\";\r\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\r\n                    if (!$util.isInteger(message.begin) && !(message.begin && $util.isInteger(message.begin.low) && $util.isInteger(message.begin.high)))\r\n                        return \"begin: integer|Long expected\";\r\n                if (message.end != null && message.hasOwnProperty(\"end\"))\r\n                    if (!$util.isInteger(message.end) && !(message.end && $util.isInteger(message.end.low) && $util.isInteger(message.end.high)))\r\n                        return \"end: integer|Long expected\";\r\n                return null;\r\n            };\r\n\r\n            /**\r\n             * Creates a Segment message from a plain object. Also converts values to their respective internal types.\r\n             * @function fromObject\r\n             * @memberof onnx.TensorProto.Segment\r\n             * @static\r\n             * @param {Object.<string,*>} object Plain object\r\n             * @returns {onnx.TensorProto.Segment} Segment\r\n             */\r\n            Segment.fromObject = function fromObject(object) {\r\n                if (object instanceof $root.onnx.TensorProto.Segment)\r\n                    return object;\r\n                var message = new $root.onnx.TensorProto.Segment();\r\n                if (object.begin != null)\r\n                    if ($util.Long)\r\n                        (message.begin = $util.Long.fromValue(object.begin)).unsigned = false;\r\n                    else if (typeof object.begin === \"string\")\r\n                        message.begin = parseInt(object.begin, 10);\r\n                    else if (typeof object.begin === \"number\")\r\n                        message.begin = object.begin;\r\n                    else if (typeof object.begin === \"object\")\r\n                        message.begin = new $util.LongBits(object.begin.low >>> 0, object.begin.high >>> 0).toNumber();\r\n                if (object.end != null)\r\n                    if ($util.Long)\r\n                        (message.end = $util.Long.fromValue(object.end)).unsigned = false;\r\n                    else if (typeof object.end === \"string\")\r\n                        message.end = parseInt(object.end, 10);\r\n                    else if (typeof object.end === \"number\")\r\n                        message.end = object.end;\r\n                    else if (typeof object.end === \"object\")\r\n                        message.end = new $util.LongBits(object.end.low >>> 0, object.end.high >>> 0).toNumber();\r\n                return message;\r\n            };\r\n\r\n            /**\r\n             * Creates a plain object from a Segment message. Also converts values to other types if specified.\r\n             * @function toObject\r\n             * @memberof onnx.TensorProto.Segment\r\n             * @static\r\n             * @param {onnx.TensorProto.Segment} message Segment\r\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n             * @returns {Object.<string,*>} Plain object\r\n             */\r\n            Segment.toObject = function toObject(message, options) {\r\n                if (!options)\r\n                    options = {};\r\n                var object = {};\r\n                if (options.defaults) {\r\n                    if ($util.Long) {\r\n                        var long = new $util.Long(0, 0, false);\r\n                        object.begin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\r\n                    } else\r\n                        object.begin = options.longs === String ? \"0\" : 0;\r\n                    if ($util.Long) {\r\n                        var long = new $util.Long(0, 0, false);\r\n                        object.end = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\r\n                    } else\r\n                        object.end = options.longs === String ? \"0\" : 0;\r\n                }\r\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\r\n                    if (typeof message.begin === \"number\")\r\n                        object.begin = options.longs === String ? String(message.begin) : message.begin;\r\n                    else\r\n                        object.begin = options.longs === String ? $util.Long.prototype.toString.call(message.begin) : options.longs === Number ? new $util.LongBits(message.begin.low >>> 0, message.begin.high >>> 0).toNumber() : message.begin;\r\n                if (message.end != null && message.hasOwnProperty(\"end\"))\r\n                    if (typeof message.end === \"number\")\r\n                        object.end = options.longs === String ? String(message.end) : message.end;\r\n                    else\r\n                        object.end = options.longs === String ? $util.Long.prototype.toString.call(message.end) : options.longs === Number ? new $util.LongBits(message.end.low >>> 0, message.end.high >>> 0).toNumber() : message.end;\r\n                return object;\r\n            };\r\n\r\n            /**\r\n             * Converts this Segment to JSON.\r\n             * @function toJSON\r\n             * @memberof onnx.TensorProto.Segment\r\n             * @instance\r\n             * @returns {Object.<string,*>} JSON object\r\n             */\r\n            Segment.prototype.toJSON = function toJSON() {\r\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n            };\r\n\r\n            /**\r\n             * Gets the default type url for Segment\r\n             * @function getTypeUrl\r\n             * @memberof onnx.TensorProto.Segment\r\n             * @static\r\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n             * @returns {string} The default type url\r\n             */\r\n            Segment.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n                if (typeUrlPrefix === undefined) {\r\n                    typeUrlPrefix = \"type.googleapis.com\";\r\n                }\r\n                return typeUrlPrefix + \"/onnx.TensorProto.Segment\";\r\n            };\r\n\r\n            return Segment;\r\n        })();\r\n\r\n        /**\r\n         * DataLocation enum.\r\n         * @name onnx.TensorProto.DataLocation\r\n         * @enum {number}\r\n         * @property {number} DEFAULT=0 DEFAULT value\r\n         * @property {number} EXTERNAL=1 EXTERNAL value\r\n         */\r\n        TensorProto.DataLocation = (function() {\r\n            var valuesById = {}, values = Object.create(valuesById);\r\n            values[valuesById[0] = \"DEFAULT\"] = 0;\r\n            values[valuesById[1] = \"EXTERNAL\"] = 1;\r\n            return values;\r\n        })();\r\n\r\n        return TensorProto;\r\n    })();\r\n\r\n    onnx.SparseTensorProto = (function() {\r\n\r\n        /**\r\n         * Properties of a SparseTensorProto.\r\n         * @memberof onnx\r\n         * @interface ISparseTensorProto\r\n         * @property {onnx.ITensorProto|null} [values] SparseTensorProto values\r\n         * @property {onnx.ITensorProto|null} [indices] SparseTensorProto indices\r\n         * @property {Array.<number|Long>|null} [dims] SparseTensorProto dims\r\n         */\r\n\r\n        /**\r\n         * Constructs a new SparseTensorProto.\r\n         * @memberof onnx\r\n         * @classdesc Represents a SparseTensorProto.\r\n         * @implements ISparseTensorProto\r\n         * @constructor\r\n         * @param {onnx.ISparseTensorProto=} [properties] Properties to set\r\n         */\r\n        function SparseTensorProto(properties) {\r\n            this.dims = [];\r\n            if (properties)\r\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                    if (properties[keys[i]] != null)\r\n                        this[keys[i]] = properties[keys[i]];\r\n        }\r\n\r\n        /**\r\n         * SparseTensorProto values.\r\n         * @member {onnx.ITensorProto|null|undefined} values\r\n         * @memberof onnx.SparseTensorProto\r\n         * @instance\r\n         */\r\n        SparseTensorProto.prototype.values = null;\r\n\r\n        /**\r\n         * SparseTensorProto indices.\r\n         * @member {onnx.ITensorProto|null|undefined} indices\r\n         * @memberof onnx.SparseTensorProto\r\n         * @instance\r\n         */\r\n        SparseTensorProto.prototype.indices = null;\r\n\r\n        /**\r\n         * SparseTensorProto dims.\r\n         * @member {Array.<number|Long>} dims\r\n         * @memberof onnx.SparseTensorProto\r\n         * @instance\r\n         */\r\n        SparseTensorProto.prototype.dims = $util.emptyArray;\r\n\r\n        /**\r\n         * Creates a new SparseTensorProto instance using the specified properties.\r\n         * @function create\r\n         * @memberof onnx.SparseTensorProto\r\n         * @static\r\n         * @param {onnx.ISparseTensorProto=} [properties] Properties to set\r\n         * @returns {onnx.SparseTensorProto} SparseTensorProto instance\r\n         */\r\n        SparseTensorProto.create = function create(properties) {\r\n            return new SparseTensorProto(properties);\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified SparseTensorProto message. Does not implicitly {@link onnx.SparseTensorProto.verify|verify} messages.\r\n         * @function encode\r\n         * @memberof onnx.SparseTensorProto\r\n         * @static\r\n         * @param {onnx.ISparseTensorProto} message SparseTensorProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        SparseTensorProto.encode = function encode(message, writer) {\r\n            if (!writer)\r\n                writer = $Writer.create();\r\n            if (message.values != null && Object.hasOwnProperty.call(message, \"values\"))\r\n                $root.onnx.TensorProto.encode(message.values, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\r\n            if (message.indices != null && Object.hasOwnProperty.call(message, \"indices\"))\r\n                $root.onnx.TensorProto.encode(message.indices, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\r\n            if (message.dims != null && message.dims.length) {\r\n                writer.uint32(/* id 3, wireType 2 =*/26).fork();\r\n                for (var i = 0; i < message.dims.length; ++i)\r\n                    writer.int64(message.dims[i]);\r\n                writer.ldelim();\r\n            }\r\n            return writer;\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified SparseTensorProto message, length delimited. Does not implicitly {@link onnx.SparseTensorProto.verify|verify} messages.\r\n         * @function encodeDelimited\r\n         * @memberof onnx.SparseTensorProto\r\n         * @static\r\n         * @param {onnx.ISparseTensorProto} message SparseTensorProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        SparseTensorProto.encodeDelimited = function encodeDelimited(message, writer) {\r\n            return this.encode(message, writer).ldelim();\r\n        };\r\n\r\n        /**\r\n         * Decodes a SparseTensorProto message from the specified reader or buffer.\r\n         * @function decode\r\n         * @memberof onnx.SparseTensorProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @param {number} [length] Message length if known beforehand\r\n         * @returns {onnx.SparseTensorProto} SparseTensorProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        SparseTensorProto.decode = function decode(reader, length) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = $Reader.create(reader);\r\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.SparseTensorProto();\r\n            while (reader.pos < end) {\r\n                var tag = reader.uint32();\r\n                switch (tag >>> 3) {\r\n                case 1: {\r\n                        message.values = $root.onnx.TensorProto.decode(reader, reader.uint32());\r\n                        break;\r\n                    }\r\n                case 2: {\r\n                        message.indices = $root.onnx.TensorProto.decode(reader, reader.uint32());\r\n                        break;\r\n                    }\r\n                case 3: {\r\n                        if (!(message.dims && message.dims.length))\r\n                            message.dims = [];\r\n                        if ((tag & 7) === 2) {\r\n                            var end2 = reader.uint32() + reader.pos;\r\n                            while (reader.pos < end2)\r\n                                message.dims.push(reader.int64());\r\n                        } else\r\n                            message.dims.push(reader.int64());\r\n                        break;\r\n                    }\r\n                default:\r\n                    reader.skipType(tag & 7);\r\n                    break;\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Decodes a SparseTensorProto message from the specified reader or buffer, length delimited.\r\n         * @function decodeDelimited\r\n         * @memberof onnx.SparseTensorProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @returns {onnx.SparseTensorProto} SparseTensorProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        SparseTensorProto.decodeDelimited = function decodeDelimited(reader) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = new $Reader(reader);\r\n            return this.decode(reader, reader.uint32());\r\n        };\r\n\r\n        /**\r\n         * Verifies a SparseTensorProto message.\r\n         * @function verify\r\n         * @memberof onnx.SparseTensorProto\r\n         * @static\r\n         * @param {Object.<string,*>} message Plain object to verify\r\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n         */\r\n        SparseTensorProto.verify = function verify(message) {\r\n            if (typeof message !== \"object\" || message === null)\r\n                return \"object expected\";\r\n            if (message.values != null && message.hasOwnProperty(\"values\")) {\r\n                var error = $root.onnx.TensorProto.verify(message.values);\r\n                if (error)\r\n                    return \"values.\" + error;\r\n            }\r\n            if (message.indices != null && message.hasOwnProperty(\"indices\")) {\r\n                var error = $root.onnx.TensorProto.verify(message.indices);\r\n                if (error)\r\n                    return \"indices.\" + error;\r\n            }\r\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\r\n                if (!Array.isArray(message.dims))\r\n                    return \"dims: array expected\";\r\n                for (var i = 0; i < message.dims.length; ++i)\r\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\r\n                        return \"dims: integer|Long[] expected\";\r\n            }\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Creates a SparseTensorProto message from a plain object. Also converts values to their respective internal types.\r\n         * @function fromObject\r\n         * @memberof onnx.SparseTensorProto\r\n         * @static\r\n         * @param {Object.<string,*>} object Plain object\r\n         * @returns {onnx.SparseTensorProto} SparseTensorProto\r\n         */\r\n        SparseTensorProto.fromObject = function fromObject(object) {\r\n            if (object instanceof $root.onnx.SparseTensorProto)\r\n                return object;\r\n            var message = new $root.onnx.SparseTensorProto();\r\n            if (object.values != null) {\r\n                if (typeof object.values !== \"object\")\r\n                    throw TypeError(\".onnx.SparseTensorProto.values: object expected\");\r\n                message.values = $root.onnx.TensorProto.fromObject(object.values);\r\n            }\r\n            if (object.indices != null) {\r\n                if (typeof object.indices !== \"object\")\r\n                    throw TypeError(\".onnx.SparseTensorProto.indices: object expected\");\r\n                message.indices = $root.onnx.TensorProto.fromObject(object.indices);\r\n            }\r\n            if (object.dims) {\r\n                if (!Array.isArray(object.dims))\r\n                    throw TypeError(\".onnx.SparseTensorProto.dims: array expected\");\r\n                message.dims = [];\r\n                for (var i = 0; i < object.dims.length; ++i)\r\n                    if ($util.Long)\r\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\r\n                    else if (typeof object.dims[i] === \"string\")\r\n                        message.dims[i] = parseInt(object.dims[i], 10);\r\n                    else if (typeof object.dims[i] === \"number\")\r\n                        message.dims[i] = object.dims[i];\r\n                    else if (typeof object.dims[i] === \"object\")\r\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Creates a plain object from a SparseTensorProto message. Also converts values to other types if specified.\r\n         * @function toObject\r\n         * @memberof onnx.SparseTensorProto\r\n         * @static\r\n         * @param {onnx.SparseTensorProto} message SparseTensorProto\r\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n         * @returns {Object.<string,*>} Plain object\r\n         */\r\n        SparseTensorProto.toObject = function toObject(message, options) {\r\n            if (!options)\r\n                options = {};\r\n            var object = {};\r\n            if (options.arrays || options.defaults)\r\n                object.dims = [];\r\n            if (options.defaults) {\r\n                object.values = null;\r\n                object.indices = null;\r\n            }\r\n            if (message.values != null && message.hasOwnProperty(\"values\"))\r\n                object.values = $root.onnx.TensorProto.toObject(message.values, options);\r\n            if (message.indices != null && message.hasOwnProperty(\"indices\"))\r\n                object.indices = $root.onnx.TensorProto.toObject(message.indices, options);\r\n            if (message.dims && message.dims.length) {\r\n                object.dims = [];\r\n                for (var j = 0; j < message.dims.length; ++j)\r\n                    if (typeof message.dims[j] === \"number\")\r\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\r\n                    else\r\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\r\n            }\r\n            return object;\r\n        };\r\n\r\n        /**\r\n         * Converts this SparseTensorProto to JSON.\r\n         * @function toJSON\r\n         * @memberof onnx.SparseTensorProto\r\n         * @instance\r\n         * @returns {Object.<string,*>} JSON object\r\n         */\r\n        SparseTensorProto.prototype.toJSON = function toJSON() {\r\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n        };\r\n\r\n        /**\r\n         * Gets the default type url for SparseTensorProto\r\n         * @function getTypeUrl\r\n         * @memberof onnx.SparseTensorProto\r\n         * @static\r\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n         * @returns {string} The default type url\r\n         */\r\n        SparseTensorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n            if (typeUrlPrefix === undefined) {\r\n                typeUrlPrefix = \"type.googleapis.com\";\r\n            }\r\n            return typeUrlPrefix + \"/onnx.SparseTensorProto\";\r\n        };\r\n\r\n        return SparseTensorProto;\r\n    })();\r\n\r\n    onnx.TensorShapeProto = (function() {\r\n\r\n        /**\r\n         * Properties of a TensorShapeProto.\r\n         * @memberof onnx\r\n         * @interface ITensorShapeProto\r\n         * @property {Array.<onnx.TensorShapeProto.IDimension>|null} [dim] TensorShapeProto dim\r\n         */\r\n\r\n        /**\r\n         * Constructs a new TensorShapeProto.\r\n         * @memberof onnx\r\n         * @classdesc Represents a TensorShapeProto.\r\n         * @implements ITensorShapeProto\r\n         * @constructor\r\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\r\n         */\r\n        function TensorShapeProto(properties) {\r\n            this.dim = [];\r\n            if (properties)\r\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                    if (properties[keys[i]] != null)\r\n                        this[keys[i]] = properties[keys[i]];\r\n        }\r\n\r\n        /**\r\n         * TensorShapeProto dim.\r\n         * @member {Array.<onnx.TensorShapeProto.IDimension>} dim\r\n         * @memberof onnx.TensorShapeProto\r\n         * @instance\r\n         */\r\n        TensorShapeProto.prototype.dim = $util.emptyArray;\r\n\r\n        /**\r\n         * Creates a new TensorShapeProto instance using the specified properties.\r\n         * @function create\r\n         * @memberof onnx.TensorShapeProto\r\n         * @static\r\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\r\n         * @returns {onnx.TensorShapeProto} TensorShapeProto instance\r\n         */\r\n        TensorShapeProto.create = function create(properties) {\r\n            return new TensorShapeProto(properties);\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified TensorShapeProto message. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\r\n         * @function encode\r\n         * @memberof onnx.TensorShapeProto\r\n         * @static\r\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        TensorShapeProto.encode = function encode(message, writer) {\r\n            if (!writer)\r\n                writer = $Writer.create();\r\n            if (message.dim != null && message.dim.length)\r\n                for (var i = 0; i < message.dim.length; ++i)\r\n                    $root.onnx.TensorShapeProto.Dimension.encode(message.dim[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\r\n            return writer;\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified TensorShapeProto message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\r\n         * @function encodeDelimited\r\n         * @memberof onnx.TensorShapeProto\r\n         * @static\r\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        TensorShapeProto.encodeDelimited = function encodeDelimited(message, writer) {\r\n            return this.encode(message, writer).ldelim();\r\n        };\r\n\r\n        /**\r\n         * Decodes a TensorShapeProto message from the specified reader or buffer.\r\n         * @function decode\r\n         * @memberof onnx.TensorShapeProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @param {number} [length] Message length if known beforehand\r\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        TensorShapeProto.decode = function decode(reader, length) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = $Reader.create(reader);\r\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto();\r\n            while (reader.pos < end) {\r\n                var tag = reader.uint32();\r\n                switch (tag >>> 3) {\r\n                case 1: {\r\n                        if (!(message.dim && message.dim.length))\r\n                            message.dim = [];\r\n                        message.dim.push($root.onnx.TensorShapeProto.Dimension.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                default:\r\n                    reader.skipType(tag & 7);\r\n                    break;\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Decodes a TensorShapeProto message from the specified reader or buffer, length delimited.\r\n         * @function decodeDelimited\r\n         * @memberof onnx.TensorShapeProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        TensorShapeProto.decodeDelimited = function decodeDelimited(reader) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = new $Reader(reader);\r\n            return this.decode(reader, reader.uint32());\r\n        };\r\n\r\n        /**\r\n         * Verifies a TensorShapeProto message.\r\n         * @function verify\r\n         * @memberof onnx.TensorShapeProto\r\n         * @static\r\n         * @param {Object.<string,*>} message Plain object to verify\r\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n         */\r\n        TensorShapeProto.verify = function verify(message) {\r\n            if (typeof message !== \"object\" || message === null)\r\n                return \"object expected\";\r\n            if (message.dim != null && message.hasOwnProperty(\"dim\")) {\r\n                if (!Array.isArray(message.dim))\r\n                    return \"dim: array expected\";\r\n                for (var i = 0; i < message.dim.length; ++i) {\r\n                    var error = $root.onnx.TensorShapeProto.Dimension.verify(message.dim[i]);\r\n                    if (error)\r\n                        return \"dim.\" + error;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Creates a TensorShapeProto message from a plain object. Also converts values to their respective internal types.\r\n         * @function fromObject\r\n         * @memberof onnx.TensorShapeProto\r\n         * @static\r\n         * @param {Object.<string,*>} object Plain object\r\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\r\n         */\r\n        TensorShapeProto.fromObject = function fromObject(object) {\r\n            if (object instanceof $root.onnx.TensorShapeProto)\r\n                return object;\r\n            var message = new $root.onnx.TensorShapeProto();\r\n            if (object.dim) {\r\n                if (!Array.isArray(object.dim))\r\n                    throw TypeError(\".onnx.TensorShapeProto.dim: array expected\");\r\n                message.dim = [];\r\n                for (var i = 0; i < object.dim.length; ++i) {\r\n                    if (typeof object.dim[i] !== \"object\")\r\n                        throw TypeError(\".onnx.TensorShapeProto.dim: object expected\");\r\n                    message.dim[i] = $root.onnx.TensorShapeProto.Dimension.fromObject(object.dim[i]);\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Creates a plain object from a TensorShapeProto message. Also converts values to other types if specified.\r\n         * @function toObject\r\n         * @memberof onnx.TensorShapeProto\r\n         * @static\r\n         * @param {onnx.TensorShapeProto} message TensorShapeProto\r\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n         * @returns {Object.<string,*>} Plain object\r\n         */\r\n        TensorShapeProto.toObject = function toObject(message, options) {\r\n            if (!options)\r\n                options = {};\r\n            var object = {};\r\n            if (options.arrays || options.defaults)\r\n                object.dim = [];\r\n            if (message.dim && message.dim.length) {\r\n                object.dim = [];\r\n                for (var j = 0; j < message.dim.length; ++j)\r\n                    object.dim[j] = $root.onnx.TensorShapeProto.Dimension.toObject(message.dim[j], options);\r\n            }\r\n            return object;\r\n        };\r\n\r\n        /**\r\n         * Converts this TensorShapeProto to JSON.\r\n         * @function toJSON\r\n         * @memberof onnx.TensorShapeProto\r\n         * @instance\r\n         * @returns {Object.<string,*>} JSON object\r\n         */\r\n        TensorShapeProto.prototype.toJSON = function toJSON() {\r\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n        };\r\n\r\n        /**\r\n         * Gets the default type url for TensorShapeProto\r\n         * @function getTypeUrl\r\n         * @memberof onnx.TensorShapeProto\r\n         * @static\r\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n         * @returns {string} The default type url\r\n         */\r\n        TensorShapeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n            if (typeUrlPrefix === undefined) {\r\n                typeUrlPrefix = \"type.googleapis.com\";\r\n            }\r\n            return typeUrlPrefix + \"/onnx.TensorShapeProto\";\r\n        };\r\n\r\n        TensorShapeProto.Dimension = (function() {\r\n\r\n            /**\r\n             * Properties of a Dimension.\r\n             * @memberof onnx.TensorShapeProto\r\n             * @interface IDimension\r\n             * @property {number|Long|null} [dimValue] Dimension dimValue\r\n             * @property {string|null} [dimParam] Dimension dimParam\r\n             * @property {string|null} [denotation] Dimension denotation\r\n             */\r\n\r\n            /**\r\n             * Constructs a new Dimension.\r\n             * @memberof onnx.TensorShapeProto\r\n             * @classdesc Represents a Dimension.\r\n             * @implements IDimension\r\n             * @constructor\r\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\r\n             */\r\n            function Dimension(properties) {\r\n                if (properties)\r\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                        if (properties[keys[i]] != null)\r\n                            this[keys[i]] = properties[keys[i]];\r\n            }\r\n\r\n            /**\r\n             * Dimension dimValue.\r\n             * @member {number|Long|null|undefined} dimValue\r\n             * @memberof onnx.TensorShapeProto.Dimension\r\n             * @instance\r\n             */\r\n            Dimension.prototype.dimValue = null;\r\n\r\n            /**\r\n             * Dimension dimParam.\r\n             * @member {string|null|undefined} dimParam\r\n             * @memberof onnx.TensorShapeProto.Dimension\r\n             * @instance\r\n             */\r\n            Dimension.prototype.dimParam = null;\r\n\r\n            /**\r\n             * Dimension denotation.\r\n             * @member {string} denotation\r\n             * @memberof onnx.TensorShapeProto.Dimension\r\n             * @instance\r\n             */\r\n            Dimension.prototype.denotation = \"\";\r\n\r\n            // OneOf field names bound to virtual getters and setters\r\n            var $oneOfFields;\r\n\r\n            /**\r\n             * Dimension value.\r\n             * @member {\"dimValue\"|\"dimParam\"|undefined} value\r\n             * @memberof onnx.TensorShapeProto.Dimension\r\n             * @instance\r\n             */\r\n            Object.defineProperty(Dimension.prototype, \"value\", {\r\n                get: $util.oneOfGetter($oneOfFields = [\"dimValue\", \"dimParam\"]),\r\n                set: $util.oneOfSetter($oneOfFields)\r\n            });\r\n\r\n            /**\r\n             * Creates a new Dimension instance using the specified properties.\r\n             * @function create\r\n             * @memberof onnx.TensorShapeProto.Dimension\r\n             * @static\r\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\r\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension instance\r\n             */\r\n            Dimension.create = function create(properties) {\r\n                return new Dimension(properties);\r\n            };\r\n\r\n            /**\r\n             * Encodes the specified Dimension message. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\r\n             * @function encode\r\n             * @memberof onnx.TensorShapeProto.Dimension\r\n             * @static\r\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            Dimension.encode = function encode(message, writer) {\r\n                if (!writer)\r\n                    writer = $Writer.create();\r\n                if (message.dimValue != null && Object.hasOwnProperty.call(message, \"dimValue\"))\r\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.dimValue);\r\n                if (message.dimParam != null && Object.hasOwnProperty.call(message, \"dimParam\"))\r\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.dimParam);\r\n                if (message.denotation != null && Object.hasOwnProperty.call(message, \"denotation\"))\r\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.denotation);\r\n                return writer;\r\n            };\r\n\r\n            /**\r\n             * Encodes the specified Dimension message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\r\n             * @function encodeDelimited\r\n             * @memberof onnx.TensorShapeProto.Dimension\r\n             * @static\r\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            Dimension.encodeDelimited = function encodeDelimited(message, writer) {\r\n                return this.encode(message, writer).ldelim();\r\n            };\r\n\r\n            /**\r\n             * Decodes a Dimension message from the specified reader or buffer.\r\n             * @function decode\r\n             * @memberof onnx.TensorShapeProto.Dimension\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @param {number} [length] Message length if known beforehand\r\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            Dimension.decode = function decode(reader, length) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = $Reader.create(reader);\r\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto.Dimension();\r\n                while (reader.pos < end) {\r\n                    var tag = reader.uint32();\r\n                    switch (tag >>> 3) {\r\n                    case 1: {\r\n                            message.dimValue = reader.int64();\r\n                            break;\r\n                        }\r\n                    case 2: {\r\n                            message.dimParam = reader.string();\r\n                            break;\r\n                        }\r\n                    case 3: {\r\n                            message.denotation = reader.string();\r\n                            break;\r\n                        }\r\n                    default:\r\n                        reader.skipType(tag & 7);\r\n                        break;\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n\r\n            /**\r\n             * Decodes a Dimension message from the specified reader or buffer, length delimited.\r\n             * @function decodeDelimited\r\n             * @memberof onnx.TensorShapeProto.Dimension\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            Dimension.decodeDelimited = function decodeDelimited(reader) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = new $Reader(reader);\r\n                return this.decode(reader, reader.uint32());\r\n            };\r\n\r\n            /**\r\n             * Verifies a Dimension message.\r\n             * @function verify\r\n             * @memberof onnx.TensorShapeProto.Dimension\r\n             * @static\r\n             * @param {Object.<string,*>} message Plain object to verify\r\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            Dimension.verify = function verify(message) {\r\n                if (typeof message !== \"object\" || message === null)\r\n                    return \"object expected\";\r\n                var properties = {};\r\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\r\n                    properties.value = 1;\r\n                    if (!$util.isInteger(message.dimValue) && !(message.dimValue && $util.isInteger(message.dimValue.low) && $util.isInteger(message.dimValue.high)))\r\n                        return \"dimValue: integer|Long expected\";\r\n                }\r\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\r\n                    if (properties.value === 1)\r\n                        return \"value: multiple values\";\r\n                    properties.value = 1;\r\n                    if (!$util.isString(message.dimParam))\r\n                        return \"dimParam: string expected\";\r\n                }\r\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\r\n                    if (!$util.isString(message.denotation))\r\n                        return \"denotation: string expected\";\r\n                return null;\r\n            };\r\n\r\n            /**\r\n             * Creates a Dimension message from a plain object. Also converts values to their respective internal types.\r\n             * @function fromObject\r\n             * @memberof onnx.TensorShapeProto.Dimension\r\n             * @static\r\n             * @param {Object.<string,*>} object Plain object\r\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\r\n             */\r\n            Dimension.fromObject = function fromObject(object) {\r\n                if (object instanceof $root.onnx.TensorShapeProto.Dimension)\r\n                    return object;\r\n                var message = new $root.onnx.TensorShapeProto.Dimension();\r\n                if (object.dimValue != null)\r\n                    if ($util.Long)\r\n                        (message.dimValue = $util.Long.fromValue(object.dimValue)).unsigned = false;\r\n                    else if (typeof object.dimValue === \"string\")\r\n                        message.dimValue = parseInt(object.dimValue, 10);\r\n                    else if (typeof object.dimValue === \"number\")\r\n                        message.dimValue = object.dimValue;\r\n                    else if (typeof object.dimValue === \"object\")\r\n                        message.dimValue = new $util.LongBits(object.dimValue.low >>> 0, object.dimValue.high >>> 0).toNumber();\r\n                if (object.dimParam != null)\r\n                    message.dimParam = String(object.dimParam);\r\n                if (object.denotation != null)\r\n                    message.denotation = String(object.denotation);\r\n                return message;\r\n            };\r\n\r\n            /**\r\n             * Creates a plain object from a Dimension message. Also converts values to other types if specified.\r\n             * @function toObject\r\n             * @memberof onnx.TensorShapeProto.Dimension\r\n             * @static\r\n             * @param {onnx.TensorShapeProto.Dimension} message Dimension\r\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n             * @returns {Object.<string,*>} Plain object\r\n             */\r\n            Dimension.toObject = function toObject(message, options) {\r\n                if (!options)\r\n                    options = {};\r\n                var object = {};\r\n                if (options.defaults)\r\n                    object.denotation = \"\";\r\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\r\n                    if (typeof message.dimValue === \"number\")\r\n                        object.dimValue = options.longs === String ? String(message.dimValue) : message.dimValue;\r\n                    else\r\n                        object.dimValue = options.longs === String ? $util.Long.prototype.toString.call(message.dimValue) : options.longs === Number ? new $util.LongBits(message.dimValue.low >>> 0, message.dimValue.high >>> 0).toNumber() : message.dimValue;\r\n                    if (options.oneofs)\r\n                        object.value = \"dimValue\";\r\n                }\r\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\r\n                    object.dimParam = message.dimParam;\r\n                    if (options.oneofs)\r\n                        object.value = \"dimParam\";\r\n                }\r\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\r\n                    object.denotation = message.denotation;\r\n                return object;\r\n            };\r\n\r\n            /**\r\n             * Converts this Dimension to JSON.\r\n             * @function toJSON\r\n             * @memberof onnx.TensorShapeProto.Dimension\r\n             * @instance\r\n             * @returns {Object.<string,*>} JSON object\r\n             */\r\n            Dimension.prototype.toJSON = function toJSON() {\r\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n            };\r\n\r\n            /**\r\n             * Gets the default type url for Dimension\r\n             * @function getTypeUrl\r\n             * @memberof onnx.TensorShapeProto.Dimension\r\n             * @static\r\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n             * @returns {string} The default type url\r\n             */\r\n            Dimension.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n                if (typeUrlPrefix === undefined) {\r\n                    typeUrlPrefix = \"type.googleapis.com\";\r\n                }\r\n                return typeUrlPrefix + \"/onnx.TensorShapeProto.Dimension\";\r\n            };\r\n\r\n            return Dimension;\r\n        })();\r\n\r\n        return TensorShapeProto;\r\n    })();\r\n\r\n    onnx.TypeProto = (function() {\r\n\r\n        /**\r\n         * Properties of a TypeProto.\r\n         * @memberof onnx\r\n         * @interface ITypeProto\r\n         * @property {onnx.TypeProto.ITensor|null} [tensorType] TypeProto tensorType\r\n         * @property {onnx.TypeProto.ISequence|null} [sequenceType] TypeProto sequenceType\r\n         * @property {onnx.TypeProto.IMap|null} [mapType] TypeProto mapType\r\n         * @property {onnx.TypeProto.IOptional|null} [optionalType] TypeProto optionalType\r\n         * @property {onnx.TypeProto.ISparseTensor|null} [sparseTensorType] TypeProto sparseTensorType\r\n         * @property {string|null} [denotation] TypeProto denotation\r\n         */\r\n\r\n        /**\r\n         * Constructs a new TypeProto.\r\n         * @memberof onnx\r\n         * @classdesc Represents a TypeProto.\r\n         * @implements ITypeProto\r\n         * @constructor\r\n         * @param {onnx.ITypeProto=} [properties] Properties to set\r\n         */\r\n        function TypeProto(properties) {\r\n            if (properties)\r\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                    if (properties[keys[i]] != null)\r\n                        this[keys[i]] = properties[keys[i]];\r\n        }\r\n\r\n        /**\r\n         * TypeProto tensorType.\r\n         * @member {onnx.TypeProto.ITensor|null|undefined} tensorType\r\n         * @memberof onnx.TypeProto\r\n         * @instance\r\n         */\r\n        TypeProto.prototype.tensorType = null;\r\n\r\n        /**\r\n         * TypeProto sequenceType.\r\n         * @member {onnx.TypeProto.ISequence|null|undefined} sequenceType\r\n         * @memberof onnx.TypeProto\r\n         * @instance\r\n         */\r\n        TypeProto.prototype.sequenceType = null;\r\n\r\n        /**\r\n         * TypeProto mapType.\r\n         * @member {onnx.TypeProto.IMap|null|undefined} mapType\r\n         * @memberof onnx.TypeProto\r\n         * @instance\r\n         */\r\n        TypeProto.prototype.mapType = null;\r\n\r\n        /**\r\n         * TypeProto optionalType.\r\n         * @member {onnx.TypeProto.IOptional|null|undefined} optionalType\r\n         * @memberof onnx.TypeProto\r\n         * @instance\r\n         */\r\n        TypeProto.prototype.optionalType = null;\r\n\r\n        /**\r\n         * TypeProto sparseTensorType.\r\n         * @member {onnx.TypeProto.ISparseTensor|null|undefined} sparseTensorType\r\n         * @memberof onnx.TypeProto\r\n         * @instance\r\n         */\r\n        TypeProto.prototype.sparseTensorType = null;\r\n\r\n        /**\r\n         * TypeProto denotation.\r\n         * @member {string} denotation\r\n         * @memberof onnx.TypeProto\r\n         * @instance\r\n         */\r\n        TypeProto.prototype.denotation = \"\";\r\n\r\n        // OneOf field names bound to virtual getters and setters\r\n        var $oneOfFields;\r\n\r\n        /**\r\n         * TypeProto value.\r\n         * @member {\"tensorType\"|\"sequenceType\"|\"mapType\"|\"optionalType\"|\"sparseTensorType\"|undefined} value\r\n         * @memberof onnx.TypeProto\r\n         * @instance\r\n         */\r\n        Object.defineProperty(TypeProto.prototype, \"value\", {\r\n            get: $util.oneOfGetter($oneOfFields = [\"tensorType\", \"sequenceType\", \"mapType\", \"optionalType\", \"sparseTensorType\"]),\r\n            set: $util.oneOfSetter($oneOfFields)\r\n        });\r\n\r\n        /**\r\n         * Creates a new TypeProto instance using the specified properties.\r\n         * @function create\r\n         * @memberof onnx.TypeProto\r\n         * @static\r\n         * @param {onnx.ITypeProto=} [properties] Properties to set\r\n         * @returns {onnx.TypeProto} TypeProto instance\r\n         */\r\n        TypeProto.create = function create(properties) {\r\n            return new TypeProto(properties);\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified TypeProto message. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\r\n         * @function encode\r\n         * @memberof onnx.TypeProto\r\n         * @static\r\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        TypeProto.encode = function encode(message, writer) {\r\n            if (!writer)\r\n                writer = $Writer.create();\r\n            if (message.tensorType != null && Object.hasOwnProperty.call(message, \"tensorType\"))\r\n                $root.onnx.TypeProto.Tensor.encode(message.tensorType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\r\n            if (message.sequenceType != null && Object.hasOwnProperty.call(message, \"sequenceType\"))\r\n                $root.onnx.TypeProto.Sequence.encode(message.sequenceType, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\r\n            if (message.mapType != null && Object.hasOwnProperty.call(message, \"mapType\"))\r\n                $root.onnx.TypeProto.Map.encode(message.mapType, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\r\n            if (message.denotation != null && Object.hasOwnProperty.call(message, \"denotation\"))\r\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.denotation);\r\n            if (message.sparseTensorType != null && Object.hasOwnProperty.call(message, \"sparseTensorType\"))\r\n                $root.onnx.TypeProto.SparseTensor.encode(message.sparseTensorType, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\r\n            if (message.optionalType != null && Object.hasOwnProperty.call(message, \"optionalType\"))\r\n                $root.onnx.TypeProto.Optional.encode(message.optionalType, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\r\n            return writer;\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified TypeProto message, length delimited. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\r\n         * @function encodeDelimited\r\n         * @memberof onnx.TypeProto\r\n         * @static\r\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        TypeProto.encodeDelimited = function encodeDelimited(message, writer) {\r\n            return this.encode(message, writer).ldelim();\r\n        };\r\n\r\n        /**\r\n         * Decodes a TypeProto message from the specified reader or buffer.\r\n         * @function decode\r\n         * @memberof onnx.TypeProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @param {number} [length] Message length if known beforehand\r\n         * @returns {onnx.TypeProto} TypeProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        TypeProto.decode = function decode(reader, length) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = $Reader.create(reader);\r\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto();\r\n            while (reader.pos < end) {\r\n                var tag = reader.uint32();\r\n                switch (tag >>> 3) {\r\n                case 1: {\r\n                        message.tensorType = $root.onnx.TypeProto.Tensor.decode(reader, reader.uint32());\r\n                        break;\r\n                    }\r\n                case 4: {\r\n                        message.sequenceType = $root.onnx.TypeProto.Sequence.decode(reader, reader.uint32());\r\n                        break;\r\n                    }\r\n                case 5: {\r\n                        message.mapType = $root.onnx.TypeProto.Map.decode(reader, reader.uint32());\r\n                        break;\r\n                    }\r\n                case 9: {\r\n                        message.optionalType = $root.onnx.TypeProto.Optional.decode(reader, reader.uint32());\r\n                        break;\r\n                    }\r\n                case 8: {\r\n                        message.sparseTensorType = $root.onnx.TypeProto.SparseTensor.decode(reader, reader.uint32());\r\n                        break;\r\n                    }\r\n                case 6: {\r\n                        message.denotation = reader.string();\r\n                        break;\r\n                    }\r\n                default:\r\n                    reader.skipType(tag & 7);\r\n                    break;\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Decodes a TypeProto message from the specified reader or buffer, length delimited.\r\n         * @function decodeDelimited\r\n         * @memberof onnx.TypeProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @returns {onnx.TypeProto} TypeProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        TypeProto.decodeDelimited = function decodeDelimited(reader) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = new $Reader(reader);\r\n            return this.decode(reader, reader.uint32());\r\n        };\r\n\r\n        /**\r\n         * Verifies a TypeProto message.\r\n         * @function verify\r\n         * @memberof onnx.TypeProto\r\n         * @static\r\n         * @param {Object.<string,*>} message Plain object to verify\r\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n         */\r\n        TypeProto.verify = function verify(message) {\r\n            if (typeof message !== \"object\" || message === null)\r\n                return \"object expected\";\r\n            var properties = {};\r\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\r\n                properties.value = 1;\r\n                {\r\n                    var error = $root.onnx.TypeProto.Tensor.verify(message.tensorType);\r\n                    if (error)\r\n                        return \"tensorType.\" + error;\r\n                }\r\n            }\r\n            if (message.sequenceType != null && message.hasOwnProperty(\"sequenceType\")) {\r\n                if (properties.value === 1)\r\n                    return \"value: multiple values\";\r\n                properties.value = 1;\r\n                {\r\n                    var error = $root.onnx.TypeProto.Sequence.verify(message.sequenceType);\r\n                    if (error)\r\n                        return \"sequenceType.\" + error;\r\n                }\r\n            }\r\n            if (message.mapType != null && message.hasOwnProperty(\"mapType\")) {\r\n                if (properties.value === 1)\r\n                    return \"value: multiple values\";\r\n                properties.value = 1;\r\n                {\r\n                    var error = $root.onnx.TypeProto.Map.verify(message.mapType);\r\n                    if (error)\r\n                        return \"mapType.\" + error;\r\n                }\r\n            }\r\n            if (message.optionalType != null && message.hasOwnProperty(\"optionalType\")) {\r\n                if (properties.value === 1)\r\n                    return \"value: multiple values\";\r\n                properties.value = 1;\r\n                {\r\n                    var error = $root.onnx.TypeProto.Optional.verify(message.optionalType);\r\n                    if (error)\r\n                        return \"optionalType.\" + error;\r\n                }\r\n            }\r\n            if (message.sparseTensorType != null && message.hasOwnProperty(\"sparseTensorType\")) {\r\n                if (properties.value === 1)\r\n                    return \"value: multiple values\";\r\n                properties.value = 1;\r\n                {\r\n                    var error = $root.onnx.TypeProto.SparseTensor.verify(message.sparseTensorType);\r\n                    if (error)\r\n                        return \"sparseTensorType.\" + error;\r\n                }\r\n            }\r\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\r\n                if (!$util.isString(message.denotation))\r\n                    return \"denotation: string expected\";\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Creates a TypeProto message from a plain object. Also converts values to their respective internal types.\r\n         * @function fromObject\r\n         * @memberof onnx.TypeProto\r\n         * @static\r\n         * @param {Object.<string,*>} object Plain object\r\n         * @returns {onnx.TypeProto} TypeProto\r\n         */\r\n        TypeProto.fromObject = function fromObject(object) {\r\n            if (object instanceof $root.onnx.TypeProto)\r\n                return object;\r\n            var message = new $root.onnx.TypeProto();\r\n            if (object.tensorType != null) {\r\n                if (typeof object.tensorType !== \"object\")\r\n                    throw TypeError(\".onnx.TypeProto.tensorType: object expected\");\r\n                message.tensorType = $root.onnx.TypeProto.Tensor.fromObject(object.tensorType);\r\n            }\r\n            if (object.sequenceType != null) {\r\n                if (typeof object.sequenceType !== \"object\")\r\n                    throw TypeError(\".onnx.TypeProto.sequenceType: object expected\");\r\n                message.sequenceType = $root.onnx.TypeProto.Sequence.fromObject(object.sequenceType);\r\n            }\r\n            if (object.mapType != null) {\r\n                if (typeof object.mapType !== \"object\")\r\n                    throw TypeError(\".onnx.TypeProto.mapType: object expected\");\r\n                message.mapType = $root.onnx.TypeProto.Map.fromObject(object.mapType);\r\n            }\r\n            if (object.optionalType != null) {\r\n                if (typeof object.optionalType !== \"object\")\r\n                    throw TypeError(\".onnx.TypeProto.optionalType: object expected\");\r\n                message.optionalType = $root.onnx.TypeProto.Optional.fromObject(object.optionalType);\r\n            }\r\n            if (object.sparseTensorType != null) {\r\n                if (typeof object.sparseTensorType !== \"object\")\r\n                    throw TypeError(\".onnx.TypeProto.sparseTensorType: object expected\");\r\n                message.sparseTensorType = $root.onnx.TypeProto.SparseTensor.fromObject(object.sparseTensorType);\r\n            }\r\n            if (object.denotation != null)\r\n                message.denotation = String(object.denotation);\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Creates a plain object from a TypeProto message. Also converts values to other types if specified.\r\n         * @function toObject\r\n         * @memberof onnx.TypeProto\r\n         * @static\r\n         * @param {onnx.TypeProto} message TypeProto\r\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n         * @returns {Object.<string,*>} Plain object\r\n         */\r\n        TypeProto.toObject = function toObject(message, options) {\r\n            if (!options)\r\n                options = {};\r\n            var object = {};\r\n            if (options.defaults)\r\n                object.denotation = \"\";\r\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\r\n                object.tensorType = $root.onnx.TypeProto.Tensor.toObject(message.tensorType, options);\r\n                if (options.oneofs)\r\n                    object.value = \"tensorType\";\r\n            }\r\n            if (message.sequenceType != null && message.hasOwnProperty(\"sequenceType\")) {\r\n                object.sequenceType = $root.onnx.TypeProto.Sequence.toObject(message.sequenceType, options);\r\n                if (options.oneofs)\r\n                    object.value = \"sequenceType\";\r\n            }\r\n            if (message.mapType != null && message.hasOwnProperty(\"mapType\")) {\r\n                object.mapType = $root.onnx.TypeProto.Map.toObject(message.mapType, options);\r\n                if (options.oneofs)\r\n                    object.value = \"mapType\";\r\n            }\r\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\r\n                object.denotation = message.denotation;\r\n            if (message.sparseTensorType != null && message.hasOwnProperty(\"sparseTensorType\")) {\r\n                object.sparseTensorType = $root.onnx.TypeProto.SparseTensor.toObject(message.sparseTensorType, options);\r\n                if (options.oneofs)\r\n                    object.value = \"sparseTensorType\";\r\n            }\r\n            if (message.optionalType != null && message.hasOwnProperty(\"optionalType\")) {\r\n                object.optionalType = $root.onnx.TypeProto.Optional.toObject(message.optionalType, options);\r\n                if (options.oneofs)\r\n                    object.value = \"optionalType\";\r\n            }\r\n            return object;\r\n        };\r\n\r\n        /**\r\n         * Converts this TypeProto to JSON.\r\n         * @function toJSON\r\n         * @memberof onnx.TypeProto\r\n         * @instance\r\n         * @returns {Object.<string,*>} JSON object\r\n         */\r\n        TypeProto.prototype.toJSON = function toJSON() {\r\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n        };\r\n\r\n        /**\r\n         * Gets the default type url for TypeProto\r\n         * @function getTypeUrl\r\n         * @memberof onnx.TypeProto\r\n         * @static\r\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n         * @returns {string} The default type url\r\n         */\r\n        TypeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n            if (typeUrlPrefix === undefined) {\r\n                typeUrlPrefix = \"type.googleapis.com\";\r\n            }\r\n            return typeUrlPrefix + \"/onnx.TypeProto\";\r\n        };\r\n\r\n        TypeProto.Tensor = (function() {\r\n\r\n            /**\r\n             * Properties of a Tensor.\r\n             * @memberof onnx.TypeProto\r\n             * @interface ITensor\r\n             * @property {number|null} [elemType] Tensor elemType\r\n             * @property {onnx.ITensorShapeProto|null} [shape] Tensor shape\r\n             */\r\n\r\n            /**\r\n             * Constructs a new Tensor.\r\n             * @memberof onnx.TypeProto\r\n             * @classdesc Represents a Tensor.\r\n             * @implements ITensor\r\n             * @constructor\r\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\r\n             */\r\n            function Tensor(properties) {\r\n                if (properties)\r\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                        if (properties[keys[i]] != null)\r\n                            this[keys[i]] = properties[keys[i]];\r\n            }\r\n\r\n            /**\r\n             * Tensor elemType.\r\n             * @member {number} elemType\r\n             * @memberof onnx.TypeProto.Tensor\r\n             * @instance\r\n             */\r\n            Tensor.prototype.elemType = 0;\r\n\r\n            /**\r\n             * Tensor shape.\r\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\r\n             * @memberof onnx.TypeProto.Tensor\r\n             * @instance\r\n             */\r\n            Tensor.prototype.shape = null;\r\n\r\n            /**\r\n             * Creates a new Tensor instance using the specified properties.\r\n             * @function create\r\n             * @memberof onnx.TypeProto.Tensor\r\n             * @static\r\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\r\n             * @returns {onnx.TypeProto.Tensor} Tensor instance\r\n             */\r\n            Tensor.create = function create(properties) {\r\n                return new Tensor(properties);\r\n            };\r\n\r\n            /**\r\n             * Encodes the specified Tensor message. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\r\n             * @function encode\r\n             * @memberof onnx.TypeProto.Tensor\r\n             * @static\r\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            Tensor.encode = function encode(message, writer) {\r\n                if (!writer)\r\n                    writer = $Writer.create();\r\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\r\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\r\n                if (message.shape != null && Object.hasOwnProperty.call(message, \"shape\"))\r\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\r\n                return writer;\r\n            };\r\n\r\n            /**\r\n             * Encodes the specified Tensor message, length delimited. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\r\n             * @function encodeDelimited\r\n             * @memberof onnx.TypeProto.Tensor\r\n             * @static\r\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            Tensor.encodeDelimited = function encodeDelimited(message, writer) {\r\n                return this.encode(message, writer).ldelim();\r\n            };\r\n\r\n            /**\r\n             * Decodes a Tensor message from the specified reader or buffer.\r\n             * @function decode\r\n             * @memberof onnx.TypeProto.Tensor\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @param {number} [length] Message length if known beforehand\r\n             * @returns {onnx.TypeProto.Tensor} Tensor\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            Tensor.decode = function decode(reader, length) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = $Reader.create(reader);\r\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Tensor();\r\n                while (reader.pos < end) {\r\n                    var tag = reader.uint32();\r\n                    switch (tag >>> 3) {\r\n                    case 1: {\r\n                            message.elemType = reader.int32();\r\n                            break;\r\n                        }\r\n                    case 2: {\r\n                            message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\r\n                            break;\r\n                        }\r\n                    default:\r\n                        reader.skipType(tag & 7);\r\n                        break;\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n\r\n            /**\r\n             * Decodes a Tensor message from the specified reader or buffer, length delimited.\r\n             * @function decodeDelimited\r\n             * @memberof onnx.TypeProto.Tensor\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @returns {onnx.TypeProto.Tensor} Tensor\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            Tensor.decodeDelimited = function decodeDelimited(reader) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = new $Reader(reader);\r\n                return this.decode(reader, reader.uint32());\r\n            };\r\n\r\n            /**\r\n             * Verifies a Tensor message.\r\n             * @function verify\r\n             * @memberof onnx.TypeProto.Tensor\r\n             * @static\r\n             * @param {Object.<string,*>} message Plain object to verify\r\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            Tensor.verify = function verify(message) {\r\n                if (typeof message !== \"object\" || message === null)\r\n                    return \"object expected\";\r\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\r\n                    if (!$util.isInteger(message.elemType))\r\n                        return \"elemType: integer expected\";\r\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\r\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\r\n                    if (error)\r\n                        return \"shape.\" + error;\r\n                }\r\n                return null;\r\n            };\r\n\r\n            /**\r\n             * Creates a Tensor message from a plain object. Also converts values to their respective internal types.\r\n             * @function fromObject\r\n             * @memberof onnx.TypeProto.Tensor\r\n             * @static\r\n             * @param {Object.<string,*>} object Plain object\r\n             * @returns {onnx.TypeProto.Tensor} Tensor\r\n             */\r\n            Tensor.fromObject = function fromObject(object) {\r\n                if (object instanceof $root.onnx.TypeProto.Tensor)\r\n                    return object;\r\n                var message = new $root.onnx.TypeProto.Tensor();\r\n                if (object.elemType != null)\r\n                    message.elemType = object.elemType | 0;\r\n                if (object.shape != null) {\r\n                    if (typeof object.shape !== \"object\")\r\n                        throw TypeError(\".onnx.TypeProto.Tensor.shape: object expected\");\r\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\r\n                }\r\n                return message;\r\n            };\r\n\r\n            /**\r\n             * Creates a plain object from a Tensor message. Also converts values to other types if specified.\r\n             * @function toObject\r\n             * @memberof onnx.TypeProto.Tensor\r\n             * @static\r\n             * @param {onnx.TypeProto.Tensor} message Tensor\r\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n             * @returns {Object.<string,*>} Plain object\r\n             */\r\n            Tensor.toObject = function toObject(message, options) {\r\n                if (!options)\r\n                    options = {};\r\n                var object = {};\r\n                if (options.defaults) {\r\n                    object.elemType = 0;\r\n                    object.shape = null;\r\n                }\r\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\r\n                    object.elemType = message.elemType;\r\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\r\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\r\n                return object;\r\n            };\r\n\r\n            /**\r\n             * Converts this Tensor to JSON.\r\n             * @function toJSON\r\n             * @memberof onnx.TypeProto.Tensor\r\n             * @instance\r\n             * @returns {Object.<string,*>} JSON object\r\n             */\r\n            Tensor.prototype.toJSON = function toJSON() {\r\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n            };\r\n\r\n            /**\r\n             * Gets the default type url for Tensor\r\n             * @function getTypeUrl\r\n             * @memberof onnx.TypeProto.Tensor\r\n             * @static\r\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n             * @returns {string} The default type url\r\n             */\r\n            Tensor.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n                if (typeUrlPrefix === undefined) {\r\n                    typeUrlPrefix = \"type.googleapis.com\";\r\n                }\r\n                return typeUrlPrefix + \"/onnx.TypeProto.Tensor\";\r\n            };\r\n\r\n            return Tensor;\r\n        })();\r\n\r\n        TypeProto.Sequence = (function() {\r\n\r\n            /**\r\n             * Properties of a Sequence.\r\n             * @memberof onnx.TypeProto\r\n             * @interface ISequence\r\n             * @property {onnx.ITypeProto|null} [elemType] Sequence elemType\r\n             */\r\n\r\n            /**\r\n             * Constructs a new Sequence.\r\n             * @memberof onnx.TypeProto\r\n             * @classdesc Represents a Sequence.\r\n             * @implements ISequence\r\n             * @constructor\r\n             * @param {onnx.TypeProto.ISequence=} [properties] Properties to set\r\n             */\r\n            function Sequence(properties) {\r\n                if (properties)\r\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                        if (properties[keys[i]] != null)\r\n                            this[keys[i]] = properties[keys[i]];\r\n            }\r\n\r\n            /**\r\n             * Sequence elemType.\r\n             * @member {onnx.ITypeProto|null|undefined} elemType\r\n             * @memberof onnx.TypeProto.Sequence\r\n             * @instance\r\n             */\r\n            Sequence.prototype.elemType = null;\r\n\r\n            /**\r\n             * Creates a new Sequence instance using the specified properties.\r\n             * @function create\r\n             * @memberof onnx.TypeProto.Sequence\r\n             * @static\r\n             * @param {onnx.TypeProto.ISequence=} [properties] Properties to set\r\n             * @returns {onnx.TypeProto.Sequence} Sequence instance\r\n             */\r\n            Sequence.create = function create(properties) {\r\n                return new Sequence(properties);\r\n            };\r\n\r\n            /**\r\n             * Encodes the specified Sequence message. Does not implicitly {@link onnx.TypeProto.Sequence.verify|verify} messages.\r\n             * @function encode\r\n             * @memberof onnx.TypeProto.Sequence\r\n             * @static\r\n             * @param {onnx.TypeProto.ISequence} message Sequence message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            Sequence.encode = function encode(message, writer) {\r\n                if (!writer)\r\n                    writer = $Writer.create();\r\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\r\n                    $root.onnx.TypeProto.encode(message.elemType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\r\n                return writer;\r\n            };\r\n\r\n            /**\r\n             * Encodes the specified Sequence message, length delimited. Does not implicitly {@link onnx.TypeProto.Sequence.verify|verify} messages.\r\n             * @function encodeDelimited\r\n             * @memberof onnx.TypeProto.Sequence\r\n             * @static\r\n             * @param {onnx.TypeProto.ISequence} message Sequence message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            Sequence.encodeDelimited = function encodeDelimited(message, writer) {\r\n                return this.encode(message, writer).ldelim();\r\n            };\r\n\r\n            /**\r\n             * Decodes a Sequence message from the specified reader or buffer.\r\n             * @function decode\r\n             * @memberof onnx.TypeProto.Sequence\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @param {number} [length] Message length if known beforehand\r\n             * @returns {onnx.TypeProto.Sequence} Sequence\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            Sequence.decode = function decode(reader, length) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = $Reader.create(reader);\r\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Sequence();\r\n                while (reader.pos < end) {\r\n                    var tag = reader.uint32();\r\n                    switch (tag >>> 3) {\r\n                    case 1: {\r\n                            message.elemType = $root.onnx.TypeProto.decode(reader, reader.uint32());\r\n                            break;\r\n                        }\r\n                    default:\r\n                        reader.skipType(tag & 7);\r\n                        break;\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n\r\n            /**\r\n             * Decodes a Sequence message from the specified reader or buffer, length delimited.\r\n             * @function decodeDelimited\r\n             * @memberof onnx.TypeProto.Sequence\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @returns {onnx.TypeProto.Sequence} Sequence\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            Sequence.decodeDelimited = function decodeDelimited(reader) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = new $Reader(reader);\r\n                return this.decode(reader, reader.uint32());\r\n            };\r\n\r\n            /**\r\n             * Verifies a Sequence message.\r\n             * @function verify\r\n             * @memberof onnx.TypeProto.Sequence\r\n             * @static\r\n             * @param {Object.<string,*>} message Plain object to verify\r\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            Sequence.verify = function verify(message) {\r\n                if (typeof message !== \"object\" || message === null)\r\n                    return \"object expected\";\r\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\")) {\r\n                    var error = $root.onnx.TypeProto.verify(message.elemType);\r\n                    if (error)\r\n                        return \"elemType.\" + error;\r\n                }\r\n                return null;\r\n            };\r\n\r\n            /**\r\n             * Creates a Sequence message from a plain object. Also converts values to their respective internal types.\r\n             * @function fromObject\r\n             * @memberof onnx.TypeProto.Sequence\r\n             * @static\r\n             * @param {Object.<string,*>} object Plain object\r\n             * @returns {onnx.TypeProto.Sequence} Sequence\r\n             */\r\n            Sequence.fromObject = function fromObject(object) {\r\n                if (object instanceof $root.onnx.TypeProto.Sequence)\r\n                    return object;\r\n                var message = new $root.onnx.TypeProto.Sequence();\r\n                if (object.elemType != null) {\r\n                    if (typeof object.elemType !== \"object\")\r\n                        throw TypeError(\".onnx.TypeProto.Sequence.elemType: object expected\");\r\n                    message.elemType = $root.onnx.TypeProto.fromObject(object.elemType);\r\n                }\r\n                return message;\r\n            };\r\n\r\n            /**\r\n             * Creates a plain object from a Sequence message. Also converts values to other types if specified.\r\n             * @function toObject\r\n             * @memberof onnx.TypeProto.Sequence\r\n             * @static\r\n             * @param {onnx.TypeProto.Sequence} message Sequence\r\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n             * @returns {Object.<string,*>} Plain object\r\n             */\r\n            Sequence.toObject = function toObject(message, options) {\r\n                if (!options)\r\n                    options = {};\r\n                var object = {};\r\n                if (options.defaults)\r\n                    object.elemType = null;\r\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\r\n                    object.elemType = $root.onnx.TypeProto.toObject(message.elemType, options);\r\n                return object;\r\n            };\r\n\r\n            /**\r\n             * Converts this Sequence to JSON.\r\n             * @function toJSON\r\n             * @memberof onnx.TypeProto.Sequence\r\n             * @instance\r\n             * @returns {Object.<string,*>} JSON object\r\n             */\r\n            Sequence.prototype.toJSON = function toJSON() {\r\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n            };\r\n\r\n            /**\r\n             * Gets the default type url for Sequence\r\n             * @function getTypeUrl\r\n             * @memberof onnx.TypeProto.Sequence\r\n             * @static\r\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n             * @returns {string} The default type url\r\n             */\r\n            Sequence.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n                if (typeUrlPrefix === undefined) {\r\n                    typeUrlPrefix = \"type.googleapis.com\";\r\n                }\r\n                return typeUrlPrefix + \"/onnx.TypeProto.Sequence\";\r\n            };\r\n\r\n            return Sequence;\r\n        })();\r\n\r\n        TypeProto.Map = (function() {\r\n\r\n            /**\r\n             * Properties of a Map.\r\n             * @memberof onnx.TypeProto\r\n             * @interface IMap\r\n             * @property {number|null} [keyType] Map keyType\r\n             * @property {onnx.ITypeProto|null} [valueType] Map valueType\r\n             */\r\n\r\n            /**\r\n             * Constructs a new Map.\r\n             * @memberof onnx.TypeProto\r\n             * @classdesc Represents a Map.\r\n             * @implements IMap\r\n             * @constructor\r\n             * @param {onnx.TypeProto.IMap=} [properties] Properties to set\r\n             */\r\n            function Map(properties) {\r\n                if (properties)\r\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                        if (properties[keys[i]] != null)\r\n                            this[keys[i]] = properties[keys[i]];\r\n            }\r\n\r\n            /**\r\n             * Map keyType.\r\n             * @member {number} keyType\r\n             * @memberof onnx.TypeProto.Map\r\n             * @instance\r\n             */\r\n            Map.prototype.keyType = 0;\r\n\r\n            /**\r\n             * Map valueType.\r\n             * @member {onnx.ITypeProto|null|undefined} valueType\r\n             * @memberof onnx.TypeProto.Map\r\n             * @instance\r\n             */\r\n            Map.prototype.valueType = null;\r\n\r\n            /**\r\n             * Creates a new Map instance using the specified properties.\r\n             * @function create\r\n             * @memberof onnx.TypeProto.Map\r\n             * @static\r\n             * @param {onnx.TypeProto.IMap=} [properties] Properties to set\r\n             * @returns {onnx.TypeProto.Map} Map instance\r\n             */\r\n            Map.create = function create(properties) {\r\n                return new Map(properties);\r\n            };\r\n\r\n            /**\r\n             * Encodes the specified Map message. Does not implicitly {@link onnx.TypeProto.Map.verify|verify} messages.\r\n             * @function encode\r\n             * @memberof onnx.TypeProto.Map\r\n             * @static\r\n             * @param {onnx.TypeProto.IMap} message Map message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            Map.encode = function encode(message, writer) {\r\n                if (!writer)\r\n                    writer = $Writer.create();\r\n                if (message.keyType != null && Object.hasOwnProperty.call(message, \"keyType\"))\r\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.keyType);\r\n                if (message.valueType != null && Object.hasOwnProperty.call(message, \"valueType\"))\r\n                    $root.onnx.TypeProto.encode(message.valueType, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\r\n                return writer;\r\n            };\r\n\r\n            /**\r\n             * Encodes the specified Map message, length delimited. Does not implicitly {@link onnx.TypeProto.Map.verify|verify} messages.\r\n             * @function encodeDelimited\r\n             * @memberof onnx.TypeProto.Map\r\n             * @static\r\n             * @param {onnx.TypeProto.IMap} message Map message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            Map.encodeDelimited = function encodeDelimited(message, writer) {\r\n                return this.encode(message, writer).ldelim();\r\n            };\r\n\r\n            /**\r\n             * Decodes a Map message from the specified reader or buffer.\r\n             * @function decode\r\n             * @memberof onnx.TypeProto.Map\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @param {number} [length] Message length if known beforehand\r\n             * @returns {onnx.TypeProto.Map} Map\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            Map.decode = function decode(reader, length) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = $Reader.create(reader);\r\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Map();\r\n                while (reader.pos < end) {\r\n                    var tag = reader.uint32();\r\n                    switch (tag >>> 3) {\r\n                    case 1: {\r\n                            message.keyType = reader.int32();\r\n                            break;\r\n                        }\r\n                    case 2: {\r\n                            message.valueType = $root.onnx.TypeProto.decode(reader, reader.uint32());\r\n                            break;\r\n                        }\r\n                    default:\r\n                        reader.skipType(tag & 7);\r\n                        break;\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n\r\n            /**\r\n             * Decodes a Map message from the specified reader or buffer, length delimited.\r\n             * @function decodeDelimited\r\n             * @memberof onnx.TypeProto.Map\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @returns {onnx.TypeProto.Map} Map\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            Map.decodeDelimited = function decodeDelimited(reader) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = new $Reader(reader);\r\n                return this.decode(reader, reader.uint32());\r\n            };\r\n\r\n            /**\r\n             * Verifies a Map message.\r\n             * @function verify\r\n             * @memberof onnx.TypeProto.Map\r\n             * @static\r\n             * @param {Object.<string,*>} message Plain object to verify\r\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            Map.verify = function verify(message) {\r\n                if (typeof message !== \"object\" || message === null)\r\n                    return \"object expected\";\r\n                if (message.keyType != null && message.hasOwnProperty(\"keyType\"))\r\n                    if (!$util.isInteger(message.keyType))\r\n                        return \"keyType: integer expected\";\r\n                if (message.valueType != null && message.hasOwnProperty(\"valueType\")) {\r\n                    var error = $root.onnx.TypeProto.verify(message.valueType);\r\n                    if (error)\r\n                        return \"valueType.\" + error;\r\n                }\r\n                return null;\r\n            };\r\n\r\n            /**\r\n             * Creates a Map message from a plain object. Also converts values to their respective internal types.\r\n             * @function fromObject\r\n             * @memberof onnx.TypeProto.Map\r\n             * @static\r\n             * @param {Object.<string,*>} object Plain object\r\n             * @returns {onnx.TypeProto.Map} Map\r\n             */\r\n            Map.fromObject = function fromObject(object) {\r\n                if (object instanceof $root.onnx.TypeProto.Map)\r\n                    return object;\r\n                var message = new $root.onnx.TypeProto.Map();\r\n                if (object.keyType != null)\r\n                    message.keyType = object.keyType | 0;\r\n                if (object.valueType != null) {\r\n                    if (typeof object.valueType !== \"object\")\r\n                        throw TypeError(\".onnx.TypeProto.Map.valueType: object expected\");\r\n                    message.valueType = $root.onnx.TypeProto.fromObject(object.valueType);\r\n                }\r\n                return message;\r\n            };\r\n\r\n            /**\r\n             * Creates a plain object from a Map message. Also converts values to other types if specified.\r\n             * @function toObject\r\n             * @memberof onnx.TypeProto.Map\r\n             * @static\r\n             * @param {onnx.TypeProto.Map} message Map\r\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n             * @returns {Object.<string,*>} Plain object\r\n             */\r\n            Map.toObject = function toObject(message, options) {\r\n                if (!options)\r\n                    options = {};\r\n                var object = {};\r\n                if (options.defaults) {\r\n                    object.keyType = 0;\r\n                    object.valueType = null;\r\n                }\r\n                if (message.keyType != null && message.hasOwnProperty(\"keyType\"))\r\n                    object.keyType = message.keyType;\r\n                if (message.valueType != null && message.hasOwnProperty(\"valueType\"))\r\n                    object.valueType = $root.onnx.TypeProto.toObject(message.valueType, options);\r\n                return object;\r\n            };\r\n\r\n            /**\r\n             * Converts this Map to JSON.\r\n             * @function toJSON\r\n             * @memberof onnx.TypeProto.Map\r\n             * @instance\r\n             * @returns {Object.<string,*>} JSON object\r\n             */\r\n            Map.prototype.toJSON = function toJSON() {\r\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n            };\r\n\r\n            /**\r\n             * Gets the default type url for Map\r\n             * @function getTypeUrl\r\n             * @memberof onnx.TypeProto.Map\r\n             * @static\r\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n             * @returns {string} The default type url\r\n             */\r\n            Map.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n                if (typeUrlPrefix === undefined) {\r\n                    typeUrlPrefix = \"type.googleapis.com\";\r\n                }\r\n                return typeUrlPrefix + \"/onnx.TypeProto.Map\";\r\n            };\r\n\r\n            return Map;\r\n        })();\r\n\r\n        TypeProto.Optional = (function() {\r\n\r\n            /**\r\n             * Properties of an Optional.\r\n             * @memberof onnx.TypeProto\r\n             * @interface IOptional\r\n             * @property {onnx.ITypeProto|null} [elemType] Optional elemType\r\n             */\r\n\r\n            /**\r\n             * Constructs a new Optional.\r\n             * @memberof onnx.TypeProto\r\n             * @classdesc Represents an Optional.\r\n             * @implements IOptional\r\n             * @constructor\r\n             * @param {onnx.TypeProto.IOptional=} [properties] Properties to set\r\n             */\r\n            function Optional(properties) {\r\n                if (properties)\r\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                        if (properties[keys[i]] != null)\r\n                            this[keys[i]] = properties[keys[i]];\r\n            }\r\n\r\n            /**\r\n             * Optional elemType.\r\n             * @member {onnx.ITypeProto|null|undefined} elemType\r\n             * @memberof onnx.TypeProto.Optional\r\n             * @instance\r\n             */\r\n            Optional.prototype.elemType = null;\r\n\r\n            /**\r\n             * Creates a new Optional instance using the specified properties.\r\n             * @function create\r\n             * @memberof onnx.TypeProto.Optional\r\n             * @static\r\n             * @param {onnx.TypeProto.IOptional=} [properties] Properties to set\r\n             * @returns {onnx.TypeProto.Optional} Optional instance\r\n             */\r\n            Optional.create = function create(properties) {\r\n                return new Optional(properties);\r\n            };\r\n\r\n            /**\r\n             * Encodes the specified Optional message. Does not implicitly {@link onnx.TypeProto.Optional.verify|verify} messages.\r\n             * @function encode\r\n             * @memberof onnx.TypeProto.Optional\r\n             * @static\r\n             * @param {onnx.TypeProto.IOptional} message Optional message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            Optional.encode = function encode(message, writer) {\r\n                if (!writer)\r\n                    writer = $Writer.create();\r\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\r\n                    $root.onnx.TypeProto.encode(message.elemType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\r\n                return writer;\r\n            };\r\n\r\n            /**\r\n             * Encodes the specified Optional message, length delimited. Does not implicitly {@link onnx.TypeProto.Optional.verify|verify} messages.\r\n             * @function encodeDelimited\r\n             * @memberof onnx.TypeProto.Optional\r\n             * @static\r\n             * @param {onnx.TypeProto.IOptional} message Optional message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            Optional.encodeDelimited = function encodeDelimited(message, writer) {\r\n                return this.encode(message, writer).ldelim();\r\n            };\r\n\r\n            /**\r\n             * Decodes an Optional message from the specified reader or buffer.\r\n             * @function decode\r\n             * @memberof onnx.TypeProto.Optional\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @param {number} [length] Message length if known beforehand\r\n             * @returns {onnx.TypeProto.Optional} Optional\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            Optional.decode = function decode(reader, length) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = $Reader.create(reader);\r\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Optional();\r\n                while (reader.pos < end) {\r\n                    var tag = reader.uint32();\r\n                    switch (tag >>> 3) {\r\n                    case 1: {\r\n                            message.elemType = $root.onnx.TypeProto.decode(reader, reader.uint32());\r\n                            break;\r\n                        }\r\n                    default:\r\n                        reader.skipType(tag & 7);\r\n                        break;\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n\r\n            /**\r\n             * Decodes an Optional message from the specified reader or buffer, length delimited.\r\n             * @function decodeDelimited\r\n             * @memberof onnx.TypeProto.Optional\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @returns {onnx.TypeProto.Optional} Optional\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            Optional.decodeDelimited = function decodeDelimited(reader) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = new $Reader(reader);\r\n                return this.decode(reader, reader.uint32());\r\n            };\r\n\r\n            /**\r\n             * Verifies an Optional message.\r\n             * @function verify\r\n             * @memberof onnx.TypeProto.Optional\r\n             * @static\r\n             * @param {Object.<string,*>} message Plain object to verify\r\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            Optional.verify = function verify(message) {\r\n                if (typeof message !== \"object\" || message === null)\r\n                    return \"object expected\";\r\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\")) {\r\n                    var error = $root.onnx.TypeProto.verify(message.elemType);\r\n                    if (error)\r\n                        return \"elemType.\" + error;\r\n                }\r\n                return null;\r\n            };\r\n\r\n            /**\r\n             * Creates an Optional message from a plain object. Also converts values to their respective internal types.\r\n             * @function fromObject\r\n             * @memberof onnx.TypeProto.Optional\r\n             * @static\r\n             * @param {Object.<string,*>} object Plain object\r\n             * @returns {onnx.TypeProto.Optional} Optional\r\n             */\r\n            Optional.fromObject = function fromObject(object) {\r\n                if (object instanceof $root.onnx.TypeProto.Optional)\r\n                    return object;\r\n                var message = new $root.onnx.TypeProto.Optional();\r\n                if (object.elemType != null) {\r\n                    if (typeof object.elemType !== \"object\")\r\n                        throw TypeError(\".onnx.TypeProto.Optional.elemType: object expected\");\r\n                    message.elemType = $root.onnx.TypeProto.fromObject(object.elemType);\r\n                }\r\n                return message;\r\n            };\r\n\r\n            /**\r\n             * Creates a plain object from an Optional message. Also converts values to other types if specified.\r\n             * @function toObject\r\n             * @memberof onnx.TypeProto.Optional\r\n             * @static\r\n             * @param {onnx.TypeProto.Optional} message Optional\r\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n             * @returns {Object.<string,*>} Plain object\r\n             */\r\n            Optional.toObject = function toObject(message, options) {\r\n                if (!options)\r\n                    options = {};\r\n                var object = {};\r\n                if (options.defaults)\r\n                    object.elemType = null;\r\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\r\n                    object.elemType = $root.onnx.TypeProto.toObject(message.elemType, options);\r\n                return object;\r\n            };\r\n\r\n            /**\r\n             * Converts this Optional to JSON.\r\n             * @function toJSON\r\n             * @memberof onnx.TypeProto.Optional\r\n             * @instance\r\n             * @returns {Object.<string,*>} JSON object\r\n             */\r\n            Optional.prototype.toJSON = function toJSON() {\r\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n            };\r\n\r\n            /**\r\n             * Gets the default type url for Optional\r\n             * @function getTypeUrl\r\n             * @memberof onnx.TypeProto.Optional\r\n             * @static\r\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n             * @returns {string} The default type url\r\n             */\r\n            Optional.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n                if (typeUrlPrefix === undefined) {\r\n                    typeUrlPrefix = \"type.googleapis.com\";\r\n                }\r\n                return typeUrlPrefix + \"/onnx.TypeProto.Optional\";\r\n            };\r\n\r\n            return Optional;\r\n        })();\r\n\r\n        TypeProto.SparseTensor = (function() {\r\n\r\n            /**\r\n             * Properties of a SparseTensor.\r\n             * @memberof onnx.TypeProto\r\n             * @interface ISparseTensor\r\n             * @property {number|null} [elemType] SparseTensor elemType\r\n             * @property {onnx.ITensorShapeProto|null} [shape] SparseTensor shape\r\n             */\r\n\r\n            /**\r\n             * Constructs a new SparseTensor.\r\n             * @memberof onnx.TypeProto\r\n             * @classdesc Represents a SparseTensor.\r\n             * @implements ISparseTensor\r\n             * @constructor\r\n             * @param {onnx.TypeProto.ISparseTensor=} [properties] Properties to set\r\n             */\r\n            function SparseTensor(properties) {\r\n                if (properties)\r\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                        if (properties[keys[i]] != null)\r\n                            this[keys[i]] = properties[keys[i]];\r\n            }\r\n\r\n            /**\r\n             * SparseTensor elemType.\r\n             * @member {number} elemType\r\n             * @memberof onnx.TypeProto.SparseTensor\r\n             * @instance\r\n             */\r\n            SparseTensor.prototype.elemType = 0;\r\n\r\n            /**\r\n             * SparseTensor shape.\r\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\r\n             * @memberof onnx.TypeProto.SparseTensor\r\n             * @instance\r\n             */\r\n            SparseTensor.prototype.shape = null;\r\n\r\n            /**\r\n             * Creates a new SparseTensor instance using the specified properties.\r\n             * @function create\r\n             * @memberof onnx.TypeProto.SparseTensor\r\n             * @static\r\n             * @param {onnx.TypeProto.ISparseTensor=} [properties] Properties to set\r\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor instance\r\n             */\r\n            SparseTensor.create = function create(properties) {\r\n                return new SparseTensor(properties);\r\n            };\r\n\r\n            /**\r\n             * Encodes the specified SparseTensor message. Does not implicitly {@link onnx.TypeProto.SparseTensor.verify|verify} messages.\r\n             * @function encode\r\n             * @memberof onnx.TypeProto.SparseTensor\r\n             * @static\r\n             * @param {onnx.TypeProto.ISparseTensor} message SparseTensor message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            SparseTensor.encode = function encode(message, writer) {\r\n                if (!writer)\r\n                    writer = $Writer.create();\r\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\r\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\r\n                if (message.shape != null && Object.hasOwnProperty.call(message, \"shape\"))\r\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\r\n                return writer;\r\n            };\r\n\r\n            /**\r\n             * Encodes the specified SparseTensor message, length delimited. Does not implicitly {@link onnx.TypeProto.SparseTensor.verify|verify} messages.\r\n             * @function encodeDelimited\r\n             * @memberof onnx.TypeProto.SparseTensor\r\n             * @static\r\n             * @param {onnx.TypeProto.ISparseTensor} message SparseTensor message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            SparseTensor.encodeDelimited = function encodeDelimited(message, writer) {\r\n                return this.encode(message, writer).ldelim();\r\n            };\r\n\r\n            /**\r\n             * Decodes a SparseTensor message from the specified reader or buffer.\r\n             * @function decode\r\n             * @memberof onnx.TypeProto.SparseTensor\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @param {number} [length] Message length if known beforehand\r\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            SparseTensor.decode = function decode(reader, length) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = $Reader.create(reader);\r\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.SparseTensor();\r\n                while (reader.pos < end) {\r\n                    var tag = reader.uint32();\r\n                    switch (tag >>> 3) {\r\n                    case 1: {\r\n                            message.elemType = reader.int32();\r\n                            break;\r\n                        }\r\n                    case 2: {\r\n                            message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\r\n                            break;\r\n                        }\r\n                    default:\r\n                        reader.skipType(tag & 7);\r\n                        break;\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n\r\n            /**\r\n             * Decodes a SparseTensor message from the specified reader or buffer, length delimited.\r\n             * @function decodeDelimited\r\n             * @memberof onnx.TypeProto.SparseTensor\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            SparseTensor.decodeDelimited = function decodeDelimited(reader) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = new $Reader(reader);\r\n                return this.decode(reader, reader.uint32());\r\n            };\r\n\r\n            /**\r\n             * Verifies a SparseTensor message.\r\n             * @function verify\r\n             * @memberof onnx.TypeProto.SparseTensor\r\n             * @static\r\n             * @param {Object.<string,*>} message Plain object to verify\r\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            SparseTensor.verify = function verify(message) {\r\n                if (typeof message !== \"object\" || message === null)\r\n                    return \"object expected\";\r\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\r\n                    if (!$util.isInteger(message.elemType))\r\n                        return \"elemType: integer expected\";\r\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\r\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\r\n                    if (error)\r\n                        return \"shape.\" + error;\r\n                }\r\n                return null;\r\n            };\r\n\r\n            /**\r\n             * Creates a SparseTensor message from a plain object. Also converts values to their respective internal types.\r\n             * @function fromObject\r\n             * @memberof onnx.TypeProto.SparseTensor\r\n             * @static\r\n             * @param {Object.<string,*>} object Plain object\r\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor\r\n             */\r\n            SparseTensor.fromObject = function fromObject(object) {\r\n                if (object instanceof $root.onnx.TypeProto.SparseTensor)\r\n                    return object;\r\n                var message = new $root.onnx.TypeProto.SparseTensor();\r\n                if (object.elemType != null)\r\n                    message.elemType = object.elemType | 0;\r\n                if (object.shape != null) {\r\n                    if (typeof object.shape !== \"object\")\r\n                        throw TypeError(\".onnx.TypeProto.SparseTensor.shape: object expected\");\r\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\r\n                }\r\n                return message;\r\n            };\r\n\r\n            /**\r\n             * Creates a plain object from a SparseTensor message. Also converts values to other types if specified.\r\n             * @function toObject\r\n             * @memberof onnx.TypeProto.SparseTensor\r\n             * @static\r\n             * @param {onnx.TypeProto.SparseTensor} message SparseTensor\r\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n             * @returns {Object.<string,*>} Plain object\r\n             */\r\n            SparseTensor.toObject = function toObject(message, options) {\r\n                if (!options)\r\n                    options = {};\r\n                var object = {};\r\n                if (options.defaults) {\r\n                    object.elemType = 0;\r\n                    object.shape = null;\r\n                }\r\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\r\n                    object.elemType = message.elemType;\r\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\r\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\r\n                return object;\r\n            };\r\n\r\n            /**\r\n             * Converts this SparseTensor to JSON.\r\n             * @function toJSON\r\n             * @memberof onnx.TypeProto.SparseTensor\r\n             * @instance\r\n             * @returns {Object.<string,*>} JSON object\r\n             */\r\n            SparseTensor.prototype.toJSON = function toJSON() {\r\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n            };\r\n\r\n            /**\r\n             * Gets the default type url for SparseTensor\r\n             * @function getTypeUrl\r\n             * @memberof onnx.TypeProto.SparseTensor\r\n             * @static\r\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n             * @returns {string} The default type url\r\n             */\r\n            SparseTensor.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n                if (typeUrlPrefix === undefined) {\r\n                    typeUrlPrefix = \"type.googleapis.com\";\r\n                }\r\n                return typeUrlPrefix + \"/onnx.TypeProto.SparseTensor\";\r\n            };\r\n\r\n            return SparseTensor;\r\n        })();\r\n\r\n        return TypeProto;\r\n    })();\r\n\r\n    onnx.OperatorSetIdProto = (function() {\r\n\r\n        /**\r\n         * Properties of an OperatorSetIdProto.\r\n         * @memberof onnx\r\n         * @interface IOperatorSetIdProto\r\n         * @property {string|null} [domain] OperatorSetIdProto domain\r\n         * @property {number|Long|null} [version] OperatorSetIdProto version\r\n         */\r\n\r\n        /**\r\n         * Constructs a new OperatorSetIdProto.\r\n         * @memberof onnx\r\n         * @classdesc Represents an OperatorSetIdProto.\r\n         * @implements IOperatorSetIdProto\r\n         * @constructor\r\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\r\n         */\r\n        function OperatorSetIdProto(properties) {\r\n            if (properties)\r\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                    if (properties[keys[i]] != null)\r\n                        this[keys[i]] = properties[keys[i]];\r\n        }\r\n\r\n        /**\r\n         * OperatorSetIdProto domain.\r\n         * @member {string} domain\r\n         * @memberof onnx.OperatorSetIdProto\r\n         * @instance\r\n         */\r\n        OperatorSetIdProto.prototype.domain = \"\";\r\n\r\n        /**\r\n         * OperatorSetIdProto version.\r\n         * @member {number|Long} version\r\n         * @memberof onnx.OperatorSetIdProto\r\n         * @instance\r\n         */\r\n        OperatorSetIdProto.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\r\n\r\n        /**\r\n         * Creates a new OperatorSetIdProto instance using the specified properties.\r\n         * @function create\r\n         * @memberof onnx.OperatorSetIdProto\r\n         * @static\r\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\r\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto instance\r\n         */\r\n        OperatorSetIdProto.create = function create(properties) {\r\n            return new OperatorSetIdProto(properties);\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified OperatorSetIdProto message. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\r\n         * @function encode\r\n         * @memberof onnx.OperatorSetIdProto\r\n         * @static\r\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        OperatorSetIdProto.encode = function encode(message, writer) {\r\n            if (!writer)\r\n                writer = $Writer.create();\r\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\r\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.domain);\r\n            if (message.version != null && Object.hasOwnProperty.call(message, \"version\"))\r\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.version);\r\n            return writer;\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified OperatorSetIdProto message, length delimited. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\r\n         * @function encodeDelimited\r\n         * @memberof onnx.OperatorSetIdProto\r\n         * @static\r\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        OperatorSetIdProto.encodeDelimited = function encodeDelimited(message, writer) {\r\n            return this.encode(message, writer).ldelim();\r\n        };\r\n\r\n        /**\r\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer.\r\n         * @function decode\r\n         * @memberof onnx.OperatorSetIdProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @param {number} [length] Message length if known beforehand\r\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        OperatorSetIdProto.decode = function decode(reader, length) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = $Reader.create(reader);\r\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.OperatorSetIdProto();\r\n            while (reader.pos < end) {\r\n                var tag = reader.uint32();\r\n                switch (tag >>> 3) {\r\n                case 1: {\r\n                        message.domain = reader.string();\r\n                        break;\r\n                    }\r\n                case 2: {\r\n                        message.version = reader.int64();\r\n                        break;\r\n                    }\r\n                default:\r\n                    reader.skipType(tag & 7);\r\n                    break;\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer, length delimited.\r\n         * @function decodeDelimited\r\n         * @memberof onnx.OperatorSetIdProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        OperatorSetIdProto.decodeDelimited = function decodeDelimited(reader) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = new $Reader(reader);\r\n            return this.decode(reader, reader.uint32());\r\n        };\r\n\r\n        /**\r\n         * Verifies an OperatorSetIdProto message.\r\n         * @function verify\r\n         * @memberof onnx.OperatorSetIdProto\r\n         * @static\r\n         * @param {Object.<string,*>} message Plain object to verify\r\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n         */\r\n        OperatorSetIdProto.verify = function verify(message) {\r\n            if (typeof message !== \"object\" || message === null)\r\n                return \"object expected\";\r\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\r\n                if (!$util.isString(message.domain))\r\n                    return \"domain: string expected\";\r\n            if (message.version != null && message.hasOwnProperty(\"version\"))\r\n                if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))\r\n                    return \"version: integer|Long expected\";\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Creates an OperatorSetIdProto message from a plain object. Also converts values to their respective internal types.\r\n         * @function fromObject\r\n         * @memberof onnx.OperatorSetIdProto\r\n         * @static\r\n         * @param {Object.<string,*>} object Plain object\r\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\r\n         */\r\n        OperatorSetIdProto.fromObject = function fromObject(object) {\r\n            if (object instanceof $root.onnx.OperatorSetIdProto)\r\n                return object;\r\n            var message = new $root.onnx.OperatorSetIdProto();\r\n            if (object.domain != null)\r\n                message.domain = String(object.domain);\r\n            if (object.version != null)\r\n                if ($util.Long)\r\n                    (message.version = $util.Long.fromValue(object.version)).unsigned = false;\r\n                else if (typeof object.version === \"string\")\r\n                    message.version = parseInt(object.version, 10);\r\n                else if (typeof object.version === \"number\")\r\n                    message.version = object.version;\r\n                else if (typeof object.version === \"object\")\r\n                    message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Creates a plain object from an OperatorSetIdProto message. Also converts values to other types if specified.\r\n         * @function toObject\r\n         * @memberof onnx.OperatorSetIdProto\r\n         * @static\r\n         * @param {onnx.OperatorSetIdProto} message OperatorSetIdProto\r\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n         * @returns {Object.<string,*>} Plain object\r\n         */\r\n        OperatorSetIdProto.toObject = function toObject(message, options) {\r\n            if (!options)\r\n                options = {};\r\n            var object = {};\r\n            if (options.defaults) {\r\n                object.domain = \"\";\r\n                if ($util.Long) {\r\n                    var long = new $util.Long(0, 0, false);\r\n                    object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\r\n                } else\r\n                    object.version = options.longs === String ? \"0\" : 0;\r\n            }\r\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\r\n                object.domain = message.domain;\r\n            if (message.version != null && message.hasOwnProperty(\"version\"))\r\n                if (typeof message.version === \"number\")\r\n                    object.version = options.longs === String ? String(message.version) : message.version;\r\n                else\r\n                    object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;\r\n            return object;\r\n        };\r\n\r\n        /**\r\n         * Converts this OperatorSetIdProto to JSON.\r\n         * @function toJSON\r\n         * @memberof onnx.OperatorSetIdProto\r\n         * @instance\r\n         * @returns {Object.<string,*>} JSON object\r\n         */\r\n        OperatorSetIdProto.prototype.toJSON = function toJSON() {\r\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n        };\r\n\r\n        /**\r\n         * Gets the default type url for OperatorSetIdProto\r\n         * @function getTypeUrl\r\n         * @memberof onnx.OperatorSetIdProto\r\n         * @static\r\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n         * @returns {string} The default type url\r\n         */\r\n        OperatorSetIdProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n            if (typeUrlPrefix === undefined) {\r\n                typeUrlPrefix = \"type.googleapis.com\";\r\n            }\r\n            return typeUrlPrefix + \"/onnx.OperatorSetIdProto\";\r\n        };\r\n\r\n        return OperatorSetIdProto;\r\n    })();\r\n\r\n    /**\r\n     * OperatorStatus enum.\r\n     * @name onnx.OperatorStatus\r\n     * @enum {number}\r\n     * @property {number} EXPERIMENTAL=0 EXPERIMENTAL value\r\n     * @property {number} STABLE=1 STABLE value\r\n     */\r\n    onnx.OperatorStatus = (function() {\r\n        var valuesById = {}, values = Object.create(valuesById);\r\n        values[valuesById[0] = \"EXPERIMENTAL\"] = 0;\r\n        values[valuesById[1] = \"STABLE\"] = 1;\r\n        return values;\r\n    })();\r\n\r\n    onnx.FunctionProto = (function() {\r\n\r\n        /**\r\n         * Properties of a FunctionProto.\r\n         * @memberof onnx\r\n         * @interface IFunctionProto\r\n         * @property {string|null} [name] FunctionProto name\r\n         * @property {Array.<string>|null} [input] FunctionProto input\r\n         * @property {Array.<string>|null} [output] FunctionProto output\r\n         * @property {Array.<string>|null} [attribute] FunctionProto attribute\r\n         * @property {Array.<onnx.IAttributeProto>|null} [attributeProto] FunctionProto attributeProto\r\n         * @property {Array.<onnx.INodeProto>|null} [node] FunctionProto node\r\n         * @property {string|null} [docString] FunctionProto docString\r\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] FunctionProto opsetImport\r\n         * @property {string|null} [domain] FunctionProto domain\r\n         */\r\n\r\n        /**\r\n         * Constructs a new FunctionProto.\r\n         * @memberof onnx\r\n         * @classdesc Represents a FunctionProto.\r\n         * @implements IFunctionProto\r\n         * @constructor\r\n         * @param {onnx.IFunctionProto=} [properties] Properties to set\r\n         */\r\n        function FunctionProto(properties) {\r\n            this.input = [];\r\n            this.output = [];\r\n            this.attribute = [];\r\n            this.attributeProto = [];\r\n            this.node = [];\r\n            this.opsetImport = [];\r\n            if (properties)\r\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                    if (properties[keys[i]] != null)\r\n                        this[keys[i]] = properties[keys[i]];\r\n        }\r\n\r\n        /**\r\n         * FunctionProto name.\r\n         * @member {string} name\r\n         * @memberof onnx.FunctionProto\r\n         * @instance\r\n         */\r\n        FunctionProto.prototype.name = \"\";\r\n\r\n        /**\r\n         * FunctionProto input.\r\n         * @member {Array.<string>} input\r\n         * @memberof onnx.FunctionProto\r\n         * @instance\r\n         */\r\n        FunctionProto.prototype.input = $util.emptyArray;\r\n\r\n        /**\r\n         * FunctionProto output.\r\n         * @member {Array.<string>} output\r\n         * @memberof onnx.FunctionProto\r\n         * @instance\r\n         */\r\n        FunctionProto.prototype.output = $util.emptyArray;\r\n\r\n        /**\r\n         * FunctionProto attribute.\r\n         * @member {Array.<string>} attribute\r\n         * @memberof onnx.FunctionProto\r\n         * @instance\r\n         */\r\n        FunctionProto.prototype.attribute = $util.emptyArray;\r\n\r\n        /**\r\n         * FunctionProto attributeProto.\r\n         * @member {Array.<onnx.IAttributeProto>} attributeProto\r\n         * @memberof onnx.FunctionProto\r\n         * @instance\r\n         */\r\n        FunctionProto.prototype.attributeProto = $util.emptyArray;\r\n\r\n        /**\r\n         * FunctionProto node.\r\n         * @member {Array.<onnx.INodeProto>} node\r\n         * @memberof onnx.FunctionProto\r\n         * @instance\r\n         */\r\n        FunctionProto.prototype.node = $util.emptyArray;\r\n\r\n        /**\r\n         * FunctionProto docString.\r\n         * @member {string} docString\r\n         * @memberof onnx.FunctionProto\r\n         * @instance\r\n         */\r\n        FunctionProto.prototype.docString = \"\";\r\n\r\n        /**\r\n         * FunctionProto opsetImport.\r\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\r\n         * @memberof onnx.FunctionProto\r\n         * @instance\r\n         */\r\n        FunctionProto.prototype.opsetImport = $util.emptyArray;\r\n\r\n        /**\r\n         * FunctionProto domain.\r\n         * @member {string} domain\r\n         * @memberof onnx.FunctionProto\r\n         * @instance\r\n         */\r\n        FunctionProto.prototype.domain = \"\";\r\n\r\n        /**\r\n         * Creates a new FunctionProto instance using the specified properties.\r\n         * @function create\r\n         * @memberof onnx.FunctionProto\r\n         * @static\r\n         * @param {onnx.IFunctionProto=} [properties] Properties to set\r\n         * @returns {onnx.FunctionProto} FunctionProto instance\r\n         */\r\n        FunctionProto.create = function create(properties) {\r\n            return new FunctionProto(properties);\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified FunctionProto message. Does not implicitly {@link onnx.FunctionProto.verify|verify} messages.\r\n         * @function encode\r\n         * @memberof onnx.FunctionProto\r\n         * @static\r\n         * @param {onnx.IFunctionProto} message FunctionProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        FunctionProto.encode = function encode(message, writer) {\r\n            if (!writer)\r\n                writer = $Writer.create();\r\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\r\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\r\n            if (message.input != null && message.input.length)\r\n                for (var i = 0; i < message.input.length; ++i)\r\n                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.input[i]);\r\n            if (message.output != null && message.output.length)\r\n                for (var i = 0; i < message.output.length; ++i)\r\n                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.output[i]);\r\n            if (message.attribute != null && message.attribute.length)\r\n                for (var i = 0; i < message.attribute.length; ++i)\r\n                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.attribute[i]);\r\n            if (message.node != null && message.node.length)\r\n                for (var i = 0; i < message.node.length; ++i)\r\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\r\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\r\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.docString);\r\n            if (message.opsetImport != null && message.opsetImport.length)\r\n                for (var i = 0; i < message.opsetImport.length; ++i)\r\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\r\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\r\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.domain);\r\n            if (message.attributeProto != null && message.attributeProto.length)\r\n                for (var i = 0; i < message.attributeProto.length; ++i)\r\n                    $root.onnx.AttributeProto.encode(message.attributeProto[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\r\n            return writer;\r\n        };\r\n\r\n        /**\r\n         * Encodes the specified FunctionProto message, length delimited. Does not implicitly {@link onnx.FunctionProto.verify|verify} messages.\r\n         * @function encodeDelimited\r\n         * @memberof onnx.FunctionProto\r\n         * @static\r\n         * @param {onnx.IFunctionProto} message FunctionProto message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        FunctionProto.encodeDelimited = function encodeDelimited(message, writer) {\r\n            return this.encode(message, writer).ldelim();\r\n        };\r\n\r\n        /**\r\n         * Decodes a FunctionProto message from the specified reader or buffer.\r\n         * @function decode\r\n         * @memberof onnx.FunctionProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @param {number} [length] Message length if known beforehand\r\n         * @returns {onnx.FunctionProto} FunctionProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        FunctionProto.decode = function decode(reader, length) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = $Reader.create(reader);\r\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.FunctionProto();\r\n            while (reader.pos < end) {\r\n                var tag = reader.uint32();\r\n                switch (tag >>> 3) {\r\n                case 1: {\r\n                        message.name = reader.string();\r\n                        break;\r\n                    }\r\n                case 4: {\r\n                        if (!(message.input && message.input.length))\r\n                            message.input = [];\r\n                        message.input.push(reader.string());\r\n                        break;\r\n                    }\r\n                case 5: {\r\n                        if (!(message.output && message.output.length))\r\n                            message.output = [];\r\n                        message.output.push(reader.string());\r\n                        break;\r\n                    }\r\n                case 6: {\r\n                        if (!(message.attribute && message.attribute.length))\r\n                            message.attribute = [];\r\n                        message.attribute.push(reader.string());\r\n                        break;\r\n                    }\r\n                case 11: {\r\n                        if (!(message.attributeProto && message.attributeProto.length))\r\n                            message.attributeProto = [];\r\n                        message.attributeProto.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                case 7: {\r\n                        if (!(message.node && message.node.length))\r\n                            message.node = [];\r\n                        message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                case 8: {\r\n                        message.docString = reader.string();\r\n                        break;\r\n                    }\r\n                case 9: {\r\n                        if (!(message.opsetImport && message.opsetImport.length))\r\n                            message.opsetImport = [];\r\n                        message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\r\n                        break;\r\n                    }\r\n                case 10: {\r\n                        message.domain = reader.string();\r\n                        break;\r\n                    }\r\n                default:\r\n                    reader.skipType(tag & 7);\r\n                    break;\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Decodes a FunctionProto message from the specified reader or buffer, length delimited.\r\n         * @function decodeDelimited\r\n         * @memberof onnx.FunctionProto\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @returns {onnx.FunctionProto} FunctionProto\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        FunctionProto.decodeDelimited = function decodeDelimited(reader) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = new $Reader(reader);\r\n            return this.decode(reader, reader.uint32());\r\n        };\r\n\r\n        /**\r\n         * Verifies a FunctionProto message.\r\n         * @function verify\r\n         * @memberof onnx.FunctionProto\r\n         * @static\r\n         * @param {Object.<string,*>} message Plain object to verify\r\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n         */\r\n        FunctionProto.verify = function verify(message) {\r\n            if (typeof message !== \"object\" || message === null)\r\n                return \"object expected\";\r\n            if (message.name != null && message.hasOwnProperty(\"name\"))\r\n                if (!$util.isString(message.name))\r\n                    return \"name: string expected\";\r\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\r\n                if (!Array.isArray(message.input))\r\n                    return \"input: array expected\";\r\n                for (var i = 0; i < message.input.length; ++i)\r\n                    if (!$util.isString(message.input[i]))\r\n                        return \"input: string[] expected\";\r\n            }\r\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\r\n                if (!Array.isArray(message.output))\r\n                    return \"output: array expected\";\r\n                for (var i = 0; i < message.output.length; ++i)\r\n                    if (!$util.isString(message.output[i]))\r\n                        return \"output: string[] expected\";\r\n            }\r\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\r\n                if (!Array.isArray(message.attribute))\r\n                    return \"attribute: array expected\";\r\n                for (var i = 0; i < message.attribute.length; ++i)\r\n                    if (!$util.isString(message.attribute[i]))\r\n                        return \"attribute: string[] expected\";\r\n            }\r\n            if (message.attributeProto != null && message.hasOwnProperty(\"attributeProto\")) {\r\n                if (!Array.isArray(message.attributeProto))\r\n                    return \"attributeProto: array expected\";\r\n                for (var i = 0; i < message.attributeProto.length; ++i) {\r\n                    var error = $root.onnx.AttributeProto.verify(message.attributeProto[i]);\r\n                    if (error)\r\n                        return \"attributeProto.\" + error;\r\n                }\r\n            }\r\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\r\n                if (!Array.isArray(message.node))\r\n                    return \"node: array expected\";\r\n                for (var i = 0; i < message.node.length; ++i) {\r\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\r\n                    if (error)\r\n                        return \"node.\" + error;\r\n                }\r\n            }\r\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\r\n                if (!$util.isString(message.docString))\r\n                    return \"docString: string expected\";\r\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\r\n                if (!Array.isArray(message.opsetImport))\r\n                    return \"opsetImport: array expected\";\r\n                for (var i = 0; i < message.opsetImport.length; ++i) {\r\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\r\n                    if (error)\r\n                        return \"opsetImport.\" + error;\r\n                }\r\n            }\r\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\r\n                if (!$util.isString(message.domain))\r\n                    return \"domain: string expected\";\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Creates a FunctionProto message from a plain object. Also converts values to their respective internal types.\r\n         * @function fromObject\r\n         * @memberof onnx.FunctionProto\r\n         * @static\r\n         * @param {Object.<string,*>} object Plain object\r\n         * @returns {onnx.FunctionProto} FunctionProto\r\n         */\r\n        FunctionProto.fromObject = function fromObject(object) {\r\n            if (object instanceof $root.onnx.FunctionProto)\r\n                return object;\r\n            var message = new $root.onnx.FunctionProto();\r\n            if (object.name != null)\r\n                message.name = String(object.name);\r\n            if (object.input) {\r\n                if (!Array.isArray(object.input))\r\n                    throw TypeError(\".onnx.FunctionProto.input: array expected\");\r\n                message.input = [];\r\n                for (var i = 0; i < object.input.length; ++i)\r\n                    message.input[i] = String(object.input[i]);\r\n            }\r\n            if (object.output) {\r\n                if (!Array.isArray(object.output))\r\n                    throw TypeError(\".onnx.FunctionProto.output: array expected\");\r\n                message.output = [];\r\n                for (var i = 0; i < object.output.length; ++i)\r\n                    message.output[i] = String(object.output[i]);\r\n            }\r\n            if (object.attribute) {\r\n                if (!Array.isArray(object.attribute))\r\n                    throw TypeError(\".onnx.FunctionProto.attribute: array expected\");\r\n                message.attribute = [];\r\n                for (var i = 0; i < object.attribute.length; ++i)\r\n                    message.attribute[i] = String(object.attribute[i]);\r\n            }\r\n            if (object.attributeProto) {\r\n                if (!Array.isArray(object.attributeProto))\r\n                    throw TypeError(\".onnx.FunctionProto.attributeProto: array expected\");\r\n                message.attributeProto = [];\r\n                for (var i = 0; i < object.attributeProto.length; ++i) {\r\n                    if (typeof object.attributeProto[i] !== \"object\")\r\n                        throw TypeError(\".onnx.FunctionProto.attributeProto: object expected\");\r\n                    message.attributeProto[i] = $root.onnx.AttributeProto.fromObject(object.attributeProto[i]);\r\n                }\r\n            }\r\n            if (object.node) {\r\n                if (!Array.isArray(object.node))\r\n                    throw TypeError(\".onnx.FunctionProto.node: array expected\");\r\n                message.node = [];\r\n                for (var i = 0; i < object.node.length; ++i) {\r\n                    if (typeof object.node[i] !== \"object\")\r\n                        throw TypeError(\".onnx.FunctionProto.node: object expected\");\r\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\r\n                }\r\n            }\r\n            if (object.docString != null)\r\n                message.docString = String(object.docString);\r\n            if (object.opsetImport) {\r\n                if (!Array.isArray(object.opsetImport))\r\n                    throw TypeError(\".onnx.FunctionProto.opsetImport: array expected\");\r\n                message.opsetImport = [];\r\n                for (var i = 0; i < object.opsetImport.length; ++i) {\r\n                    if (typeof object.opsetImport[i] !== \"object\")\r\n                        throw TypeError(\".onnx.FunctionProto.opsetImport: object expected\");\r\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\r\n                }\r\n            }\r\n            if (object.domain != null)\r\n                message.domain = String(object.domain);\r\n            return message;\r\n        };\r\n\r\n        /**\r\n         * Creates a plain object from a FunctionProto message. Also converts values to other types if specified.\r\n         * @function toObject\r\n         * @memberof onnx.FunctionProto\r\n         * @static\r\n         * @param {onnx.FunctionProto} message FunctionProto\r\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n         * @returns {Object.<string,*>} Plain object\r\n         */\r\n        FunctionProto.toObject = function toObject(message, options) {\r\n            if (!options)\r\n                options = {};\r\n            var object = {};\r\n            if (options.arrays || options.defaults) {\r\n                object.input = [];\r\n                object.output = [];\r\n                object.attribute = [];\r\n                object.node = [];\r\n                object.opsetImport = [];\r\n                object.attributeProto = [];\r\n            }\r\n            if (options.defaults) {\r\n                object.name = \"\";\r\n                object.docString = \"\";\r\n                object.domain = \"\";\r\n            }\r\n            if (message.name != null && message.hasOwnProperty(\"name\"))\r\n                object.name = message.name;\r\n            if (message.input && message.input.length) {\r\n                object.input = [];\r\n                for (var j = 0; j < message.input.length; ++j)\r\n                    object.input[j] = message.input[j];\r\n            }\r\n            if (message.output && message.output.length) {\r\n                object.output = [];\r\n                for (var j = 0; j < message.output.length; ++j)\r\n                    object.output[j] = message.output[j];\r\n            }\r\n            if (message.attribute && message.attribute.length) {\r\n                object.attribute = [];\r\n                for (var j = 0; j < message.attribute.length; ++j)\r\n                    object.attribute[j] = message.attribute[j];\r\n            }\r\n            if (message.node && message.node.length) {\r\n                object.node = [];\r\n                for (var j = 0; j < message.node.length; ++j)\r\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\r\n            }\r\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\r\n                object.docString = message.docString;\r\n            if (message.opsetImport && message.opsetImport.length) {\r\n                object.opsetImport = [];\r\n                for (var j = 0; j < message.opsetImport.length; ++j)\r\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\r\n            }\r\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\r\n                object.domain = message.domain;\r\n            if (message.attributeProto && message.attributeProto.length) {\r\n                object.attributeProto = [];\r\n                for (var j = 0; j < message.attributeProto.length; ++j)\r\n                    object.attributeProto[j] = $root.onnx.AttributeProto.toObject(message.attributeProto[j], options);\r\n            }\r\n            return object;\r\n        };\r\n\r\n        /**\r\n         * Converts this FunctionProto to JSON.\r\n         * @function toJSON\r\n         * @memberof onnx.FunctionProto\r\n         * @instance\r\n         * @returns {Object.<string,*>} JSON object\r\n         */\r\n        FunctionProto.prototype.toJSON = function toJSON() {\r\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n        };\r\n\r\n        /**\r\n         * Gets the default type url for FunctionProto\r\n         * @function getTypeUrl\r\n         * @memberof onnx.FunctionProto\r\n         * @static\r\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\r\n         * @returns {string} The default type url\r\n         */\r\n        FunctionProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\r\n            if (typeUrlPrefix === undefined) {\r\n                typeUrlPrefix = \"type.googleapis.com\";\r\n            }\r\n            return typeUrlPrefix + \"/onnx.FunctionProto\";\r\n        };\r\n\r\n        return FunctionProto;\r\n    })();\r\n\r\n    return onnx;\r\n})();\r\n\r\nmodule.exports = $root;\r\n","var _scriptDir,e=(_scriptDir=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\"undefined\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(e={}){function t(){return F.buffer!=k.buffer&&W(),k}function r(){return F.buffer!=k.buffer&&W(),x}function n(){return F.buffer!=k.buffer&&W(),Y}function a(){return F.buffer!=k.buffer&&W(),H}function o(){return F.buffer!=k.buffer&&W(),U}var i,u,s=e;s.ready=new Promise(((e,t)=>{i=e,u=t}));var f,c,l,d=Object.assign({},s),h=\"./this.program\",m=(e,t)=>{throw t},p=\"object\"==typeof window,g=\"function\"==typeof importScripts,b=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,y=s.ENVIRONMENT_IS_PTHREAD||!1,v=\"\";function _(e){return s.locateFile?s.locateFile(e,v):v+e}if(b){var w=require(\"fs\"),O=require(\"path\");let e;v=g?O.dirname(v)+\"/\":__dirname+\"/\",f=(e,t)=>(e=e.startsWith(\"file://\")?new URL(e):O.normalize(e),w.readFileSync(e,t?void 0:\"utf8\")),l=e=>((e=f(e,!0)).buffer||(e=new Uint8Array(e)),e),c=(e,t,r,n=!0)=>{e=e.startsWith(\"file://\")?new URL(e):O.normalize(e),w.readFile(e,n?void 0:\"utf8\",((e,a)=>{e?r(e):t(n?a.buffer:a)}))},!s.thisProgram&&1<process.argv.length&&(h=process.argv[1].replace(/\\\\/g,\"/\")),process.argv.slice(2),m=(e,t)=>{throw process.exitCode=e,t},s.inspect=()=>\"[Emscripten Module object]\";try{e=require(\"worker_threads\")}catch(e){throw console.error('The \"worker_threads\" module is not supported in this node.js build - perhaps a newer version is needed?'),e}global.Worker=e.Worker}else(p||g)&&(g?v=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(v=document.currentScript.src),_scriptDir&&(v=_scriptDir),v=0!==v.indexOf(\"blob:\")?v.substr(0,v.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):\"\",b||(f=e=>{var t=new XMLHttpRequest;return t.open(\"GET\",e,!1),t.send(null),t.responseText},g&&(l=e=>{var t=new XMLHttpRequest;return t.open(\"GET\",e,!1),t.responseType=\"arraybuffer\",t.send(null),new Uint8Array(t.response)}),c=(e,t,r)=>{var n=new XMLHttpRequest;n.open(\"GET\",e,!0),n.responseType=\"arraybuffer\",n.onload=()=>{200==n.status||0==n.status&&n.response?t(n.response):r()},n.onerror=r,n.send(null)}));b&&\"undefined\"==typeof performance&&(global.performance=require(\"perf_hooks\").performance);var M=console.log.bind(console),T=console.error.bind(console);b&&(M=(...e)=>w.writeSync(1,e.join(\" \")+\"\\n\"),T=(...e)=>w.writeSync(2,e.join(\" \")+\"\\n\"));var S,A=s.print||M,R=s.printErr||T;Object.assign(s,d),d=null,s.thisProgram&&(h=s.thisProgram),s.quit&&(m=s.quit),s.wasmBinary&&(S=s.wasmBinary);var E=s.noExitRuntime||!0;\"object\"!=typeof WebAssembly&&ee(\"no native wasm support detected\");var F,D,C,I,k,x,Y,H,U,P=!1;function W(){var e=F.buffer;s.HEAP8=k=new Int8Array(e),s.HEAP16=new Int16Array(e),s.HEAP32=Y=new Int32Array(e),s.HEAPU8=x=new Uint8Array(e),s.HEAPU16=new Uint16Array(e),s.HEAPU32=H=new Uint32Array(e),s.HEAPF32=new Float32Array(e),s.HEAPF64=U=new Float64Array(e)}var G=s.INITIAL_MEMORY||16777216;if(5242880<=G||ee(\"INITIAL_MEMORY should be larger than STACK_SIZE, was \"+G+\"! (STACK_SIZE=5242880)\"),y)F=s.wasmMemory;else if(s.wasmMemory)F=s.wasmMemory;else if(!((F=new WebAssembly.Memory({initial:G/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw R(\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\"),b&&R(\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)\"),Error(\"bad memory\");W(),G=F.buffer.byteLength;var L,N=[],j=[],B=[],z=0;function q(){return E||0<z}var J,K,V=0,X=null,$=null;function Z(){V++,s.monitorRunDependencies&&s.monitorRunDependencies(V)}function Q(){if(V--,s.monitorRunDependencies&&s.monitorRunDependencies(V),0==V&&(null!==X&&(clearInterval(X),X=null),$)){var e=$;$=null,e()}}function ee(e){throw s.onAbort&&s.onAbort(e),R(e=\"Aborted(\"+e+\")\"),P=!0,I=1,e=new WebAssembly.RuntimeError(e+\". Build with -sASSERTIONS for more info.\"),u(e),e}function te(e){return e.startsWith(\"data:application/octet-stream;base64,\")}function re(e){if(e==J&&S)return new Uint8Array(S);if(l)return l(e);throw\"both async and sync fetching of the wasm failed\"}function ne(e,t,r){return function(e){if(!S&&(p||g)){if(\"function\"==typeof fetch&&!e.startsWith(\"file://\"))return fetch(e,{credentials:\"same-origin\"}).then((t=>{if(!t.ok)throw\"failed to load wasm binary file at '\"+e+\"'\";return t.arrayBuffer()})).catch((()=>re(e)));if(c)return new Promise(((t,r)=>{c(e,(e=>t(new Uint8Array(e))),r)}))}return Promise.resolve().then((()=>re(e)))}(e).then((e=>WebAssembly.instantiate(e,t))).then((e=>e)).then(r,(e=>{R(\"failed to asynchronously prepare wasm: \"+e),ee(e)}))}function ae(e){this.name=\"ExitStatus\",this.message=`Program terminated with exit(${e})`,this.status=e}function oe(e){e.terminate(),e.onmessage=()=>{}}function ie(e){(e=he.Fa[e])||ee(),he.fb(e)}function ue(e){var t=he.Za();if(!t)return 6;he.Ia.push(t),he.Fa[e.Ha]=t,t.Ha=e.Ha;var r={cmd:\"run\",start_routine:e.gb,arg:e.Ya,pthread_ptr:e.Ha};return b&&t.unref(),t.postMessage(r,e.mb),0}te(J=\"ort-wasm-threaded.wasm\")||(J=_(J));var se=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0,fe=(e,t,r)=>{var n=(t>>>=0)+r;for(r=t;e[r]&&!(r>=n);)++r;if(16<r-t&&e.buffer&&se)return se.decode(e.buffer instanceof SharedArrayBuffer?e.slice(t,r):e.subarray(t,r));for(n=\"\";t<r;){var a=e[t++];if(128&a){var o=63&e[t++];if(192==(224&a))n+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[t++])?n+=String.fromCharCode(a):(a-=65536,n+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else n+=String.fromCharCode(a)}return n},ce=(e,t)=>(e>>>=0)?fe(r(),e,t):\"\";function le(e){if(y)return qe(1,1,e);I=e,q()||(he.hb(),s.onExit&&s.onExit(e),P=!0),m(e,new ae(e))}var de=e=>{if(I=e,y)throw pe(e),\"unwind\";le(e)},he={La:[],Ia:[],Ta:[],Fa:{},Pa:function(){y?he.ab():he.$a()},$a:function(){N.unshift((()=>{Z(),he.bb((()=>Q()))}))},ab:function(){he.receiveObjectTransfer=he.eb,he.threadInitTLS=he.Sa,he.setExitStatus=he.Ra,E=!1},Ra:function(e){I=e},rb:[\"$terminateWorker\"],hb:function(){for(var e of he.Ia)oe(e);for(e of he.La)oe(e);he.La=[],he.Ia=[],he.Fa=[]},fb:function(e){var t=e.Ha;delete he.Fa[t],he.La.push(e),he.Ia.splice(he.Ia.indexOf(e),1),e.Ha=0,gt(t)},eb:function(){},Sa:function(){he.Ta.forEach((e=>e()))},cb:e=>new Promise((t=>{e.onmessage=r=>{var n=(r=r.data).cmd;if(r.targetThread&&r.targetThread!=lt()){var a=he.Fa[r.qb];a?a.postMessage(r,r.transferList):R('Internal error! Worker sent a message \"'+n+'\" to target pthread '+r.targetThread+\", but that thread no longer exists!\")}else\"checkMailbox\"===n?Pe():\"spawnThread\"===n?ue(r):\"cleanupThread\"===n?ie(r.thread):\"killThread\"===n?(r=r.thread,n=he.Fa[r],delete he.Fa[r],oe(n),gt(r),he.Ia.splice(he.Ia.indexOf(n),1),n.Ha=0):\"cancelThread\"===n?he.Fa[r.thread].postMessage({cmd:\"cancel\"}):\"loaded\"===n?(e.loaded=!0,t(e)):\"alert\"===n?alert(\"Thread \"+r.threadId+\": \"+r.text):\"setimmediate\"===r.target?e.postMessage(r):\"callHandler\"===n?s[r.handler](...r.args):n&&R(\"worker sent an unknown command \"+n)},e.onerror=e=>{throw R(\"worker sent an error! \"+e.filename+\":\"+e.lineno+\": \"+e.message),e},b&&(e.on(\"message\",(function(t){e.onmessage({data:t})})),e.on(\"error\",(function(t){e.onerror(t)})));var r,n=[];for(r of[\"onExit\",\"onAbort\",\"print\",\"printErr\"])s.hasOwnProperty(r)&&n.push(r);e.postMessage({cmd:\"load\",handlers:n,urlOrBlob:s.mainScriptUrlOrBlob||_scriptDir,wasmMemory:F,wasmModule:C})})),bb:function(e){e()},Xa:function(){var e=_(\"ort-wasm-threaded.worker.js\");e=new Worker(e),he.La.push(e)},Za:function(){return 0==he.La.length&&(he.Xa(),he.cb(he.La[0])),he.La.pop()}};s.PThread=he;var me=e=>{for(;0<e.length;)e.shift()(s)};function pe(e){if(y)return qe(2,0,e);de(e)}s.establishStackSpace=function(){var e=lt(),t=n()[e+52>>2>>>0];e=n()[e+56>>2>>>0],_t(t,t-e),Ot(t)};var ge=[];function be(e){this.Oa=e-24,this.Wa=function(e){a()[this.Oa+4>>2>>>0]=e},this.Va=function(e){a()[this.Oa+8>>2>>>0]=e},this.Pa=function(e,t){this.Ua(),this.Wa(e),this.Va(t)},this.Ua=function(){a()[this.Oa+16>>2>>>0]=0}}function ye(e,t,r,n){return y?qe(3,1,e,t,r,n):ve(e,t,r,n)}function ve(e,t,r,n){if(e>>>=0,t>>>=0,r>>>=0,n>>>=0,\"undefined\"==typeof SharedArrayBuffer)return R(\"Current environment does not support SharedArrayBuffer, pthreads are not available!\"),6;var a=[];return y&&0===a.length?ye(e,t,r,n):(e={gb:r,Ha:e,Ya:n,mb:a},y?(e.ob=\"spawnThread\",postMessage(e,a),0):ue(e))}function _e(e,t,r){return y?qe(4,1,e,t,r):0}function we(e,t){if(y)return qe(5,1,e,t)}s.invokeEntryPoint=function(e,t){var r=ge[e];r||(e>=ge.length&&(ge.length=e+1),ge[e]=r=L.get(e)),e=r(t),q()?he.Ra(e):bt(e)};var Oe=e=>{for(var t=0,r=0;r<e.length;++r){var n=e.charCodeAt(r);127>=n?t++:2047>=n?t+=2:55296<=n&&57343>=n?(t+=4,++r):t+=3}return t},Me=(e,t,r,n)=>{if(!(0<n))return 0;var a=r>>>=0;n=r+n-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(r>=n)break;t[r++>>>0]=i}else{if(2047>=i){if(r+1>=n)break;t[r++>>>0]=192|i>>6}else{if(65535>=i){if(r+2>=n)break;t[r++>>>0]=224|i>>12}else{if(r+3>=n)break;t[r++>>>0]=240|i>>18,t[r++>>>0]=128|i>>12&63}t[r++>>>0]=128|i>>6&63}t[r++>>>0]=128|63&i}}return t[r>>>0]=0,r-a},Te=(e,t,n)=>Me(e,r(),t,n);function Se(e,t){if(y)return qe(6,1,e,t)}function Ae(e,t,r){if(y)return qe(7,1,e,t,r)}function Re(e,t,r){return y?qe(8,1,e,t,r):0}function Ee(e,t){if(y)return qe(9,1,e,t)}function Fe(e,t,r){if(y)return qe(10,1,e,t,r)}function De(e,t,r,n){if(y)return qe(11,1,e,t,r,n)}function Ce(e,t,r,n){if(y)return qe(12,1,e,t,r,n)}function Ie(e,t,r,n){if(y)return qe(13,1,e,t,r,n)}function ke(e){if(y)return qe(14,1,e)}function xe(e,t){if(y)return qe(15,1,e,t)}function Ye(e,t,r){if(y)return qe(16,1,e,t,r)}var He=e=>{if(!P)try{if(e(),!q())try{y?bt(I):de(I)}catch(e){e instanceof ae||\"unwind\"==e||m(1,e)}}catch(e){e instanceof ae||\"unwind\"==e||m(1,e)}};function Ue(e){e>>>=0,\"function\"==typeof Atomics.nb&&(Atomics.nb(n(),e>>2,e).value.then(Pe),e+=128,Atomics.store(n(),e>>2,1))}function Pe(){var e=lt();e&&(Ue(e),He((()=>yt())))}s.__emscripten_thread_mailbox_await=Ue,s.checkMailbox=Pe;var We=e=>0==e%4&&(0!=e%100||0==e%400),Ge=[0,31,60,91,121,152,182,213,244,274,305,335],Le=[0,31,59,90,120,151,181,212,243,273,304,334];function Ne(e,t,r,n,a,o,i,u){return y?qe(17,1,e,t,r,n,a,o,i,u):-52}function je(e,t,r,n,a,o,i){if(y)return qe(18,1,e,t,r,n,a,o,i)}var Be=e=>{var t=Oe(e)+1,r=dt(t);return r&&Te(e,r,t),r},ze=e=>{var t=wt();return e=e(),Ot(t),e};function qe(e,t){var r=arguments.length-2,n=arguments;return ze((()=>{for(var a=Mt(8*r),i=a>>3,u=0;u<r;u++){var s=n[2+u];o()[i+u>>>0]=s}return pt(e,r,a,t)}))}var Je,Ke=[],Ve={},Xe=()=>{if(!Je){var e,t={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:h||\"./this.program\"};for(e in Ve)void 0===Ve[e]?delete t[e]:t[e]=Ve[e];var r=[];for(e in t)r.push(`${e}=${t[e]}`);Je=r}return Je};function $e(e,r){if(y)return qe(19,1,e,r);e>>>=0,r>>>=0;var n=0;return Xe().forEach((function(o,i){var u=r+n;for(i=a()[e+4*i>>2>>>0]=u,u=0;u<o.length;++u)t()[i++>>0>>>0]=o.charCodeAt(u);t()[i>>0>>>0]=0,n+=o.length+1})),0}function Ze(e,t){if(y)return qe(20,1,e,t);e>>>=0,t>>>=0;var r=Xe();a()[e>>2>>>0]=r.length;var n=0;return r.forEach((function(e){n+=e.length+1})),a()[t>>2>>>0]=n,0}function Qe(e){return y?qe(21,1,e):52}function et(e,t,r,n){return y?qe(22,1,e,t,r,n):52}function tt(e,t,r,n,a){return y?qe(23,1,e,t,r,n,a):70}var rt=[null,[],[]];function nt(e,t,n,o){if(y)return qe(24,1,e,t,n,o);t>>>=0,n>>>=0,o>>>=0;for(var i=0,u=0;u<n;u++){var s=a()[t>>2>>>0],f=a()[t+4>>2>>>0];t+=8;for(var c=0;c<f;c++){var l=r()[s+c>>>0],d=rt[e];0===l||10===l?((1===e?A:R)(fe(d,0)),d.length=0):d.push(l)}i+=f}return a()[o>>2>>>0]=i,0}var at=e=>(at=(()=>{if(\"object\"==typeof crypto&&\"function\"==typeof crypto.getRandomValues)return e=>(e.set(crypto.getRandomValues(new Uint8Array(e.byteLength))),e);if(b)try{var e=require(\"crypto\");if(e.randomFillSync)return t=>e.randomFillSync(t);var t=e.randomBytes;return e=>(e.set(t(e.byteLength)),e)}catch(e){}ee(\"initRandomDevice\")})())(e),ot=[31,29,31,30,31,30,31,31,30,31,30,31],it=[31,28,31,30,31,30,31,31,30,31,30,31],ut=(e,r)=>{t().set(e,r>>>0)};function st(e,t,r,a){function o(e,t,r){for(e=\"number\"==typeof e?e.toString():e||\"\";e.length<t;)e=r[0]+e;return e}function i(e,t){return o(e,t,\"0\")}function u(e,t){function r(e){return 0>e?-1:0<e?1:0}var n;return 0===(n=r(e.getFullYear()-t.getFullYear()))&&0===(n=r(e.getMonth()-t.getMonth()))&&(n=r(e.getDate()-t.getDate())),n}function s(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function f(e){var t=e.Ja;for(e=new Date(new Date(e.Ka+1900,0,1).getTime());0<t;){var r=e.getMonth(),n=(We(e.getFullYear())?ot:it)[r];if(!(t>n-e.getDate())){e.setDate(e.getDate()+t);break}t-=n-e.getDate()+1,e.setDate(1),11>r?e.setMonth(r+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return r=new Date(e.getFullYear()+1,0,4),t=s(new Date(e.getFullYear(),0,4)),r=s(r),0>=u(t,e)?0>=u(r,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}e>>>=0,t>>>=0,r>>>=0,a>>>=0;var c=n()[a+40>>2>>>0];for(var l in a={kb:n()[a>>2>>>0],jb:n()[a+4>>2>>>0],Ma:n()[a+8>>2>>>0],Qa:n()[a+12>>2>>>0],Na:n()[a+16>>2>>>0],Ka:n()[a+20>>2>>>0],Ga:n()[a+24>>2>>>0],Ja:n()[a+28>>2>>>0],sb:n()[a+32>>2>>>0],ib:n()[a+36>>2>>>0],lb:c?ce(c):\"\"},r=ce(r),c={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"})r=r.replace(new RegExp(l,\"g\"),c[l]);var d=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),h=\"January February March April May June July August September October November December\".split(\" \");for(l in c={\"%a\":e=>d[e.Ga].substring(0,3),\"%A\":e=>d[e.Ga],\"%b\":e=>h[e.Na].substring(0,3),\"%B\":e=>h[e.Na],\"%C\":e=>i((e.Ka+1900)/100|0,2),\"%d\":e=>i(e.Qa,2),\"%e\":e=>o(e.Qa,2,\" \"),\"%g\":e=>f(e).toString().substring(2),\"%G\":e=>f(e),\"%H\":e=>i(e.Ma,2),\"%I\":e=>(0==(e=e.Ma)?e=12:12<e&&(e-=12),i(e,2)),\"%j\":e=>{for(var t=0,r=0;r<=e.Na-1;t+=(We(e.Ka+1900)?ot:it)[r++]);return i(e.Qa+t,3)},\"%m\":e=>i(e.Na+1,2),\"%M\":e=>i(e.jb,2),\"%n\":()=>\"\\n\",\"%p\":e=>0<=e.Ma&&12>e.Ma?\"AM\":\"PM\",\"%S\":e=>i(e.kb,2),\"%t\":()=>\"\\t\",\"%u\":e=>e.Ga||7,\"%U\":e=>i(Math.floor((e.Ja+7-e.Ga)/7),2),\"%V\":e=>{var t=Math.floor((e.Ja+7-(e.Ga+6)%7)/7);if(2>=(e.Ga+371-e.Ja-2)%7&&t++,t)53==t&&(4==(r=(e.Ga+371-e.Ja)%7)||3==r&&We(e.Ka)||(t=1));else{t=52;var r=(e.Ga+7-e.Ja-1)%7;(4==r||5==r&&We(e.Ka%400-1))&&t++}return i(t,2)},\"%w\":e=>e.Ga,\"%W\":e=>i(Math.floor((e.Ja+7-(e.Ga+6)%7)/7),2),\"%y\":e=>(e.Ka+1900).toString().substring(2),\"%Y\":e=>e.Ka+1900,\"%z\":e=>{var t=0<=(e=e.ib);return e=Math.abs(e)/60,(t?\"+\":\"-\")+String(\"0000\"+(e/60*100+e%60)).slice(-4)},\"%Z\":e=>e.lb,\"%%\":()=>\"%\"},r=r.replace(/%%/g,\"\\0\\0\"),c)r.includes(l)&&(r=r.replace(new RegExp(l,\"g\"),c[l](a)));return l=function(e){var t=Array(Oe(e)+1);return Me(e,t,0,t.length),t}(r=r.replace(/\\0\\0/g,\"%\")),l.length>t?0:(ut(l,e),l.length-1)}he.Pa();var ft=[null,le,pe,ye,_e,we,Se,Ae,Re,Ee,Fe,De,Ce,Ie,ke,xe,Ye,Ne,je,$e,Ze,Qe,et,tt,nt],ct={b:function(e,t,r){throw new be(e>>>=0).Pa(t>>>0,r>>>0),e},N:function(e){ht(e>>>0,!g,1,!p,131072,!1),he.Sa()},k:function(e){e>>>=0,y?postMessage({cmd:\"cleanupThread\",thread:e}):ie(e)},I:ve,h:_e,T:we,E:Se,G:Ae,U:Re,R:Ee,J:Fe,Q:De,o:Ce,F:Ie,C:ke,S:xe,D:Ye,q:()=>!0,A:function(e,t){(e>>>=0)==t>>>0?setTimeout((()=>Pe())):y?postMessage({targetThread:e,cmd:\"checkMailbox\"}):(e=he.Fa[e])&&e.postMessage({cmd:\"checkMailbox\"})},L:function(){return-1},M:Ue,p:function(e){b&&he.Fa[e>>>0].ref()},t:function(e,t,r){e=t+2097152>>>0<4194305-!!e?(e>>>0)+4294967296*t:NaN,r>>>=0,e=new Date(1e3*e),n()[r>>2>>>0]=e.getUTCSeconds(),n()[r+4>>2>>>0]=e.getUTCMinutes(),n()[r+8>>2>>>0]=e.getUTCHours(),n()[r+12>>2>>>0]=e.getUTCDate(),n()[r+16>>2>>>0]=e.getUTCMonth(),n()[r+20>>2>>>0]=e.getUTCFullYear()-1900,n()[r+24>>2>>>0]=e.getUTCDay(),e=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,n()[r+28>>2>>>0]=e},u:function(e,t,r){e=t+2097152>>>0<4194305-!!e?(e>>>0)+4294967296*t:NaN,r>>>=0,e=new Date(1e3*e),n()[r>>2>>>0]=e.getSeconds(),n()[r+4>>2>>>0]=e.getMinutes(),n()[r+8>>2>>>0]=e.getHours(),n()[r+12>>2>>>0]=e.getDate(),n()[r+16>>2>>>0]=e.getMonth(),n()[r+20>>2>>>0]=e.getFullYear()-1900,n()[r+24>>2>>>0]=e.getDay(),t=(We(e.getFullYear())?Ge:Le)[e.getMonth()]+e.getDate()-1|0,n()[r+28>>2>>>0]=t,n()[r+36>>2>>>0]=-60*e.getTimezoneOffset(),t=new Date(e.getFullYear(),6,1).getTimezoneOffset();var a=new Date(e.getFullYear(),0,1).getTimezoneOffset();e=0|(t!=a&&e.getTimezoneOffset()==Math.min(a,t)),n()[r+32>>2>>>0]=e},v:function(e){e>>>=0;var t=new Date(n()[e+20>>2>>>0]+1900,n()[e+16>>2>>>0],n()[e+12>>2>>>0],n()[e+8>>2>>>0],n()[e+4>>2>>>0],n()[e>>2>>>0],0),r=n()[e+32>>2>>>0],a=t.getTimezoneOffset(),o=new Date(t.getFullYear(),6,1).getTimezoneOffset(),i=new Date(t.getFullYear(),0,1).getTimezoneOffset(),u=Math.min(i,o);return 0>r?n()[e+32>>2>>>0]=Number(o!=i&&u==a):0<r!=(u==a)&&(o=Math.max(i,o),t.setTime(t.getTime()+6e4*((0<r?u:o)-a))),n()[e+24>>2>>>0]=t.getDay(),r=(We(t.getFullYear())?Ge:Le)[t.getMonth()]+t.getDate()-1|0,n()[e+28>>2>>>0]=r,n()[e>>2>>>0]=t.getSeconds(),n()[e+4>>2>>>0]=t.getMinutes(),n()[e+8>>2>>>0]=t.getHours(),n()[e+12>>2>>>0]=t.getDate(),n()[e+16>>2>>>0]=t.getMonth(),n()[e+20>>2>>>0]=t.getYear(),e=t.getTime()/1e3,vt((K=e,1<=+Math.abs(K)?0<K?+Math.floor(K/4294967296)>>>0:~~+Math.ceil((K-+(~~K>>>0))/4294967296)>>>0:0)),e>>>0},r:Ne,s:je,z:function(e,t,r){function o(e){return(e=e.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?e[1]:\"GMT\"}e>>>=0,t>>>=0,r>>>=0;var i=(new Date).getFullYear(),u=new Date(i,0,1),s=new Date(i,6,1);i=u.getTimezoneOffset();var f=s.getTimezoneOffset(),c=Math.max(i,f);a()[e>>2>>>0]=60*c,n()[t>>2>>>0]=Number(i!=f),e=o(u),t=o(s),e=Be(e),t=Be(t),f<i?(a()[r>>2>>>0]=e,a()[r+4>>2>>>0]=t):(a()[r>>2>>>0]=t,a()[r+4>>2>>>0]=e)},c:()=>{ee(\"\")},l:function(){},i:function(){return Date.now()},V:()=>{throw z+=1,\"unwind\"},B:function(){return 4294901760},e:()=>performance.timeOrigin+performance.now(),f:function(){return b?require(\"os\").cpus().length:navigator.hardwareConcurrency},K:function(e,t,r,n){for(he.pb=t>>>0,Ke.length=r,t=n>>>0>>3,n=0;n<r;n++)Ke[n]=o()[t+n>>>0];return ft[e].apply(null,Ke)},y:function(e){e>>>=0;var t=r().length;if(e<=t||4294901760<e)return!1;for(var n=1;4>=n;n*=2){var a=t*(1+.2/n);a=Math.min(a,e+100663296);var o=Math;a=Math.max(e,a);e:{o=o.min.call(o,4294901760,a+(65536-a%65536)%65536)-F.buffer.byteLength+65535>>>16;try{F.grow(o),W();var i=1;break e}catch(e){}i=void 0}if(i)return!0}return!1},O:$e,P:Ze,j:de,g:Qe,n:et,w:tt,m:nt,x:function(e,t){return e>>>=0,t>>>=0,at(r().subarray(e>>>0,e+t>>>0)),0},a:F||s.wasmMemory,H:st,d:function(e,t,r,n){return st(e>>>0,t>>>0,r>>>0,n>>>0)}};!function(){function e(e,t){return e=e.exports,D=e=function(e){var t=e=>()=>e()>>>0,r=e=>t=>e(t)>>>0;return(e=Object.assign({},e)).__errno_location=t(e.__errno_location),e.pthread_self=t(e.pthread_self),e.malloc=r(e.malloc),e.stackSave=t(e.stackSave),e.stackAlloc=r(e.stackAlloc),e}(e),he.Ta.push(D.sa),L=D.ta,j.unshift(D.W),C=t,Q(),e}var t={a:ct};if(Z(),s.instantiateWasm)try{return s.instantiateWasm(t,e)}catch(e){R(\"Module.instantiateWasm callback failed with error: \"+e),u(e)}(function(e,t){var r=J;return S||\"function\"!=typeof WebAssembly.instantiateStreaming||te(r)||r.startsWith(\"file://\")||b||\"function\"!=typeof fetch?ne(r,e,t):fetch(r,{credentials:\"same-origin\"}).then((n=>WebAssembly.instantiateStreaming(n,e).then(t,(function(n){return R(\"wasm streaming compile failed: \"+n),R(\"falling back to ArrayBuffer instantiation\"),ne(r,e,t)}))))})(t,(function(t){e(t.instance,t.module)})).catch(u)}(),s._OrtInit=(e,t)=>(s._OrtInit=D.X)(e,t),s._OrtGetLastError=(e,t)=>(s._OrtGetLastError=D.Y)(e,t),s._OrtCreateSessionOptions=(e,t,r,n,a,o,i,u,f,c)=>(s._OrtCreateSessionOptions=D.Z)(e,t,r,n,a,o,i,u,f,c),s._OrtAppendExecutionProvider=(e,t)=>(s._OrtAppendExecutionProvider=D._)(e,t),s._OrtAddSessionConfigEntry=(e,t,r)=>(s._OrtAddSessionConfigEntry=D.$)(e,t,r),s._OrtReleaseSessionOptions=e=>(s._OrtReleaseSessionOptions=D.aa)(e),s._OrtCreateSession=(e,t,r)=>(s._OrtCreateSession=D.ba)(e,t,r),s._OrtReleaseSession=e=>(s._OrtReleaseSession=D.ca)(e),s._OrtGetInputOutputCount=(e,t,r)=>(s._OrtGetInputOutputCount=D.da)(e,t,r),s._OrtGetInputName=(e,t)=>(s._OrtGetInputName=D.ea)(e,t),s._OrtGetOutputName=(e,t)=>(s._OrtGetOutputName=D.fa)(e,t),s._OrtFree=e=>(s._OrtFree=D.ga)(e),s._OrtCreateTensor=(e,t,r,n,a)=>(s._OrtCreateTensor=D.ha)(e,t,r,n,a),s._OrtGetTensorData=(e,t,r,n,a)=>(s._OrtGetTensorData=D.ia)(e,t,r,n,a),s._OrtReleaseTensor=e=>(s._OrtReleaseTensor=D.ja)(e),s._OrtCreateRunOptions=(e,t,r,n)=>(s._OrtCreateRunOptions=D.ka)(e,t,r,n),s._OrtAddRunConfigEntry=(e,t,r)=>(s._OrtAddRunConfigEntry=D.la)(e,t,r),s._OrtReleaseRunOptions=e=>(s._OrtReleaseRunOptions=D.ma)(e),s._OrtRun=(e,t,r,n,a,o,i,u)=>(s._OrtRun=D.na)(e,t,r,n,a,o,i,u),s._OrtEndProfiling=e=>(s._OrtEndProfiling=D.oa)(e);var lt=s._pthread_self=()=>(lt=s._pthread_self=D.pa)(),dt=s._malloc=e=>(dt=s._malloc=D.qa)(e);s._free=e=>(s._free=D.ra)(e),s.__emscripten_tls_init=()=>(s.__emscripten_tls_init=D.sa)();var ht=s.__emscripten_thread_init=(e,t,r,n,a,o)=>(ht=s.__emscripten_thread_init=D.ua)(e,t,r,n,a,o);s.__emscripten_thread_crashed=()=>(s.__emscripten_thread_crashed=D.va)();var mt,pt=(e,t,r,n)=>(pt=D.wa)(e,t,r,n),gt=e=>(gt=D.xa)(e),bt=s.__emscripten_thread_exit=e=>(bt=s.__emscripten_thread_exit=D.ya)(e),yt=s.__emscripten_check_mailbox=()=>(yt=s.__emscripten_check_mailbox=D.za)(),vt=e=>(vt=D.Aa)(e),_t=(e,t)=>(_t=D.Ba)(e,t),wt=()=>(wt=D.Ca)(),Ot=e=>(Ot=D.Da)(e),Mt=e=>(Mt=D.Ea)(e);function Tt(){function e(){if(!mt&&(mt=!0,s.calledRun=!0,!P)&&(y||me(j),i(s),s.onRuntimeInitialized&&s.onRuntimeInitialized(),!y)){if(s.postRun)for(\"function\"==typeof s.postRun&&(s.postRun=[s.postRun]);s.postRun.length;){var e=s.postRun.shift();B.unshift(e)}me(B)}}if(!(0<V))if(y)i(s),y||me(j),startWorker(s);else{if(s.preRun)for(\"function\"==typeof s.preRun&&(s.preRun=[s.preRun]);s.preRun.length;)N.unshift(s.preRun.shift());me(N),0<V||(s.setStatus?(s.setStatus(\"Running...\"),setTimeout((function(){setTimeout((function(){s.setStatus(\"\")}),1),e()}),1)):e())}}if(s.keepRuntimeAlive=q,s.wasmMemory=F,s.stackAlloc=Mt,s.stackSave=wt,s.stackRestore=Ot,s.UTF8ToString=ce,s.stringToUTF8=Te,s.lengthBytesUTF8=Oe,s.ExitStatus=ae,s.PThread=he,$=function e(){mt||Tt(),mt||($=e)},s.preInit)for(\"function\"==typeof s.preInit&&(s.preInit=[s.preInit]);0<s.preInit.length;)s.preInit.pop()();return Tt(),e.ready});\"object\"==typeof exports&&\"object\"==typeof module?module.exports=e:\"function\"==typeof define&&define.amd&&define([],(()=>e));\n","\nvar ortWasm = (() => {\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\n  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;\n  return (\nfunction(moduleArg = {}) {\n\nvar e=moduleArg,aa,h;e.ready=new Promise((a,b)=>{aa=a;h=b});var ba=Object.assign({},e),m=\"./this.program\",q=(a,b)=>{throw b;},ca=\"object\"==typeof window,v=\"function\"==typeof importScripts,x=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,y=\"\",A,B,C;\nif(x){var fs=require(\"fs\"),D=require(\"path\");y=v?D.dirname(y)+\"/\":__dirname+\"/\";A=(a,b)=>{a=a.startsWith(\"file://\")?new URL(a):D.normalize(a);return fs.readFileSync(a,b?void 0:\"utf8\")};C=a=>{a=A(a,!0);a.buffer||(a=new Uint8Array(a));return a};B=(a,b,c,f=!0)=>{a=a.startsWith(\"file://\")?new URL(a):D.normalize(a);fs.readFile(a,f?void 0:\"utf8\",(g,k)=>{g?c(g):b(f?k.buffer:k)})};!e.thisProgram&&1<process.argv.length&&(m=process.argv[1].replace(/\\\\/g,\"/\"));process.argv.slice(2);q=(a,b)=>{process.exitCode=\na;throw b;};e.inspect=()=>\"[Emscripten Module object]\"}else if(ca||v)v?y=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(y=document.currentScript.src),_scriptDir&&(y=_scriptDir),0!==y.indexOf(\"blob:\")?y=y.substr(0,y.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):y=\"\",A=a=>{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.send(null);return b.responseText},v&&(C=a=>{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.responseType=\"arraybuffer\";b.send(null);return new Uint8Array(b.response)}),\nB=(a,b,c)=>{var f=new XMLHttpRequest;f.open(\"GET\",a,!0);f.responseType=\"arraybuffer\";f.onload=()=>{200==f.status||0==f.status&&f.response?b(f.response):c()};f.onerror=c;f.send(null)};var da=e.print||console.log.bind(console),E=e.printErr||console.error.bind(console);Object.assign(e,ba);ba=null;e.thisProgram&&(m=e.thisProgram);e.quit&&(q=e.quit);var F;e.wasmBinary&&(F=e.wasmBinary);var noExitRuntime=e.noExitRuntime||!0;\"object\"!=typeof WebAssembly&&G(\"no native wasm support detected\");\nvar H,I,J=!1,K,L,M,N;function ea(){var a=H.buffer;e.HEAP8=K=new Int8Array(a);e.HEAP16=new Int16Array(a);e.HEAP32=M=new Int32Array(a);e.HEAPU8=L=new Uint8Array(a);e.HEAPU16=new Uint16Array(a);e.HEAPU32=N=new Uint32Array(a);e.HEAPF32=new Float32Array(a);e.HEAPF64=new Float64Array(a)}var fa=[],ha=[],ia=[];function ja(){var a=e.preRun.shift();fa.unshift(a)}var O=0,P=null,Q=null;\nfunction G(a){if(e.onAbort)e.onAbort(a);a=\"Aborted(\"+a+\")\";E(a);J=!0;a=new WebAssembly.RuntimeError(a+\". Build with -sASSERTIONS for more info.\");h(a);throw a;}function ka(a){return a.startsWith(\"data:application/octet-stream;base64,\")}var R;R=\"ort-wasm.wasm\";if(!ka(R)){var la=R;R=e.locateFile?e.locateFile(la,y):y+la}function ma(a){if(a==R&&F)return new Uint8Array(F);if(C)return C(a);throw\"both async and sync fetching of the wasm failed\";}\nfunction na(a){if(!F&&(ca||v)){if(\"function\"==typeof fetch&&!a.startsWith(\"file://\"))return fetch(a,{credentials:\"same-origin\"}).then(b=>{if(!b.ok)throw\"failed to load wasm binary file at '\"+a+\"'\";return b.arrayBuffer()}).catch(()=>ma(a));if(B)return new Promise((b,c)=>{B(a,f=>b(new Uint8Array(f)),c)})}return Promise.resolve().then(()=>ma(a))}function oa(a,b,c){return na(a).then(f=>WebAssembly.instantiate(f,b)).then(f=>f).then(c,f=>{E(\"failed to asynchronously prepare wasm: \"+f);G(f)})}\nfunction pa(a,b){var c=R;return F||\"function\"!=typeof WebAssembly.instantiateStreaming||ka(c)||c.startsWith(\"file://\")||x||\"function\"!=typeof fetch?oa(c,a,b):fetch(c,{credentials:\"same-origin\"}).then(f=>WebAssembly.instantiateStreaming(f,a).then(b,function(g){E(\"wasm streaming compile failed: \"+g);E(\"falling back to ArrayBuffer instantiation\");return oa(c,a,b)}))}var S;function qa(a){this.name=\"ExitStatus\";this.message=`Program terminated with exit(${a})`;this.status=a}var T=a=>{for(;0<a.length;)a.shift()(e)};\nfunction ra(a){this.qa=a-24;this.va=function(b){N[this.qa+4>>2>>>0]=b};this.ua=function(b){N[this.qa+8>>2>>>0]=b};this.sa=function(b,c){this.ta();this.va(b);this.ua(c)};this.ta=function(){N[this.qa+16>>2>>>0]=0}}\nvar sa=0,ta=0,ua=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0,va=(a,b,c)=>{b>>>=0;var f=b+c;for(c=b;a[c]&&!(c>=f);)++c;if(16<c-b&&a.buffer&&ua)return ua.decode(a.subarray(b,c));for(f=\"\";b<c;){var g=a[b++];if(g&128){var k=a[b++]&63;if(192==(g&224))f+=String.fromCharCode((g&31)<<6|k);else{var l=a[b++]&63;g=224==(g&240)?(g&15)<<12|k<<6|l:(g&7)<<18|k<<12|l<<6|a[b++]&63;65536>g?f+=String.fromCharCode(g):(g-=65536,f+=String.fromCharCode(55296|g>>10,56320|g&1023))}}else f+=String.fromCharCode(g)}return f},\nU=(a,b)=>(a>>>=0)?va(L,a,b):\"\",V=a=>{for(var b=0,c=0;c<a.length;++c){var f=a.charCodeAt(c);127>=f?b++:2047>=f?b+=2:55296<=f&&57343>=f?(b+=4,++c):b+=3}return b},W=(a,b,c,f)=>{c>>>=0;if(!(0<f))return 0;var g=c;f=c+f-1;for(var k=0;k<a.length;++k){var l=a.charCodeAt(k);if(55296<=l&&57343>=l){var r=a.charCodeAt(++k);l=65536+((l&1023)<<10)|r&1023}if(127>=l){if(c>=f)break;b[c++>>>0]=l}else{if(2047>=l){if(c+1>=f)break;b[c++>>>0]=192|l>>6}else{if(65535>=l){if(c+2>=f)break;b[c++>>>0]=224|l>>12}else{if(c+3>=\nf)break;b[c++>>>0]=240|l>>18;b[c++>>>0]=128|l>>12&63}b[c++>>>0]=128|l>>6&63}b[c++>>>0]=128|l&63}}b[c>>>0]=0;return c-g},X=a=>0===a%4&&(0!==a%100||0===a%400),wa=[0,31,60,91,121,152,182,213,244,274,305,335],xa=[0,31,59,90,120,151,181,212,243,273,304,334],Ca=a=>{var b=V(a)+1,c=ya(b);c&&W(a,L,c,b);return c},Y={},Ea=()=>{if(!Da){var a={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\n\"_\")+\".UTF-8\",_:m||\"./this.program\"},b;for(b in Y)void 0===Y[b]?delete a[b]:a[b]=Y[b];var c=[];for(b in a)c.push(`${b}=${a[b]}`);Da=c}return Da},Da,Fa=[null,[],[]],Ga=()=>{if(\"object\"==typeof crypto&&\"function\"==typeof crypto.getRandomValues)return c=>crypto.getRandomValues(c);if(x)try{var a=require(\"crypto\");if(a.randomFillSync)return c=>a.randomFillSync(c);var b=a.randomBytes;return c=>(c.set(b(c.byteLength)),c)}catch(c){}G(\"initRandomDevice\")},Ha=a=>(Ha=Ga())(a),Ia=[31,29,31,30,31,30,31,31,30,\n31,30,31],Ja=[31,28,31,30,31,30,31,31,30,31,30,31];function Ka(a){var b=Array(V(a)+1);W(a,b,0,b.length);return b}\nfunction La(a,b,c,f){function g(d,n,p){for(d=\"number\"==typeof d?d.toString():d||\"\";d.length<n;)d=p[0]+d;return d}function k(d,n){return g(d,n,\"0\")}function l(d,n){function p(za){return 0>za?-1:0<za?1:0}var z;0===(z=p(d.getFullYear()-n.getFullYear()))&&0===(z=p(d.getMonth()-n.getMonth()))&&(z=p(d.getDate()-n.getDate()));return z}function r(d){switch(d.getDay()){case 0:return new Date(d.getFullYear()-1,11,29);case 1:return d;case 2:return new Date(d.getFullYear(),0,3);case 3:return new Date(d.getFullYear(),\n0,2);case 4:return new Date(d.getFullYear(),0,1);case 5:return new Date(d.getFullYear()-1,11,31);case 6:return new Date(d.getFullYear()-1,11,30)}}function w(d){var n=d.ma;for(d=new Date((new Date(d.na+1900,0,1)).getTime());0<n;){var p=d.getMonth(),z=(X(d.getFullYear())?Ia:Ja)[p];if(n>z-d.getDate())n-=z-d.getDate()+1,d.setDate(1),11>p?d.setMonth(p+1):(d.setMonth(0),d.setFullYear(d.getFullYear()+1));else{d.setDate(d.getDate()+n);break}}p=new Date(d.getFullYear()+1,0,4);n=r(new Date(d.getFullYear(),\n0,4));p=r(p);return 0>=l(n,d)?0>=l(p,d)?d.getFullYear()+1:d.getFullYear():d.getFullYear()-1}a>>>=0;b>>>=0;c>>>=0;f>>>=0;var t=M[f+40>>2>>>0];f={ya:M[f>>2>>>0],xa:M[f+4>>2>>>0],oa:M[f+8>>2>>>0],ra:M[f+12>>2>>>0],pa:M[f+16>>2>>>0],na:M[f+20>>2>>>0],ha:M[f+24>>2>>>0],ma:M[f+28>>2>>>0],Aa:M[f+32>>2>>>0],wa:M[f+36>>2>>>0],za:t?U(t):\"\"};c=U(c);t={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\n\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var u in t)c=c.replace(new RegExp(u,\"g\"),t[u]);var Aa=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),Ba=\"January February March April May June July August September October November December\".split(\" \");t={\"%a\":d=>Aa[d.ha].substring(0,3),\"%A\":d=>Aa[d.ha],\"%b\":d=>\nBa[d.pa].substring(0,3),\"%B\":d=>Ba[d.pa],\"%C\":d=>k((d.na+1900)/100|0,2),\"%d\":d=>k(d.ra,2),\"%e\":d=>g(d.ra,2,\" \"),\"%g\":d=>w(d).toString().substring(2),\"%G\":d=>w(d),\"%H\":d=>k(d.oa,2),\"%I\":d=>{d=d.oa;0==d?d=12:12<d&&(d-=12);return k(d,2)},\"%j\":d=>{for(var n=0,p=0;p<=d.pa-1;n+=(X(d.na+1900)?Ia:Ja)[p++]);return k(d.ra+n,3)},\"%m\":d=>k(d.pa+1,2),\"%M\":d=>k(d.xa,2),\"%n\":()=>\"\\n\",\"%p\":d=>0<=d.oa&&12>d.oa?\"AM\":\"PM\",\"%S\":d=>k(d.ya,2),\"%t\":()=>\"\\t\",\"%u\":d=>d.ha||7,\"%U\":d=>k(Math.floor((d.ma+7-d.ha)/7),2),\"%V\":d=>\n{var n=Math.floor((d.ma+7-(d.ha+6)%7)/7);2>=(d.ha+371-d.ma-2)%7&&n++;if(n)53==n&&(p=(d.ha+371-d.ma)%7,4==p||3==p&&X(d.na)||(n=1));else{n=52;var p=(d.ha+7-d.ma-1)%7;(4==p||5==p&&X(d.na%400-1))&&n++}return k(n,2)},\"%w\":d=>d.ha,\"%W\":d=>k(Math.floor((d.ma+7-(d.ha+6)%7)/7),2),\"%y\":d=>(d.na+1900).toString().substring(2),\"%Y\":d=>d.na+1900,\"%z\":d=>{d=d.wa;var n=0<=d;d=Math.abs(d)/60;return(n?\"+\":\"-\")+String(\"0000\"+(d/60*100+d%60)).slice(-4)},\"%Z\":d=>d.za,\"%%\":()=>\"%\"};c=c.replace(/%%/g,\"\\x00\\x00\");for(u in t)c.includes(u)&&\n(c=c.replace(new RegExp(u,\"g\"),t[u](f)));c=c.replace(/\\0\\0/g,\"%\");u=Ka(c);if(u.length>b)return 0;K.set(u,a>>>0);return u.length-1}\nvar Na={a:function(a,b,c){a>>>=0;(new ra(a)).sa(b>>>0,c>>>0);sa=a;ta++;throw sa;},e:function(){return 0},I:function(){},y:function(){},A:function(){},K:function(){return 0},G:function(){},B:function(){},F:function(){},g:function(){},z:function(){},w:function(){},H:function(){},x:function(){},k:()=>!0,n:function(a,b,c){a=b+2097152>>>0<4194305-!!a?(a>>>0)+4294967296*b:NaN;c>>>=0;a=new Date(1E3*a);M[c>>2>>>0]=a.getUTCSeconds();M[c+4>>2>>>0]=a.getUTCMinutes();M[c+8>>2>>>0]=a.getUTCHours();M[c+12>>2>>>\n0]=a.getUTCDate();M[c+16>>2>>>0]=a.getUTCMonth();M[c+20>>2>>>0]=a.getUTCFullYear()-1900;M[c+24>>2>>>0]=a.getUTCDay();M[c+28>>2>>>0]=(a.getTime()-Date.UTC(a.getUTCFullYear(),0,1,0,0,0,0))/864E5|0},o:function(a,b,c){a=b+2097152>>>0<4194305-!!a?(a>>>0)+4294967296*b:NaN;c>>>=0;a=new Date(1E3*a);M[c>>2>>>0]=a.getSeconds();M[c+4>>2>>>0]=a.getMinutes();M[c+8>>2>>>0]=a.getHours();M[c+12>>2>>>0]=a.getDate();M[c+16>>2>>>0]=a.getMonth();M[c+20>>2>>>0]=a.getFullYear()-1900;M[c+24>>2>>>0]=a.getDay();M[c+28>>2>>>\n0]=(X(a.getFullYear())?wa:xa)[a.getMonth()]+a.getDate()-1|0;M[c+36>>2>>>0]=-(60*a.getTimezoneOffset());b=(new Date(a.getFullYear(),6,1)).getTimezoneOffset();var f=(new Date(a.getFullYear(),0,1)).getTimezoneOffset();M[c+32>>2>>>0]=(b!=f&&a.getTimezoneOffset()==Math.min(f,b))|0},p:function(a){a>>>=0;var b=new Date(M[a+20>>2>>>0]+1900,M[a+16>>2>>>0],M[a+12>>2>>>0],M[a+8>>2>>>0],M[a+4>>2>>>0],M[a>>2>>>0],0),c=M[a+32>>2>>>0],f=b.getTimezoneOffset(),g=(new Date(b.getFullYear(),6,1)).getTimezoneOffset(),\nk=(new Date(b.getFullYear(),0,1)).getTimezoneOffset(),l=Math.min(k,g);0>c?M[a+32>>2>>>0]=Number(g!=k&&l==f):0<c!=(l==f)&&(g=Math.max(k,g),b.setTime(b.getTime()+6E4*((0<c?l:g)-f)));M[a+24>>2>>>0]=b.getDay();M[a+28>>2>>>0]=(X(b.getFullYear())?wa:xa)[b.getMonth()]+b.getDate()-1|0;M[a>>2>>>0]=b.getSeconds();M[a+4>>2>>>0]=b.getMinutes();M[a+8>>2>>>0]=b.getHours();M[a+12>>2>>>0]=b.getDate();M[a+16>>2>>>0]=b.getMonth();M[a+20>>2>>>0]=b.getYear();a=b.getTime()/1E3;return Ma((S=a,1<=+Math.abs(S)?0<S?+Math.floor(S/\n4294967296)>>>0:~~+Math.ceil((S-+(~~S>>>0))/4294967296)>>>0:0)),a>>>0},l:function(){return-52},m:function(){},u:function(a,b,c){function f(w){return(w=w.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?w[1]:\"GMT\"}c>>>=0;var g=(new Date).getFullYear(),k=new Date(g,0,1),l=new Date(g,6,1);g=k.getTimezoneOffset();var r=l.getTimezoneOffset();N[a>>>0>>2>>>0]=60*Math.max(g,r);M[b>>>0>>2>>>0]=Number(g!=r);a=f(k);b=f(l);a=Ca(a);b=Ca(b);r<g?(N[c>>2>>>0]=a,N[c+4>>2>>>0]=b):(N[c>>2>>>0]=b,N[c+4>>2>>>0]=a)},d:()=>{G(\"\")},\nh:function(){return Date.now()},v:function(){return 4294901760},b:()=>performance.now(),J:function(a,b,c){b>>>=0;return L.copyWithin(a>>>0>>>0,b>>>0,b+(c>>>0)>>>0)},t:function(a){a>>>=0;var b=L.length;if(4294901760<a)return!1;for(var c=1;4>=c;c*=2){var f=b*(1+.2/c);f=Math.min(f,a+100663296);var g=Math;f=Math.max(a,f);a:{g=g.min.call(g,4294901760,f+(65536-f%65536)%65536)-H.buffer.byteLength+65535>>>16;try{H.grow(g);ea();var k=1;break a}catch(l){}k=void 0}if(k)return!0}return!1},D:function(a,b){a>>>=\n0;b>>>=0;var c=0;Ea().forEach(function(f,g){var k=b+c;g=N[a+4*g>>2>>>0]=k;for(k=0;k<f.length;++k)K[g++>>0>>>0]=f.charCodeAt(k);K[g>>0>>>0]=0;c+=f.length+1});return 0},E:function(a,b){a>>>=0;b>>>=0;var c=Ea();N[a>>2>>>0]=c.length;var f=0;c.forEach(function(g){f+=g.length+1});N[b>>2>>>0]=f;return 0},s:a=>{if(!noExitRuntime){if(e.onExit)e.onExit(a);J=!0}q(a,new qa(a))},f:()=>52,j:function(){return 52},q:function(){return 70},i:function(a,b,c,f){b>>>=0;c>>>=0;f>>>=0;for(var g=0,k=0;k<c;k++){var l=N[b>>\n2>>>0],r=N[b+4>>2>>>0];b+=8;for(var w=0;w<r;w++){var t=L[l+w>>>0],u=Fa[a];0===t||10===t?((1===a?da:E)(va(u,0)),u.length=0):u.push(t)}g+=r}N[f>>2>>>0]=g;return 0},r:function(a,b){a>>>=0;Ha(L.subarray(a>>>0,a+(b>>>0)>>>0));return 0},C:La,c:function(a,b,c,f){return La(a>>>0,b>>>0,c>>>0,f>>>0)}};\n(function(){function a(c){c=c.exports;I=c=Oa(c);H=I.L;ea();ha.unshift(I.M);O--;e.monitorRunDependencies&&e.monitorRunDependencies(O);if(0==O&&(null!==P&&(clearInterval(P),P=null),Q)){var f=Q;Q=null;f()}return c}var b={a:Na};O++;e.monitorRunDependencies&&e.monitorRunDependencies(O);if(e.instantiateWasm)try{return e.instantiateWasm(b,a)}catch(c){E(\"Module.instantiateWasm callback failed with error: \"+c),h(c)}pa(b,function(c){a(c.instance)}).catch(h);return{}})();\ne._OrtInit=(a,b)=>(e._OrtInit=I.N)(a,b);e._OrtGetLastError=(a,b)=>(e._OrtGetLastError=I.O)(a,b);e._OrtCreateSessionOptions=(a,b,c,f,g,k,l,r,w,t)=>(e._OrtCreateSessionOptions=I.P)(a,b,c,f,g,k,l,r,w,t);e._OrtAppendExecutionProvider=(a,b)=>(e._OrtAppendExecutionProvider=I.Q)(a,b);e._OrtAddSessionConfigEntry=(a,b,c)=>(e._OrtAddSessionConfigEntry=I.R)(a,b,c);e._OrtReleaseSessionOptions=a=>(e._OrtReleaseSessionOptions=I.S)(a);e._OrtCreateSession=(a,b,c)=>(e._OrtCreateSession=I.T)(a,b,c);\ne._OrtReleaseSession=a=>(e._OrtReleaseSession=I.U)(a);e._OrtGetInputOutputCount=(a,b,c)=>(e._OrtGetInputOutputCount=I.V)(a,b,c);e._OrtGetInputName=(a,b)=>(e._OrtGetInputName=I.W)(a,b);e._OrtGetOutputName=(a,b)=>(e._OrtGetOutputName=I.X)(a,b);e._OrtFree=a=>(e._OrtFree=I.Y)(a);e._OrtCreateTensor=(a,b,c,f,g)=>(e._OrtCreateTensor=I.Z)(a,b,c,f,g);e._OrtGetTensorData=(a,b,c,f,g)=>(e._OrtGetTensorData=I._)(a,b,c,f,g);e._OrtReleaseTensor=a=>(e._OrtReleaseTensor=I.$)(a);\ne._OrtCreateRunOptions=(a,b,c,f)=>(e._OrtCreateRunOptions=I.aa)(a,b,c,f);e._OrtAddRunConfigEntry=(a,b,c)=>(e._OrtAddRunConfigEntry=I.ba)(a,b,c);e._OrtReleaseRunOptions=a=>(e._OrtReleaseRunOptions=I.ca)(a);e._OrtRun=(a,b,c,f,g,k,l,r)=>(e._OrtRun=I.da)(a,b,c,f,g,k,l,r);e._OrtEndProfiling=a=>(e._OrtEndProfiling=I.ea)(a);var ya=e._malloc=a=>(ya=e._malloc=I.fa)(a);e._free=a=>(e._free=I.ga)(a);var Ma=a=>(Ma=I.ia)(a),Pa=()=>(Pa=I.ja)(),Qa=a=>(Qa=I.ka)(a),Ra=a=>(Ra=I.la)(a);\nfunction Oa(a){a=Object.assign({},a);var b=f=>()=>f()>>>0,c=f=>g=>f(g)>>>0;a.__errno_location=b(a.__errno_location);a.malloc=c(a.malloc);a.stackSave=b(a.stackSave);a.stackAlloc=c(a.stackAlloc);return a}e.stackAlloc=Ra;e.stackSave=Pa;e.stackRestore=Qa;e.UTF8ToString=U;e.stringToUTF8=(a,b,c)=>W(a,L,b,c);e.lengthBytesUTF8=V;var Z;Q=function Sa(){Z||Ta();Z||(Q=Sa)};\nfunction Ta(){function a(){if(!Z&&(Z=!0,e.calledRun=!0,!J)){T(ha);aa(e);if(e.onRuntimeInitialized)e.onRuntimeInitialized();if(e.postRun)for(\"function\"==typeof e.postRun&&(e.postRun=[e.postRun]);e.postRun.length;){var b=e.postRun.shift();ia.unshift(b)}T(ia)}}if(!(0<O)){if(e.preRun)for(\"function\"==typeof e.preRun&&(e.preRun=[e.preRun]);e.preRun.length;)ja();T(fa);0<O||(e.setStatus?(e.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){e.setStatus(\"\")},1);a()},1)):a())}}\nif(e.preInit)for(\"function\"==typeof e.preInit&&(e.preInit=[e.preInit]);0<e.preInit.length;)e.preInit.pop()();Ta();\n\n\n  return moduleArg.ready\n}\n\n);\n})();\nif (typeof exports === 'object' && typeof module === 'object')\n  module.exports = ortWasm;\nelse if (typeof define === 'function' && define['amd'])\n  define([], () => ortWasm);\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nexports.__esModule = true;\r\nvar Guid = /** @class */ (function () {\r\n    function Guid(guid) {\r\n        if (!guid) {\r\n            throw new TypeError(\"Invalid argument; `value` has no value.\");\r\n        }\r\n        this.value = Guid.EMPTY;\r\n        if (guid && Guid.isGuid(guid)) {\r\n            this.value = guid;\r\n        }\r\n    }\r\n    Guid.isGuid = function (guid) {\r\n        var value = guid.toString();\r\n        return guid && (guid instanceof Guid || Guid.validator.test(value));\r\n    };\r\n    Guid.create = function () {\r\n        return new Guid([Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\"));\r\n    };\r\n    Guid.createEmpty = function () {\r\n        return new Guid(\"emptyguid\");\r\n    };\r\n    Guid.parse = function (guid) {\r\n        return new Guid(guid);\r\n    };\r\n    Guid.raw = function () {\r\n        return [Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\");\r\n    };\r\n    Guid.gen = function (count) {\r\n        var out = \"\";\r\n        for (var i = 0; i < count; i++) {\r\n            // tslint:disable-next-line:no-bitwise\r\n            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n        }\r\n        return out;\r\n    };\r\n    Guid.prototype.equals = function (other) {\r\n        // Comparing string `value` against provided `guid` will auto-call\r\n        // toString on `guid` for comparison\r\n        return Guid.isGuid(other) && this.value === other.toString();\r\n    };\r\n    Guid.prototype.isEmpty = function () {\r\n        return this.value === Guid.EMPTY;\r\n    };\r\n    Guid.prototype.toString = function () {\r\n        return this.value;\r\n    };\r\n    Guid.prototype.toJSON = function () {\r\n        return {\r\n            value: this.value\r\n        };\r\n    };\r\n    Guid.validator = new RegExp(\"^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$\", \"i\");\r\n    Guid.EMPTY = \"00000000-0000-0000-0000-000000000000\";\r\n    return Guid;\r\n}());\r\nexports.Guid = Guid;\r\n","// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available across modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    CustomError.prototype = Object.create(Error.prototype, {\n        constructor: {\n            value: CustomError,\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n        name: {\n            get: function get() { return name; },\n            set: undefined,\n            enumerable: false,\n            // configurable: false would accurately preserve the behavior of\n            // the original, but I'm guessing that was not intentional.\n            // For an actual error subclass, this property would\n            // be configurable.\n            configurable: true,\n        },\n        toString: {\n            value: function value() { return this.name + \": \" + this.message; },\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n    });\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","module.exports = __WEBPACK_EXTERNAL_MODULE__1670__;","// GENERATED FILE. DO NOT EDIT.\nvar Long = (function(exports) {\n  \"use strict\";\n  \n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  \n  /**\n   * @license\n   * Copyright 2009 The Closure Library Authors\n   * Copyright 2020 Daniel Wirtz / The long.js Authors.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *\n   * SPDX-License-Identifier: Apache-2.0\n   */\n  // WebAssembly optimizations to do native i64 multiplication and divide\n  var wasm = null;\n  \n  try {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;\n  } catch (e) {// no wasm support :(\n  }\n  /**\n   * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n   *  See the from* functions below for more convenient ways of constructing Longs.\n   * @exports Long\n   * @class A Long class for representing a 64 bit two's-complement integer value.\n   * @param {number} low The low (signed) 32 bits of the long\n   * @param {number} high The high (signed) 32 bits of the long\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @constructor\n   */\n  \n  \n  function Long(low, high, unsigned) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     */\n    this.low = low | 0;\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     */\n  \n    this.high = high | 0;\n    /**\n     * Whether unsigned or not.\n     * @type {boolean}\n     */\n  \n    this.unsigned = !!unsigned;\n  } // The internal representation of a long is the two given signed, 32-bit values.\n  // We use 32-bit pieces because these are the size of integers on which\n  // Javascript performs bit-operations.  For operations like addition and\n  // multiplication, we split each number into 16 bit pieces, which can easily be\n  // multiplied within Javascript's floating-point representation without overflow\n  // or change in sign.\n  //\n  // In the algorithms below, we frequently reduce the negative case to the\n  // positive case by negating the input(s) and then post-processing the result.\n  // Note that we must ALWAYS check specially whether those values are MIN_VALUE\n  // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n  // a positive number, it overflows back into a negative).  Not handling this\n  // case would often result in infinite recursion.\n  //\n  // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n  // methods on which they depend.\n  \n  /**\n   * An indicator used to reliably determine if an object is a Long or not.\n   * @type {boolean}\n   * @const\n   * @private\n   */\n  \n  \n  Long.prototype.__isLong__;\n  Object.defineProperty(Long.prototype, \"__isLong__\", {\n    value: true\n  });\n  /**\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   * @inner\n   */\n  \n  function isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n  }\n  /**\n   * @function\n   * @param {*} value number\n   * @returns {number}\n   * @inner\n   */\n  \n  \n  function ctz32(value) {\n    var c = Math.clz32(value & -value);\n    return value ? 31 - c : c;\n  }\n  /**\n   * Tests if the specified object is a Long.\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   */\n  \n  \n  Long.isLong = isLong;\n  /**\n   * A cache of the Long representations of small integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var INT_CACHE = {};\n  /**\n   * A cache of the Long representations of small unsigned integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var UINT_CACHE = {};\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromInt(value, unsigned) {\n    var obj, cachedObj, cache;\n  \n    if (unsigned) {\n      value >>>= 0;\n  \n      if (cache = 0 <= value && value < 256) {\n        cachedObj = UINT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, 0, true);\n      if (cache) UINT_CACHE[value] = obj;\n      return obj;\n    } else {\n      value |= 0;\n  \n      if (cache = -128 <= value && value < 128) {\n        cachedObj = INT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, value < 0 ? -1 : 0, false);\n      if (cache) INT_CACHE[value] = obj;\n      return obj;\n    }\n  }\n  /**\n   * Returns a Long representing the given 32 bit integer value.\n   * @function\n   * @param {number} value The 32 bit integer in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromInt = fromInt;\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromNumber(value, unsigned) {\n    if (isNaN(value)) return unsigned ? UZERO : ZERO;\n  \n    if (unsigned) {\n      if (value < 0) return UZERO;\n      if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;\n    } else {\n      if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;\n      if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;\n    }\n  \n    if (value < 0) return fromNumber(-value, unsigned).neg();\n    return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);\n  }\n  /**\n   * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n   * @function\n   * @param {number} value The number in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromNumber = fromNumber;\n  /**\n   * @param {number} lowBits\n   * @param {number} highBits\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n  }\n  /**\n   * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n   *  assumed to use 32 bits.\n   * @function\n   * @param {number} lowBits The low 32 bits\n   * @param {number} highBits The high 32 bits\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBits = fromBits;\n  /**\n   * @function\n   * @param {number} base\n   * @param {number} exponent\n   * @returns {number}\n   * @inner\n   */\n  \n  var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n  \n  /**\n   * @param {string} str\n   * @param {(boolean|number)=} unsigned\n   * @param {number=} radix\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromString(str, unsigned, radix) {\n    if (str.length === 0) throw Error('empty string');\n  \n    if (typeof unsigned === 'number') {\n      // For goog.math.long compatibility\n      radix = unsigned;\n      unsigned = false;\n    } else {\n      unsigned = !!unsigned;\n    }\n  \n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\") return unsigned ? UZERO : ZERO;\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    var p;\n    if ((p = str.indexOf('-')) > 0) throw Error('interior hyphen');else if (p === 0) {\n      return fromString(str.substring(1), unsigned, radix).neg();\n    } // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n  \n    for (var i = 0; i < str.length; i += 8) {\n      var size = Math.min(8, str.length - i),\n          value = parseInt(str.substring(i, i + size), radix);\n  \n      if (size < 8) {\n        var power = fromNumber(pow_dbl(radix, size));\n        result = result.mul(power).add(fromNumber(value));\n      } else {\n        result = result.mul(radixToPower);\n        result = result.add(fromNumber(value));\n      }\n    }\n  \n    result.unsigned = unsigned;\n    return result;\n  }\n  /**\n   * Returns a Long representation of the given string, written using the specified radix.\n   * @function\n   * @param {string} str The textual representation of the Long\n   * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n   * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromString = fromString;\n  /**\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromValue(val, unsigned) {\n    if (typeof val === 'number') return fromNumber(val, unsigned);\n    if (typeof val === 'string') return fromString(val, unsigned); // Throws for non-objects, converts non-instanceof Long:\n  \n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n  }\n  /**\n   * Converts the specified value to a Long using the appropriate from* function for its type.\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long}\n   */\n  \n  \n  Long.fromValue = fromValue; // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n  // no runtime penalty for these.\n  \n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_16_DBL = 1 << 16;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24_DBL = 1 << 24;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n  /**\n   * @type {!Long}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ZERO = fromInt(0);\n  /**\n   * Signed zero.\n   * @type {!Long}\n   */\n  \n  Long.ZERO = ZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UZERO = fromInt(0, true);\n  /**\n   * Unsigned zero.\n   * @type {!Long}\n   */\n  \n  Long.UZERO = UZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ONE = fromInt(1);\n  /**\n   * Signed one.\n   * @type {!Long}\n   */\n  \n  Long.ONE = ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UONE = fromInt(1, true);\n  /**\n   * Unsigned one.\n   * @type {!Long}\n   */\n  \n  Long.UONE = UONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var NEG_ONE = fromInt(-1);\n  /**\n   * Signed negative one.\n   * @type {!Long}\n   */\n  \n  Long.NEG_ONE = NEG_ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n  /**\n   * Maximum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_VALUE = MAX_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n  /**\n   * Maximum unsigned value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n  /**\n   * Minimum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MIN_VALUE = MIN_VALUE;\n  /**\n   * @alias Long.prototype\n   * @inner\n   */\n  \n  var LongPrototype = Long.prototype;\n  /**\n   * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  LongPrototype.toInt = function toInt() {\n    return this.unsigned ? this.low >>> 0 : this.low;\n  };\n  /**\n   * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.toNumber = function toNumber() {\n    if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n  };\n  /**\n   * Converts the Long to a string written in the specified radix.\n   * @this {!Long}\n   * @param {number=} radix Radix (2-36), defaults to 10\n   * @returns {string}\n   * @override\n   * @throws {RangeError} If `radix` is out of range\n   */\n  \n  \n  LongPrototype.toString = function toString(radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    if (this.isZero()) return '0';\n  \n    if (this.isNegative()) {\n      // Unsigned Longs are never negative\n      if (this.eq(MIN_VALUE)) {\n        // We need to change the Long value before it can be negated, so we remove\n        // the bottom-most digit in this base and then recurse to do the rest.\n        var radixLong = fromNumber(radix),\n            div = this.div(radixLong),\n            rem1 = div.mul(radixLong).sub(this);\n        return div.toString(radix) + rem1.toInt().toString(radix);\n      } else return '-' + this.neg().toString(radix);\n    } // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n  \n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n        rem = this;\n    var result = '';\n  \n    while (true) {\n      var remDiv = rem.div(radixToPower),\n          intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n          digits = intval.toString(radix);\n      rem = remDiv;\n      if (rem.isZero()) return digits + result;else {\n        while (digits.length < 6) digits = '0' + digits;\n  \n        result = '' + digits + result;\n      }\n    }\n  };\n  /**\n   * Gets the high 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed high bits\n   */\n  \n  \n  LongPrototype.getHighBits = function getHighBits() {\n    return this.high;\n  };\n  /**\n   * Gets the high 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned high bits\n   */\n  \n  \n  LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n    return this.high >>> 0;\n  };\n  /**\n   * Gets the low 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed low bits\n   */\n  \n  \n  LongPrototype.getLowBits = function getLowBits() {\n    return this.low;\n  };\n  /**\n   * Gets the low 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned low bits\n   */\n  \n  \n  LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n    return this.low >>> 0;\n  };\n  /**\n   * Gets the number of bits needed to represent the absolute value of this Long.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n    if (this.isNegative()) // Unsigned Longs are never negative\n      return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n    var val = this.high != 0 ? this.high : this.low;\n  \n    for (var bit = 31; bit > 0; bit--) if ((val & 1 << bit) != 0) break;\n  \n    return this.high != 0 ? bit + 33 : bit + 1;\n  };\n  /**\n   * Tests if this Long's value equals zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isZero = function isZero() {\n    return this.high === 0 && this.low === 0;\n  };\n  /**\n   * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eqz = LongPrototype.isZero;\n  /**\n   * Tests if this Long's value is negative.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  LongPrototype.isNegative = function isNegative() {\n    return !this.unsigned && this.high < 0;\n  };\n  /**\n   * Tests if this Long's value is positive or zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isPositive = function isPositive() {\n    return this.unsigned || this.high >= 0;\n  };\n  /**\n   * Tests if this Long's value is odd.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isOdd = function isOdd() {\n    return (this.low & 1) === 1;\n  };\n  /**\n   * Tests if this Long's value is even.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isEven = function isEven() {\n    return (this.low & 1) === 0;\n  };\n  /**\n   * Tests if this Long's value equals the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.equals = function equals(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\n    return this.high === other.high && this.low === other.low;\n  };\n  /**\n   * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eq = LongPrototype.equals;\n  /**\n   * Tests if this Long's value differs from the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.notEquals = function notEquals(other) {\n    return !this.eq(\n    /* validates */\n    other);\n  };\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.neq = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ne = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value is less than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThan = function lessThan(other) {\n    return this.comp(\n    /* validates */\n    other) < 0;\n  };\n  /**\n   * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lt = LongPrototype.lessThan;\n  /**\n   * Tests if this Long's value is less than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) <= 0;\n  };\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lte = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.le = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThan = function greaterThan(other) {\n    return this.comp(\n    /* validates */\n    other) > 0;\n  };\n  /**\n   * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gt = LongPrototype.greaterThan;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) >= 0;\n  };\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ge = LongPrototype.greaterThanOrEqual;\n  /**\n   * Compares this Long's value with the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  LongPrototype.compare = function compare(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.eq(other)) return 0;\n    var thisNeg = this.isNegative(),\n        otherNeg = other.isNegative();\n    if (thisNeg && !otherNeg) return -1;\n    if (!thisNeg && otherNeg) return 1; // At this point the sign bits are the same\n  \n    if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1; // Both are positive if at least one is unsigned\n  \n    return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n  };\n  /**\n   * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  \n  LongPrototype.comp = LongPrototype.compare;\n  /**\n   * Negates this Long's value.\n   * @this {!Long}\n   * @returns {!Long} Negated Long\n   */\n  \n  LongPrototype.negate = function negate() {\n    if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;\n    return this.not().add(ONE);\n  };\n  /**\n   * Negates this Long's value. This is an alias of {@link Long#negate}.\n   * @function\n   * @returns {!Long} Negated Long\n   */\n  \n  \n  LongPrototype.neg = LongPrototype.negate;\n  /**\n   * Returns the sum of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} addend Addend\n   * @returns {!Long} Sum\n   */\n  \n  LongPrototype.add = function add(addend) {\n    if (!isLong(addend)) addend = fromValue(addend); // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the difference of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.subtract = function subtract(subtrahend) {\n    if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);\n    return this.add(subtrahend.neg());\n  };\n  /**\n   * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n   * @function\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.sub = LongPrototype.subtract;\n  /**\n   * Returns the product of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  LongPrototype.multiply = function multiply(multiplier) {\n    if (this.isZero()) return this;\n    if (!isLong(multiplier)) multiplier = fromValue(multiplier); // use wasm support if present\n  \n    if (wasm) {\n      var low = wasm[\"mul\"](this.low, this.high, multiplier.low, multiplier.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (multiplier.isZero()) return this.unsigned ? UZERO : ZERO;\n    if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;\n    if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;\n  \n    if (this.isNegative()) {\n      if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());else return this.neg().mul(multiplier).neg();\n    } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg(); // If both longs are small, use float multiplication\n  \n  \n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24)) return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned); // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n   * @function\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  \n  LongPrototype.mul = LongPrototype.multiply;\n  /**\n   * Returns this Long divided by the specified. The result is signed if this Long is signed or\n   *  unsigned if this Long is unsigned.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  LongPrototype.divide = function divide(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor);\n    if (divisor.isZero()) throw Error('division by zero'); // use wasm support if present\n  \n    if (wasm) {\n      // guard against signed division overflow: the largest\n      // negative number / -1 would be 1 larger than the largest\n      // positive number, due to two's complement.\n      if (!this.unsigned && this.high === -0x80000000 && divisor.low === -1 && divisor.high === -1) {\n        // be consistent with non-wasm code path\n        return this;\n      }\n  \n      var low = (this.unsigned ? wasm[\"div_u\"] : wasm[\"div_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (this.isZero()) return this.unsigned ? UZERO : ZERO;\n    var approx, rem, res;\n  \n    if (!this.unsigned) {\n      // This section is only relevant for signed longs and is derived from the\n      // closure library as a whole.\n      if (this.eq(MIN_VALUE)) {\n        if (divisor.eq(ONE) || divisor.eq(NEG_ONE)) return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n        else if (divisor.eq(MIN_VALUE)) return ONE;else {\n          // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n          var halfThis = this.shr(1);\n          approx = halfThis.div(divisor).shl(1);\n  \n          if (approx.eq(ZERO)) {\n            return divisor.isNegative() ? ONE : NEG_ONE;\n          } else {\n            rem = this.sub(divisor.mul(approx));\n            res = approx.add(rem.div(divisor));\n            return res;\n          }\n        }\n      } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;\n  \n      if (this.isNegative()) {\n        if (divisor.isNegative()) return this.neg().div(divisor.neg());\n        return this.neg().div(divisor).neg();\n      } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();\n  \n      res = ZERO;\n    } else {\n      // The algorithm below has not been made for unsigned longs. It's therefore\n      // required to take special care of the MSB prior to running it.\n      if (!divisor.unsigned) divisor = divisor.toUnsigned();\n      if (divisor.gt(this)) return UZERO;\n      if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n        return UONE;\n      res = UZERO;\n    } // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n  \n  \n    rem = this;\n  \n    while (rem.gte(divisor)) {\n      // Approximate the result of division. This may be a little greater or\n      // smaller than the actual value.\n      approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber())); // We will tweak the approximate result by changing it in the 48-th digit or\n      // the smallest non-fractional digit, whichever is larger.\n  \n      var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n          delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),\n          // Decrease the approximation until it is smaller than the remainder.  Note\n      // that if it is too large, the product overflows and is negative.\n      approxRes = fromNumber(approx),\n          approxRem = approxRes.mul(divisor);\n  \n      while (approxRem.isNegative() || approxRem.gt(rem)) {\n        approx -= delta;\n        approxRes = fromNumber(approx, this.unsigned);\n        approxRem = approxRes.mul(divisor);\n      } // We know the answer can't be zero... and actually, zero would cause\n      // infinite recursion since we would make no progress.\n  \n  \n      if (approxRes.isZero()) approxRes = ONE;\n      res = res.add(approxRes);\n      rem = rem.sub(approxRem);\n    }\n  \n    return res;\n  };\n  /**\n   * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  \n  LongPrototype.div = LongPrototype.divide;\n  /**\n   * Returns this Long modulo the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.modulo = function modulo(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor); // use wasm support if present\n  \n    if (wasm) {\n      var low = (this.unsigned ? wasm[\"rem_u\"] : wasm[\"rem_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    return this.sub(this.div(divisor).mul(divisor));\n  };\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  \n  LongPrototype.mod = LongPrototype.modulo;\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.rem = LongPrototype.modulo;\n  /**\n   * Returns the bitwise NOT of this Long.\n   * @this {!Long}\n   * @returns {!Long}\n   */\n  \n  LongPrototype.not = function not() {\n    return fromBits(~this.low, ~this.high, this.unsigned);\n  };\n  /**\n   * Returns count leading zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.countLeadingZeros = function countLeadingZeros() {\n    return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;\n  };\n  /**\n   * Returns count leading zeros. This is an alias of {@link Long#countLeadingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.clz = LongPrototype.countLeadingZeros;\n  /**\n   * Returns count trailing zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  LongPrototype.countTrailingZeros = function countTrailingZeros() {\n    return this.low ? ctz32(this.low) : ctz32(this.high) + 32;\n  };\n  /**\n   * Returns count trailing zeros. This is an alias of {@link Long#countTrailingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.ctz = LongPrototype.countTrailingZeros;\n  /**\n   * Returns the bitwise AND of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  LongPrototype.and = function and(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise OR of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.or = function or(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise XOR of this Long and the given one.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.xor = function xor(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shiftLeft = function shiftLeft(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);else return fromBits(0, this.low << numBits - 32, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shl = LongPrototype.shiftLeft;\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRight = function shiftRight(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);else return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shr = LongPrototype.shiftRight;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >>> numBits, this.unsigned);\n    if (numBits === 32) return fromBits(this.high, 0, this.unsigned);\n    return fromBits(this.high >>> numBits - 32, 0, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits rotated to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateLeft = function rotateLeft(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.low << numBits | this.high >>> b, this.high << numBits | this.low >>> b, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.high << numBits | this.low >>> b, this.low << numBits | this.high >>> b, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotl = LongPrototype.rotateLeft;\n  /**\n   * Returns this Long with bits rotated to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateRight = function rotateRight(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.high << b | this.low >>> numBits, this.low << b | this.high >>> numBits, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.low << b | this.high >>> numBits, this.high << b | this.low >>> numBits, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotr = LongPrototype.rotateRight;\n  /**\n   * Converts this Long to signed.\n   * @this {!Long}\n   * @returns {!Long} Signed long\n   */\n  \n  LongPrototype.toSigned = function toSigned() {\n    if (!this.unsigned) return this;\n    return fromBits(this.low, this.high, false);\n  };\n  /**\n   * Converts this Long to unsigned.\n   * @this {!Long}\n   * @returns {!Long} Unsigned long\n   */\n  \n  \n  LongPrototype.toUnsigned = function toUnsigned() {\n    if (this.unsigned) return this;\n    return fromBits(this.low, this.high, true);\n  };\n  /**\n   * Converts this Long to its byte representation.\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @this {!Long}\n   * @returns {!Array.<number>} Byte representation\n   */\n  \n  \n  LongPrototype.toBytes = function toBytes(le) {\n    return le ? this.toBytesLE() : this.toBytesBE();\n  };\n  /**\n   * Converts this Long to its little endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Little endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesLE = function toBytesLE() {\n    var hi = this.high,\n        lo = this.low;\n    return [lo & 0xff, lo >>> 8 & 0xff, lo >>> 16 & 0xff, lo >>> 24, hi & 0xff, hi >>> 8 & 0xff, hi >>> 16 & 0xff, hi >>> 24];\n  };\n  /**\n   * Converts this Long to its big endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Big endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesBE = function toBytesBE() {\n    var hi = this.high,\n        lo = this.low;\n    return [hi >>> 24, hi >>> 16 & 0xff, hi >>> 8 & 0xff, hi & 0xff, lo >>> 24, lo >>> 16 & 0xff, lo >>> 8 & 0xff, lo & 0xff];\n  };\n  /**\n   * Creates a Long from its byte representation.\n   * @param {!Array.<number>} bytes Byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytes = function fromBytes(bytes, unsigned, le) {\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\n  };\n  /**\n   * Creates a Long from its little endian byte representation.\n   * @param {!Array.<number>} bytes Little endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {\n    return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);\n  };\n  /**\n   * Creates a Long from its big endian byte representation.\n   * @param {!Array.<number>} bytes Big endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {\n    return new Long(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);\n  };\n  \n  var _default = Long;\n  exports.default = _default;\n  return \"default\" in exports ? exports.default : exports;\n})({});\nif (typeof define === 'function' && define.amd) define([], function() { return Long; });\nelse if (typeof module === 'object' && typeof exports === 'object') module.exports = Long;\n","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZE_PREFIX_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {!flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {!Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {!flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n * @param {boolean=} opt_size_prefix\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier, opt_size_prefix) {\n  var size_prefix = opt_size_prefix ? flatbuffers.SIZE_PREFIX_LENGTH : 0;\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH + size_prefix);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT + size_prefix);\n  this.addOffset(root_table);\n  if (size_prefix) {\n    this.addInt32(this.bb.capacity() - this.space);\n  }\n  this.bb.setPosition(this.space);\n};\n\n/**\n * Finalize a size prefixed buffer, pointing to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finishSizePrefixed = function (root_table, opt_file_identifier) {\n  this.finish(root_table, opt_file_identifier, true);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {!flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|!Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(1057);\n"],"names":["root","factory","exports","module","require","define","amd","a","i","self","__WEBPACK_EXTERNAL_MODULE__1670__","onnxjsBackend","init","createSessionHandler","pathOrBuffer","options","session","Session","loadModel","OnnxjsSessionHandler","initializeFlags","env","wasm","initTimeout","simd","proxy","numThreads","Number","isInteger","numCpuLogicalCores","navigator","cpus","length","hardwareConcurrency","Math","min","ceil","wasmBackend","initializeWebAssemblyInstance","handler","OnnxruntimeWebAssemblySessionHandler","Promise","resolve","registerBackend","versions","web","version","AttributeWithCacheKeyImpl","constructor","attribute","Object","assign","this","cacheKey","_cacheKey","getOwnPropertyNames","sort","map","name","join","createAttributeWithCacheKey","ortFbs","onnxruntime","experimental","fbs","Attribute","attributes","_attributes","Map","attr","onnx","AttributeProto","set","getValue","getType","size","Error","key","type","value","delete","getFloat","defaultValue","get","getInt","getString","getTensor","getFloats","getInts","getStrings","getTensors","valueAndType","undefined","static","AttributeType","FLOAT","INT","STRING","TENSOR","FLOATS","INTS","STRINGS","TENSORS","attrType","GRAPH","GRAPHS","getValueNoCheck","LongUtil","isLong","longToNumber","arr","numberValue","Array","maybeLong","Tensor","fromProto","fromOrtTensor","utf8String","decodeUtf8String","getValueNoCheckFromOnnxFormat","getValueNoCheckFromOrtFormat","f","s","t","g","floats","ints","strings","tensors","graphs","floatsArray","intsLength","push","stringsLength","tensorsLength","backendsCache","tryLoadBackend","backendHint","backendObj","backend","obj","o","initialize","dispose","isBackend","webgl","WebGLBackend","resolveBackend","hint","hints","cache","contextId","matmulMaxBatchSize","textureCacheMode","pack","async","glContext","createWebGLContext","Logger","setWithEnv","verbose","e","warning","context","WebGLSessionHandler","CoordsGlslLib","GlslLib","super","getFunctions","offsetToCoords","coordsToOffset","toVec","valueFrom","getCommonUtilFuncs","getInputsSamplingSnippets","getOutputSamplingSnippet","getCustomTypes","GlslLibRoutine","outputLayout","outputTextureLayout","isPacked","getPackedOutputSamplingSnippet","getUnpackedOutputSamplingSnippet","outShape","unpackedShape","outTexShape","width","height","result","funcName","getOutputScalarCoords","getOutputPacked1DCoords","getOutputPacked2DCoords","getOutputPacked3DCoords","getOutputPackedNDCoords","floatTextureSetRGBASource","getGlsl","output","getOutputUnpacked1DCoords","getOutputUnpacked2DCoords","getOutputUnpacked3DCoords","getOutputUnpacked4DCoords","getOutputUnpacked5DCoords","getOutputUnpacked6DCoords","floatTextureSetRSource","shape","texShape","packedTexShape","source","ArrayUtil","arraysEqual","texelsInLogicalRow","texelsInBatch","texelsInBatchN","batches","coords","b","rank","strides","coordsToCompute","coordsFromIndexSnippet","stride","glsl","texture2D","programInfo","inputNames","forEach","samplerName","inputLayout","inputTextureLayouts","generateShaderFuncNameFromInputSamplerName","getPackedSamplerFromInput","getUnpackedSamplerFromInput","outCoordFuncName","generateShaderFuncNameFromInputSamplerNameAtOutCoords","getPackedSamplerAtOutputCoords","getUnpackedSamplerAtOutputCoords","inShape","texName","texFuncSnippet","inRank","outRank","broadcastDims","BroadcastUtil","getBroadcastDims","getCoordsDataType","rankDiff","coordsSnippet","fields","getGlChannels","d","unpackedCoordsSnippet","isInputScalar","ShapeUtil","isOutputScalar","rows","cols","indexOf","inTexShape","getPackedSamplerScalar","getPackedSampler1D","getPackedSampler2D","getPackedSampler3D","getPackedSamplerND","getUnpackedSamplerScalar","getUnpackedSampler1D","getUnpackedSampler2D","getUnpackedSampler3D","getUnpackedSampler4D","getUnpackedSampler5D","getUnpackedSampler6D","texNumR","texNumC","packedSampler","valuesPerRow","squeezedShape","slice","keptDims","newInputShape","squeezeInputShape","params","newInputLayout","JSON","parse","stringify","samplerRoutine","routineBody","getSqueezedParams","dependencies","index","tNumR","tNumC","newShape","squeezeShape","stride0","stride1","routine","revDims","reverse","stride2","stride3","stride4","xScale","yScale","stridesBlock","body","layout","getValueFromSingle","varName","transpose","getPackedValueFrom","FunctionType","addDependency","node","nodes","cycleCheck","Set","alreadyTraversed","createOrderedNodes","graphNodes","dfsTraverse","has","add","EncodingGlslLib","encodeFloat32","decodeFloat32","encode","decode","encodeUint8","endianness","isLittleEndian","decodeUint8","ArrayBuffer","Uint32Array","c","Uint8Array","FragColorGlslLib","setFragColor","getColorAsFloat","INLINE_FUNC_DEF_REGEX","script","inlineDefs","match","exec","split","tokens","trim","filter","v","regexString","replace","regex","RegExp","variable","declLine","newBody","paramRedecLine","replacement","libs","glslLibRoutineDependencyGraph","GlslContext","keys","glslRegistry","lib","libName","routinesInLib","currentNode","GlslLibRoutineNode","preprocess","shaderSource","hasMain","getDefaultFragShaderMain","replaceInlines","getFragShaderPreamble","getUniforms","variables","getImports","routinesIncluded","selectGlslLibRoutinesToBeIncluded","routines","classAndRoutine","TopologicalSortGlslRoutines","returnOrderedNodes","samplers","uniformLines","sampler","arrayLength","VecGlslLib","ShapeUtilsGlslLib","bcastIndex","bcastMatmulIndex","offsetToIndices","indicesToOffset","incrementIndices","outputRank","dimOffset","block","indexToOffsetSingle","offsetToIndicesSingle","shapeInit","GLSL_ES_2_0","varyingVertex","varyingFrag","outputDeclaration","GLSL_ES_3_0","outputShapeLength","binaryVecFunctions","copyVec","setVecItem","getVecItem","nameOp","sub","mul","div","fname","assignmentBlock","packedTextureDataCache","unpackedTextureDataCache","calculateTextureWidthAndHeight","textureType","layoutStrategy","executeProgram","program","inputs","inputTypes","inputTextureDatas","getOrCreateTextureData","texture","cacheHint","getProgramInfoUniqueKey","artifact","programManager","getArtifact","createTextureLayoutFromTextureType","dims","outputTextureData","createTextureData","build","setArtifact","runProgram","run","tensor","TextureType","packed","td","getTextureData","dataId","unpack","packedLastDimension","group","channels","adjustedKernelShape","adjustedLayout","buffer","numberData","numFeatureMaps","oldRowSize","newRowSize","Float32Array","oldOffset","newOffset","subarray","unpackedTextureLayout","createTextureLayoutFromShape","reverseWH","unpackedTextureData","createTextureDataFromLayoutBindTensor","dataType","data","usage","textureManager","createTextureFromLayout","createTextureDataFromTexture","reshapeUnpacked","input","reshapedDims","inputTD","unpacked","newTextureLayout","computeStrides","reshapePacked","isReshapeCheap","squeezedInputShape","processDims3D","squeezedOutputShape","squeezedInputTensor","squeezedOutputTensor","createPackedReshape3DProgramInfoLoader","cast","tensorId","textureData","_id","readTexture","readTextureAsync","setTextureData","isInitializer","isTextureLayoutCached","clearActiveTextures","releaseTexture","isFloat32DownloadSupported","readUint8TextureAsFloat","encodeAsUint8","createPackProgramInfoLoader","createUnpackProgramInfoLoader","WEBGL_OP_RESOLVE_RULES","unaryOps","abs","acos","binaryOps","and","asin","atan","averagePool","parseAveragePoolAttributes","batchNormalization","parseBatchNormalizationAttributes","parseCastAttributes","clip","parseClipAttributes","clipV11","concat","parseConcatAttributes","conv","parseConvAttributes","convTranspose","parseConvTransposeAttributes","cos","identity","depthToSpace","parseDepthToSpaceAttributes","equal","elu","parseEluAttributes","exp","flatten","parseFlattenAttributes","floor","gather","parseGatherAttributes","gemm","parseGemmAttributesV7","parseGemmAttributesV11","globalAveragePool","parseGlobalAveragePoolAttributes","globalMaxPool","greater","imageScaler","parseImageScalerAttributes","instanceNormalization","parseInstanceNormalizationAttributes","leakyRelu","parseLeakyReluAttributes","less","lrn","parseLrnAttributes","log","matMul","parseMatMulAttributes","maxPool","parseMaxPoolAttributes","neg","not","or","padV2","parsePadAttributesV2","padV11","parsePadAttributesV11","pow","pRelu","reduceLogSum","parseReduceAttributes","reduceMax","reduceMean","reduceMin","reduceProd","reduceSum","reduceLogSumSquare","relu","reshape","resize","parseResizeAttributesV10","parseResizeAttributesV11","sigmoid","sin","sliceV10","parseSliceAttributes","softmax","parseSoftmaxAttributes","softmaxV13","parseSoftmaxAttributesV13","parseSplitAttributes","sqrt","squeeze","parseSqueezeAttributes","squeezeV13","sum","tan","tanh","tile","parseTransposeAttributes","upsample","parseUpsampleAttributesV7","parseUpsampleAttributesV9","unsqueeze","parseUnsqueezeAttributes","unsqueezeV13","xor","batchNormalizationProgramMetadata","inferenceHandler","validateInputs","createBatchNormalizationProgramInfo","epsilon","momentum","spatial","scaleWidth","scaleHeight","X","scale","B","mean","var_","glslAdd","ValueBased","glslDiv","glslMul","glslSub","glslEqual","glslGreater","glslLess","glslAnd","glslOr","glslXor","glslPow","glslBuiltinBinary","glslPRelu","createBinaryProgramInfoLoader","glslFunc","outputTensorType","createBinaryProgramInfo","isBroadcast","areEqual","outputShape","usePackedTexture","calculatedShape","calcShape","aRank","bRank","aBcast","bBcast","to","ProtoUtil","tensorDataTypeFromProto","createPackedConcatProgramInfoLoader","metadata","inputCount","from","fill","axis","inputShape","dataNShape","axisIndex","getChannels","dtype","unpackChannel","unpackFromChannel","shapes","offsets","channel","lastChannels","allChannels","getValueSnippet","shift","getShiftedChannelsSnippet","lastIndex","x","createPackedConcatProgramInfo","channelIdx","idx","createUnpackedConcatProgramInfoLoader","sizeInConcatAxis","previousSum","getTextureIndexWhereDataResidesMethod","getTextureIndexWhereDataResidesLinearSearch","getTextureIndexWhereDataResidesBinarySearch","getFetchDataFromCorrectTextureMethod","getGetSizeInConcatAxisValueFromIndexMethod","createUnpackedConcatProgramInfo","numberOfTensors","tensorRank","codeLines","inputType","inputDimensionality","createUnpackedGroupedConvProgramInfoLoader","hasBias","processBias","xShape","wShape","outputChannelsPerGroup","autoPad","dilations","kernelShape","pads","calculateOutputShape","activationFunction","applyActivation","getActivationSnippet","createUnpackedGroupedConvProgramInfo","conv2DPackedPointwise","xshape","kshape","reshapedX","reshapedK","matmulInputs","matmulOutput","createPackedMatmulProgramInfoLoader","conv2DPacked","im2colOutput","createPackedIm2ColProgramInfoLoader","kernelReshaped","computeTotalPad","inDim","adj","kernel","dilation","outSize","distributePadding","totalPad","head","tail","smallPad","convTranspose2d","adjustedAttributes","getAdjustedConvTransposeAttributes","convTranspose2DUnpacked","valueInit","inputChannelsPerGroup","createUnpackedConvTransposeProgramInfo","createUnpackedConvTransposeProgramInfoLoader","outputPadding","spatialRank","updateShape","calculateOutputShapeAndPads","newAttributes","activationAttributes","parseInternalActivationAttributes","featureMaps","adjustPads","batchSize","inputSpatialShape","outChannels","dilatedKernelShape","outputSpatialShape","conv2d","getAdjustedConvAttributes","packMode","isPointwise","conv2DUnpackedPointwise","conv2DUnpacked","createMatmulProgramInfoLoader","xIm2Col","createIm2ColProgramInfoLoader","dotProductInputs","createDotProductProgramInfoLoader","PoolConvUtil","adjustPadsBasedOnAutoPad","blocksize","blocksizeSqr","transposePerm","mode","firstReshapeShape","firstReshapedTensor","transposeAttributes","perm","transposeOutput","secondReshapeShape","TypeError","activationCacheKey","createDotProductProgramMetadata","im2colShape","calculateIm2ColDims","kWidth","kHeight","im2colStrides","im2colWidth","im2colHeight","initValue","sharedDim","createDotProductProgramInfo","outputDims","flattenShape","r","func","activation","glslRelu","glslSigmoid","glslClip","clipMin","clipMax","activationName","MIN_CLIP","MAX_CLIP","createGatherProgramInfoLoader","gatherProgramMetadata","indexDataShape","normalizeAxis","indexCopyOps","createGatherProgramInfo","NUMBER_TYPES","createGemmProgramInfoLoader","parseGemmAttributes","isOptionalC","transA","transB","alpha","beta","createGemmProgramInfo","aShape","bShape","M","N","GemmUtil","getShapeOfGemmResult","line","w","wshape","kernelSize","unrolled","row","col","createPackedIm2ColProgramInfo","im2colDims","createIm2ColProgramInfo","createImageScalerProgramInfoLoader","bias","imageScalerProgramMetadata","createGetBiasMethod","createImageScalerProgramInfo","numChannels","meanAndVariance","createMeanAndVarianceProgramInfoLoader","createComputeOutputProgramInfoLoader","meanAndVarianceProgramMetadata","xDims","channelSize","createMeanAndVarianceProgramInfo","computeOutputProgramMetadata","meanAndVarianceShape","textureWidth","textureHeight","meanAndVarianceWidth","meanAndVarianceHeight","createComputeOutputProgramInfo","createLrnProgramInfoLoader","lrnProgramMetadata","C","createLrnProgramInfo","sharedDimIndex","coordsDataType","allGlChannels","getBiasForMatmulSnippet","getBiasForMatmul","getBcastedSamplerForMatmulSnippet","unpackedACoordsSnippet","unpackedBCoordsSnippet","inAShape","inBShape","inARank","inBRank","rankADiff","rankBDiff","broadcastADims","broadcastBDims","coordsASnippet","coordsBSnippet","swapDimSnippet","getBcastSamplerForMatmul","getSamplerAInLoopSnippet","res","getA","getSamplerBInLoopSnippet","getB","createPackedMatmulProgramInfo","createMatmulProgramMetadata","arank","brank","createMatmulProgramInfo","packProgramMetadata","unpackedReversed","inputRank","setup","reversedInputWH","outOfBoundsCondition","cond","getOutOfBoundsCondition","D","getOutput","createPackProgramInfo","getVecChannels","padProgramMetadata","validateInputsV2","createPadProgramInfo","validateInputsV11","attrubutes","generatePadAttributesFromInputs","integerData","floatData","padShape","getPadFunction","getPadConstant","getPadReflect","getPadEdge","createAveragePoolProgramInfo","ceilMode","countIncludePad","isGlobalOperator","getAdjustedPoolAttributesAndOutputShape","op2","generatePoolingCode","createMaxPoolProgramInfo","storageOrder","hasDilations","hasOwnProperty","call","adjustPoolAttributes","computePoolOutputShape","globalMaxPoolAttributes","globalMaxPoolMetadata","inputDims","op1","start","kw","sw","pwStart","pwEnd","dimW","codeW","codeH","codeHEnd","kh","sh","phStart","phEnd","dimH","kernelStrides","stridesRank","padsRank","offsetToIndicesFunction","copyInputDims","copyArray","copyPads","copyKernelStrides","copyStrides","padCode","reduce","cur","array","arrayName","reduceOp","reduceProgramMetadata","createReduceProgramInfo","axes","keepDims","iRank","idxCopy","normalizeAxes","ops","reduceOps","k","idxZero","input3D","outputShape3D","createPackedReshape3DProgramMetadata","inputShape3D","mainLoop","outputCoords","getReshapedInputCoords","getFlattenedIndexFrom3D","createPackedReshape3DProgramInfo","batch","isCheapReshape","calculateReshapedDims","resizeProgramMetadata","createPackedResizeProgramInfo","parseUpsampleAttributes","scales","prepareInputs","every","coordinateTransformMode","dim","outputHeight","outputWidth","inputHeight","inputWidth","scalesHeight","scalesWidth","getSourceFracIndex","outputSizes","scalesTensor","scalesInputIdx","sizesInputIdx","parseScalesData","isResize","sizesTensor","parseScalesDataFromOutputSize","yDims","scalesValidation","end","Int32Array","sliceProgramMetadata","createSliceProgramInfo","starts","ends","val","normalizedAxes","sliceOps","validateInputsV10","generateSliceAttributesFromInputs","some","softmaxComputeMaxProgramMetadata","softmaxComputeScaleProgramMetadata","softmaxProgramMetadata","logicalRowCount","sizeToDimension","featureCount","sizeFromDimension","computeSoftmax","isTransposeRequired","transposedInputShape","transposeAttribute","transposedInputs","_","p","computeMaxProgramInfo","createComputeMaxProgramInfo","max","computeScaleProgramInfo","createComputScaleProgramInfo","softMaxProgramInfo","createSoftMaxProgramInfo","maxElementPerLogicalRow","normalizationPerLogicalRow","splitProgramMetadata","count","getProgramCount","createSplitProgramInfo","numOutputs","outputs","SplitUtil","splitShape","offset","validateInputsV13","sumProgramMetadata","createSumProgramInfo","j","tileProgramMetadata","createTileProgramInfo","tileOps","transposeProgramMetadata","createTransposeProgramInfo","getAdjustedPerm","unpackedOutputShape","getOutputShape","getPermFunctionBody","sortBasedOnPerm","reverseFunc","downloadUint8AsFloat","glslAbs","glslBuiltinUnary","glslAcos","glslAsin","glslAtan","glslCeil","glslCos","glslElu","glslExp","glslFloor","glslIdentity","glslLeakyRelu","glslLog","glslNeg","glslNot","glslSin","glslSqrt","glslTan","glslTanh","createElementwiseProgramInfoLoader","createElementwiseProgramInfo","generateClipAttributesFromInputs","unpackProgramMetadata","createUnpackProgramInfo","innerDims","sourceCoords","getSourceCoords","unsqueezeShape","upsampleProgramMetadata","createUpsampleProgramInfo","opset","extrapolationValue","needRoiInput","useExtrapolation","nearestMode","cubicCoefficientA","excludeOutside","useNearest2xOptimization","roiInputIdx","outputPitches","inputPitches","precalculatedPitches","getInputFloatFunction","profiler","textureLayoutStrategy","repo","attributesBound","buildArtifact","event","gl","useProgram","bindOutput","bindAttributes","attribLocations","bindUniforms","uniformLocations","err","error","draw","vertexShader","deleteShader","deleteProgram","preprocessor","GlslPreprocessor","fragScript","compile","getUniformLocations","getAttribLocations","fragShaderScript","vertexShaderScript","getVertexShaderSource","compileShader","VERTEX_SHADER","debug","fragShader","FRAGMENT_SHADER","createProgram","attachFramebuffer","positionHandle","position","textureCoordHandle","textureCoord","setVertexAttributes","textures","texturePosition","location","find","bindTexture","uniform1fv","uniform1f","uniform1iv","uniform1i","uniformHandle","bindTextureToUniform","getAttribLocation","getUniformLocation","reference","PreferLogicalStrategy","maxTextureSize","ProgramManager","TextureManager","reuseTextures","pack2unpackMap","unpack2packMap","createInferenceHandler","WebGLInferenceHandler","onGraphInitialized","graph","initializers","getValues","addInitializer","opsets","op","resolveOperator","impl","opImpl","opInit","internalFormat","R32F","format","RED","RGBA32F","RGBA","src","textureSize","allocate","dataSize","dest","ALPHA","UNSIGNED_BYTE","_textureSize","byteOffset","byteLength","isEmptyArray","isArray","parseAxisParam","assert","ax","isInt","sizeFromShape","sizeToSquarishShape","computeTextureWH","prefs","breakAxis","wsize","hsize","totalSize","wh","computeTexture","logShape","squeezeResult","dimsToSkip","inferredDims","reversedWH","config","pendingRead","inUseTextures","idleTextures","textureLookup","textureDataType","toEncoderType","encoder","getEncoder","pop","updateTexture","toTextureData","allocateTexture","toTensorData","subscribers","createAndWaitForFence","tensorData","deleteTexture","splice","Int16Array","Int8Array","Uint16Array","Float64Array","_dataType","len","checkFn","delayFn","_counter","maxCounter","reject","tryCount","tryFn","nextBackoff","setTimeout","charAt","toUpperCase","createNewWebGLContext","canvas","ca","depth","antialias","stencil","preserveDrawingBuffer","premultipliedAlpha","failIfMajorPerformanceCaveat","getContext","WebGLContext","webgl2","OffscreenCanvas","createOffscreenCanvas","document","createElement","createCanvas","isContextLost","disable","DEPTH_TEST","STENCIL_TEST","BLEND","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","enable","SCISSOR_TEST","CULL_FACE","cullFace","BACK","linearSearchLastTrue","frameBufferBound","itemsToPoll","getExtensions","vertexbuffer","createVertexbuffer","framebuffer","createFramebuffer","queryVitalParameters","createTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","checkError","texSubImage2D","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","viewport","scissor","readPixels","isFramebufferReady","getActiveTexture","getParameter","ACTIVE_TEXTURE","TEXTURE0","getTextureBinding","TEXTURE_BINDING_2D","getFramebufferBinding","FRAMEBUFFER_BINDING","vertexAttribPointer","enableVertexAttribArray","attachShader","linkProgram","shaderType","shader","createShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","activeTexture","drawArrays","TRIANGLE_STRIP","getError","label","toString","DataEncoders","RedFloat32DataEncoder","isRenderFloat32Supported","RGBAFloatDataEncoder","textureHalfFloatExtension","HALF_FLOAT_OES","Uint8DataEncoder","unit","maxTextureImageUnits","disposed","deleteFramebuffer","bindBuffer","ARRAY_BUFFER","deleteBuffer","ELEMENT_ARRAY_BUFFER","finish","createDefaultGeometry","createBuffer","geometry","bufferData","STATIC_DRAW","fb","isFloatTextureAttachableToFrameBuffer","checkFloatTextureAttachableToFrameBuffer","checkRenderFloat32","checkFloat32Download","isBlendSupported","checkFloat32Blend","MAX_TEXTURE_SIZE","MAX_TEXTURE_IMAGE_UNITS","colorBufferFloatExtension","getExtension","disjointTimerQueryWebgl2Extension","textureFloatExtension","frameBuffer","isComplete","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","fragmentShader","POINTS","NO_ERROR","beginTimer","gl2","ext","query","createQuery","beginQuery","TIME_ELAPSED_EXT","endTimer","endQuery","isTimerResultAvailable","available","disjoint","getQueryParameter","QUERY_RESULT_AVAILABLE","GPU_DISJOINT_EXT","getTimerResult","timeElapsed","QUERY_RESULT","deleteQuery","waitForQueryAndGetTime","repeatedTry","fenceContext","createFence","pollFence","isFencePassed","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","status","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","addItemToPoll","pollItems","isDoneFn","resolveFn","KernelOp","getNodes","_ops","reset","_starter","resolved","_values","getInputIndices","execute","sessionHandler","modelInputs","graphInputs","sequence","graphValues","rear","thisOpIndex","thisOp","inputList","inputTensors","outputList","downstreamNodes","currentDownstreamNodeIndex","currentDownstreamNode","getOutputIndices","outputIndex","outputTensor","getData","Graph","graphProto","initializer","GraphImpl","Value","valueInfo","_from","_to","tensorValueTypeFromProto","tensorType","Node","_nodeProto","NodeProto","opType","tensorAttributesFromORTFormat","executeNode","graphInitializer","buildGraph","transformGraph","checkIsAcyclic","_allInputIndices","getInputNames","_allInputNames","_allOutputIndices","getOutputNames","_allOutputNames","_allData","_nodes","GraphProto","buildGraphFromOnnxFormat","buildGraphFromOrtFormat","dataIndices","nodesIndices","inputValueNames","currentIndex","tensorDimsFromProto","nodeProto","pick","dataIndex","inputsLength","inputName","nodeArgsLength","nodeArgs","valueType","TypeInfoValue","tensor_type","TensorTypeAndShape","elemType","dimLength","dimValue","initializersLength","tensorDimsFromORTFormat","outputsLength","outputName","nodesLength","attributesLength","starters","nodesStack","nodesState","nodeIndex","outgoingEdgeIndex","downstreamNodeIndex","removeAllIdentityNodes","removeAllDropoutNodes","fuseConvActivationNodes","finalizeGraph","newIndices","nodePossition","ind","currentData","deleteNode","inputValueIndex","outputValueIndex","nodesConsumingOutput","delIndex","replaceIndex","isActivation","n","next","child","SEVERITY_VALUE","info","fatal","LOGGER_PROVIDER_MAP","_severity","_content","_category","severity","content","category","console","color","LOGGER_DEFAULT_CONFIG","provider","minimalSeverity","logDateTime","logSourceLocation","LOGGER_CONFIG_MAP","arg0","arg1","arg2","arg3","bind","logInternal","stack","Date","toISOString","previousConfig","logLevel","Event","startTime","endCallback","timer","ctx","checkTimer","EventRecord","endTime","maxNumberEvents","flushBatchSize","flushIntervalInMilliseconds","_started","_flushPointer","_maxNumberEvents","_flushBatchSize","_flushIntervalInMilliseconds","_timingEvents","_flushTime","now","stop","logOneEvent","begin","isPromise","then","reason","eventRes","endSync","toFixed","currentTime","previousPointer","started","performance","load","buf","isOrtFormat","loadFromOnnxFormat","loadFromOrtFormat","modelProto","ModelProto","irVersion","_opsets","opsetImport","domain","_graph","flatbuffers","ByteBuffer","ortModel","InferenceSession","getRootAsInferenceSession","model","opsetImportLength","opsetId","INT_TYPES","FLOAT_TYPES","matchSelector","selector","endsWith","rangeStart","parseInt","substring","isNaN","pair","rangeEnd","rules","rule","versionSelector","DimensionValueType","TensorDataType","NodeType","Shape","bb","bb_pos","__init","readInt32","setPosition","SIZE_PREFIX_LENGTH","__offset","Dimension","__indirect","__vector","__vector_len","builder","startObject","addFieldOffset","startVector","addOffset","endVector","numElems","endObject","startShape","addDim","endShape","DimensionValue","denotation","optionalEncoding","__string","valueOffset","denotationOffset","startDimension","addValue","addDenotation","endDimension","dimType","readInt8","UNKNOWN","readInt64","createLong","dimParam","addFieldInt8","addFieldInt64","dimParamOffset","startDimensionValue","addDimType","addDimValue","addDimParam","endDimensionValue","UNDEFINED","addFieldInt32","shapeOffset","startTensorTypeAndShape","addElemType","addShape","endTensorTypeAndShape","MapType","keyType","TypeInfo","valueTypeOffset","startMapType","addKeyType","addValueType","endMapType","SequenceType","elemTypeOffset","startSequenceType","endSequenceType","EdgeEnd","readUint32","srcArgIndex","dstArgIndex","node_index","src_arg_index","dst_arg_index","prep","writeInt32","NodeEdge","inputEdges","inputEdgesLength","outputEdges","outputEdgesLength","inputEdgesOffset","outputEdgesOffset","startNodeEdge","addNodeIndex","addInputEdges","addOutputEdges","endNodeEdge","docString","sinceVersion","Primitive","executionProviderType","inputArgCounts","inputArgCountsLength","inputArgCountsArray","bytes","implicitInputs","implicitInputsLength","nameOffset","docStringOffset","domainOffset","opTypeOffset","executionProviderTypeOffset","inputsOffset","outputsOffset","attributesOffset","inputArgCountsOffset","addInt32","implicitInputsOffset","startNode","addName","addDocString","addDomain","addSinceVersion","addIndex","addOpType","addType","addExecutionProviderType","addInputs","addOutputs","addAttributes","addInputArgCounts","addImplicitInputs","endNode","ValueInfo","typeOffset","startValueInfo","endValueInfo","readUint8","NONE","__union","startTypeInfo","endTypeInfo","OperatorSetId","startOperatorSetId","addVersion","endOperatorSetId","dimsLength","rawData","rawDataLength","rawDataArray","stringData","stringDataLength","dimsOffset","addInt64","rawDataOffset","addInt8","stringDataOffset","startTensor","addDims","addDataType","addRawData","addStringData","endTensor","SparseTensor","values","indices","valuesOffset","indicesOffset","startSparseTensor","addValues","addIndices","endSparseTensor","readFloat32","floatsLength","graphsLength","addFieldFloat32","sOffset","tOffset","gOffset","floatsOffset","addFloat32","intsOffset","stringsOffset","tensorsOffset","graphsOffset","startAttribute","addF","addI","addS","addT","addG","addFloats","addInts","addStrings","addTensors","addGraphs","endAttribute","maxNodeIndex","nodeEdges","nodeEdgesLength","sparseInitializers","sparseInitializersLength","initializersOffset","nodeArgsOffset","nodesOffset","nodeEdgesOffset","sparseInitializersOffset","startGraph","addInitializers","addNodeArgs","addNodes","addMaxNodeIndex","addNodeEdges","addSparseInitializers","endGraph","Model","producerName","producerVersion","modelVersion","graphDocString","opsetImportOffset","producerNameOffset","producerVersionOffset","graphOffset","graphDocStringOffset","startModel","addIrVersion","addOpsetImport","addProducerName","addProducerVersion","addModelVersion","addGraph","addGraphDocString","endModel","KernelCreateInfos","nodeIndices","nodeIndicesLength","nodeIndicesArray","kernelDefHashes","readUint64","kernelDefHashesLength","nodeIndicesOffset","kernelDefHashesOffset","startKernelCreateInfos","addNodeIndices","addKernelDefHashes","endKernelCreateInfos","SubGraphSessionState","graphId","sessionState","SessionState","graphIdOffset","sessionStateOffset","requiredField","startSubGraphSessionState","addGraphId","addSessionState","endSubGraphSessionState","kernels","subGraphSessionStates","subGraphSessionStatesLength","kernelsOffset","subGraphSessionStatesOffset","startSessionState","addKernels","addSubGraphSessionStates","endSessionState","__has_identifier","ortVersion","ortVersionOffset","modelOffset","startInferenceSession","addOrtVersion","addModel","endInferenceSession","outputNames","feeds","_fetches","_options","inputMap","feed","outputMap","startProfiling","endProfiling","_initialized","Profiler","create","graphInputTypes","graphInputDims","_model","arg","process","promisify","readFile","response","fetch","arrayBuffer","isView","modelProtoBlob","initializeOps","_executionPlan","ExecutionPlan","normalizeAndValidateInputs","outputTensors","createOutput","modelInputNames","sortedInputs","sortedInputsIndex","validateInputTensorDims","modelInputIndices","modelValues","graphInput","validateInputTensorTypes","givenInputs","expectedType","actualType","noneDimSupported","expectedDims","actualDims","compareTensorDims","modelOutputNames","dataProvider","asyncDataProvider","_strides","Guid","validateDimsAndCalcSize","empty","RangeError","dataviewConstructor","sizeof","dataBuffer","createView","tensorProto","str","dataDest","dataSource","DataView","elementSize","sizeofProto","readProto","TensorProto","DataType","INT32","INT16","UINT16","INT8","UINT8","BOOL","int32Data","INT64","int64Data","DOUBLE","doubleData","UINT32","UINT64","uint64Data","element","ortTensor","BigInt64Array","greaterThanOrEqual","lessThan","toNumber","view","getUint8","getInt8","getUint16","getInt16","getFloat32","getInt32","getUint32","fromBits","getFloat64","expectedDimensions","expr","msg","n1","n2","MatMulUtil","dimsA","dimsB","adims","bdims","isMatMul","crank","cdims","cShapeMatMul","calcMatMulShape","aLen","bLen","broadcastedIndices","originalShape","originalIndices","fillIndex","inplace","resultType","outputIndices","originalIndicesA","originalIndicesB","rest","valA","valB","isAScalar","isBScalar","finalShape","finalRank","unshift","target","targetIndex","sourceIndex","blockSize","leftShape","transLeft","rightShape","transRight","biasShape","K","kDim","isValidBroadcast","typeProto","unsigned","Long","fromValue","low","high","getSizeFromDimensionRange","axisToIncrementOn","originalDims","shapeHints","nDims","unknownDimension","newTensorSize","oldTensorSize","pad","shape1","shape2","total","y","right","inSqueezeList","inputDimsIterator","determineSplit","numElementsAlongAxis","ReduceUtil","keepdims","calcReduceShape","inputStrides","indicesY","calcReduceByAxis","curAxisInd","pos","step","adjustPadAndReturnShape","computeShapeHelper","filterDims","inSize","padHeadIndex","padTailIndex","dkernel","padNeeded","TextDecoder","isProxy","proxyWorker","initWasmCallbacks","initOrtCallbacks","initializing","initialized","aborted","createSessionAllocateCallbacks","createSessionFinalizeCallbacks","createSessionCallbacks","releaseSessionCallbacks","runCallbacks","endProfilingCallbacks","ensureWorker","onProxyWorkerMessage","ev","out","scriptSrc","currentScript","wasmPaths","substr","lastIndexOf","terminate","onmessage","message","in","postMessage","initializeWebAssembly","initializeRuntime","core","initRuntime","createSessionAllocate","createSessionFinalize","modeldata","createSession","releaseSession","sessionId","inputIndices","extractTransferableBuffers","setRunOptions","getInstance","runOptionsHandle","allocs","runOptions","logSeverityLevel","logVerbosityLevel","tagDataOffset","tag","allocWasmString","_OrtCreateRunOptions","checkLastError","extra","iterateExtraOptions","WeakSet","keyDataOffset","valueDataOffset","_OrtAddRunConfigEntry","_OrtReleaseRunOptions","alloc","_free","runtimeInitialized","path","modelData","fetches","inputArray","entries","kvp","setSessionOptions","sessionOptionsHandle","sessionOptions","use_ort_model_bytes_directly","executionProviders","ep","enableMemPattern","appendDefaultOptions","graphOptimizationLevel","getGraphOptimzationLevel","executionMode","getExecutionMode","logIdDataOffset","logId","optimizedModelFilePathOffset","optimizedModelFilePath","_OrtCreateSessionOptions","enableCpuMemArena","enableProfiling","epName","webnnOptions","deviceType","_OrtAddSessionConfigEntry","powerPreference","epNameDataOffset","_OrtAppendExecutionProvider","setExecutionProviders","_OrtReleaseSessionOptions","tensorDataTypeStringToEnum","tensorDataTypeEnumToString","getTensorElementSize","dateType","tensorTypeToTypedArrayConstructor","BigUint64Array","logLevelStringToEnum","loggingLevel","_OrtInit","activeSessions","modelDataOffset","_malloc","HEAPU8","sessionHandle","inputNamesUTF8Encoded","outputNamesUTF8Encoded","_OrtCreateSession","outputCount","stackSave","dataOffset","stackAlloc","_OrtGetInputOutputCount","HEAP32","stackRestore","getSessionInputOutputCount","_OrtGetInputName","UTF8ToString","_OrtGetOutputName","_OrtFree","_OrtReleaseSession","runOptionsAllocs","inputValues","inputAllocs","dataByteLength","HEAPU32","dimIndex","_OrtCreateTensor","beforeRunStack","inputValuesOffset","inputNamesOffset","outputValuesOffset","outputNamesOffset","inputValuesIndex","inputNamesIndex","outputValuesIndex","outputNamesIndex","errorCode","_OrtRun","runPromise","jsepRunPromise","beforeGetTensorDataStack","tensorDataOffset","_OrtGetTensorData","tensorDataIndex","maxBytesToRead","_OrtReleaseTensor","profileFileName","_OrtEndProfiling","buffers","ortWasmFactory","ortWasmFactoryThreaded","flags","timeout","useThreads","SharedArrayBuffer","MessageChannel","port1","WebAssembly","validate","isMultiThreadSupported","useSimd","isSimdSupported","wasmPrefixOverride","wasmFileName","getWasmFileName","wasmPathOverride","isTimeout","tasks","locateFile","fileName","scriptDirectory","Blob","URL","createObjectURL","mainScriptUrlOrBlob","__dirname","scriptSourceCode","what","race","PThread","terminateAllThreads","dataLength","lengthBytesUTF8","stringToUTF8","prefix","seen","paramsOffset","_OrtGetLastError","errorMessagePointer","errorMessage","Worker_fn","workerConstructor","workerOptions","url","globalScope","window","blob","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","append","getBlob","webkitURL","objectURL","worker","revokeObjectURL","encodeURIComponent","valuesById","$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Version","properties","sparseTensors","typeProtos","prototype","refAttrName","newBuffer","sparseTensor","tp","emptyArray","writer","uint32","string","float","int64","fork","ldelim","TypeProto","int32","SparseTensorProto","encodeDelimited","reader","end2","skipType","decodeDelimited","verify","isString","fromObject","object","String","LongBits","base64","toObject","arrays","defaults","long","longs","enums","json","isFinite","toJSON","toJSONOptions","getTypeUrl","typeUrlPrefix","ValueInfoProto","TrainingInfoProto","initializationBinding","updateBinding","initialization","algorithm","StringStringEntryProto","metadataProps","trainingInfo","functions","OperatorSetIdProto","FunctionProto","TensorAnnotation","quantParameterTensorNames","tensorName","sparseInitializer","quantizationAnnotation","externalData","segment","dataLocation","Segment","double","uint64","DataLocation","TensorShapeProto","$oneOfFields","defineProperty","oneOfGetter","oneOfSetter","oneofs","sequenceType","mapType","optionalType","sparseTensorType","Sequence","Optional","OperatorStatus","attributeProto","_scriptDir","__filename","F","W","Y","H","U","u","ready","l","h","m","importScripts","ENVIRONMENT_IS_PTHREAD","O","dirname","startsWith","normalize","readFileSync","thisProgram","argv","exitCode","inspect","global","Worker","href","XMLHttpRequest","open","send","responseText","responseType","onload","onerror","T","writeSync","S","A","print","R","printErr","quit","wasmBinary","E","noExitRuntime","ee","I","P","HEAP8","HEAP16","HEAPU16","HEAPF32","HEAPF64","G","INITIAL_MEMORY","wasmMemory","Memory","initial","maximum","shared","L","z","q","J","V","$","Z","monitorRunDependencies","Q","clearInterval","onAbort","RuntimeError","te","re","ne","credentials","ok","catch","instantiate","ae","oe","ie","he","Fa","ue","Za","Ia","Ha","cmd","start_routine","gb","Ya","pthread_ptr","unref","mb","se","fe","fromCharCode","ce","le","qe","hb","onExit","de","pe","La","Ta","Pa","ab","$a","receiveObjectTransfer","eb","threadInitTLS","Sa","setExitStatus","Ra","rb","gt","cb","targetThread","lt","qb","transferList","Pe","thread","loaded","alert","threadId","text","args","filename","lineno","on","handlers","urlOrBlob","wasmModule","Xa","me","establishStackSpace","_t","Ot","ge","be","Oa","Wa","Va","Ua","ye","ve","ob","_e","we","invokeEntryPoint","bt","Oe","charCodeAt","Me","Te","Se","Ae","Re","Ee","Fe","De","Ce","Ie","ke","xe","Ye","He","Ue","Atomics","nb","store","yt","__emscripten_thread_mailbox_await","checkMailbox","We","Ge","Le","Ne","je","Be","dt","ze","wt","arguments","Mt","pt","Je","Ke","Ve","Xe","USER","LOGNAME","PATH","PWD","HOME","LANG","languages","$e","Ze","Qe","et","tt","rt","nt","at","crypto","getRandomValues","randomFillSync","randomBytes","ot","it","ut","st","getFullYear","getMonth","getDate","getDay","Ja","Ka","getTime","setDate","setMonth","setFullYear","kb","jb","Ma","Qa","Na","Ga","sb","ib","lb","includes","ft","ct","ht","ref","NaN","getUTCSeconds","getUTCMinutes","getUTCHours","getUTCDate","getUTCMonth","getUTCFullYear","getUTCDay","UTC","getSeconds","getMinutes","getHours","getTimezoneOffset","setTime","getYear","vt","toTimeString","timeOrigin","pb","apply","grow","__errno_location","pthread_self","malloc","sa","ta","instantiateWasm","instantiateStreaming","instance","aa","ba","da","ea","fa","ga","ha","ia","ja","ka","la","ma","na","oa","_pthread_self","pa","qa","ra","__emscripten_tls_init","__emscripten_thread_init","ua","__emscripten_thread_crashed","va","mt","wa","xa","__emscripten_thread_exit","ya","__emscripten_check_mailbox","za","Aa","Ba","Ca","Da","Ea","Tt","calledRun","onRuntimeInitialized","postRun","startWorker","preRun","setStatus","keepRuntimeAlive","ExitStatus","preInit","ortWasm","moduleArg","fs","copyWithin","fn","pending","b64","s64","parts","chunk","invalidEncoding","test","EventEmitter","_listeners","evt","off","listeners","emit","f32","f8b","writeFloat_f32_cpy","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","round","exponent","LN2","readFloat_ieee754","readUint","uint","mantissa","Infinity","writeUintLE","writeUintBE","readUintLE","readUintBE","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","inquire","moduleName","mod","eval","SIZE","MAX","slab","utf8","read","write","c1","c2","__esModule","guid","EMPTY","isGuid","validator","gen","createEmpty","raw","random","equals","other","isEmpty","protobuf","configure","_configure","BufferWriter","BufferReader","rpc","indexOutOfRange","writeLength","create_array","Buffer","isBuffer","readLongVarint","bits","readFixed32_end","readFixed64","_slice","sint32","bool","fixed32","sfixed32","skip","wireType","BufferReader_","merge","sint64","zzDecode","fixed64","sfixed64","utf8Slice","Service","rpcImpl","requestDelimited","responseDelimited","Boolean","rpcCall","method","requestCtor","responseCtor","request","callback","asPromise","endedByRPC","zero","zzEncode","zeroHash","fromNumber","fromString","toLong","fromHash","hash","toHash","mask","part0","part1","part2","dst","ifNotSet","newError","CustomError","captureStackTrace","writable","enumerable","configurable","pool","isNode","freeze","emptyObject","isObject","isset","isSet","prop","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","lcFirst","toLowerCase","ProtocolError","fieldNames","fieldMap","encoding","allocUnsafe","Op","noop","State","states","writeByte","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","default","Instance","Module","ctz32","clz32","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","radix","radixToPower","power","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","eq","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","comp","lessThanOrEqual","lte","greaterThan","gte","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","b00","divide","divisor","approx","toUnsigned","shru","shr","shl","log2","delta","approxRes","approxRem","modulo","countLeadingZeros","clz","countTrailingZeros","ctz","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","rotateLeft","rotl","rotateRight","rotr","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","_default","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","float32","float64","toFloat64","Builder","opt_initial_size","initial_size","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","clear","capacity","forceDefaults","asUint8Array","additional_bytes","align_size","old_buf_size","growByteBuffer","byte_size","writeInt8","writeInt16","writeInt64","writeFloat32","writeFloat64","addInt16","addFloat64","voffset","slot","addFieldInt16","addFieldFloat64","addFieldStruct","nested","notNested","new_buf_size","nbb","numfields","vtableloc","trimmed_size","existing_vtable","vt1","outer_loop","vt2","readInt16","root_table","opt_file_identifier","opt_size_prefix","size_prefix","file_identifier","finishSizePrefixed","table","field","table_start","vtable_start","elem_size","num_elems","alignment","createString","codePoint","bytes_","position_","readUint16","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","vtable_offset","opt_encoding","ident","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","definition","Symbol","toStringTag","__webpack_exports__"],"sourceRoot":""}